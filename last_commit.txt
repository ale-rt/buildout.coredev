Repository: plone.supermodel


Branch: refs/heads/master
Date: 2016-10-14T07:27:14+02:00
Author: Markus Hilbert (iham) <m.hilbert@akbild.ac.at>
Commit: https://github.com/plone/plone.supermodel/commit/141731e9db468337a9d9645928253c872c2077cc

Fixed #16.

Files changed:
M plone/supermodel/utils.py

diff --git a/plone/supermodel/utils.py b/plone/supermodel/utils.py
index 5226662..5adaf36 100644
--- a/plone/supermodel/utils.py
+++ b/plone/supermodel/utils.py
@@ -8,6 +8,7 @@
 from zope.interface import directlyProvidedBy
 from zope.interface import directlyProvides
 from zope.schema.interfaces import ICollection
+from zope.schema.interfaces import IChoice
 from zope.schema.interfaces import IDict
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import IFromUnicode
@@ -130,8 +131,11 @@ def elementToValue(field, element, default=_marker):
         if text is None:
             value = field.missing_value
         else:
-            converter = IFromUnicode(field)
-            value = converter.fromUnicode(unicode(text))
+            if IChoice.providedBy(field) and text.isdigit():
+                value = int(text)
+            else:
+                converter = IFromUnicode(field)
+                value = converter.fromUnicode(unicode(text))
 
         # handle i18n
         if isinstance(value, unicode) and parseinfo.i18n_domain is not None:


Repository: plone.supermodel


Branch: refs/heads/master
Date: 2016-10-14T07:51:06+02:00
Author: Markus Hilbert (iham) <m.hilbert@akbild.ac.at>
Commit: https://github.com/plone/plone.supermodel/commit/5cbb86e197ef79a829d9179eff20bbb52e0b6fe3

Fixed #16.

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index c90f274..46680fc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Fixed unicode-handling of integer values for IChoice. #16
+  [iham]
+
 - *add item here*
 
 


Repository: plone.supermodel


Branch: refs/heads/master
Date: 2016-10-24T08:03:39+02:00
Author: Markus Hilbert (iham) <m.hilbert@akbild.ac.at>
Commit: https://github.com/plone/plone.supermodel/commit/04473cd86de352ee282d01d51f6507c7256ad5a4

fixed #16 with a different solution.

Files changed:
M CHANGES.rst
M plone/supermodel/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 46680fc..15ee776 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Fixed unicode-handling of integer values for IChoice. #16
+- Fixed typecasting of IChoice based on its vocabulary. #16
   [iham]
 
 - *add item here*
diff --git a/plone/supermodel/utils.py b/plone/supermodel/utils.py
index 5adaf36..f06d7e3 100644
--- a/plone/supermodel/utils.py
+++ b/plone/supermodel/utils.py
@@ -4,14 +4,19 @@
 from plone.supermodel.interfaces import I18N_NAMESPACE
 from plone.supermodel.interfaces import IToUnicode
 from plone.supermodel.interfaces import XML_NAMESPACE
+
+from zope.component import getUtility
+
 from zope.i18nmessageid import Message
 from zope.interface import directlyProvidedBy
 from zope.interface import directlyProvides
-from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import IChoice
+from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import IDict
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import IFromUnicode
+from zope.schema.interfaces import IVocabularyFactory
+
 import os.path
 import re
 import sys
@@ -125,17 +130,30 @@ def elementToValue(field, element, default=_marker):
             parseinfo.stack.pop()
         value = fieldTypecast(field, value)
 
+    elif IChoice.providedBy(field):
+        vocabulary = None
+        try:
+            vcf = getUtility(IVocabularyFactory, field.vocabularyName)
+            vocabulary = vcf(None)
+        except:
+            pass
+
+        if vocabulary and hasattr(vocabulary, 'by_value'):
+            try:
+                field._type = type(vocabulary.by_value.keys()[0])
+            except:
+                pass
+
+        value = fieldTypecast(field, element.text)
+
     # Unicode
     else:
         text = element.text
         if text is None:
             value = field.missing_value
         else:
-            if IChoice.providedBy(field) and text.isdigit():
-                value = int(text)
-            else:
-                converter = IFromUnicode(field)
-                value = converter.fromUnicode(unicode(text))
+            converter = IFromUnicode(field)
+            value = converter.fromUnicode(unicode(text))
 
         # handle i18n
         if isinstance(value, unicode) and parseinfo.i18n_domain is not None:


Repository: plone.supermodel


Branch: refs/heads/master
Date: 2017-06-01T10:52:48+02:00
Author: Markus Hilbert (iham) <m.hilbert@akbild.ac.at>
Commit: https://github.com/plone/plone.supermodel/commit/b76f9448b3b64c56547273f9cece03625e3511f6

fixed tests.

Files changed:
M plone/supermodel/fields.rst

diff --git a/plone/supermodel/fields.rst b/plone/supermodel/fields.rst
index a7203ad..b245cea 100644
--- a/plone/supermodel/fields.rst
+++ b/plone/supermodel/fields.rst
@@ -1269,9 +1269,9 @@ These can be both exported and imported.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default # note - value is always unicode
-    u'a'
+    'a'
     >>> reciprocal.missing_value # note - value is always unicode
-    u''
+    ''
     >>> reciprocal.vocabulary is None
     True
     >>> reciprocal.vocabularyName
@@ -1320,9 +1320,9 @@ a unicode string when importing.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default
-    u'a'
+    'a'
     >>> reciprocal.missing_value
-    u''
+    ''
     >>> [t.value for t in reciprocal.vocabulary]
     [u'a', u'b', u'c']
     >>> reciprocal.vocabularyName is None
@@ -1462,7 +1462,7 @@ be specified via an importable dotted name.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default
-    u'a'
+    'a'
     >>> reciprocal.vocabulary is plone.supermodel.tests.dummy_binder
     True
     >>> reciprocal.vocabularyName is None
@@ -1493,7 +1493,7 @@ be specified via an importable dotted name.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default
-    u'a'
+    'a'
     >>> reciprocal.vocabulary is plone.supermodel.tests.dummy_vocabulary_instance
     True
     >>> reciprocal.vocabularyName is None


Repository: plone.supermodel


Branch: refs/heads/master
Date: 2017-06-01T12:15:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.supermodel/commit/62d461634a61ef03f8ab1df5c435fd2aaa63ad26

Merge pull request #17 from plone/issue_16

Fixed #16.

Files changed:
M CHANGES.rst
M plone/supermodel/fields.rst
M plone/supermodel/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ba490d0..a5d4e8b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Fixed typecasting of IChoice based on its vocabulary. #16
+  [iham]
+
 - *add item here*
 
 
diff --git a/plone/supermodel/fields.rst b/plone/supermodel/fields.rst
index a7203ad..b245cea 100644
--- a/plone/supermodel/fields.rst
+++ b/plone/supermodel/fields.rst
@@ -1269,9 +1269,9 @@ These can be both exported and imported.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default # note - value is always unicode
-    u'a'
+    'a'
     >>> reciprocal.missing_value # note - value is always unicode
-    u''
+    ''
     >>> reciprocal.vocabulary is None
     True
     >>> reciprocal.vocabularyName
@@ -1320,9 +1320,9 @@ a unicode string when importing.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default
-    u'a'
+    'a'
     >>> reciprocal.missing_value
-    u''
+    ''
     >>> [t.value for t in reciprocal.vocabulary]
     [u'a', u'b', u'c']
     >>> reciprocal.vocabularyName is None
@@ -1462,7 +1462,7 @@ be specified via an importable dotted name.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default
-    u'a'
+    'a'
     >>> reciprocal.vocabulary is plone.supermodel.tests.dummy_binder
     True
     >>> reciprocal.vocabularyName is None
@@ -1493,7 +1493,7 @@ be specified via an importable dotted name.
     >>> reciprocal.readonly
     True
     >>> reciprocal.default
-    u'a'
+    'a'
     >>> reciprocal.vocabulary is plone.supermodel.tests.dummy_vocabulary_instance
     True
     >>> reciprocal.vocabularyName is None
diff --git a/plone/supermodel/utils.py b/plone/supermodel/utils.py
index 5226662..f06d7e3 100644
--- a/plone/supermodel/utils.py
+++ b/plone/supermodel/utils.py
@@ -4,13 +4,19 @@
 from plone.supermodel.interfaces import I18N_NAMESPACE
 from plone.supermodel.interfaces import IToUnicode
 from plone.supermodel.interfaces import XML_NAMESPACE
+
+from zope.component import getUtility
+
 from zope.i18nmessageid import Message
 from zope.interface import directlyProvidedBy
 from zope.interface import directlyProvides
+from zope.schema.interfaces import IChoice
 from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import IDict
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import IFromUnicode
+from zope.schema.interfaces import IVocabularyFactory
+
 import os.path
 import re
 import sys
@@ -124,6 +130,22 @@ def elementToValue(field, element, default=_marker):
             parseinfo.stack.pop()
         value = fieldTypecast(field, value)
 
+    elif IChoice.providedBy(field):
+        vocabulary = None
+        try:
+            vcf = getUtility(IVocabularyFactory, field.vocabularyName)
+            vocabulary = vcf(None)
+        except:
+            pass
+
+        if vocabulary and hasattr(vocabulary, 'by_value'):
+            try:
+                field._type = type(vocabulary.by_value.keys()[0])
+            except:
+                pass
+
+        value = fieldTypecast(field, element.text)
+
     # Unicode
     else:
         text = element.text


