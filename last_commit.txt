Repository: plone.app.iterate


Branch: refs/heads/2.1.x
Date: 2016-04-15T17:16:00+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.iterate/commit/bc1d7fc9909235cd78e4d2357f291f1388d38093

no special case that enables checkout via GET

Files changed:
M CHANGES.txt
M plone/app/iterate/browser/checkout.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 16e5ea2..17abc32 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- no special case that enables checkout via GET
+  [gotcha]
 
 
 2.1.15 (2016-03-11)
diff --git a/plone/app/iterate/browser/checkout.py b/plone/app/iterate/browser/checkout.py
index 89b6e65..c8758be 100644
--- a/plone/app/iterate/browser/checkout.py
+++ b/plone/app/iterate/browser/checkout.py
@@ -50,12 +50,6 @@ def containers(self):
     def __call__(self):
         context = aq_inner(self.context)
 
-        containers = list(self.containers())
-        if len(containers) == 1:
-            # Special case for when there's only when folder to select
-            self.request.form['form.button.Checkout'] = 1
-            self.request.form['checkout_location'] = containers[0]['name']
-
         # We want to redirect to a specific template, else we might
         # end up downloading a file
         if self.request.form.has_key('form.button.Checkout'):


Repository: plone.app.iterate


Branch: refs/heads/2.1.x
Date: 2016-04-18T11:33:56+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.iterate/commit/3aedf4ec2ebb5f1c2934a224626ad43f8fae10ff

add buildout for easier testing

Files changed:
A bootstrap.py
A buildout.cfg
M .gitignore

diff --git a/.gitignore b/.gitignore
index d4916dd..1981dd0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,8 +1,8 @@
+.installed.cfg
+bin/
+develop-eggs/
+include/
+lib/
+parts/
+var/
 *.egg-info
-*.mo
-*.pyc
-*.pyo
-*.swo
-*.swp
-build
-dist
diff --git a/bootstrap.py b/bootstrap.py
new file mode 100644
index 0000000..a459921
--- /dev/null
+++ b/bootstrap.py
@@ -0,0 +1,210 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
+
+options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
+
+######################################################################
+# load/install setuptools
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..2e8b506
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,7 @@
+[buildout]
+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-4.3.x.cfg
+package-name = plone.app.iterate
+package-extras = [test]
+
+[versions]
+plone.app.iterate =


Repository: plone.app.iterate


Branch: refs/heads/2.1.x
Date: 2016-04-18T11:45:55+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.iterate/commit/9d06c7e3dea6cb48825db7b65e64f3282209b91a

do not display radio button when there is no choice

Files changed:
M plone/app/iterate/browser/checkout.pt

diff --git a/plone/app/iterate/browser/checkout.pt b/plone/app/iterate/browser/checkout.pt
index 58674d2..82353e9 100644
--- a/plone/app/iterate/browser/checkout.pt
+++ b/plone/app/iterate/browser/checkout.pt
@@ -1,6 +1,7 @@
 <html metal:use-macro="context/@@standard_macros/page" i18n:domain="plone">
 
-<div id="content" metal:fill-slot="body">
+<div id="content" metal:fill-slot="body" 
+     tal:define="containers python:list(view.containers())">
 
     <form action="#"
         method="post"
@@ -16,8 +17,18 @@
         container, and the original will be locked to prevent other users from
         editing it.
     </p>
-    
-    <fieldset>
+   
+    <tal:one_container tal:condition="python:len(containers)==1">
+    <input 
+        type="hidden" 
+        name="checkout_location"
+        tal:define = "item python:containers[0]"
+        tal:attributes="id string:checkout_location_${item/name};
+                        value item/name"
+        />
+    </tal:one_container>
+
+    <fieldset tal:condition="python:len(containers)!=1">
         
         <legend i18n:translate="legend_details">Details</legend>
 
@@ -30,7 +41,7 @@
                 Select the folder to checkout to.
             </div>
          
-            <div tal:repeat="item view/containers">
+            <div tal:repeat="item containers">
                 
                 <input 
                     type="radio" 


Repository: plone.app.iterate


Branch: refs/heads/2.1.x
Date: 2016-05-02T17:27:42+02:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.iterate/commit/bae851e1dfa704577bed9602e6487555ba5b2438

fix tests

Files changed:
M plone/app/iterate/tests/browser.txt

diff --git a/plone/app/iterate/tests/browser.txt b/plone/app/iterate/tests/browser.txt
index 5b0a650..24887ad 100644
--- a/plone/app/iterate/tests/browser.txt
+++ b/plone/app/iterate/tests/browser.txt
@@ -40,6 +40,9 @@ Let's check out the document.  For this, we'll go to the *Check out*
 form directly.  From there, we'll check out to the parent folder:
 
   >>> browser.getLink('Check out').click()
+  >>> 'form.button.Checkout' in browser.contents
+  True
+  >>> browser.getControl(name='form.button.Checkout').click()
   >>> 'This is a working copy' in browser.contents
   True
   >>> browser.url
@@ -103,6 +106,9 @@ check out published pages:
 
   >>> browser.open(portal.absolute_url() + '/hello-world')
   >>> browser.getLink("Check out").click()
+  >>> 'form.button.Checkout' in browser.contents
+  True
+  >>> browser.getControl(name='form.button.Checkout').click()
   >>> "Check-out created" in browser.contents
   True
 
@@ -169,6 +175,9 @@ Check out the folder.
 
   >>> browser.getLink('Foo Folder').click()
   >>> browser.getLink('Check out').click()
+  >>> 'form.button.Checkout' in browser.contents
+  True
+  >>> browser.getControl(name='form.button.Checkout').click()
   >>> 'This is a working copy' in browser.contents
   True
   >>> wc_url = browser.url


Repository: plone.app.iterate


Branch: refs/heads/2.1.x
Date: 2016-05-03T15:02:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.iterate/commit/1bfb9c3becfd0f7cd766953bdf96871c98f75303

Merge pull request #25 from plone/no_checkout_via_GET

No checkout via GET method

Files changed:
A bootstrap.py
A buildout.cfg
M .gitignore
M CHANGES.txt
M plone/app/iterate/browser/checkout.pt
M plone/app/iterate/browser/checkout.py
M plone/app/iterate/tests/browser.txt

diff --git a/.gitignore b/.gitignore
index d4916dd..1981dd0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,8 +1,8 @@
+.installed.cfg
+bin/
+develop-eggs/
+include/
+lib/
+parts/
+var/
 *.egg-info
-*.mo
-*.pyc
-*.pyo
-*.swo
-*.swp
-build
-dist
diff --git a/CHANGES.txt b/CHANGES.txt
index 16e5ea2..17abc32 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- no special case that enables checkout via GET
+  [gotcha]
 
 
 2.1.15 (2016-03-11)
diff --git a/bootstrap.py b/bootstrap.py
new file mode 100644
index 0000000..a459921
--- /dev/null
+++ b/bootstrap.py
@@ -0,0 +1,210 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
+
+options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
+
+######################################################################
+# load/install setuptools
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..2e8b506
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,7 @@
+[buildout]
+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-4.3.x.cfg
+package-name = plone.app.iterate
+package-extras = [test]
+
+[versions]
+plone.app.iterate =
diff --git a/plone/app/iterate/browser/checkout.pt b/plone/app/iterate/browser/checkout.pt
index 58674d2..82353e9 100644
--- a/plone/app/iterate/browser/checkout.pt
+++ b/plone/app/iterate/browser/checkout.pt
@@ -1,6 +1,7 @@
 <html metal:use-macro="context/@@standard_macros/page" i18n:domain="plone">
 
-<div id="content" metal:fill-slot="body">
+<div id="content" metal:fill-slot="body" 
+     tal:define="containers python:list(view.containers())">
 
     <form action="#"
         method="post"
@@ -16,8 +17,18 @@
         container, and the original will be locked to prevent other users from
         editing it.
     </p>
-    
-    <fieldset>
+   
+    <tal:one_container tal:condition="python:len(containers)==1">
+    <input 
+        type="hidden" 
+        name="checkout_location"
+        tal:define = "item python:containers[0]"
+        tal:attributes="id string:checkout_location_${item/name};
+                        value item/name"
+        />
+    </tal:one_container>
+
+    <fieldset tal:condition="python:len(containers)!=1">
         
         <legend i18n:translate="legend_details">Details</legend>
 
@@ -30,7 +41,7 @@
                 Select the folder to checkout to.
             </div>
          
-            <div tal:repeat="item view/containers">
+            <div tal:repeat="item containers">
                 
                 <input 
                     type="radio" 
diff --git a/plone/app/iterate/browser/checkout.py b/plone/app/iterate/browser/checkout.py
index 89b6e65..c8758be 100644
--- a/plone/app/iterate/browser/checkout.py
+++ b/plone/app/iterate/browser/checkout.py
@@ -50,12 +50,6 @@ def containers(self):
     def __call__(self):
         context = aq_inner(self.context)
 
-        containers = list(self.containers())
-        if len(containers) == 1:
-            # Special case for when there's only when folder to select
-            self.request.form['form.button.Checkout'] = 1
-            self.request.form['checkout_location'] = containers[0]['name']
-
         # We want to redirect to a specific template, else we might
         # end up downloading a file
         if self.request.form.has_key('form.button.Checkout'):
diff --git a/plone/app/iterate/tests/browser.txt b/plone/app/iterate/tests/browser.txt
index 5b0a650..24887ad 100644
--- a/plone/app/iterate/tests/browser.txt
+++ b/plone/app/iterate/tests/browser.txt
@@ -40,6 +40,9 @@ Let's check out the document.  For this, we'll go to the *Check out*
 form directly.  From there, we'll check out to the parent folder:
 
   >>> browser.getLink('Check out').click()
+  >>> 'form.button.Checkout' in browser.contents
+  True
+  >>> browser.getControl(name='form.button.Checkout').click()
   >>> 'This is a working copy' in browser.contents
   True
   >>> browser.url
@@ -103,6 +106,9 @@ check out published pages:
 
   >>> browser.open(portal.absolute_url() + '/hello-world')
   >>> browser.getLink("Check out").click()
+  >>> 'form.button.Checkout' in browser.contents
+  True
+  >>> browser.getControl(name='form.button.Checkout').click()
   >>> "Check-out created" in browser.contents
   True
 
@@ -169,6 +175,9 @@ Check out the folder.
 
   >>> browser.getLink('Foo Folder').click()
   >>> browser.getLink('Check out').click()
+  >>> 'form.button.Checkout' in browser.contents
+  True
+  >>> browser.getControl(name='form.button.Checkout').click()
   >>> 'This is a working copy' in browser.contents
   True
   >>> wc_url = browser.url


