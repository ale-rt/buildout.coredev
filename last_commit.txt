Repository: Products.ExtendedPathIndex


Branch: refs/heads/master
Date: 2017-12-28T17:38:25-05:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.ExtendedPathIndex/commit/dd09ba9eab773cc681b6ac65913f9e1a3dca91e9

Make compatible with Python 3

Files changed:
A .travis.yml
A tox.ini
M .gitignore
M CHANGES.txt
M Products/ExtendedPathIndex/ExtendedPathIndex.py
M Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
M buildout.cfg
M setup.py

diff --git a/.gitignore b/.gitignore
index b03f390..aa86c4d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,6 +3,7 @@
 *.pyo
 .installed.cfg
 .mr.developer.cfg
+.tox
 bin
 build
 develop-eggs
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..e002327
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,21 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.4
+    - 3.5
+    - 3.6
+install:
+    - pip install six==1.10.0  # force here to avoid conflict with zc.recipe.testrunner
+    - pip install -U setuptools==33.1.1
+    - pip install zc.buildout
+    - buildout bootstrap
+    - buildout
+script:
+    - bin/test -v1
+notifications:
+    email: false
+cache:
+  pip: true
+  directories:
+    - eggs/
diff --git a/CHANGES.txt b/CHANGES.txt
index 71dc44a..6991a4a 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,8 +1,8 @@
 Changelog
 =========
 
-3.2.1 (unreleased)
-------------------
+3.3 (unreleased)
+----------------
 
 Breaking changes:
 
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add compatibility with Python 3.
 
 Bug fixes:
 
diff --git a/Products/ExtendedPathIndex/ExtendedPathIndex.py b/Products/ExtendedPathIndex/ExtendedPathIndex.py
index 6332a50..22087a2 100644
--- a/Products/ExtendedPathIndex/ExtendedPathIndex.py
+++ b/Products/ExtendedPathIndex/ExtendedPathIndex.py
@@ -1,14 +1,13 @@
-import logging
-
 from App.special_dtml import DTMLFile
 from BTrees.IIBTree import IISet, IITreeSet, intersection, union, multiunion
-from BTrees.OOBTree import OOBTree
 from BTrees.OIBTree import OIBTree
-from zope.interface import implementer
-
+from BTrees.OOBTree import OOBTree
 from Products.PluginIndexes.common import safe_callable
 from Products.PluginIndexes.interfaces import ILimitedResultIndex
 from Products.PluginIndexes.PathIndex.PathIndex import PathIndex
+from six import string_types
+from zope.interface import implementer
+import logging
 
 # Forward compatibility with ZCatalog 4.0
 try:
@@ -71,7 +70,8 @@ def __init__(self, id, extra=None, caller=None):
 
         if isinstance(attrs, str):
             attrs = attrs.split(',')
-        attrs = filter(None, [a.strip() for a in attrs])
+        attrs = [a.strip() for a in attrs]
+        attrs = [a for a in attrs if a]
 
         if attrs:
             # We only index the first attribute so snip off the rest
@@ -108,7 +108,7 @@ def index_object(self, docid, obj, threshold=100):
 
         if isinstance(path, (list, tuple)):
             path = '/' + '/'.join(path[1:])
-        comps = filter(None, path.split('/'))
+        comps = [p for p in path.split('/') if p]
 
         # Make sure we reindex properly when path change
         old_path = self._unindex.get(docid, _marker)
@@ -153,7 +153,7 @@ def unindex_object(self, docid, _old=_marker):
                 return
 
         # There is an assumption that paths start with /
-        comps = filter(None, old_value.split('/'))
+        comps = [p for p in old_value.split('/') if p]
 
         def unindex(comp, level, docid=docid):
             index_comp = self._index[comp]
@@ -214,7 +214,7 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
         that level and up will be included in the resultset.
 
         """
-        if isinstance(path, basestring):
+        if isinstance(path, string_types):
             level = default_level
         else:
             level = int(path[1])
@@ -224,9 +224,9 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
             # Search at every level, return the union of all results
             return multiunion(
                 [self.search(path, level, depth, navtree, navtree_start)
-                 for level in xrange(self._depth + 1)])
+                 for level in range(self._depth + 1)])
 
-        comps = filter(None, path.split('/'))
+        comps = [p for p in path.split('/') if p]
 
         if navtree and depth == -1:  # Navtrees don't do recursive
             depth = 1
@@ -274,10 +274,10 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
         # There is an assumption about all indexed values having the
         # same common base path
         if level == 0:
-            indexpath = list(filter(None, self.getPhysicalPath()))
+            indexpath = [p for p in self.getPhysicalPath() if p]
             minlength = min(len(indexpath), len(comps))
             # Truncate path to first different element
-            for i in xrange(minlength):
+            for i in range(minlength):
                 if indexpath[i] != comps[i]:
                     break
                 level += 1
@@ -326,9 +326,11 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
             start = len(comps) - 1
             if navtree:
                 start = max(start, (navtree_start - level))
-            depthset = multiunion(filter(None, [depthset] + [
+            depthset = [depthset] + [
                 intersection(pathset, self._index.get(None, {}).get(i + level))
-                for i in xrange(start, start + depth + 1)]))
+                for i in range(start, start + depth + 1)
+            ]
+            depthset = multiunion([d for d in depthset if d])
 
         if navtree or depth >= 0:
             return depthset
diff --git a/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py b/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
index 83b8c11..d505a1a 100644
--- a/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
+++ b/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
@@ -250,7 +250,7 @@ def testNegativeDepthQuery(self):
         self._populateIndex()
         tests = [
             # path, level, expected results
-            ('/', 0, range(1, 19)),
+            ('/', 0, list(range(1, 19))),
             ('/aa', 0, [2, 3, 4, 5, 6, 7, 8, 9]),
             ('/aa/aa', 0, [3, 4]),
             ('/aa/bb', 0, [5, 6, 7, 9]),
@@ -286,8 +286,8 @@ def testPhysicalPathOptimization(self):
             ('/', 0, False, []),  # Depth Zero tests
             ('/aa', 0, False, [8]),
             ('/aa/aa', 0, False, []),
-            ('/', -1, False, range(1, 19)),  # Depth -1
-            ('/aa', -1, False, range(1, 19)),  # Should assume that all
+            ('/', -1, False, list(range(1, 19))),  # Depth -1
+            ('/aa', -1, False, list(range(1, 19))),  # Should assume that all
                                                # paths are relevant
             ((('aa/aa', 1), ), -1, False, [4, 14]),  # A (path, level) tuple,
                                                      # relative search
diff --git a/buildout.cfg b/buildout.cfg
index 47f982f..ec7c996 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,8 +1,7 @@
 [buildout]
-extends = http://dist.plone.org/release/5-latest/versions.cfg
+extends = https://raw.githubusercontent.com/zopefoundation/Zope/master/versions.cfg
 
 develop = .
-package-name = Products.ExtendedPathIndex
 parts = test
 versions = versions
 
@@ -11,6 +10,6 @@ Products.ExtendedPathIndex =
 
 [test]
 recipe = zc.recipe.testrunner
-defaults = ['-s', '${buildout:package-name}', '--auto-color', '--auto-progress']
+defaults = ['-s', 'Products.ExtendedPathIndex', '--auto-color', '--auto-progress']
 eggs =
-    ${buildout:package-name}
+    Products.ExtendedPathIndex
diff --git a/setup.py b/setup.py
index a41b9c5..2762047 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '3.2.1.dev0'
+version = '3.3.dev0'
 
 setup(
     name='Products.ExtendedPathIndex',
@@ -18,8 +18,10 @@
         "License :: OSI Approved :: GNU General Public License (GPL)",
         "Operating System :: OS Independent",
         "Programming Language :: Python",
-        "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.4",
+        "Programming Language :: Python :: 3.5",
+        "Programming Language :: Python :: 3.6",
       ],
     keywords='Zope catalog index',
     author='Plone Foundation',
@@ -33,6 +35,8 @@
     install_requires=[
         'setuptools',
         'AccessControl',
+        'Products.ZCatalog',
+        'six',
         'transaction',
         'ZODB3',
         'Zope2 >= 2.13.0a3',
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..bc5f52b
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,16 @@
+[tox]
+envlist =
+   py27,
+   py34,
+   py35,
+   py36
+
+[testenv]
+commands =
+    {envbindir}/buildout -c {toxinidir}/buildout.cfg buildout:directory={envdir} buildout:develop={toxinidir} bootstrap
+    {envbindir}/buildout -c {toxinidir}/buildout.cfg buildout:directory={envdir} buildout:develop={toxinidir}
+    {envbindir}/test -v1
+skip_install = true
+deps =
+    setuptools==33.1.1
+    zc.buildout


Repository: Products.ExtendedPathIndex


Branch: refs/heads/master
Date: 2018-01-03T15:07:45+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.ExtendedPathIndex/commit/379b5a23aa6a79154a0af9e4f0b2fc360c1c0541

Merge pull request #4 from plone/py3

Make compatible with Python 3

Files changed:
A .travis.yml
A tox.ini
M .gitignore
M CHANGES.txt
M Products/ExtendedPathIndex/ExtendedPathIndex.py
M Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
M buildout.cfg
M setup.py

diff --git a/.gitignore b/.gitignore
index b03f390..aa86c4d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,6 +3,7 @@
 *.pyo
 .installed.cfg
 .mr.developer.cfg
+.tox
 bin
 build
 develop-eggs
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..e002327
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,21 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.4
+    - 3.5
+    - 3.6
+install:
+    - pip install six==1.10.0  # force here to avoid conflict with zc.recipe.testrunner
+    - pip install -U setuptools==33.1.1
+    - pip install zc.buildout
+    - buildout bootstrap
+    - buildout
+script:
+    - bin/test -v1
+notifications:
+    email: false
+cache:
+  pip: true
+  directories:
+    - eggs/
diff --git a/CHANGES.txt b/CHANGES.txt
index 71dc44a..6991a4a 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,8 +1,8 @@
 Changelog
 =========
 
-3.2.1 (unreleased)
-------------------
+3.3 (unreleased)
+----------------
 
 Breaking changes:
 
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add compatibility with Python 3.
 
 Bug fixes:
 
diff --git a/Products/ExtendedPathIndex/ExtendedPathIndex.py b/Products/ExtendedPathIndex/ExtendedPathIndex.py
index 6332a50..22087a2 100644
--- a/Products/ExtendedPathIndex/ExtendedPathIndex.py
+++ b/Products/ExtendedPathIndex/ExtendedPathIndex.py
@@ -1,14 +1,13 @@
-import logging
-
 from App.special_dtml import DTMLFile
 from BTrees.IIBTree import IISet, IITreeSet, intersection, union, multiunion
-from BTrees.OOBTree import OOBTree
 from BTrees.OIBTree import OIBTree
-from zope.interface import implementer
-
+from BTrees.OOBTree import OOBTree
 from Products.PluginIndexes.common import safe_callable
 from Products.PluginIndexes.interfaces import ILimitedResultIndex
 from Products.PluginIndexes.PathIndex.PathIndex import PathIndex
+from six import string_types
+from zope.interface import implementer
+import logging
 
 # Forward compatibility with ZCatalog 4.0
 try:
@@ -71,7 +70,8 @@ def __init__(self, id, extra=None, caller=None):
 
         if isinstance(attrs, str):
             attrs = attrs.split(',')
-        attrs = filter(None, [a.strip() for a in attrs])
+        attrs = [a.strip() for a in attrs]
+        attrs = [a for a in attrs if a]
 
         if attrs:
             # We only index the first attribute so snip off the rest
@@ -108,7 +108,7 @@ def index_object(self, docid, obj, threshold=100):
 
         if isinstance(path, (list, tuple)):
             path = '/' + '/'.join(path[1:])
-        comps = filter(None, path.split('/'))
+        comps = [p for p in path.split('/') if p]
 
         # Make sure we reindex properly when path change
         old_path = self._unindex.get(docid, _marker)
@@ -153,7 +153,7 @@ def unindex_object(self, docid, _old=_marker):
                 return
 
         # There is an assumption that paths start with /
-        comps = filter(None, old_value.split('/'))
+        comps = [p for p in old_value.split('/') if p]
 
         def unindex(comp, level, docid=docid):
             index_comp = self._index[comp]
@@ -214,7 +214,7 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
         that level and up will be included in the resultset.
 
         """
-        if isinstance(path, basestring):
+        if isinstance(path, string_types):
             level = default_level
         else:
             level = int(path[1])
@@ -224,9 +224,9 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
             # Search at every level, return the union of all results
             return multiunion(
                 [self.search(path, level, depth, navtree, navtree_start)
-                 for level in xrange(self._depth + 1)])
+                 for level in range(self._depth + 1)])
 
-        comps = filter(None, path.split('/'))
+        comps = [p for p in path.split('/') if p]
 
         if navtree and depth == -1:  # Navtrees don't do recursive
             depth = 1
@@ -274,10 +274,10 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
         # There is an assumption about all indexed values having the
         # same common base path
         if level == 0:
-            indexpath = list(filter(None, self.getPhysicalPath()))
+            indexpath = [p for p in self.getPhysicalPath() if p]
             minlength = min(len(indexpath), len(comps))
             # Truncate path to first different element
-            for i in xrange(minlength):
+            for i in range(minlength):
                 if indexpath[i] != comps[i]:
                     break
                 level += 1
@@ -326,9 +326,11 @@ def search(self, path, default_level=0, depth=-1, navtree=0,
             start = len(comps) - 1
             if navtree:
                 start = max(start, (navtree_start - level))
-            depthset = multiunion(filter(None, [depthset] + [
+            depthset = [depthset] + [
                 intersection(pathset, self._index.get(None, {}).get(i + level))
-                for i in xrange(start, start + depth + 1)]))
+                for i in range(start, start + depth + 1)
+            ]
+            depthset = multiunion([d for d in depthset if d])
 
         if navtree or depth >= 0:
             return depthset
diff --git a/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py b/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
index 83b8c11..d505a1a 100644
--- a/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
+++ b/Products/ExtendedPathIndex/tests/testExtendedPathIndex.py
@@ -250,7 +250,7 @@ def testNegativeDepthQuery(self):
         self._populateIndex()
         tests = [
             # path, level, expected results
-            ('/', 0, range(1, 19)),
+            ('/', 0, list(range(1, 19))),
             ('/aa', 0, [2, 3, 4, 5, 6, 7, 8, 9]),
             ('/aa/aa', 0, [3, 4]),
             ('/aa/bb', 0, [5, 6, 7, 9]),
@@ -286,8 +286,8 @@ def testPhysicalPathOptimization(self):
             ('/', 0, False, []),  # Depth Zero tests
             ('/aa', 0, False, [8]),
             ('/aa/aa', 0, False, []),
-            ('/', -1, False, range(1, 19)),  # Depth -1
-            ('/aa', -1, False, range(1, 19)),  # Should assume that all
+            ('/', -1, False, list(range(1, 19))),  # Depth -1
+            ('/aa', -1, False, list(range(1, 19))),  # Should assume that all
                                                # paths are relevant
             ((('aa/aa', 1), ), -1, False, [4, 14]),  # A (path, level) tuple,
                                                      # relative search
diff --git a/buildout.cfg b/buildout.cfg
index 47f982f..ec7c996 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,8 +1,7 @@
 [buildout]
-extends = http://dist.plone.org/release/5-latest/versions.cfg
+extends = https://raw.githubusercontent.com/zopefoundation/Zope/master/versions.cfg
 
 develop = .
-package-name = Products.ExtendedPathIndex
 parts = test
 versions = versions
 
@@ -11,6 +10,6 @@ Products.ExtendedPathIndex =
 
 [test]
 recipe = zc.recipe.testrunner
-defaults = ['-s', '${buildout:package-name}', '--auto-color', '--auto-progress']
+defaults = ['-s', 'Products.ExtendedPathIndex', '--auto-color', '--auto-progress']
 eggs =
-    ${buildout:package-name}
+    Products.ExtendedPathIndex
diff --git a/setup.py b/setup.py
index a41b9c5..2762047 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '3.2.1.dev0'
+version = '3.3.dev0'
 
 setup(
     name='Products.ExtendedPathIndex',
@@ -18,8 +18,10 @@
         "License :: OSI Approved :: GNU General Public License (GPL)",
         "Operating System :: OS Independent",
         "Programming Language :: Python",
-        "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.4",
+        "Programming Language :: Python :: 3.5",
+        "Programming Language :: Python :: 3.6",
       ],
     keywords='Zope catalog index',
     author='Plone Foundation',
@@ -33,6 +35,8 @@
     install_requires=[
         'setuptools',
         'AccessControl',
+        'Products.ZCatalog',
+        'six',
         'transaction',
         'ZODB3',
         'Zope2 >= 2.13.0a3',
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..bc5f52b
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,16 @@
+[tox]
+envlist =
+   py27,
+   py34,
+   py35,
+   py36
+
+[testenv]
+commands =
+    {envbindir}/buildout -c {toxinidir}/buildout.cfg buildout:directory={envdir} buildout:develop={toxinidir} bootstrap
+    {envbindir}/buildout -c {toxinidir}/buildout.cfg buildout:directory={envdir} buildout:develop={toxinidir}
+    {envbindir}/test -v1
+skip_install = true
+deps =
+    setuptools==33.1.1
+    zc.buildout


