Repository: plone.event


Branch: refs/heads/master
Date: 2016-10-23T13:45:09-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.event/commit/96ba46cbd6f2521c48fd508364e29087690ad530

support python 3

Files changed:
A tox.ini
M CHANGES.rst
M plone/event/recurrence.txt
M plone/event/recurrence_dateutil.txt
M plone/event/tests/test_recurrence_sequence_ical.py
M plone/event/tests/test_utils.py
M plone/event/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9f88386..c041fe5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,7 @@ Breaking changes:
 New features:
 
 - *add item here*
+- Support Python 3.
 
 Bug fixes:
 
diff --git a/plone/event/recurrence.txt b/plone/event/recurrence.txt
index 6a6de2f..67ad89e 100644
--- a/plone/event/recurrence.txt
+++ b/plone/event/recurrence.txt
@@ -12,13 +12,13 @@ Basic
 When no recurrence rule is given, the start date should be returned.
     >>> from plone.event.recurrence import recurrence_sequence_ical
     >>> from datetime import datetime
-    >>> dates = recurrence_sequence_ical(start=datetime(2010,01,01,0,0))
+    >>> dates = recurrence_sequence_ical(start=datetime(2010, 1, 1, 0, 0))
     >>> list(dates)
     [datetime.datetime(2010, 1, 1, 0, 0, tzinfo=<UTC>)]
 
 Timezone naive dates are converted to utc.
     >>> dates = recurrence_sequence_ical(
-    ...     start=datetime(2010,01,01,0,0),
+    ...     start=datetime(2010, 1, 1, 0, 0),
     ...     recrule="""RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5""")
     >>> list(dates)
     [datetime.datetime(2010, 1, 1, 0, 0, tzinfo=<UTC>),
@@ -31,7 +31,7 @@ The same with the timezone set beforehand.
     >>> import pytz
     >>> at = pytz.timezone('Europe/Vienna')
     >>> dates = recurrence_sequence_ical(
-    ...     start=at.localize(datetime(2010,01,01,0,0)),
+    ...     start=at.localize(datetime(2010, 1, 1, 0, 0)),
     ...     recrule="""RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5""")
     >>> list(dates)
     [datetime.datetime(2010, 1, 1, 0, 0, tzinfo=<DstTzInfo 'Europe/Vienna' CET+1:00:00 STD>),
@@ -42,7 +42,7 @@ The same with the timezone set beforehand.
 
 Get the integer representations from this recurrence rule
     >>> dates = recurrence_sequence_ical(
-    ...     start=at.localize(datetime(2010,01,01,0,0)),
+    ...     start=at.localize(datetime(2010, 1, 1, 0, 0)),
     ...     recrule="""RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5""")
     >>> from plone.event.recurrence import recurrence_int_sequence
     >>> list(recurrence_int_sequence(dates))
@@ -94,7 +94,7 @@ datetime.datetime(2010, 10, 31, 4, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)]
 Multiple Ruleset
 ----------------
 
-    >>> start = at.localize(datetime(2010,01,01,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
     >>> rulestr = """RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20100110T000000
     ... RDATE:20100120T000000
     ... EXRULE:FREQ=DAILY;INTERVAL=2;UNTIL=20100110T000000
@@ -121,8 +121,8 @@ setting.
 
 ...init
     >>> rulestr = """RRULE:FREQ=DAILY;INTERVAL=1"""
-    >>> start = at.localize(datetime(2010,01,01,0,0))
-    >>> until = at.localize(datetime(2010,01,02,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
+    >>> until = at.localize(datetime(2010, 1, 2, 0, 0))
 
 ...until
     >>> dates = recurrence_sequence_ical(start, recrule=rulestr, until=until)
@@ -167,7 +167,7 @@ recurrence_sequence_timedelta test
     >>> from datetime import timedelta
 
 The simplest case is to just have a one-time event.
-    >>> start = datetime(2008,01,01,0,0,0,0,pytz.timezone('CET'))
+    >>> start = datetime(2008, 1, 1, 0, 0, 0, 0, pytz.timezone('CET'))
     >>> dates = recurrence_sequence_timedelta(start)
     >>> list(dates)
     [datetime.datetime(2008, 1, 1, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)]
@@ -207,8 +207,8 @@ different daylight saving time behaviours
 
 First lets change from winter to summertime (EU rules with CET):
 
-    >>> start = datetime(2008,03,29,21,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,30,21,0,0,0,pytz.timezone('CET')) - timedelta(microseconds=1)
+    >>> start = datetime(2008, 3, 29, 21, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 30, 21, 0, 0, 0, pytz.timezone('CET')) - timedelta(microseconds=1)
 
     >>> from plone.event.utils import utcoffset_normalize, DSTADJUST
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
@@ -251,8 +251,8 @@ is wrong! 1:00 CET is the same as 2:00 CEST!
 
 Anyway, we want this behaviour on a day-level, see next example, a event should
 recurr every day 11:00am.
-    >>> start = datetime(2008,03,29,11,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,31,11,0,0,0,pytz.timezone('CET'))
+    >>> start = datetime(2008, 3, 29, 11, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 31, 11, 0, 0, 0, pytz.timezone('CET'))
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
     >>> dates = recurrence_sequence_timedelta(start, delta=24*60, until=until, dst=DSTADJUST)
     >>> list(dates)
@@ -268,8 +268,8 @@ see what DSTKEEP does:
 
 Here the correct behaviour on day level with DSTKEEP.
 
-    >>> start = datetime(2008,03,29,21,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,30,21,0,0,0,pytz.timezone('CET')) - timedelta(microseconds=1)
+    >>> start = datetime(2008, 3, 29, 21, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 30, 21, 0, 0, 0, pytz.timezone('CET')) - timedelta(microseconds=1)
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
 
     >>> dates = recurrence_sequence_timedelta(start, delta=60, until=until, dst=DSTKEEP)
@@ -306,8 +306,8 @@ with DSTAUTO, which is the default behaviour.
 
 Here the correct behaviour on day level or above: DSTADJUST is choosen.
 
-    >>> start = datetime(2008,03,29,11,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,31,11,0,0,0,pytz.timezone('CET'))
+    >>> start = datetime(2008, 3, 29, 11, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 31, 11, 0, 0, 0, pytz.timezone('CET'))
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
     >>> until
     datetime.datetime(2008, 3, 31, 11, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>)
@@ -321,8 +321,8 @@ Here the correct behaviour on day level or above: DSTADJUST is choosen.
 
 The correct behaviour on below day level: DSTKEEP is choosen.
 
-    >>> start = datetime(2008,03,29,21,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,30,21,0,0,0,pytz.timezone('CET')) - timedelta(microseconds=1)
+    >>> start = datetime(2008, 3, 29, 21, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 30, 21, 0, 0, 0, pytz.timezone('CET')) - timedelta(microseconds=1)
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
     >>> dates = recurrence_sequence_timedelta(start, delta=60, until=until)
     >>> len(list(dates))
diff --git a/plone/event/recurrence_dateutil.txt b/plone/event/recurrence_dateutil.txt
index 6905f80..91b95df 100644
--- a/plone/event/recurrence_dateutil.txt
+++ b/plone/event/recurrence_dateutil.txt
@@ -63,7 +63,7 @@ the date 2010-10-31, 23:30 in UTC, which is 2010-11-01, 0:30 in Austria, UTC+1
 If we let the sequence start from 1st November, the 1st November is correctly
 substracted, since the sequence has all correct timezones.
 
-    >>> start = at.localize(datetime(2010,11,01,0,30))
+    >>> start = at.localize(datetime(2010, 11, 1, 0, 30))
     >>> list(rrule.rrulestr(recrule, dtstart=start, forceset=True))
     [datetime.datetime(2010, 11, 2, 0, 30, tzinfo=<DstTzInfo 'Europe/Vienna' CET+1:00:00 STD>),
         datetime.datetime(2010, 11, 3, 0, 30, tzinfo=<DstTzInfo 'Europe/Vienna' CET+1:00:00 STD>)]
@@ -94,7 +94,7 @@ Using the VALUE parameter in DTSTART or any other date component does not work.
 The value parameter can be used to distinguish between DATE and DATE-TIME.
 Please note, that DATE-TIME is the default.
 
-    >>> start = at.localize(datetime(2010,01,01,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
     >>> recrule = """DTSTART;VALUE=DATE:20101029"""
     >>> list(rrule.rrulestr(recrule, dtstart=start, forceset=True))
     Traceback (most recent call last):
@@ -114,7 +114,7 @@ General imports used in here
 
 Timezone aware parsing regarding RFC2445 does not work
 
-    >>> start = at.localize(datetime(2010,01,01,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
     >>> recrule = """DTSTART;TZID=Europe/Vienna:20101029T090000
     ... RRULE:FREQ=DAILY;INTERVAL=1;COUNT=4
     ... """
@@ -126,7 +126,7 @@ Timezone aware parsing regarding RFC2445 does not work
 
 Mixing timezone aware and naive dates also breaks (this is not a bug)
 
-    >>> start=at.localize(datetime(2010,01,01,0,0))
+    >>> start=at.localize(datetime(2010, 1, 1, 0, 0))
     >>> recrule="""RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20100104T000000"""
     >>> list(rrule.rrulestr(recrule, dtstart=start, forceset=True))
     Traceback (most recent call last):
diff --git a/plone/event/tests/test_recurrence_sequence_ical.py b/plone/event/tests/test_recurrence_sequence_ical.py
index 10f7472..4a75ff5 100644
--- a/plone/event/tests/test_recurrence_sequence_ical.py
+++ b/plone/event/tests/test_recurrence_sequence_ical.py
@@ -77,7 +77,7 @@ def test_recrule_from_until(self):
         from datetime import datetime
         start = datetime(2011, 11, 23)
         recrule = None
-        from_ = datetime(2011, 11, 01)
+        from_ = datetime(2011, 11, 1)
         until = datetime(2011, 12, 31)
         seq = recurrence_sequence_ical(start, recrule=recrule,
                                        from_=from_, until=until)
diff --git a/plone/event/tests/test_utils.py b/plone/event/tests/test_utils.py
index c3821b2..fdf0472 100644
--- a/plone/event/tests/test_utils.py
+++ b/plone/event/tests/test_utils.py
@@ -1,5 +1,5 @@
 import mock
-import unittest2 as unittest
+import unittest
 
 
 class TestUtils(unittest.TestCase):
diff --git a/plone/event/utils.py b/plone/event/utils.py
index 8e6e9bd..be5ce92 100644
--- a/plone/event/utils.py
+++ b/plone/event/utils.py
@@ -297,7 +297,7 @@ def tzdel(dt):
 
     >>> from plone.event.utils import tzdel, utctz
     >>> from datetime import datetime
-    >>> dt = utctz().localize(datetime(2011, 05, 21, 12, 25))
+    >>> dt = utctz().localize(datetime(2011, 5, 21, 12, 25))
 
     Remove the timezone:
     >>> tzdel(dt)
@@ -567,10 +567,10 @@ def int2dt(dtint):
     if not isinstance(dtint, int):
         raise ValueError('int2dt expects integer values as arguments.')
     minutes = dtint % 60
-    hours = dtint / 60 % 24
-    days = dtint / 60 / 24 % 31
-    months = dtint / 60 / 24 / 31 % 12
-    years = dtint / 60 / 24 / 31 / 12
+    hours = dtint // 60 % 24
+    days = dtint // 60 // 24 % 31
+    months = dtint // 60 // 24 // 31 % 12
+    years = dtint // 60 // 24 // 31 // 12
     return datetime(years, months, days, hours, minutes, tzinfo=utctz())
 
 
diff --git a/setup.py b/setup.py
index a5893d5..932f4ab 100644
--- a/setup.py
+++ b/setup.py
@@ -15,6 +15,7 @@
         "Framework :: Plone :: 5.1",
         "Programming Language :: Python",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.5",
     ],
     keywords='Plone calendar calendaring event recurring',
     author='Plone Foundation',
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..58a7f52
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,10 @@
+[tox]
+envlist =
+    py27,py33,py34,py35
+
+[testenv]
+deps =
+    zope.testrunner
+    .[test]
+commands =
+    zope-testrunner --test-path=. {posargs:-pvc}


Repository: plone.event


Branch: refs/heads/master
Date: 2016-10-23T13:48:07-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.event/commit/900df43084ef73b97c169458e83a92e1fa7e9a89

add travis config

Files changed:
A .travis.yml
M .gitignore

diff --git a/.gitignore b/.gitignore
index fe9b528..9c88e6a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,7 @@
 *.egg-info
 *.mo
 *.py?
-.*
+.tox
 dist/
 !.gitattributes
 !.gitignore
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..55bc622
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.3
+    - 3.4
+    - 3.5
+install:
+    - pip install tox-travis
+script:
+    - tox
+notifications:
+    email: false


Repository: plone.event


Branch: refs/heads/master
Date: 2016-10-23T18:05:53-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.event/commit/3e9761f97fb7f6c4d07dbcaa10be6eaa625184e7

Merge pull request #7 from plone/py3

Support python 3

Files changed:
A .travis.yml
A tox.ini
M .gitignore
M CHANGES.rst
M plone/event/recurrence.txt
M plone/event/recurrence_dateutil.txt
M plone/event/tests/test_recurrence_sequence_ical.py
M plone/event/tests/test_utils.py
M plone/event/utils.py
M setup.py

diff --git a/.gitignore b/.gitignore
index fe9b528..9c88e6a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,7 @@
 *.egg-info
 *.mo
 *.py?
-.*
+.tox
 dist/
 !.gitattributes
 !.gitignore
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..55bc622
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.3
+    - 3.4
+    - 3.5
+install:
+    - pip install tox-travis
+script:
+    - tox
+notifications:
+    email: false
diff --git a/CHANGES.rst b/CHANGES.rst
index 9f88386..c041fe5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,7 @@ Breaking changes:
 New features:
 
 - *add item here*
+- Support Python 3.
 
 Bug fixes:
 
diff --git a/plone/event/recurrence.txt b/plone/event/recurrence.txt
index 6a6de2f..67ad89e 100644
--- a/plone/event/recurrence.txt
+++ b/plone/event/recurrence.txt
@@ -12,13 +12,13 @@ Basic
 When no recurrence rule is given, the start date should be returned.
     >>> from plone.event.recurrence import recurrence_sequence_ical
     >>> from datetime import datetime
-    >>> dates = recurrence_sequence_ical(start=datetime(2010,01,01,0,0))
+    >>> dates = recurrence_sequence_ical(start=datetime(2010, 1, 1, 0, 0))
     >>> list(dates)
     [datetime.datetime(2010, 1, 1, 0, 0, tzinfo=<UTC>)]
 
 Timezone naive dates are converted to utc.
     >>> dates = recurrence_sequence_ical(
-    ...     start=datetime(2010,01,01,0,0),
+    ...     start=datetime(2010, 1, 1, 0, 0),
     ...     recrule="""RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5""")
     >>> list(dates)
     [datetime.datetime(2010, 1, 1, 0, 0, tzinfo=<UTC>),
@@ -31,7 +31,7 @@ The same with the timezone set beforehand.
     >>> import pytz
     >>> at = pytz.timezone('Europe/Vienna')
     >>> dates = recurrence_sequence_ical(
-    ...     start=at.localize(datetime(2010,01,01,0,0)),
+    ...     start=at.localize(datetime(2010, 1, 1, 0, 0)),
     ...     recrule="""RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5""")
     >>> list(dates)
     [datetime.datetime(2010, 1, 1, 0, 0, tzinfo=<DstTzInfo 'Europe/Vienna' CET+1:00:00 STD>),
@@ -42,7 +42,7 @@ The same with the timezone set beforehand.
 
 Get the integer representations from this recurrence rule
     >>> dates = recurrence_sequence_ical(
-    ...     start=at.localize(datetime(2010,01,01,0,0)),
+    ...     start=at.localize(datetime(2010, 1, 1, 0, 0)),
     ...     recrule="""RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5""")
     >>> from plone.event.recurrence import recurrence_int_sequence
     >>> list(recurrence_int_sequence(dates))
@@ -94,7 +94,7 @@ datetime.datetime(2010, 10, 31, 4, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)]
 Multiple Ruleset
 ----------------
 
-    >>> start = at.localize(datetime(2010,01,01,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
     >>> rulestr = """RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20100110T000000
     ... RDATE:20100120T000000
     ... EXRULE:FREQ=DAILY;INTERVAL=2;UNTIL=20100110T000000
@@ -121,8 +121,8 @@ setting.
 
 ...init
     >>> rulestr = """RRULE:FREQ=DAILY;INTERVAL=1"""
-    >>> start = at.localize(datetime(2010,01,01,0,0))
-    >>> until = at.localize(datetime(2010,01,02,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
+    >>> until = at.localize(datetime(2010, 1, 2, 0, 0))
 
 ...until
     >>> dates = recurrence_sequence_ical(start, recrule=rulestr, until=until)
@@ -167,7 +167,7 @@ recurrence_sequence_timedelta test
     >>> from datetime import timedelta
 
 The simplest case is to just have a one-time event.
-    >>> start = datetime(2008,01,01,0,0,0,0,pytz.timezone('CET'))
+    >>> start = datetime(2008, 1, 1, 0, 0, 0, 0, pytz.timezone('CET'))
     >>> dates = recurrence_sequence_timedelta(start)
     >>> list(dates)
     [datetime.datetime(2008, 1, 1, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)]
@@ -207,8 +207,8 @@ different daylight saving time behaviours
 
 First lets change from winter to summertime (EU rules with CET):
 
-    >>> start = datetime(2008,03,29,21,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,30,21,0,0,0,pytz.timezone('CET')) - timedelta(microseconds=1)
+    >>> start = datetime(2008, 3, 29, 21, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 30, 21, 0, 0, 0, pytz.timezone('CET')) - timedelta(microseconds=1)
 
     >>> from plone.event.utils import utcoffset_normalize, DSTADJUST
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
@@ -251,8 +251,8 @@ is wrong! 1:00 CET is the same as 2:00 CEST!
 
 Anyway, we want this behaviour on a day-level, see next example, a event should
 recurr every day 11:00am.
-    >>> start = datetime(2008,03,29,11,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,31,11,0,0,0,pytz.timezone('CET'))
+    >>> start = datetime(2008, 3, 29, 11, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 31, 11, 0, 0, 0, pytz.timezone('CET'))
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
     >>> dates = recurrence_sequence_timedelta(start, delta=24*60, until=until, dst=DSTADJUST)
     >>> list(dates)
@@ -268,8 +268,8 @@ see what DSTKEEP does:
 
 Here the correct behaviour on day level with DSTKEEP.
 
-    >>> start = datetime(2008,03,29,21,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,30,21,0,0,0,pytz.timezone('CET')) - timedelta(microseconds=1)
+    >>> start = datetime(2008, 3, 29, 21, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 30, 21, 0, 0, 0, pytz.timezone('CET')) - timedelta(microseconds=1)
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
 
     >>> dates = recurrence_sequence_timedelta(start, delta=60, until=until, dst=DSTKEEP)
@@ -306,8 +306,8 @@ with DSTAUTO, which is the default behaviour.
 
 Here the correct behaviour on day level or above: DSTADJUST is choosen.
 
-    >>> start = datetime(2008,03,29,11,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,31,11,0,0,0,pytz.timezone('CET'))
+    >>> start = datetime(2008, 3, 29, 11, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 31, 11, 0, 0, 0, pytz.timezone('CET'))
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
     >>> until
     datetime.datetime(2008, 3, 31, 11, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>)
@@ -321,8 +321,8 @@ Here the correct behaviour on day level or above: DSTADJUST is choosen.
 
 The correct behaviour on below day level: DSTKEEP is choosen.
 
-    >>> start = datetime(2008,03,29,21,0,0,0,pytz.timezone('CET'))
-    >>> until = datetime(2008,03,30,21,0,0,0,pytz.timezone('CET')) - timedelta(microseconds=1)
+    >>> start = datetime(2008, 3, 29, 21, 0, 0, 0, pytz.timezone('CET'))
+    >>> until = datetime(2008, 3, 30, 21, 0, 0, 0, pytz.timezone('CET')) - timedelta(microseconds=1)
     >>> until = utcoffset_normalize(until, dstmode=DSTADJUST)
     >>> dates = recurrence_sequence_timedelta(start, delta=60, until=until)
     >>> len(list(dates))
diff --git a/plone/event/recurrence_dateutil.txt b/plone/event/recurrence_dateutil.txt
index 6905f80..91b95df 100644
--- a/plone/event/recurrence_dateutil.txt
+++ b/plone/event/recurrence_dateutil.txt
@@ -63,7 +63,7 @@ the date 2010-10-31, 23:30 in UTC, which is 2010-11-01, 0:30 in Austria, UTC+1
 If we let the sequence start from 1st November, the 1st November is correctly
 substracted, since the sequence has all correct timezones.
 
-    >>> start = at.localize(datetime(2010,11,01,0,30))
+    >>> start = at.localize(datetime(2010, 11, 1, 0, 30))
     >>> list(rrule.rrulestr(recrule, dtstart=start, forceset=True))
     [datetime.datetime(2010, 11, 2, 0, 30, tzinfo=<DstTzInfo 'Europe/Vienna' CET+1:00:00 STD>),
         datetime.datetime(2010, 11, 3, 0, 30, tzinfo=<DstTzInfo 'Europe/Vienna' CET+1:00:00 STD>)]
@@ -94,7 +94,7 @@ Using the VALUE parameter in DTSTART or any other date component does not work.
 The value parameter can be used to distinguish between DATE and DATE-TIME.
 Please note, that DATE-TIME is the default.
 
-    >>> start = at.localize(datetime(2010,01,01,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
     >>> recrule = """DTSTART;VALUE=DATE:20101029"""
     >>> list(rrule.rrulestr(recrule, dtstart=start, forceset=True))
     Traceback (most recent call last):
@@ -114,7 +114,7 @@ General imports used in here
 
 Timezone aware parsing regarding RFC2445 does not work
 
-    >>> start = at.localize(datetime(2010,01,01,0,0))
+    >>> start = at.localize(datetime(2010, 1, 1, 0, 0))
     >>> recrule = """DTSTART;TZID=Europe/Vienna:20101029T090000
     ... RRULE:FREQ=DAILY;INTERVAL=1;COUNT=4
     ... """
@@ -126,7 +126,7 @@ Timezone aware parsing regarding RFC2445 does not work
 
 Mixing timezone aware and naive dates also breaks (this is not a bug)
 
-    >>> start=at.localize(datetime(2010,01,01,0,0))
+    >>> start=at.localize(datetime(2010, 1, 1, 0, 0))
     >>> recrule="""RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20100104T000000"""
     >>> list(rrule.rrulestr(recrule, dtstart=start, forceset=True))
     Traceback (most recent call last):
diff --git a/plone/event/tests/test_recurrence_sequence_ical.py b/plone/event/tests/test_recurrence_sequence_ical.py
index 10f7472..4a75ff5 100644
--- a/plone/event/tests/test_recurrence_sequence_ical.py
+++ b/plone/event/tests/test_recurrence_sequence_ical.py
@@ -77,7 +77,7 @@ def test_recrule_from_until(self):
         from datetime import datetime
         start = datetime(2011, 11, 23)
         recrule = None
-        from_ = datetime(2011, 11, 01)
+        from_ = datetime(2011, 11, 1)
         until = datetime(2011, 12, 31)
         seq = recurrence_sequence_ical(start, recrule=recrule,
                                        from_=from_, until=until)
diff --git a/plone/event/tests/test_utils.py b/plone/event/tests/test_utils.py
index c3821b2..fdf0472 100644
--- a/plone/event/tests/test_utils.py
+++ b/plone/event/tests/test_utils.py
@@ -1,5 +1,5 @@
 import mock
-import unittest2 as unittest
+import unittest
 
 
 class TestUtils(unittest.TestCase):
diff --git a/plone/event/utils.py b/plone/event/utils.py
index 8e6e9bd..be5ce92 100644
--- a/plone/event/utils.py
+++ b/plone/event/utils.py
@@ -297,7 +297,7 @@ def tzdel(dt):
 
     >>> from plone.event.utils import tzdel, utctz
     >>> from datetime import datetime
-    >>> dt = utctz().localize(datetime(2011, 05, 21, 12, 25))
+    >>> dt = utctz().localize(datetime(2011, 5, 21, 12, 25))
 
     Remove the timezone:
     >>> tzdel(dt)
@@ -567,10 +567,10 @@ def int2dt(dtint):
     if not isinstance(dtint, int):
         raise ValueError('int2dt expects integer values as arguments.')
     minutes = dtint % 60
-    hours = dtint / 60 % 24
-    days = dtint / 60 / 24 % 31
-    months = dtint / 60 / 24 / 31 % 12
-    years = dtint / 60 / 24 / 31 / 12
+    hours = dtint // 60 % 24
+    days = dtint // 60 // 24 % 31
+    months = dtint // 60 // 24 // 31 % 12
+    years = dtint // 60 // 24 // 31 // 12
     return datetime(years, months, days, hours, minutes, tzinfo=utctz())
 
 
diff --git a/setup.py b/setup.py
index a5893d5..932f4ab 100644
--- a/setup.py
+++ b/setup.py
@@ -15,6 +15,7 @@
         "Framework :: Plone :: 5.1",
         "Programming Language :: Python",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.5",
     ],
     keywords='Plone calendar calendaring event recurring',
     author='Plone Foundation',
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..58a7f52
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,10 @@
+[tox]
+envlist =
+    py27,py33,py34,py35
+
+[testenv]
+deps =
+    zope.testrunner
+    .[test]
+commands =
+    zope-testrunner --test-path=. {posargs:-pvc}


