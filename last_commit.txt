Repository: plone.app.intid


Branch: refs/heads/master
Date: 2016-07-01T13:16:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.intid/commit/201e482dcfcff75f64f0820d8c1abad68ffeec1c

setuphandler now can deal with could-not-adapt exception

Files changed:
M CHANGES.rst
M plone/app/intid/setuphandlers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 01ed0d0..faaf5d8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- setuphandler now can deal with could-not-adapt exception (TypeError).
+- This may happen and must not stop the handler from working
 
 
 1.1.1 (2016-04-15)
diff --git a/plone/app/intid/setuphandlers.py b/plone/app/intid/setuphandlers.py
index c15017c..8b52b3d 100644
--- a/plone/app/intid/setuphandlers.py
+++ b/plone/app/intid/setuphandlers.py
@@ -6,8 +6,14 @@
 from zope.component import getUtility
 from zope.intid.interfaces import IIntIds
 
+import logging
+
+
+logger = logging.getLogger(__name__)
+
 
 try:
+    # XXX here we must consider plone.app.multilingual as well!
     import Products.LinguaPlone
     Products.LinguaPlone
     HAS_LINGUAPLONE = True
@@ -16,34 +22,36 @@
 
 
 def register_all_content_for_intids(portal):
-    """Registers all existing content with the intid utility.  This
-    will not be fast."""
+    """Registers all existing content with the intid utility.
+    This will not be fast."""
     cat = getToolByName(portal, 'portal_catalog', None)
+    if cat is None:
+        return
     intids = getUtility(IIntIds)
-    register = intids.register
     # Take advantage of paths stored in keyreferences in five.intid to optimize
     # registration
-    registered_paths = dict(
-        (ref.path, None) for ref in intids.ids
-        if hasattr(ref, 'path'))
+    registered_paths = {
+        ref.path for ref in intids.ids
+        if hasattr(ref, 'path')
+    }
     # Count how many objects we register
     registered = 0
     existing = 0
-    if cat is not None:
-        query = {'object_provides': IContentish.__identifier__}
-        if HAS_LINGUAPLONE:
-            query['Language'] = 'all'
-        content = cat(query)
-        for brain in content:
-            if brain.getPath() in registered_paths:
-                existing += 1
-                continue
-            try:
-                obj = brain.getObject()
-                register(obj)
-                registered += 1
-            except (AttributeError, KeyError):
-                pass
+    query = {'object_provides': IContentish.__identifier__}
+    if HAS_LINGUAPLONE:
+        query['Language'] = 'all'
+    for brain in cat(query):
+        if brain.getPath() in registered_paths:
+            existing += 1
+            continue
+        try:
+            obj = brain.getObject()
+            intids.register(obj)
+            registered += 1
+        except (AttributeError, KeyError, TypeError):
+            # "TypeError" happens on a "could not adapt" - this may happen
+            # for some contenttypes and must not stop this from working.
+            logger.exception(brain.getURL())
     return registered, existing
 
 


Repository: plone.app.intid


Branch: refs/heads/master
Date: 2016-07-01T15:29:09+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.intid/commit/d32258bec11f04a2acc4914df7da29ec7c4397a6

Merge pull request #5 from plone/fix-setuphandler-could-not-adapt

setuphandler now can deal with could-not-adapt exception

Files changed:
M CHANGES.rst
M plone/app/intid/setuphandlers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 01ed0d0..faaf5d8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- setuphandler now can deal with could-not-adapt exception (TypeError).
+- This may happen and must not stop the handler from working
 
 
 1.1.1 (2016-04-15)
diff --git a/plone/app/intid/setuphandlers.py b/plone/app/intid/setuphandlers.py
index c15017c..8b52b3d 100644
--- a/plone/app/intid/setuphandlers.py
+++ b/plone/app/intid/setuphandlers.py
@@ -6,8 +6,14 @@
 from zope.component import getUtility
 from zope.intid.interfaces import IIntIds
 
+import logging
+
+
+logger = logging.getLogger(__name__)
+
 
 try:
+    # XXX here we must consider plone.app.multilingual as well!
     import Products.LinguaPlone
     Products.LinguaPlone
     HAS_LINGUAPLONE = True
@@ -16,34 +22,36 @@
 
 
 def register_all_content_for_intids(portal):
-    """Registers all existing content with the intid utility.  This
-    will not be fast."""
+    """Registers all existing content with the intid utility.
+    This will not be fast."""
     cat = getToolByName(portal, 'portal_catalog', None)
+    if cat is None:
+        return
     intids = getUtility(IIntIds)
-    register = intids.register
     # Take advantage of paths stored in keyreferences in five.intid to optimize
     # registration
-    registered_paths = dict(
-        (ref.path, None) for ref in intids.ids
-        if hasattr(ref, 'path'))
+    registered_paths = {
+        ref.path for ref in intids.ids
+        if hasattr(ref, 'path')
+    }
     # Count how many objects we register
     registered = 0
     existing = 0
-    if cat is not None:
-        query = {'object_provides': IContentish.__identifier__}
-        if HAS_LINGUAPLONE:
-            query['Language'] = 'all'
-        content = cat(query)
-        for brain in content:
-            if brain.getPath() in registered_paths:
-                existing += 1
-                continue
-            try:
-                obj = brain.getObject()
-                register(obj)
-                registered += 1
-            except (AttributeError, KeyError):
-                pass
+    query = {'object_provides': IContentish.__identifier__}
+    if HAS_LINGUAPLONE:
+        query['Language'] = 'all'
+    for brain in cat(query):
+        if brain.getPath() in registered_paths:
+            existing += 1
+            continue
+        try:
+            obj = brain.getObject()
+            intids.register(obj)
+            registered += 1
+        except (AttributeError, KeyError, TypeError):
+            # "TypeError" happens on a "could not adapt" - this may happen
+            # for some contenttypes and must not stop this from working.
+            logger.exception(brain.getURL())
     return registered, existing
 
 


