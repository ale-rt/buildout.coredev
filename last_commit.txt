Repository: plone.app.layout


Branch: refs/heads/master
Date: 2016-04-07T17:10:10+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/9cbc69101f3fe376dd1e92f25f8bcd94d71e9ff8

Moved patterns_settigns view to Products.CMFPlone. Deprecated superfluos interface for this view

Files changed:
M CHANGES.rst
M plone/app/layout/globals/configure.zcml
M plone/app/layout/globals/interfaces.py
M plone/app/layout/globals/patterns_settings.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5742a41..9890ccf 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,11 @@ Changelog
 
 Incompatibilities:
 
-- *add item here*
+- Deprecated ``plone.app.layout.globals.pattern_settings``. 
+  Moved view to ``Products.CMFPlone.patterns.view``.
+  Deprecated also pointless interface for this view.
+  Addresses https://github.com/plone/Products.CMFPlone/issues/1513 and goes together with https://github.com/plone/Products.CMFPlone/issues/1514.
+  [jensens]
 
 New:
 
diff --git a/plone/app/layout/globals/configure.zcml b/plone/app/layout/globals/configure.zcml
index 4edb083..1a4db1a 100644
--- a/plone/app/layout/globals/configure.zcml
+++ b/plone/app/layout/globals/configure.zcml
@@ -44,15 +44,6 @@
         allowed_interface=".interfaces.IPortalState"
         />
 
-    <browser:page
-        name="plone_patterns_settings"
-        for="*"
-        permission="zope.Public"
-        class=".patterns_settings.PatternsSettings"
-        allowed_interface="Products.CMFPlone.interfaces.IPatternsSettings"
-        />
-
-
     <!-- We need to make the request annotatable for this to work -->
 
     <class class="ZPublisher.BaseRequest.BaseRequest">
diff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py
index ed8f4c4..bd72e53 100644
--- a/plone/app/layout/globals/interfaces.py
+++ b/plone/app/layout/globals/interfaces.py
@@ -1,3 +1,5 @@
+# -*- coding: utf-8 -*-
+from zope.deprecation import deprecated
 from zope.interface import Interface
 
 
@@ -277,4 +279,11 @@ class IViewView(Interface):
 
 class IPatternsSettingsRenderer(Interface):
     """ Interface for the adapter that renders the settings for patterns
+
+    DEPRECATED
     """
+
+IPatternsSettingsRenderer = deprecated(
+    IPatternsSettingsRenderer,
+    'This interface was deprecated because it was pointless.'
+)
diff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py
index 04a6e91..cae9da4 100644
--- a/plone/app/layout/globals/patterns_settings.py
+++ b/plone/app/layout/globals/patterns_settings.py
@@ -1,52 +1,7 @@
-# This module contains the global patterns settings
+# -*- coding: utf-8 -*-
+from zope.deferredimport import deprecated
 
-from zope.interface import implements
-from zope.component import getAdapters
-from zope.publisher.browser import BrowserView
-from .interfaces import IPatternsSettingsRenderer
-from Products.CMFPlone.interfaces import IPatternsSettings
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-from zope.component import getMultiAdapter
-
-
-class PatternsSettings(BrowserView):
-    """
-    Default patterns settings
-    """
-    implements(IPatternsSettingsRenderer)
-
-    def view_url(self):
-        ''' Facade to the homonymous plone_context_state method
-        '''
-        context_state = getMultiAdapter(
-            (self.context, self.request),
-            name='plone_context_state'
-        )
-        return context_state.view_url()
-
-    def __call__(self):
-        portal_state = getMultiAdapter(
-            (self.context, self.request), name=u'plone_portal_state')
-        # do not use getSite because it's possible it could be different
-        # than the actual portal url
-        base_url = portal_state.portal_url()
-        result = {
-            'data-base-url': self.context.absolute_url(),
-            'data-view-url': self.view_url(),
-            'data-portal-url': base_url,
-            'data-i18ncatalogurl': base_url + '/plonejsi18n'
-        }
-
-        # first, check for any adapters that need pattern data defined
-        adapters = getAdapters(
-            (self.context, self.request, None), IPatternsSettings)
-        [result.update(x[1]()) for x in adapters]
-
-        # Resources Registered UI patterns can override adapters
-        registry = getUtility(IRegistry)
-        pattern_options = registry.get('plone.patternoptions', {})
-        for key, value in pattern_options.items():
-            result['data-pat-' + key] = value
-
-        return result
+deprecated(
+    "Import from Products.CMFPlone.patterns.view instead",
+    PatternSettings='Products.CMFPlone.patterns.view.PatternSettingsView'
+)


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2016-04-07T18:04:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/9fa338eabef75cf99f493f334e2e2eb4025540c2

moved test to CMFPlone

Files changed:
D plone/app/layout/globals/tests/test_pattern_settings.py

diff --git a/plone/app/layout/globals/tests/test_pattern_settings.py b/plone/app/layout/globals/tests/test_pattern_settings.py
deleted file mode 100644
index 7743442..0000000
--- a/plone/app/layout/globals/tests/test_pattern_settings.py
+++ /dev/null
@@ -1,49 +0,0 @@
-from plone.app.layout.globals.tests.base import GlobalsTestCase
-from plone.app.layout.globals.patterns_settings import PatternsSettings
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-
-
-class TestPatternSettings(GlobalsTestCase):
-    """Ensure that the basic redirector setup is successful.
-    """
-
-    def testShouldReturnCorrectType(self):
-        settings = PatternsSettings(self.folder, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(type(result), dict)
-        for key, value in result.items():
-            self.assertTrue(isinstance(key, basestring))
-            self.assertTrue(isinstance(value, basestring))
-
-    def testFolderUrls(self):
-        settings = PatternsSettings(self.folder, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(result['data-base-url'], self.folder.absolute_url())
-        self.assertEquals(result['data-portal-url'], self.portal.absolute_url())
-        self.assertEquals(result['data-view-url'], self.folder.absolute_url())
-
-    def testFileUrls(self):
-        self.folder.invokeFactory('File', 'file1')
-        file_obj = self.folder['file1']
-        settings = PatternsSettings(file_obj, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(result['data-base-url'], file_obj.absolute_url())
-        self.assertEquals(
-            result['data-portal-url'],
-            self.portal.absolute_url()
-        )
-        self.assertEquals(
-            result['data-view-url'],
-            file_obj.absolute_url() + '/view'
-        )
-
-    def testPatternOptions(self):
-        registry = getUtility(IRegistry)
-        registry['plone.patternoptions'] = {
-            'foo': u'{"foo": "bar"}'
-        }
-
-        settings = PatternsSettings(self.folder, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(result['data-pat-foo'], u'{"foo": "bar"}')


Repository: plone.app.layout


Branch: refs/heads/master
Date: 2016-04-08T14:06:39+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/e8b6c15e40ed4bfbaf0c1da8510800dd7fee4e05

Merge pull request #85 from plone/cleanup-and-deprecations-for-1513-with-1514

Moved patterns_settings view to Products.CMFPlone.

Files changed:
M CHANGES.rst
M plone/app/layout/globals/configure.zcml
M plone/app/layout/globals/interfaces.py
M plone/app/layout/globals/patterns_settings.py
D plone/app/layout/globals/tests/test_pattern_settings.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5742a41..9890ccf 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,11 @@ Changelog
 
 Incompatibilities:
 
-- *add item here*
+- Deprecated ``plone.app.layout.globals.pattern_settings``. 
+  Moved view to ``Products.CMFPlone.patterns.view``.
+  Deprecated also pointless interface for this view.
+  Addresses https://github.com/plone/Products.CMFPlone/issues/1513 and goes together with https://github.com/plone/Products.CMFPlone/issues/1514.
+  [jensens]
 
 New:
 
diff --git a/plone/app/layout/globals/configure.zcml b/plone/app/layout/globals/configure.zcml
index 4edb083..1a4db1a 100644
--- a/plone/app/layout/globals/configure.zcml
+++ b/plone/app/layout/globals/configure.zcml
@@ -44,15 +44,6 @@
         allowed_interface=".interfaces.IPortalState"
         />
 
-    <browser:page
-        name="plone_patterns_settings"
-        for="*"
-        permission="zope.Public"
-        class=".patterns_settings.PatternsSettings"
-        allowed_interface="Products.CMFPlone.interfaces.IPatternsSettings"
-        />
-
-
     <!-- We need to make the request annotatable for this to work -->
 
     <class class="ZPublisher.BaseRequest.BaseRequest">
diff --git a/plone/app/layout/globals/interfaces.py b/plone/app/layout/globals/interfaces.py
index ed8f4c4..bd72e53 100644
--- a/plone/app/layout/globals/interfaces.py
+++ b/plone/app/layout/globals/interfaces.py
@@ -1,3 +1,5 @@
+# -*- coding: utf-8 -*-
+from zope.deprecation import deprecated
 from zope.interface import Interface
 
 
@@ -277,4 +279,11 @@ class IViewView(Interface):
 
 class IPatternsSettingsRenderer(Interface):
     """ Interface for the adapter that renders the settings for patterns
+
+    DEPRECATED
     """
+
+IPatternsSettingsRenderer = deprecated(
+    IPatternsSettingsRenderer,
+    'This interface was deprecated because it was pointless.'
+)
diff --git a/plone/app/layout/globals/patterns_settings.py b/plone/app/layout/globals/patterns_settings.py
index 04a6e91..cae9da4 100644
--- a/plone/app/layout/globals/patterns_settings.py
+++ b/plone/app/layout/globals/patterns_settings.py
@@ -1,52 +1,7 @@
-# This module contains the global patterns settings
+# -*- coding: utf-8 -*-
+from zope.deferredimport import deprecated
 
-from zope.interface import implements
-from zope.component import getAdapters
-from zope.publisher.browser import BrowserView
-from .interfaces import IPatternsSettingsRenderer
-from Products.CMFPlone.interfaces import IPatternsSettings
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-from zope.component import getMultiAdapter
-
-
-class PatternsSettings(BrowserView):
-    """
-    Default patterns settings
-    """
-    implements(IPatternsSettingsRenderer)
-
-    def view_url(self):
-        ''' Facade to the homonymous plone_context_state method
-        '''
-        context_state = getMultiAdapter(
-            (self.context, self.request),
-            name='plone_context_state'
-        )
-        return context_state.view_url()
-
-    def __call__(self):
-        portal_state = getMultiAdapter(
-            (self.context, self.request), name=u'plone_portal_state')
-        # do not use getSite because it's possible it could be different
-        # than the actual portal url
-        base_url = portal_state.portal_url()
-        result = {
-            'data-base-url': self.context.absolute_url(),
-            'data-view-url': self.view_url(),
-            'data-portal-url': base_url,
-            'data-i18ncatalogurl': base_url + '/plonejsi18n'
-        }
-
-        # first, check for any adapters that need pattern data defined
-        adapters = getAdapters(
-            (self.context, self.request, None), IPatternsSettings)
-        [result.update(x[1]()) for x in adapters]
-
-        # Resources Registered UI patterns can override adapters
-        registry = getUtility(IRegistry)
-        pattern_options = registry.get('plone.patternoptions', {})
-        for key, value in pattern_options.items():
-            result['data-pat-' + key] = value
-
-        return result
+deprecated(
+    "Import from Products.CMFPlone.patterns.view instead",
+    PatternSettings='Products.CMFPlone.patterns.view.PatternSettingsView'
+)
diff --git a/plone/app/layout/globals/tests/test_pattern_settings.py b/plone/app/layout/globals/tests/test_pattern_settings.py
deleted file mode 100644
index 7743442..0000000
--- a/plone/app/layout/globals/tests/test_pattern_settings.py
+++ /dev/null
@@ -1,49 +0,0 @@
-from plone.app.layout.globals.tests.base import GlobalsTestCase
-from plone.app.layout.globals.patterns_settings import PatternsSettings
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
-
-
-class TestPatternSettings(GlobalsTestCase):
-    """Ensure that the basic redirector setup is successful.
-    """
-
-    def testShouldReturnCorrectType(self):
-        settings = PatternsSettings(self.folder, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(type(result), dict)
-        for key, value in result.items():
-            self.assertTrue(isinstance(key, basestring))
-            self.assertTrue(isinstance(value, basestring))
-
-    def testFolderUrls(self):
-        settings = PatternsSettings(self.folder, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(result['data-base-url'], self.folder.absolute_url())
-        self.assertEquals(result['data-portal-url'], self.portal.absolute_url())
-        self.assertEquals(result['data-view-url'], self.folder.absolute_url())
-
-    def testFileUrls(self):
-        self.folder.invokeFactory('File', 'file1')
-        file_obj = self.folder['file1']
-        settings = PatternsSettings(file_obj, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(result['data-base-url'], file_obj.absolute_url())
-        self.assertEquals(
-            result['data-portal-url'],
-            self.portal.absolute_url()
-        )
-        self.assertEquals(
-            result['data-view-url'],
-            file_obj.absolute_url() + '/view'
-        )
-
-    def testPatternOptions(self):
-        registry = getUtility(IRegistry)
-        registry['plone.patternoptions'] = {
-            'foo': u'{"foo": "bar"}'
-        }
-
-        settings = PatternsSettings(self.folder, self.app.REQUEST)
-        result = settings()
-        self.assertEquals(result['data-pat-foo'], u'{"foo": "bar"}')


