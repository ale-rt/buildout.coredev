Repository: Products.CMFDynamicViewFTI


Branch: refs/heads/master
Date: 2016-05-04T10:41:21+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDynamicViewFTI/commit/04a6fd801e8ff7e3f267aee6ffc818fc394afe61

Apply hotfix 20160419 (#8)

Removed docstrings from some methods to avoid publishing them.

Files changed:
M CHANGES.rst
M Products/CMFDynamicViewFTI/browserdefault.py
M Products/CMFDynamicViewFTI/fti.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d9bfd16..0258031 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 4.1.4 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Removed docstrings from some methods to avoid publishing them.  From
+  Products.PloneHotfix20160419.  [maurits]
 
 
 4.1.3 (2015-07-29)
@@ -273,4 +274,3 @@ Changelog
 ------------------
 
 - Initial release.
-
diff --git a/Products/CMFDynamicViewFTI/browserdefault.py b/Products/CMFDynamicViewFTI/browserdefault.py
index fa155d9..230b555 100644
--- a/Products/CMFDynamicViewFTI/browserdefault.py
+++ b/Products/CMFDynamicViewFTI/browserdefault.py
@@ -52,10 +52,8 @@ class BrowserDefaultMixin(Base):
 
     @security.protected(View)
     def defaultView(self, request=None):
-        """
-        Get the actual view to use. If a default page is set, its id will
-        be returned. Else, the current layout's page template id is returned.
-        """
+        # Get the actual view to use. If a default page is set, its id will
+        # be returned. Else, the current layout's page template id is returned.
         fti = self.getTypeInfo()
         if fti is None:
             return self.default_view
@@ -73,10 +71,8 @@ def __call__(self):
 
     @security.protected(View)
     def getDefaultPage(self):
-        """Return the id of the default page, or None if none is set.
-
-        The default page must be contained within this (folderish) item.
-        """
+        # Return the id of the default page, or None if none is set.
+        # The default page must be contained within this (folderish) item.
         fti = self.getTypeInfo()
         if fti is None:
             return None
@@ -89,10 +85,8 @@ def getDefaultPage(self):
 
     @security.protected(View)
     def getLayout(self, **kw):
-        """Get the selected view method.
-
-        Note that a selected default page will override the view method.
-        """
+        # Get the selected view method.
+        # Note that a selected default page will override the view method.
         fti = self.getTypeInfo()
         if fti is None:
             return None
@@ -100,9 +94,8 @@ def getLayout(self, **kw):
 
     @security.public
     def canSetDefaultPage(self):
-        """Check if the user has permission to select a default page on this
-        (folderish) item, and the item is folderish.
-        """
+        # Check if the user has permission to select a default page on this
+        # (folderish) item, and the item is folderish.
         if not self.isPrincipiaFolderish:
             return False
         mtool = getToolByName(self, 'portal_membership')
@@ -111,15 +104,14 @@ def canSetDefaultPage(self):
 
     @security.protected(ModifyViewTemplate)
     def setDefaultPage(self, objectId):
-        """Set the default page to display in this (folderish) object.
-
-        The objectId must be a value found in self.objectIds() (i.e. a
-        contained object). This object will be displayed as the
-        default_page/index_html object of this (folderish) object. This will
-        override the current layout template returned by getLayout().
-        Pass None for objectId to turn off the default page and return to
-        using the selected layout template.
-        """
+        # Set the default page to display in this (folderish) object.
+
+        # The objectId must be a value found in self.objectIds() (i.e. a
+        # contained object). This object will be displayed as the
+        # default_page/index_html object of this (folderish) object. This will
+        # override the current layout template returned by getLayout().
+        # Pass None for objectId to turn off the default page and return to
+        # using the selected layout template.
         new_page = old_page = None
         if objectId is not None:
             new_page = getattr(self, objectId, None)
@@ -148,12 +140,11 @@ def setDefaultPage(self, objectId):
 
     @security.protected(ModifyViewTemplate)
     def setLayout(self, layout):
-        """Set the layout as the current view.
+        # Set the layout as the current view.
 
-        'layout' should be one of the list returned by getAvailableLayouts(),
-        but it is not enforced. If a default page has been set with
-        setDefaultPage(), it is turned off by calling setDefaultPage(None).
-        """
+        # 'layout' should be one of the list returned by getAvailableLayouts(),
+        # but it is not enforced. If a default page has been set with
+        # setDefaultPage(), it is turned off by calling setDefaultPage(None).
         if not (layout and isinstance(layout, basestring)):
             raise ValueError(
                 "layout must be a non empty string, got %s(%s)" %
@@ -183,8 +174,7 @@ def setLayout(self, layout):
 
     @security.protected(View)
     def getDefaultLayout(self):
-        """Get the default layout method.
-        """
+        # Get the default layout method.
         fti = self.getTypeInfo()
         if fti is None:
             return "base_view"  # XXX
@@ -192,16 +182,14 @@ def getDefaultLayout(self):
 
     @security.public
     def canSetLayout(self):
-        """Check if the current authenticated user is permitted to select a layout.
-        """
+        # Check if the current authenticated user is permitted to select a layout.
         mtool = getToolByName(self, 'portal_membership')
         member = mtool.getAuthenticatedMember()
         return member.has_permission(ModifyViewTemplate, self)
 
     @security.protected(View)
     def getAvailableLayouts(self):
-        """Get the layouts registered for this object from its FTI.
-        """
+        # Get the layouts registered for this object from its FTI.
         fti = self.getTypeInfo()
         if fti is None:
             return ()
diff --git a/Products/CMFDynamicViewFTI/fti.py b/Products/CMFDynamicViewFTI/fti.py
index 18d09d2..a0af60c 100644
--- a/Products/CMFDynamicViewFTI/fti.py
+++ b/Products/CMFDynamicViewFTI/fti.py
@@ -105,14 +105,12 @@ def manage_changeProperties(self, **kw):
 
     @security.protected(View)
     def getDefaultViewMethod(self, context):
-        """Get the default view method from the FTI
-        """
+        # Get the default view method from the FTI.
         return str(self.default_view)
 
     @security.protected(View)
     def getAvailableViewMethods(self, context):
-        """Get a list of registered view methods
-        """
+        # Get a list of registered view methods.
         methods = self.view_methods
         if isinstance(methods, basestring):
             methods = (methods, )
@@ -125,10 +123,8 @@ def getViewMethod(
         enforce_available=False,
         check_exists=False
     ):
-        """Get view method (aka layout) name from context
-
-        Return -- view method from context or default view name
-        """
+        # Get view method (aka layout) name from context.
+        # Return -- view method from context or default view name.
         default = self.getDefaultViewMethod(context)
         layout = getattr(aq_base(context), 'layout', None)
 
@@ -153,15 +149,14 @@ def getViewMethod(
 
     @security.protected(View)
     def getDefaultPage(self, context, check_exists=False):
-        """Get the default page from a folderish object
-
-        Non folderish objects don't have a default view.
-
-        If check_exists is enabled the method makes sure the object with the
-        default page id exists.
-
-        Return -- None for no default page or a string
-        """
+        # Get the default page from a folderish object.
+        #
+        # Non folderish objects don't have a default view.
+        #
+        # If check_exists is enabled the method makes sure the object with the
+        # default page id exists.
+        #
+        # Return -- None for no default page or a string
         if not getattr(aq_base(context), 'isPrincipiaFolderish', False):
             # non folderish objects don't have a default page per se
             return None
@@ -187,9 +182,8 @@ def getDefaultPage(self, context, check_exists=False):
 
     @security.protected(View)
     def defaultView(self, context):
-        """Get the current view to use for an object. If a default page is  set,
-        use that, else use the currently selected view method/layout.
-        """
+        # Get the current view to use for an object. If a default page is set,
+        # use that, else use the currently selected view method/layout.
 
         # Delegate to PloneTool's version if we have it else, use own rules
         plone_utils = getToolByName(self, 'plone_utils', None)
@@ -206,14 +200,14 @@ def defaultView(self, context):
     security.declarePublic('queryMethodID')
 
     def queryMethodID(self, alias, default=None, context=None):
-        """ Query method ID by alias.
+        # Query method ID by alias.
 
-        Use "(dynamic view)" as the alias target to look up as per
-        defaultView()
+        # Use "(dynamic view)" as the alias target to look up as per
+        # defaultView()
+
+        # Use "(selected layout)" as the alias target to look up as per
+        # getViewMethod()
 
-        Use "(selected layout)" as the alias target to look up as per
-        getViewMethod()
-        """
         methodTarget = FactoryTypeInformation.queryMethodID(
             self,
             alias,


