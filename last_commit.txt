Repository: icalendar


Branch: refs/heads/master
Date: 2017-04-19T00:07:41+02:00
Author: Christian Geier (geier) <geier@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/d0fd108ec73a6524234fe91f5100ba124ab66ce1

Allow `=` in parameter values.

Some parameter values (e.g., BASE64 encoded binary data often ends with
one or two equal signs) may contain an equal sign (`=`). The current
implementation splits key-value pairs at all equal signs, which leads to
errors. Especially icalendar files generated by Apple's software often
feature BASE64 encoded binary data in parameter values.

This patch introduces a new parameter `maxsplit` to
icalendar.parser.q_split() which works similar as python's
string.split(sep, maxsplit) which we then use to split parameter
key-value pairs only at the first equal sign.

This patch fixes #197.

Files changed:
M CHANGES.rst
M src/icalendar/parser.py
M src/icalendar/tests/apple_xlocation_test.py
M src/icalendar/tests/test_icalendar.py

diff --git a/CHANGES.rst b/CHANGES.rst
index df7de4c..260f0ff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Don't break on parameter values which contain equal signs, e.g. base64 encoded
+  binary data [geier]
 
 
 3.11.3 (2017-02-15)
diff --git a/src/icalendar/parser.py b/src/icalendar/parser.py
index 4a5fc13..7bc52eb 100644
--- a/src/icalendar/parser.py
+++ b/src/icalendar/parser.py
@@ -149,13 +149,14 @@ def dquote(val):
 
 
 # parsing helper
-def q_split(st, sep=','):
+def q_split(st, sep=',', maxsplit=-1):
     """Splits a string on char, taking double (q)uotes into considderation.
     """
     result = []
     cursor = 0
     length = len(st)
     inquote = 0
+    splits = 0
     for i in range(length):
         ch = st[i]
         if ch == '"':
@@ -163,8 +164,10 @@ def q_split(st, sep=','):
         if not inquote and ch == sep:
             result.append(st[cursor:i])
             cursor = i + 1
-        if i + 1 == length:
+            splits += 1
+        if i + 1 == length or splits == maxsplit:
             result.append(st[cursor:])
+            break
     return result
 
 
@@ -227,7 +230,7 @@ def from_ical(cls, st, strict=False):
         result = cls()
         for param in q_split(st, ';'):
             try:
-                key, val = q_split(param, '=')
+                key, val = q_split(param, '=', maxsplit=1)
                 validate_token(key)
                 # Property parameter values that are not in quoted
                 # strings are case insensitive.
diff --git a/src/icalendar/tests/apple_xlocation_test.py b/src/icalendar/tests/apple_xlocation_test.py
index 12c0abb..327afbb 100644
--- a/src/icalendar/tests/apple_xlocation_test.py
+++ b/src/icalendar/tests/apple_xlocation_test.py
@@ -10,17 +10,11 @@ class TestEncoding(unittest.TestCase):
 
     def test_apple_xlocation(self):
         """
-        Test if error messages are encode properly.
+        Test if we support base64 encoded binary data in parameter values.
         """
-        try:
-            directory = os.path.dirname(__file__)
-            with open(os.path.join(directory, 'x_location.ics'), 'rb') as fp:
-                data = fp.read()
-            cal = icalendar.Calendar.from_ical(data)
-            for event in cal.walk('vevent'):
-                self.assertEqual(len(event.errors), 1, 'Got too many errors')
-                error = event.errors[0][1]
-                self.assertTrue(error.startswith(u'Content line could not be parsed into parts'))
-
-        except UnicodeEncodeError as e:
-            self.fail("There is something wrong with encoding in the collected error messages")
+        directory = os.path.dirname(__file__)
+        with open(os.path.join(directory, 'x_location.ics'), 'rb') as fp:
+            data = fp.read()
+        cal = icalendar.Calendar.from_ical(data)
+        for event in cal.walk('vevent'):
+            self.assertEqual(len(event.errors), 0, 'Got too many errors')
diff --git a/src/icalendar/tests/test_icalendar.py b/src/icalendar/tests/test_icalendar.py
index 333a632..475093f 100644
--- a/src/icalendar/tests/test_icalendar.py
+++ b/src/icalendar/tests/test_icalendar.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
+import textwrap
+
 from icalendar.tests import unittest
 
 
@@ -207,6 +209,30 @@ def test_contentline_class(self):
             ('key', Parameters({'PARAM': 'pValue'}), 'value')
         )
 
+        contains_base64 = (
+            'X-APPLE-STRUCTURED-LOCATION;'
+            'VALUE=URI;X-ADDRESS="Kaiserliche Hofburg, 1010 Wien";'
+            'X-APPLE-MAPKIT-HANDLE=CAESxQEZgr3QZXJyZWljaA==;'
+            'X-APPLE-RADIUS=328.7978217977285;X-APPLE-REFERENCEFRAME=1;'
+            'X-TITLE=Heldenplatz:geo:48.206686,16.363235'
+        ).encode('utf-8')
+
+        self.assertEqual(
+            Contentline(contains_base64, strict=True).parts(),
+            ('X-APPLE-STRUCTURED-LOCATION',
+             Parameters({
+                 'X-APPLE-RADIUS': '328.7978217977285',
+                 'X-ADDRESS': 'Kaiserliche Hofburg, 1010 Wien',
+                 'X-APPLE-REFERENCEFRAME': '1',
+                 'X-TITLE': u'HELDENPLATZ',
+                 'X-APPLE-MAPKIT-HANDLE':
+                 'CAESXQEZGR3QZXJYZWLJAA==',
+                 'VALUE': 'URI',
+             }),
+             'geo:48.206686,16.363235'
+             )
+        )
+
     def test_fold_line(self):
         from ..parser import foldline
 
@@ -247,6 +273,10 @@ def test_q_split(self):
         self.assertEqual(q_split('Max,Moller,"Rasmussen, Max"'),
                          ['Max', 'Moller', '"Rasmussen, Max"'])
 
+    def test_q_split_bin(self):
+        from ..parser import q_split
+        self.assertEqual(q_split('X-SOMETHING=ABCDE==', '=', maxsplit=1), ['X-SOMETHING', 'ABCDE=='])
+
     def test_q_join(self):
         from ..parser import q_join
         self.assertEqual(q_join(['Max', 'Moller', 'Rasmussen, Max']),


Repository: icalendar


Branch: refs/heads/master
Date: 2017-04-19T00:07:41+02:00
Author: Christian Geier (geier) <geier@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/124b328c9360765e25b872206bd3da17be168a95

Moved test_apple_xlocation() to test_icalendar.py

Files changed:
M src/icalendar/tests/test_icalendar.py
D src/icalendar/tests/apple_xlocation_test.py

diff --git a/src/icalendar/tests/apple_xlocation_test.py b/src/icalendar/tests/apple_xlocation_test.py
deleted file mode 100644
index 327afbb..0000000
--- a/src/icalendar/tests/apple_xlocation_test.py
+++ /dev/null
@@ -1,20 +0,0 @@
-# -*- coding: utf-8 -*-
-from icalendar.tests import unittest
-
-import datetime
-import icalendar
-import os
-import pytz
-
-class TestEncoding(unittest.TestCase):
-
-    def test_apple_xlocation(self):
-        """
-        Test if we support base64 encoded binary data in parameter values.
-        """
-        directory = os.path.dirname(__file__)
-        with open(os.path.join(directory, 'x_location.ics'), 'rb') as fp:
-            data = fp.read()
-        cal = icalendar.Calendar.from_ical(data)
-        for event in cal.walk('vevent'):
-            self.assertEqual(len(event.errors), 0, 'Got too many errors')
diff --git a/src/icalendar/tests/test_icalendar.py b/src/icalendar/tests/test_icalendar.py
index 475093f..3a70af0 100644
--- a/src/icalendar/tests/test_icalendar.py
+++ b/src/icalendar/tests/test_icalendar.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
-import textwrap
+import icalendar
+import os
 
 from icalendar.tests import unittest
 
@@ -281,3 +282,17 @@ def test_q_join(self):
         from ..parser import q_join
         self.assertEqual(q_join(['Max', 'Moller', 'Rasmussen, Max']),
                          'Max,Moller,"Rasmussen, Max"')
+
+
+class TestEncoding(unittest.TestCase):
+
+    def test_apple_xlocation(self):
+        """
+        Test if we support base64 encoded binary data in parameter values.
+        """
+        directory = os.path.dirname(__file__)
+        with open(os.path.join(directory, 'x_location.ics'), 'rb') as fp:
+            data = fp.read()
+        cal = icalendar.Calendar.from_ical(data)
+        for event in cal.walk('vevent'):
+            self.assertEqual(len(event.errors), 0, 'Got too many errors')


Repository: icalendar


Branch: refs/heads/master
Date: 2017-04-19T00:07:41+02:00
Author: Christian Geier (geier) <geier@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/b82893ff56f8f8caab1aa337b039ba31a8db157b

New test for broken properties.

The fix for #197 makes the test data used for testing the error
messages for broken properties (which was valid data) work with
icalendar, we therefor need a new test with actually invalid data.

Files changed:
M src/icalendar/tests/test_icalendar.py

diff --git a/src/icalendar/tests/test_icalendar.py b/src/icalendar/tests/test_icalendar.py
index 3a70af0..d70af9a 100644
--- a/src/icalendar/tests/test_icalendar.py
+++ b/src/icalendar/tests/test_icalendar.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 import icalendar
 import os
+import textwrap
 
 from icalendar.tests import unittest
 
@@ -286,6 +287,25 @@ def test_q_join(self):
 
 class TestEncoding(unittest.TestCase):
 
+    def test_broken_property(self):
+        """
+        Test if error messages are encode properly.
+        """
+        broken_ical = textwrap.dedent("""
+            BEGIN:VCALENDAR
+            BEGIN:VEVENT
+            SUMMARY:An Event with too many semicolons
+            DTSTART;;VALUE=DATE-TIME:20140409T093000
+            UID:abc
+            END:VEVENT
+            END:VCALENDAR
+            """)
+        cal = icalendar.Calendar.from_ical(broken_ical)
+        for event in cal.walk('vevent'):
+            self.assertEqual(len(event.errors), 1, 'Not the right amount of errors.')
+            error = event.errors[0][1]
+            self.assertTrue(error.startswith(u'Content line could not be parsed into parts'))
+
     def test_apple_xlocation(self):
         """
         Test if we support base64 encoded binary data in parameter values.


Repository: icalendar


Branch: refs/heads/master
Date: 2017-04-19T00:07:41+02:00
Author: Markus Unterwaditzer (untitaker) <markus@unterwaditzer.net>
Commit: https://github.com/collective/icalendar/commit/0f408d8cce66a0d0ae284afbf9811836bcdf1299

Fix q_split for maxsplit=0

Files changed:
M src/icalendar/parser.py
M src/icalendar/tests/test_icalendar.py

diff --git a/src/icalendar/parser.py b/src/icalendar/parser.py
index 7bc52eb..87587ad 100644
--- a/src/icalendar/parser.py
+++ b/src/icalendar/parser.py
@@ -152,6 +152,9 @@ def dquote(val):
 def q_split(st, sep=',', maxsplit=-1):
     """Splits a string on char, taking double (q)uotes into considderation.
     """
+    if maxsplit == 0:
+        return [st]
+
     result = []
     cursor = 0
     length = len(st)
diff --git a/src/icalendar/tests/test_icalendar.py b/src/icalendar/tests/test_icalendar.py
index d70af9a..687a942 100644
--- a/src/icalendar/tests/test_icalendar.py
+++ b/src/icalendar/tests/test_icalendar.py
@@ -277,7 +277,10 @@ def test_q_split(self):
 
     def test_q_split_bin(self):
         from ..parser import q_split
-        self.assertEqual(q_split('X-SOMETHING=ABCDE==', '=', maxsplit=1), ['X-SOMETHING', 'ABCDE=='])
+        for s in ('X-SOMETHING=ABCDE==', ',,,'):
+            for maxsplit in range(3):
+                self.assertEqual(q_split(s, '=', maxsplit=maxsplit),
+                                 s.split('=', maxsplit))
 
     def test_q_join(self):
         from ..parser import q_join


Repository: icalendar


Branch: refs/heads/master
Date: 2017-04-19T00:07:41+02:00
Author: Markus Unterwaditzer (untitaker) <markus@unterwaditzer.net>
Commit: https://github.com/collective/icalendar/commit/805f59d36a6e79c4f153a69f51da36f98b6a6659

Extend tests

Files changed:
M src/icalendar/tests/test_icalendar.py

diff --git a/src/icalendar/tests/test_icalendar.py b/src/icalendar/tests/test_icalendar.py
index 687a942..47343e7 100644
--- a/src/icalendar/tests/test_icalendar.py
+++ b/src/icalendar/tests/test_icalendar.py
@@ -278,7 +278,7 @@ def test_q_split(self):
     def test_q_split_bin(self):
         from ..parser import q_split
         for s in ('X-SOMETHING=ABCDE==', ',,,'):
-            for maxsplit in range(3):
+            for maxsplit in range(-1, 3):
                 self.assertEqual(q_split(s, '=', maxsplit=maxsplit),
                                  s.split('=', maxsplit))
 


Repository: icalendar


Branch: refs/heads/master
Date: 2017-04-19T00:19:43+02:00
Author: Christian Geier (geier) <github@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/8a52e56fabf9ea37f7454d98fbc66916fe67bbf5

Merge pull request #207 from geier/fix_base64_equal

Allow `=` in parameter values.

Files changed:
M CHANGES.rst
M src/icalendar/parser.py
M src/icalendar/tests/test_icalendar.py
D src/icalendar/tests/apple_xlocation_test.py

diff --git a/CHANGES.rst b/CHANGES.rst
index df7de4c..260f0ff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Don't break on parameter values which contain equal signs, e.g. base64 encoded
+  binary data [geier]
 
 
 3.11.3 (2017-02-15)
diff --git a/src/icalendar/parser.py b/src/icalendar/parser.py
index 4a5fc13..87587ad 100644
--- a/src/icalendar/parser.py
+++ b/src/icalendar/parser.py
@@ -149,13 +149,17 @@ def dquote(val):
 
 
 # parsing helper
-def q_split(st, sep=','):
+def q_split(st, sep=',', maxsplit=-1):
     """Splits a string on char, taking double (q)uotes into considderation.
     """
+    if maxsplit == 0:
+        return [st]
+
     result = []
     cursor = 0
     length = len(st)
     inquote = 0
+    splits = 0
     for i in range(length):
         ch = st[i]
         if ch == '"':
@@ -163,8 +167,10 @@ def q_split(st, sep=','):
         if not inquote and ch == sep:
             result.append(st[cursor:i])
             cursor = i + 1
-        if i + 1 == length:
+            splits += 1
+        if i + 1 == length or splits == maxsplit:
             result.append(st[cursor:])
+            break
     return result
 
 
@@ -227,7 +233,7 @@ def from_ical(cls, st, strict=False):
         result = cls()
         for param in q_split(st, ';'):
             try:
-                key, val = q_split(param, '=')
+                key, val = q_split(param, '=', maxsplit=1)
                 validate_token(key)
                 # Property parameter values that are not in quoted
                 # strings are case insensitive.
diff --git a/src/icalendar/tests/apple_xlocation_test.py b/src/icalendar/tests/apple_xlocation_test.py
deleted file mode 100644
index 12c0abb..0000000
--- a/src/icalendar/tests/apple_xlocation_test.py
+++ /dev/null
@@ -1,26 +0,0 @@
-# -*- coding: utf-8 -*-
-from icalendar.tests import unittest
-
-import datetime
-import icalendar
-import os
-import pytz
-
-class TestEncoding(unittest.TestCase):
-
-    def test_apple_xlocation(self):
-        """
-        Test if error messages are encode properly.
-        """
-        try:
-            directory = os.path.dirname(__file__)
-            with open(os.path.join(directory, 'x_location.ics'), 'rb') as fp:
-                data = fp.read()
-            cal = icalendar.Calendar.from_ical(data)
-            for event in cal.walk('vevent'):
-                self.assertEqual(len(event.errors), 1, 'Got too many errors')
-                error = event.errors[0][1]
-                self.assertTrue(error.startswith(u'Content line could not be parsed into parts'))
-
-        except UnicodeEncodeError as e:
-            self.fail("There is something wrong with encoding in the collected error messages")
diff --git a/src/icalendar/tests/test_icalendar.py b/src/icalendar/tests/test_icalendar.py
index 333a632..47343e7 100644
--- a/src/icalendar/tests/test_icalendar.py
+++ b/src/icalendar/tests/test_icalendar.py
@@ -1,4 +1,8 @@
 # -*- coding: utf-8 -*-
+import icalendar
+import os
+import textwrap
+
 from icalendar.tests import unittest
 
 
@@ -207,6 +211,30 @@ def test_contentline_class(self):
             ('key', Parameters({'PARAM': 'pValue'}), 'value')
         )
 
+        contains_base64 = (
+            'X-APPLE-STRUCTURED-LOCATION;'
+            'VALUE=URI;X-ADDRESS="Kaiserliche Hofburg, 1010 Wien";'
+            'X-APPLE-MAPKIT-HANDLE=CAESxQEZgr3QZXJyZWljaA==;'
+            'X-APPLE-RADIUS=328.7978217977285;X-APPLE-REFERENCEFRAME=1;'
+            'X-TITLE=Heldenplatz:geo:48.206686,16.363235'
+        ).encode('utf-8')
+
+        self.assertEqual(
+            Contentline(contains_base64, strict=True).parts(),
+            ('X-APPLE-STRUCTURED-LOCATION',
+             Parameters({
+                 'X-APPLE-RADIUS': '328.7978217977285',
+                 'X-ADDRESS': 'Kaiserliche Hofburg, 1010 Wien',
+                 'X-APPLE-REFERENCEFRAME': '1',
+                 'X-TITLE': u'HELDENPLATZ',
+                 'X-APPLE-MAPKIT-HANDLE':
+                 'CAESXQEZGR3QZXJYZWLJAA==',
+                 'VALUE': 'URI',
+             }),
+             'geo:48.206686,16.363235'
+             )
+        )
+
     def test_fold_line(self):
         from ..parser import foldline
 
@@ -247,7 +275,47 @@ def test_q_split(self):
         self.assertEqual(q_split('Max,Moller,"Rasmussen, Max"'),
                          ['Max', 'Moller', '"Rasmussen, Max"'])
 
+    def test_q_split_bin(self):
+        from ..parser import q_split
+        for s in ('X-SOMETHING=ABCDE==', ',,,'):
+            for maxsplit in range(-1, 3):
+                self.assertEqual(q_split(s, '=', maxsplit=maxsplit),
+                                 s.split('=', maxsplit))
+
     def test_q_join(self):
         from ..parser import q_join
         self.assertEqual(q_join(['Max', 'Moller', 'Rasmussen, Max']),
                          'Max,Moller,"Rasmussen, Max"')
+
+
+class TestEncoding(unittest.TestCase):
+
+    def test_broken_property(self):
+        """
+        Test if error messages are encode properly.
+        """
+        broken_ical = textwrap.dedent("""
+            BEGIN:VCALENDAR
+            BEGIN:VEVENT
+            SUMMARY:An Event with too many semicolons
+            DTSTART;;VALUE=DATE-TIME:20140409T093000
+            UID:abc
+            END:VEVENT
+            END:VCALENDAR
+            """)
+        cal = icalendar.Calendar.from_ical(broken_ical)
+        for event in cal.walk('vevent'):
+            self.assertEqual(len(event.errors), 1, 'Not the right amount of errors.')
+            error = event.errors[0][1]
+            self.assertTrue(error.startswith(u'Content line could not be parsed into parts'))
+
+    def test_apple_xlocation(self):
+        """
+        Test if we support base64 encoded binary data in parameter values.
+        """
+        directory = os.path.dirname(__file__)
+        with open(os.path.join(directory, 'x_location.ics'), 'rb') as fp:
+            data = fp.read()
+        cal = icalendar.Calendar.from_ical(data)
+        for event in cal.walk('vevent'):
+            self.assertEqual(len(event.errors), 0, 'Got too many errors')


