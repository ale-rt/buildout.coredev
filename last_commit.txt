Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-10-31T11:40:38+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/6355ff4f903848c4e4e4413e1a8fcdb0b4da24f1

Allow setting custom CSS class *outside* widget

Files changed:
M .gitignore
M CHANGES.rst
M README.rst
M buildout.cfg
M plone/app/z3cform/templates/widget.pt
M plone/app/z3cform/tests/test_widgets.py

diff --git a/.gitignore b/.gitignore
index aaf1639..abbc9b1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,7 @@ dist
 /bin
 /parts
 /develop-eggs
+/include
+/lib*
+.*.swp
+pip-selfcheck.json
diff --git a/CHANGES.rst b/CHANGES.rst
index 25f3afd..fa777ae 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -2,7 +2,7 @@ Changelog
 =========
 
 3.0.3 (unreleased)
-------------------
+------------------------
 
 Breaking changes:
 
@@ -29,6 +29,12 @@ Bug fixes:
   the query string is lost
   [tomgross]
 
+- Allow an additional CSS class for widgets in this package
+  [tomgross]
+
+- Document customization of widgets
+  [tomgross]
+
 3.0.2 (2017-09-06)
 ------------------
 
diff --git a/README.rst b/README.rst
index 522eecc..1f85ac0 100644
--- a/README.rst
+++ b/README.rst
@@ -346,6 +346,34 @@ to display these fields in view mode, add the following css in your theme::
        display: none;
     }
 
+
+Add additional parameters to widgets
+=====================================
+
+You can add additional parameters to widgets defined in this package
+via the `plone.autoform.widgets.ParameterizedWidget` ::
+
+  from plone.app.z3c.form.widget import DateWidget
+  MyDateWidget = ParameterizedWidget(DateWidget, additional_css_class='event_start')
+
+
+or via directives ::
+
+  from plone.app.z3c.form.widget import DateWidget
+
+
+  @provider(IFormFieldProvider)
+  class IMyEventBehavior(model.Schema):
+
+  ...
+      widget('event_start', DateWidget, additional_css_class='event_start')
+      event_start = schema.TextLine(
+          title=_(u'label_event_start'),
+          description=_(u'help_event_start'),
+          required=True,
+      )
+
+
 Testing
 ===============
 
@@ -358,7 +386,7 @@ If you still need to test forms on lower level in unit tests
 you need to enable ``plone.app.z3cform`` support manually.
 Below is an example::
 
-    import unittest2 as unittest
+    import unittest
 
     from zope.interface import alsoProvides
     from zope.publisher.browser import setDefaultSkin
diff --git a/buildout.cfg b/buildout.cfg
index 9f8169b..92412b5 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,5 +1,5 @@
 [buildout]
-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.x.cfg
+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.1.x.cfg
 package-name = plone.app.z3cform
 package-extras = [tests]
 
diff --git a/plone/app/z3cform/templates/widget.pt b/plone/app/z3cform/templates/widget.pt
index e1ba798..cb58d02 100644
--- a/plone/app/z3cform/templates/widget.pt
+++ b/plone/app/z3cform/templates/widget.pt
@@ -7,9 +7,10 @@
                error_class python:error and ' error' or '';
                empty_values python: (None, '', [], ('', '', '', '00', '00', ''), ('', '', ''));
                empty_class python: (widget.value in empty_values) and ' empty' or '';
+	       additional_css_class  widget/additional_css_class|nothing;
                fieldname_class string:kssattr-fieldname-${widget/name};"
    data-pat-inlinevalidation='{"type":"z3c.form"}'
-   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class}${empty_class};
+   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class}${empty_class} ${additional_css_class};
                    data-fieldname widget/name;
                    id string:formfield-${widget/id};">
     <label for="" class="horizontal"
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 3202c30..17d47a3 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -6,12 +6,17 @@
 from plone.app.testing import TEST_USER_ID
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
 from plone.app.z3cform.widget import BaseWidget
+from plone.app.z3cform.widget import DateWidget
+from plone.autoform.directives import widget
+from plone.autoform.form import AutoExtensibleForm
 from plone.dexterity.fti import DexterityFTI
 from plone.registry.interfaces import IRegistry
+from plone.supermodel.model import Schema
 from plone.testing.zca import UNIT_TESTING
 from plone.uuid.interfaces import IUUID
 from Products.CMFPlone.interfaces import IMarkupSchema
 from z3c.form.form import Form
+from z3c.form.form import EditForm
 from z3c.form.interfaces import IFormLayer
 from z3c.form.widget import FieldWidget
 from zope.component import getUtility
@@ -1588,3 +1593,25 @@ def test_link_widget__data_converter(self):
             converter.toWidgetValue(u'mailto:me?subject=jep')['email_subject'],
             u'jep'
         )
+
+
+class WidgetCustomizingIntegrationTests(unittest.TestCase):
+
+    layer = PAZ3CForm_INTEGRATION_TESTING
+
+    def test_widget_base_additional_css(self):
+
+        class ITestDateSchema(Schema):
+
+            widget('my_date', DateWidget, additional_css_class='foo')
+            my_date = Date(title=u'My Date')
+
+        class TestForm(AutoExtensibleForm, EditForm):
+
+            ignoreContext = True
+            schema = ITestDateSchema
+
+        render = TestForm(self.layer['portal'], self.layer['request'])
+        self.assertIn(
+            'empty foo" data-fieldname="form.widgets.my_date"', render())
+


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-10-31T17:41:42+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/28cf3ef15691475f8a17f782036ad8d677434365

Change name to 'wrapper_css_class

Files changed:
M README.rst
M plone/app/z3cform/templates/widget.pt
M plone/app/z3cform/tests/test_widgets.py

diff --git a/README.rst b/README.rst
index 1f85ac0..914e123 100644
--- a/README.rst
+++ b/README.rst
@@ -354,7 +354,7 @@ You can add additional parameters to widgets defined in this package
 via the `plone.autoform.widgets.ParameterizedWidget` ::
 
   from plone.app.z3c.form.widget import DateWidget
-  MyDateWidget = ParameterizedWidget(DateWidget, additional_css_class='event_start')
+  MyDateWidget = ParameterizedWidget(DateWidget, wrapper_css_class='event_start')
 
 
 or via directives ::
@@ -366,7 +366,7 @@ or via directives ::
   class IMyEventBehavior(model.Schema):
 
   ...
-      widget('event_start', DateWidget, additional_css_class='event_start')
+      widget('event_start', DateWidget, wrapper_css_class='event_start')
       event_start = schema.TextLine(
           title=_(u'label_event_start'),
           description=_(u'help_event_start'),
diff --git a/plone/app/z3cform/templates/widget.pt b/plone/app/z3cform/templates/widget.pt
index cb58d02..c470670 100644
--- a/plone/app/z3cform/templates/widget.pt
+++ b/plone/app/z3cform/templates/widget.pt
@@ -7,10 +7,10 @@
                error_class python:error and ' error' or '';
                empty_values python: (None, '', [], ('', '', '', '00', '00', ''), ('', '', ''));
                empty_class python: (widget.value in empty_values) and ' empty' or '';
-	       additional_css_class  widget/additional_css_class|nothing;
+	       wrapper_css_class  widget/wrapper_css_class|nothing;
                fieldname_class string:kssattr-fieldname-${widget/name};"
    data-pat-inlinevalidation='{"type":"z3c.form"}'
-   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class}${empty_class} ${additional_css_class};
+   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class}${empty_class} ${wrapper_css_class};
                    data-fieldname widget/name;
                    id string:formfield-${widget/id};">
     <label for="" class="horizontal"
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 17d47a3..e518eeb 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -1599,11 +1599,11 @@ class WidgetCustomizingIntegrationTests(unittest.TestCase):
 
     layer = PAZ3CForm_INTEGRATION_TESTING
 
-    def test_widget_base_additional_css(self):
+    def test_widget_base_wrapper_css(self):
 
         class ITestDateSchema(Schema):
 
-            widget('my_date', DateWidget, additional_css_class='foo')
+            widget('my_date', DateWidget, wrapper_css_class='foo')
             my_date = Date(title=u'My Date')
 
         class TestForm(AutoExtensibleForm, EditForm):


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2017-11-01T16:58:22+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/07b9312fc1aa959784a4ddfe7b1634046a547081

Merge pull request #82 from plone/additional_css_class

Allow setting custom CSS class *outside* widget

Files changed:
M .gitignore
M CHANGES.rst
M README.rst
M buildout.cfg
M plone/app/z3cform/templates/widget.pt
M plone/app/z3cform/tests/test_widgets.py

diff --git a/.gitignore b/.gitignore
index aaf1639..abbc9b1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,7 @@ dist
 /bin
 /parts
 /develop-eggs
+/include
+/lib*
+.*.swp
+pip-selfcheck.json
diff --git a/CHANGES.rst b/CHANGES.rst
index 25f3afd..fa777ae 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -2,7 +2,7 @@ Changelog
 =========
 
 3.0.3 (unreleased)
-------------------
+------------------------
 
 Breaking changes:
 
@@ -29,6 +29,12 @@ Bug fixes:
   the query string is lost
   [tomgross]
 
+- Allow an additional CSS class for widgets in this package
+  [tomgross]
+
+- Document customization of widgets
+  [tomgross]
+
 3.0.2 (2017-09-06)
 ------------------
 
diff --git a/README.rst b/README.rst
index 522eecc..914e123 100644
--- a/README.rst
+++ b/README.rst
@@ -346,6 +346,34 @@ to display these fields in view mode, add the following css in your theme::
        display: none;
     }
 
+
+Add additional parameters to widgets
+=====================================
+
+You can add additional parameters to widgets defined in this package
+via the `plone.autoform.widgets.ParameterizedWidget` ::
+
+  from plone.app.z3c.form.widget import DateWidget
+  MyDateWidget = ParameterizedWidget(DateWidget, wrapper_css_class='event_start')
+
+
+or via directives ::
+
+  from plone.app.z3c.form.widget import DateWidget
+
+
+  @provider(IFormFieldProvider)
+  class IMyEventBehavior(model.Schema):
+
+  ...
+      widget('event_start', DateWidget, wrapper_css_class='event_start')
+      event_start = schema.TextLine(
+          title=_(u'label_event_start'),
+          description=_(u'help_event_start'),
+          required=True,
+      )
+
+
 Testing
 ===============
 
@@ -358,7 +386,7 @@ If you still need to test forms on lower level in unit tests
 you need to enable ``plone.app.z3cform`` support manually.
 Below is an example::
 
-    import unittest2 as unittest
+    import unittest
 
     from zope.interface import alsoProvides
     from zope.publisher.browser import setDefaultSkin
diff --git a/buildout.cfg b/buildout.cfg
index 9f8169b..92412b5 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -1,5 +1,5 @@
 [buildout]
-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.x.cfg
+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.1.x.cfg
 package-name = plone.app.z3cform
 package-extras = [tests]
 
diff --git a/plone/app/z3cform/templates/widget.pt b/plone/app/z3cform/templates/widget.pt
index e1ba798..c470670 100644
--- a/plone/app/z3cform/templates/widget.pt
+++ b/plone/app/z3cform/templates/widget.pt
@@ -7,9 +7,10 @@
                error_class python:error and ' error' or '';
                empty_values python: (None, '', [], ('', '', '', '00', '00', ''), ('', '', ''));
                empty_class python: (widget.value in empty_values) and ' empty' or '';
+	       wrapper_css_class  widget/wrapper_css_class|nothing;
                fieldname_class string:kssattr-fieldname-${widget/name};"
    data-pat-inlinevalidation='{"type":"z3c.form"}'
-   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class}${empty_class};
+   tal:attributes="class string:field pat-inlinevalidation ${fieldname_class}${error_class}${empty_class} ${wrapper_css_class};
                    data-fieldname widget/name;
                    id string:formfield-${widget/id};">
     <label for="" class="horizontal"
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 3202c30..e518eeb 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -6,12 +6,17 @@
 from plone.app.testing import TEST_USER_ID
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
 from plone.app.z3cform.widget import BaseWidget
+from plone.app.z3cform.widget import DateWidget
+from plone.autoform.directives import widget
+from plone.autoform.form import AutoExtensibleForm
 from plone.dexterity.fti import DexterityFTI
 from plone.registry.interfaces import IRegistry
+from plone.supermodel.model import Schema
 from plone.testing.zca import UNIT_TESTING
 from plone.uuid.interfaces import IUUID
 from Products.CMFPlone.interfaces import IMarkupSchema
 from z3c.form.form import Form
+from z3c.form.form import EditForm
 from z3c.form.interfaces import IFormLayer
 from z3c.form.widget import FieldWidget
 from zope.component import getUtility
@@ -1588,3 +1593,25 @@ def test_link_widget__data_converter(self):
             converter.toWidgetValue(u'mailto:me?subject=jep')['email_subject'],
             u'jep'
         )
+
+
+class WidgetCustomizingIntegrationTests(unittest.TestCase):
+
+    layer = PAZ3CForm_INTEGRATION_TESTING
+
+    def test_widget_base_wrapper_css(self):
+
+        class ITestDateSchema(Schema):
+
+            widget('my_date', DateWidget, wrapper_css_class='foo')
+            my_date = Date(title=u'My Date')
+
+        class TestForm(AutoExtensibleForm, EditForm):
+
+            ignoreContext = True
+            schema = ITestDateSchema
+
+        render = TestForm(self.layer['portal'], self.layer['request'])
+        self.assertIn(
+            'empty foo" data-fieldname="form.widgets.my_date"', render())
+


