Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-11-04T23:10:58+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/f8bc1f4402b952a56711652f1f0b1053b126a73c

Install plone.app.caching in 5.0 alpha, if available.

When it is already installed, upgrade it.

Note that plone.app.caching is required by Plone, not by Products.CMFPlone,
so it may not be available for installing.

Files changed:
M CHANGES.rst
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/v50/alphas.py
M plone/app/upgrade/v50/testing.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7a7bc1d..7ec8466 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -43,6 +43,10 @@ New features:
 
 Bug fixes:
 
+- Install plone.app.caching in 5.0 alpha if available.
+  When it is already installed, upgrade it.
+  [maurits]
+
 - Install plone.app.theming in 5.0 alpha.
   When it is already installed, upgrade it.
   [maurits]
diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py
index 1f60274..69578ce 100644
--- a/plone/app/upgrade/tests/base.py
+++ b/plone/app/upgrade/tests/base.py
@@ -2,12 +2,17 @@
 from os.path import abspath
 from os.path import dirname
 from os.path import join
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import FunctionalTesting
+from plone.app.testing.bbb import PTC_FIXTURE
 from plone.app.testing.bbb import PloneTestCase
 from Products.CMFCore.interfaces import IActionCategory
 from Products.CMFCore.interfaces import IActionInfo
 from Products.CMFCore.tests.base.testcase import WarningInterceptor
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.context import TarballImportContext
+from zope.configuration import xmlconfig
 from zope.site.hooks import setSite
 
 import transaction
@@ -17,8 +22,31 @@
 #
 
 
+class UpgradeTestCaseFixture(PloneSandboxLayer):
+
+    defaultBases = (PLONE_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        # In 5.0 alpha we install or upgrade plone.app.caching,
+        # so it must be available to Zope.
+        import plone.app.caching
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.caching,
+            context=configurationContext
+        )
+
+
+UPGRADE_TEST_CASE_FIXTURE = UpgradeTestCaseFixture()
+UPGRADE_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PTC_FIXTURE, UPGRADE_TEST_CASE_FIXTURE),
+    name='UpgradeTestCase:Functional')
+
+
 class MigrationTest(PloneTestCase):
 
+    layer = UPGRADE_FUNCTIONAL_TESTING
+
     def removeActionFromTool(
         self,
         action_id,
diff --git a/plone/app/upgrade/v50/alphas.py b/plone/app/upgrade/v50/alphas.py
index c375192..60544ff 100644
--- a/plone/app/upgrade/v50/alphas.py
+++ b/plone/app/upgrade/v50/alphas.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 import logging
+import pkg_resources
 
 from Acquisition import aq_parent, aq_base
 from Products.CMFCore.utils import getToolByName
@@ -22,6 +23,13 @@
 from zope.component.hooks import getSite
 from zope.schema.interfaces import ConstraintNotSatisfied
 
+try:
+    pkg_resources.get_distribution('plone.app.caching')
+except pkg_resources.DistributionNotFound:
+    HAS_CACHING = False
+else:
+    HAS_CACHING = True
+    from plone.app.caching.interfaces import IPloneCacheSettings
 
 logger = logging.getLogger('plone.app.upgrade')
 
@@ -72,6 +80,7 @@ def to50alpha1(context):
 
     upgrade_keyring(context)
     installOrUpgradePloneAppTheming(context)
+    installOrUpgradePloneAppCaching(context)
 
 
 def installOrUpgradePloneAppTheming(context):
@@ -92,6 +101,36 @@ def installOrUpgradePloneAppTheming(context):
         portal_setup.upgradeProfile(profile_id)
 
 
+def installOrUpgradePloneAppCaching(context):
+    """Install plone.app.caching if not installed yet.
+
+    Plone 5.0 installs it by default,
+    and hides it from the add-ons control panel.
+
+    Upgrade it for good measure if it is already installed.
+
+    Note: plone.app.caching is required by Plone, not by
+    Products.CMFPlone, so it may not be available.
+    """
+    if not HAS_CACHING:
+        return
+    profile_id = 'profile-plone.app.caching:default'
+    portal_setup = getToolByName(context, 'portal_setup')
+    if not portal_setup.profileExists(profile_id):
+        # During tests, the package may be there, but the zcml may not have
+        # been loaded, so the profile is not available.
+        return
+    registry = getUtility(IRegistry)
+    try:
+        registry.forInterface(IPloneCacheSettings)
+    except KeyError:
+        # plone.app.caching not yet installed
+        portal_setup.runAllImportStepsFromProfile(profile_id)
+    else:
+        # Might as well upgrade it if needed.
+        portal_setup.upgradeProfile(profile_id)
+
+
 def lowercase_email_login(context):
     """If email is used as login name, lowercase the login names.
     """
diff --git a/plone/app/upgrade/v50/testing.py b/plone/app/upgrade/v50/testing.py
index c57d677..4d34916 100644
--- a/plone/app/upgrade/v50/testing.py
+++ b/plone/app/upgrade/v50/testing.py
@@ -2,12 +2,24 @@
 from plone.app.testing import PLONE_FIXTURE
 from plone.testing.z2 import FunctionalTesting, login
 from zope.component.hooks import setSite
+from zope.configuration import xmlconfig
 import os
 
 
 class RealUpgradeLayer(PloneSandboxLayer):
     defaultBases = (PLONE_FIXTURE,)
 
+    def setUpZope(self, app, configurationContext):
+        # load ZCML
+        # In 5.0 alpha we install or upgrade plone.app.caching,
+        # so it must be available to Zope..
+        import plone.app.caching
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.caching,
+            context=configurationContext
+        )
+
     def setUpPloneSite(self, portal):
         app = portal.aq_parent
         login(app['acl_users'], 'admin')
diff --git a/setup.py b/setup.py
index 594471f..a9ac7c9 100644
--- a/setup.py
+++ b/setup.py
@@ -34,6 +34,7 @@
         test=[
             'zope.site',
             'mock',
+            'plone.app.caching',
             'plone.app.testing',
             'plone.app.theming',
         ]


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-11-06T13:16:02+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.upgrade/commit/50b7c1acebb9a395d91daa943e321e3ce0d2de1f

Merge pull request #99 from plone/install-caching-50-alpha

Install plone.app.caching in 5.0 alpha, if available.

Files changed:
M CHANGES.rst
M plone/app/upgrade/tests/base.py
M plone/app/upgrade/v50/alphas.py
M plone/app/upgrade/v50/testing.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7a7bc1d..7ec8466 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -43,6 +43,10 @@ New features:
 
 Bug fixes:
 
+- Install plone.app.caching in 5.0 alpha if available.
+  When it is already installed, upgrade it.
+  [maurits]
+
 - Install plone.app.theming in 5.0 alpha.
   When it is already installed, upgrade it.
   [maurits]
diff --git a/plone/app/upgrade/tests/base.py b/plone/app/upgrade/tests/base.py
index 1f60274..69578ce 100644
--- a/plone/app/upgrade/tests/base.py
+++ b/plone/app/upgrade/tests/base.py
@@ -2,12 +2,17 @@
 from os.path import abspath
 from os.path import dirname
 from os.path import join
+from plone.app.testing import PloneSandboxLayer
+from plone.app.testing import PLONE_FIXTURE
+from plone.app.testing import FunctionalTesting
+from plone.app.testing.bbb import PTC_FIXTURE
 from plone.app.testing.bbb import PloneTestCase
 from Products.CMFCore.interfaces import IActionCategory
 from Products.CMFCore.interfaces import IActionInfo
 from Products.CMFCore.tests.base.testcase import WarningInterceptor
 from Products.CMFCore.utils import getToolByName
 from Products.GenericSetup.context import TarballImportContext
+from zope.configuration import xmlconfig
 from zope.site.hooks import setSite
 
 import transaction
@@ -17,8 +22,31 @@
 #
 
 
+class UpgradeTestCaseFixture(PloneSandboxLayer):
+
+    defaultBases = (PLONE_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        # In 5.0 alpha we install or upgrade plone.app.caching,
+        # so it must be available to Zope.
+        import plone.app.caching
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.caching,
+            context=configurationContext
+        )
+
+
+UPGRADE_TEST_CASE_FIXTURE = UpgradeTestCaseFixture()
+UPGRADE_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(PTC_FIXTURE, UPGRADE_TEST_CASE_FIXTURE),
+    name='UpgradeTestCase:Functional')
+
+
 class MigrationTest(PloneTestCase):
 
+    layer = UPGRADE_FUNCTIONAL_TESTING
+
     def removeActionFromTool(
         self,
         action_id,
diff --git a/plone/app/upgrade/v50/alphas.py b/plone/app/upgrade/v50/alphas.py
index c375192..60544ff 100644
--- a/plone/app/upgrade/v50/alphas.py
+++ b/plone/app/upgrade/v50/alphas.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 import logging
+import pkg_resources
 
 from Acquisition import aq_parent, aq_base
 from Products.CMFCore.utils import getToolByName
@@ -22,6 +23,13 @@
 from zope.component.hooks import getSite
 from zope.schema.interfaces import ConstraintNotSatisfied
 
+try:
+    pkg_resources.get_distribution('plone.app.caching')
+except pkg_resources.DistributionNotFound:
+    HAS_CACHING = False
+else:
+    HAS_CACHING = True
+    from plone.app.caching.interfaces import IPloneCacheSettings
 
 logger = logging.getLogger('plone.app.upgrade')
 
@@ -72,6 +80,7 @@ def to50alpha1(context):
 
     upgrade_keyring(context)
     installOrUpgradePloneAppTheming(context)
+    installOrUpgradePloneAppCaching(context)
 
 
 def installOrUpgradePloneAppTheming(context):
@@ -92,6 +101,36 @@ def installOrUpgradePloneAppTheming(context):
         portal_setup.upgradeProfile(profile_id)
 
 
+def installOrUpgradePloneAppCaching(context):
+    """Install plone.app.caching if not installed yet.
+
+    Plone 5.0 installs it by default,
+    and hides it from the add-ons control panel.
+
+    Upgrade it for good measure if it is already installed.
+
+    Note: plone.app.caching is required by Plone, not by
+    Products.CMFPlone, so it may not be available.
+    """
+    if not HAS_CACHING:
+        return
+    profile_id = 'profile-plone.app.caching:default'
+    portal_setup = getToolByName(context, 'portal_setup')
+    if not portal_setup.profileExists(profile_id):
+        # During tests, the package may be there, but the zcml may not have
+        # been loaded, so the profile is not available.
+        return
+    registry = getUtility(IRegistry)
+    try:
+        registry.forInterface(IPloneCacheSettings)
+    except KeyError:
+        # plone.app.caching not yet installed
+        portal_setup.runAllImportStepsFromProfile(profile_id)
+    else:
+        # Might as well upgrade it if needed.
+        portal_setup.upgradeProfile(profile_id)
+
+
 def lowercase_email_login(context):
     """If email is used as login name, lowercase the login names.
     """
diff --git a/plone/app/upgrade/v50/testing.py b/plone/app/upgrade/v50/testing.py
index c57d677..4d34916 100644
--- a/plone/app/upgrade/v50/testing.py
+++ b/plone/app/upgrade/v50/testing.py
@@ -2,12 +2,24 @@
 from plone.app.testing import PLONE_FIXTURE
 from plone.testing.z2 import FunctionalTesting, login
 from zope.component.hooks import setSite
+from zope.configuration import xmlconfig
 import os
 
 
 class RealUpgradeLayer(PloneSandboxLayer):
     defaultBases = (PLONE_FIXTURE,)
 
+    def setUpZope(self, app, configurationContext):
+        # load ZCML
+        # In 5.0 alpha we install or upgrade plone.app.caching,
+        # so it must be available to Zope..
+        import plone.app.caching
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.caching,
+            context=configurationContext
+        )
+
     def setUpPloneSite(self, portal):
         app = portal.aq_parent
         login(app['acl_users'], 'admin')
diff --git a/setup.py b/setup.py
index 594471f..a9ac7c9 100644
--- a/setup.py
+++ b/setup.py
@@ -34,6 +34,7 @@
         test=[
             'zope.site',
             'mock',
+            'plone.app.caching',
             'plone.app.testing',
             'plone.app.theming',
         ]


