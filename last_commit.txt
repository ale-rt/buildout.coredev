Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-09-12T19:55:13+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/83f2bd8c787b99ea2816e5ab30d3b6b39deee35d

some documentation and minor cleanup

Files changed:
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentmenu/configure.zcml
M plone/app/contentmenu/contentmenu.pt
M plone/app/contentmenu/displayviewsmenu.py
M plone/app/contentmenu/interfaces.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/tests/test_menu.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4a4b736..2fe5edd 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 
 Breaking changes:
 
-- *add item here*
+- Documentation in README added.
+  [jensens]
 
 New features:
 
@@ -14,7 +15,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Minor code cleanup.
+  [jensens]
 
 
 2.1.8 (2016-05-26)
diff --git a/README.rst b/README.rst
index 9a646a0..431a660 100644
--- a/README.rst
+++ b/README.rst
@@ -1,6 +1,126 @@
 Introduction
 ============
 
-plone.app.contentmenu contains the logic that powers Plone's content menu
-(the green one with the drop-down menus or in toolbar).
+plone.app.contentmenu contains the logic that powers Plone's content menu which is part of the toolbar.
 
+It provides the menus items (and its submenues) for
+
+- factories menu (order=10)
+- workflows menu (order=20)
+- actions menu (order=30)
+- display menu (order=40)
+- manage portlets menu (order=50)
+
+Note that menu items are ordered by an 'ordered' property.
+To allow third party products to slot their own sub-menus in between the default menu items, these are registered with gaps.
+
+Custom menus
+============
+
+Custom menus are registered in ``configure.zcml`` like so::
+
+    <browser:menu
+        id="my_content_menu"
+        title="The 'My' menu - allows to do new exciting stuff"
+        class=".menu.MyMenu"
+    />
+
+im ``menu.py`` the class looks like so::
+
+    # -*- coding: utf-8 -*-
+    from plone.memoize.instance import memoize
+    from zope.browsermenu.interfaces import IBrowserMenu
+    from zope.browsermenu.menu import BrowserMenu
+    from zope.browsermenu.menu import BrowserSubMenuItem
+    from zope.component import getMultiAdapter
+    from zope.i18nmessageid import MessageFactory
+    from zope.interface import implementer
+
+    _ = MessageFactory('my.fancy')
+
+
+    class IMyMainMenuItem(IBrowserMenu):
+        """The main my menu item.
+
+        You may want to place this in interfaces.py
+        """
+
+
+    class IMyMenu(IBrowserMenu):
+        """The my menu.
+
+        You may want to place this in interfaces.py
+        """
+
+
+    @implementer(IMyMainMenuItem)
+    class MyMainMenuItem(BrowserSubMenuItem):
+        # This is in fact a submenu item of the parent menu, thus the name
+        # of the inherited class tells it, don't be confused.
+
+        title = _(u'label_my_menu', default=u'My')
+        description = _(u'title_my_menu',
+                        default=u'My for the current content item')
+        submenuId = 'my_fance_menu'
+
+        order = 35
+        extra = {
+            'id': 'my-fance-menu',
+            'li_class': 'plonetoolbar-content-my-fancy'
+        }
+
+        def __init__(self, context, request):
+            super(BrowserSubMenuItem, self).__init__(context, request)
+            self.context_state = getMultiAdapter(
+                (context, request),
+                name='plone_context_state'
+            )
+
+        @property
+        def action(self):
+            # return the url to be loaded if clicked on the link.
+            # even if a submenu exists it will be active if javascript is disbaled
+            return self.context.absolute_url()
+
+        @memoize
+        def available(self):
+            # check if the menu is available and shown or not
+            return True
+
+        def selected(self):
+            # check if the menu should be shown as selected
+            return False
+
+
+    @implementer(IMyMenu)
+    class ActionsMenu(BrowserMenu):
+
+        def getMenuItems(self, context, request):
+            """Return menu item entries in a TAL-friendly form."""
+            results = []
+
+            # here a single item is added. do what needed to add several entrys
+            results.append({
+                'title': 'My item 1',
+                'description': 'An my item',
+                'action': '/url/to/action',
+                'selected': False,
+                'icon': 'some_icon_class',
+                'extra': {
+                    'id': 'plone-contentmenu-my-fancy-one',
+                    'separator': None,
+                    'class': 'my-class pat-plone-modal',
+                    'modal': 'width: 400'
+                },
+                'submenu': None,
+            })
+
+            return results
+
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.contentmenu>`_.
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/contentmenu/configure.zcml b/plone/app/contentmenu/configure.zcml
index 2d3b71d..cf7f0f6 100644
--- a/plone/app/contentmenu/configure.zcml
+++ b/plone/app/contentmenu/configure.zcml
@@ -61,10 +61,10 @@
     party products to slot their own sub-menus in between the default menu
     items, these are registered with gaps:
 
-      actions menu   - order=10
-      display menu   - order=20
-      factories menu - order=30
-      workflows menu - order=40
+      factories menu - order=10
+      workflows menu - order=20
+      actions menu   - order=30
+      display menu   - order=40
       manage portlets menu - order=50
   -->
 
diff --git a/plone/app/contentmenu/contentmenu.pt b/plone/app/contentmenu/contentmenu.pt
index 39ba007..6fab797 100644
--- a/plone/app/contentmenu/contentmenu.pt
+++ b/plone/app/contentmenu/contentmenu.pt
@@ -1,84 +1,88 @@
-<tal:contentactionmenus define="menu view/menu;"
-                        condition="view/available"
-                        i18n:domain="plone">
-
+<tal:contentactionmenus
+    condition="view/available"
+    define="menu view/menu;"
+    i18n:domain="plone">
   <tal:menus repeat="menuItem menu">
-    <li tal:define="submenu menuItem/submenu;
-                    identifier menuItem/extra/id"
-        tal:attributes="id menuItem/extra/id">
-
-      <a href="#"
-         tal:omit-tag="not:menuItem/action"
-         tal:define="state_class menuItem/extra/class | nothing;
-                     state_class python:state_class and state_class or ''"
-         tal:attributes="href menuItem/action;
-                         title menuItem/description;
-                         class string:label-${state_class}"
-         i18n:attributes="title;">
-
-          <span tal:condition="menuItem/extra/stateTitle | nothing"
-                class="" aria-hidden="true"
-                tal:attributes="class string:icon-${identifier} ${menuItem/extra/class}">
-          </span>
-
-          <span tal:condition="not: menuItem/extra/stateTitle | nothing"
-                class="" aria-hidden="true"
-                tal:attributes="class string:icon-${identifier}">
-          </span>
-
-          <span tal:omit-tag="not: menuItem/extra/stateTitle | nothing">
-
-            <span tal:content="menuItem/title"
-                  i18n:translate="">
+    <li
+        tal:attributes="id menuItem/extra/id"
+        tal:define="submenu menuItem/submenu;
+                    identifier menuItem/extra/id">
+      <a
+          href="#"
+          i18n:attributes="title;"
+          tal:attributes="href menuItem/action;
+                          title menuItem/description;
+                          class string:label-${state_class}"
+          tal:define="state_class menuItem/extra/class | nothing;
+                      state_class python:state_class and state_class or ''"
+          tal:omit-tag="not:menuItem/action">
+        <span
+            aria-hidden="true"
+            class=""
+            tal:attributes="class string:icon-${identifier} ${menuItem/extra/class}"
+            tal:condition="menuItem/extra/stateTitle | nothing"></span>
+        <span
+            aria-hidden="true"
+            class=""
+            tal:attributes="class string:icon-${identifier}"
+            tal:condition="not: menuItem/extra/stateTitle | nothing"></span>
+        <span tal:omit-tag="not: menuItem/extra/stateTitle | nothing">
+          <span
+              i18n:translate=""
+              tal:content="menuItem/title">
               Menu Title
             </span>
-
-            <span tal:condition="menuItem/extra/stateTitle | nothing"
-                  tal:content="menuItem/extra/stateTitle"
-                  i18n:translate="">
+          <span
+              i18n:translate=""
+              tal:condition="menuItem/extra/stateTitle | nothing"
+              tal:content="menuItem/extra/stateTitle">
                 State title
             </span>
-          </span>
-          <span class="plone-toolbar-caret"
-                tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing">
-          </span>
+        </span>
+        <span
+            class="plone-toolbar-caret"
+            tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing"></span>
       </a>
-
-      <ul tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing"
-          aria-hidden="true">
+      <ul
+          aria-hidden="true"
+          tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing">
         <li class="plone-toolbar-submenu-header">
           <span tal:omit-tag="not:menuItem/extra/stateTitle | nothing">
             <span tal:content="menuItem/title">Menu Title</span>
-            <span tal:condition="menuItem/extra/stateTitle | nothing"
-                  tal:attributes="class string:${menuItem/extra/class}"
-                  tal:content="menuItem/extra/stateTitle"
-                  i18n:translate="">
+            <span
+                i18n:translate=""
+                tal:attributes="class string:${menuItem/extra/class}"
+                tal:condition="menuItem/extra/stateTitle | nothing"
+                tal:content="menuItem/extra/stateTitle">
                 State title
             </span>
           </span>
         </li>
-        <li tal:repeat="subMenuItem submenu"
-            tal:attributes="class string:${menuItem/extra/li_class | nothing} ${subMenuItem/extra/separator}">
-          <a href="#"
-             tal:condition="subMenuItem/action"
-             tal:attributes="href subMenuItem/action;
-                             title subMenuItem/description;
-                             id subMenuItem/extra/id | nothing;
-                             class subMenuItem/extra/class | nothing;
-                             data-pat-plone-modal subMenuItem/extra/modal | nothing;"
-             i18n:attributes="title">
-
-              <tal:title content="structure subMenuItem/title"
-                    i18n:translate="">
+        <li
+            tal:attributes="class string:${menuItem/extra/li_class | nothing} ${subMenuItem/extra/separator}"
+            tal:repeat="subMenuItem submenu">
+          <a
+              href="#"
+              i18n:attributes="title"
+              tal:attributes="href subMenuItem/action;
+                              title subMenuItem/description;
+                              id subMenuItem/extra/id | nothing;
+                              class subMenuItem/extra/class | nothing;
+                              data-pat-plone-modal subMenuItem/extra/modal | nothing;"
+              tal:condition="subMenuItem/action">
+            <tal:title
+                content="structure subMenuItem/title"
+                i18n:translate="">
                   Title
               </tal:title>
           </a>
-          <span tal:condition="not:subMenuItem/action"
-               tal:attributes="id subMenuItem/extra/id | nothing;
-                               class subMenuItem/extra/class | nothing">
-
-              <span tal:content="structure subMenuItem/title"
-                    i18n:translate="">
+          <span
+              tal:attributes="id subMenuItem/extra/id | nothing;
+                              class subMenuItem/extra/class | nothing"
+              tal:condition="not:subMenuItem/action">
+            <span
+                i18n:translate=""
+                tal:content="structure subMenuItem/title">
                   Title
               </span>
           </span>
diff --git a/plone/app/contentmenu/displayviewsmenu.py b/plone/app/contentmenu/displayviewsmenu.py
index dcfecc2..1bfe624 100644
--- a/plone/app/contentmenu/displayviewsmenu.py
+++ b/plone/app/contentmenu/displayviewsmenu.py
@@ -8,14 +8,14 @@
 @implementer(IDisplayViewsMenu)
 class DisplayViewsMenu(BrowserMenu):
 
-    def getMenuItemByAction(self, object, request, action):
+    def getMenuItemByAction(self, context, request, action):
         # Normalize actions; strip view prefix
         if action.startswith('@@'):
             action = action[2:]
         if action.startswith('++view++'):
             action = action[8:]
 
-        for name, item in getAdapters((object, request),
+        for name, item in getAdapters((context, request),
                                       self.getMenuItemType()):
             item_action = item.action
             # Normalize menu item action; never uses ++view++
diff --git a/plone/app/contentmenu/interfaces.py b/plone/app/contentmenu/interfaces.py
index 68606b6..586cc2a 100644
--- a/plone/app/contentmenu/interfaces.py
+++ b/plone/app/contentmenu/interfaces.py
@@ -3,13 +3,12 @@
 from zope.browsermenu.interfaces import IBrowserSubMenuItem
 from zope.browsermenu.interfaces import IMenuItemType
 from zope.contentprovider.interfaces import IContentProvider
-from zope.interface import directlyProvides
 from zope.interface import Interface
+from zope.interface import provider
 
 
 class IContentMenuView(IContentProvider):
-    """The view that powers the content menu (the green bar at the top of
-    the editable border).
+    """The view that powers the content menu in the toolbar.
 
     This will construct a menu by finding an adapter to IContentMenu.
     """
@@ -31,10 +30,10 @@ def menu():
 # IInterface IMenuItemType)
 
 
+@provider(IMenuItemType)
 class IContentMenuItem(Interface):
     """Special menu item type for Plone's content menu."""
 
-directlyProvides(IContentMenuItem, IMenuItemType)
 
 # The sub-menus - because they require additional logic, each of these will be
 # implemented with a separate class. We provide markers here to distinguish
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index 6753071..93d1161 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -27,10 +27,12 @@
 from Products.CMFPlone.interfaces.structure import INonStructuralFolder
 from zope.browsermenu.menu import BrowserMenu
 from zope.browsermenu.menu import BrowserSubMenuItem
-from zope.component import getMultiAdapter, queryMultiAdapter
+from zope.component import getMultiAdapter
+from zope.component import queryMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.component import getUtility
 from zope.interface import implementer
+
 import pkg_resources
 
 try:
@@ -84,33 +86,36 @@ def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
         results = []
 
-        context_state = getMultiAdapter((context, request),
-                                        name='plone_context_state')
+        context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
         editActions = context_state.actions('object_buttons')
         if not editActions:
             return results
 
         for action in editActions:
-            if action['allowed']:
-                aid = action['id']
-                cssClass = 'actionicon-object_buttons-%s' % aid
-                icon = action.get('icon', None)
-                modal = action.get('modal', None)
-                if modal:
-                    cssClass += ' pat-plone-modal'
+            if not action['allowed']:
+                continue
+            aid = action['id']
+            cssClass = 'actionicon-object_buttons-%s' % aid
+            icon = action.get('icon', None)
+            modal = action.get('modal', None)
+            if modal:
+                cssClass += ' pat-plone-modal'
 
-                results.append({
-                    'title': action['title'],
-                    'description': '',
-                    'action': addTokenToUrl(action['url'], request),
-                    'selected': False,
-                    'icon': icon,
-                    'extra': {'id': 'plone-contentmenu-actions-' + aid,
-                              'separator': None,
-                              'class': cssClass,
-                              'modal': modal},
-                    'submenu': None,
-                })
+            results.append({
+                'title': action['title'],
+                'description': '',
+                'action': addTokenToUrl(action['url'], request),
+                'selected': False,
+                'icon': icon,
+                'extra': {'id': 'plone-contentmenu-actions-' + aid,
+                          'separator': None,
+                          'class': cssClass,
+                          'modal': modal},
+                'submenu': None,
+            })
         return results
 
 
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 18c96d9..f4af2b0 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -85,8 +85,7 @@ def testTemplatesIncluded(self):
         actions = self.menu.getMenuItems(self.folder, self.request)
         templates = [a['extra']['id'] for a in actions]
         self.failUnless(
-            'plone-contentmenu-display-folder_listing' in templates
-            or
+            'plone-contentmenu-display-folder_listing' in templates or
             'plone-contentmenu-display-listing_view' in templates
             # plone.app.contenttypes has unified views
         )
@@ -151,8 +150,7 @@ def testCurrentTemplateSelected(self):
         actions = self.menu.getMenuItems(self.folder, self.request)
         selected = [a['extra']['id'] for a in actions if a['selected']]
         self.assertTrue(
-            selected == ['plone-contentmenu-display-folder_listing']
-            or
+            selected == ['plone-contentmenu-display-folder_listing'] or
             selected == ['plone-contentmenu-display-listing_view']
             # plone.app.contenttypes has unified views
         )
@@ -650,8 +648,7 @@ def testAdvancedIncluded(self):
         url_plone5 = '%s/@@topbar-manage-portlets/plone.leftcolumn' % base_url
         url_plone4 = '%s/manage-portlets' % base_url
         self.assertTrue(
-            url_plone5 in [a['action'] for a in actions][1]
-            or
+            url_plone5 in [a['action'] for a in actions][1] or
             url_plone4 in [a['action'] for a in actions][1]
         )
 


Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-09-12T19:56:33+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/96559418baeb1699e8cc45a0e724e69cf605c968

isort

Files changed:
A setup.cfg
M plone/app/contentmenu/__init__.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/test_menu.py
M setup.py

diff --git a/plone/app/contentmenu/__init__.py b/plone/app/contentmenu/__init__.py
index ccf11d9..cad1a5e 100644
--- a/plone/app/contentmenu/__init__.py
+++ b/plone/app/contentmenu/__init__.py
@@ -1,3 +1,5 @@
 # -*- coding: utf-8 -*-
 from zope.i18nmessageid import MessageFactory
+
+
 PloneMessageFactory = MessageFactory('plone')
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index 93d1161..3538fb2 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -19,7 +19,8 @@
 from plone.portlets.interfaces import IPortletManager
 from plone.protect.utils import addTokenToUrl
 from plone.registry.interfaces import IRegistry
-from Products.CMFCore.utils import getToolByName, _checkPermission
+from Products.CMFCore.utils import _checkPermission
+from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
 from Products.CMFPlone import utils
 from Products.CMFPlone.interfaces.constrains import IConstrainTypes
@@ -28,13 +29,14 @@
 from zope.browsermenu.menu import BrowserMenu
 from zope.browsermenu.menu import BrowserSubMenuItem
 from zope.component import getMultiAdapter
-from zope.component import queryMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.component import getUtility
+from zope.component import queryMultiAdapter
 from zope.interface import implementer
 
 import pkg_resources
 
+
 try:
     pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
     from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies
diff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py
index 4d8cbdf..4677e1f 100644
--- a/plone/app/contentmenu/testing.py
+++ b/plone/app/contentmenu/testing.py
@@ -7,6 +7,7 @@
 from plone.app.testing import PloneSandboxLayer
 from plone.testing import z2
 from zope.configuration import xmlconfig
+
 import pkg_resources
 
 
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index f4af2b0..f7fe5b8 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -21,6 +21,7 @@
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getUtility
 from zope.interface import directlyProvides
+
 import unittest
 
 
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..f1aa06c
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,16 @@
+[check-manifest]
+ignore =
+    *.cfg
+    .coveragerc
+    .editorconfig
+    .gitattributes
+    bootstrap-buildout.py
+
+[isort]
+# for details see
+# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
diff --git a/setup.py b/setup.py
index 6626dee..c26bd5e 100644
--- a/setup.py
+++ b/setup.py
@@ -3,24 +3,25 @@
 from setuptools import setup
 
 version = '2.1.9.dev0'
-long_description = open("README.rst").read() + "\n"
-long_description += open("CHANGES.rst").read()
+long_description = open('README.rst').read() + '\n'
+long_description += open('CHANGES.rst').read()
+
 setup(
     name='plone.app.contentmenu',
     version=version,
-    description="Plone's content menu implementation",
+    description='Plone\'s content menu implementation',
     long_description=long_description,
     classifiers=[
-        "Environment :: Web Environment",
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Plone :: 5.1",
-        "Framework :: Zope2",
-        "License :: OSI Approved :: GNU General Public License (GPL)",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-      ],
+        'Environment :: Web Environment',
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Framework :: Zope2',
+        'License :: OSI Approved :: GNU General Public License (GPL)',
+        'Operating System :: OS Independent',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
+    ],
     keywords='plone contentmenu menu',
     author='Plone Foundation',
     author_email='plone-developers@lists.sourceforge.net',


Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-09-12T19:57:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/364b3cfcf0e04256cbca80bca8eecaf2640b42f5

sanitize and micro optimizations

Files changed:
M CHANGES.rst
M plone/app/contentmenu/menu.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2fe5edd..5d04936 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,16 +6,16 @@ Changelog
 
 Breaking changes:
 
-- Documentation in README added.
-  [jensens]
+- *add item here*
 
 New features:
 
-- *add item here*
+- Documentation in README added.
+  [jensens]
 
 Bug fixes:
 
-- Minor code cleanup.
+- Minor code cleanup, some micro-optimizations.
   [jensens]
 
 
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index 3538fb2..c254bea 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -59,9 +59,11 @@ class ActionsSubMenuItem(BrowserSubMenuItem):
     }
 
     def __init__(self, context, request):
-        BrowserSubMenuItem.__init__(self, context, request)
-        self.context_state = getMultiAdapter((context, request),
-                                             name='plone_context_state')
+        super(ActionsSubMenuItem, self).__init__(context, request)
+        self.context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
 
     @property
     def action(self):
@@ -130,9 +132,11 @@ class DisplaySubMenuItem(BrowserSubMenuItem):
     order = 40
 
     def __init__(self, context, request):
-        BrowserSubMenuItem.__init__(self, context, request)
-        self.context_state = getMultiAdapter((context, request),
-                                             name='plone_context_state')
+        super(DisplaySubMenuItem, self).__init__(context, request)
+        self.context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
 
     @property
     def extra(self):
@@ -173,24 +177,24 @@ def available(self):
         context = None
 
         folderLayouts = []
+        folderCanSetLayout = False
         contextLayouts = []
 
         # If this is a default page, also get menu items relative to the parent
         if isDefaultPage:
-            folder = ISelectableBrowserDefault(utils.parent(self.context),
-                                               None)
-
-        context = ISelectableBrowserDefault(self.context, None)
-
-        folderLayouts = []
-        folderCanSetLayout = False
-        folderCanSetDefaultPage = False
+            folder = ISelectableBrowserDefault(
+                utils.parent(self.context),
+                None
+            )
 
         if folder is not None:
+            if folder.canSetDefaultPage():
+                # Always Show the menu if we can set a default-page (short cut)
+                return True
             folderLayouts = folder.getAvailableLayouts()
             folderCanSetLayout = folder.canSetLayout()
-            folderCanSetDefaultPage = folder.canSetDefaultPage()
 
+        context = ISelectableBrowserDefault(self.context, None)
         contextLayouts = []
         contextCanSetLayout = False
         contextCanSetDefaultPage = False
@@ -200,15 +204,12 @@ def available(self):
             contextCanSetLayout = context.canSetLayout()
             contextCanSetDefaultPage = context.canSetDefaultPage()
 
-        # Show the menu if we either can set a default-page, or we have more
-        # than one layout to choose from.
-        if (folderCanSetDefaultPage) or \
-           (folderCanSetLayout and len(folderLayouts) > 1) or \
-           (folder is None and contextCanSetDefaultPage) or \
-           (contextCanSetLayout and len(contextLayouts) > 1):
-            return True
-        else:
-            return False
+        # we have more than one layout to choose from?
+        return (
+            (folderCanSetLayout and len(folderLayouts) > 1) or
+            (folder is None and contextCanSetDefaultPage) or
+            (contextCanSetLayout and len(contextLayouts) > 1)
+        )
 
     def selected(self):
         return False
@@ -329,7 +330,7 @@ def getMenuItems(self, obj, request):
                     'separator': 'actionSeparator',
                     'class': 'actionMenuSelected'},
                 'submenu': None,
-                })
+            })
             # Let the user change the selection
             if folderCanSetDefaultPage:
                 results.append({
@@ -374,11 +375,7 @@ def getMenuItems(self, obj, request):
             # If context is a default-page in a folder, that folder's views
             # will be shown. Only show context views if there are any to show.
 
-            showLayouts = False
-            if not isDefaultPage:
-                showLayouts = True
-            elif len(layouts) > 1:
-                showLayouts = True
+            showLayouts = not isDefaultPage or len(layouts) > 1
 
             if showLayouts and contextCanSetLayout:
                 for id, title in contextLayouts:
@@ -395,7 +392,7 @@ def getMenuItems(self, obj, request):
                             'id': 'plone-contentmenu-display-' + id,
                             'separator': None,
                             'class': is_selected and 'actionMenuSelected' or ''
-                            },
+                        },
                         'submenu': None,
                     })
 
@@ -422,7 +419,7 @@ def getMenuItems(self, obj, request):
                                 'separator': 'actionSeparator',
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
-                            })
+                        })
                 else:
                     defaultPageObj = getattr(obj, defaultPage, None)
                     defaultPageTitle = u""
@@ -465,7 +462,7 @@ def getMenuItems(self, obj, request):
                                 'separator': 'actionSeparator',
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
-                            })
+                        })
 
         return results
 
@@ -480,9 +477,11 @@ class FactoriesSubMenuItem(BrowserSubMenuItem):
                     default=u'Add new items inside this item')
 
     def __init__(self, context, request):
-        BrowserSubMenuItem.__init__(self, context, request)
-        self.context_state = getMultiAdapter((context, request),
-                                             name='plone_context_state')
+        super(FactoriesSubMenuItem, self).__init__(context, request)
+        self.context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
 
     @property
     def extra(self):
@@ -493,7 +492,8 @@ def extra(self):
     def action(self):
         return addTokenToUrl(
             '%s/folder_factories' % self._addContext().absolute_url(),
-            self.request)
+            self.request
+        )
 
     def available(self):
         itemsToAdd = self._itemsToAdd()
@@ -509,8 +509,7 @@ def selected(self):
     def _addContext(self):
         if self.context_state.is_structural_folder():
             return self.context
-        else:
-            return self.context_state.folder()
+        return self.context_state.folder()
 
     @memoize
     def _itemsToAdd(self):
@@ -522,10 +521,8 @@ def _addableTypesInContext(self, addContext):
         constrain = IConstrainTypes(addContext, None)
         if constrain is None:
             return allowed_types
-        else:
-            locallyAllowed = constrain.getLocallyAllowedTypes()
-            return [fti for fti in allowed_types
-                    if fti.getId() in locallyAllowed]
+        locallyAllowed = constrain.getLocallyAllowedTypes()
+        return [fti for fti in allowed_types if fti.getId() in locallyAllowed]
 
     @memoize
     def _addingToParent(self):
@@ -604,7 +601,7 @@ def getMenuItems(self, context, request):
                         'separator': None,
                         'class': ''},
                     'submenu': None,
-                    })
+                })
 
         # Also add a menu item to add items to the default page
         context_state = getMultiAdapter((context, request),
@@ -627,7 +624,7 @@ def getMenuItems(self, context, request):
                     'separator': None,
                     'class': 'pat-plone-modal'},
                 'submenu': None,
-                })
+            })
 
         return results
 
@@ -672,15 +669,13 @@ def description(self):
         if self._manageSettings() or len(self._transitions()) > 0:
             return _(u'title_change_state_of_item',
                      default=u'Change the state of this item')
-        else:
-            return u''
+        return u''
 
     @property
     def action(self):
         if self._manageSettings() or len(self._transitions()) > 0:
             return self.context.absolute_url() + '/content_status_history'
-        else:
-            return ''
+        return ''
 
     @memoize
     def available(self):
@@ -881,7 +876,9 @@ def getMenuItems(self, context, request):
         sm = getSecurityManager()
         # Bail out if the user can't manage portlets
         if not sm.checkPermission(
-                PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION, context):
+                PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION,
+                context
+        ):
             return items
         blacklist = getUtility(IRegistry).get(
             'plone.app.portlets.PortletManagerBlacklist', [])


Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-09-13T10:31:11+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.app.contentmenu/commit/092d0785ba0c5fb1a4bb8896df860fa0a2921ceb

Merge pull request #15 from plone/jensens-doc-and-cleanup

Documentation and cleanup

Files changed:
A setup.cfg
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentmenu/__init__.py
M plone/app/contentmenu/configure.zcml
M plone/app/contentmenu/contentmenu.pt
M plone/app/contentmenu/displayviewsmenu.py
M plone/app/contentmenu/interfaces.py
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/test_menu.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4a4b736..5d04936 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,11 +10,13 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Documentation in README added.
+  [jensens]
 
 Bug fixes:
 
-- *add item here*
+- Minor code cleanup, some micro-optimizations.
+  [jensens]
 
 
 2.1.8 (2016-05-26)
diff --git a/README.rst b/README.rst
index 9a646a0..431a660 100644
--- a/README.rst
+++ b/README.rst
@@ -1,6 +1,126 @@
 Introduction
 ============
 
-plone.app.contentmenu contains the logic that powers Plone's content menu
-(the green one with the drop-down menus or in toolbar).
+plone.app.contentmenu contains the logic that powers Plone's content menu which is part of the toolbar.
 
+It provides the menus items (and its submenues) for
+
+- factories menu (order=10)
+- workflows menu (order=20)
+- actions menu (order=30)
+- display menu (order=40)
+- manage portlets menu (order=50)
+
+Note that menu items are ordered by an 'ordered' property.
+To allow third party products to slot their own sub-menus in between the default menu items, these are registered with gaps.
+
+Custom menus
+============
+
+Custom menus are registered in ``configure.zcml`` like so::
+
+    <browser:menu
+        id="my_content_menu"
+        title="The 'My' menu - allows to do new exciting stuff"
+        class=".menu.MyMenu"
+    />
+
+im ``menu.py`` the class looks like so::
+
+    # -*- coding: utf-8 -*-
+    from plone.memoize.instance import memoize
+    from zope.browsermenu.interfaces import IBrowserMenu
+    from zope.browsermenu.menu import BrowserMenu
+    from zope.browsermenu.menu import BrowserSubMenuItem
+    from zope.component import getMultiAdapter
+    from zope.i18nmessageid import MessageFactory
+    from zope.interface import implementer
+
+    _ = MessageFactory('my.fancy')
+
+
+    class IMyMainMenuItem(IBrowserMenu):
+        """The main my menu item.
+
+        You may want to place this in interfaces.py
+        """
+
+
+    class IMyMenu(IBrowserMenu):
+        """The my menu.
+
+        You may want to place this in interfaces.py
+        """
+
+
+    @implementer(IMyMainMenuItem)
+    class MyMainMenuItem(BrowserSubMenuItem):
+        # This is in fact a submenu item of the parent menu, thus the name
+        # of the inherited class tells it, don't be confused.
+
+        title = _(u'label_my_menu', default=u'My')
+        description = _(u'title_my_menu',
+                        default=u'My for the current content item')
+        submenuId = 'my_fance_menu'
+
+        order = 35
+        extra = {
+            'id': 'my-fance-menu',
+            'li_class': 'plonetoolbar-content-my-fancy'
+        }
+
+        def __init__(self, context, request):
+            super(BrowserSubMenuItem, self).__init__(context, request)
+            self.context_state = getMultiAdapter(
+                (context, request),
+                name='plone_context_state'
+            )
+
+        @property
+        def action(self):
+            # return the url to be loaded if clicked on the link.
+            # even if a submenu exists it will be active if javascript is disbaled
+            return self.context.absolute_url()
+
+        @memoize
+        def available(self):
+            # check if the menu is available and shown or not
+            return True
+
+        def selected(self):
+            # check if the menu should be shown as selected
+            return False
+
+
+    @implementer(IMyMenu)
+    class ActionsMenu(BrowserMenu):
+
+        def getMenuItems(self, context, request):
+            """Return menu item entries in a TAL-friendly form."""
+            results = []
+
+            # here a single item is added. do what needed to add several entrys
+            results.append({
+                'title': 'My item 1',
+                'description': 'An my item',
+                'action': '/url/to/action',
+                'selected': False,
+                'icon': 'some_icon_class',
+                'extra': {
+                    'id': 'plone-contentmenu-my-fancy-one',
+                    'separator': None,
+                    'class': 'my-class pat-plone-modal',
+                    'modal': 'width: 400'
+                },
+                'submenu': None,
+            })
+
+            return results
+
+
+Source Code
+===========
+
+Contributors please read the document `Process for Plone core's development <http://docs.plone.org/develop/plone-coredev/index.html>`_
+
+Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.contentmenu>`_.
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/contentmenu/__init__.py b/plone/app/contentmenu/__init__.py
index ccf11d9..cad1a5e 100644
--- a/plone/app/contentmenu/__init__.py
+++ b/plone/app/contentmenu/__init__.py
@@ -1,3 +1,5 @@
 # -*- coding: utf-8 -*-
 from zope.i18nmessageid import MessageFactory
+
+
 PloneMessageFactory = MessageFactory('plone')
diff --git a/plone/app/contentmenu/configure.zcml b/plone/app/contentmenu/configure.zcml
index 2d3b71d..cf7f0f6 100644
--- a/plone/app/contentmenu/configure.zcml
+++ b/plone/app/contentmenu/configure.zcml
@@ -61,10 +61,10 @@
     party products to slot their own sub-menus in between the default menu
     items, these are registered with gaps:
 
-      actions menu   - order=10
-      display menu   - order=20
-      factories menu - order=30
-      workflows menu - order=40
+      factories menu - order=10
+      workflows menu - order=20
+      actions menu   - order=30
+      display menu   - order=40
       manage portlets menu - order=50
   -->
 
diff --git a/plone/app/contentmenu/contentmenu.pt b/plone/app/contentmenu/contentmenu.pt
index 39ba007..6fab797 100644
--- a/plone/app/contentmenu/contentmenu.pt
+++ b/plone/app/contentmenu/contentmenu.pt
@@ -1,84 +1,88 @@
-<tal:contentactionmenus define="menu view/menu;"
-                        condition="view/available"
-                        i18n:domain="plone">
-
+<tal:contentactionmenus
+    condition="view/available"
+    define="menu view/menu;"
+    i18n:domain="plone">
   <tal:menus repeat="menuItem menu">
-    <li tal:define="submenu menuItem/submenu;
-                    identifier menuItem/extra/id"
-        tal:attributes="id menuItem/extra/id">
-
-      <a href="#"
-         tal:omit-tag="not:menuItem/action"
-         tal:define="state_class menuItem/extra/class | nothing;
-                     state_class python:state_class and state_class or ''"
-         tal:attributes="href menuItem/action;
-                         title menuItem/description;
-                         class string:label-${state_class}"
-         i18n:attributes="title;">
-
-          <span tal:condition="menuItem/extra/stateTitle | nothing"
-                class="" aria-hidden="true"
-                tal:attributes="class string:icon-${identifier} ${menuItem/extra/class}">
-          </span>
-
-          <span tal:condition="not: menuItem/extra/stateTitle | nothing"
-                class="" aria-hidden="true"
-                tal:attributes="class string:icon-${identifier}">
-          </span>
-
-          <span tal:omit-tag="not: menuItem/extra/stateTitle | nothing">
-
-            <span tal:content="menuItem/title"
-                  i18n:translate="">
+    <li
+        tal:attributes="id menuItem/extra/id"
+        tal:define="submenu menuItem/submenu;
+                    identifier menuItem/extra/id">
+      <a
+          href="#"
+          i18n:attributes="title;"
+          tal:attributes="href menuItem/action;
+                          title menuItem/description;
+                          class string:label-${state_class}"
+          tal:define="state_class menuItem/extra/class | nothing;
+                      state_class python:state_class and state_class or ''"
+          tal:omit-tag="not:menuItem/action">
+        <span
+            aria-hidden="true"
+            class=""
+            tal:attributes="class string:icon-${identifier} ${menuItem/extra/class}"
+            tal:condition="menuItem/extra/stateTitle | nothing"></span>
+        <span
+            aria-hidden="true"
+            class=""
+            tal:attributes="class string:icon-${identifier}"
+            tal:condition="not: menuItem/extra/stateTitle | nothing"></span>
+        <span tal:omit-tag="not: menuItem/extra/stateTitle | nothing">
+          <span
+              i18n:translate=""
+              tal:content="menuItem/title">
               Menu Title
             </span>
-
-            <span tal:condition="menuItem/extra/stateTitle | nothing"
-                  tal:content="menuItem/extra/stateTitle"
-                  i18n:translate="">
+          <span
+              i18n:translate=""
+              tal:condition="menuItem/extra/stateTitle | nothing"
+              tal:content="menuItem/extra/stateTitle">
                 State title
             </span>
-          </span>
-          <span class="plone-toolbar-caret"
-                tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing">
-          </span>
+        </span>
+        <span
+            class="plone-toolbar-caret"
+            tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing"></span>
       </a>
-
-      <ul tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing"
-          aria-hidden="true">
+      <ul
+          aria-hidden="true"
+          tal:condition="not:menuItem/extra/hideChildren | not:submenu | nothing">
         <li class="plone-toolbar-submenu-header">
           <span tal:omit-tag="not:menuItem/extra/stateTitle | nothing">
             <span tal:content="menuItem/title">Menu Title</span>
-            <span tal:condition="menuItem/extra/stateTitle | nothing"
-                  tal:attributes="class string:${menuItem/extra/class}"
-                  tal:content="menuItem/extra/stateTitle"
-                  i18n:translate="">
+            <span
+                i18n:translate=""
+                tal:attributes="class string:${menuItem/extra/class}"
+                tal:condition="menuItem/extra/stateTitle | nothing"
+                tal:content="menuItem/extra/stateTitle">
                 State title
             </span>
           </span>
         </li>
-        <li tal:repeat="subMenuItem submenu"
-            tal:attributes="class string:${menuItem/extra/li_class | nothing} ${subMenuItem/extra/separator}">
-          <a href="#"
-             tal:condition="subMenuItem/action"
-             tal:attributes="href subMenuItem/action;
-                             title subMenuItem/description;
-                             id subMenuItem/extra/id | nothing;
-                             class subMenuItem/extra/class | nothing;
-                             data-pat-plone-modal subMenuItem/extra/modal | nothing;"
-             i18n:attributes="title">
-
-              <tal:title content="structure subMenuItem/title"
-                    i18n:translate="">
+        <li
+            tal:attributes="class string:${menuItem/extra/li_class | nothing} ${subMenuItem/extra/separator}"
+            tal:repeat="subMenuItem submenu">
+          <a
+              href="#"
+              i18n:attributes="title"
+              tal:attributes="href subMenuItem/action;
+                              title subMenuItem/description;
+                              id subMenuItem/extra/id | nothing;
+                              class subMenuItem/extra/class | nothing;
+                              data-pat-plone-modal subMenuItem/extra/modal | nothing;"
+              tal:condition="subMenuItem/action">
+            <tal:title
+                content="structure subMenuItem/title"
+                i18n:translate="">
                   Title
               </tal:title>
           </a>
-          <span tal:condition="not:subMenuItem/action"
-               tal:attributes="id subMenuItem/extra/id | nothing;
-                               class subMenuItem/extra/class | nothing">
-
-              <span tal:content="structure subMenuItem/title"
-                    i18n:translate="">
+          <span
+              tal:attributes="id subMenuItem/extra/id | nothing;
+                              class subMenuItem/extra/class | nothing"
+              tal:condition="not:subMenuItem/action">
+            <span
+                i18n:translate=""
+                tal:content="structure subMenuItem/title">
                   Title
               </span>
           </span>
diff --git a/plone/app/contentmenu/displayviewsmenu.py b/plone/app/contentmenu/displayviewsmenu.py
index dcfecc2..1bfe624 100644
--- a/plone/app/contentmenu/displayviewsmenu.py
+++ b/plone/app/contentmenu/displayviewsmenu.py
@@ -8,14 +8,14 @@
 @implementer(IDisplayViewsMenu)
 class DisplayViewsMenu(BrowserMenu):
 
-    def getMenuItemByAction(self, object, request, action):
+    def getMenuItemByAction(self, context, request, action):
         # Normalize actions; strip view prefix
         if action.startswith('@@'):
             action = action[2:]
         if action.startswith('++view++'):
             action = action[8:]
 
-        for name, item in getAdapters((object, request),
+        for name, item in getAdapters((context, request),
                                       self.getMenuItemType()):
             item_action = item.action
             # Normalize menu item action; never uses ++view++
diff --git a/plone/app/contentmenu/interfaces.py b/plone/app/contentmenu/interfaces.py
index 68606b6..586cc2a 100644
--- a/plone/app/contentmenu/interfaces.py
+++ b/plone/app/contentmenu/interfaces.py
@@ -3,13 +3,12 @@
 from zope.browsermenu.interfaces import IBrowserSubMenuItem
 from zope.browsermenu.interfaces import IMenuItemType
 from zope.contentprovider.interfaces import IContentProvider
-from zope.interface import directlyProvides
 from zope.interface import Interface
+from zope.interface import provider
 
 
 class IContentMenuView(IContentProvider):
-    """The view that powers the content menu (the green bar at the top of
-    the editable border).
+    """The view that powers the content menu in the toolbar.
 
     This will construct a menu by finding an adapter to IContentMenu.
     """
@@ -31,10 +30,10 @@ def menu():
 # IInterface IMenuItemType)
 
 
+@provider(IMenuItemType)
 class IContentMenuItem(Interface):
     """Special menu item type for Plone's content menu."""
 
-directlyProvides(IContentMenuItem, IMenuItemType)
 
 # The sub-menus - because they require additional logic, each of these will be
 # implemented with a separate class. We provide markers here to distinguish
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index 6753071..c254bea 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -19,7 +19,8 @@
 from plone.portlets.interfaces import IPortletManager
 from plone.protect.utils import addTokenToUrl
 from plone.registry.interfaces import IRegistry
-from Products.CMFCore.utils import getToolByName, _checkPermission
+from Products.CMFCore.utils import _checkPermission
+from Products.CMFCore.utils import getToolByName
 from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault
 from Products.CMFPlone import utils
 from Products.CMFPlone.interfaces.constrains import IConstrainTypes
@@ -27,12 +28,15 @@
 from Products.CMFPlone.interfaces.structure import INonStructuralFolder
 from zope.browsermenu.menu import BrowserMenu
 from zope.browsermenu.menu import BrowserSubMenuItem
-from zope.component import getMultiAdapter, queryMultiAdapter
+from zope.component import getMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.component import getUtility
+from zope.component import queryMultiAdapter
 from zope.interface import implementer
+
 import pkg_resources
 
+
 try:
     pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
     from Products.CMFPlacefulWorkflow.permissions import ManageWorkflowPolicies
@@ -55,9 +59,11 @@ class ActionsSubMenuItem(BrowserSubMenuItem):
     }
 
     def __init__(self, context, request):
-        BrowserSubMenuItem.__init__(self, context, request)
-        self.context_state = getMultiAdapter((context, request),
-                                             name='plone_context_state')
+        super(ActionsSubMenuItem, self).__init__(context, request)
+        self.context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
 
     @property
     def action(self):
@@ -84,33 +90,36 @@ def getMenuItems(self, context, request):
         """Return menu item entries in a TAL-friendly form."""
         results = []
 
-        context_state = getMultiAdapter((context, request),
-                                        name='plone_context_state')
+        context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
         editActions = context_state.actions('object_buttons')
         if not editActions:
             return results
 
         for action in editActions:
-            if action['allowed']:
-                aid = action['id']
-                cssClass = 'actionicon-object_buttons-%s' % aid
-                icon = action.get('icon', None)
-                modal = action.get('modal', None)
-                if modal:
-                    cssClass += ' pat-plone-modal'
+            if not action['allowed']:
+                continue
+            aid = action['id']
+            cssClass = 'actionicon-object_buttons-%s' % aid
+            icon = action.get('icon', None)
+            modal = action.get('modal', None)
+            if modal:
+                cssClass += ' pat-plone-modal'
 
-                results.append({
-                    'title': action['title'],
-                    'description': '',
-                    'action': addTokenToUrl(action['url'], request),
-                    'selected': False,
-                    'icon': icon,
-                    'extra': {'id': 'plone-contentmenu-actions-' + aid,
-                              'separator': None,
-                              'class': cssClass,
-                              'modal': modal},
-                    'submenu': None,
-                })
+            results.append({
+                'title': action['title'],
+                'description': '',
+                'action': addTokenToUrl(action['url'], request),
+                'selected': False,
+                'icon': icon,
+                'extra': {'id': 'plone-contentmenu-actions-' + aid,
+                          'separator': None,
+                          'class': cssClass,
+                          'modal': modal},
+                'submenu': None,
+            })
         return results
 
 
@@ -123,9 +132,11 @@ class DisplaySubMenuItem(BrowserSubMenuItem):
     order = 40
 
     def __init__(self, context, request):
-        BrowserSubMenuItem.__init__(self, context, request)
-        self.context_state = getMultiAdapter((context, request),
-                                             name='plone_context_state')
+        super(DisplaySubMenuItem, self).__init__(context, request)
+        self.context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
 
     @property
     def extra(self):
@@ -166,24 +177,24 @@ def available(self):
         context = None
 
         folderLayouts = []
+        folderCanSetLayout = False
         contextLayouts = []
 
         # If this is a default page, also get menu items relative to the parent
         if isDefaultPage:
-            folder = ISelectableBrowserDefault(utils.parent(self.context),
-                                               None)
-
-        context = ISelectableBrowserDefault(self.context, None)
-
-        folderLayouts = []
-        folderCanSetLayout = False
-        folderCanSetDefaultPage = False
+            folder = ISelectableBrowserDefault(
+                utils.parent(self.context),
+                None
+            )
 
         if folder is not None:
+            if folder.canSetDefaultPage():
+                # Always Show the menu if we can set a default-page (short cut)
+                return True
             folderLayouts = folder.getAvailableLayouts()
             folderCanSetLayout = folder.canSetLayout()
-            folderCanSetDefaultPage = folder.canSetDefaultPage()
 
+        context = ISelectableBrowserDefault(self.context, None)
         contextLayouts = []
         contextCanSetLayout = False
         contextCanSetDefaultPage = False
@@ -193,15 +204,12 @@ def available(self):
             contextCanSetLayout = context.canSetLayout()
             contextCanSetDefaultPage = context.canSetDefaultPage()
 
-        # Show the menu if we either can set a default-page, or we have more
-        # than one layout to choose from.
-        if (folderCanSetDefaultPage) or \
-           (folderCanSetLayout and len(folderLayouts) > 1) or \
-           (folder is None and contextCanSetDefaultPage) or \
-           (contextCanSetLayout and len(contextLayouts) > 1):
-            return True
-        else:
-            return False
+        # we have more than one layout to choose from?
+        return (
+            (folderCanSetLayout and len(folderLayouts) > 1) or
+            (folder is None and contextCanSetDefaultPage) or
+            (contextCanSetLayout and len(contextLayouts) > 1)
+        )
 
     def selected(self):
         return False
@@ -322,7 +330,7 @@ def getMenuItems(self, obj, request):
                     'separator': 'actionSeparator',
                     'class': 'actionMenuSelected'},
                 'submenu': None,
-                })
+            })
             # Let the user change the selection
             if folderCanSetDefaultPage:
                 results.append({
@@ -367,11 +375,7 @@ def getMenuItems(self, obj, request):
             # If context is a default-page in a folder, that folder's views
             # will be shown. Only show context views if there are any to show.
 
-            showLayouts = False
-            if not isDefaultPage:
-                showLayouts = True
-            elif len(layouts) > 1:
-                showLayouts = True
+            showLayouts = not isDefaultPage or len(layouts) > 1
 
             if showLayouts and contextCanSetLayout:
                 for id, title in contextLayouts:
@@ -388,7 +392,7 @@ def getMenuItems(self, obj, request):
                             'id': 'plone-contentmenu-display-' + id,
                             'separator': None,
                             'class': is_selected and 'actionMenuSelected' or ''
-                            },
+                        },
                         'submenu': None,
                     })
 
@@ -415,7 +419,7 @@ def getMenuItems(self, obj, request):
                                 'separator': 'actionSeparator',
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
-                            })
+                        })
                 else:
                     defaultPageObj = getattr(obj, defaultPage, None)
                     defaultPageTitle = u""
@@ -458,7 +462,7 @@ def getMenuItems(self, obj, request):
                                 'separator': 'actionSeparator',
                                 'class': 'pat-plone-modal'},
                             'submenu': None,
-                            })
+                        })
 
         return results
 
@@ -473,9 +477,11 @@ class FactoriesSubMenuItem(BrowserSubMenuItem):
                     default=u'Add new items inside this item')
 
     def __init__(self, context, request):
-        BrowserSubMenuItem.__init__(self, context, request)
-        self.context_state = getMultiAdapter((context, request),
-                                             name='plone_context_state')
+        super(FactoriesSubMenuItem, self).__init__(context, request)
+        self.context_state = getMultiAdapter(
+            (context, request),
+            name='plone_context_state'
+        )
 
     @property
     def extra(self):
@@ -486,7 +492,8 @@ def extra(self):
     def action(self):
         return addTokenToUrl(
             '%s/folder_factories' % self._addContext().absolute_url(),
-            self.request)
+            self.request
+        )
 
     def available(self):
         itemsToAdd = self._itemsToAdd()
@@ -502,8 +509,7 @@ def selected(self):
     def _addContext(self):
         if self.context_state.is_structural_folder():
             return self.context
-        else:
-            return self.context_state.folder()
+        return self.context_state.folder()
 
     @memoize
     def _itemsToAdd(self):
@@ -515,10 +521,8 @@ def _addableTypesInContext(self, addContext):
         constrain = IConstrainTypes(addContext, None)
         if constrain is None:
             return allowed_types
-        else:
-            locallyAllowed = constrain.getLocallyAllowedTypes()
-            return [fti for fti in allowed_types
-                    if fti.getId() in locallyAllowed]
+        locallyAllowed = constrain.getLocallyAllowedTypes()
+        return [fti for fti in allowed_types if fti.getId() in locallyAllowed]
 
     @memoize
     def _addingToParent(self):
@@ -597,7 +601,7 @@ def getMenuItems(self, context, request):
                         'separator': None,
                         'class': ''},
                     'submenu': None,
-                    })
+                })
 
         # Also add a menu item to add items to the default page
         context_state = getMultiAdapter((context, request),
@@ -620,7 +624,7 @@ def getMenuItems(self, context, request):
                     'separator': None,
                     'class': 'pat-plone-modal'},
                 'submenu': None,
-                })
+            })
 
         return results
 
@@ -665,15 +669,13 @@ def description(self):
         if self._manageSettings() or len(self._transitions()) > 0:
             return _(u'title_change_state_of_item',
                      default=u'Change the state of this item')
-        else:
-            return u''
+        return u''
 
     @property
     def action(self):
         if self._manageSettings() or len(self._transitions()) > 0:
             return self.context.absolute_url() + '/content_status_history'
-        else:
-            return ''
+        return ''
 
     @memoize
     def available(self):
@@ -874,7 +876,9 @@ def getMenuItems(self, context, request):
         sm = getSecurityManager()
         # Bail out if the user can't manage portlets
         if not sm.checkPermission(
-                PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION, context):
+                PortletManagerSubMenuItem.MANAGE_SETTINGS_PERMISSION,
+                context
+        ):
             return items
         blacklist = getUtility(IRegistry).get(
             'plone.app.portlets.PortletManagerBlacklist', [])
diff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py
index 4d8cbdf..4677e1f 100644
--- a/plone/app/contentmenu/testing.py
+++ b/plone/app/contentmenu/testing.py
@@ -7,6 +7,7 @@
 from plone.app.testing import PloneSandboxLayer
 from plone.testing import z2
 from zope.configuration import xmlconfig
+
 import pkg_resources
 
 
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 18c96d9..f7fe5b8 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -21,6 +21,7 @@
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getUtility
 from zope.interface import directlyProvides
+
 import unittest
 
 
@@ -85,8 +86,7 @@ def testTemplatesIncluded(self):
         actions = self.menu.getMenuItems(self.folder, self.request)
         templates = [a['extra']['id'] for a in actions]
         self.failUnless(
-            'plone-contentmenu-display-folder_listing' in templates
-            or
+            'plone-contentmenu-display-folder_listing' in templates or
             'plone-contentmenu-display-listing_view' in templates
             # plone.app.contenttypes has unified views
         )
@@ -151,8 +151,7 @@ def testCurrentTemplateSelected(self):
         actions = self.menu.getMenuItems(self.folder, self.request)
         selected = [a['extra']['id'] for a in actions if a['selected']]
         self.assertTrue(
-            selected == ['plone-contentmenu-display-folder_listing']
-            or
+            selected == ['plone-contentmenu-display-folder_listing'] or
             selected == ['plone-contentmenu-display-listing_view']
             # plone.app.contenttypes has unified views
         )
@@ -650,8 +649,7 @@ def testAdvancedIncluded(self):
         url_plone5 = '%s/@@topbar-manage-portlets/plone.leftcolumn' % base_url
         url_plone4 = '%s/manage-portlets' % base_url
         self.assertTrue(
-            url_plone5 in [a['action'] for a in actions][1]
-            or
+            url_plone5 in [a['action'] for a in actions][1] or
             url_plone4 in [a['action'] for a in actions][1]
         )
 
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..f1aa06c
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,16 @@
+[check-manifest]
+ignore =
+    *.cfg
+    .coveragerc
+    .editorconfig
+    .gitattributes
+    bootstrap-buildout.py
+
+[isort]
+# for details see
+# http://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
diff --git a/setup.py b/setup.py
index 6626dee..c26bd5e 100644
--- a/setup.py
+++ b/setup.py
@@ -3,24 +3,25 @@
 from setuptools import setup
 
 version = '2.1.9.dev0'
-long_description = open("README.rst").read() + "\n"
-long_description += open("CHANGES.rst").read()
+long_description = open('README.rst').read() + '\n'
+long_description += open('CHANGES.rst').read()
+
 setup(
     name='plone.app.contentmenu',
     version=version,
-    description="Plone's content menu implementation",
+    description='Plone\'s content menu implementation',
     long_description=long_description,
     classifiers=[
-        "Environment :: Web Environment",
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Plone :: 5.1",
-        "Framework :: Zope2",
-        "License :: OSI Approved :: GNU General Public License (GPL)",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-      ],
+        'Environment :: Web Environment',
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Framework :: Zope2',
+        'License :: OSI Approved :: GNU General Public License (GPL)',
+        'Operating System :: OS Independent',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
+    ],
     keywords='plone contentmenu menu',
     author='Plone Foundation',
     author_email='plone-developers@lists.sourceforge.net',


