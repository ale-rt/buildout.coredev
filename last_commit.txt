Repository: plone.app.content


Branch: refs/heads/master
Date: 2017-04-13T17:40:18+02:00
Author: Franz Gerhard Reinisch (fgrcon) <franz@fgrcon.net>
Commit: https://github.com/plone/plone.app.content/commit/7eadd9de8f50d140898aa4cf0b072809c802f2f1

make thumb size in folder contents listing adjustable/supressable
  (uses site control panel settings: thumb_size_tables ...)
  clean up deprecated icon related code
  replace paperclip icon with mime type icons
  https://github.com/plone/Products.CMFPlone/issues/1734

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py
M plone/app/content/browser/templates/select_default_page.pt
M plone/app/content/browser/vocabulary.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5102c90..cd73516 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,12 @@ Breaking changes:
 - *add item here*
 
 New features:
+- make thumbsize in folder contents listing adjustable/supressable 
+  (uses site control panel settings: thumb_size_tables ...)
+  clean up deprecated icon related code
+  replace paperclip icon with mime type icons
+  https://github.com/plone/Products.CMFPlone/issues/1734
+  [fgrcon]
 
 - Folder Contents: Construct the list of sortable indexes from the available catalog indexes, using a blacklist and a default set - likewise as it's done with metadata columns.
   [thet]
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index 4a038d5..a2612c9 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -7,8 +7,10 @@
 from plone.app.content.utils import json_dumps
 from plone.app.content.utils import json_loads
 from plone.protect.postonly import check as checkpost
+from plone.registry.interfaces import IRegistry
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.controlpanel import ISiteSchema
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone import utils
 from Products.CMFPlone.utils import get_top_site_from_url
@@ -170,6 +172,7 @@ def ignored_columns(self):
             'effective',
             'expires',
             'getIcon',
+			'getMimeIcon',
             'getId',
             'getRemoteUrl',
             'in_response_to',
@@ -216,6 +219,16 @@ def get_columns(self):
                 columns[column] = translate(_(column), context=self.request)
         return columns
 
+    def get_thumbSize(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ISiteSchema, prefix="plone", check=False)
+        if settings.no_thumbs_tables:
+            # thumbs to be supressed
+            return 'none'
+        thumb_size_table = settings.thumb_size_table
+        return thumb_size_table
+
     @property
     def ignored_indexes(self):
         ignored = [
@@ -290,7 +303,7 @@ def get_options(self):
             'contextInfoUrl': '%s{path}/@@fc-contextInfo' % base_url,
             'setDefaultPageUrl': '%s{path}/@@fc-setDefaultPage' % base_url,
             'availableColumns': columns,
-            'attributes': ['Title', 'path', 'getURL', 'getIcon', 'portal_type'] + columns.keys(),  # noqa
+            'attributes': ['Title', 'path', 'getURL', 'getIcon', 'getMimeIcon', 'portal_type'] + columns.keys(),  # noqa
             'buttons': self.get_actions(),
             'rearrange': {
                 'properties': self.get_indexes(),
@@ -303,6 +316,7 @@ def get_options(self):
                 'initialFolder': IUUID(self.context, None),
                 'useTus': TUS_ENABLED
             },
+            'thumbSize' : self.get_thumbSize(),
         }
         return options
 
diff --git a/plone/app/content/browser/templates/select_default_page.pt b/plone/app/content/browser/templates/select_default_page.pt
index 7eb1646..3799454 100644
--- a/plone/app/content/browser/templates/select_default_page.pt
+++ b/plone/app/content/browser/templates/select_default_page.pt
@@ -11,7 +11,6 @@
   <body>
 
     <metal:main fill-slot="main">
-
       <h1 class="documentFirstHeading"
           i18n:translate="heading_select_default_page">Select default page</h1>
 
@@ -36,14 +35,11 @@
                 <dl>
                     <tal:item repeat="item items">
                         <dt tal:define="normalized_type python:plone_view.normalizeString(item.portal_type);
-                                        item_icon python:plone_layout.getIcon(item);
                                         item_id python:'(%s)' % item.getId if (portal_visible_ids and member_visible_ids) else ''">
                             <input type="radio" name="objectId" value=""
                                 tal:attributes="value item/getId;
                                                 id item/getId;
                                                 checked python: (n_items==1 or item.getId==cur_page) and 'checked' or None;"/>
-                            <img tal:condition="nocall:item_icon"
-                                 tal:replace="structure item_icon/html_tag" />
                             <label tal:attributes="for item/getId;
                                                    class string:contenttype-${normalized_type}"
                                    tal:content="string:${item/pretty_title_or_id} $item_id">
diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py
index 88851ca..b59c3be 100644
--- a/plone/app/content/browser/vocabulary.py
+++ b/plone/app/content/browser/vocabulary.py
@@ -1,6 +1,8 @@
 # -*- coding: utf-8 -*-
+import os
 from AccessControl import getSecurityManager
 from logging import getLogger
+from plone import api
 from plone.app.content.utils import json_dumps
 from plone.app.content.utils import json_loads
 from plone.app.layout.navigation.interfaces import INavigationRoot
@@ -12,6 +14,7 @@
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five import BrowserView
+from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path
 from types import FunctionType
 from zope.component import getUtility
 from zope.component import queryAdapter
@@ -54,6 +57,7 @@
     'ExpirationDate',
     'expires',
     'getIcon',
+    'getMimeIcon',
     'getId',
     'getObjSize',
     'getRemoteUrl',
@@ -233,8 +237,22 @@ def __call__(self):
                             _(safe_unicode(val)),
                             context=self.request
                         )
+
                     else:
                         item[key] = val
+                    if key == 'getMimeIcon':
+                        item[key] = None
+                        if  vocab_item.portal_type =='File':
+                            #get mime type icon url from mimetype registry'
+                            portal_url = api.portal.get().absolute_url()
+                            mtt = api.portal.get_tool(
+                                        name='mimetypes_registry')
+                            if vocab_item.getObject().file.contentType:
+                                ctype = mtt.lookup(
+                                    vocab_item.getObject().file.contentType)
+                                item[key] = os.path.join(
+                                    portal_url,
+                                    guess_icon_path(ctype[0]))
                 items.append(item)
         else:
             for item in results:


Repository: plone.app.content


Branch: refs/heads/master
Date: 2017-04-13T17:40:23+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/da1748fe6648a29e1b3a671ff2184fa9786fa13e

fix ReST

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index cd73516..92086c1 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,7 @@ Breaking changes:
 - *add item here*
 
 New features:
+
 - make thumbsize in folder contents listing adjustable/supressable 
   (uses site control panel settings: thumb_size_tables ...)
   clean up deprecated icon related code


Repository: plone.app.content


Branch: refs/heads/master
Date: 2017-04-14T12:51:42+02:00
Author: root (fgrcon) <franz@fgrcon.net>
Commit: https://github.com/plone/plone.app.content/commit/a9f158c5671b95ca2ad67ee9005681783fb7f383

 review fixes, pep8

Files changed:
M plone/app/content/browser/contents/__init__.py
M plone/app/content/browser/vocabulary.py

diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index a2612c9..55cb807 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -172,7 +172,7 @@ def ignored_columns(self):
             'effective',
             'expires',
             'getIcon',
-			'getMimeIcon',
+            'getMimeIcon',
             'getId',
             'getRemoteUrl',
             'in_response_to',
diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py
index b59c3be..ff2054c 100644
--- a/plone/app/content/browser/vocabulary.py
+++ b/plone/app/content/browser/vocabulary.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
 import os
 from AccessControl import getSecurityManager
+from Acquisition import aq_base
 from logging import getLogger
-from plone import api
 from plone.app.content.utils import json_dumps
 from plone.app.content.utils import json_loads
 from plone.app.layout.navigation.interfaces import INavigationRoot
@@ -11,6 +11,7 @@
 from plone.app.widgets.interfaces import IFieldPermissionChecker
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
 from plone.supermodel.utils import mergedTaggedValueDict
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five import BrowserView
@@ -148,7 +149,7 @@ def __call__(self):
 
         try:
             vocabulary = self.get_vocabulary()
-        except VocabLookupException, e:
+        except VocabLookupException as e:
             return json_dumps({'error': e.message})
 
         results_are_brains = False
@@ -237,22 +238,21 @@ def __call__(self):
                             _(safe_unicode(val)),
                             context=self.request
                         )
-
                     else:
                         item[key] = val
                     if key == 'getMimeIcon':
                         item[key] = None
-                        if  vocab_item.portal_type =='File':
-                            #get mime type icon url from mimetype registry'
-                            portal_url = api.portal.get().absolute_url()
-                            mtt = api.portal.get_tool(
-                                        name='mimetypes_registry')
-                            if vocab_item.getObject().file.contentType:
-                                ctype = mtt.lookup(
-                                    vocab_item.getObject().file.contentType)
-                                item[key] = os.path.join(
-                                    portal_url,
-                                    guess_icon_path(ctype[0]))
+                        # get mime type icon url from mimetype registry'
+                        navroot = self.get_base_path(vocab_item)
+                        contenttype = aq_base(
+                            getattr(vocab_item, 'mime_type', None))
+                        if contenttype:
+                            mtt = getToolByName(
+                                self.context, 'mimetypes_registry')
+                            ctype = mtt.lookup(contenttype)
+                            item[key] = os.path.join(
+                                navroot,
+                                guess_icon_path(ctype[0]))
                 items.append(item)
         else:
             for item in results:
@@ -339,7 +339,7 @@ def get_vocabulary(self):
         # generation of vocabularies created for plone.app.widgets,
         # which take the (unparsed) query as a parameter of the vocab
         # factory rather than as a separate search method.
-        if type(factory) is FunctionType:
+        if isinstance(factory, FunctionType):
             factory_spec = inspect.getargspec(factory)
         else:
             factory_spec = inspect.getargspec(factory.__call__)


Repository: plone.app.content


Branch: refs/heads/master
Date: 2017-06-01T14:19:10+02:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/da0559863c8f77f2f22683b4b7ce30a108f8144d

Merge branch 'master' into plip1734thumbs

Files changed:
M CHANGES.rst
M MANIFEST.in
M plone/app/content/tests/test_namechooser_unit.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 92086c1..4062906 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -2,7 +2,7 @@ Changelog
 =========
 
 
-3.4.1 (unreleased)
+3.4.2 (unreleased)
 ------------------
 
 Breaking changes:
@@ -18,6 +18,16 @@ New features:
   https://github.com/plone/Products.CMFPlone/issues/1734
   [fgrcon]
 
+Bug fixes:
+
+- *add item here*
+
+
+3.4.1 (2017-05-16)
+------------------
+
+New features:
+
 - Folder Contents: Construct the list of sortable indexes from the available catalog indexes, using a blacklist and a default set - likewise as it's done with metadata columns.
   [thet]
 
@@ -32,7 +42,9 @@ Bug fixes:
   current path
   [datakurre]
 
-
+- removed unittest2 dependency.
+  [kakshay21]
+  
 3.4 (2017-04-01)
 ----------------
 
diff --git a/MANIFEST.in b/MANIFEST.in
index 233d37d..6acb23e 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,4 +1,3 @@
-include *.txt
 include *.rst
 
 recursive-include docs *
diff --git a/plone/app/content/tests/test_namechooser_unit.py b/plone/app/content/tests/test_namechooser_unit.py
index b65a256..6374a97 100644
--- a/plone/app/content/tests/test_namechooser_unit.py
+++ b/plone/app/content/tests/test_namechooser_unit.py
@@ -8,7 +8,7 @@
 from plone.dexterity.fti import DexterityFTI
 from zope.container.interfaces import INameChooser
 import transaction
-import unittest2 as unittest
+import unittest
 
 
 class NameChooserTest(unittest.TestCase):
diff --git a/setup.py b/setup.py
index 855ed8d..349986b 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '3.4.1.dev0'
+version = '3.4.2.dev0'
 
 setup(
     name='plone.app.content',


Repository: plone.app.content


Branch: refs/heads/master
Date: 2017-06-01T14:19:20+02:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/d39ccd31b2203e81c22897ef1158563d98edb709

Merge pull request #106 from plone/plip1734thumbs

make thumb size in folder contents listing adjustable/supressable

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py
M plone/app/content/browser/templates/select_default_page.pt
M plone/app/content/browser/vocabulary.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b9e21e9..4062906 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,12 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- make thumbsize in folder contents listing adjustable/supressable 
+  (uses site control panel settings: thumb_size_tables ...)
+  clean up deprecated icon related code
+  replace paperclip icon with mime type icons
+  https://github.com/plone/Products.CMFPlone/issues/1734
+  [fgrcon]
 
 Bug fixes:
 
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index 4a038d5..55cb807 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -7,8 +7,10 @@
 from plone.app.content.utils import json_dumps
 from plone.app.content.utils import json_loads
 from plone.protect.postonly import check as checkpost
+from plone.registry.interfaces import IRegistry
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.controlpanel import ISiteSchema
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone import utils
 from Products.CMFPlone.utils import get_top_site_from_url
@@ -170,6 +172,7 @@ def ignored_columns(self):
             'effective',
             'expires',
             'getIcon',
+            'getMimeIcon',
             'getId',
             'getRemoteUrl',
             'in_response_to',
@@ -216,6 +219,16 @@ def get_columns(self):
                 columns[column] = translate(_(column), context=self.request)
         return columns
 
+    def get_thumbSize(self):
+        registry = getUtility(IRegistry)
+        settings = registry.forInterface(
+            ISiteSchema, prefix="plone", check=False)
+        if settings.no_thumbs_tables:
+            # thumbs to be supressed
+            return 'none'
+        thumb_size_table = settings.thumb_size_table
+        return thumb_size_table
+
     @property
     def ignored_indexes(self):
         ignored = [
@@ -290,7 +303,7 @@ def get_options(self):
             'contextInfoUrl': '%s{path}/@@fc-contextInfo' % base_url,
             'setDefaultPageUrl': '%s{path}/@@fc-setDefaultPage' % base_url,
             'availableColumns': columns,
-            'attributes': ['Title', 'path', 'getURL', 'getIcon', 'portal_type'] + columns.keys(),  # noqa
+            'attributes': ['Title', 'path', 'getURL', 'getIcon', 'getMimeIcon', 'portal_type'] + columns.keys(),  # noqa
             'buttons': self.get_actions(),
             'rearrange': {
                 'properties': self.get_indexes(),
@@ -303,6 +316,7 @@ def get_options(self):
                 'initialFolder': IUUID(self.context, None),
                 'useTus': TUS_ENABLED
             },
+            'thumbSize' : self.get_thumbSize(),
         }
         return options
 
diff --git a/plone/app/content/browser/templates/select_default_page.pt b/plone/app/content/browser/templates/select_default_page.pt
index 7eb1646..3799454 100644
--- a/plone/app/content/browser/templates/select_default_page.pt
+++ b/plone/app/content/browser/templates/select_default_page.pt
@@ -11,7 +11,6 @@
   <body>
 
     <metal:main fill-slot="main">
-
       <h1 class="documentFirstHeading"
           i18n:translate="heading_select_default_page">Select default page</h1>
 
@@ -36,14 +35,11 @@
                 <dl>
                     <tal:item repeat="item items">
                         <dt tal:define="normalized_type python:plone_view.normalizeString(item.portal_type);
-                                        item_icon python:plone_layout.getIcon(item);
                                         item_id python:'(%s)' % item.getId if (portal_visible_ids and member_visible_ids) else ''">
                             <input type="radio" name="objectId" value=""
                                 tal:attributes="value item/getId;
                                                 id item/getId;
                                                 checked python: (n_items==1 or item.getId==cur_page) and 'checked' or None;"/>
-                            <img tal:condition="nocall:item_icon"
-                                 tal:replace="structure item_icon/html_tag" />
                             <label tal:attributes="for item/getId;
                                                    class string:contenttype-${normalized_type}"
                                    tal:content="string:${item/pretty_title_or_id} $item_id">
diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py
index 88851ca..ff2054c 100644
--- a/plone/app/content/browser/vocabulary.py
+++ b/plone/app/content/browser/vocabulary.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
+import os
 from AccessControl import getSecurityManager
+from Acquisition import aq_base
 from logging import getLogger
 from plone.app.content.utils import json_dumps
 from plone.app.content.utils import json_loads
@@ -9,9 +11,11 @@
 from plone.app.widgets.interfaces import IFieldPermissionChecker
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
 from plone.supermodel.utils import mergedTaggedValueDict
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.utils import safe_unicode
 from Products.Five import BrowserView
+from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path
 from types import FunctionType
 from zope.component import getUtility
 from zope.component import queryAdapter
@@ -54,6 +58,7 @@
     'ExpirationDate',
     'expires',
     'getIcon',
+    'getMimeIcon',
     'getId',
     'getObjSize',
     'getRemoteUrl',
@@ -144,7 +149,7 @@ def __call__(self):
 
         try:
             vocabulary = self.get_vocabulary()
-        except VocabLookupException, e:
+        except VocabLookupException as e:
             return json_dumps({'error': e.message})
 
         results_are_brains = False
@@ -235,6 +240,19 @@ def __call__(self):
                         )
                     else:
                         item[key] = val
+                    if key == 'getMimeIcon':
+                        item[key] = None
+                        # get mime type icon url from mimetype registry'
+                        navroot = self.get_base_path(vocab_item)
+                        contenttype = aq_base(
+                            getattr(vocab_item, 'mime_type', None))
+                        if contenttype:
+                            mtt = getToolByName(
+                                self.context, 'mimetypes_registry')
+                            ctype = mtt.lookup(contenttype)
+                            item[key] = os.path.join(
+                                navroot,
+                                guess_icon_path(ctype[0]))
                 items.append(item)
         else:
             for item in results:
@@ -321,7 +339,7 @@ def get_vocabulary(self):
         # generation of vocabularies created for plone.app.widgets,
         # which take the (unparsed) query as a parameter of the vocab
         # factory rather than as a separate search method.
-        if type(factory) is FunctionType:
+        if isinstance(factory, FunctionType):
             factory_spec = inspect.getargspec(factory)
         else:
             factory_spec = inspect.getargspec(factory.__call__)


