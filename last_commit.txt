Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-08-01T22:57:15+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/f21cf25244515db729a3c8ce452655e7b83bd7e0

Explicitly set application/json content type for JSON responses and declare an utf-8 charset.

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py
M plone/app/content/browser/contents/delete.py
M plone/app/content/browser/file.py
M plone/app/content/browser/i18n.py
M plone/app/content/browser/query.py
M plone/app/content/browser/vocabulary.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fc9e943..9a53468 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,6 +15,9 @@ New features:
 
 Bug fixes:
 
+- Explicitly set ``application/json`` content type for JSON responses and declare an ``utf-8`` charset.
+  [thet]
+
 - Properly deprecated ``_permissions`` in favor of ``PERMISSIONS``.
   Since 3.1, the ``_permissions`` variable was ``None`` instead of a
   backwards compatibility alias for ``PERMISSIONS`` due to a wrong
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index ffa0f55..e4ce584 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -92,7 +92,9 @@ def protect(self):
         checkpost(self.request)
 
     def json(self, data):
-        self.request.response.setHeader("Content-Type", "application/json")
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json_dumps(data)
 
     def get_selection(self):
@@ -283,6 +285,9 @@ def get_options(self):
         return options
 
     def __call__(self):
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         self.options = json_dumps(self.get_options())
         return super(FolderContentsView, self).__call__()
 
@@ -360,6 +365,10 @@ def __call__(self):
                 if key == 'path':
                     val = val[len(base_path):]
                 item[key] = val
+
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json_dumps({
             'addButtons': factories,
             'defaultPage': self.context.getDefaultPage(),
diff --git a/plone/app/content/browser/contents/delete.py b/plone/app/content/browser/contents/delete.py
index c8895e9..b250431 100644
--- a/plone/app/content/browser/contents/delete.py
+++ b/plone/app/content/browser/contents/delete.py
@@ -54,7 +54,9 @@ def __call__(self):
             catalog = getToolByName(self.context, 'portal_catalog')
             brains = catalog(UID=selection)
             items = [i.getObject() for i in brains]
-            self.request.response.setHeader('Content-Type', 'application/json')
+            self.request.response.setHeader(
+                'Content-Type', 'application/json; charset=utf-8'
+            )
             return json.dumps({
                 'html': confirm_view(items)
             })
diff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py
index 5564ecf..90d69fa 100644
--- a/plone/app/content/browser/file.py
+++ b/plone/app/content/browser/file.py
@@ -187,4 +187,8 @@ def __call__(self):
             'UID': IUUID(obj),
             'filename': filename
         })
+
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json.dumps(result)
diff --git a/plone/app/content/browser/i18n.py b/plone/app/content/browser/i18n.py
index 9ce7c8b..c8ce9f5 100644
--- a/plone/app/content/browser/i18n.py
+++ b/plone/app/content/browser/i18n.py
@@ -38,6 +38,6 @@ def __call__(self, domain, language=None):
 
         catalog = self._gettext_catalog(domain, language)
         response = self.request.response
-        response.setHeader('content-type', 'application/json')
+        response.setHeader('Content-Type', 'application/json; charset=utf-8')
         response.setBody(json.dumps(catalog))
         return response
diff --git a/plone/app/content/browser/query.py b/plone/app/content/browser/query.py
index 9834029..803a1a1 100644
--- a/plone/app/content/browser/query.py
+++ b/plone/app/content/browser/query.py
@@ -11,5 +11,7 @@ class QueryStringIndexOptions(BrowserView):
     def __call__(self):
         registry = getUtility(IRegistry)
         config = IQuerystringRegistryReader(registry)()
-        self.request.response.setHeader("Content-Type", "application/json")
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json.dumps(config)
diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py
index 5b5e840..98a0354 100644
--- a/plone/app/content/browser/vocabulary.py
+++ b/plone/app/content/browser/vocabulary.py
@@ -93,7 +93,9 @@ def __call__(self):
         }
         """
         context = self.get_context()
-        self.request.response.setHeader("Content-type", "application/json")
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
 
         try:
             vocabulary = self.get_vocabulary()


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-08-01T23:46:02+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/100df2768266cd5bf5255d970c7c31b919287970

sort imports. left over of prev attempt

Files changed:
M plone/app/content/browser/constraintypes.py
M plone/app/content/browser/file.py

diff --git a/plone/app/content/browser/constraintypes.py b/plone/app/content/browser/constraintypes.py
index 65e6d98..fec1380 100644
--- a/plone/app/content/browser/constraintypes.py
+++ b/plone/app/content/browser/constraintypes.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
+from plone.autoform.form import AutoExtensibleForm
 from Products.CMFPlone import PloneMessageFactory as PC_
 from Products.CMFPlone.interfaces import ISelectableConstrainTypes
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.autoform.form import AutoExtensibleForm
 from z3c.form import button
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 from zope.interface import invariant
 from zope.interface.exceptions import Invalid
 from zope.schema import Choice
@@ -16,6 +16,7 @@
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
+
 # XXX
 # acquire locallyAllowedTypes from parent (default)
 ACQUIRE = -1
diff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py
index 90d69fa..e6491fe 100644
--- a/plone/app/content/browser/file.py
+++ b/plone/app/content/browser/file.py
@@ -1,16 +1,18 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.permissions import AddPortalContent
-from Products.Five.browser import BrowserView
 from plone.app.dexterity.interfaces import IDXFileFactory
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.uuid.interfaces import IUUID
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.permissions import AddPortalContent
+from Products.Five.browser import BrowserView
+
 import json
 import logging
 import mimetypes
 import os
 
+
 logger = logging.getLogger('plone')
 
 


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-08-01T23:47:10+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/8f398f9e70029fb75ac194b44189fb54368caf3a

Add @@allowed_types_in_context JSON view in plone.app.content.browser.allowed_types_in_context, which returns a list of all FTI ids, which can be added in the current container.

Files changed:
M CHANGES.rst
M plone/app/content/browser/__init__.py
M plone/app/content/browser/configure.zcml
M plone/app/content/tests/test_contents.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9a53468..5b2068c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,9 @@ Breaking changes:
 
 New features:
 
+- Add ``@@allowed_types_in_context`` JSON view in ``plone.app.content.browser.allowed_types_in_context``, which returns a list of all FTI ids, which can be added in the current container.
+  [thet]
+
 - Factor out the available columns ignored list which can be used to narrow down the available columns list to a user friendly set.
   [thet]
 
diff --git a/plone/app/content/browser/__init__.py b/plone/app/content/browser/__init__.py
index 40a96af..1d4d0ad 100644
--- a/plone/app/content/browser/__init__.py
+++ b/plone/app/content/browser/__init__.py
@@ -1 +1,17 @@
 # -*- coding: utf-8 -*-
+from Products.Five.browser import BrowserView
+import json
+
+
+class AllowedTypesInContext(BrowserView):
+
+    def __call__(self):
+        """Return JSON structure with all allowed content type ids from the
+        current container.
+        """
+
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
+        allowed_types = [t.getId() for t in self.context.allowedContentTypes()]
+        return json.dumps({'allowed_types': allowed_types})
diff --git a/plone/app/content/browser/configure.zcml b/plone/app/content/browser/configure.zcml
index 3b62060..2f251b3 100644
--- a/plone/app/content/browser/configure.zcml
+++ b/plone/app/content/browser/configure.zcml
@@ -180,4 +180,12 @@
         permission="zope2.View"
         />
 
+    <!-- ajax views -->
+    <browser:page
+        for="*"
+        name="allowed_types_in_context"
+        class=".AllowedTypesInContext"
+        permission="cmf.AddPortalContent"
+        />
+
 </configure>
diff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py
index 97dac7c..4e40508 100644
--- a/plone/app/content/tests/test_contents.py
+++ b/plone/app/content/tests/test_contents.py
@@ -153,3 +153,48 @@ def test_paste_fail_constraint(self):
         res = json.loads(res)
         self.assertEqual(res['status'], 'warning')
         self.assertEqual(len(self.portal.it1.contentIds()), 0)
+
+
+class AllowedTypesInContextTests(unittest.TestCase):
+    layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+
+        # TYPE 1
+        type1_fti = DexterityFTI('type1')
+        type1_fti.klass = 'plone.dexterity.content.Container'
+        type1_fti.filter_content_types = True
+        type1_fti.allowed_content_types = ['type1']
+        type1_fti.behaviors = (
+            'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes',  # noqa
+            'plone.app.dexterity.behaviors.metadata.IBasic'
+        )
+        self.portal.portal_types._setObject('type1', type1_fti)
+        self.type1_fti = type1_fti
+
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+        self.portal.invokeFactory('type1', id='it1', title='Item 1')
+
+    def test_allowed_types_in_context_view(self):
+
+        # Test root object
+        allowed_types = self.portal.restrictedTraverse('@@allowed_types_in_context')  # noqa
+        allowed_types = json.loads(allowed_types())
+
+        self.assertEqual(
+            sorted(allowed_types['allowed_types']),
+            [u'Collection', u'Document', u'Event', u'File', u'Folder', u'Image', u'Link', u'News Item', u'type1']  # noqa
+        )
+
+        # Test subfolder
+        allowed_types = self.portal.it1.restrictedTraverse('@@allowed_types_in_context')  # noqa
+        allowed_types = json.loads(allowed_types())
+
+        self.assertEqual(
+            sorted(allowed_types['allowed_types']),
+            [u'type1']
+        )


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-08-02T05:05:41+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/cc68354d15b613f93c461538bf383c01ab2a3baf

Add @@allow_upload view, which returns a JSON string to indicate if File or Image uploads are allowed in the current container.

Files changed:
M CHANGES.rst
M plone/app/content/browser/__init__.py
M plone/app/content/browser/configure.zcml
M plone/app/content/browser/file.py
M plone/app/content/tests/test_contents.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5b2068c..03a3b57 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- Add ``@@allowed_types_in_context`` JSON view in ``plone.app.content.browser.allowed_types_in_context``, which returns a list of all FTI ids, which can be added in the current container.
+- Add ``@@allow_upload`` view, which returns a JSON string to indicate if File or Image uploads are allowed in the current container.
   [thet]
 
 - Factor out the available columns ignored list which can be used to narrow down the available columns list to a user friendly set.
diff --git a/plone/app/content/browser/__init__.py b/plone/app/content/browser/__init__.py
index 1d4d0ad..40a96af 100644
--- a/plone/app/content/browser/__init__.py
+++ b/plone/app/content/browser/__init__.py
@@ -1,17 +1 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser import BrowserView
-import json
-
-
-class AllowedTypesInContext(BrowserView):
-
-    def __call__(self):
-        """Return JSON structure with all allowed content type ids from the
-        current container.
-        """
-
-        self.request.response.setHeader(
-            'Content-Type', 'application/json; charset=utf-8'
-        )
-        allowed_types = [t.getId() for t in self.context.allowedContentTypes()]
-        return json.dumps({'allowed_types': allowed_types})
diff --git a/plone/app/content/browser/configure.zcml b/plone/app/content/browser/configure.zcml
index 2f251b3..9a9faf2 100644
--- a/plone/app/content/browser/configure.zcml
+++ b/plone/app/content/browser/configure.zcml
@@ -180,11 +180,10 @@
         permission="zope2.View"
         />
 
-    <!-- ajax views -->
     <browser:page
         for="*"
-        name="allowed_types_in_context"
-        class=".AllowedTypesInContext"
+        name="allow_upload"
+        class=".file.AllowUploadView"
         permission="cmf.AddPortalContent"
         />
 
diff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py
index e6491fe..d79f4e1 100644
--- a/plone/app/content/browser/file.py
+++ b/plone/app/content/browser/file.py
@@ -194,3 +194,22 @@ def __call__(self):
             'Content-Type', 'application/json; charset=utf-8'
         )
         return json.dumps(result)
+
+
+class AllowUploadView(BrowserView):
+
+    def __call__(self):
+        """Return JSON structure to indicate if File or Image uploads are
+        allowed in the current container.
+        """
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
+        allowed_types = [t.getId() for t in self.context.allowedContentTypes()]
+        allow_images = u'Image' in allowed_types
+        allow_files = u'File' in allowed_types
+        return json.dumps({
+            'allowUpload': allow_images or allow_files,
+            'allowImages': allow_images,
+            'allowFiles': allow_files
+        })
diff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py
index 4e40508..3a90c49 100644
--- a/plone/app/content/tests/test_contents.py
+++ b/plone/app/content/tests/test_contents.py
@@ -155,7 +155,7 @@ def test_paste_fail_constraint(self):
         self.assertEqual(len(self.portal.it1.contentIds()), 0)
 
 
-class AllowedTypesInContextTests(unittest.TestCase):
+class AllowUploadViewTests(unittest.TestCase):
     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
 
     def setUp(self):
@@ -166,9 +166,8 @@ def setUp(self):
         type1_fti = DexterityFTI('type1')
         type1_fti.klass = 'plone.dexterity.content.Container'
         type1_fti.filter_content_types = True
-        type1_fti.allowed_content_types = ['type1']
+        type1_fti.allowed_content_types = []
         type1_fti.behaviors = (
-            'Products.CMFPlone.interfaces.constrains.ISelectableConstrainTypes',  # noqa
             'plone.app.dexterity.behaviors.metadata.IBasic'
         )
         self.portal.portal_types._setObject('type1', type1_fti)
@@ -179,22 +178,43 @@ def setUp(self):
 
         self.portal.invokeFactory('type1', id='it1', title='Item 1')
 
-    def test_allowed_types_in_context_view(self):
-
-        # Test root object
-        allowed_types = self.portal.restrictedTraverse('@@allowed_types_in_context')  # noqa
-        allowed_types = json.loads(allowed_types())
-
-        self.assertEqual(
-            sorted(allowed_types['allowed_types']),
-            [u'Collection', u'Document', u'Event', u'File', u'Folder', u'Image', u'Link', u'News Item', u'type1']  # noqa
-        )
-
-        # Test subfolder
-        allowed_types = self.portal.it1.restrictedTraverse('@@allowed_types_in_context')  # noqa
-        allowed_types = json.loads(allowed_types())
+    def test_allow_upload(self):
+        """Test, if file or images are allowed in a container in different FTI
+        configurations.
+        """
 
-        self.assertEqual(
-            sorted(allowed_types['allowed_types']),
-            [u'type1']
-        )
+        # Test none allowed
+        self.type1_fti.allowed_content_types = []
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], False)
+        self.assertEqual(allow_upload['allowImages'], False)
+        self.assertEqual(allow_upload['allowFiles'], False)
+
+        # Test images allowed
+        self.type1_fti.allowed_content_types = ['Image']
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], True)
+        self.assertEqual(allow_upload['allowImages'], True)
+        self.assertEqual(allow_upload['allowFiles'], False)
+
+        # Test files allowed
+        self.type1_fti.allowed_content_types = ['File']
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], True)
+        self.assertEqual(allow_upload['allowImages'], False)
+        self.assertEqual(allow_upload['allowFiles'], True)
+
+        # Test images and files allowed
+        self.type1_fti.allowed_content_types = ['Image', 'File']
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], True)
+        self.assertEqual(allow_upload['allowImages'], True)
+        self.assertEqual(allow_upload['allowFiles'], True)


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-08-02T17:13:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/02be455bbb0ddfcac4d3dd3a74e998d8735791ec

Merge pull request #101 from plone/thet-allowedtypesjson

allowUpload JSON view, content-type json for all

Files changed:
M CHANGES.rst
M plone/app/content/browser/configure.zcml
M plone/app/content/browser/constraintypes.py
M plone/app/content/browser/contents/__init__.py
M plone/app/content/browser/contents/delete.py
M plone/app/content/browser/file.py
M plone/app/content/browser/i18n.py
M plone/app/content/browser/query.py
M plone/app/content/browser/vocabulary.py
M plone/app/content/tests/test_contents.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fc9e943..03a3b57 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,11 +10,17 @@ Breaking changes:
 
 New features:
 
+- Add ``@@allow_upload`` view, which returns a JSON string to indicate if File or Image uploads are allowed in the current container.
+  [thet]
+
 - Factor out the available columns ignored list which can be used to narrow down the available columns list to a user friendly set.
   [thet]
 
 Bug fixes:
 
+- Explicitly set ``application/json`` content type for JSON responses and declare an ``utf-8`` charset.
+  [thet]
+
 - Properly deprecated ``_permissions`` in favor of ``PERMISSIONS``.
   Since 3.1, the ``_permissions`` variable was ``None`` instead of a
   backwards compatibility alias for ``PERMISSIONS`` due to a wrong
diff --git a/plone/app/content/browser/configure.zcml b/plone/app/content/browser/configure.zcml
index 3b62060..9a9faf2 100644
--- a/plone/app/content/browser/configure.zcml
+++ b/plone/app/content/browser/configure.zcml
@@ -180,4 +180,11 @@
         permission="zope2.View"
         />
 
+    <browser:page
+        for="*"
+        name="allow_upload"
+        class=".file.AllowUploadView"
+        permission="cmf.AddPortalContent"
+        />
+
 </configure>
diff --git a/plone/app/content/browser/constraintypes.py b/plone/app/content/browser/constraintypes.py
index 65e6d98..fec1380 100644
--- a/plone/app/content/browser/constraintypes.py
+++ b/plone/app/content/browser/constraintypes.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
+from plone.autoform.form import AutoExtensibleForm
 from Products.CMFPlone import PloneMessageFactory as PC_
 from Products.CMFPlone.interfaces import ISelectableConstrainTypes
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.autoform.form import AutoExtensibleForm
 from z3c.form import button
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 from zope.interface import invariant
 from zope.interface.exceptions import Invalid
 from zope.schema import Choice
@@ -16,6 +16,7 @@
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
 
+
 # XXX
 # acquire locallyAllowedTypes from parent (default)
 ACQUIRE = -1
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index ffa0f55..e4ce584 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -92,7 +92,9 @@ def protect(self):
         checkpost(self.request)
 
     def json(self, data):
-        self.request.response.setHeader("Content-Type", "application/json")
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json_dumps(data)
 
     def get_selection(self):
@@ -283,6 +285,9 @@ def get_options(self):
         return options
 
     def __call__(self):
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         self.options = json_dumps(self.get_options())
         return super(FolderContentsView, self).__call__()
 
@@ -360,6 +365,10 @@ def __call__(self):
                 if key == 'path':
                     val = val[len(base_path):]
                 item[key] = val
+
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json_dumps({
             'addButtons': factories,
             'defaultPage': self.context.getDefaultPage(),
diff --git a/plone/app/content/browser/contents/delete.py b/plone/app/content/browser/contents/delete.py
index c8895e9..b250431 100644
--- a/plone/app/content/browser/contents/delete.py
+++ b/plone/app/content/browser/contents/delete.py
@@ -54,7 +54,9 @@ def __call__(self):
             catalog = getToolByName(self.context, 'portal_catalog')
             brains = catalog(UID=selection)
             items = [i.getObject() for i in brains]
-            self.request.response.setHeader('Content-Type', 'application/json')
+            self.request.response.setHeader(
+                'Content-Type', 'application/json; charset=utf-8'
+            )
             return json.dumps({
                 'html': confirm_view(items)
             })
diff --git a/plone/app/content/browser/file.py b/plone/app/content/browser/file.py
index 5564ecf..d79f4e1 100644
--- a/plone/app/content/browser/file.py
+++ b/plone/app/content/browser/file.py
@@ -1,16 +1,18 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.permissions import AddPortalContent
-from Products.Five.browser import BrowserView
 from plone.app.dexterity.interfaces import IDXFileFactory
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.uuid.interfaces import IUUID
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.permissions import AddPortalContent
+from Products.Five.browser import BrowserView
+
 import json
 import logging
 import mimetypes
 import os
 
+
 logger = logging.getLogger('plone')
 
 
@@ -187,4 +189,27 @@ def __call__(self):
             'UID': IUUID(obj),
             'filename': filename
         })
+
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json.dumps(result)
+
+
+class AllowUploadView(BrowserView):
+
+    def __call__(self):
+        """Return JSON structure to indicate if File or Image uploads are
+        allowed in the current container.
+        """
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
+        allowed_types = [t.getId() for t in self.context.allowedContentTypes()]
+        allow_images = u'Image' in allowed_types
+        allow_files = u'File' in allowed_types
+        return json.dumps({
+            'allowUpload': allow_images or allow_files,
+            'allowImages': allow_images,
+            'allowFiles': allow_files
+        })
diff --git a/plone/app/content/browser/i18n.py b/plone/app/content/browser/i18n.py
index 9ce7c8b..c8ce9f5 100644
--- a/plone/app/content/browser/i18n.py
+++ b/plone/app/content/browser/i18n.py
@@ -38,6 +38,6 @@ def __call__(self, domain, language=None):
 
         catalog = self._gettext_catalog(domain, language)
         response = self.request.response
-        response.setHeader('content-type', 'application/json')
+        response.setHeader('Content-Type', 'application/json; charset=utf-8')
         response.setBody(json.dumps(catalog))
         return response
diff --git a/plone/app/content/browser/query.py b/plone/app/content/browser/query.py
index 9834029..803a1a1 100644
--- a/plone/app/content/browser/query.py
+++ b/plone/app/content/browser/query.py
@@ -11,5 +11,7 @@ class QueryStringIndexOptions(BrowserView):
     def __call__(self):
         registry = getUtility(IRegistry)
         config = IQuerystringRegistryReader(registry)()
-        self.request.response.setHeader("Content-Type", "application/json")
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
         return json.dumps(config)
diff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py
index 5b5e840..98a0354 100644
--- a/plone/app/content/browser/vocabulary.py
+++ b/plone/app/content/browser/vocabulary.py
@@ -93,7 +93,9 @@ def __call__(self):
         }
         """
         context = self.get_context()
-        self.request.response.setHeader("Content-type", "application/json")
+        self.request.response.setHeader(
+            'Content-Type', 'application/json; charset=utf-8'
+        )
 
         try:
             vocabulary = self.get_vocabulary()
diff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py
index 97dac7c..3a90c49 100644
--- a/plone/app/content/tests/test_contents.py
+++ b/plone/app/content/tests/test_contents.py
@@ -153,3 +153,68 @@ def test_paste_fail_constraint(self):
         res = json.loads(res)
         self.assertEqual(res['status'], 'warning')
         self.assertEqual(len(self.portal.it1.contentIds()), 0)
+
+
+class AllowUploadViewTests(unittest.TestCase):
+    layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+
+        # TYPE 1
+        type1_fti = DexterityFTI('type1')
+        type1_fti.klass = 'plone.dexterity.content.Container'
+        type1_fti.filter_content_types = True
+        type1_fti.allowed_content_types = []
+        type1_fti.behaviors = (
+            'plone.app.dexterity.behaviors.metadata.IBasic'
+        )
+        self.portal.portal_types._setObject('type1', type1_fti)
+        self.type1_fti = type1_fti
+
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
+        self.portal.invokeFactory('type1', id='it1', title='Item 1')
+
+    def test_allow_upload(self):
+        """Test, if file or images are allowed in a container in different FTI
+        configurations.
+        """
+
+        # Test none allowed
+        self.type1_fti.allowed_content_types = []
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], False)
+        self.assertEqual(allow_upload['allowImages'], False)
+        self.assertEqual(allow_upload['allowFiles'], False)
+
+        # Test images allowed
+        self.type1_fti.allowed_content_types = ['Image']
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], True)
+        self.assertEqual(allow_upload['allowImages'], True)
+        self.assertEqual(allow_upload['allowFiles'], False)
+
+        # Test files allowed
+        self.type1_fti.allowed_content_types = ['File']
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], True)
+        self.assertEqual(allow_upload['allowImages'], False)
+        self.assertEqual(allow_upload['allowFiles'], True)
+
+        # Test images and files allowed
+        self.type1_fti.allowed_content_types = ['Image', 'File']
+        allow_upload = self.portal.it1.restrictedTraverse('@@allow_upload')
+        allow_upload = json.loads(allow_upload())
+
+        self.assertEqual(allow_upload['allowUpload'], True)
+        self.assertEqual(allow_upload['allowImages'], True)
+        self.assertEqual(allow_upload['allowFiles'], True)


