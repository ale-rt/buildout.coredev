Repository: plone.app.contentlisting


Branch: refs/heads/1.0.x
Date: 2016-05-04T15:08:55+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.contentlisting/commit/bd1002328f3f158eb7d98bddab072b8ebbe2cce7

Apply hotfix 20160419.

Removed docstrings from some methods to avoid publishing them.

Files changed:
M CHANGES.txt
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 45bedc1..f2cdba1 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,10 @@ Changelog
 1.0.6 (unreleased)
 ------------------
 
-- Nothing changed yet.
+Fixes:
+
+- Removed docstrings from some methods to avoid publishing them.  From
+  Products.PloneHotfix20160419.  [maurits]
 
 
 1.0.5 (2013-08-13)
@@ -35,7 +38,7 @@ Changelog
 ------------------
 
 - Change ContentTypeClass to return contenttype-{portal_type} to match
-  what the rest of Plone expects. This fixes sprite based icons for 
+  what the rest of Plone expects. This fixes sprite based icons for
   pages/documents.
   [gaudenz]
 
diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index aa75d91..a251cd6 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -44,24 +44,21 @@ def __getattr__(self, name):
             raise AttributeError(name)
 
     def getDataOrigin(self):
-        """ The origin of the data for the object.
-
-        Sometimes we just need to know if we are looking at a brain or
-        the real object
-        """
+        # The origin of the data for the object.
+        # Sometimes we just need to know if we are looking at a brain or
+        # the real object.
         if self._cached_realobject is not None:
             return self._cached_realobject
         else:
             return self._brain
 
     def getObject(self):
-        """get the real, underlying object
+        # Get the real, underlying object.
 
-        This is performance intensive compared to just getting the
-        catalog brain, so we don't do it until we need to.  We may
-        even have to log this to notify the developer that this might
-        be an inefficient operation.
-        """
+        # This is performance intensive compared to just getting the
+        # catalog brain, so we don't do it until we need to.  We may
+        # even have to log this to notify the developer that this might
+        # be an inefficient operation.
         if self._cached_realobject is None:
             self._cached_realobject = self._brain.getObject()
         return self._cached_realobject
@@ -183,7 +180,7 @@ def Identifier(self):
         return self.getURL()
 
     def Language(self):
-        """the language of the content"""
+        # The language of the content.
         if hasattr(aq_base(self._brain), 'Language'):
             return self._brain.Language
         else:
diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py
index 6d550ee..0f9e6ca 100644
--- a/plone/app/contentlisting/contentlisting.py
+++ b/plone/app/contentlisting/contentlisting.py
@@ -98,19 +98,19 @@ def __eq__(self, other):
         return self.uuid() == other.uuid()
 
     def ContentTypeClass(self):
-        """A normalised type name that identifies the object in listings.
-        used for CSS styling"""
+        # A normalised type name that identifies the object in listings.
+        # Used for CSS styling.
         return "contenttype-" + queryUtility(IIDNormalizer).normalize(
             self.PortalType())
 
     def ReviewStateClass(self):
-        """A normalised review state string for CSS styling use in listings."""
+        # A normalised review state string for CSS styling use in listings.
         return "state-" + queryUtility(IIDNormalizer).normalize(
             self.review_state())
 
     def appendViewAction(self):
-        """decide whether to produce a string /view to append to links
-        in results listings"""
+        # Decide whether to produce a string /view to append to links in
+        # results listings.
         try:
             ttool = getToolByName(self.getDataOrigin(), 'portal_properties')
             types = ttool.site_properties.typesUseViewActionInListings
@@ -121,7 +121,7 @@ def appendViewAction(self):
         return ''
 
     def isVisibleInNav(self):
-        """true iff this item should be visible in navigation trees"""
+        # True, if this item should be visible in navigation trees.
         if hasattr(self,'exclude_from_nav') and (self.exclude_from_nav() if callable(self.exclude_from_nav) else self.exclude_from_nav):
             return False
         portal_properties = getToolByName(self.getDataOrigin(), 'portal_properties')
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 04ea29f..2343f51 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -43,11 +43,9 @@ def getObject(self):
         return self._realobject
 
     def getDataOrigin(self):
-        """The origin of the data for the object.
-
-        Sometimes we just need to know if we are looking at a brain or
-        the real object.
-        """
+        # The origin of the data for the object.
+        # Sometimes we just need to know if we are looking at a brain or
+        # the real object.
         return self.getObject()
 
     # a base set of elements that are needed but not defined in dublin core
@@ -77,7 +75,7 @@ def review_state(self):
         return wftool.getInfoFor(obj, 'review_state')
 
     def Type(self):
-        """Dublin Core element - Object type"""
+        # Dublin Core element - Object type.
         obj = self.getObject()
         typestool = getToolByName(obj, 'portal_types')
         ti = typestool.getTypeInfo(obj)


