Repository: Products.Archetypes


Branch: refs/heads/master
Date: 2016-04-22T00:41:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.Archetypes/commit/8c22eefa91ce02451667e2966d08ad9fcb60e247

No longer try to mock plone.app.widgets in tests. (#56)

* No longer try to mock plone.app.widgets in tests.

We were mocking plone.app.widgets.utils.getUtility,
but this was nowhere used.
I see I cleaned up the usage of it myself a few months ago.
Current plone.app.widgets.utils has no getUtility anymore.
I have got no idea why I got test failures for this locally while Jenkins is happy.

* Fixed plone.app.widgets related items tests.

We get a few more keys now.

Files changed:
M CHANGES.rst
M Products/Archetypes/tests/test_pawidgets.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3183fb5..2d16129 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New:
 
 Fixes:
 
-- *add item here*
+- No longer try to mock plone.app.widgets in tests.  [maurits]
 
 
 1.10.13 (2016-02-25)
diff --git a/Products/Archetypes/tests/test_pawidgets.py b/Products/Archetypes/tests/test_pawidgets.py
index 1bf7707..2421358 100644
--- a/Products/Archetypes/tests/test_pawidgets.py
+++ b/Products/Archetypes/tests/test_pawidgets.py
@@ -303,7 +303,9 @@ class RelatedItemsWidgetTests(unittest.TestCase):
     def setUp(self):
 
         self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
-        self.context = Mock(absolute_url=lambda: '')
+        self.context = Mock(
+            absolute_url=lambda: '',
+            getPhysicalPath=lambda: ('', 'Plone', 'doc'))
         self.field = Mock()
 
         xmlconfig.file('configure.zcml', plone.uuid,
@@ -320,38 +322,43 @@ def test_multi_valued(self):
         class ExampleContent(object):
             implements(IAttributeUUID)
 
-        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
-            obj1 = ExampleContent()
-            obj2 = ExampleContent()
-            notify(ObjectCreatedEvent(obj1))
-            notify(ObjectCreatedEvent(obj2))
-
-            self.field.getName.return_value = 'fieldname'
-            self.field.getAccessor.return_value = lambda: [obj1, obj2]
-            self.field.multiValued = True
-
-            widget = RelatedItemsWidget()
-
-            self.assertEqual(
-                {
-                    'name': 'fieldname',
-                    'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
-                    'pattern': 'relateditems',
-                    'pattern_options': {
-                        'folderTypes': ['Folder'],
-                        'homeText': u'Home',
-                        'searchAllText': u'Entire site',
-                        'searchText': u'Search',
-                        'separator': ';',
-                        'orderable': True,
-                        'maximumSelectionSize': -1,
-                        'vocabularyUrl': '/@@getVocabulary?name='
-                                         'plone.app.vocabularies.Catalog'
-                                         '&field=fieldname',
-                    },
+        obj1 = ExampleContent()
+        obj2 = ExampleContent()
+        notify(ObjectCreatedEvent(obj1))
+        notify(ObjectCreatedEvent(obj2))
+
+        self.field.getName.return_value = 'fieldname'
+        self.field.getAccessor.return_value = lambda: [obj1, obj2]
+        self.field.multiValued = True
+
+        widget = RelatedItemsWidget()
+
+        self.assertEqual(
+            {
+                'name': 'fieldname',
+                'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
+                'pattern': 'relateditems',
+                'pattern_options': {
+                    'folderTypes': ['Folder'],
+                    'homeText': u'Home',
+                    'searchAllText': u'Entire site',
+                    'searchText': u'Search',
+                    'separator': ';',
+                    'orderable': True,
+                    'maximumSelectionSize': -1,
+                    'vocabularyUrl': '/@@getVocabulary?name='
+                                     'plone.app.vocabularies.Catalog'
+                                     '&field=fieldname',
+                    'basePath': '/Plone/doc',
+                    'rootPath': '/',
+                    'sort_on': 'sortable_title',
+                    'sort_order': 'ascending',
+                    'treeVocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog',
                 },
-                widget._base_args(self.context, self.field, self.request),
-            )
+            },
+            widget._base_args(self.context, self.field, self.request),
+        )
 
     def test_single_value(self):
         from zope.event import notify
@@ -371,29 +378,34 @@ class ExampleContent(object):
         self.field.getAccessor.return_value = lambda: obj1
         self.field.multiValued = False
 
-        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
-            widget = RelatedItemsWidget()
-
-            self.assertEqual(
-                {
-                    'name': 'fieldname',
-                    'value': '{}'.format(IUUID(obj1)),
-                    'pattern': 'relateditems',
-                    'pattern_options': {
-                        'folderTypes': ['Folder'],
-                        'homeText': u'Home',
-                        'separator': ';',
-                        'orderable': True,
-                        'searchAllText': u'Entire site',
-                        'searchText': u'Search',
-                        'maximumSelectionSize': 1,
-                        'vocabularyUrl': '/@@getVocabulary?name='
-                                         'plone.app.vocabularies.Catalog'
-                                         '&field=fieldname',
-                    },
+        widget = RelatedItemsWidget()
+
+        self.assertEqual(
+            {
+                'name': 'fieldname',
+                'value': '{}'.format(IUUID(obj1)),
+                'pattern': 'relateditems',
+                'pattern_options': {
+                    'folderTypes': ['Folder'],
+                    'homeText': u'Home',
+                    'separator': ';',
+                    'orderable': True,
+                    'searchAllText': u'Entire site',
+                    'searchText': u'Search',
+                    'maximumSelectionSize': 1,
+                    'vocabularyUrl': '/@@getVocabulary?name='
+                                     'plone.app.vocabularies.Catalog'
+                                     '&field=fieldname',
+                    'basePath': '/Plone/doc',
+                    'rootPath': '/',
+                    'sort_on': 'sortable_title',
+                    'sort_order': 'ascending',
+                    'treeVocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog',
                 },
-                widget._base_args(self.context, self.field, self.request),
-            )
+            },
+            widget._base_args(self.context, self.field, self.request),
+        )
 
     def test_single_valued_empty(self):
         from Products.Archetypes.Widget import RelatedItemsWidget
@@ -402,29 +414,34 @@ def test_single_valued_empty(self):
         self.field.getAccessor.return_value = lambda: None
         self.field.multiValued = False
 
-        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
-            widget = RelatedItemsWidget()
-
-            self.assertEqual(
-                {
-                    'name': 'fieldname',
-                    'value': '',
-                    'pattern': 'relateditems',
-                    'pattern_options': {
-                        'folderTypes': ['Folder'],
-                        'homeText': u'Home',
-                        'separator': ';',
-                        'orderable': True,
-                        'searchAllText': u'Entire site',
-                        'searchText': u'Search',
-                        'maximumSelectionSize': 1,
-                        'vocabularyUrl': '/@@getVocabulary?name='
-                                         'plone.app.vocabularies.Catalog'
-                                         '&field=fieldname',
-                    },
+        widget = RelatedItemsWidget()
+
+        self.assertEqual(
+            {
+                'name': 'fieldname',
+                'value': '',
+                'pattern': 'relateditems',
+                'pattern_options': {
+                    'folderTypes': ['Folder'],
+                    'homeText': u'Home',
+                    'separator': ';',
+                    'orderable': True,
+                    'searchAllText': u'Entire site',
+                    'searchText': u'Search',
+                    'maximumSelectionSize': 1,
+                    'vocabularyUrl': '/@@getVocabulary?name='
+                                     'plone.app.vocabularies.Catalog'
+                                     '&field=fieldname',
+                    'basePath': '/Plone/doc',
+                    'rootPath': '/',
+                    'sort_on': 'sortable_title',
+                    'sort_order': 'ascending',
+                    'treeVocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog',
                 },
-                widget._base_args(self.context, self.field, self.request),
-            )
+            },
+            widget._base_args(self.context, self.field, self.request),
+        )
 
     def test_multiple_widgets(self):
         from zope.event import notify
@@ -442,67 +459,78 @@ class ExampleContent(object):
         notify(ObjectCreatedEvent(obj1))
         notify(ObjectCreatedEvent(obj2))
 
-        with mock.patch('plone.app.widgets.utils.getUtility') as mock_method:
-            self.context.fieldvalue = lambda: obj1
-
-            field1 = ReferenceField(
-                'fieldname1',
-                relationship="A",
-                multiValued=False,
-                widget=RelatedItemsWidget(),
-            )
-            field1.accessor = "fieldvalue"
-
-            self.assertEqual(
-                {
-                    'name': 'fieldname1',
-                    'value': '{}'.format(IUUID(obj1)),
-                    'pattern': 'relateditems',
-                    'pattern_options': {
-                        'folderTypes': ['Folder'],
-                        'homeText': u'Home',
-                        'separator': ';',
-                        'orderable': True,
-                        'searchAllText': u'Entire site',
-                        'searchText': u'Search',
-                        'maximumSelectionSize': 1,
-                        'vocabularyUrl': '/@@getVocabulary?name='
-                                         'plone.app.vocabularies.Catalog'
-                                         '&field=fieldname1',
-                    },
+        self.context.fieldvalue = lambda: obj1
+
+        field1 = ReferenceField(
+            'fieldname1',
+            relationship="A",
+            multiValued=False,
+            widget=RelatedItemsWidget(),
+        )
+        field1.accessor = "fieldvalue"
+
+        self.assertEqual(
+            {
+                'name': 'fieldname1',
+                'value': '{}'.format(IUUID(obj1)),
+                'pattern': 'relateditems',
+                'pattern_options': {
+                    'folderTypes': ['Folder'],
+                    'homeText': u'Home',
+                    'separator': ';',
+                    'orderable': True,
+                    'searchAllText': u'Entire site',
+                    'searchText': u'Search',
+                    'maximumSelectionSize': 1,
+                    'vocabularyUrl': '/@@getVocabulary?name='
+                                     'plone.app.vocabularies.Catalog'
+                                     '&field=fieldname1',
+                    'basePath': '/Plone/doc',
+                    'rootPath': '/',
+                    'sort_on': 'sortable_title',
+                    'sort_order': 'ascending',
+                    'treeVocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog',
                 },
-                field1.widget._base_args(self.context, field1, self.request),
-            )
-
-            field2 = ReferenceField(
-                'fieldname2',
-                relationship="A",
-                multiValued=True,
-                widget=RelatedItemsWidget(),
-            )
-            field2.accessor = "fieldvalue"
-            self.context.fieldvalue = lambda: [obj1, obj2]
-
-            self.assertEqual(
-                {
-                    'name': 'fieldname2',
-                    'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
-                    'pattern': 'relateditems',
-                    'pattern_options': {
-                        'folderTypes': ['Folder'],
-                        'homeText': u'Home',
-                        'separator': ';',
-                        'orderable': True,
-                        'searchAllText': u'Entire site',
-                        'searchText': u'Search',
-                        'maximumSelectionSize': -1,
-                        'vocabularyUrl': '/@@getVocabulary?name='
-                                         'plone.app.vocabularies.Catalog'
-                                         '&field=fieldname2',
-                    },
+            },
+            field1.widget._base_args(self.context, field1, self.request),
+        )
+
+        field2 = ReferenceField(
+            'fieldname2',
+            relationship="A",
+            multiValued=True,
+            widget=RelatedItemsWidget(),
+        )
+        field2.accessor = "fieldvalue"
+        self.context.fieldvalue = lambda: [obj1, obj2]
+
+        self.assertEqual(
+            {
+                'name': 'fieldname2',
+                'value': '{};{}'.format(IUUID(obj1), IUUID(obj2)),
+                'pattern': 'relateditems',
+                'pattern_options': {
+                    'folderTypes': ['Folder'],
+                    'homeText': u'Home',
+                    'separator': ';',
+                    'orderable': True,
+                    'searchAllText': u'Entire site',
+                    'searchText': u'Search',
+                    'maximumSelectionSize': -1,
+                    'vocabularyUrl': '/@@getVocabulary?name='
+                                     'plone.app.vocabularies.Catalog'
+                                     '&field=fieldname2',
+                    'basePath': '/Plone/doc',
+                    'rootPath': '/',
+                    'sort_on': 'sortable_title',
+                    'sort_order': 'ascending',
+                    'treeVocabularyUrl': '/@@getVocabulary?name='
+                                         'plone.app.vocabularies.Catalog',
                 },
-                field2.widget._base_args(self.context, field2, self.request),
-            )
+            },
+            field2.widget._base_args(self.context, field2, self.request),
+        )
 
 
 class QueryStringWidgetTests(unittest.TestCase):


