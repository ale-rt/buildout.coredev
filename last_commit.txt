Repository: plone.app.portlets


Branch: refs/heads/3.x
Date: 2016-09-20T14:14:22+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.portlets/commit/ee654ff2705d4d8eb496e1e74581f017c4f0f647

Apply security hotfix 20160830 for redirects.

Files changed:
A plone/app/portlets/tests/test_redirects.py
M CHANGES.rst
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8e4899a..d894ba6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for redirects.  [maurits]
 
 
 3.1.4 (2016-09-14)
diff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py
index e88879f..c0e494c 100644
--- a/plone/app/portlets/browser/adding.py
+++ b/plone/app/portlets/browser/adding.py
@@ -7,6 +7,7 @@
 
 from Acquisition import aq_inner, aq_base, aq_parent
 from OFS.SimpleItem import SimpleItem
+from Products.CMFCore.utils import getToolByName
 from Products.Five import BrowserView
 
 from plone.app.portlets.browser.interfaces import IPortletAdding
@@ -34,11 +35,17 @@ def add(self, content):
         chooser = INameChooser(manager)
         manager[chooser.chooseName(None, content)] = content
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if not referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        referer = self.referer
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
             referer = url + '/@@manage-portlets'
         return referer
 
diff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py
index 811143c..3a967c4 100644
--- a/plone/app/portlets/browser/editmanager.py
+++ b/plone/app/portlets/browser/editmanager.py
@@ -27,6 +27,7 @@
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.PythonScripts.standard import url_quote, url_unquote
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 
 from plone.app.portlets.browser.interfaces import IManageColumnPortletsView
@@ -441,9 +442,11 @@ def delete_portlet(self, name):
 
     def _nextUrl(self):
         referer = self.request.get('referer')
+        urltool = getToolByName(self.context, 'portal_url')
         if referer:
             referer = url_unquote(referer)
-        else:
+
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
             url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
             referer = '%s/@@manage-portlets' % (url,)
diff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py
index e8579c6..2443ed5 100644
--- a/plone/app/portlets/browser/formhelper.py
+++ b/plone/app/portlets/browser/formhelper.py
@@ -5,6 +5,7 @@
 import zope.event
 import zope.lifecycleevent
 
+from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
@@ -79,12 +80,19 @@ def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         addview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(addview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            # At least in tests we can get a TypeError: "There isn't enough
+            # context to get URL information. This is probably due to a bug in
+            # setting up location information."
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='add')
@@ -126,15 +134,22 @@ def __call__(self):
             self.request.response.redirect(self.nextURL())
         return ''
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if referer:
-            return referer
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
         else:
             addview = aq_parent(aq_inner(self.context))
             context = aq_parent(aq_inner(addview))
-            url = str(getMultiAdapter((context, self.request),
-                                      name=u"absolute_url"))
+            try:
+                url = str(getMultiAdapter((context, self.request),
+                                          name=u"absolute_url"))
+            except (TypeError, AttributeError):
+                url = self.context.absolute_url()
             return url + '/@@manage-portlets'
 
     def create(self):
@@ -163,12 +178,16 @@ def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         editview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(editview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='apply')
diff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py
new file mode 100644
index 0000000..2d656ed
--- /dev/null
+++ b/plone/app/portlets/tests/test_redirects.py
@@ -0,0 +1,58 @@
+# -*- coding: utf-8 -*-
+from plone.app.portlets.browser.adding import PortletAdding
+from plone.app.portlets.browser.editmanager import ManagePortletAssignments
+from plone.app.portlets.browser.formhelper import AddForm
+from plone.app.portlets.browser.formhelper import EditForm
+from plone.app.portlets.tests.base import PortletsTestCase
+
+
+class TestRedirects(PortletsTestCase):
+    _test_methods = [
+        (PortletAdding, 'nextURL'),
+        (ManagePortletAssignments, '_nextUrl'),
+        (AddForm, 'nextURL'),
+        (EditForm, 'nextURL'),
+    ]
+
+    def test_regression(self):
+        portal_url = self.portal.absolute_url()
+        self.request.form.update({
+            'referer': portal_url
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, self.request)
+            view.__parent__ = self.portal
+            self.assertEqual(getattr(view, method)(), portal_url)
+
+    def test_valid_next_url(self):
+        self.request.form.update({
+            'referer': 'http://attacker.com'
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, self.request)
+            view.__parent__ = self.portal
+            self.assertNotEqual('http://attacker.com', getattr(view, method)())
+
+
+def test_suite():
+    # Without this test_suite, there is a strange error when running the tests:
+    #
+    # Error in test runTest
+    # (plone.app.portlets.tests.base.PortletsFunctionalTestCase)
+    # Traceback (most recent call last):
+    #   File "unittest2-0.5.1-py2.7.egg/unittest2/case.py", line 340, in run
+    #     testMethod()
+    #   TypeError: 'NoneType' object is not callable
+    #
+    # You get the error when running
+    # bin/test -s plone.app.portlets
+    # or
+    # bin/test -s plone.app.portlets -t run
+    # but not with
+    # bin/test -s plone.app.portlets -m test_redirects
+    # But the error *is* in this test_redirects.py file,
+    # because it goes away when I delete this file.
+    from unittest import TestSuite, makeSuite
+    suite = TestSuite()
+    suite.addTest(makeSuite(TestRedirects))
+    return suite


Repository: plone.app.portlets


Branch: refs/heads/3.x
Date: 2016-09-20T21:09:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/ed2c87b539f3970386d8c9f882257a228512ef85

Merge pull request #88 from plone/apply-hotfix-20160830-3x

Apply security hotfix 20160830 for redirects. [3.x, Plone 5.0]

Files changed:
A plone/app/portlets/tests/test_redirects.py
M CHANGES.rst
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8e4899a..d894ba6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for redirects.  [maurits]
 
 
 3.1.4 (2016-09-14)
diff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py
index e88879f..c0e494c 100644
--- a/plone/app/portlets/browser/adding.py
+++ b/plone/app/portlets/browser/adding.py
@@ -7,6 +7,7 @@
 
 from Acquisition import aq_inner, aq_base, aq_parent
 from OFS.SimpleItem import SimpleItem
+from Products.CMFCore.utils import getToolByName
 from Products.Five import BrowserView
 
 from plone.app.portlets.browser.interfaces import IPortletAdding
@@ -34,11 +35,17 @@ def add(self, content):
         chooser = INameChooser(manager)
         manager[chooser.chooseName(None, content)] = content
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if not referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        referer = self.referer
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
             referer = url + '/@@manage-portlets'
         return referer
 
diff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py
index 811143c..3a967c4 100644
--- a/plone/app/portlets/browser/editmanager.py
+++ b/plone/app/portlets/browser/editmanager.py
@@ -27,6 +27,7 @@
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.PythonScripts.standard import url_quote, url_unquote
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 
 from plone.app.portlets.browser.interfaces import IManageColumnPortletsView
@@ -441,9 +442,11 @@ def delete_portlet(self, name):
 
     def _nextUrl(self):
         referer = self.request.get('referer')
+        urltool = getToolByName(self.context, 'portal_url')
         if referer:
             referer = url_unquote(referer)
-        else:
+
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
             url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
             referer = '%s/@@manage-portlets' % (url,)
diff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py
index e8579c6..2443ed5 100644
--- a/plone/app/portlets/browser/formhelper.py
+++ b/plone/app/portlets/browser/formhelper.py
@@ -5,6 +5,7 @@
 import zope.event
 import zope.lifecycleevent
 
+from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
@@ -79,12 +80,19 @@ def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         addview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(addview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            # At least in tests we can get a TypeError: "There isn't enough
+            # context to get URL information. This is probably due to a bug in
+            # setting up location information."
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='add')
@@ -126,15 +134,22 @@ def __call__(self):
             self.request.response.redirect(self.nextURL())
         return ''
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if referer:
-            return referer
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
         else:
             addview = aq_parent(aq_inner(self.context))
             context = aq_parent(aq_inner(addview))
-            url = str(getMultiAdapter((context, self.request),
-                                      name=u"absolute_url"))
+            try:
+                url = str(getMultiAdapter((context, self.request),
+                                          name=u"absolute_url"))
+            except (TypeError, AttributeError):
+                url = self.context.absolute_url()
             return url + '/@@manage-portlets'
 
     def create(self):
@@ -163,12 +178,16 @@ def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         editview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(editview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='apply')
diff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py
new file mode 100644
index 0000000..2d656ed
--- /dev/null
+++ b/plone/app/portlets/tests/test_redirects.py
@@ -0,0 +1,58 @@
+# -*- coding: utf-8 -*-
+from plone.app.portlets.browser.adding import PortletAdding
+from plone.app.portlets.browser.editmanager import ManagePortletAssignments
+from plone.app.portlets.browser.formhelper import AddForm
+from plone.app.portlets.browser.formhelper import EditForm
+from plone.app.portlets.tests.base import PortletsTestCase
+
+
+class TestRedirects(PortletsTestCase):
+    _test_methods = [
+        (PortletAdding, 'nextURL'),
+        (ManagePortletAssignments, '_nextUrl'),
+        (AddForm, 'nextURL'),
+        (EditForm, 'nextURL'),
+    ]
+
+    def test_regression(self):
+        portal_url = self.portal.absolute_url()
+        self.request.form.update({
+            'referer': portal_url
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, self.request)
+            view.__parent__ = self.portal
+            self.assertEqual(getattr(view, method)(), portal_url)
+
+    def test_valid_next_url(self):
+        self.request.form.update({
+            'referer': 'http://attacker.com'
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, self.request)
+            view.__parent__ = self.portal
+            self.assertNotEqual('http://attacker.com', getattr(view, method)())
+
+
+def test_suite():
+    # Without this test_suite, there is a strange error when running the tests:
+    #
+    # Error in test runTest
+    # (plone.app.portlets.tests.base.PortletsFunctionalTestCase)
+    # Traceback (most recent call last):
+    #   File "unittest2-0.5.1-py2.7.egg/unittest2/case.py", line 340, in run
+    #     testMethod()
+    #   TypeError: 'NoneType' object is not callable
+    #
+    # You get the error when running
+    # bin/test -s plone.app.portlets
+    # or
+    # bin/test -s plone.app.portlets -t run
+    # but not with
+    # bin/test -s plone.app.portlets -m test_redirects
+    # But the error *is* in this test_redirects.py file,
+    # because it goes away when I delete this file.
+    from unittest import TestSuite, makeSuite
+    suite = TestSuite()
+    suite.addTest(makeSuite(TestRedirects))
+    return suite


