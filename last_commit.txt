Repository: plone.dexterity


Branch: refs/heads/master
Date: 2016-05-04T10:43:11+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/4d9169e293bd72e87b1907e7977eb157adeb8dd0

Apply hotfix 20160419 (#56)

Added security declarations from Products.PloneHotfix20160419.
Removed more docstrings to avoid publishing.

Files changed:
M CHANGES.rst
M plone/dexterity/content.py
M plone/dexterity/filerepresentation.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 80075bb..d9da126 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,7 @@ New:
 
 Fixes:
 
-- *add item here*
+- Added security declarations from Products.PloneHotfix20160419.  [maurits]
 
 
 2.4.1 (2016-02-27)
diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py
index 4f867af..a39c597 100644
--- a/plone/dexterity/content.py
+++ b/plone/dexterity/content.py
@@ -354,22 +354,20 @@ def _set__name__(self, value):
     __name__ = property(_get__name__, _set__name__)
 
     def UID(self):
-        """Returns the item's globally unique id."""
+        # Returns the item's globally unique id.
         return IUUID(self)
 
     @security.private
     def notifyModified(self):
-        """Update creators and modification_date.
-
-        This is called from CMFCatalogAware.reindexObject.
-        """
+        # Update creators and modification_date.
+        # This is called from CMFCatalogAware.reindexObject.
         self.addCreator()
         self.setModificationDate()
 
     @security.protected(permissions.ModifyPortalContent)
     def addCreator(self, creator=None):
-        """ Add creator to Dublin Core creators.
-        """
+        # Add creator to Dublin Core creators.
+
         if len(self.creators) > 0:
             # do not add creator if one is already set
             return
@@ -384,10 +382,8 @@ def addCreator(self, creator=None):
 
     @security.protected(permissions.ModifyPortalContent)
     def setModificationDate(self, modification_date=None):
-        """ Set the date when the resource was last modified.
-
-        When called without an argument, sets the date to now.
-        """
+        # Set the date when the resource was last modified.
+        # When called without an argument, sets the date to now.
         if modification_date is None:
             self.modification_date = DateTime()
         else:
@@ -725,8 +721,7 @@ def allowedContentTypes(self, context=None):
     # override PortalFolder's invokeFactory to respect IConstrainTypes
     # adapters
     def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):
-        """Invokes the portal_types tool
-        """
+        # Invokes the portal_types tool.
         constrains = IConstrainTypes(self, None)
 
         if constrains:
diff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py
index bee059f..85daf0c 100644
--- a/plone/dexterity/filerepresentation.py
+++ b/plone/dexterity/filerepresentation.py
@@ -31,6 +31,10 @@
 from ZPublisher.Iterators import IStreamIterator
 import tempfile
 
+from AccessControl.class_init import InitializeClass
+from AccessControl import ClassSecurityInfo
+from Products.CMFCore import permissions
+
 
 class DAVResourceMixin(object):
     """Mixin class for WebDAV resource support.
@@ -39,14 +43,17 @@ class DAVResourceMixin(object):
     delegate to more granular adapters.
     """
 
-    def get_size(self):
-        """Get the size of the content item in bytes. Used both in folder
-        listings and in DAV PROPFIND requests.
+    security = ClassSecurityInfo()
 
-        The default implementation delegates to an ISized adapter and calls
-        getSizeForSorting(). This returns a tuple (unit, value). If the unit
-        is 'bytes', the value is returned, otherwise the size is 0.
-        """
+    @security.protected(permissions.View)
+    def get_size(self):
+        # Get the size of the content item in bytes.
+        #
+        # Used both in folder listings and in DAV PROPFIND requests.
+        #
+        # The default implementation delegates to an ISized adapter and calls
+        # getSizeForSorting(). This returns a tuple (unit, value). If the unit
+        # is 'bytes', the value is returned, otherwise the size is 0.
         sized = ISized(self, None)
         if sized is None:
             return 0
@@ -55,24 +62,26 @@ def get_size(self):
             return size
         return 0
 
+    @security.protected(permissions.View)
     def content_type(self):
-        """Return the content type (MIME type) of the tiem
-        """
+        # Return the content type (MIME type) of the item.
         readFile = IRawReadFile(self, None)
         if readFile is None:
             return None
         return readFile.mimeType
 
+    @security.protected(permissions.View)
     def Format(self):
-        """Return the content type (MIME type) of the item
-        """
+        # Return the content type (MIME type) of the item.
         return self.content_type()
 
+    @security.protected(permissions.View)
     def manage_DAVget(self):
         """Get the body of the content item in a WebDAV response.
         """
         return self.manage_FTPget()
 
+    @security.protected(permissions.View)
     def manage_FTPget(self, REQUEST=None, RESPONSE=None):
         """Return the body of the content item in an FTP or WebDAV response.
 
@@ -111,6 +120,7 @@ def manage_FTPget(self, REQUEST=None, RESPONSE=None):
 
         return reader.read()
 
+    @security.protected(permissions.ModifyPortalContent)
     def PUT(self, REQUEST=None, RESPONSE=None):
         """WebDAV method to replace self with a new resource. This is also
         used when initialising an object just created from a NullResource.
@@ -167,6 +177,9 @@ class DAVCollectionMixin(DAVResourceMixin):
     delegate to more granular adapters.
     """
 
+    security = ClassSecurityInfo()
+
+    @security.protected(permissions.AddPortalContent)
     def MKCOL_handler(self, id, REQUEST=None, RESPONSE=None):
         """Handle "make collection" by delegating to an IDirectoryFactory
         adapter.
@@ -178,6 +191,7 @@ def MKCOL_handler(self, id, REQUEST=None, RESPONSE=None):
             )
         factory(id)
 
+    @security.protected(permissions.AddPortalContent)
     def PUT_factory(self, name, contentType, body):
         """Handle constructing a new object upon a PUT request by delegating
         to an IFileFactory adapter
@@ -187,6 +201,7 @@ def PUT_factory(self, name, contentType, body):
             return None
         return factory(name, contentType, body)
 
+    @security.protected(permissions.ListFolderContents)
     def listDAVObjects(self):
         """Return objects for WebDAV folder listings.
 
@@ -219,6 +234,7 @@ class FolderDataResource(Implicit, Resource):
     """
 
     __dav_collection__ = 0
+    security = ClassSecurityInfo()
 
     def __init__(self, name, parent):
         self.__dict__.update({'__parent__': parent, '__name__': name})
@@ -231,16 +247,14 @@ def __init__(self, name, parent):
     # be the container.
 
     def __getattr__(self, name):
-        """Fall back on parent for certain things, even if we're aq_base'd.
-        This makes propertysheet access work.
-        """
+        # Fall back on parent for certain things, even if we're aq_base'd.
+        # This makes propertysheet access work.
         if hasattr(aq_base(self.__parent__), name):
             return getattr(self.__parent__, name)
         raise AttributeError(name)
 
     def __setattr__(self, name, value):
-        """Set certain attributes on the parent
-        """
+        # Set certain attributes on the parent.
         if name in self.__dict__:
             object.__setattr__(self, name, value)
         elif self.__parent__.hasProperty(name):
@@ -261,26 +275,29 @@ def id(self):
         return self.__name__
 
     def getId(self):
-        """Get id for traveral purposes
-        """
+        # Get id for traveral purposes.
         return self.__name__
 
+    @security.protected(permissions.View)
     def HEAD(self, REQUEST, RESPONSE):
         """HEAD request: use the Resource algorithm on the data of the
         parent.
         """
         return Resource.HEAD(self.__parent__, REQUEST, RESPONSE)
 
+    @security.protected(permissions.ListFolderContents)
     def OPTIONS(self, REQUEST, RESPONSE):
         """OPTIONS request: delegate to parent
         """
         return self.__parent__.OPTIONS(REQUEST, RESPONSE)
 
+    @security.protected(permissions.View)
     def TRACE(self, REQUEST, RESPONSE):
         """TRACE request: delegate to parent
         """
         return self.__parent__.TRACE(REQUEST, RESPONSE)
 
+    @security.protected(permissions.View)
     def PROPFIND(self, REQUEST, RESPONSE):
         """PROPFIND request: use Resource algorithm on self, so that we do
         not appear as a folder.
@@ -289,6 +306,7 @@ def PROPFIND(self, REQUEST, RESPONSE):
         """
         return super(FolderDataResource, self).PROPFIND(REQUEST, RESPONSE)
 
+    @security.protected(permissions.ModifyPortalContent)
     def PROPPATCH(self, REQUEST, RESPONSE):
         """PROPPATCH request: Use Resource algorithm on self, so that we do
         not appear as a folder.
@@ -297,21 +315,25 @@ def PROPPATCH(self, REQUEST, RESPONSE):
         """
         return super(FolderDataResource, self).PROPPATCH(REQUEST, RESPONSE)
 
+    @security.protected(permissions.ModifyPortalContent)
     def LOCK(self, REQUEST, RESPONSE):
         """LOCK request: delegate to parent
         """
         return self.__parent__.LOCK(REQUEST, RESPONSE)
 
+    @security.protected(permissions.ModifyPortalContent)
     def UNLOCK(self, REQUEST, RESPONSE):
         """UNLOCK request: delegate to parent
         """
         return self.__parent__.UNLOCK(REQUEST, RESPONSE)
 
+    @security.protected(permissions.ModifyPortalContent)
     def PUT(self, REQUEST, RESPONSE):
         """PUT request: delegate to parent
         """
         return self.__parent__.PUT(REQUEST, RESPONSE)
 
+    @security.protected(permissions.AddPortalContent)
     def MKCOL(self, REQUEST, RESPONSE):
         """MKCOL request: not allowed
         """
@@ -320,6 +342,7 @@ def MKCOL(self, REQUEST, RESPONSE):
             'folder level instead'
         )
 
+    @security.protected(permissions.DeleteObjects)
     def DELETE(self, REQUEST, RESPONSE):
         """DELETE request: not allowed
         """
@@ -327,6 +350,7 @@ def DELETE(self, REQUEST, RESPONSE):
             'Cannot delete folder data: delete folder instead'
         )
 
+    @security.protected(permissions.AddPortalContent)
     def COPY(self, REQUEST, RESPONSE):
         """COPY request: not allowed
         """
@@ -334,6 +358,7 @@ def COPY(self, REQUEST, RESPONSE):
             'Cannot copy folder data: copy the folder instead'
         )
 
+    @security.protected(permissions.AddPortalContent)
     def MOVE(self, REQUEST, RESPONSE):
         """MOVE request: not allowed
         """
@@ -341,16 +366,19 @@ def MOVE(self, REQUEST, RESPONSE):
             'Cannot move folder data: move the folder instead'
         )
 
+    @security.protected(permissions.View)
     def manage_DAVget(self):
         """DAV content access: delete to manage_FTPget()
         """
         return self.__parent__.manage_DAVget()
 
+    @security.protected(permissions.View)
     def manage_FTPget(self):
         """FTP access: delegate to parent
         """
         return self.__parent__.manage_FTPget()
 
+    @security.protected(permissions.ListFolderContents)
     def listDAVObjects(self):
         """DAV object listing: return nothing
         """
@@ -619,8 +647,7 @@ def size(self):
 
     @memoize
     def _getMessage(self):
-        """Construct message on demand
-        """
+        # Construct message on demand.
         message = constructMessageFromSchemata(
             self.context,
             iterSchemata(self.context)
@@ -633,7 +660,7 @@ def _getMessage(self):
 
     @memoize
     def _getStream(self):
-        # We write to a TemporayFile instead of a StringIO because we don't
+        # We write to a TemporaryFile instead of a StringIO because we don't
         # want to keep the full file contents around in memory, and because
         # this approach allows us to hand off the stream iterator to the
         # publisher, which will serve it efficiently even after the
@@ -802,3 +829,8 @@ def truncate(self, size=None):
 
     def flush(self):
         pass
+
+
+InitializeClass(DAVResourceMixin)
+InitializeClass(DAVCollectionMixin)
+InitializeClass(FolderDataResource)


