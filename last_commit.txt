Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2016-11-01T23:30:59+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.stringinterp/commit/f2f409334455d068160e2824f64fd2af79e219da

Removed ZopeTestCase.

Files changed:
M CHANGES.rst
M plone/stringinterp/tests/interpolationTests.txt
M plone/stringinterp/tests/moreSubstitutionTests.txt
M plone/stringinterp/tests/substitutionTests.txt
M plone/stringinterp/tests/testDocTests.py
M plone/stringinterp/tests/wrapperTests.txt
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index bc6a2b1..720c647 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Removed ZopeTestCase.  [maurits]
 
 Bug fixes:
 
diff --git a/plone/stringinterp/tests/interpolationTests.txt b/plone/stringinterp/tests/interpolationTests.txt
index 9a73f04..d47d31e 100644
--- a/plone/stringinterp/tests/interpolationTests.txt
+++ b/plone/stringinterp/tests/interpolationTests.txt
@@ -9,11 +9,18 @@ using string substitutions provided by named adapters.
 
 Let's test basic interpolation using the homepage::
 
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
     >>> from plone.stringinterp import Interpolator
-
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> login(app, SITE_OWNER_NAME)
+    >>> oid = portal.invokeFactory('Document', 'front-page')
+    >>> apage = portal[oid]
+    >>> apage.setTitle('Welcome to Plone')
     >>> s = """one two three ${title} ${url} ${nonesuch}"""
 
-    >>> apage = self.portal['front-page']
+    >>> apage = portal['front-page']
 
     >>> Interpolator(apage)(s)
     u'one two three Welcome to Plone http://nohost/plone/front-page ${nonesuch}'
diff --git a/plone/stringinterp/tests/moreSubstitutionTests.txt b/plone/stringinterp/tests/moreSubstitutionTests.txt
index f0d5c9d..c07c5b8 100644
--- a/plone/stringinterp/tests/moreSubstitutionTests.txt
+++ b/plone/stringinterp/tests/moreSubstitutionTests.txt
@@ -11,12 +11,16 @@ Setup
     >>> from zope.component import getAdapter, queryAdapter, queryMultiAdapter
     >>> from plone.app.testing import TEST_USER_ID
     >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
     >>> from plone.app.testing import setRoles
-    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
     >>> from plone.stringinterp.interfaces import IStringSubstitution, IStringSubstitutionInfo
 
-    >>> oid = self.portal.invokeFactory('Folder', 'sandbox')
-    >>> sandbox = self.portal[oid]
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
+    >>> oid = portal.invokeFactory('Folder', 'sandbox')
+    >>> sandbox = portal[oid]
     >>> sandbox.setTitle('Sandbox')
 
     >>> oid = sandbox.invokeFactory('Document', 'a-page')
@@ -40,21 +44,21 @@ Setup
     ... ('userfour', 'User Four', 'user@four.com',  ('Member', 'Editor'), ()),
     ... ('userfive', 'User Five', 'user@five.com',  ('Member', 'Contributor'), ()),
     ... )
-    >>> self.loginAsPortalOwner()
+    >>> login(app, SITE_OWNER_NAME)
     >>> for id, roles in groups:
-    ...     foo = self.portal.portal_groups.addGroup(id, roles=roles)
+    ...     foo = portal.portal_groups.addGroup(id, roles=roles)
     >>> for id, fname, email, roles, groups in users:
-    ...     self.portal.portal_membership.addMember(id, 'secret', roles, [])
-    ...     member = self.portal.portal_membership.getMemberById(id)
+    ...     portal.portal_membership.addMember(id, 'secret', roles, [])
+    ...     member = portal.portal_membership.getMemberById(id)
     ...     member.setMemberProperties({'fullname': fname, 'email': email})
     ...     for groupname in groups:
-    ...         group = self.portal.portal_groups.getGroupById(groupname)
+    ...         group = portal.portal_groups.getGroupById(groupname)
     ...         group.addMember(id)
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'Reviewers').addMember('groupreviewers')
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'groupreviewers').addMember('Reviewers')  # add a group cycle to test we don't have a "RuntimeError: maximum recursion depth exceeded"
-    >>> self.login(TEST_USER_NAME)
+    >>> login(portal, TEST_USER_NAME)
     >>> sandbox_localusers = (
     ... ('userfive', ('Contributor',)),
     ... )
@@ -67,8 +71,8 @@ Setup
     ... )
     >>> for id, localroles in apage_localusers:
     ...     apage.manage_setLocalRoles(id, localroles)
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
 
 
 Negative Cases
@@ -78,11 +82,11 @@ We shouldn't get an adapter where we haven't defined one::
 
 Object with no title
 
-    >>> queryAdapter(self.app, IStringSubstitution, 'Title')
+    >>> queryAdapter(app, IStringSubstitution, 'Title')
 
 Non-existent substitution
 
-    >>> queryAdapter(self.portal, IStringSubstitution, 'NoTitle')
+    >>> queryAdapter(portal, IStringSubstitution, 'NoTitle')
 
 
 
@@ -92,7 +96,7 @@ Listing Available String Substitutions
     We can get a list of all of the available substitutions, ready
     to use in a template::
 
-    >>> subinfo = queryMultiAdapter((self.portal, self.portal.REQUEST), name=u'stringinterp_info')
+    >>> subinfo = queryMultiAdapter((portal, portal.REQUEST), name=u'stringinterp_info')
     >>> subinfo
     <Products.Five...SubstitutionInfo object at ...>
 
@@ -176,10 +180,10 @@ Workflow Aware
 Review State
 
     >>> getAdapter(apage, IStringSubstitution, 'review_state')()
-    u'visible'
+    u'private'
 
     >>> getAdapter(apage, IStringSubstitution, 'review_state_title')()
-    u'Public draft'
+    u'Private'
 
 
 IDublinCore
@@ -240,7 +244,7 @@ Keywords (alias for subject)
 Format
 
     >>> getAdapter(apage, IStringSubstitution, 'format')()
-    u'text/html'
+    u'text/plain'
 
 Language
 
@@ -267,13 +271,12 @@ Everything should be in short local time format
 Creation Date
 
     >>> result = getAdapter(apage, IStringSubstitution, 'created')()
-    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
-    True
 
 Effective Date
 
-    >>> getAdapter(apage, IStringSubstitution, 'effective')()
-    u'???'
+    >>> result = getAdapter(apage, IStringSubstitution, 'effective')()
+    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
+    True
 
 
 Expiration Date
@@ -321,11 +324,11 @@ information, local roles, and group memberships for that user can
 remain even though there's no user object available.  The email
 adapters can handle this case.
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.portal_membership.deleteMembers(
+    >>> login(app, SITE_OWNER_NAME)
+    >>> portal.portal_membership.deleteMembers(
     ...     ('usertwo', 'userthree'), delete_localroles=0)
     ('usertwo', 'userthree')
-    >>> self.login()
+    >>> login(portal, TEST_USER_NAME)
 
     >>> getAdapter(apage, IStringSubstitution, 'owner_emails')()
     u'currentuser@foobar.com'
@@ -358,9 +361,9 @@ IContentish -- info on last change, workflow or version
 
 Inspect a version change (the most recent change)
 
-    >>> self.setRoles( ['Owner',] )
+    >>> setRoles(portal, TEST_USER_ID, ['Owner',])
     >>> from Products.CMFCore.utils import getToolByName
-    >>> pr = getToolByName(self.portal, 'portal_repository', None)
+    >>> pr = getToolByName(portal, 'portal_repository', None)
     >>> pr.save(apage, 'change comment')
 
 Initial revision
@@ -387,8 +390,8 @@ Let's prove that the very expensive fetching of the change data
 is cached. To do so, I'll retract the item and check that the
 last change comment is unchanged.
 
-    >>> self.setRoles( ['Owner','Reviewer'] )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> setRoles(portal, TEST_USER_ID, ['Owner','Reviewer'])
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'publish', comment='publish it!')
 
     >>> getAdapter(apage, IStringSubstitution, 'change_comment')()
@@ -397,11 +400,11 @@ last change comment is unchanged.
 Let's create a new object in order to bypass the caching; we'll
 use it to test a workflow change
 
-    >>> self.portal.invokeFactory('Document', 'target')
+    >>> portal.invokeFactory('Document', 'target')
     'target'
 
-    >>> apage = self.portal['target']
-    >>> wf_tool = self.portal.portal_workflow
+    >>> apage = portal['target']
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'publish', comment='publish it!')
 
 Review state
diff --git a/plone/stringinterp/tests/substitutionTests.txt b/plone/stringinterp/tests/substitutionTests.txt
index e4fb6ca..f4d6eda 100644
--- a/plone/stringinterp/tests/substitutionTests.txt
+++ b/plone/stringinterp/tests/substitutionTests.txt
@@ -11,13 +11,22 @@ Setup
     >>> from zope.component import getAdapter, queryAdapter, queryMultiAdapter
     >>> from plone.app.testing import TEST_USER_ID
     >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
+    >>> from plone.app.testing import setRoles
     >>> from plone.stringinterp.interfaces import IStringSubstitution, IStringSubstitutionInfo
-    >>> apage = self.portal['front-page']
-
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> login(app, SITE_OWNER_NAME)
+    >>> oid = portal.invokeFactory('Document', 'front-page')
+    >>> apage = portal[oid]
+    >>> apage.setTitle('Welcome to Plone')
+    >>> apage.setDescription('Congratulations! You have successfully installed Plone.')
     >>> apage.setSubject( ('keyword one', 'keyword two') )
     >>> apage.setContributors( ('contributor one', 'contributor two') )
     >>> apage.setLanguage( 'en' )
     >>> apage.setRights( 'copyright me' )
+    >>> portal.portal_workflow.doActionFor(apage, 'publish')
 
     >>> from DateTime import DateTime
     >>> expires = DateTime(2009, 9, 9)
@@ -30,26 +39,25 @@ Setup
     ... ('userfour', 'User Four', 'user@four.com',  ('Member', 'Editor'), ()),
     ... ('userfive', 'User Five', 'user@five.com',  ('Member', 'Contributor'), ()),
     ... )
-    >>> self.loginAsPortalOwner()
     >>> for id, roles in groups:
-    ...     foo = self.portal.portal_groups.addGroup(id, roles=roles)
+    ...     foo = portal.portal_groups.addGroup(id, roles=roles)
     >>> for id, fname, email, roles, groups in users:
-    ...     self.portal.portal_membership.addMember(id, 'secret', roles, [])
-    ...     member = self.portal.portal_membership.getMemberById(id)
+    ...     portal.portal_membership.addMember(id, 'secret', roles, [])
+    ...     member = portal.portal_membership.getMemberById(id)
     ...     member.setMemberProperties({'fullname': fname, 'email': email})
     ...     for groupname in groups:
-    ...         group = self.portal.portal_groups.getGroupById(groupname)
+    ...         group = portal.portal_groups.getGroupById(groupname)
     ...         group.addMember(id)
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'Reviewers').addMember('groupreviewers')
-    >>> self.login(TEST_USER_NAME)
+    >>> login(portal, TEST_USER_NAME)
     >>> apage_localusers = (
     ... ('userfour', ('Reviewer',)),
     ... )
     >>> for id, localroles in apage_localusers:
     ...     apage.manage_setLocalRoles(id, localroles)
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
 
 
 Negative Cases
@@ -59,11 +67,11 @@ We shouldn't get an adapter where we haven't defined one::
 
 Object with no title
 
-    >>> queryAdapter(self.app, IStringSubstitution, 'Title')
+    >>> queryAdapter(app, IStringSubstitution, 'Title')
 
 Non-existent substitution
 
-    >>> queryAdapter(self.portal, IStringSubstitution, 'NoTitle')
+    >>> queryAdapter(portal, IStringSubstitution, 'NoTitle')
 
 
 
@@ -73,7 +81,7 @@ Listing Available String Substitutions
     We can get a list of all of the available substitutions, ready
     to use in a template::
 
-    >>> subinfo = queryMultiAdapter((self.portal, self.portal.REQUEST), name=u'stringinterp_info')
+    >>> subinfo = queryMultiAdapter((portal, portal.REQUEST), name=u'stringinterp_info')
     >>> subinfo
     <Products.Five...SubstitutionInfo object at ...>
 
@@ -188,7 +196,7 @@ Keywords (alias for subject)
 Format
 
     >>> getAdapter(apage, IStringSubstitution, 'format')()
-    u'text/html'
+    u'text/plain'
 
 Language
 
@@ -220,8 +228,9 @@ Creation Date
 
 Effective Date
 
-    >>> getAdapter(apage, IStringSubstitution, 'effective')()
-    u'???'
+    >>> result = getAdapter(apage, IStringSubstitution, 'effective')()
+    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
+    True
 
 
 Expiration Date
@@ -269,11 +278,11 @@ information, local roles, and group memberships for that user can
 remain even though there's no user object available.  The email
 adapters can handle this case.
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.portal_membership.deleteMembers(
+    >>> login(app, SITE_OWNER_NAME)
+    >>> portal.portal_membership.deleteMembers(
     ...     ('usertwo', 'userthree'), delete_localroles=0)
     ('usertwo', 'userthree')
-    >>> self.login()
+    >>> login(portal, TEST_USER_NAME)
 
     >>> getAdapter(apage, IStringSubstitution, 'owner_emails')()
     u''
@@ -306,9 +315,9 @@ IContentish -- info on last change, workflow or version
 
 Inspect a version change (the most recent change)
 
-    >>> self.setRoles( ['Owner',] )
+    >>> setRoles(portal, TEST_USER_ID, ['Owner',])
     >>> from Products.CMFCore.utils import getToolByName
-    >>> pr = getToolByName(self.portal, 'portal_repository', None)
+    >>> pr = getToolByName(portal, 'portal_repository', None)
     >>> pr.save(apage, 'change comment')
 
 Initial revision
@@ -335,8 +344,8 @@ Let's prove that the very expensive fetching of the change data
 is cached. To do so, I'll retract the item and check that the
 last change comment is unchanged.
 
-    >>> self.setRoles( ['Owner','Reviewer'] )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> setRoles(portal, TEST_USER_ID, ['Owner','Reviewer'])
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'retract', comment='retract it!')
 
     >>> getAdapter(apage, IStringSubstitution, 'change_comment')()
@@ -345,11 +354,11 @@ last change comment is unchanged.
 Let's create a new object in order to bypass the caching; we'll
 use it to test a workflow change
 
-    >>> self.portal.invokeFactory('Document', 'target')
+    >>> portal.invokeFactory('Document', 'target')
     'target'
 
-    >>> apage = self.portal['target']
-    >>> wf_tool = self.portal.portal_workflow
+    >>> apage = portal['target']
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'publish', comment='publish it!')
 
 Review state
diff --git a/plone/stringinterp/tests/testDocTests.py b/plone/stringinterp/tests/testDocTests.py
index 762ca6d..3e35c1d 100644
--- a/plone/stringinterp/tests/testDocTests.py
+++ b/plone/stringinterp/tests/testDocTests.py
@@ -1,8 +1,11 @@
-import unittest
+from plone.testing import layered
+# from plone.app.testing import PLONE_INTEGRATION_TESTING
+from plone.app.contenttypes.testing import (
+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING
+)
 import doctest
+import unittest
 
-from Testing import ZopeTestCase as ztc
-from plone.app.testing.bbb import PloneTestCase
 
 testfiles = (
     'substitutionTests.txt',
@@ -12,22 +15,11 @@
 )
 
 
-# Use this to avoid having ZopeDocFileSuite pollute the main test class
-class PloneStringinterpTestCase(PloneTestCase):
-    pass
-
-
 def test_suite():
     return unittest.TestSuite([
-
-        ztc.ZopeDocFileSuite(
+        layered(doctest.DocFileSuite(
             f, package='plone.stringinterp.tests',
-            test_class=PloneStringinterpTestCase,
-            optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS)
-
-            for f in testfiles
-        ]
-    )
-
-if __name__ == '__main__':
-    unittest.main(defaultTest='test_suite')
+            optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS),
+                layer=PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING)
+                for f in testfiles
+        ])
diff --git a/plone/stringinterp/tests/wrapperTests.txt b/plone/stringinterp/tests/wrapperTests.txt
index 33d2417..7edf6c9 100644
--- a/plone/stringinterp/tests/wrapperTests.txt
+++ b/plone/stringinterp/tests/wrapperTests.txt
@@ -12,13 +12,22 @@ Setup
     >>> from zope.component import getAdapter, queryAdapter, queryMultiAdapter, getGlobalSiteManager
     >>> from plone.app.testing import TEST_USER_ID
     >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
+    >>> from plone.app.testing import setRoles
     >>> from plone.stringinterp.interfaces import IStringSubstitution, IStringSubstitutionInfo
-    >>> apage = self.portal['front-page']
-
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> login(app, SITE_OWNER_NAME)
+    >>> oid = portal.invokeFactory('Document', 'front-page')
+    >>> apage = portal[oid]
+    >>> apage.setTitle('Welcome to Plone')
+    >>> apage.setDescription('Congratulations! You have successfully installed Plone.')
     >>> apage.setSubject( ('keyword one', 'keyword two') )
     >>> apage.setContributors( ('contributor one', 'contributor two') )
     >>> apage.setLanguage( 'en' )
     >>> apage.setRights( 'copyright me' )
+    >>> portal.portal_workflow.doActionFor(apage, 'publish')
 
     >>> from DateTime import DateTime
     >>> expires = DateTime(2009, 9, 9)
@@ -31,26 +40,26 @@ Setup
     ... ('userfour', 'User Four', 'user@four.com',  ('Member', 'Editor'), ()),
     ... ('userfive', 'User Five', 'user@five.com',  ('Member', 'Contributor'), ()),
     ... )
-    >>> self.loginAsPortalOwner()
+    >>> login(app, SITE_OWNER_NAME)
     >>> for id, roles in groups:
-    ...     foo = self.portal.portal_groups.addGroup(id, roles=roles)
+    ...     foo = portal.portal_groups.addGroup(id, roles=roles)
     >>> for id, fname, email, roles, groups in users:
-    ...     self.portal.portal_membership.addMember(id, 'secret', roles, [])
-    ...     member = self.portal.portal_membership.getMemberById(id)
+    ...     portal.portal_membership.addMember(id, 'secret', roles, [])
+    ...     member = portal.portal_membership.getMemberById(id)
     ...     member.setMemberProperties({'fullname': fname, 'email': email})
     ...     for groupname in groups:
-    ...         group = self.portal.portal_groups.getGroupById(groupname)
+    ...         group = portal.portal_groups.getGroupById(groupname)
     ...         group.addMember(id)
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'Reviewers').addMember('groupreviewers')
-    >>> self.login(TEST_USER_NAME)
+    >>> login(portal, TEST_USER_NAME)
     >>> apage_localusers = (
     ... ('userfour', ('Reviewer',)),
     ... )
     >>> for id, localroles in apage_localusers:
     ...     apage.manage_setLocalRoles(id, localroles)
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
 
 Context Wrapper
 ---------------
@@ -107,11 +116,11 @@ We shouldn't get an adapter where we haven't defined one::
 
 Object with no title
 
-    >>> queryAdapter(self.app, IStringSubstitution, 'Title')
+    >>> queryAdapter(app, IStringSubstitution, 'Title')
 
 Non-existent substitution
 
-    >>> queryAdapter(self.portal, IStringSubstitution, 'NoTitle')
+    >>> queryAdapter(portal, IStringSubstitution, 'NoTitle')
 
 
 
@@ -121,7 +130,7 @@ Listing Available String Substitutions
     We can get a list of all of the available substitutions, ready
     to use in a template::
 
-    >>> subinfo = queryMultiAdapter((self.portal, self.portal.REQUEST), name=u'stringinterp_info')
+    >>> subinfo = queryMultiAdapter((portal, portal.REQUEST), name=u'stringinterp_info')
     >>> subinfo
     <Products.Five...SubstitutionInfo object at ...>
 
@@ -236,7 +245,7 @@ Keywords (alias for subject)
 Format
 
     >>> getAdapter(apage, IStringSubstitution, 'format')()
-    u'text/html'
+    u'text/plain'
 
 Language
 
@@ -268,8 +277,9 @@ Creation Date
 
 Effective Date
 
-    >>> getAdapter(apage, IStringSubstitution, 'effective')()
-    u'???'
+    >>> result = getAdapter(apage, IStringSubstitution, 'effective')()
+    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
+    True
 
 
 Expiration Date
@@ -317,11 +327,11 @@ information, local roles, and group memberships for that user can
 remain even though there's no user object available.  The email
 adapters can handle this case.
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.portal_membership.deleteMembers(
+    >>> login(app, SITE_OWNER_NAME)
+    >>> portal.portal_membership.deleteMembers(
     ...     ('usertwo', 'userthree'), delete_localroles=0)
     ('usertwo', 'userthree')
-    >>> self.login()
+    >>> login(portal, TEST_USER_NAME)
 
     >>> getAdapter(apage, IStringSubstitution, 'owner_emails')()
     u''
@@ -354,9 +364,9 @@ IContentish -- info on last change, workflow or version
 
 Inspect a version change (the most recent change)
 
-    >>> self.setRoles( ['Owner',] )
+    >>> setRoles(portal, TEST_USER_ID, ['Owner',])
     >>> from Products.CMFCore.utils import getToolByName
-    >>> pr = getToolByName(self.portal, 'portal_repository', None)
+    >>> pr = getToolByName(portal, 'portal_repository', None)
     >>> pr.save(apage.context, 'change comment')
 
 Initial revision
@@ -383,8 +393,8 @@ Let's prove that the very expensive fetching of the change data
 is cached. To do so, I'll retract the item and check that the
 last change comment is unchanged.
 
-    >>> self.setRoles( ['Owner','Reviewer'] )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> setRoles(portal, TEST_USER_ID, ['Owner','Reviewer'])
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage.context, 'retract', comment='retract it!')
 
     >>> getAdapter(apage, IStringSubstitution, 'change_comment')()
@@ -393,16 +403,16 @@ last change comment is unchanged.
 Let's create a new object in order to bypass the caching; we'll
 use it to test a workflow change
 
-    >>> self.portal.invokeFactory('Document', 'target')
+    >>> portal.invokeFactory('Document', 'target')
     'target'
 
-    >>> apage = self.portal['target']
+    >>> apage = portal['target']
     >>> apage = IContextWrapper(apage)(
     ...         message=u"A cool message here",
     ...         items=['a', 'b', 'c'],
     ...         langs={'en': "English", "fr": "French"}
     ... )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage.context, 'publish', comment='publish it!')
 
 Review state
diff --git a/setup.py b/setup.py
index 990a813..e7339d2 100644
--- a/setup.py
+++ b/setup.py
@@ -32,7 +32,15 @@
         'setuptools',
         'Products.CMFCore',
         'zope.i18n',
+        'plone.memoize',
     ],
+    extras_require={
+        'test': [
+            'plone.app.contenttypes',
+            'plone.app.testing',
+            'plone.testing',
+        ],
+    },
     entry_points="""
         [z3c.autoinclude.plugin]
         target = plone


Repository: plone.stringinterp


Branch: refs/heads/master
Date: 2016-11-03T00:23:59+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.stringinterp/commit/4901a1eadaf713a318862d0a8caf375492cb9dee

Merge pull request #11 from plone/remove-zopetestcase

Removed ZopeTestCase.

Files changed:
M CHANGES.rst
M plone/stringinterp/tests/interpolationTests.txt
M plone/stringinterp/tests/moreSubstitutionTests.txt
M plone/stringinterp/tests/substitutionTests.txt
M plone/stringinterp/tests/testDocTests.py
M plone/stringinterp/tests/wrapperTests.txt
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index bc6a2b1..720c647 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Removed ZopeTestCase.  [maurits]
 
 Bug fixes:
 
diff --git a/plone/stringinterp/tests/interpolationTests.txt b/plone/stringinterp/tests/interpolationTests.txt
index 9a73f04..d47d31e 100644
--- a/plone/stringinterp/tests/interpolationTests.txt
+++ b/plone/stringinterp/tests/interpolationTests.txt
@@ -9,11 +9,18 @@ using string substitutions provided by named adapters.
 
 Let's test basic interpolation using the homepage::
 
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
     >>> from plone.stringinterp import Interpolator
-
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> login(app, SITE_OWNER_NAME)
+    >>> oid = portal.invokeFactory('Document', 'front-page')
+    >>> apage = portal[oid]
+    >>> apage.setTitle('Welcome to Plone')
     >>> s = """one two three ${title} ${url} ${nonesuch}"""
 
-    >>> apage = self.portal['front-page']
+    >>> apage = portal['front-page']
 
     >>> Interpolator(apage)(s)
     u'one two three Welcome to Plone http://nohost/plone/front-page ${nonesuch}'
diff --git a/plone/stringinterp/tests/moreSubstitutionTests.txt b/plone/stringinterp/tests/moreSubstitutionTests.txt
index f0d5c9d..c07c5b8 100644
--- a/plone/stringinterp/tests/moreSubstitutionTests.txt
+++ b/plone/stringinterp/tests/moreSubstitutionTests.txt
@@ -11,12 +11,16 @@ Setup
     >>> from zope.component import getAdapter, queryAdapter, queryMultiAdapter
     >>> from plone.app.testing import TEST_USER_ID
     >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
     >>> from plone.app.testing import setRoles
-    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
     >>> from plone.stringinterp.interfaces import IStringSubstitution, IStringSubstitutionInfo
 
-    >>> oid = self.portal.invokeFactory('Folder', 'sandbox')
-    >>> sandbox = self.portal[oid]
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> setRoles(portal, TEST_USER_ID, ['Manager'])
+    >>> oid = portal.invokeFactory('Folder', 'sandbox')
+    >>> sandbox = portal[oid]
     >>> sandbox.setTitle('Sandbox')
 
     >>> oid = sandbox.invokeFactory('Document', 'a-page')
@@ -40,21 +44,21 @@ Setup
     ... ('userfour', 'User Four', 'user@four.com',  ('Member', 'Editor'), ()),
     ... ('userfive', 'User Five', 'user@five.com',  ('Member', 'Contributor'), ()),
     ... )
-    >>> self.loginAsPortalOwner()
+    >>> login(app, SITE_OWNER_NAME)
     >>> for id, roles in groups:
-    ...     foo = self.portal.portal_groups.addGroup(id, roles=roles)
+    ...     foo = portal.portal_groups.addGroup(id, roles=roles)
     >>> for id, fname, email, roles, groups in users:
-    ...     self.portal.portal_membership.addMember(id, 'secret', roles, [])
-    ...     member = self.portal.portal_membership.getMemberById(id)
+    ...     portal.portal_membership.addMember(id, 'secret', roles, [])
+    ...     member = portal.portal_membership.getMemberById(id)
     ...     member.setMemberProperties({'fullname': fname, 'email': email})
     ...     for groupname in groups:
-    ...         group = self.portal.portal_groups.getGroupById(groupname)
+    ...         group = portal.portal_groups.getGroupById(groupname)
     ...         group.addMember(id)
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'Reviewers').addMember('groupreviewers')
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'groupreviewers').addMember('Reviewers')  # add a group cycle to test we don't have a "RuntimeError: maximum recursion depth exceeded"
-    >>> self.login(TEST_USER_NAME)
+    >>> login(portal, TEST_USER_NAME)
     >>> sandbox_localusers = (
     ... ('userfive', ('Contributor',)),
     ... )
@@ -67,8 +71,8 @@ Setup
     ... )
     >>> for id, localroles in apage_localusers:
     ...     apage.manage_setLocalRoles(id, localroles)
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
 
 
 Negative Cases
@@ -78,11 +82,11 @@ We shouldn't get an adapter where we haven't defined one::
 
 Object with no title
 
-    >>> queryAdapter(self.app, IStringSubstitution, 'Title')
+    >>> queryAdapter(app, IStringSubstitution, 'Title')
 
 Non-existent substitution
 
-    >>> queryAdapter(self.portal, IStringSubstitution, 'NoTitle')
+    >>> queryAdapter(portal, IStringSubstitution, 'NoTitle')
 
 
 
@@ -92,7 +96,7 @@ Listing Available String Substitutions
     We can get a list of all of the available substitutions, ready
     to use in a template::
 
-    >>> subinfo = queryMultiAdapter((self.portal, self.portal.REQUEST), name=u'stringinterp_info')
+    >>> subinfo = queryMultiAdapter((portal, portal.REQUEST), name=u'stringinterp_info')
     >>> subinfo
     <Products.Five...SubstitutionInfo object at ...>
 
@@ -176,10 +180,10 @@ Workflow Aware
 Review State
 
     >>> getAdapter(apage, IStringSubstitution, 'review_state')()
-    u'visible'
+    u'private'
 
     >>> getAdapter(apage, IStringSubstitution, 'review_state_title')()
-    u'Public draft'
+    u'Private'
 
 
 IDublinCore
@@ -240,7 +244,7 @@ Keywords (alias for subject)
 Format
 
     >>> getAdapter(apage, IStringSubstitution, 'format')()
-    u'text/html'
+    u'text/plain'
 
 Language
 
@@ -267,13 +271,12 @@ Everything should be in short local time format
 Creation Date
 
     >>> result = getAdapter(apage, IStringSubstitution, 'created')()
-    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
-    True
 
 Effective Date
 
-    >>> getAdapter(apage, IStringSubstitution, 'effective')()
-    u'???'
+    >>> result = getAdapter(apage, IStringSubstitution, 'effective')()
+    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
+    True
 
 
 Expiration Date
@@ -321,11 +324,11 @@ information, local roles, and group memberships for that user can
 remain even though there's no user object available.  The email
 adapters can handle this case.
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.portal_membership.deleteMembers(
+    >>> login(app, SITE_OWNER_NAME)
+    >>> portal.portal_membership.deleteMembers(
     ...     ('usertwo', 'userthree'), delete_localroles=0)
     ('usertwo', 'userthree')
-    >>> self.login()
+    >>> login(portal, TEST_USER_NAME)
 
     >>> getAdapter(apage, IStringSubstitution, 'owner_emails')()
     u'currentuser@foobar.com'
@@ -358,9 +361,9 @@ IContentish -- info on last change, workflow or version
 
 Inspect a version change (the most recent change)
 
-    >>> self.setRoles( ['Owner',] )
+    >>> setRoles(portal, TEST_USER_ID, ['Owner',])
     >>> from Products.CMFCore.utils import getToolByName
-    >>> pr = getToolByName(self.portal, 'portal_repository', None)
+    >>> pr = getToolByName(portal, 'portal_repository', None)
     >>> pr.save(apage, 'change comment')
 
 Initial revision
@@ -387,8 +390,8 @@ Let's prove that the very expensive fetching of the change data
 is cached. To do so, I'll retract the item and check that the
 last change comment is unchanged.
 
-    >>> self.setRoles( ['Owner','Reviewer'] )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> setRoles(portal, TEST_USER_ID, ['Owner','Reviewer'])
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'publish', comment='publish it!')
 
     >>> getAdapter(apage, IStringSubstitution, 'change_comment')()
@@ -397,11 +400,11 @@ last change comment is unchanged.
 Let's create a new object in order to bypass the caching; we'll
 use it to test a workflow change
 
-    >>> self.portal.invokeFactory('Document', 'target')
+    >>> portal.invokeFactory('Document', 'target')
     'target'
 
-    >>> apage = self.portal['target']
-    >>> wf_tool = self.portal.portal_workflow
+    >>> apage = portal['target']
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'publish', comment='publish it!')
 
 Review state
diff --git a/plone/stringinterp/tests/substitutionTests.txt b/plone/stringinterp/tests/substitutionTests.txt
index e4fb6ca..f4d6eda 100644
--- a/plone/stringinterp/tests/substitutionTests.txt
+++ b/plone/stringinterp/tests/substitutionTests.txt
@@ -11,13 +11,22 @@ Setup
     >>> from zope.component import getAdapter, queryAdapter, queryMultiAdapter
     >>> from plone.app.testing import TEST_USER_ID
     >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
+    >>> from plone.app.testing import setRoles
     >>> from plone.stringinterp.interfaces import IStringSubstitution, IStringSubstitutionInfo
-    >>> apage = self.portal['front-page']
-
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> login(app, SITE_OWNER_NAME)
+    >>> oid = portal.invokeFactory('Document', 'front-page')
+    >>> apage = portal[oid]
+    >>> apage.setTitle('Welcome to Plone')
+    >>> apage.setDescription('Congratulations! You have successfully installed Plone.')
     >>> apage.setSubject( ('keyword one', 'keyword two') )
     >>> apage.setContributors( ('contributor one', 'contributor two') )
     >>> apage.setLanguage( 'en' )
     >>> apage.setRights( 'copyright me' )
+    >>> portal.portal_workflow.doActionFor(apage, 'publish')
 
     >>> from DateTime import DateTime
     >>> expires = DateTime(2009, 9, 9)
@@ -30,26 +39,25 @@ Setup
     ... ('userfour', 'User Four', 'user@four.com',  ('Member', 'Editor'), ()),
     ... ('userfive', 'User Five', 'user@five.com',  ('Member', 'Contributor'), ()),
     ... )
-    >>> self.loginAsPortalOwner()
     >>> for id, roles in groups:
-    ...     foo = self.portal.portal_groups.addGroup(id, roles=roles)
+    ...     foo = portal.portal_groups.addGroup(id, roles=roles)
     >>> for id, fname, email, roles, groups in users:
-    ...     self.portal.portal_membership.addMember(id, 'secret', roles, [])
-    ...     member = self.portal.portal_membership.getMemberById(id)
+    ...     portal.portal_membership.addMember(id, 'secret', roles, [])
+    ...     member = portal.portal_membership.getMemberById(id)
     ...     member.setMemberProperties({'fullname': fname, 'email': email})
     ...     for groupname in groups:
-    ...         group = self.portal.portal_groups.getGroupById(groupname)
+    ...         group = portal.portal_groups.getGroupById(groupname)
     ...         group.addMember(id)
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'Reviewers').addMember('groupreviewers')
-    >>> self.login(TEST_USER_NAME)
+    >>> login(portal, TEST_USER_NAME)
     >>> apage_localusers = (
     ... ('userfour', ('Reviewer',)),
     ... )
     >>> for id, localroles in apage_localusers:
     ...     apage.manage_setLocalRoles(id, localroles)
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
 
 
 Negative Cases
@@ -59,11 +67,11 @@ We shouldn't get an adapter where we haven't defined one::
 
 Object with no title
 
-    >>> queryAdapter(self.app, IStringSubstitution, 'Title')
+    >>> queryAdapter(app, IStringSubstitution, 'Title')
 
 Non-existent substitution
 
-    >>> queryAdapter(self.portal, IStringSubstitution, 'NoTitle')
+    >>> queryAdapter(portal, IStringSubstitution, 'NoTitle')
 
 
 
@@ -73,7 +81,7 @@ Listing Available String Substitutions
     We can get a list of all of the available substitutions, ready
     to use in a template::
 
-    >>> subinfo = queryMultiAdapter((self.portal, self.portal.REQUEST), name=u'stringinterp_info')
+    >>> subinfo = queryMultiAdapter((portal, portal.REQUEST), name=u'stringinterp_info')
     >>> subinfo
     <Products.Five...SubstitutionInfo object at ...>
 
@@ -188,7 +196,7 @@ Keywords (alias for subject)
 Format
 
     >>> getAdapter(apage, IStringSubstitution, 'format')()
-    u'text/html'
+    u'text/plain'
 
 Language
 
@@ -220,8 +228,9 @@ Creation Date
 
 Effective Date
 
-    >>> getAdapter(apage, IStringSubstitution, 'effective')()
-    u'???'
+    >>> result = getAdapter(apage, IStringSubstitution, 'effective')()
+    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
+    True
 
 
 Expiration Date
@@ -269,11 +278,11 @@ information, local roles, and group memberships for that user can
 remain even though there's no user object available.  The email
 adapters can handle this case.
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.portal_membership.deleteMembers(
+    >>> login(app, SITE_OWNER_NAME)
+    >>> portal.portal_membership.deleteMembers(
     ...     ('usertwo', 'userthree'), delete_localroles=0)
     ('usertwo', 'userthree')
-    >>> self.login()
+    >>> login(portal, TEST_USER_NAME)
 
     >>> getAdapter(apage, IStringSubstitution, 'owner_emails')()
     u''
@@ -306,9 +315,9 @@ IContentish -- info on last change, workflow or version
 
 Inspect a version change (the most recent change)
 
-    >>> self.setRoles( ['Owner',] )
+    >>> setRoles(portal, TEST_USER_ID, ['Owner',])
     >>> from Products.CMFCore.utils import getToolByName
-    >>> pr = getToolByName(self.portal, 'portal_repository', None)
+    >>> pr = getToolByName(portal, 'portal_repository', None)
     >>> pr.save(apage, 'change comment')
 
 Initial revision
@@ -335,8 +344,8 @@ Let's prove that the very expensive fetching of the change data
 is cached. To do so, I'll retract the item and check that the
 last change comment is unchanged.
 
-    >>> self.setRoles( ['Owner','Reviewer'] )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> setRoles(portal, TEST_USER_ID, ['Owner','Reviewer'])
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'retract', comment='retract it!')
 
     >>> getAdapter(apage, IStringSubstitution, 'change_comment')()
@@ -345,11 +354,11 @@ last change comment is unchanged.
 Let's create a new object in order to bypass the caching; we'll
 use it to test a workflow change
 
-    >>> self.portal.invokeFactory('Document', 'target')
+    >>> portal.invokeFactory('Document', 'target')
     'target'
 
-    >>> apage = self.portal['target']
-    >>> wf_tool = self.portal.portal_workflow
+    >>> apage = portal['target']
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage, 'publish', comment='publish it!')
 
 Review state
diff --git a/plone/stringinterp/tests/testDocTests.py b/plone/stringinterp/tests/testDocTests.py
index 762ca6d..3e35c1d 100644
--- a/plone/stringinterp/tests/testDocTests.py
+++ b/plone/stringinterp/tests/testDocTests.py
@@ -1,8 +1,11 @@
-import unittest
+from plone.testing import layered
+# from plone.app.testing import PLONE_INTEGRATION_TESTING
+from plone.app.contenttypes.testing import (
+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING
+)
 import doctest
+import unittest
 
-from Testing import ZopeTestCase as ztc
-from plone.app.testing.bbb import PloneTestCase
 
 testfiles = (
     'substitutionTests.txt',
@@ -12,22 +15,11 @@
 )
 
 
-# Use this to avoid having ZopeDocFileSuite pollute the main test class
-class PloneStringinterpTestCase(PloneTestCase):
-    pass
-
-
 def test_suite():
     return unittest.TestSuite([
-
-        ztc.ZopeDocFileSuite(
+        layered(doctest.DocFileSuite(
             f, package='plone.stringinterp.tests',
-            test_class=PloneStringinterpTestCase,
-            optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS)
-
-            for f in testfiles
-        ]
-    )
-
-if __name__ == '__main__':
-    unittest.main(defaultTest='test_suite')
+            optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS),
+                layer=PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING)
+                for f in testfiles
+        ])
diff --git a/plone/stringinterp/tests/wrapperTests.txt b/plone/stringinterp/tests/wrapperTests.txt
index 33d2417..7edf6c9 100644
--- a/plone/stringinterp/tests/wrapperTests.txt
+++ b/plone/stringinterp/tests/wrapperTests.txt
@@ -12,13 +12,22 @@ Setup
     >>> from zope.component import getAdapter, queryAdapter, queryMultiAdapter, getGlobalSiteManager
     >>> from plone.app.testing import TEST_USER_ID
     >>> from plone.app.testing import TEST_USER_NAME
+    >>> from plone.app.testing import SITE_OWNER_NAME
+    >>> from plone.app.testing import login
+    >>> from plone.app.testing import setRoles
     >>> from plone.stringinterp.interfaces import IStringSubstitution, IStringSubstitutionInfo
-    >>> apage = self.portal['front-page']
-
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> login(app, SITE_OWNER_NAME)
+    >>> oid = portal.invokeFactory('Document', 'front-page')
+    >>> apage = portal[oid]
+    >>> apage.setTitle('Welcome to Plone')
+    >>> apage.setDescription('Congratulations! You have successfully installed Plone.')
     >>> apage.setSubject( ('keyword one', 'keyword two') )
     >>> apage.setContributors( ('contributor one', 'contributor two') )
     >>> apage.setLanguage( 'en' )
     >>> apage.setRights( 'copyright me' )
+    >>> portal.portal_workflow.doActionFor(apage, 'publish')
 
     >>> from DateTime import DateTime
     >>> expires = DateTime(2009, 9, 9)
@@ -31,26 +40,26 @@ Setup
     ... ('userfour', 'User Four', 'user@four.com',  ('Member', 'Editor'), ()),
     ... ('userfive', 'User Five', 'user@five.com',  ('Member', 'Contributor'), ()),
     ... )
-    >>> self.loginAsPortalOwner()
+    >>> login(app, SITE_OWNER_NAME)
     >>> for id, roles in groups:
-    ...     foo = self.portal.portal_groups.addGroup(id, roles=roles)
+    ...     foo = portal.portal_groups.addGroup(id, roles=roles)
     >>> for id, fname, email, roles, groups in users:
-    ...     self.portal.portal_membership.addMember(id, 'secret', roles, [])
-    ...     member = self.portal.portal_membership.getMemberById(id)
+    ...     portal.portal_membership.addMember(id, 'secret', roles, [])
+    ...     member = portal.portal_membership.getMemberById(id)
     ...     member.setMemberProperties({'fullname': fname, 'email': email})
     ...     for groupname in groups:
-    ...         group = self.portal.portal_groups.getGroupById(groupname)
+    ...         group = portal.portal_groups.getGroupById(groupname)
     ...         group.addMember(id)
-    >>> self.portal.portal_groups.getGroupById(
+    >>> portal.portal_groups.getGroupById(
     ...     'Reviewers').addMember('groupreviewers')
-    >>> self.login(TEST_USER_NAME)
+    >>> login(portal, TEST_USER_NAME)
     >>> apage_localusers = (
     ... ('userfour', ('Reviewer',)),
     ... )
     >>> for id, localroles in apage_localusers:
     ...     apage.manage_setLocalRoles(id, localroles)
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
-    >>> self.portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(email='currentuser@foobar.com')
+    >>> portal.portal_membership.getAuthenticatedMember().setProperties(fullname='Current User')
 
 Context Wrapper
 ---------------
@@ -107,11 +116,11 @@ We shouldn't get an adapter where we haven't defined one::
 
 Object with no title
 
-    >>> queryAdapter(self.app, IStringSubstitution, 'Title')
+    >>> queryAdapter(app, IStringSubstitution, 'Title')
 
 Non-existent substitution
 
-    >>> queryAdapter(self.portal, IStringSubstitution, 'NoTitle')
+    >>> queryAdapter(portal, IStringSubstitution, 'NoTitle')
 
 
 
@@ -121,7 +130,7 @@ Listing Available String Substitutions
     We can get a list of all of the available substitutions, ready
     to use in a template::
 
-    >>> subinfo = queryMultiAdapter((self.portal, self.portal.REQUEST), name=u'stringinterp_info')
+    >>> subinfo = queryMultiAdapter((portal, portal.REQUEST), name=u'stringinterp_info')
     >>> subinfo
     <Products.Five...SubstitutionInfo object at ...>
 
@@ -236,7 +245,7 @@ Keywords (alias for subject)
 Format
 
     >>> getAdapter(apage, IStringSubstitution, 'format')()
-    u'text/html'
+    u'text/plain'
 
 Language
 
@@ -268,8 +277,9 @@ Creation Date
 
 Effective Date
 
-    >>> getAdapter(apage, IStringSubstitution, 'effective')()
-    u'???'
+    >>> result = getAdapter(apage, IStringSubstitution, 'effective')()
+    >>> re.match(r'... \d\d, \d\d\d\d \d\d:\d\d .M$', result) is not None
+    True
 
 
 Expiration Date
@@ -317,11 +327,11 @@ information, local roles, and group memberships for that user can
 remain even though there's no user object available.  The email
 adapters can handle this case.
 
-    >>> self.loginAsPortalOwner()
-    >>> self.portal.portal_membership.deleteMembers(
+    >>> login(app, SITE_OWNER_NAME)
+    >>> portal.portal_membership.deleteMembers(
     ...     ('usertwo', 'userthree'), delete_localroles=0)
     ('usertwo', 'userthree')
-    >>> self.login()
+    >>> login(portal, TEST_USER_NAME)
 
     >>> getAdapter(apage, IStringSubstitution, 'owner_emails')()
     u''
@@ -354,9 +364,9 @@ IContentish -- info on last change, workflow or version
 
 Inspect a version change (the most recent change)
 
-    >>> self.setRoles( ['Owner',] )
+    >>> setRoles(portal, TEST_USER_ID, ['Owner',])
     >>> from Products.CMFCore.utils import getToolByName
-    >>> pr = getToolByName(self.portal, 'portal_repository', None)
+    >>> pr = getToolByName(portal, 'portal_repository', None)
     >>> pr.save(apage.context, 'change comment')
 
 Initial revision
@@ -383,8 +393,8 @@ Let's prove that the very expensive fetching of the change data
 is cached. To do so, I'll retract the item and check that the
 last change comment is unchanged.
 
-    >>> self.setRoles( ['Owner','Reviewer'] )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> setRoles(portal, TEST_USER_ID, ['Owner','Reviewer'])
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage.context, 'retract', comment='retract it!')
 
     >>> getAdapter(apage, IStringSubstitution, 'change_comment')()
@@ -393,16 +403,16 @@ last change comment is unchanged.
 Let's create a new object in order to bypass the caching; we'll
 use it to test a workflow change
 
-    >>> self.portal.invokeFactory('Document', 'target')
+    >>> portal.invokeFactory('Document', 'target')
     'target'
 
-    >>> apage = self.portal['target']
+    >>> apage = portal['target']
     >>> apage = IContextWrapper(apage)(
     ...         message=u"A cool message here",
     ...         items=['a', 'b', 'c'],
     ...         langs={'en': "English", "fr": "French"}
     ... )
-    >>> wf_tool = self.portal.portal_workflow
+    >>> wf_tool = portal.portal_workflow
     >>> wf_tool.doActionFor(apage.context, 'publish', comment='publish it!')
 
 Review state
diff --git a/setup.py b/setup.py
index 990a813..e7339d2 100644
--- a/setup.py
+++ b/setup.py
@@ -32,7 +32,15 @@
         'setuptools',
         'Products.CMFCore',
         'zope.i18n',
+        'plone.memoize',
     ],
+    extras_require={
+        'test': [
+            'plone.app.contenttypes',
+            'plone.app.testing',
+            'plone.testing',
+        ],
+    },
     entry_points="""
         [z3c.autoinclude.plugin]
         target = plone


