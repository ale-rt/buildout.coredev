Repository: plone.registry


Branch: refs/heads/master
Date: 2016-06-08T12:50:59+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.registry/commit/458570b6d643ae143b3eaf9f952cebaed4f5a598

format interfaces to increase readability

Files changed:
M plone/registry/interfaces.py

diff --git a/plone/registry/interfaces.py b/plone/registry/interfaces.py
index 4877b22..743811d 100644
--- a/plone/registry/interfaces.py
+++ b/plone/registry/interfaces.py
@@ -1,15 +1,16 @@
+# -*- coding: utf-8 -*-
+from zope import schema
 from zope.interface import Interface
 from zope.interface.interfaces import IInterface
-
-from zope import schema
-
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import InvalidDottedName
 
+
 class InvalidRegistryKey(InvalidDottedName):
     """A registry key is a dotted name with up to one '/'.
     """
 
+
 class IPersistentField(IField):
     """A field that can be persistent along with a record.
 
@@ -22,8 +23,15 @@ class IPersistentField(IField):
     not actual object references.
     """
 
-    interfaceName = schema.DottedName(title=u"Dotted name to an interface the field was constructed from", required=False)
-    fieldName = schema.ASCIILine(title=u"Name of the field in the original interface, if any", required=False)
+    interfaceName = schema.DottedName(
+        title=u'Dotted name to an interface the field was constructed from',
+        required=False
+    )
+    fieldName = schema.ASCIILine(
+        title=u'Name of the field in the original interface, if any',
+        required=False
+    )
+
 
 class IFieldRef(Interface):
     """A reference to another field.
@@ -34,8 +42,14 @@ class IFieldRef(Interface):
     Note that all attributes are read-only.
     """
 
-    recordName = schema.DottedName(title=u"Name of the record containing the reference field")
-    originalField = schema.Object(title=u"Referenced field", schema=IField)
+    recordName = schema.DottedName(
+        title=u'Name of the record containing the reference field'
+    )
+    originalField = schema.Object(
+        title=u'Referenced field',
+        schema=IField
+    )
+
 
 class IRecord(Interface):
     """A record stored in the registry.
@@ -49,34 +63,46 @@ class IRecord(Interface):
     the registry are always bound.
     """
 
-    field = schema.Object(title=u"A field describing this record",
-                          schema=IPersistentField)
+    field = schema.Object(
+        title=u'A field describing this record',
+        schema=IPersistentField
+    )
+
+    value = schema.Field(
+        title=u'The value of this record',
+        description=u'Must be valid according to the record\'s field'
+    )
 
-    value = schema.Field(title=u"The value of this record",
-                         description=u"Must be valid according to the record's field")
 
 class IRecordEvent(Interface):
     """Base interface for record level events
     """
 
-    record = schema.Object(title=u"The record that was added.",
-                           description=u"Both __name__ and __parent__ will be set before the event is fired",
-                           schema=IRecord)
+    record = schema.Object(
+        title=u'The record that was added.',
+        description=u'Both __name__ and __parent__ will be set before the '
+                    u'event is fired',
+        schema=IRecord
+    )
+
 
 class IRecordAddedEvent(IRecordEvent):
     """Event fired when a record is added to a registry.
     """
 
+
 class IRecordRemovedEvent(IRecordEvent):
     """Event fired when a record is removed from a registry.
     """
 
+
 class IRecordModifiedEvent(IRecordEvent):
     """Event fired when a record's value is modified.
     """
 
-    oldValue = schema.Field(title=u"The record's previous value")
-    newValue = schema.Field(title=u"The record's new value")
+    oldValue = schema.Field(title=u'The record\'s previous value')
+    newValue = schema.Field(title=u'The record\'s new value')
+
 
 class IInterfaceAwareRecord(Interface):
     """A record will be marked with this interface if it knows which
@@ -85,17 +111,39 @@ class IInterfaceAwareRecord(Interface):
 
     interfaceName = schema.DottedName(title=u"Dotted name to interface")
 
-    interface = schema.Object(title=u"Interface that provided the record",
-                              description=u"May be None if the interface is no longer available",
-                              schema=IInterface,
-                              readonly=True)
+    interface = schema.Object(
+        title=u'Interface that provided the record',
+        description=u'May be None if the interface is no longer available',
+        schema=IInterface,
+        readonly=True
+    )
+
+    fieldName = schema.ASCIILine(
+        title=u'Name of the field in the original interface'
+    )
 
-    fieldName = schema.ASCIILine(title=u"Name of the field in the original interface")
 
 class IRegistry(Interface):
     """The configuration registry
     """
 
+    records = schema.Dict(
+        title=u'The records of the registry',
+        key_type=schema.DottedName(
+            title=u'Name of the record',
+            description=u'By convention, this should include the '
+                        u'package name and optionally an interface '
+                        u'named, if the record can be described by a '
+                        u'field in an interface (see also '
+                        u'registerInterface() below), e.g. '
+                        u'my.package.interfaces.IMySettings.somefield.',
+        ),
+        value_type=schema.Object(
+            title=u'The record for this name',
+            schema=IRecord,
+        ),
+    )
+
     def __getitem__(key):
         """Get the value under the given key. A record must have been
         installed for this key for this to be valid. Otherwise, a KeyError is
@@ -107,7 +155,6 @@ def get(key, default=None):
         exist, return the given default.
         """
 
-
     def __setitem__(key, value):
         """Set the value under the given key. A record must have been
         installed for this key for this to be valid. Otherwise, a KeyError is
@@ -119,23 +166,6 @@ def __contains__(key):
         """Determine if the registry contains a record for the given key.
         """
 
-    records = schema.Dict(
-            title=u"The records of the registry",
-            key_type=schema.DottedName(
-                    title=u"Name of the record",
-                    description=u"By convention, this should include the "
-                                 "package name and optionally an interface "
-                                 "named, if the record can be described by a "
-                                 "field in an interface (see also "
-                                 "registerInterface() below), e.g. "
-                                 "my.package.interfaces.IMySettings.somefield.",
-                ),
-            value_type=schema.Object(
-                    title=u"The record for this name",
-                    schema=IRecord,
-                ),
-        )
-
     def forInterface(interface, check=True, omit=(), prefix=None):
         """Get an IRecordsProxy for the given interface. If `check` is True,
         an error will be raised if one or more fields in the interface does
@@ -151,6 +181,7 @@ def registerInterface(interface, omit=(), prefix=None):
         be ignored. Supply an alternative identifier with `prefix`.
         """
 
+
 class IRecordsProxy(Interface):
     """This object is returned by IRegistry.forInterface(). It will be
     made to provide the relevant interface, i.e. it will have the
@@ -158,15 +189,21 @@ class IRecordsProxy(Interface):
     from or written to the underlying IRegistry.
     """
 
-    __schema__ = schema.Object(title=u"Interface providing records",
-                               schema=IInterface,
-                               readonly=True)
-
-    __registry__ = schema.Object(title=u"Registry where records will be looked up",
-                                 schema=IRegistry,
-                                 readonly=True)
-
-    __omitted__ = schema.Tuple(title=u"Fields that are not stored in the registry",
-                               description=u"If any of these are accessed, you will get an AttributeError",
-                               value_type=schema.ASCIILine(title=u"Fieldname"),
-                               readonly=True)
+    __schema__ = schema.Object(
+        title=u'Interface providing records',
+        schema=IInterface,
+        readonly=True
+    )
+
+    __registry__ = schema.Object(
+        title=u'Registry where records will be looked up',
+        schema=IRegistry,
+        readonly=True)
+
+    __omitted__ = schema.Tuple(
+        title=u'Fields that are not stored in the registry',
+        description=u'If any of these are accessed, you will get an '
+                    u'AttributeError',
+        value_type=schema.ASCIILine(title=u'Fieldname'),
+        readonly=True
+    )


Repository: plone.registry


Branch: refs/heads/master
Date: 2016-06-08T12:52:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.registry/commit/1c6a4887892185dd18eed79930f4b2c0075d64bd

autopep8 -ir

Files changed:
M plone/registry/field.py
M plone/registry/recordsproxy.py
M setup.py

diff --git a/plone/registry/field.py b/plone/registry/field.py
index 2150d31..c2f8bf7 100644
--- a/plone/registry/field.py
+++ b/plone/registry/field.py
@@ -19,11 +19,11 @@
 
 def is_primitive(value):
     return value is None or \
-            isinstance(
-                value,
-                (int, long, bool, str, unicode, tuple,
-                 list, set, frozenset, dict, float)
-            )
+        isinstance(
+            value,
+            (int, long, bool, str, unicode, tuple,
+             list, set, frozenset, dict, float)
+        )
 
 
 class DisallowedProperty(object):
@@ -227,7 +227,7 @@ def __init__(self, values=None, vocabulary=None, source=None, **kw):
                 raise ValueError(
                     "Persistent fields only support named vocabularies or "
                     "vocabularies based on simple value sets."
-                    )
+                )
             vocabulary = None
         elif source is not None:
             raise ValueError(
@@ -236,9 +236,9 @@ def __init__(self, values=None, vocabulary=None, source=None, **kw):
             )
 
         assert not (values is None and vocabulary is None), (
-               "You must specify either values or vocabulary.")
+            "You must specify either values or vocabulary.")
         assert values is None or vocabulary is None, (
-               "You cannot specify both values and vocabulary.")
+            "You cannot specify both values and vocabulary.")
 
         self.vocabularyName = None
 
diff --git a/plone/registry/recordsproxy.py b/plone/registry/recordsproxy.py
index ffc53f7..2d376e4 100644
--- a/plone/registry/recordsproxy.py
+++ b/plone/registry/recordsproxy.py
@@ -119,7 +119,7 @@ def _validate(self, key):
     def has_key(self, key):
         key = self._validate(key)
         prefix = self.prefix + key
-        names = self.registry.records.keys(prefix+'.', prefix+'/')
+        names = self.registry.records.keys(prefix + '.', prefix + '/')
         return bool(names)
 
     def add(self, key):
@@ -162,6 +162,6 @@ def __delitem__(self, key):
         if key not in self:
             raise KeyError(key)
         prefix = self.prefix + key
-        names = list(self.registry.records.keys(prefix+'.', prefix+'/'))
+        names = list(self.registry.records.keys(prefix + '.', prefix + '/'))
         for name in names:
             del self.registry.records[name]
diff --git a/setup.py b/setup.py
index 191759b..99f8562 100644
--- a/setup.py
+++ b/setup.py
@@ -11,17 +11,17 @@ def read(*rnames):
 
 description = "Registry for application settings (like debconf/ about:config)"
 long_description = (
-    read('README.rst')
-    + '\n' +
-    read('plone', 'registry', 'registry.rst')
-    + '\n' +
-    read('plone', 'registry', 'events.rst')
-    + '\n' +
-    read('plone', 'registry', 'field.rst')
-    + '\n' +
-    read('CHANGES.rst')
-    + '\n'
-    )
+    read('README.rst') +
+    '\n' +
+    read('plone', 'registry', 'registry.rst') +
+    '\n' +
+    read('plone', 'registry', 'events.rst') +
+    '\n' +
+    read('plone', 'registry', 'field.rst') +
+    '\n' +
+    read('CHANGES.rst') +
+    '\n'
+)
 
 setup(
     name='plone.registry',


Repository: plone.registry


Branch: refs/heads/master
Date: 2016-06-08T13:52:59+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.registry/commit/0bd01cfc447969b467ae7d7899bb10110a45a759

isort

Files changed:
M CHANGES.rst
M plone/registry/__init__.py
M plone/registry/field.py
M plone/registry/fieldfactory.py
M plone/registry/record.py
M plone/registry/recordsproxy.py
M plone/registry/registry.py
M plone/registry/tests.py
M setup.cfg
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b2db870..d599006 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- More cleanup: PEP8, isort, readability.
+  [jensens]
 
 
 1.0.3 (2016-02-26)
diff --git a/plone/registry/__init__.py b/plone/registry/__init__.py
index 347516c..73c057b 100644
--- a/plone/registry/__init__.py
+++ b/plone/registry/__init__.py
@@ -1,4 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.registry.registry import Registry
-from plone.registry.record import Record
 from plone.registry.fieldref import FieldRef
+from plone.registry.record import Record
+from plone.registry.registry import Registry
diff --git a/plone/registry/field.py b/plone/registry/field.py
index c2f8bf7..16e3e4a 100644
--- a/plone/registry/field.py
+++ b/plone/registry/field.py
@@ -11,9 +11,11 @@
 from zope.interface import implementer
 from zope.schema.interfaces import IContextSourceBinder
 from zope.schema.vocabulary import SimpleVocabulary
+
 import zope.schema
 import zope.schema._field
 
+
 _missing_value_marker = object()
 
 
diff --git a/plone/registry/fieldfactory.py b/plone/registry/fieldfactory.py
index 7089705..1d30861 100644
--- a/plone/registry/fieldfactory.py
+++ b/plone/registry/fieldfactory.py
@@ -11,6 +11,7 @@
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import ISource
 from zope.schema.vocabulary import SimpleVocabulary
+
 import plone.registry.field
 
 
diff --git a/plone/registry/record.py b/plone/registry/record.py
index 2211425..ca2575e 100644
--- a/plone/registry/record.py
+++ b/plone/registry/record.py
@@ -6,8 +6,9 @@
 from plone.registry.interfaces import IRecord
 from zope.dottedname.resolve import resolve
 from zope.event import notify
-from zope.interface import implementer
 from zope.interface import alsoProvides
+from zope.interface import implementer
+
 
 _marker = object()
 
diff --git a/plone/registry/recordsproxy.py b/plone/registry/recordsproxy.py
index 2d376e4..64d591c 100644
--- a/plone/registry/recordsproxy.py
+++ b/plone/registry/recordsproxy.py
@@ -5,8 +5,10 @@
 from zope.interface import implementer
 from zope.schema import getFieldsInOrder
 from zope.schema.interfaces import RequiredMissing
+
 import re
 
+
 _marker = object()
 
 
diff --git a/plone/registry/registry.py b/plone/registry/registry.py
index 2d814e7..17d301d 100644
--- a/plone/registry/registry.py
+++ b/plone/registry/registry.py
@@ -17,6 +17,7 @@
 from zope.interface import implementer
 from zope.schema import getFieldNames
 from zope.schema import getFieldsInOrder
+
 import re
 import warnings
 
diff --git a/plone/registry/tests.py b/plone/registry/tests.py
index afca760..c9010b4 100644
--- a/plone/registry/tests.py
+++ b/plone/registry/tests.py
@@ -6,6 +6,7 @@
 from zope.component import provideAdapter
 from zope.component import testing
 from zope.interface import Interface
+
 import doctest
 import unittest
 
diff --git a/setup.cfg b/setup.cfg
index 6f94f83..0078eb7 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,3 +1,10 @@
 [zopeskel]
 template = plone
 
+[isort]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
+
diff --git a/setup.py b/setup.py
index 99f8562..c7843b6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from setuptools import find_packages
 from setuptools import setup
+
 import os
 
 


Repository: plone.registry


Branch: refs/heads/master
Date: 2016-06-08T15:13:12+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.registry/commit/e31239e564065a9b710584928ff910005bf91cd6

Merge pull request #9 from plone/cleanup

Even More Cleanup

Files changed:
M CHANGES.rst
M plone/registry/__init__.py
M plone/registry/field.py
M plone/registry/fieldfactory.py
M plone/registry/interfaces.py
M plone/registry/record.py
M plone/registry/recordsproxy.py
M plone/registry/registry.py
M plone/registry/tests.py
M setup.cfg
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b2db870..d599006 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- More cleanup: PEP8, isort, readability.
+  [jensens]
 
 
 1.0.3 (2016-02-26)
diff --git a/plone/registry/__init__.py b/plone/registry/__init__.py
index 347516c..73c057b 100644
--- a/plone/registry/__init__.py
+++ b/plone/registry/__init__.py
@@ -1,4 +1,4 @@
 # -*- coding: utf-8 -*-
-from plone.registry.registry import Registry
-from plone.registry.record import Record
 from plone.registry.fieldref import FieldRef
+from plone.registry.record import Record
+from plone.registry.registry import Registry
diff --git a/plone/registry/field.py b/plone/registry/field.py
index 2150d31..16e3e4a 100644
--- a/plone/registry/field.py
+++ b/plone/registry/field.py
@@ -11,19 +11,21 @@
 from zope.interface import implementer
 from zope.schema.interfaces import IContextSourceBinder
 from zope.schema.vocabulary import SimpleVocabulary
+
 import zope.schema
 import zope.schema._field
 
+
 _missing_value_marker = object()
 
 
 def is_primitive(value):
     return value is None or \
-            isinstance(
-                value,
-                (int, long, bool, str, unicode, tuple,
-                 list, set, frozenset, dict, float)
-            )
+        isinstance(
+            value,
+            (int, long, bool, str, unicode, tuple,
+             list, set, frozenset, dict, float)
+        )
 
 
 class DisallowedProperty(object):
@@ -227,7 +229,7 @@ def __init__(self, values=None, vocabulary=None, source=None, **kw):
                 raise ValueError(
                     "Persistent fields only support named vocabularies or "
                     "vocabularies based on simple value sets."
-                    )
+                )
             vocabulary = None
         elif source is not None:
             raise ValueError(
@@ -236,9 +238,9 @@ def __init__(self, values=None, vocabulary=None, source=None, **kw):
             )
 
         assert not (values is None and vocabulary is None), (
-               "You must specify either values or vocabulary.")
+            "You must specify either values or vocabulary.")
         assert values is None or vocabulary is None, (
-               "You cannot specify both values and vocabulary.")
+            "You cannot specify both values and vocabulary.")
 
         self.vocabularyName = None
 
diff --git a/plone/registry/fieldfactory.py b/plone/registry/fieldfactory.py
index 7089705..1d30861 100644
--- a/plone/registry/fieldfactory.py
+++ b/plone/registry/fieldfactory.py
@@ -11,6 +11,7 @@
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import ISource
 from zope.schema.vocabulary import SimpleVocabulary
+
 import plone.registry.field
 
 
diff --git a/plone/registry/interfaces.py b/plone/registry/interfaces.py
index 4877b22..743811d 100644
--- a/plone/registry/interfaces.py
+++ b/plone/registry/interfaces.py
@@ -1,15 +1,16 @@
+# -*- coding: utf-8 -*-
+from zope import schema
 from zope.interface import Interface
 from zope.interface.interfaces import IInterface
-
-from zope import schema
-
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import InvalidDottedName
 
+
 class InvalidRegistryKey(InvalidDottedName):
     """A registry key is a dotted name with up to one '/'.
     """
 
+
 class IPersistentField(IField):
     """A field that can be persistent along with a record.
 
@@ -22,8 +23,15 @@ class IPersistentField(IField):
     not actual object references.
     """
 
-    interfaceName = schema.DottedName(title=u"Dotted name to an interface the field was constructed from", required=False)
-    fieldName = schema.ASCIILine(title=u"Name of the field in the original interface, if any", required=False)
+    interfaceName = schema.DottedName(
+        title=u'Dotted name to an interface the field was constructed from',
+        required=False
+    )
+    fieldName = schema.ASCIILine(
+        title=u'Name of the field in the original interface, if any',
+        required=False
+    )
+
 
 class IFieldRef(Interface):
     """A reference to another field.
@@ -34,8 +42,14 @@ class IFieldRef(Interface):
     Note that all attributes are read-only.
     """
 
-    recordName = schema.DottedName(title=u"Name of the record containing the reference field")
-    originalField = schema.Object(title=u"Referenced field", schema=IField)
+    recordName = schema.DottedName(
+        title=u'Name of the record containing the reference field'
+    )
+    originalField = schema.Object(
+        title=u'Referenced field',
+        schema=IField
+    )
+
 
 class IRecord(Interface):
     """A record stored in the registry.
@@ -49,34 +63,46 @@ class IRecord(Interface):
     the registry are always bound.
     """
 
-    field = schema.Object(title=u"A field describing this record",
-                          schema=IPersistentField)
+    field = schema.Object(
+        title=u'A field describing this record',
+        schema=IPersistentField
+    )
+
+    value = schema.Field(
+        title=u'The value of this record',
+        description=u'Must be valid according to the record\'s field'
+    )
 
-    value = schema.Field(title=u"The value of this record",
-                         description=u"Must be valid according to the record's field")
 
 class IRecordEvent(Interface):
     """Base interface for record level events
     """
 
-    record = schema.Object(title=u"The record that was added.",
-                           description=u"Both __name__ and __parent__ will be set before the event is fired",
-                           schema=IRecord)
+    record = schema.Object(
+        title=u'The record that was added.',
+        description=u'Both __name__ and __parent__ will be set before the '
+                    u'event is fired',
+        schema=IRecord
+    )
+
 
 class IRecordAddedEvent(IRecordEvent):
     """Event fired when a record is added to a registry.
     """
 
+
 class IRecordRemovedEvent(IRecordEvent):
     """Event fired when a record is removed from a registry.
     """
 
+
 class IRecordModifiedEvent(IRecordEvent):
     """Event fired when a record's value is modified.
     """
 
-    oldValue = schema.Field(title=u"The record's previous value")
-    newValue = schema.Field(title=u"The record's new value")
+    oldValue = schema.Field(title=u'The record\'s previous value')
+    newValue = schema.Field(title=u'The record\'s new value')
+
 
 class IInterfaceAwareRecord(Interface):
     """A record will be marked with this interface if it knows which
@@ -85,17 +111,39 @@ class IInterfaceAwareRecord(Interface):
 
     interfaceName = schema.DottedName(title=u"Dotted name to interface")
 
-    interface = schema.Object(title=u"Interface that provided the record",
-                              description=u"May be None if the interface is no longer available",
-                              schema=IInterface,
-                              readonly=True)
+    interface = schema.Object(
+        title=u'Interface that provided the record',
+        description=u'May be None if the interface is no longer available',
+        schema=IInterface,
+        readonly=True
+    )
+
+    fieldName = schema.ASCIILine(
+        title=u'Name of the field in the original interface'
+    )
 
-    fieldName = schema.ASCIILine(title=u"Name of the field in the original interface")
 
 class IRegistry(Interface):
     """The configuration registry
     """
 
+    records = schema.Dict(
+        title=u'The records of the registry',
+        key_type=schema.DottedName(
+            title=u'Name of the record',
+            description=u'By convention, this should include the '
+                        u'package name and optionally an interface '
+                        u'named, if the record can be described by a '
+                        u'field in an interface (see also '
+                        u'registerInterface() below), e.g. '
+                        u'my.package.interfaces.IMySettings.somefield.',
+        ),
+        value_type=schema.Object(
+            title=u'The record for this name',
+            schema=IRecord,
+        ),
+    )
+
     def __getitem__(key):
         """Get the value under the given key. A record must have been
         installed for this key for this to be valid. Otherwise, a KeyError is
@@ -107,7 +155,6 @@ def get(key, default=None):
         exist, return the given default.
         """
 
-
     def __setitem__(key, value):
         """Set the value under the given key. A record must have been
         installed for this key for this to be valid. Otherwise, a KeyError is
@@ -119,23 +166,6 @@ def __contains__(key):
         """Determine if the registry contains a record for the given key.
         """
 
-    records = schema.Dict(
-            title=u"The records of the registry",
-            key_type=schema.DottedName(
-                    title=u"Name of the record",
-                    description=u"By convention, this should include the "
-                                 "package name and optionally an interface "
-                                 "named, if the record can be described by a "
-                                 "field in an interface (see also "
-                                 "registerInterface() below), e.g. "
-                                 "my.package.interfaces.IMySettings.somefield.",
-                ),
-            value_type=schema.Object(
-                    title=u"The record for this name",
-                    schema=IRecord,
-                ),
-        )
-
     def forInterface(interface, check=True, omit=(), prefix=None):
         """Get an IRecordsProxy for the given interface. If `check` is True,
         an error will be raised if one or more fields in the interface does
@@ -151,6 +181,7 @@ def registerInterface(interface, omit=(), prefix=None):
         be ignored. Supply an alternative identifier with `prefix`.
         """
 
+
 class IRecordsProxy(Interface):
     """This object is returned by IRegistry.forInterface(). It will be
     made to provide the relevant interface, i.e. it will have the
@@ -158,15 +189,21 @@ class IRecordsProxy(Interface):
     from or written to the underlying IRegistry.
     """
 
-    __schema__ = schema.Object(title=u"Interface providing records",
-                               schema=IInterface,
-                               readonly=True)
-
-    __registry__ = schema.Object(title=u"Registry where records will be looked up",
-                                 schema=IRegistry,
-                                 readonly=True)
-
-    __omitted__ = schema.Tuple(title=u"Fields that are not stored in the registry",
-                               description=u"If any of these are accessed, you will get an AttributeError",
-                               value_type=schema.ASCIILine(title=u"Fieldname"),
-                               readonly=True)
+    __schema__ = schema.Object(
+        title=u'Interface providing records',
+        schema=IInterface,
+        readonly=True
+    )
+
+    __registry__ = schema.Object(
+        title=u'Registry where records will be looked up',
+        schema=IRegistry,
+        readonly=True)
+
+    __omitted__ = schema.Tuple(
+        title=u'Fields that are not stored in the registry',
+        description=u'If any of these are accessed, you will get an '
+                    u'AttributeError',
+        value_type=schema.ASCIILine(title=u'Fieldname'),
+        readonly=True
+    )
diff --git a/plone/registry/record.py b/plone/registry/record.py
index 2211425..ca2575e 100644
--- a/plone/registry/record.py
+++ b/plone/registry/record.py
@@ -6,8 +6,9 @@
 from plone.registry.interfaces import IRecord
 from zope.dottedname.resolve import resolve
 from zope.event import notify
-from zope.interface import implementer
 from zope.interface import alsoProvides
+from zope.interface import implementer
+
 
 _marker = object()
 
diff --git a/plone/registry/recordsproxy.py b/plone/registry/recordsproxy.py
index ffc53f7..64d591c 100644
--- a/plone/registry/recordsproxy.py
+++ b/plone/registry/recordsproxy.py
@@ -5,8 +5,10 @@
 from zope.interface import implementer
 from zope.schema import getFieldsInOrder
 from zope.schema.interfaces import RequiredMissing
+
 import re
 
+
 _marker = object()
 
 
@@ -119,7 +121,7 @@ def _validate(self, key):
     def has_key(self, key):
         key = self._validate(key)
         prefix = self.prefix + key
-        names = self.registry.records.keys(prefix+'.', prefix+'/')
+        names = self.registry.records.keys(prefix + '.', prefix + '/')
         return bool(names)
 
     def add(self, key):
@@ -162,6 +164,6 @@ def __delitem__(self, key):
         if key not in self:
             raise KeyError(key)
         prefix = self.prefix + key
-        names = list(self.registry.records.keys(prefix+'.', prefix+'/'))
+        names = list(self.registry.records.keys(prefix + '.', prefix + '/'))
         for name in names:
             del self.registry.records[name]
diff --git a/plone/registry/registry.py b/plone/registry/registry.py
index 2d814e7..17d301d 100644
--- a/plone/registry/registry.py
+++ b/plone/registry/registry.py
@@ -17,6 +17,7 @@
 from zope.interface import implementer
 from zope.schema import getFieldNames
 from zope.schema import getFieldsInOrder
+
 import re
 import warnings
 
diff --git a/plone/registry/tests.py b/plone/registry/tests.py
index afca760..c9010b4 100644
--- a/plone/registry/tests.py
+++ b/plone/registry/tests.py
@@ -6,6 +6,7 @@
 from zope.component import provideAdapter
 from zope.component import testing
 from zope.interface import Interface
+
 import doctest
 import unittest
 
diff --git a/setup.cfg b/setup.cfg
index 6f94f83..0078eb7 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,3 +1,10 @@
 [zopeskel]
 template = plone
 
+[isort]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
+
diff --git a/setup.py b/setup.py
index 191759b..c7843b6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from setuptools import find_packages
 from setuptools import setup
+
 import os
 
 
@@ -11,17 +12,17 @@ def read(*rnames):
 
 description = "Registry for application settings (like debconf/ about:config)"
 long_description = (
-    read('README.rst')
-    + '\n' +
-    read('plone', 'registry', 'registry.rst')
-    + '\n' +
-    read('plone', 'registry', 'events.rst')
-    + '\n' +
-    read('plone', 'registry', 'field.rst')
-    + '\n' +
-    read('CHANGES.rst')
-    + '\n'
-    )
+    read('README.rst') +
+    '\n' +
+    read('plone', 'registry', 'registry.rst') +
+    '\n' +
+    read('plone', 'registry', 'events.rst') +
+    '\n' +
+    read('plone', 'registry', 'field.rst') +
+    '\n' +
+    read('CHANGES.rst') +
+    '\n'
+)
 
 setup(
     name='plone.registry',


