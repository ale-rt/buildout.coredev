Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2016-07-05T23:13:36+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.textfield/commit/1fa8da1f2922f1e09908a6d9d5a599f0c65c42db

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M docs/HISTORY.rst
M plone/app/textfield/__init__.py
M plone/app/textfield/handler.py
M plone/app/textfield/tests.py
M plone/app/textfield/transform.py
M plone/app/textfield/value.py
M plone/app/textfield/widget.py

diff --git a/docs/HISTORY.rst b/docs/HISTORY.rst
index 5677598..5e5a684 100644
--- a/docs/HISTORY.rst
+++ b/docs/HISTORY.rst
@@ -4,8 +4,8 @@ Changelog
 1.2.7 (unreleased)
 ------------------
 
-- Nothing changed yet.
-
+- Use zope.interface decorator.
+  [gforcada]
 
 1.2.6 (2015-05-31)
 ------------------
diff --git a/plone/app/textfield/__init__.py b/plone/app/textfield/__init__.py
index c837c3f..a4ab9da 100644
--- a/plone/app/textfield/__init__.py
+++ b/plone/app/textfield/__init__.py
@@ -2,7 +2,7 @@
 from plone.app.textfield.value import RichTextValue
 from zope.i18nmessageid.message import MessageFactory
 from zope.interface import Invalid
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema import Object
 from zope.schema._bootstrapinterfaces import ConstraintNotSatisfied
 from zope.schema.interfaces import IFromUnicode
@@ -11,12 +11,11 @@
 _ = MessageFactory('plone')
 
 
+@implementer(IRichText, IFromUnicode)
 class RichText(Object):
     """Text field that also stores MIME type
     """
 
-    implements(IRichText, IFromUnicode)
-
     default_mime_type = 'text/html'
     output_mime_type = 'text/x-html-safe'
     allowed_mime_types = None
diff --git a/plone/app/textfield/handler.py b/plone/app/textfield/handler.py
index 68e6b7f..ac6fa03 100644
--- a/plone/app/textfield/handler.py
+++ b/plone/app/textfield/handler.py
@@ -6,7 +6,7 @@
 
 if HAVE_SUPERMODEL:
 
-    from zope.interface import implements
+    from zope.interface import implementer
     from zope.component import adapts
     from plone.app.textfield import RichText
     from plone.supermodel.interfaces import IToUnicode
@@ -24,8 +24,8 @@ class RichTextHandler_(BaseHandler):
         def __init__(self, klass):
             super(RichTextHandler_, self).__init__(klass)
 
+    @implementer(IToUnicode)
     class RichTextToUnicode(object):
-        implements(IToUnicode)
         adapts(IRichText)
 
         def __init__(self, context):
diff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py
index 726038d..0f3ad13 100644
--- a/plone/app/textfield/tests.py
+++ b/plone/app/textfield/tests.py
@@ -57,7 +57,7 @@ class IWithText(Interface):
         self.assertEquals(u'<p>Some <strong>text</strong></p>\n', value.output)
 
     def testTransformView(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from Products.CMFCore.PortalContent import PortalContent
 
@@ -67,8 +67,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             id = 'context'
             text = None
@@ -98,7 +98,7 @@ class IWithText(Interface):
         self.assertEquals(u"<span>Some html</span>", output.strip())
 
     def testTransformNoneView(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from plone.app.textfield.value import RichTextValue
         from Products.CMFCore.PortalContent import PortalContent
@@ -109,8 +109,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             id = 'context'
             text = None
@@ -130,7 +130,7 @@ class Context(PortalContent):
         self.assertEquals(u'', output.strip())
 
     def testWidgetExtract(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from zope.publisher.browser import TestRequest
         from Products.CMFCore.PortalContent import PortalContent
@@ -144,8 +144,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             text = None
 
@@ -193,7 +193,7 @@ class IWithText(Interface):
         self.assertTrue(converter.toFieldValue(RichTextValue(u'')) is _marker)
 
     def testWidgetAllowedTypesDefault(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from zope.publisher.browser import TestRequest
         from Products.CMFCore.PortalContent import PortalContent
@@ -206,8 +206,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             text = None
 
@@ -225,7 +225,7 @@ class Context(PortalContent):
         self.failIf('text/structured' in allowed)
 
     def testWidgetAllowedTypesField(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from zope.publisher.browser import TestRequest
         from Products.CMFCore.PortalContent import PortalContent
@@ -242,8 +242,8 @@ class IWithText(Interface):
                     'text/structured',
                     'text/html'))
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             text = None
 
diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py
index fe6af04..6c622e6 100644
--- a/plone/app/textfield/transform.py
+++ b/plone/app/textfield/transform.py
@@ -3,19 +3,18 @@
 from ZODB.POSException import ConflictError
 from plone.app.textfield.interfaces import ITransformer, TransformError
 from zope.component.hooks import getSite
-from zope.interface import implements
+from zope.interface import implementer
 import logging
 
 LOG = logging.getLogger('plone.app.textfield')
 
 
+@implementer(ITransformer)
 class PortalTransformsTransformer(object):
 
     """Invoke portal_transforms to perform a conversion
     """
 
-    implements(ITransformer)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/app/textfield/value.py b/plone/app/textfield/value.py
index 0bf06bb..dceae8a 100644
--- a/plone/app/textfield/value.py
+++ b/plone/app/textfield/value.py
@@ -2,7 +2,7 @@
 from persistent import Persistent
 from plone.app.textfield.interfaces import IRichTextValue, ITransformer
 from zope.component.hooks import getSite
-from zope.interface import implements
+from zope.interface import implementer
 import logging
 
 LOG = logging.getLogger('plone.app.textfield')
@@ -31,6 +31,7 @@ def __ne__(self, other):
         return not equal
 
 
+@implementer(IRichTextValue)
 class RichTextValue(object):
     """The actual value.
 
@@ -38,8 +39,6 @@ class RichTextValue(object):
     being loaded.
     """
 
-    implements(IRichTextValue)
-
     def __init__(self, raw=None, mimeType=None, outputMimeType=None,
                  encoding='utf-8', output=None):
         self._raw_holder = RawValueHolder(raw)
diff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py
index 7798e7a..5185471 100644
--- a/plone/app/textfield/widget.py
+++ b/plone/app/textfield/widget.py
@@ -13,7 +13,7 @@
 from z3c.form.interfaces import NOVALUE
 from z3c.form.widget import FieldWidget
 from zope.component import adapts, adapter
-from zope.interface import implementsOnly, implementer
+from zope.interface import implementer_only, implementer
 
 
 class IRichTextWidget(ITextAreaWidget):
@@ -23,8 +23,8 @@ def allowedMimeTypes():
         """
 
 
+@implementer_only(IRichTextWidget)
 class RichTextWidget(TextAreaWidget):
-    implementsOnly(IRichTextWidget)
 
     klass = u'richTextWidget'
     value = None


Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2016-07-10T08:53:56+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.textfield/commit/92c4df97f240a122c8c1b4448eef0a77029322f0

Merge pull request #18 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M docs/HISTORY.rst
M plone/app/textfield/__init__.py
M plone/app/textfield/handler.py
M plone/app/textfield/tests.py
M plone/app/textfield/transform.py
M plone/app/textfield/value.py
M plone/app/textfield/widget.py

diff --git a/docs/HISTORY.rst b/docs/HISTORY.rst
index 5677598..5e5a684 100644
--- a/docs/HISTORY.rst
+++ b/docs/HISTORY.rst
@@ -4,8 +4,8 @@ Changelog
 1.2.7 (unreleased)
 ------------------
 
-- Nothing changed yet.
-
+- Use zope.interface decorator.
+  [gforcada]
 
 1.2.6 (2015-05-31)
 ------------------
diff --git a/plone/app/textfield/__init__.py b/plone/app/textfield/__init__.py
index c837c3f..a4ab9da 100644
--- a/plone/app/textfield/__init__.py
+++ b/plone/app/textfield/__init__.py
@@ -2,7 +2,7 @@
 from plone.app.textfield.value import RichTextValue
 from zope.i18nmessageid.message import MessageFactory
 from zope.interface import Invalid
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema import Object
 from zope.schema._bootstrapinterfaces import ConstraintNotSatisfied
 from zope.schema.interfaces import IFromUnicode
@@ -11,12 +11,11 @@
 _ = MessageFactory('plone')
 
 
+@implementer(IRichText, IFromUnicode)
 class RichText(Object):
     """Text field that also stores MIME type
     """
 
-    implements(IRichText, IFromUnicode)
-
     default_mime_type = 'text/html'
     output_mime_type = 'text/x-html-safe'
     allowed_mime_types = None
diff --git a/plone/app/textfield/handler.py b/plone/app/textfield/handler.py
index 68e6b7f..ac6fa03 100644
--- a/plone/app/textfield/handler.py
+++ b/plone/app/textfield/handler.py
@@ -6,7 +6,7 @@
 
 if HAVE_SUPERMODEL:
 
-    from zope.interface import implements
+    from zope.interface import implementer
     from zope.component import adapts
     from plone.app.textfield import RichText
     from plone.supermodel.interfaces import IToUnicode
@@ -24,8 +24,8 @@ class RichTextHandler_(BaseHandler):
         def __init__(self, klass):
             super(RichTextHandler_, self).__init__(klass)
 
+    @implementer(IToUnicode)
     class RichTextToUnicode(object):
-        implements(IToUnicode)
         adapts(IRichText)
 
         def __init__(self, context):
diff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py
index 726038d..0f3ad13 100644
--- a/plone/app/textfield/tests.py
+++ b/plone/app/textfield/tests.py
@@ -57,7 +57,7 @@ class IWithText(Interface):
         self.assertEquals(u'<p>Some <strong>text</strong></p>\n', value.output)
 
     def testTransformView(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from Products.CMFCore.PortalContent import PortalContent
 
@@ -67,8 +67,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             id = 'context'
             text = None
@@ -98,7 +98,7 @@ class IWithText(Interface):
         self.assertEquals(u"<span>Some html</span>", output.strip())
 
     def testTransformNoneView(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from plone.app.textfield.value import RichTextValue
         from Products.CMFCore.PortalContent import PortalContent
@@ -109,8 +109,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             id = 'context'
             text = None
@@ -130,7 +130,7 @@ class Context(PortalContent):
         self.assertEquals(u'', output.strip())
 
     def testWidgetExtract(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from zope.publisher.browser import TestRequest
         from Products.CMFCore.PortalContent import PortalContent
@@ -144,8 +144,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             text = None
 
@@ -193,7 +193,7 @@ class IWithText(Interface):
         self.assertTrue(converter.toFieldValue(RichTextValue(u'')) is _marker)
 
     def testWidgetAllowedTypesDefault(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from zope.publisher.browser import TestRequest
         from Products.CMFCore.PortalContent import PortalContent
@@ -206,8 +206,8 @@ class IWithText(Interface):
                             default_mime_type='text/structured',
                             output_mime_type='text/html')
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             text = None
 
@@ -225,7 +225,7 @@ class Context(PortalContent):
         self.failIf('text/structured' in allowed)
 
     def testWidgetAllowedTypesField(self):
-        from zope.interface import Interface, implements
+        from zope.interface import Interface, implementer
         from plone.app.textfield import RichText
         from zope.publisher.browser import TestRequest
         from Products.CMFCore.PortalContent import PortalContent
@@ -242,8 +242,8 @@ class IWithText(Interface):
                     'text/structured',
                     'text/html'))
 
+        @implementer(IWithText)
         class Context(PortalContent):
-            implements(IWithText)
 
             text = None
 
diff --git a/plone/app/textfield/transform.py b/plone/app/textfield/transform.py
index fe6af04..6c622e6 100644
--- a/plone/app/textfield/transform.py
+++ b/plone/app/textfield/transform.py
@@ -3,19 +3,18 @@
 from ZODB.POSException import ConflictError
 from plone.app.textfield.interfaces import ITransformer, TransformError
 from zope.component.hooks import getSite
-from zope.interface import implements
+from zope.interface import implementer
 import logging
 
 LOG = logging.getLogger('plone.app.textfield')
 
 
+@implementer(ITransformer)
 class PortalTransformsTransformer(object):
 
     """Invoke portal_transforms to perform a conversion
     """
 
-    implements(ITransformer)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/app/textfield/value.py b/plone/app/textfield/value.py
index 0bf06bb..dceae8a 100644
--- a/plone/app/textfield/value.py
+++ b/plone/app/textfield/value.py
@@ -2,7 +2,7 @@
 from persistent import Persistent
 from plone.app.textfield.interfaces import IRichTextValue, ITransformer
 from zope.component.hooks import getSite
-from zope.interface import implements
+from zope.interface import implementer
 import logging
 
 LOG = logging.getLogger('plone.app.textfield')
@@ -31,6 +31,7 @@ def __ne__(self, other):
         return not equal
 
 
+@implementer(IRichTextValue)
 class RichTextValue(object):
     """The actual value.
 
@@ -38,8 +39,6 @@ class RichTextValue(object):
     being loaded.
     """
 
-    implements(IRichTextValue)
-
     def __init__(self, raw=None, mimeType=None, outputMimeType=None,
                  encoding='utf-8', output=None):
         self._raw_holder = RawValueHolder(raw)
diff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py
index 7798e7a..5185471 100644
--- a/plone/app/textfield/widget.py
+++ b/plone/app/textfield/widget.py
@@ -13,7 +13,7 @@
 from z3c.form.interfaces import NOVALUE
 from z3c.form.widget import FieldWidget
 from zope.component import adapts, adapter
-from zope.interface import implementsOnly, implementer
+from zope.interface import implementer_only, implementer
 
 
 class IRichTextWidget(ITextAreaWidget):
@@ -23,8 +23,8 @@ def allowedMimeTypes():
         """
 
 
+@implementer_only(IRichTextWidget)
 class RichTextWidget(TextAreaWidget):
-    implementsOnly(IRichTextWidget)
 
     klass = u'richTextWidget'
     value = None


