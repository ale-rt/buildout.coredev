Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-19T22:32:48+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/de1e35147e4f0b2b270a541e0dbef9a31396e87e

autopep8 -i -r .

Files changed:
M Products/PortalTransforms/Transform.py
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/__init__.py
M Products/PortalTransforms/chain.py
M Products/PortalTransforms/libtransforms/utils.py
M Products/PortalTransforms/tests/input/test_python.py
M Products/PortalTransforms/tests/test_doctests.py
M Products/PortalTransforms/tests/test_engine.py
M Products/PortalTransforms/tests/test_graph.py
M Products/PortalTransforms/tests/test_intelligenttext.py
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/tests/word.py
M Products/PortalTransforms/transforms/__init__.py
M Products/PortalTransforms/transforms/html_body.py
M Products/PortalTransforms/transforms/html_to_text.py
M Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
M Products/PortalTransforms/transforms/identity.py
M Products/PortalTransforms/transforms/lynx_dump.py
M Products/PortalTransforms/transforms/office_com.py
M Products/PortalTransforms/transforms/office_uno.py
M Products/PortalTransforms/transforms/office_wvware.py
M Products/PortalTransforms/transforms/pdf_to_html.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/rest.py
M Products/PortalTransforms/transforms/safe_html.py
M Products/PortalTransforms/transforms/text_pre_to_html.py
M Products/PortalTransforms/transforms/text_to_html.py
M Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
M Products/PortalTransforms/unsafe_transforms/build_transforms.py
M Products/PortalTransforms/unsafe_transforms/command.py
M Products/PortalTransforms/unsafe_transforms/xml.py
M bootstrap.py
M setup.py

diff --git a/Products/PortalTransforms/Transform.py b/Products/PortalTransforms/Transform.py
index 40cc325..286ebfc 100644
--- a/Products/PortalTransforms/Transform.py
+++ b/Products/PortalTransforms/Transform.py
@@ -60,7 +60,7 @@ def make_config_nonpersistent(kwargs):
     'string': str,
     'list': PersistentList,
     'dict': PersistentMapping,
-    }
+}
 
 
 class Transform(SimpleItem):
@@ -79,7 +79,7 @@ class Transform(SimpleItem):
          {'label': 'Reload',
           'action': 'manage_reloadTransform'},) +
         SimpleItem.manage_options
-        )
+    )
 
     manage_main = PageTemplateFile('configureTransform', _www)
     manage_reloadTransform = PageTemplateFile('reloadTransform', _www)
@@ -176,6 +176,7 @@ def _load_transform(self):
         return transform
 
     security.declarePrivate('manage_beforeDelete')
+
     def manage_beforeDelete(self, item, container):
         SimpleItem.manage_beforeDelete(self, item, container)
         if self is item:
@@ -184,6 +185,7 @@ def manage_beforeDelete(self, item, container):
             tr_tool._unmapTransform(self)
 
     security.declarePublic('get_documentation')
+
     def get_documentation(self):
         """ return transform documentation """
         if not hasattr(self, '_v_transform'):
@@ -191,6 +193,7 @@ def get_documentation(self):
         return self._v_transform.__doc__
 
     security.declarePublic('convert')
+
     def convert(self, *args, **kwargs):
         # return apply the transform and return the result
         if not hasattr(self, '_v_transform'):
@@ -198,11 +201,13 @@ def convert(self, *args, **kwargs):
         return self._v_transform.convert(*args, **kwargs)
 
     security.declarePublic('name')
+
     def name(self):
         """return the name of the transform instance"""
         return self.id
 
     security.declareProtected(ManagePortal, 'get_parameters')
+
     def get_parameters(self):
         """ get transform's parameters names """
         if not hasattr(self, '_v_transform'):
@@ -212,6 +217,7 @@ def get_parameters(self):
         return keys
 
     security.declareProtected(ManagePortal, 'get_parameter_value')
+
     def get_parameter_value(self, key):
         """ get value of a transform's parameter """
         value = self._config[key]
@@ -228,6 +234,7 @@ def get_parameter_value(self, key):
         return result
 
     security.declareProtected(ManagePortal, 'get_parameter_infos')
+
     def get_parameter_infos(self, key):
         """ get informations about a parameter
 
@@ -243,6 +250,7 @@ def get_parameter_infos(self, key):
             return 'string', '', ''
 
     security.declareProtected(ManagePortal, 'set_parameters')
+
     def set_parameters(self, REQUEST=None, **kwargs):
         """ set transform's parameters """
         if not kwargs:
@@ -275,6 +283,7 @@ def set_parameters(self, REQUEST=None, **kwargs):
                 tr_tool.absolute_url() + '/manage_main')
 
     security.declareProtected(ManagePortal, 'reload')
+
     def reload(self):
         """ reload the module where the transformation class is defined """
         log('Reloading transform %s' % self.module)
diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py
index 145bfde..151914c 100644
--- a/Products/PortalTransforms/TransformEngine.py
+++ b/Products/PortalTransforms/TransformEngine.py
@@ -42,7 +42,7 @@ class TransformTool(UniqueObject, ActionProviderBase, Folder):
     meta_types = all_meta_types = (
         {'name': 'Transform', 'action': 'manage_addTransformForm'},
         {'name': 'TransformsChain', 'action': 'manage_addTransformsChainForm'},
-        )
+    )
 
     manage_addTransformForm = PageTemplateFile('addTransform', _www)
     manage_addTransformsChainForm = PageTemplateFile(
@@ -58,7 +58,7 @@ class TransformTool(UniqueObject, ActionProviderBase, Folder):
          {'label': 'Policy', 'action': 'manage_editTransformationPolicyForm'},
          {'label': 'Reload transforms',
           'action': 'manage_reloadAllTransforms'},
-        ))
+         ))
 
     security = ClassSecurityInfo()
 
@@ -71,6 +71,7 @@ def __init__(self, policies=None, max_sec_in_cache=3600):
     # mimetype oriented conversions (iengine interface)
 
     security.declarePrivate('unregisterTransform')
+
     def unregisterTransform(self, name):
         """ unregister a transform
         name is the name of a registered transform
@@ -80,6 +81,7 @@ def unregisterTransform(self, name):
             self._delObject(name)
 
     security.declarePublic('convertTo')
+
     def convertTo(self, target_mimetype, orig, data=None, object=None,
                   usedby=None, context=None, **kwargs):
         """Convert orig to a given mimetype
@@ -136,7 +138,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
                 severity=DEBUG)
             return None
 
-        ## fastpath
+        # fastpath
         # If orig_mt and target_mt are the same, we only allow
         # a one-hop transform, a.k.a. filter.
         # XXX disabled filtering for now
@@ -148,7 +150,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
                 cache.setCache(str(target_mimetype), data)
             return data
 
-        ## get a path to output mime type
+        # get a path to output mime type
         requirements = self._policies.get(str(target_mt), [])
         path = self._findPath(orig_mt, target_mt, list(requirements))
         if not path and requirements:
@@ -162,7 +164,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
             return None
 
         if len(path) > 1:
-            ## create a chain on the fly (sly)
+            # create a chain on the fly (sly)
             transform = chain()
             for t in path:
                 transform.registerTransform(t)
@@ -183,6 +185,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
     del convertTo.__doc__
 
     security.declarePublic('convertToData')
+
     def convertToData(self, target_mimetype, orig, data=None, object=None,
                       usedby=None, context=None, **kwargs):
         # Convert to a given mimetype and return the raw data
@@ -194,6 +197,7 @@ def convertToData(self, target_mimetype, orig, data=None, object=None,
         return None
 
     security.declarePublic('convert')
+
     def convert(self, name, orig, data=None, context=None, **kwargs):
         # run a tranform of a given name on data
 
@@ -468,6 +472,7 @@ def _getPaths(self, orig, target, requirements, path=None, result=None):
         return result
 
     security.declarePrivate('manage_afterAdd')
+
     def manage_afterAdd(self, item, container):
         """ overload manage_afterAdd to finish initialization when the
         transform tool is added
@@ -480,6 +485,7 @@ def manage_afterAdd(self, item, container):
             pass
 
     security.declareProtected(ManagePortal, 'manage_addTransform')
+
     def manage_addTransform(self, id, module, REQUEST=None):
         """ add a new transform to the tool """
         transform = Transform(id, module)
@@ -489,6 +495,7 @@ def manage_addTransform(self, id, module, REQUEST=None):
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
     security.declareProtected(ManagePortal, 'manage_addTransform')
+
     def manage_addTransformsChain(self, id, description, REQUEST=None):
         """ add a new transform to the tool """
         transform = TransformsChain(id, description)
@@ -498,6 +505,7 @@ def manage_addTransformsChain(self, id, description, REQUEST=None):
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
     security.declareProtected(ManagePortal, 'manage_addTransform')
+
     def manage_setCacheValidityTime(self, seconds, REQUEST=None):
         """set  the lifetime of cached data in seconds"""
         self.max_sec_in_cache = int(seconds)
@@ -505,6 +513,7 @@ def manage_setCacheValidityTime(self, seconds, REQUEST=None):
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
     security.declareProtected(ManagePortal, 'reloadTransforms')
+
     def reloadTransforms(self, ids=()):
         """ reload transforms with the given ids
         if no ids, reload all registered transforms
@@ -537,7 +546,7 @@ def manage_addPolicy(self, output_mimetype, required_transforms,
         self._policies[output_mimetype] = required_transforms
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() +
-                '/manage_editTransformationPolicyForm')
+                                         '/manage_editTransformationPolicyForm')
 
     def manage_delPolicies(self, outputs, REQUEST=None):
         """ remove policies for given output mime types"""
@@ -545,7 +554,7 @@ def manage_delPolicies(self, outputs, REQUEST=None):
             del self._policies[mimetype]
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() +
-                '/manage_editTransformationPolicyForm')
+                                         '/manage_editTransformationPolicyForm')
 
     def listPolicies(self):
         """ return the list of defined policies
@@ -560,6 +569,7 @@ def listPolicies(self):
     # mimetype oriented conversions (iengine interface)
 
     security.declarePrivate('registerTransform')
+
     def registerTransform(self, transform):
         """register a new transform
 
@@ -580,6 +590,7 @@ def registerTransform(self, transform):
             self._mapTransform(transform)
 
     security.declareProtected(ManagePortal, 'ZopeFind')
+
     def ZopeFind(self, *args, **kwargs):
         """Don't break ZopeFind feature when a transform can't be loaded
         """
@@ -589,6 +600,7 @@ def ZopeFind(self, *args, **kwargs):
             log('ZopeFind: catched MissingBinary exception')
 
     security.declareProtected(View, 'objectItems')
+
     def objectItems(self, *args, **kwargs):
         """Don't break ZopeFind feature when a transform can't be loaded
         """
diff --git a/Products/PortalTransforms/__init__.py b/Products/PortalTransforms/__init__.py
index 0e68d3f..889a819 100644
--- a/Products/PortalTransforms/__init__.py
+++ b/Products/PortalTransforms/__init__.py
@@ -4,7 +4,7 @@
 
 tools = (
     TransformTool,
-    )
+)
 
 # XXX backward compatibility tricks to make old PortalTransform based Mimetypes
 # running (required)
diff --git a/Products/PortalTransforms/chain.py b/Products/PortalTransforms/chain.py
index 15f3932..fc295b0 100644
--- a/Products/PortalTransforms/chain.py
+++ b/Products/PortalTransforms/chain.py
@@ -23,6 +23,7 @@
     # Zope <=2.12
     from AccessControl.Role import RoleManager
 
+
 class chain(UserList):
     """A chain of transforms used to transform data"""
 
@@ -81,8 +82,8 @@ def _update(self):
         self.inputs = self[0].inputs
         self.output = self[-1].output
         for i in range(len(self)):
-            if hasattr(self[-i-1], 'output_encoding'):
-                self.output_encoding = self[-i-1].output_encoding
+            if hasattr(self[-i - 1], 'output_encoding'):
+                self.output_encoding = self[-i - 1].output_encoding
                 break
         else:
             try:
@@ -132,6 +133,7 @@ def _chain_init(self):
         self.output = c.output or 'application/octet-stream'
 
     security.declarePublic('convert')
+
     def convert(self, *args, **kwargs):
         """ return apply the transform and return the result """
         if self._chain is None:
@@ -139,11 +141,13 @@ def convert(self, *args, **kwargs):
         return self._chain.convert(*args, **kwargs)
 
     security.declarePublic('name')
+
     def name(self):
         """return the name of the transform instance"""
         return self.id
 
     security.declarePrivate('manage_beforeDelete')
+
     def manage_beforeDelete(self, item, container):
         Item.manage_beforeDelete(self, item, container)
         if self is item:
@@ -152,6 +156,7 @@ def manage_beforeDelete(self, item, container):
             tr_tool.unregisterTransform(self.id)
 
     security.declareProtected(ManagePortal, 'manage_addObject')
+
     def manage_addObject(self, id, REQUEST=None):
         """ add a new transform or chain to the chain """
         assert id not in self._object_ids
@@ -161,6 +166,7 @@ def manage_addObject(self, id, REQUEST=None):
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
     security.declareProtected(ManagePortal, 'manage_delObjects')
+
     def manage_delObjects(self, ids, REQUEST=None):
         """ delete the selected mime types """
         for id in ids:
@@ -172,6 +178,7 @@ def manage_delObjects(self, ids, REQUEST=None):
     # transforms order handling #
 
     security.declareProtected(ManagePortal, 'move_object_to_position')
+
     def move_object_to_position(self, id, newpos):
         """ overriden from OrderedFolder to store id instead of objects
         """
@@ -184,6 +191,7 @@ def move_object_to_position(self, id, newpos):
         return 1
 
     security.declareProtected(ManageProperties, 'move_object_up')
+
     def move_object_up(self, id, REQUEST=None):
         """  move object with the given id up in the list """
         newpos = self._object_ids.index(id) - 1
@@ -192,6 +200,7 @@ def move_object_up(self, id, REQUEST=None):
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
     security.declareProtected(ManageProperties, 'move_object_down')
+
     def move_object_down(self, id, REQUEST=None):
         """  move object with the given id down in the list """
         newpos = self._object_ids.index(id) + 1
@@ -202,6 +211,7 @@ def move_object_down(self, id, REQUEST=None):
     # Z transform interface #
 
     security.declareProtected(ManagePortal, 'reload')
+
     def reload(self):
         """ reload the module where the transformation class is defined """
         for tr in self.objectValues():
@@ -211,6 +221,7 @@ def reload(self):
     # utilities #
 
     security.declareProtected(ManagePortal, 'listAddableObjectIds')
+
     def listAddableObjectIds(self):
         """ return a list of addable transform """
         tr_tool = getToolByName(self, 'portal_transforms')
@@ -218,11 +229,13 @@ def listAddableObjectIds(self):
                 if not (id == self.id or id in self._object_ids)]
 
     security.declareProtected(ManagePortal, 'objectIds')
+
     def objectIds(self):
         """ return a list of addable transform """
         return tuple(self._object_ids)
 
     security.declareProtected(ManagePortal, 'objectValues')
+
     def objectValues(self):
         """ return a list of addable transform """
         tr_tool = getToolByName(self, 'portal_transforms')
diff --git a/Products/PortalTransforms/libtransforms/utils.py b/Products/PortalTransforms/libtransforms/utils.py
index b3781ae..ad6dce4 100644
--- a/Products/PortalTransforms/libtransforms/utils.py
+++ b/Products/PortalTransforms/libtransforms/utils.py
@@ -97,82 +97,14 @@ def bodyfinder(text):
 # value of 0 means it is an empty tag, like '<br />'.  Also note that
 # there currently is a separate list in the safe_html transform, which
 # itself is a copy from CMFDefault, with some changes done on the fly.
-VALID_TAGS = { 'a'          : 1
-             , 'article'    : 1
-             , 'aside'      : 1
-             , 'audio'      : 1
-             , 'b'          : 1
-             , 'base'       : 0
-             , 'blockquote' : 1
-             , 'body'       : 1
-             , 'br'         : 0
-             , 'canvas'     : 1
-             , 'caption'    : 1
-             , 'cite'       : 1
-             , 'code'       : 1
-             , 'command'    : 1
-             , 'datalist'   : 1
-             , 'dd'         : 1
-             , 'details'    : 1
-             , 'div'        : 1
-             , 'dl'         : 1
-             , 'dt'         : 1
-             , 'em'         : 1
-             , 'figcaption' : 1
-             , 'figure'     : 1
-             , 'footer'     : 1
-             , 'h1'         : 1
-             , 'h2'         : 1
-             , 'h3'         : 1
-             , 'h4'         : 1
-             , 'h5'         : 1
-             , 'h6'         : 1
-             , 'head'       : 1
-             , 'header'     : 1
-             , 'hgroup'     : 1
-             , 'hr'         : 0
-             , 'html'       : 1
-             , 'i'          : 1
-             , 'img'        : 0
-             , 'kbd'        : 1
-             , 'keygen'     : 1
-             , 'li'         : 1
-             , 'mark'       : 1
-             , 'meta'       : 0
-             , 'ol'         : 1
-             , 'p'          : 1
-             , 'pre'        : 1
-             , 'rp'         : 1
-             , 'rt'         : 1
-             , 'ruby'       : 1
-             , 'section'    : 1
-             , 'source'     : 1
-             , 'span'       : 1
-             , 'strike'     : 1
-             , 'strong'     : 1
-             , 'summary'    : 1
-             , 'table'      : 1
-             , 'tbody'      : 1
-             , 'td'         : 1
-             , 'th'         : 1
-             , 'thead'      : 1
-             , 'time'       : 1
-             , 'title'      : 1
-             , 'tr'         : 1
-             , 'tt'         : 1
-             , 'u'          : 1
-             , 'ul'         : 1
-             , 'video'      : 1
-             }
+VALID_TAGS = {'a': 1, 'article': 1, 'aside': 1, 'audio': 1, 'b': 1, 'base': 0, 'blockquote': 1, 'body': 1, 'br': 0, 'canvas': 1, 'caption': 1, 'cite': 1, 'code': 1, 'command': 1, 'datalist': 1, 'dd': 1, 'details': 1, 'div': 1, 'dl': 1, 'dt': 1, 'em': 1, 'figcaption': 1, 'figure': 1, 'footer': 1, 'h1': 1, 'h2': 1, 'h3': 1, 'h4': 1, 'h5': 1, 'h6': 1, 'head': 1, 'header': 1, 'hgroup': 1, 'hr': 0, 'html': 1, 'i': 1, 'img': 0, 'kbd': 1, 'keygen': 1, 'li': 1, 'mark': 1, 'meta': 0, 'ol': 1, 'p': 1, 'pre': 1, 'rp': 1, 'rt': 1, 'ruby': 1, 'section': 1, 'source': 1, 'span': 1, 'strike': 1, 'strong': 1, 'summary': 1, 'table': 1, 'tbody': 1, 'td': 1, 'th': 1, 'thead': 1, 'time': 1, 'title': 1, 'tr': 1, 'tt': 1, 'u': 1, 'ul': 1, 'video': 1
+              }
 
 # These tags and their complete contents should be removed.  Note that
 # parsers may choose to raise an Exception when finding such a nasty
 # tag.
-NASTY_TAGS = { 'script'     : 1
-             , 'object'     : 1
-             , 'embed'      : 1
-             , 'applet'     : 1
-             }
+NASTY_TAGS = {'script': 1, 'object': 1, 'embed': 1, 'applet': 1
+              }
 
 
 class IllegalHTML(ValueError):
@@ -210,7 +142,6 @@ def handle_entityref(self, name):
         self.result = "%s&%s%s" % (self.result, name, x)
 
     def unknown_starttag(self, tag, attrs):
-
         """ Delete all tags except for legal ones.
         """
         if tag in VALID_TAGS:
@@ -234,7 +165,7 @@ def handle_valid_tag(self, tag, attrs):
 
         for k, v in attrs:
             self.result = '%s %s' % (self.result,
-                    self.handle_javascript_attr(k, v))
+                                     self.handle_javascript_attr(k, v))
 
         # endTag = '</%s>' % tag
         if VALID_TAGS.get(tag):
diff --git a/Products/PortalTransforms/tests/input/test_python.py b/Products/PortalTransforms/tests/input/test_python.py
index 50db5a4..267e92d 100644
--- a/Products/PortalTransforms/tests/input/test_python.py
+++ b/Products/PortalTransforms/tests/input/test_python.py
@@ -1,11 +1,15 @@
 """ nice docstring """
 
-class A : pass
+
+class A:
+    pass
 
 # comment
 
+
 def inc(i):
-    return i+1
+    return i + 1
+
 
 def greater(a, b):
     """foo <html />"""
diff --git a/Products/PortalTransforms/tests/test_doctests.py b/Products/PortalTransforms/tests/test_doctests.py
index e00a955..181d0a9 100644
--- a/Products/PortalTransforms/tests/test_doctests.py
+++ b/Products/PortalTransforms/tests/test_doctests.py
@@ -5,7 +5,7 @@
 modules = (
     'Products.PortalTransforms.transforms.safe_html',
     'Products.PortalTransforms.transforms.rest',
-    )
+)
 
 
 def test_suite():
diff --git a/Products/PortalTransforms/tests/test_engine.py b/Products/PortalTransforms/tests/test_engine.py
index 0f6ba72..ed747b3 100644
--- a/Products/PortalTransforms/tests/test_engine.py
+++ b/Products/PortalTransforms/tests/test_engine.py
@@ -10,6 +10,7 @@
 
 
 class BaseTransform:
+
     def name(self):
         return getattr(self, '__name__', self.__class__.__name__)
 
@@ -122,7 +123,7 @@ def afterSetUp(self):
             self.engine.manage_delPolicies([mt])
 
     def register(self):
-        #A default set of transforms to prove the interfaces work
+        # A default set of transforms to prove the interfaces work
         self.engine.registerTransform(HtmlToText())
         self.engine.registerTransform(FooToBar())
 
@@ -226,9 +227,9 @@ def testPolicy(self):
 
         path = self.engine._findPath('text/html', mt, required)
         self.assertEqual(str(path),
-                             "[<Transform at dummy_html_filter1>, "
-                             "<Transform at dummy_html_filter2>, "
-                             "<Transform at safe_html>]")
+                         "[<Transform at dummy_html_filter1>, "
+                         "<Transform at dummy_html_filter2>, "
+                         "<Transform at safe_html>]")
 
     def testSame(self):
         data = "This is a test"
diff --git a/Products/PortalTransforms/tests/test_graph.py b/Products/PortalTransforms/tests/test_graph.py
index e05783c..875536d 100644
--- a/Products/PortalTransforms/tests/test_graph.py
+++ b/Products/PortalTransforms/tests/test_graph.py
@@ -38,8 +38,10 @@ def testFindPath(self):
         """
         # we need a DummyTransform class
         class DT:
+
             def __init__(self, name):
                 self._name = name
+
             def name(self):
                 return self._name
 
@@ -57,7 +59,7 @@ def name(self):
                   '6': [DT('transform4-6')]},
             '5': {'3': [DT('transform5-3')]},
             '7': {'6': [DT('transform7-6')]},
-            }
+        }
         expectedPathes = {
             '1-1': [],
             '1-2': ['transform1-2'],
@@ -71,7 +73,7 @@ def name(self):
             '2-4': ['transform2-4'],
             '4-2': ['transform4-5', 'transform5-3', 'transform3-2'],
             '5-3': ['transform5-3'],
-            }
+        }
         self.engine._mtmap = dummyMap1
         for orig in ['1', '2', '3', '4', '5', '6', '7']:
             for target in ['1', '2', '3', '4', '5', '6', '7']:
diff --git a/Products/PortalTransforms/tests/test_intelligenttext.py b/Products/PortalTransforms/tests/test_intelligenttext.py
index c2b5013..55dc448 100644
--- a/Products/PortalTransforms/tests/test_intelligenttext.py
+++ b/Products/PortalTransforms/tests/test_intelligenttext.py
@@ -20,12 +20,14 @@ def performTransform(self, orig, targetMimetype='text/html',
     def testHyperlinks(self):
         orig = "A test http://test.com"
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test <a href="http://test.com" rel="nofollow">http://test.com</a>')
+        self.assertEqual(
+            new, 'A test <a href="http://test.com" rel="nofollow">http://test.com</a>')
 
     def testMailto(self):
         orig = "A test test@test.com of mailto"
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto')
+        self.assertEqual(
+            new, 'A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto')
 
     def testTextAndLinks(self):
         orig = """A test
@@ -33,9 +35,9 @@ def testTextAndLinks(self):
 Mail: test@test.com End
 URL: http://foo.com End"""
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test<br />' \
-                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />' \
-                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />' \
+        self.assertEqual(new, 'A test<br />'
+                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />'
+                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />'
                               'URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End')
 
     def testTextAndLinksAtEndOfLine(self):
@@ -44,9 +46,9 @@ def testTextAndLinksAtEndOfLine(self):
 Mail: test@test.com
 URL: http://foo.com"""
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test<br />' \
-                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />' \
-                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />' \
+        self.assertEqual(new, 'A test<br />'
+                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />'
+                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />'
                               'URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>')
 
     def testIndents(self):
@@ -55,9 +57,9 @@ def testIndents(self):
     Mail: test@test.com
       URL: http://foo.com"""
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test<br />' \
-                              '&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />' \
-                              '&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />' \
+        self.assertEqual(new, 'A test<br />'
+                              '&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />'
+                              '&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />'
                               '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>')
 
     def testEntities(self):
@@ -68,7 +70,8 @@ def testEntities(self):
     def testAccentuatedCharacters(self):
         orig = "The French use é à ô ù à and ç"
         new = self.performTransform(orig)
-        self.assertEqual(new, "The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;")
+        self.assertEqual(
+            new, "The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;")
 
 
 class TestHtmlToIntelligentText(TransformTestCase):
diff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py
index 3886353..9ddd670 100644
--- a/Products/PortalTransforms/tests/test_transforms.py
+++ b/Products/PortalTransforms/tests/test_transforms.py
@@ -8,7 +8,7 @@
 from Products.CMFCore.utils import getToolByName
 
 from utils import input_file_path, output_file_path, normalize_html,\
-     load, matching_inputs
+    load, matching_inputs
 from Products.PortalTransforms.data import datastream
 from Products.PortalTransforms.interfaces import IDataStream
 
@@ -18,14 +18,14 @@
 from Products.PortalTransforms.transforms.image_to_jpeg import image_to_jpeg
 from Products.PortalTransforms.transforms.image_to_bmp import image_to_bmp
 from Products.PortalTransforms.transforms.image_to_tiff import image_to_tiff
-from Products.PortalTransforms.transforms.image_to_ppm  import image_to_ppm
-from Products.PortalTransforms.transforms.image_to_pcx  import image_to_pcx
+from Products.PortalTransforms.transforms.image_to_ppm import image_to_ppm
+from Products.PortalTransforms.transforms.image_to_pcx import image_to_pcx
 
 from Products.PortalTransforms.transforms.word_to_html import word_to_html
 
-from Products.PortalTransforms.transforms.safe_html  import SafeHTML
-from Products.PortalTransforms.transforms.safe_html  import VALID_TAGS
-from Products.PortalTransforms.transforms.safe_html  import NASTY_TAGS
+from Products.PortalTransforms.transforms.safe_html import SafeHTML
+from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
+from Products.PortalTransforms.transforms.safe_html import NASTY_TAGS
 
 from Products.PortalTransforms.transforms.textile_to_html import HAS_TEXTILE
 from Products.PortalTransforms.transforms.markdown_to_html import HAS_MARKDOWN
@@ -69,10 +69,10 @@ def do_convert(self, filename=None):
         got_start = got.strip()[:20]
         expected_start = expected.strip()[:20]
         self.assertEqual(got_start, expected_start,
-                          '[%s]\n\n!=\n\n[%s]\n\nIN %s(%s)' % (
-            got_start, expected_start, self.transform.name(), self.input))
+                         '[%s]\n\n!=\n\n[%s]\n\nIN %s(%s)' % (
+                             got_start, expected_start, self.transform.name(), self.input))
         self.assertEqual(self.subobjects, len(res_data.getSubObjects()),
-                          '%s\n\n!=\n\n%s\n\nIN %s(%s)' % (
+                         '%s\n\n!=\n\n%s\n\nIN %s(%s)' % (
             self.subobjects, len(res_data.getSubObjects()),
             self.transform.name(), self.input))
 
@@ -93,6 +93,7 @@ def __repr__(self):
 
 
 class PILTransformsTest(ATSiteTestCase):
+
     def afterSetUp(self):
         ATSiteTestCase.afterSetUp(self)
         self.pt = self.portal.portal_transforms
@@ -104,7 +105,7 @@ def test_image_to_bmp(self):
         imgFile = open(input_file_path('logo.jpg'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/jpeg')
+                         'image/jpeg')
         data = self.pt.convertTo(target_mimetype='image/x-ms-bmp', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/x-ms-bmp')
 
@@ -113,7 +114,7 @@ def test_image_to_gif(self):
         imgFile = open(input_file_path('logo.png'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/png')
+                         'image/png')
         data = self.pt.convertTo(target_mimetype='image/gif', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/gif')
 
@@ -122,7 +123,7 @@ def test_image_to_jpeg(self):
         imgFile = open(input_file_path('logo.gif'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/gif')
+                         'image/gif')
         data = self.pt.convertTo(target_mimetype='image/jpeg', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/jpeg')
 
@@ -131,7 +132,7 @@ def test_image_to_png(self):
         imgFile = open(input_file_path('logo.jpg'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/jpeg')
+                         'image/jpeg')
         data = self.pt.convertTo(target_mimetype='image/png', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/png')
 
@@ -140,7 +141,7 @@ def test_image_to_pcx(self):
         imgFile = open(input_file_path('logo.gif'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/gif')
+                         'image/gif')
         data = self.pt.convertTo(target_mimetype='image/pcx', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/pcx')
 
@@ -149,18 +150,18 @@ def test_image_to_ppm(self):
         imgFile = open(input_file_path('logo.png'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/png')
+                         'image/png')
         data = self.pt.convertTo(target_mimetype='image/x-portable-pixmap',
                                  orig=data)
         self.assertEqual(data.getMetadata()['mimetype'],
-                             'image/x-portable-pixmap')
+                         'image/x-portable-pixmap')
 
     def test_image_to_tiff(self):
         self.pt.registerTransform(image_to_tiff())
         imgFile = open(input_file_path('logo.jpg'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/jpeg')
+                         'image/jpeg')
         data = self.pt.convertTo(target_mimetype='image/tiff', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/tiff')
 
@@ -195,6 +196,7 @@ def test_charref_data(self):
         data = self.pt.convertTo(target_mimetype='text/x-html-safe', orig=orig)
         self.assertEqual(data.getData(), orig)
 
+
 class SafeHtmlTransformsWithScriptTest(ATSiteTestCase):
 
     def afterSetUp(self):
@@ -286,7 +288,7 @@ class ParsersTestCase(unittest.TestCase):
 
     def test_javascript_on_attr(self):
         from Products.PortalTransforms.libtransforms.utils import (
-                scrubHTMLNoRaise, scrubHTML)
+            scrubHTMLNoRaise, scrubHTML)
         from Products.PortalTransforms.libtransforms.utils import IllegalHTML
 
         htmlFile = open(input_file_path('test_js_on.html'), 'rb')
@@ -297,7 +299,7 @@ def test_javascript_on_attr(self):
 
     def test_javascript_uri(self):
         from Products.PortalTransforms.libtransforms.utils import (
-                scrubHTMLNoRaise, scrubHTML)
+            scrubHTMLNoRaise, scrubHTML)
         from Products.PortalTransforms.libtransforms.utils import IllegalHTML
 
         htmlFile = open(input_file_path('test_js_uri.html'), 'rb')
@@ -308,7 +310,7 @@ def test_javascript_uri(self):
 
     def test_invalid_tags(self):
         from Products.PortalTransforms.libtransforms.utils import (
-                scrubHTMLNoRaise, scrubHTML)
+            scrubHTMLNoRaise, scrubHTML)
         from Products.PortalTransforms.libtransforms.utils import IllegalHTML
 
         htmlFile = open(input_file_path('test_invalid_tags.html'), 'rb')
@@ -360,26 +362,26 @@ def test_invalid_tags(self):
     ('Products.PortalTransforms.transforms.image_to_pcx',
      "logo.png", "logo.pcx", None, 0,
      ),
-   )
+)
 if HAS_MARKDOWN:
     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (
         ('Products.PortalTransforms.transforms.markdown_to_html',
          "markdown.txt", "markdown.html", None, 0,
          ),
-       )
+    )
 if HAS_TEXTILE:
     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (
         ('Products.PortalTransforms.transforms.textile_to_html',
          "input.textile", "textile.html", None, 0,
-        ),
-       )
+         ),
+    )
 
 
 def initialise(transform, normalize, pattern):
     global TRANSFORMS_TESTINFO
     for fname in matching_inputs(pattern):
         outname = '%s.out' % fname.split('.')[0]
-        #print transform, fname, outname
+        # print transform, fname, outname
         TRANSFORMS_TESTINFO += ((transform, fname, outname, normalize, 0),)
 
 
diff --git a/Products/PortalTransforms/tests/word.py b/Products/PortalTransforms/tests/word.py
index 6c66a72..4c3bc4e 100644
--- a/Products/PortalTransforms/tests/word.py
+++ b/Products/PortalTransforms/tests/word.py
@@ -1,21 +1,22 @@
 from rigging import transformer
 
 
-## BIG BAD FUNCTIONAL TEST OF OOo Word Conversion
-## The interfaces work, but are not quite what we need
-## I might have to back fill a chain from source/dest graphing
+# BIG BAD FUNCTIONAL TEST OF OOo Word Conversion
+# The interfaces work, but are not quite what we need
+# I might have to back fill a chain from source/dest graphing
 
 file = "/tmp/word.doc"
 
 
 class curry:
+
     def __init__(self, func, *fixed_args):
         self.func = func
         self.fixed_args = fixed_args
 
     def __call__(self, *variable_args):
         return apply(self.func, self.fixed_args +
-          variable_args)
+                     variable_args)
 
 data = open("/tmp/word.doc", "r").read()
 
diff --git a/Products/PortalTransforms/transforms/__init__.py b/Products/PortalTransforms/transforms/__init__.py
index be6014d..0777f5d 100644
--- a/Products/PortalTransforms/transforms/__init__.py
+++ b/Products/PortalTransforms/transforms/__init__.py
@@ -1,15 +1,15 @@
-### Register Transforms
-### This is interesting because we don't expect all transforms to be
-### available on all platforms. To do this we allow things to fail at
-### two levels
-### 1) Imports
-###    If the import fails the module is removed from the list and
-###    will not be processed/registered
-### 2) Registration
-###    A second phase happens when the loaded modules register method
-###    is called and this produces an instance that will be used to
-###    implement the transform, if register needs to fail for now it
-###    should raise an ImportError as well (dumb, I know)
+# Register Transforms
+# This is interesting because we don't expect all transforms to be
+# available on all platforms. To do this we allow things to fail at
+# two levels
+# 1) Imports
+# If the import fails the module is removed from the list and
+# will not be processed/registered
+# 2) Registration
+# A second phase happens when the loaded modules register method
+# is called and this produces an instance that will be used to
+# implement the transform, if register needs to fail for now it
+# should raise an ImportError as well (dumb, I know)
 
 from logging import DEBUG, ERROR
 from Products.PortalTransforms.utils import log
@@ -37,11 +37,15 @@
     'lynx_dump',      # lynx -dump
     'python',         # python source files, no dependancies
     'identity',       # identity transform, no dependancies
-    'markdown_to_html',  # markdown, depends on http://surfnet.dl.sourceforge.net/sourceforge/python-markdown/markdown-1-5.py
-    'textile_to_html',  # textile, depends on PyTextile http://dom.eav.free.fr/python/textile-mirror-2.0.10.tar.gz
+    # markdown, depends on
+    # http://surfnet.dl.sourceforge.net/sourceforge/python-markdown/markdown-1-5.py
+    'markdown_to_html',
+    # textile, depends on PyTextile
+    # http://dom.eav.free.fr/python/textile-mirror-2.0.10.tar.gz
+    'textile_to_html',
     'web_intelligent_plain_text_to_html',
     'html_to_web_intelligent_plain_text',
-    ]
+]
 
 g = globals()
 transforms = []
diff --git a/Products/PortalTransforms/transforms/html_body.py b/Products/PortalTransforms/transforms/html_body.py
index 78181ab..aaa7071 100644
--- a/Products/PortalTransforms/transforms/html_body.py
+++ b/Products/PortalTransforms/transforms/html_body.py
@@ -18,7 +18,7 @@ def __init__(self, name=None):
                 ('list',
                  'Inputs',
                  'Input(s) MIME type. Change with care.'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/html_to_text.py b/Products/PortalTransforms/transforms/html_to_text.py
index d7a813b..b90dd18 100644
--- a/Products/PortalTransforms/transforms/html_to_text.py
+++ b/Products/PortalTransforms/transforms/html_to_text.py
@@ -25,12 +25,11 @@ def sub_func(matchobj):
             return res
         return res.encode('utf-8')
 
-
     return html_to_text("html_to_text",
-                       ('<script [^>]>.*</script>(?im)', ' '),
-                       ('<style [^>]>.*</style>(?im)', ' '),
-                       ('<head [^>]>.*</head>(?im)', ' '),
-                       ('(?im)</?(font|em|i|strong|b)(?=\W)[^>]*>', ''),
-                       ('<[^>]*>(?i)(?m)', ' '),
-                       (r'&([a-zA-Z0-9#]*?);', sub_func),
-                       )
+                        ('<script [^>]>.*</script>(?im)', ' '),
+                        ('<style [^>]>.*</style>(?im)', ' '),
+                        ('<head [^>]>.*</head>(?im)', ' '),
+                        ('(?im)</?(font|em|i|strong|b)(?=\W)[^>]*>', ''),
+                        ('<[^>]*>(?i)(?m)', ' '),
+                        (r'&([a-zA-Z0-9#]*?);', sub_func),
+                        )
diff --git a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
index 5a99f31..50f3c3b 100644
--- a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
+++ b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
@@ -23,7 +23,7 @@ def __init__(self, name=None, inputs=('text/html',), tab_width=4):
                 ('string',
                  'Tab width',
                  'Number of spaces for a tab in the input'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/identity.py b/Products/PortalTransforms/transforms/identity.py
index ff67c17..b17167d 100644
--- a/Products/PortalTransforms/transforms/identity.py
+++ b/Products/PortalTransforms/transforms/identity.py
@@ -19,13 +19,13 @@ def __init__(self, name=None, **kwargs):
         self.config = {
             'inputs': ('text/x-rst',),
             'output': 'text/plain',
-            }
+        }
         self.config_metadata = {
             'inputs':
                 ('list', 'Inputs', 'Input(s) MIME type. Change with care.'),
             'output':
                 ('string', 'Output', 'Output MIME type. Change with care.'),
-            }
+        }
         self.config.update(kwargs)
 
     def __getattr__(self, attr):
diff --git a/Products/PortalTransforms/transforms/lynx_dump.py b/Products/PortalTransforms/transforms/lynx_dump.py
index ec55021..ef54db8 100644
--- a/Products/PortalTransforms/transforms/lynx_dump.py
+++ b/Products/PortalTransforms/transforms/lynx_dump.py
@@ -47,8 +47,8 @@ def convert(self, data, cache, **kwargs):
         return cache
 
     def invokeCommand(self, tmpdir, inputname, outname):
-        os.system('cd "%s" && %s %s "%s" 1>"%s" 2>/dev/null' % \
-               (tmpdir, self.binary, self.binaryArgs, inputname, outname))
+        os.system('cd "%s" && %s %s "%s" 1>"%s" 2>/dev/null' %
+                  (tmpdir, self.binary, self.binaryArgs, inputname, outname))
 
     def astext(self, outname):
         txtfile = open("%s" % (outname), 'r')
diff --git a/Products/PortalTransforms/transforms/office_com.py b/Products/PortalTransforms/transforms/office_com.py
index 9a0474d..a2f46b1 100644
--- a/Products/PortalTransforms/transforms/office_com.py
+++ b/Products/PortalTransforms/transforms/office_com.py
@@ -4,7 +4,14 @@
 
 import os.path
 
-import win32com, sys, string, win32api, traceback, re, tempfile, os
+import win32com
+import sys
+import string
+import win32api
+import traceback
+import re
+import tempfile
+import os
 import win32com.client
 from win32com.client import gencache
 from win32com.client import constants, Dispatch
@@ -67,6 +74,6 @@ def html(self):
         body = bodyfinder(html)
         return body
 
-## This function has to be done. It's more difficult to delete the temp
-## directory under Windows, because there is sometimes a directory in it.
-##    def cleanDir(self, tmpdir):
+# This function has to be done. It's more difficult to delete the temp
+# directory under Windows, because there is sometimes a directory in it.
+# def cleanDir(self, tmpdir):
diff --git a/Products/PortalTransforms/transforms/office_uno.py b/Products/PortalTransforms/transforms/office_uno.py
index 416c4a1..6a1b83a 100644
--- a/Products/PortalTransforms/transforms/office_uno.py
+++ b/Products/PortalTransforms/transforms/office_uno.py
@@ -26,13 +26,13 @@ def convert(self):
 
         localContext = uno.getComponentContext()
         resolver = localContext.ServiceManager.createInstanceWithContext(
-                       'com.sun.star.bridge.UnoUrlResolver', localContext)
+            'com.sun.star.bridge.UnoUrlResolver', localContext)
         ctx = resolver.resolve(
-                       'uno:socket,host=localhost,port=2002;'
-                       'urp;StarOffice.ComponentContext')
+            'uno:socket,host=localhost,port=2002;'
+            'urp;StarOffice.ComponentContext')
         smgr = ctx.ServiceManager
         desktop = smgr.createInstanceWithContext(
-                       'com.sun.star.frame.Desktop', ctx)
+            'com.sun.star.frame.Desktop', ctx)
 
         # load the document
         url = unohelper.systemPathToFileUrl(self.fullname)
@@ -40,8 +40,8 @@ def convert(self):
 
         filterName = 'swriter: HTML (StarWriter)'
         storeProps = (
-                       PropertyValue('FilterName', 0, filterName, 0),
-                      )
+            PropertyValue('FilterName', 0, filterName, 0),
+        )
 
         # pre-create a empty file for security reason
         url = unohelper.systemPathToFileUrl(self.outputfile)
diff --git a/Products/PortalTransforms/transforms/office_wvware.py b/Products/PortalTransforms/transforms/office_wvware.py
index 135dfde..f467542 100644
--- a/Products/PortalTransforms/transforms/office_wvware.py
+++ b/Products/PortalTransforms/transforms/office_wvware.py
@@ -29,7 +29,7 @@ def convert(self):
 
         if os.name == 'posix':
             os.system('cd "%s" && %s --charset=utf-8 "%s" "%s.html"' % (
-                    tmpdir, self.binary, self.fullname, self.__name__))
+                tmpdir, self.binary, self.fullname, self.__name__))
 
     def html(self):
         htmlfile = open("%s/%s.html" % (self.tmpdir, self.__name__), 'r')
diff --git a/Products/PortalTransforms/transforms/pdf_to_html.py b/Products/PortalTransforms/transforms/pdf_to_html.py
index 27f9f24..e5785ae 100644
--- a/Products/PortalTransforms/transforms/pdf_to_html.py
+++ b/Products/PortalTransforms/transforms/pdf_to_html.py
@@ -60,7 +60,7 @@ def convert(self, data, cache, **kwargs):
     def invokeCommand(self, tmpdir, fullname):
         if os.name == 'posix':
             cmd = 'cd "%s" && %s %s "%s" 2>error_log 1>/dev/null' % (
-                   tmpdir, self.binary, self.binaryArgs, fullname)
+                tmpdir, self.binary, self.binaryArgs, fullname)
         else:
             cmd = 'cd "%s" && %s %s "%s"' % (
                   tmpdir, self.binary, self.binaryArgs, fullname)
diff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py
index 92a154c..9e0901f 100644
--- a/Products/PortalTransforms/transforms/python.py
+++ b/Products/PortalTransforms/transforms/python.py
@@ -70,29 +70,29 @@ def format(self):
     def __call__(self, toktype, toktext, (srow, scol), (erow, ecol), line):
         """ Token handler.
         """
-        #print "type", toktype, token.tok_name[toktype], "text", toktext,
-        #print "start", srow,scol, "end", erow,ecol, "<br>"
+        # print "type", toktype, token.tok_name[toktype], "text", toktext,
+        # print "start", srow,scol, "end", erow,ecol, "<br>"
 
-        ## calculate new positions
+        # calculate new positions
         oldpos = self.pos
         newpos = self.lines[srow] + scol
         self.pos = newpos + len(toktext)
 
-        ## handle newlines
+        # handle newlines
         if toktype in [token.NEWLINE, tokenize.NL]:
             self.out.write('\n')
             return
 
-        ## send the original whitespace, if needed
+        # send the original whitespace, if needed
         if newpos > oldpos:
             self.out.write(self.raw[oldpos:newpos])
 
-        ## skip indenting tokens
+        # skip indenting tokens
         if toktype in [token.INDENT, token.DEDENT]:
             self.pos = newpos
             return
 
-        ## map token type to a group
+        # map token type to a group
         if token.LPAR <= toktype and toktype <= token.OP:
             toktype = 'OP'
         elif toktype == token.NAME and keyword.iskeyword(toktext):
@@ -100,10 +100,10 @@ def __call__(self, toktype, toktext, (srow, scol), (erow, ecol), line):
         else:
             toktype = tokenize.tok_name[toktype]
 
-        open_tag = self.tags.get('OPEN_'+toktype, self.tags['OPEN_TEXT'])
-        close_tag = self.tags.get('CLOSE_'+toktype, self.tags['CLOSE_TEXT'])
+        open_tag = self.tags.get('OPEN_' + toktype, self.tags['OPEN_TEXT'])
+        close_tag = self.tags.get('CLOSE_' + toktype, self.tags['CLOSE_TEXT'])
 
-        ## send text
+        # send text
         self.out.write(open_tag)
         self.out.write(html_quote(toktext))
         self.out.write(close_tag)
@@ -135,7 +135,7 @@ class PythonTransform:
         'CLOSE_KEYWORD':     '</span>',
         'OPEN_TEXT':         '',
         'CLOSE_TEXT':        '',
-        }
+    }
 
     def name(self):
         return self.__name__
diff --git a/Products/PortalTransforms/transforms/rest.py b/Products/PortalTransforms/transforms/rest.py
index 6d0605a..ca3b706 100644
--- a/Products/PortalTransforms/transforms/rest.py
+++ b/Products/PortalTransforms/transforms/rest.py
@@ -56,7 +56,7 @@ def __init__(self, name=None, **kwargs):
             'output': self.output,
             'report_level': 2,
             'initial_header_level': 2,
-            }
+        }
 
         self.config_metadata = {
             'inputs':
@@ -69,7 +69,7 @@ def __init__(self, name=None, **kwargs):
                 ('int', 'Report Level',
                  'Level of error reporting. Set to "1" will display all '
                  'messages. Setting it to "5" will display no messages.'),
-            }
+        }
 
         self.config.update(kwargs)
 
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index e2e2b46..4e522fe 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -9,69 +9,20 @@
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.utils import safeToInt
 
+
 class IllegalHTML(ValueError):
     """ Illegal HTML error.
     """
 
 
 # These are the HTML tags that we will leave intact
-VALID_TAGS = { 'a'          : 1
-             , 'b'          : 1
-             , 'base'       : 0
-             , 'big'        : 1
-             , 'blockquote' : 1
-             , 'body'       : 1
-             , 'br'         : 0
-             , 'caption'    : 1
-             , 'cite'       : 1
-             , 'code'       : 1
-             , 'dd'         : 1
-             , 'div'        : 1
-             , 'dl'         : 1
-             , 'dt'         : 1
-             , 'em'         : 1
-             , 'h1'         : 1
-             , 'h2'         : 1
-             , 'h3'         : 1
-             , 'h4'         : 1
-             , 'h5'         : 1
-             , 'h6'         : 1
-             , 'head'       : 1
-             , 'hr'         : 0
-             , 'html'       : 1
-             , 'i'          : 1
-             , 'img'        : 0
-             , 'kbd'        : 1
-             , 'li'         : 1
-           # , 'link'       : 1 type="script" hoses us
-             , 'meta'       : 0
-             , 'ol'         : 1
-             , 'p'          : 1
-             , 'pre'        : 1
-             , 'small'      : 1
-             , 'span'       : 1
-             , 'strong'     : 1
-             , 'sub'        : 1
-             , 'sup'        : 1
-             , 'table'      : 1
-             , 'tbody'      : 1
-             , 'td'         : 1
-             , 'th'         : 1
-             , 'title'      : 1
-             , 'tr'         : 1
-             , 'tt'         : 1
-             , 'u'          : 1
-             , 'ul'         : 1
-             , 'iframe'     : 1
-             }
-
-NASTY_TAGS = { 'script'     : 1
-             , 'object'     : 1
-             , 'embed'      : 1
-             , 'applet'     : 1
-             , 'style'      : 1  # this helps improve Word HTML cleanup.
-             , 'meta'       : 1  # allowed by parsers, but can cause unexpected behavior
-             }
+VALID_TAGS = {'a': 1, 'b': 1, 'base': 0, 'big': 1, 'blockquote': 1, 'body': 1, 'br': 0, 'caption': 1, 'cite': 1, 'code': 1, 'dd': 1, 'div': 1, 'dl': 1, 'dt': 1, 'em': 1, 'h1': 1, 'h2': 1, 'h3': 1, 'h4': 1, 'h5': 1, 'h6': 1, 'head': 1, 'hr': 0, 'html': 1, 'i': 1, 'img': 0, 'kbd': 1, 'li': 1              # , 'link'       : 1 type="script" hoses us
+              , 'meta': 0, 'ol': 1, 'p': 1, 'pre': 1, 'small': 1, 'span': 1, 'strong': 1, 'sub': 1, 'sup': 1, 'table': 1, 'tbody': 1, 'td': 1, 'th': 1, 'title': 1, 'tr': 1, 'tt': 1, 'u': 1, 'ul': 1, 'iframe': 1
+              }
+
+NASTY_TAGS = {'script': 1, 'object': 1, 'embed': 1, 'applet': 1, 'style': 1  # this helps improve Word HTML cleanup.
+              , 'meta': 1  # allowed by parsers, but can cause unexpected behavior
+              }
 
 
 # add some tags to allowed types.
@@ -120,7 +71,6 @@ class IllegalHTML(ValueError):
 VALID_TAGS['video'] = 1
 
 
-
 msg_pat = """
 <div class="system-message">
 <p class="system-message-title">System message: %s</p>
@@ -128,6 +78,8 @@ class IllegalHTML(ValueError):
 """
 
 CSS_COMMENT = re.compile(r'/\*.*\*/')
+
+
 def hasScript(s):
     """Dig out evil Java/VB script inside an HTML attribute.
 
@@ -153,6 +105,8 @@ def hasScript(s):
 
 
 CHR_RE = re.compile(r'\\(\d+)')
+
+
 def unescape_chr(matchobj):
     try:
         return chr(int(matchobj.group(1), 16))
@@ -172,7 +126,7 @@ def decode_charref(s):
             c = c.encode('utf8')
         return c
     except ValueError:
-        return '&#'+s+';'
+        return '&#' + s + ';'
 
 
 def decode_entityref(s):
@@ -193,6 +147,7 @@ def decode_entityref(s):
 CHARREF_RE = re.compile(r"&(?:amp;)?#([xX]?[0-9a-fA-F]+);?")
 ENTITYREF_RE = re.compile(r"&(\w{1,32});?")
 
+
 def decode_htmlentities(s):
     # Decode HTML5 entities (numeric or named).
     s = CHR_RE.sub(unescape_chr, s)
@@ -1371,7 +1326,8 @@ def decode_htmlentities(s):
     'nesim;': u'\u2242\u0338',
     'NestedGreaterGreater;': u'\u226b',
     'NestedLessLess;': u'\u226a',
-    'NewLine;': u'\n', # should be \u240a but Chrome treats it as whitespace so...
+    # should be \u240a but Chrome treats it as whitespace so...
+    'NewLine;': u'\n',
     'nexist;': u'\u2204',
     'nexists;': u'\u2204',
     'Nfr;': u'\U0001d511',
@@ -2110,7 +2066,7 @@ def decode_htmlentities(s):
     'swnwar;': u'\u292a',
     'szlig;': u'\xdf',
     'szlig': u'\xdf',
-    'Tab;': u'\t', # should be \u2409 but Chrome treats it as whitespace so...
+    'Tab;': u'\t',  # should be \u2409 but Chrome treats it as whitespace so...
     'target;': u'\u2316',
     'Tau;': u'\u03a4',
     'tau;': u'\u03c4',
@@ -2521,7 +2477,7 @@ def unknown_starttag(self, tag, attrs):
                 else:
                     self.result.append(' %s="%s"' % (k, v))
 
-            #UNUSED endTag = '</%s>' % tag
+            # UNUSED endTag = '</%s>' % tag
             if safeToInt(self.valid.get(tag)):
                 self.result.append('>')
             else:
@@ -2547,17 +2503,17 @@ def parse_declaration(self, i):
         """Fix handling of CDATA sections. Code borrowed from BeautifulSoup.
         """
         j = None
-        if self.rawdata[i:i+9] == '<![CDATA[':
+        if self.rawdata[i:i + 9] == '<![CDATA[':
             k = self.rawdata.find(']]>', i)
             if k == -1:
                 k = len(self.rawdata)
-            j = k+3
+            j = k + 3
         else:
             try:
                 j = SGMLParser.parse_declaration(self, i)
             except SGMLParseError:
                 j = len(self.rawdata)
-        return j  
+        return j
 
     def getResult(self):
         return ''.join(self.result)
@@ -2565,7 +2521,6 @@ def getResult(self):
 
 def scrubHTML(html, valid=VALID_TAGS, nasty=NASTY_TAGS,
               remove_javascript=True, raise_error=True):
-
     """ Strip illegal HTML tags from string text.
     """
     parser = StrippingParser(valid=valid, nasty=nasty,
@@ -2614,7 +2569,7 @@ def __init__(self, name=None, **kwargs):
             'class_blacklist': [],
             'remove_javascript': 1,
             'disable_transform': 0,
-            }
+        }
 
         self.config_metadata = {
             'inputs': ('list',
@@ -2662,7 +2617,7 @@ def __init__(self, name=None, **kwargs):
             'disable_transform': ("int",
                                   'disable_transform',
                                   'If 1, nothing is done.'),
-            }
+        }
 
         self.config.update(kwargs)
 
diff --git a/Products/PortalTransforms/transforms/text_pre_to_html.py b/Products/PortalTransforms/transforms/text_pre_to_html.py
index 2f10e90..5f81265 100644
--- a/Products/PortalTransforms/transforms/text_pre_to_html.py
+++ b/Products/PortalTransforms/transforms/text_pre_to_html.py
@@ -16,7 +16,7 @@ def __init__(self, name=None):
         self.config_metadata = {
             'inputs': ('list', 'Inputs',
                        'Input(s) MIME type. Change with care.'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/text_to_html.py b/Products/PortalTransforms/transforms/text_to_html.py
index 97ef9e5..7fd68b0 100644
--- a/Products/PortalTransforms/transforms/text_to_html.py
+++ b/Products/PortalTransforms/transforms/text_to_html.py
@@ -18,7 +18,7 @@ def __init__(self, name=None, inputs=('text/plain',)):
                 'list',
                 'Inputs',
                 'Input(s) MIME type. Change with care.'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
index 6d84e3e..cfc867b 100644
--- a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
+++ b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
@@ -24,7 +24,7 @@ def __init__(self, name=None, inputs=('text/x-web-intelligent',),
                 'string',
                 'Tab width',
                 'Number of spaces for a tab in the input'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/unsafe_transforms/build_transforms.py b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
index 971a24e..4e24568 100644
--- a/Products/PortalTransforms/unsafe_transforms/build_transforms.py
+++ b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
@@ -6,42 +6,42 @@
 
 COMMAND_CONFIGS = (
     ('lynx_dump', '.html',
-     {'binary_path'  : 'lynx',
-      'command_line' : '-dump %(input)s',
-      'inputs'       : ('text/html',),
-      'output'       : 'text/plain',
+     {'binary_path': 'lynx',
+      'command_line': '-dump %(input)s',
+      'inputs': ('text/html',),
+      'output': 'text/plain',
       }),
     ('tidy_html', '.html',
-     {'binary_path'  : 'tidy',
-      'command_line' : '%(input)s',
-      'inputs'       : ('text/html',),
-      'output'       : 'text/html',
+     {'binary_path': 'tidy',
+      'command_line': '%(input)s',
+      'inputs': ('text/html',),
+      'output': 'text/html',
       }),
     ('rtf_to_html', None,
-     {'binary_path'  : 'unrtf',
-      'command_line' : '%(input)s',
-      'inputs'       : ('application/rtf',),
-      'output'       : 'text/html',
+     {'binary_path': 'unrtf',
+      'command_line': '%(input)s',
+      'inputs': ('application/rtf',),
+      'output': 'text/html',
       }),
     ('ppt_to_html', None,
-     {'binary_path'  : 'ppthtml',
-      'command_line' : '%(input)s',
-      'inputs'       : ('application/vnd.ms-powerpoint',),
-      'output'       : 'text/html',
+     {'binary_path': 'ppthtml',
+      'command_line': '%(input)s',
+      'inputs': ('application/vnd.ms-powerpoint',),
+      'output': 'text/html',
       }),
     ('excel_to_html', None,
-     {'binary_path'  : 'xlhtml',
-      'command_line' : '-nh -a %(input)s',
-      'inputs'       : ('application/vnd.ms-excel',),
-      'output'       : 'text/html',
+     {'binary_path': 'xlhtml',
+      'command_line': '-nh -a %(input)s',
+      'inputs': ('application/vnd.ms-excel',),
+      'output': 'text/html',
       }),
     ('ps_to_text', None,
-     {'binary_path'  : 'ps2ascii',
-      'command_line' : '%(input)s',
-      'inputs'       : ('application/postscript',),
-      'output'       : 'text/plain',
+     {'binary_path': 'ps2ascii',
+      'command_line': '%(input)s',
+      'inputs': ('application/postscript',),
+      'output': 'text/plain',
       }),
-    )
+)
 
 TRANSFORMS = {}
 
@@ -59,9 +59,9 @@
         TRANSFORMS[tr_name] = tr
 
 XMLPROCS_CONF = {
-    'xsltproc' : '--catalogs --xinclude -o %(output)s %(transform)s %(input)s',
-    '4xslt' : ' -o %(output)s %(input)s %(transform)s',
-    }
+    'xsltproc': '--catalogs --xinclude -o %(output)s %(transform)s %(input)s',
+    '4xslt': ' -o %(output)s %(input)s %(transform)s',
+}
 
 bin = None
 for proc in XMLPROCS_CONF.keys():
@@ -78,7 +78,7 @@
         name = "xml_to_" + output
         command_line = XMLPROCS_CONF[proc]
         tr = XsltTransform(name=name, inputs=('text/xml',),
-                           output='text/'+output,
+                           output='text/' + output,
                            binary_path=bin, command_line=command_line)
         TRANSFORMS[name] = tr
 
diff --git a/Products/PortalTransforms/unsafe_transforms/command.py b/Products/PortalTransforms/unsafe_transforms/command.py
index 9bc16ca..f531a52 100644
--- a/Products/PortalTransforms/unsafe_transforms/command.py
+++ b/Products/PortalTransforms/unsafe_transforms/command.py
@@ -30,7 +30,7 @@ def __init__(self, name=None, input_extension=None, **kwargs):
             'command_line': '',
             'inputs': ('text/plain',),
             'output': 'text/plain',
-            }
+        }
         self.config_metadata = {
             'binary_path': (
                 'string',
@@ -51,7 +51,7 @@ def __init__(self, name=None, input_extension=None, **kwargs):
                 'string',
                 'Output',
                 'Output MIME type. Change with care.'),
-            }
+        }
         self.config.update(kwargs)
         commandtransform.__init__(self, name=name,
                                   binary=self.config['binary_path'], **kwargs)
diff --git a/Products/PortalTransforms/unsafe_transforms/xml.py b/Products/PortalTransforms/unsafe_transforms/xml.py
index 5dee985..8eb092b 100644
--- a/Products/PortalTransforms/unsafe_transforms/xml.py
+++ b/Products/PortalTransforms/unsafe_transforms/xml.py
@@ -39,9 +39,9 @@ def __init__(self, name=None, **kwargs):
             'dtds': {
                 '-//OASIS//DTD DocBook V4.1//EN':
                     '/usr/share/sgml/docbook/xsl-stylesheets-1.29/html/docbook.xsl',
-                },
+            },
             'default_transform': '',
-            }
+        }
         self.config_metadata = {
             'binary_path': (
                 'string',
@@ -76,7 +76,7 @@ def __init__(self, name=None, **kwargs):
                 'string',
                 'Default xslt',
                 'Default xslt, used when no specific transformation is found.'),
-            }
+        }
         self.config.update(kwargs)
         if name:
             self.__name__ = name
diff --git a/bootstrap.py b/bootstrap.py
index a629566..f4b1c0a 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -119,7 +119,7 @@
     options.find_links or
     ('http://downloads.buildout.org/'
      if options.accept_buildout_test_releases else None)
-    )
+)
 if find_links:
     cmd.extend(['-f', find_links])
 
diff --git a/setup.py b/setup.py
index d01af2a..0cdd5a0 100644
--- a/setup.py
+++ b/setup.py
@@ -5,15 +5,15 @@
 setup(name='Products.PortalTransforms',
       version=version,
       description="MIME based content transformations",
-      long_description=open("README.rst").read() + "\n" + \
-                       open("CHANGES.rst").read(),
+      long_description=open("README.rst").read() + "\n" +
+      open("CHANGES.rst").read(),
       classifiers=[
-        "Framework :: Zope2",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.6",
-        "Programming Language :: Python :: 2.7",
-        ],
+          "Framework :: Zope2",
+          "Operating System :: OS Independent",
+          "Programming Language :: Python",
+          "Programming Language :: Python :: 2.6",
+          "Programming Language :: Python :: 2.7",
+      ],
       keywords='Zope Plone Transform',
       author='Benjamin Saller',
       author_email='plone-developers@lists.sourceforge.net',
@@ -23,11 +23,11 @@
       include_package_data=True,
       zip_safe=False,
       extras_require=dict(
-        test=[
-            'zope.testing',
-            'Products.Archetypes [test]',
-            'Pillow',
-        ],
+          test=[
+              'zope.testing',
+              'Products.Archetypes [test]',
+              'Pillow',
+          ],
       ),
       install_requires=[
           'setuptools',


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-19T22:37:40+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/030130d46255eae0b594dd6ab7286d23030baf65

 autopep8 -i --aggressive -r .

Files changed:
M Products/PortalTransforms/Transform.py
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/tests/word.py
M Products/PortalTransforms/transforms/__init__.py
M Products/PortalTransforms/transforms/html_to_text.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/safe_html.py

diff --git a/Products/PortalTransforms/Transform.py b/Products/PortalTransforms/Transform.py
index 286ebfc..14e82d0 100644
--- a/Products/PortalTransforms/Transform.py
+++ b/Products/PortalTransforms/Transform.py
@@ -25,7 +25,7 @@ def import_from_name(module_name):
     try:
         for sub in module_name.split('.')[1:]:
             m = getattr(m, sub)
-    except AttributeError, e:
+    except AttributeError as e:
         raise ImportError(str(e))
     return m
 
@@ -35,7 +35,7 @@ def make_config_persistent(kwargs):
     dictionary by persistent mapping.
     """
     for key, value in kwargs.items():
-        if type(value) == type({}):
+        if isinstance(value, type({})):
             p_value = PersistentMapping(value)
             kwargs[key] = p_value
         elif type(value) in (type(()), type([])):
@@ -151,7 +151,7 @@ def _tr_init(self, set_conf=0, transform=None):
     def _load_transform(self):
         try:
             m = import_from_name(self.module)
-        except ImportError, err:
+        except ImportError as err:
             transform = BrokenTransform(self.id, self.module, err)
             msg = ("Cannot register transform %s (ImportError), using "
                    "BrokenTransform: Error\n %s" % (self.id, err))
@@ -164,7 +164,7 @@ def _load_transform(self):
             raise TransformException(msg)
         try:
             transform = m.register()
-        except Exception, err:
+        except Exception as err:
             transform = BrokenTransform(self.id, self.module, err)
             msg = ("Cannot register transform %s, using BrokenTransform: "
                    "Error\n %s" % (self.id, err))
@@ -212,8 +212,7 @@ def get_parameters(self):
         """ get transform's parameters names """
         if not hasattr(self, '_v_transform'):
             self._load_transform()
-        keys = self._v_transform.config.keys()
-        keys.sort()
+        keys = sorted(self._v_transform.config.keys())
         return keys
 
     security.declareProtected(ManagePortal, 'get_parameter_value')
diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py
index 151914c..0285dee 100644
--- a/Products/PortalTransforms/TransformEngine.py
+++ b/Products/PortalTransforms/TransformEngine.py
@@ -349,7 +349,7 @@ def _findPath(self, orig, target, required_transforms=()):
                         # which also reach the required transform.
                         shortest = len(firstPath)
                         shortestFirstPath = firstPath
-            if shortestFirstPath == None:
+            if shortestFirstPath is None:
                 return None  # there is no path leading to this transform
             # Then we have to take this transform.
             secondPath = [requiredTransform]
diff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py
index 9ddd670..36033a0 100644
--- a/Products/PortalTransforms/tests/test_transforms.py
+++ b/Products/PortalTransforms/tests/test_transforms.py
@@ -405,7 +405,7 @@ def make_tests(test_descr=TRANSFORMS_TESTINFO):
     tests = []
     for _transform, tr_input, tr_output, _normalize, _subobjects in test_descr:
         # load transform if necessary
-        if type(_transform) is type(''):
+        if isinstance(_transform, type('')):
             try:
                 _transform = load(_transform).register()
             except MissingBinary:
diff --git a/Products/PortalTransforms/tests/word.py b/Products/PortalTransforms/tests/word.py
index 4c3bc4e..85a7a50 100644
--- a/Products/PortalTransforms/tests/word.py
+++ b/Products/PortalTransforms/tests/word.py
@@ -15,8 +15,8 @@ def __init__(self, func, *fixed_args):
         self.fixed_args = fixed_args
 
     def __call__(self, *variable_args):
-        return apply(self.func, self.fixed_args +
-                     variable_args)
+        return self.func(*self.fixed_args +
+                         variable_args)
 
 data = open("/tmp/word.doc", "r").read()
 
diff --git a/Products/PortalTransforms/transforms/__init__.py b/Products/PortalTransforms/transforms/__init__.py
index 0777f5d..cdd1f74 100644
--- a/Products/PortalTransforms/transforms/__init__.py
+++ b/Products/PortalTransforms/transforms/__init__.py
@@ -53,12 +53,12 @@
     try:
         ns = __import__(m, g, g, None)
         transforms.append(ns.register())
-    except ImportError, e:
+    except ImportError as e:
         msg = "Problem importing module %s : %s" % (m, e)
         log(msg, severity=ERROR)
-    except MissingBinary, e:
+    except MissingBinary as e:
         log(str(e), severity=DEBUG)
-    except Exception, e:
+    except Exception as e:
         import traceback
         traceback.print_exc()
         log("Raised error %s for %s" % (e, m), severity=ERROR)
diff --git a/Products/PortalTransforms/transforms/html_to_text.py b/Products/PortalTransforms/transforms/html_to_text.py
index b90dd18..3c7c67a 100644
--- a/Products/PortalTransforms/transforms/html_to_text.py
+++ b/Products/PortalTransforms/transforms/html_to_text.py
@@ -21,7 +21,7 @@ def sub_func(matchobj):
         else:
             res = unichr(result)
 
-        if type(full) is unicode:
+        if isinstance(full, unicode):
             return res
         return res.encode('utf-8')
 
diff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py
index 9e0901f..5f27dc8 100644
--- a/Products/PortalTransforms/transforms/python.py
+++ b/Products/PortalTransforms/transforms/python.py
@@ -24,7 +24,7 @@
 from zope.interface import implements
 from DocumentTemplate.DT_Util import html_quote
 
-## Python Source Parser #####################################################
+# Python Source Parser #####################################################
 
 _KEYWORD = token.NT_OFFSET + 1
 _TEXT = token.NT_OFFSET + 2
@@ -47,7 +47,7 @@ def format(self):
         # store line offsets in self.lines
         self.lines = [0, 0]
         pos = 0
-        while 1:
+        while True:
             pos = string.find(self.raw, '\n', pos) + 1
             if not pos:
                 break
@@ -60,20 +60,18 @@ def format(self):
         self.out.write('<pre class="python">\n')
         try:
             tokenize.tokenize(text.readline, self)
-        except tokenize.TokenError, ex:
+        except tokenize.TokenError as ex:
             msg = ex[0]
             line = ex[1][0]
             self.out.write("<h5 class='error>'ERROR: %s%s</h5>" % (
                 msg, self.raw[self.lines[line]:]))
         self.out.write('\n</pre>\n')
 
-    def __call__(self, toktype, toktext, (srow, scol), (erow, ecol), line):
+    def __call__(self, toktype, toktext, sx, ex, line):
         """ Token handler.
         """
-        # print "type", toktype, token.tok_name[toktype], "text", toktext,
-        # print "start", srow,scol, "end", erow,ecol, "<br>"
-
-        # calculate new positions
+        (srow, scol) = sx
+        (erow, ecol) = ex
         oldpos = self.pos
         newpos = self.lines[srow] + scol
         self.pos = newpos + len(toktext)
@@ -119,22 +117,22 @@ class PythonTransform:
     output = "text/html"
 
     config = {
-        'OPEN_NUMBER':       '<span style="color: #0080C0;">',
-        'CLOSE_NUMBER':      '</span>',
-        'OPEN_OP':           '<span style="color: #0000C0;">',
-        'CLOSE_OP':          '</span>',
-        'OPEN_STRING':       '<span style="color: #004080;">',
-        'CLOSE_STRING':      '</span>',
-        'OPEN_COMMENT':      '<span style="color: #008000;">',
-        'CLOSE_COMMENT':      '</span>',
-        'OPEN_NAME':         '<span style="color: #000000;">',
-        'CLOSE_NAME':        '</span>',
-        'OPEN_ERRORTOKEN':   '<span style="color: #FF8080;">',
-        'CLOSE_ERRORTOKEN':  '</span>',
-        'OPEN_KEYWORD':      '<span style="color: #C00000;">',
-        'CLOSE_KEYWORD':     '</span>',
-        'OPEN_TEXT':         '',
-        'CLOSE_TEXT':        '',
+        'OPEN_NUMBER': '<span style="color: #0080C0;">',
+        'CLOSE_NUMBER': '</span>',
+        'OPEN_OP': '<span style="color: #0000C0;">',
+        'CLOSE_OP': '</span>',
+        'OPEN_STRING': '<span style="color: #004080;">',
+        'CLOSE_STRING': '</span>',
+        'OPEN_COMMENT': '<span style="color: #008000;">',
+        'CLOSE_COMMENT': '</span>',
+        'OPEN_NAME': '<span style="color: #000000;">',
+        'CLOSE_NAME': '</span>',
+        'OPEN_ERRORTOKEN': '<span style="color: #FF8080;">',
+        'CLOSE_ERRORTOKEN': '</span>',
+        'OPEN_KEYWORD': '<span style="color: #C00000;">',
+        'CLOSE_KEYWORD': '</span>',
+        'OPEN_TEXT': '',
+        'CLOSE_TEXT': '',
     }
 
     def name(self):
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index 4e522fe..1d77b46 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -2656,7 +2656,7 @@ def convert(self, orig, data, **kwargs):
                     remove_javascript=self.config.get(
                         'remove_javascript', True),
                     raise_error=False)
-            except IllegalHTML, inst:
+            except IllegalHTML as inst:
                 data.setData(msg_pat % ("Error", str(inst)))
                 break
             else:


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-19T22:46:52+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/98ef14f003dec81e1c4f12b85cae27a74cebdb91

isort

Files changed:
A .isort.cfg
M Products/PortalTransforms/Transform.py
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/__init__.py
M Products/PortalTransforms/cache.py
M Products/PortalTransforms/chain.py
M Products/PortalTransforms/data.py
M Products/PortalTransforms/libtransforms/commandtransform.py
M Products/PortalTransforms/libtransforms/piltransform.py
M Products/PortalTransforms/libtransforms/retransform.py
M Products/PortalTransforms/libtransforms/utils.py
M Products/PortalTransforms/setuphandlers.py
M Products/PortalTransforms/tests/test_engine.py
M Products/PortalTransforms/tests/test_graph.py
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/tests/utils.py
M Products/PortalTransforms/transforms/__init__.py
M Products/PortalTransforms/transforms/broken.py
M Products/PortalTransforms/transforms/html_body.py
M Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
M Products/PortalTransforms/transforms/lynx_dump.py
M Products/PortalTransforms/transforms/markdown_to_html.py
M Products/PortalTransforms/transforms/office_com.py
M Products/PortalTransforms/transforms/office_uno.py
M Products/PortalTransforms/transforms/office_wvware.py
M Products/PortalTransforms/transforms/pdf_to_html.py
M Products/PortalTransforms/transforms/pdf_to_text.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/rest.py
M Products/PortalTransforms/transforms/rtf_to_html.py
M Products/PortalTransforms/transforms/rtf_to_xml.py
M Products/PortalTransforms/transforms/safe_html.py
M Products/PortalTransforms/transforms/st.py
M Products/PortalTransforms/transforms/text_pre_to_html.py
M Products/PortalTransforms/transforms/text_to_html.py
M Products/PortalTransforms/transforms/textile_to_html.py
M Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
M Products/PortalTransforms/transforms/word_to_html.py
M Products/PortalTransforms/unsafe_transforms/build_transforms.py
M Products/PortalTransforms/unsafe_transforms/command.py
M Products/PortalTransforms/unsafe_transforms/xml.py
M Products/PortalTransforms/utils.py
M bootstrap.py
M setup.py

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..64d5832
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,6 @@
+[settings]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
diff --git a/Products/PortalTransforms/Transform.py b/Products/PortalTransforms/Transform.py
index 14e82d0..9b4b2f8 100644
--- a/Products/PortalTransforms/Transform.py
+++ b/Products/PortalTransforms/Transform.py
@@ -1,21 +1,19 @@
-from logging import ERROR
-from UserDict import UserDict
-
-from zope.interface import implements
-
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
+from logging import ERROR
+from OFS.SimpleItem import SimpleItem
 from Persistence import PersistentMapping
 from persistent.list import PersistentList
-from OFS.SimpleItem import SimpleItem
-from AccessControl import ClassSecurityInfo
-
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.utils import TransformException, log, _www
 from Products.PortalTransforms.transforms.broken import BrokenTransform
+from Products.PortalTransforms.utils import _www
+from Products.PortalTransforms.utils import log
+from Products.PortalTransforms.utils import TransformException
+from UserDict import UserDict
+from zope.interface import implements
 
 
 def import_from_name(module_name):
diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py
index 0285dee..bfc4e00 100644
--- a/Products/PortalTransforms/TransformEngine.py
+++ b/Products/PortalTransforms/TransformEngine.py
@@ -1,34 +1,32 @@
-from logging import DEBUG
-
-from persistent.list import PersistentList
-from zope.interface import implements
-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
 from App.class_init import InitializeClass
+from logging import DEBUG
 from OFS.Folder import Folder
 from Persistence import PersistentMapping
+from persistent.list import PersistentList
 from Products.CMFCore.ActionProviderBase import ActionProviderBase
-from Products.CMFCore.permissions import ManagePortal, View
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import registerToolInterface
 from Products.CMFCore.utils import UniqueObject
-from Products.CMFCore.utils import getToolByName
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-
-from Products.PortalTransforms.data import datastream
-from Products.PortalTransforms.chain import TransformsChain
-from Products.PortalTransforms.chain import chain
 from Products.PortalTransforms.cache import Cache
+from Products.PortalTransforms.chain import chain
+from Products.PortalTransforms.chain import TransformsChain
+from Products.PortalTransforms.data import datastream
 from Products.PortalTransforms.interfaces import IDataStream
-from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.interfaces import IEngine
 from Products.PortalTransforms.interfaces import IPortalTransformsTool
+from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
 from Products.PortalTransforms.Transform import Transform
 from Products.PortalTransforms.transforms import initialize
+from Products.PortalTransforms.utils import _www
 from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.utils import TransformException
-from Products.PortalTransforms.utils import _www
+from zope.interface import implements
 
 
 class TransformTool(UniqueObject, ActionProviderBase, Folder):
diff --git a/Products/PortalTransforms/__init__.py b/Products/PortalTransforms/__init__.py
index 889a819..5b2ba26 100644
--- a/Products/PortalTransforms/__init__.py
+++ b/Products/PortalTransforms/__init__.py
@@ -1,23 +1,24 @@
+from Products.MimetypesRegistry import mime_types
+from Products.MimetypesRegistry import MimeTypeItem
 from Products.PortalTransforms.TransformEngine import TransformTool
 
+# running (required)
+# XXX backward compatibility tricks to make old PortalTransform based Mimetypes
+import sys
+
+
 PKG_NAME = 'PortalTransforms'
 
 tools = (
     TransformTool,
 )
 
-# XXX backward compatibility tricks to make old PortalTransform based Mimetypes
-# running (required)
-import sys
 this_module = sys.modules[__name__]
 
-from Products.MimetypesRegistry import mime_types
 setattr(this_module, 'mime_types', mime_types)
 
-from Products.MimetypesRegistry import MimeTypeItem
 setattr(this_module, 'MimeTypeItem', MimeTypeItem)
 
-from Products.MimetypesRegistry import MimeTypeItem
 sys.modules['Products.PortalTransforms.zope.MimeTypeItem'] = MimeTypeItem
 
 
diff --git a/Products/PortalTransforms/cache.py b/Products/PortalTransforms/cache.py
index 41742a7..3b065c3 100644
--- a/Products/PortalTransforms/cache.py
+++ b/Products/PortalTransforms/cache.py
@@ -1,7 +1,8 @@
 """Cache
 """
-from time import time
 from Acquisition import aq_base
+from time import time
+
 
 _marker = object()
 
diff --git a/Products/PortalTransforms/chain.py b/Products/PortalTransforms/chain.py
index fc295b0..bb7648d 100644
--- a/Products/PortalTransforms/chain.py
+++ b/Products/PortalTransforms/chain.py
@@ -1,21 +1,18 @@
-from zope.interface import implements
-
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from Persistence import Persistent
-from App.class_init import InitializeClass
+from AccessControl import ClassSecurityInfo
 from Acquisition import Implicit
+from App.class_init import InitializeClass
 from OFS.SimpleItem import Item
-from AccessControl import ClassSecurityInfo
-
-from Products.CMFCore.permissions import ManagePortal, ManageProperties
+from Persistence import Persistent
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.permissions import ManageProperties
 from Products.CMFCore.utils import getToolByName
-
-from Products.PortalTransforms.utils import _www
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from Products.PortalTransforms.interfaces import IChain
 from Products.PortalTransforms.interfaces import ITransform
-
+from Products.PortalTransforms.utils import _www
 from UserList import UserList
+from zope.interface import implements
+
 
 try:
     from OFS.role import RoleManager
diff --git a/Products/PortalTransforms/data.py b/Products/PortalTransforms/data.py
index f345dae..7f63716 100644
--- a/Products/PortalTransforms/data.py
+++ b/Products/PortalTransforms/data.py
@@ -1,6 +1,5 @@
-from zope.interface import implements
-
 from Products.PortalTransforms.interfaces import IDataStream
+from zope.interface import implements
 
 
 class datastream:
diff --git a/Products/PortalTransforms/libtransforms/commandtransform.py b/Products/PortalTransforms/libtransforms/commandtransform.py
index 2a8e799..6c397be 100644
--- a/Products/PortalTransforms/libtransforms/commandtransform.py
+++ b/Products/PortalTransforms/libtransforms/commandtransform.py
@@ -1,14 +1,14 @@
+from os.path import basename
+from os.path import join
+from Products.PortalTransforms.interfaces import ITransform
+from Products.PortalTransforms.libtransforms.utils import bin_search
+from Products.PortalTransforms.libtransforms.utils import getShortPathName
+from zope.interface import implements
+
 import os
-import tempfile
 import re
 import shutil
-from os.path import join, basename
-
-from zope.interface import implements
-
-from Products.PortalTransforms.libtransforms.utils import (
-    bin_search, getShortPathName)
-from Products.PortalTransforms.interfaces import ITransform
+import tempfile
 
 
 class commandtransform:
diff --git a/Products/PortalTransforms/libtransforms/piltransform.py b/Products/PortalTransforms/libtransforms/piltransform.py
index 396907b..a007925 100644
--- a/Products/PortalTransforms/libtransforms/piltransform.py
+++ b/Products/PortalTransforms/libtransforms/piltransform.py
@@ -1,6 +1,7 @@
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from StringIO import StringIO
+from zope.interface import implements
+
 import PIL.Image
 
 
diff --git a/Products/PortalTransforms/libtransforms/retransform.py b/Products/PortalTransforms/libtransforms/retransform.py
index 08b284d..758ce34 100644
--- a/Products/PortalTransforms/libtransforms/retransform.py
+++ b/Products/PortalTransforms/libtransforms/retransform.py
@@ -1,8 +1,7 @@
-import re
-
+from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 
-from Products.PortalTransforms.interfaces import ITransform
+import re
 
 
 class retransform:
diff --git a/Products/PortalTransforms/libtransforms/utils.py b/Products/PortalTransforms/libtransforms/utils.py
index ad6dce4..b9313e8 100644
--- a/Products/PortalTransforms/libtransforms/utils.py
+++ b/Products/PortalTransforms/libtransforms/utils.py
@@ -1,7 +1,11 @@
+from htmlentitydefs import entitydefs
+from Products.PortalTransforms.utils import log
+from sgmllib import SGMLParseError
+from sgmllib import SGMLParser
+
 import os
 import sys
-from sgmllib import SGMLParser, SGMLParseError
-from htmlentitydefs import entitydefs
+
 
 try:
     # Need to be imported before win32api to avoid dll loading
@@ -14,8 +18,6 @@
 except ImportError:
     WIN32 = False
 
-from Products.PortalTransforms.utils import log
-
 
 class MissingBinary(Exception):
     pass
diff --git a/Products/PortalTransforms/setuphandlers.py b/Products/PortalTransforms/setuphandlers.py
index ff82baa..00c71aa 100644
--- a/Products/PortalTransforms/setuphandlers.py
+++ b/Products/PortalTransforms/setuphandlers.py
@@ -2,8 +2,8 @@
 PortalTransforms setup handlers.
 """
 
-from StringIO import StringIO
 from Products.CMFCore.utils import getToolByName
+from StringIO import StringIO
 
 
 def correctMapping(out, portal):
diff --git a/Products/PortalTransforms/tests/test_engine.py b/Products/PortalTransforms/tests/test_engine.py
index ed747b3..fded889 100644
--- a/Products/PortalTransforms/tests/test_engine.py
+++ b/Products/PortalTransforms/tests/test_engine.py
@@ -1,12 +1,11 @@
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
-
-from zope.interface import implements
-from Products.PortalTransforms.utils import TransformException
-from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.chain import chain
+from Products.PortalTransforms.interfaces import ITransform
+from Products.PortalTransforms.utils import TransformException
+from zope.interface import implements
 
-import urllib
 import re
+import urllib
 
 
 class BaseTransform:
diff --git a/Products/PortalTransforms/tests/test_graph.py b/Products/PortalTransforms/tests/test_graph.py
index 875536d..c582f00 100644
--- a/Products/PortalTransforms/tests/test_graph.py
+++ b/Products/PortalTransforms/tests/test_graph.py
@@ -1,6 +1,7 @@
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
-
 from utils import input_file_path
+
+
 FILE_PATH = input_file_path("demo1.pdf")
 
 
diff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py
index 36033a0..d1c331d 100644
--- a/Products/PortalTransforms/tests/test_transforms.py
+++ b/Products/PortalTransforms/tests/test_transforms.py
@@ -1,36 +1,36 @@
 # -*- coding: utf8  -*-
-import os
-import copy
-import logging
-import unittest
-import itertools
+from os.path import exists
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 from Products.CMFCore.utils import getToolByName
-
-from utils import input_file_path, output_file_path, normalize_html,\
-    load, matching_inputs
 from Products.PortalTransforms.data import datastream
 from Products.PortalTransforms.interfaces import IDataStream
-
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
+from Products.PortalTransforms.transforms.image_to_bmp import image_to_bmp
 from Products.PortalTransforms.transforms.image_to_gif import image_to_gif
-from Products.PortalTransforms.transforms.image_to_png import image_to_png
 from Products.PortalTransforms.transforms.image_to_jpeg import image_to_jpeg
-from Products.PortalTransforms.transforms.image_to_bmp import image_to_bmp
-from Products.PortalTransforms.transforms.image_to_tiff import image_to_tiff
-from Products.PortalTransforms.transforms.image_to_ppm import image_to_ppm
 from Products.PortalTransforms.transforms.image_to_pcx import image_to_pcx
-
-from Products.PortalTransforms.transforms.word_to_html import word_to_html
-
+from Products.PortalTransforms.transforms.image_to_png import image_to_png
+from Products.PortalTransforms.transforms.image_to_ppm import image_to_ppm
+from Products.PortalTransforms.transforms.image_to_tiff import image_to_tiff
+from Products.PortalTransforms.transforms.markdown_to_html import HAS_MARKDOWN
+from Products.PortalTransforms.transforms.safe_html import NASTY_TAGS
 from Products.PortalTransforms.transforms.safe_html import SafeHTML
 from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
-from Products.PortalTransforms.transforms.safe_html import NASTY_TAGS
-
 from Products.PortalTransforms.transforms.textile_to_html import HAS_TEXTILE
-from Products.PortalTransforms.transforms.markdown_to_html import HAS_MARKDOWN
+from Products.PortalTransforms.transforms.word_to_html import word_to_html
+from utils import input_file_path
+from utils import load
+from utils import matching_inputs
+from utils import normalize_html
+from utils import output_file_path
+
+import copy
+import itertools
+import logging
+import os
+import unittest
+
 
-from os.path import exists
 # we have to set locale because lynx output is locale sensitive !
 os.environ['LC_ALL'] = 'C'
 logger = logging.getLogger('PortalTransforms')
diff --git a/Products/PortalTransforms/tests/utils.py b/Products/PortalTransforms/tests/utils.py
index e222fc8..13ac11d 100644
--- a/Products/PortalTransforms/tests/utils.py
+++ b/Products/PortalTransforms/tests/utils.py
@@ -1,8 +1,12 @@
-import re
-import glob
-from unittest import TestSuite
+from os.path import abspath
+from os.path import basename
+from os.path import dirname
+from os.path import join
 from sys import modules
-from os.path import join, abspath, dirname, basename
+from unittest import TestSuite
+
+import glob
+import re
 
 
 def normalize_html(s):
diff --git a/Products/PortalTransforms/transforms/__init__.py b/Products/PortalTransforms/transforms/__init__.py
index cdd1f74..5d457da 100644
--- a/Products/PortalTransforms/transforms/__init__.py
+++ b/Products/PortalTransforms/transforms/__init__.py
@@ -11,9 +11,12 @@
 # implement the transform, if register needs to fail for now it
 # should raise an ImportError as well (dumb, I know)
 
-from logging import DEBUG, ERROR
-from Products.PortalTransforms.utils import log
+from logging import DEBUG
+from logging import ERROR
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
+from Products.PortalTransforms.utils import log
+
+
 modules = [
     'st',             # zopish
     'rest',           # docutils
diff --git a/Products/PortalTransforms/transforms/broken.py b/Products/PortalTransforms/transforms/broken.py
index 64915ce..0b56bf4 100644
--- a/Products/PortalTransforms/transforms/broken.py
+++ b/Products/PortalTransforms/transforms/broken.py
@@ -1,6 +1,8 @@
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from Products.PortalTransforms.utils import log
+from zope.interface import implements
+
+
 WARNING = 100
 
 
diff --git a/Products/PortalTransforms/transforms/html_body.py b/Products/PortalTransforms/transforms/html_body.py
index aaa7071..a8ca0ef 100644
--- a/Products/PortalTransforms/transforms/html_body.py
+++ b/Products/PortalTransforms/transforms/html_body.py
@@ -1,6 +1,6 @@
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
+from zope.interface import implements
 
 
 class HTMLBody:
diff --git a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
index 50f3c3b..52aed18 100644
--- a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
+++ b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
@@ -1,7 +1,6 @@
+from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
-from plone.intelligenttext.transforms import \
-    convertHtmlToWebIntelligentPlainText
 
 
 class HtmlToWebIntelligentPlainText:
diff --git a/Products/PortalTransforms/transforms/lynx_dump.py b/Products/PortalTransforms/transforms/lynx_dump.py
index ef54db8..f881abf 100644
--- a/Products/PortalTransforms/transforms/lynx_dump.py
+++ b/Products/PortalTransforms/transforms/lynx_dump.py
@@ -2,9 +2,10 @@
 Uses lynx -dump
 """
 from Products.PortalTransforms.interfaces import ITransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import popentransform
 from zope.interface import implements
-from Products.PortalTransforms.libtransforms.commandtransform import (
-    commandtransform, popentransform)
+
 import os
 
 
diff --git a/Products/PortalTransforms/transforms/markdown_to_html.py b/Products/PortalTransforms/transforms/markdown_to_html.py
index eb29716..acb7ed7 100644
--- a/Products/PortalTransforms/transforms/markdown_to_html.py
+++ b/Products/PortalTransforms/transforms/markdown_to_html.py
@@ -4,10 +4,10 @@
 Author: Tom Lazar <tom@tomster.org> at the archipelago sprint 2006
 """
 
-from zope.interface import implements
-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
+from zope.interface import implements
+
 
 try:
     import markdown as markdown_transformer
diff --git a/Products/PortalTransforms/transforms/office_com.py b/Products/PortalTransforms/transforms/office_com.py
index a2f46b1..791ae0d 100644
--- a/Products/PortalTransforms/transforms/office_com.py
+++ b/Products/PortalTransforms/transforms/office_com.py
@@ -1,25 +1,23 @@
 # Need to be imported first to avoid dll loading problems.
-import pywintypes
-import pythoncom
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.utils import bodyfinder
+from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
+from win32com.client import constants
+from win32com.client import Dispatch
+from win32com.client import gencache
 
+import os
 import os.path
-
-import win32com
-import sys
-import string
-import win32api
-import traceback
+import pythoncom
+import pywintypes
 import re
+import string
+import sys
 import tempfile
-import os
+import traceback
+import win32api
+import win32com
 import win32com.client
-from win32com.client import gencache
-from win32com.client import constants, Dispatch
-
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
-from Products.PortalTransforms.libtransforms.utils import bodyfinder
-from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
 
 
 class document(commandtransform):
diff --git a/Products/PortalTransforms/transforms/office_uno.py b/Products/PortalTransforms/transforms/office_uno.py
index 6a1b83a..3dd5006 100644
--- a/Products/PortalTransforms/transforms/office_uno.py
+++ b/Products/PortalTransforms/transforms/office_uno.py
@@ -1,13 +1,12 @@
-import uno
-import unohelper
 from com.sun.star.beans import PropertyValue
 from com.sun.star.util import CloseVetoException
-
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
 
+import uno
+import unohelper
+
 
 class document(commandtransform):
 
diff --git a/Products/PortalTransforms/transforms/office_wvware.py b/Products/PortalTransforms/transforms/office_wvware.py
index f467542..84ad0fc 100644
--- a/Products/PortalTransforms/transforms/office_wvware.py
+++ b/Products/PortalTransforms/transforms/office_wvware.py
@@ -1,8 +1,8 @@
-import os
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+
+import os
 
 
 class document(commandtransform):
diff --git a/Products/PortalTransforms/transforms/pdf_to_html.py b/Products/PortalTransforms/transforms/pdf_to_html.py
index e5785ae..0a8a870 100644
--- a/Products/PortalTransforms/transforms/pdf_to_html.py
+++ b/Products/PortalTransforms/transforms/pdf_to_html.py
@@ -3,11 +3,12 @@
 
 """
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.utils import sansext
-from Products.PortalTransforms.libtransforms.commandtransform import (
-    commandtransform, popentransform)
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import popentransform
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
+from Products.PortalTransforms.libtransforms.utils import sansext
+from zope.interface import implements
+
 import os
 
 
diff --git a/Products/PortalTransforms/transforms/pdf_to_text.py b/Products/PortalTransforms/transforms/pdf_to_text.py
index 4f9893c..86dadcd 100644
--- a/Products/PortalTransforms/transforms/pdf_to_text.py
+++ b/Products/PortalTransforms/transforms/pdf_to_text.py
@@ -2,13 +2,13 @@
 Uses the xpdf (www.foolabs.com/xpdf)
 """
 
-import os
-
-from zope.interface import implements
 from Products.PortalTransforms.interfaces import ITransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import popentransform
 from Products.PortalTransforms.libtransforms.utils import sansext
-from Products.PortalTransforms.libtransforms.commandtransform import (
-    commandtransform, popentransform)
+from zope.interface import implements
+
+import os
 
 
 class pdf_to_text(popentransform):
diff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py
index 5f27dc8..fe41233 100644
--- a/Products/PortalTransforms/transforms/python.py
+++ b/Products/PortalTransforms/transforms/python.py
@@ -14,15 +14,16 @@
  original formatting (which is the hard part).
 """
 
-import string
+from cStringIO import StringIO
+from DocumentTemplate.DT_Util import html_quote
+from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implements
+
 import keyword
+import string
 import token
 import tokenize
-from cStringIO import StringIO
 
-from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from DocumentTemplate.DT_Util import html_quote
 
 # Python Source Parser #####################################################
 
diff --git a/Products/PortalTransforms/transforms/rest.py b/Products/PortalTransforms/transforms/rest.py
index ca3b706..7689f7e 100644
--- a/Products/PortalTransforms/transforms/rest.py
+++ b/Products/PortalTransforms/transforms/rest.py
@@ -1,6 +1,6 @@
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from reStructuredText import HTML
+from zope.interface import implements
 
 
 class rest:
diff --git a/Products/PortalTransforms/transforms/rtf_to_html.py b/Products/PortalTransforms/transforms/rtf_to_html.py
index 7df9d68..34cb500 100644
--- a/Products/PortalTransforms/transforms/rtf_to_html.py
+++ b/Products/PortalTransforms/transforms/rtf_to_html.py
@@ -3,11 +3,11 @@
 """
 
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.utils import sansext
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.utils import sansext
+from zope.interface import implements
+
 import os
 
 
diff --git a/Products/PortalTransforms/transforms/rtf_to_xml.py b/Products/PortalTransforms/transforms/rtf_to_xml.py
index 2bc698e..34c6292 100644
--- a/Products/PortalTransforms/transforms/rtf_to_xml.py
+++ b/Products/PortalTransforms/transforms/rtf_to_xml.py
@@ -3,10 +3,10 @@
 
 """
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
 from Products.PortalTransforms.libtransforms.utils import sansext
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from zope.interface import implements
+
 import os
 
 
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index 1d77b46..11e9e86 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -1,13 +1,14 @@
-import logging
-from sgmllib import SGMLParser, SGMLParseError
-import re
 from cgi import escape
-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
+from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.utils import safeToInt
+from sgmllib import SGMLParseError
+from sgmllib import SGMLParser
+from zope.interface import implements
+
+import logging
+import re
 
 
 class IllegalHTML(ValueError):
diff --git a/Products/PortalTransforms/transforms/st.py b/Products/PortalTransforms/transforms/st.py
index f6332e7..18ebbbd 100644
--- a/Products/PortalTransforms/transforms/st.py
+++ b/Products/PortalTransforms/transforms/st.py
@@ -2,6 +2,7 @@
 from zope.interface import implements
 from zope.structuredtext import stx2html
 
+
 DEFAULT_STX_LEVEL = 2
 STX_LEVEL = DEFAULT_STX_LEVEL
 
diff --git a/Products/PortalTransforms/transforms/text_pre_to_html.py b/Products/PortalTransforms/transforms/text_pre_to_html.py
index 5f81265..4f836ed 100644
--- a/Products/PortalTransforms/transforms/text_pre_to_html.py
+++ b/Products/PortalTransforms/transforms/text_pre_to_html.py
@@ -1,6 +1,6 @@
+from DocumentTemplate.DT_Util import html_quote
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
-from DocumentTemplate.DT_Util import html_quote
 
 
 class TextPreToHTML:
diff --git a/Products/PortalTransforms/transforms/text_to_html.py b/Products/PortalTransforms/transforms/text_to_html.py
index 7fd68b0..090f656 100644
--- a/Products/PortalTransforms/transforms/text_to_html.py
+++ b/Products/PortalTransforms/transforms/text_to_html.py
@@ -1,6 +1,6 @@
+from DocumentTemplate.DT_Util import html_quote
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
-from DocumentTemplate.DT_Util import html_quote
 
 
 class TextToHTML:
diff --git a/Products/PortalTransforms/transforms/textile_to_html.py b/Products/PortalTransforms/transforms/textile_to_html.py
index 32b0363..cdb5cef 100644
--- a/Products/PortalTransforms/transforms/textile_to_html.py
+++ b/Products/PortalTransforms/transforms/textile_to_html.py
@@ -6,10 +6,9 @@
 
 """
 
-from zope.interface import implements
-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
+from zope.interface import implements
 
 
 HAS_TEXTILE = True
diff --git a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
index cfc867b..331db20 100644
--- a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
+++ b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
@@ -1,7 +1,6 @@
+from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
-from plone.intelligenttext.transforms import \
-    convertWebIntelligentPlainTextToHtml
 
 
 class WebIntelligentPlainTextToHtml:
diff --git a/Products/PortalTransforms/transforms/word_to_html.py b/Products/PortalTransforms/transforms/word_to_html.py
index aa6fd61..04cdcee 100644
--- a/Products/PortalTransforms/transforms/word_to_html.py
+++ b/Products/PortalTransforms/transforms/word_to_html.py
@@ -1,6 +1,9 @@
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 
+import os
+
+
 EXTRACT_BODY = 1
 EXTRACT_STYLE = 0
 
@@ -10,7 +13,6 @@
 # disable office_uno because it doesn't support multithread yet
 ENABLE_UNO = False
 
-import os
 if os.name == 'posix':
     try:
         if ENABLE_UNO:
diff --git a/Products/PortalTransforms/unsafe_transforms/build_transforms.py b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
index 4e24568..9016015 100644
--- a/Products/PortalTransforms/unsafe_transforms/build_transforms.py
+++ b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
@@ -1,8 +1,10 @@
 """try to build some usefull transformations with the command and xml
 transforms and the available binaries
 """
-from Products.PortalTransforms.libtransforms.utils import (
-    bin_search, MissingBinary)
+from command import ExternalCommandTransform
+from Products.PortalTransforms.libtransforms.utils import bin_search
+from Products.PortalTransforms.libtransforms.utils import MissingBinary
+
 
 COMMAND_CONFIGS = (
     ('lynx_dump', '.html',
@@ -45,7 +47,6 @@
 
 TRANSFORMS = {}
 
-from command import ExternalCommandTransform
 for tr_name, extension, config in COMMAND_CONFIGS:
     try:
         bin = bin_search(config['binary_path'])
diff --git a/Products/PortalTransforms/unsafe_transforms/command.py b/Products/PortalTransforms/unsafe_transforms/command.py
index f531a52..73df561 100644
--- a/Products/PortalTransforms/unsafe_transforms/command.py
+++ b/Products/PortalTransforms/unsafe_transforms/command.py
@@ -2,13 +2,13 @@
 A custom transform using external command
 """
 
-import os.path
 from os import popen3
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
 from Products.PortalTransforms.utils import log
+from zope.interface import implements
+
+import os.path
 
 
 class ExternalCommandTransform(commandtransform):
diff --git a/Products/PortalTransforms/unsafe_transforms/xml.py b/Products/PortalTransforms/unsafe_transforms/xml.py
index 8eb092b..4ce8283 100644
--- a/Products/PortalTransforms/unsafe_transforms/xml.py
+++ b/Products/PortalTransforms/unsafe_transforms/xml.py
@@ -2,17 +2,19 @@
 A custom transform using external command
 """
 
-from os.path import join, dirname, exists
-import re
-from os import system
 from cStringIO import StringIO
-
+from os import system
+from os.path import dirname
+from os.path import exists
+from os.path import join
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.utils import bin_search, sansext
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.utils import bin_search
+from Products.PortalTransforms.libtransforms.utils import sansext
 from Products.PortalTransforms.utils import log
+from zope.interface import implements
+
+import re
 
 
 class XsltTransform(commandtransform):
diff --git a/Products/PortalTransforms/utils.py b/Products/PortalTransforms/utils.py
index af817c3..a993959 100644
--- a/Products/PortalTransforms/utils.py
+++ b/Products/PortalTransforms/utils.py
@@ -1,6 +1,8 @@
 """some common utilities
 """
+# directory where template for the ZMI are located
 import logging
+import os.path
 
 
 class TransformException(Exception):
@@ -15,8 +17,6 @@ class TransformException(Exception):
 def log(message, severity=logging.DEBUG):
     logger.log(severity, message)
 
-# directory where template for the ZMI are located
-import os.path
 _www = os.path.join(os.path.dirname(__file__), 'www')
 
 
diff --git a/bootstrap.py b/bootstrap.py
index f4b1c0a..e23fccc 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -18,12 +18,17 @@
 use the -c option to specify an alternate configuration file.
 """
 
+from optparse import OptionParser
+
 import os
+import pkg_resources
+import setuptools
 import shutil
+import subprocess
 import sys
 import tempfile
+import zc.buildout.buildout
 
-from optparse import OptionParser
 
 tmpeggs = tempfile.mkdtemp()
 
@@ -96,8 +101,6 @@
     setup_args['version'] = options.setuptools_version
 
 ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
 
 # This does not (always?) update the default working set.  We will
 # do it.
@@ -166,7 +169,6 @@ def _final_version(parsed_version):
     requirement = '=='.join((requirement, version))
 cmd.append(requirement)
 
-import subprocess
 if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
     raise Exception(
         "Failed to execute command:\n%s" % repr(cmd)[1:-1])
@@ -176,7 +178,6 @@ def _final_version(parsed_version):
 
 ws.add_entry(tmpeggs)
 ws.require(requirement)
-import zc.buildout.buildout
 
 if not [a for a in args if '=' not in a]:
     args.append('bootstrap')
diff --git a/setup.py b/setup.py
index 0cdd5a0..abe0fd6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,6 @@
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '2.1.11.dev0'
 


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-19T23:14:27+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/1496b92ccf34a6f88af0b72cc71478a59ff84d8a

utf8 header and minor manual code cleanup

Files changed:
M Products/PortalTransforms/Transform.py
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/TransformTool.py
M Products/PortalTransforms/TransformsChain.py
M Products/PortalTransforms/libtransforms/commandtransform.py
M Products/PortalTransforms/libtransforms/piltransform.py
M Products/PortalTransforms/libtransforms/retransform.py
M Products/PortalTransforms/libtransforms/utils.py
M Products/PortalTransforms/tests/__init__.py
M Products/PortalTransforms/tests/test_doctests.py
M Products/PortalTransforms/tests/test_engine.py
M Products/PortalTransforms/tests/test_graph.py
M Products/PortalTransforms/tests/test_xss.py
M Products/PortalTransforms/tests/utils.py
M Products/PortalTransforms/tests/word.py
M Products/PortalTransforms/transforms/__init__.py
M Products/PortalTransforms/transforms/broken.py
M Products/PortalTransforms/transforms/html_body.py
M Products/PortalTransforms/transforms/html_to_text.py
M Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
M Products/PortalTransforms/transforms/identity.py
M Products/PortalTransforms/transforms/image_to_bmp.py
M Products/PortalTransforms/transforms/image_to_gif.py
M Products/PortalTransforms/transforms/image_to_html.py
M Products/PortalTransforms/transforms/image_to_jpeg.py
M Products/PortalTransforms/transforms/image_to_pcx.py
M Products/PortalTransforms/transforms/image_to_png.py
M Products/PortalTransforms/transforms/image_to_ppm.py
M Products/PortalTransforms/transforms/image_to_tiff.py
M Products/PortalTransforms/transforms/lynx_dump.py
M Products/PortalTransforms/transforms/markdown_to_html.py
M Products/PortalTransforms/transforms/office_com.py
M Products/PortalTransforms/transforms/office_uno.py
M Products/PortalTransforms/transforms/office_wvware.py
M Products/PortalTransforms/transforms/pdf_to_html.py
M Products/PortalTransforms/transforms/pdf_to_text.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/rest.py
M Products/PortalTransforms/transforms/rtf_to_html.py
M Products/PortalTransforms/transforms/rtf_to_xml.py
M Products/PortalTransforms/transforms/safe_html.py
M Products/PortalTransforms/transforms/st.py
M Products/PortalTransforms/transforms/text_pre_to_html.py
M Products/PortalTransforms/transforms/text_to_html.py
M Products/PortalTransforms/transforms/textile_to_html.py
M Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
M Products/PortalTransforms/transforms/word_to_html.py
M Products/PortalTransforms/unsafe_transforms/build_transforms.py
M Products/PortalTransforms/unsafe_transforms/command.py
M Products/PortalTransforms/unsafe_transforms/xml.py

diff --git a/Products/PortalTransforms/Transform.py b/Products/PortalTransforms/Transform.py
index 9b4b2f8..027b42a 100644
--- a/Products/PortalTransforms/Transform.py
+++ b/Products/PortalTransforms/Transform.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
 from logging import ERROR
diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py
index bfc4e00..28ef1c0 100644
--- a/Products/PortalTransforms/TransformEngine.py
+++ b/Products/PortalTransforms/TransformEngine.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
 from App.class_init import InitializeClass
diff --git a/Products/PortalTransforms/TransformTool.py b/Products/PortalTransforms/TransformTool.py
index cd7cb9a..e2e740f 100644
--- a/Products/PortalTransforms/TransformTool.py
+++ b/Products/PortalTransforms/TransformTool.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.TransformEngine import TransformTool
diff --git a/Products/PortalTransforms/TransformsChain.py b/Products/PortalTransforms/TransformsChain.py
index 5d545ca..8eab11a 100644
--- a/Products/PortalTransforms/TransformsChain.py
+++ b/Products/PortalTransforms/TransformsChain.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """FIXME: backward compat, remove later
 """
 from Products.PortalTransforms.chain import Chain as TransformsChain
diff --git a/Products/PortalTransforms/libtransforms/commandtransform.py b/Products/PortalTransforms/libtransforms/commandtransform.py
index 6c397be..b4ea802 100644
--- a/Products/PortalTransforms/libtransforms/commandtransform.py
+++ b/Products/PortalTransforms/libtransforms/commandtransform.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from os.path import basename
 from os.path import join
 from Products.PortalTransforms.interfaces import ITransform
diff --git a/Products/PortalTransforms/libtransforms/piltransform.py b/Products/PortalTransforms/libtransforms/piltransform.py
index a007925..99c50d9 100644
--- a/Products/PortalTransforms/libtransforms/piltransform.py
+++ b/Products/PortalTransforms/libtransforms/piltransform.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from StringIO import StringIO
 from zope.interface import implements
diff --git a/Products/PortalTransforms/libtransforms/retransform.py b/Products/PortalTransforms/libtransforms/retransform.py
index 758ce34..eacf1f7 100644
--- a/Products/PortalTransforms/libtransforms/retransform.py
+++ b/Products/PortalTransforms/libtransforms/retransform.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/libtransforms/utils.py b/Products/PortalTransforms/libtransforms/utils.py
index b9313e8..f800cdb 100644
--- a/Products/PortalTransforms/libtransforms/utils.py
+++ b/Products/PortalTransforms/libtransforms/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from htmlentitydefs import entitydefs
 from Products.PortalTransforms.utils import log
 from sgmllib import SGMLParseError
@@ -99,8 +100,74 @@ def bodyfinder(text):
 # value of 0 means it is an empty tag, like '<br />'.  Also note that
 # there currently is a separate list in the safe_html transform, which
 # itself is a copy from CMFDefault, with some changes done on the fly.
-VALID_TAGS = {'a': 1, 'article': 1, 'aside': 1, 'audio': 1, 'b': 1, 'base': 0, 'blockquote': 1, 'body': 1, 'br': 0, 'canvas': 1, 'caption': 1, 'cite': 1, 'code': 1, 'command': 1, 'datalist': 1, 'dd': 1, 'details': 1, 'div': 1, 'dl': 1, 'dt': 1, 'em': 1, 'figcaption': 1, 'figure': 1, 'footer': 1, 'h1': 1, 'h2': 1, 'h3': 1, 'h4': 1, 'h5': 1, 'h6': 1, 'head': 1, 'header': 1, 'hgroup': 1, 'hr': 0, 'html': 1, 'i': 1, 'img': 0, 'kbd': 1, 'keygen': 1, 'li': 1, 'mark': 1, 'meta': 0, 'ol': 1, 'p': 1, 'pre': 1, 'rp': 1, 'rt': 1, 'ruby': 1, 'section': 1, 'source': 1, 'span': 1, 'strike': 1, 'strong': 1, 'summary': 1, 'table': 1, 'tbody': 1, 'td': 1, 'th': 1, 'thead': 1, 'time': 1, 'title': 1, 'tr': 1, 'tt': 1, 'u': 1, 'ul': 1, 'video': 1
-              }
+VALID_TAGS = {
+    'a': 1,
+    'article': 1,
+    'aside': 1,
+    'audio': 1,
+    'b': 1,
+    'base': 0,
+    'blockquote': 1,
+    'body': 1,
+    'br': 0,
+    'canvas': 1,
+    'caption': 1,
+    'cite': 1,
+    'code': 1,
+    'command': 1,
+    'datalist': 1,
+    'dd': 1,
+    'details': 1,
+    'div': 1,
+    'dl': 1,
+    'dt': 1,
+    'em': 1,
+    'figcaption': 1,
+    'figure': 1,
+    'footer': 1,
+    'h1': 1,
+    'h2': 1,
+    'h3': 1,
+    'h4': 1,
+    'h5': 1,
+    'h6': 1,
+    'head': 1,
+    'header': 1,
+    'hgroup': 1,
+    'hr': 0,
+    'html': 1,
+    'i': 1,
+    'img': 0,
+    'kbd': 1,
+    'keygen': 1,
+    'li': 1,
+    'mark': 1,
+    'meta': 0,
+    'ol': 1,
+    'p': 1,
+    'pre': 1,
+    'rp': 1,
+    'rt': 1,
+    'ruby': 1,
+    'section': 1,
+    'source': 1,
+    'span': 1,
+    'strike': 1,
+    'strong': 1,
+    'summary': 1,
+    'table': 1,
+    'tbody': 1,
+    'td': 1,
+    'th': 1,
+    'thead': 1,
+    'time': 1,
+    'title': 1,
+    'tr': 1,
+    'tt': 1,
+    'u': 1,
+    'ul': 1,
+    'video': 1
+}
 
 # These tags and their complete contents should be removed.  Note that
 # parsers may choose to raise an Exception when finding such a nasty
diff --git a/Products/PortalTransforms/tests/__init__.py b/Products/PortalTransforms/tests/__init__.py
index a00479d..40a96af 100644
--- a/Products/PortalTransforms/tests/__init__.py
+++ b/Products/PortalTransforms/tests/__init__.py
@@ -1 +1 @@
-"""import this"""
+# -*- coding: utf-8 -*-
diff --git a/Products/PortalTransforms/tests/test_doctests.py b/Products/PortalTransforms/tests/test_doctests.py
index 181d0a9..d529af2 100644
--- a/Products/PortalTransforms/tests/test_doctests.py
+++ b/Products/PortalTransforms/tests/test_doctests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import doctest
 import unittest
 
diff --git a/Products/PortalTransforms/tests/test_engine.py b/Products/PortalTransforms/tests/test_engine.py
index fded889..8fdced2 100644
--- a/Products/PortalTransforms/tests/test_engine.py
+++ b/Products/PortalTransforms/tests/test_engine.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 from Products.PortalTransforms.chain import chain
 from Products.PortalTransforms.interfaces import ITransform
diff --git a/Products/PortalTransforms/tests/test_graph.py b/Products/PortalTransforms/tests/test_graph.py
index c582f00..e697c07 100644
--- a/Products/PortalTransforms/tests/test_graph.py
+++ b/Products/PortalTransforms/tests/test_graph.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 from utils import input_file_path
 
diff --git a/Products/PortalTransforms/tests/test_xss.py b/Products/PortalTransforms/tests/test_xss.py
index dbf4c8a..67a45dc 100644
--- a/Products/PortalTransforms/tests/test_xss.py
+++ b/Products/PortalTransforms/tests/test_xss.py
@@ -1,5 +1,4 @@
-"""
-"""
+# -*- coding: utf-8 -*-
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 
 
diff --git a/Products/PortalTransforms/tests/utils.py b/Products/PortalTransforms/tests/utils.py
index 13ac11d..973e9dd 100644
--- a/Products/PortalTransforms/tests/utils.py
+++ b/Products/PortalTransforms/tests/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from os.path import abspath
 from os.path import basename
 from os.path import dirname
diff --git a/Products/PortalTransforms/tests/word.py b/Products/PortalTransforms/tests/word.py
index 85a7a50..5f6fae3 100644
--- a/Products/PortalTransforms/tests/word.py
+++ b/Products/PortalTransforms/tests/word.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from rigging import transformer
 
 
diff --git a/Products/PortalTransforms/transforms/__init__.py b/Products/PortalTransforms/transforms/__init__.py
index 5d457da..b2b5941 100644
--- a/Products/PortalTransforms/transforms/__init__.py
+++ b/Products/PortalTransforms/transforms/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # Register Transforms
 # This is interesting because we don't expect all transforms to be
 # available on all platforms. To do this we allow things to fail at
diff --git a/Products/PortalTransforms/transforms/broken.py b/Products/PortalTransforms/transforms/broken.py
index 0b56bf4..e820e5d 100644
--- a/Products/PortalTransforms/transforms/broken.py
+++ b/Products/PortalTransforms/transforms/broken.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
 from zope.interface import implements
diff --git a/Products/PortalTransforms/transforms/html_body.py b/Products/PortalTransforms/transforms/html_body.py
index a8ca0ef..5b5ee1c 100644
--- a/Products/PortalTransforms/transforms/html_body.py
+++ b/Products/PortalTransforms/transforms/html_body.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from zope.interface import implements
diff --git a/Products/PortalTransforms/transforms/html_to_text.py b/Products/PortalTransforms/transforms/html_to_text.py
index 3c7c67a..9661c8f 100644
--- a/Products/PortalTransforms/transforms/html_to_text.py
+++ b/Products/PortalTransforms/transforms/html_to_text.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.retransform import retransform
 
 import htmlentitydefs
diff --git a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
index 52aed18..b4eec17 100644
--- a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
+++ b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
@@ -1,4 +1,6 @@
-from plone.intelligenttext.transforms import convertHtmlToWebIntelligentPlainText
+# -*- coding: utf-8 -*-
+from plone.intelligenttext.transforms import \
+    convertHtmlToWebIntelligentPlainText
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/transforms/identity.py b/Products/PortalTransforms/transforms/identity.py
index b17167d..52e0a57 100644
--- a/Products/PortalTransforms/transforms/identity.py
+++ b/Products/PortalTransforms/transforms/identity.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """
 A simple identity transform
 """
diff --git a/Products/PortalTransforms/transforms/image_to_bmp.py b/Products/PortalTransforms/transforms/image_to_bmp.py
index 1738960..05a546b 100644
--- a/Products/PortalTransforms/transforms/image_to_bmp.py
+++ b/Products/PortalTransforms/transforms/image_to_bmp.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_gif.py b/Products/PortalTransforms/transforms/image_to_gif.py
index fb4cc33..e21a9e4 100644
--- a/Products/PortalTransforms/transforms/image_to_gif.py
+++ b/Products/PortalTransforms/transforms/image_to_gif.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_html.py b/Products/PortalTransforms/transforms/image_to_html.py
index 39cd51f..2456cf3 100644
--- a/Products/PortalTransforms/transforms/image_to_html.py
+++ b/Products/PortalTransforms/transforms/image_to_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/transforms/image_to_jpeg.py b/Products/PortalTransforms/transforms/image_to_jpeg.py
index 1ce1468..423cabf 100644
--- a/Products/PortalTransforms/transforms/image_to_jpeg.py
+++ b/Products/PortalTransforms/transforms/image_to_jpeg.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_pcx.py b/Products/PortalTransforms/transforms/image_to_pcx.py
index bb67bf2..a37d78d 100644
--- a/Products/PortalTransforms/transforms/image_to_pcx.py
+++ b/Products/PortalTransforms/transforms/image_to_pcx.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_png.py b/Products/PortalTransforms/transforms/image_to_png.py
index 0e2b9a2..d1ab386 100644
--- a/Products/PortalTransforms/transforms/image_to_png.py
+++ b/Products/PortalTransforms/transforms/image_to_png.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_ppm.py b/Products/PortalTransforms/transforms/image_to_ppm.py
index a0ce264..fa04d7b 100644
--- a/Products/PortalTransforms/transforms/image_to_ppm.py
+++ b/Products/PortalTransforms/transforms/image_to_ppm.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_tiff.py b/Products/PortalTransforms/transforms/image_to_tiff.py
index 63a082b..14fd922 100644
--- a/Products/PortalTransforms/transforms/image_to_tiff.py
+++ b/Products/PortalTransforms/transforms/image_to_tiff.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/lynx_dump.py b/Products/PortalTransforms/transforms/lynx_dump.py
index f881abf..42b26ba 100644
--- a/Products/PortalTransforms/transforms/lynx_dump.py
+++ b/Products/PortalTransforms/transforms/lynx_dump.py
@@ -1,9 +1,12 @@
+# -*- coding: utf-8 -*-
 """
 Uses lynx -dump
 """
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
-from Products.PortalTransforms.libtransforms.commandtransform import popentransform
+from Products.PortalTransforms.libtransforms.commandtransform import \
+    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import \
+    popentransform
 from zope.interface import implements
 
 import os
diff --git a/Products/PortalTransforms/transforms/markdown_to_html.py b/Products/PortalTransforms/transforms/markdown_to_html.py
index acb7ed7..0a194c0 100644
--- a/Products/PortalTransforms/transforms/markdown_to_html.py
+++ b/Products/PortalTransforms/transforms/markdown_to_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://www.freewisdom.org/projects/python-markdown/ module
 
diff --git a/Products/PortalTransforms/transforms/office_com.py b/Products/PortalTransforms/transforms/office_com.py
index 791ae0d..03c25fe 100644
--- a/Products/PortalTransforms/transforms/office_com.py
+++ b/Products/PortalTransforms/transforms/office_com.py
@@ -1,5 +1,9 @@
+# -*- coding: utf-8 -*-
 # Need to be imported first to avoid dll loading problems.
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+import pywintypes
+import pythoncom
+
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
 from win32com.client import constants
@@ -8,8 +12,6 @@
 
 import os
 import os.path
-import pythoncom
-import pywintypes
 import re
 import string
 import sys
diff --git a/Products/PortalTransforms/transforms/office_uno.py b/Products/PortalTransforms/transforms/office_uno.py
index 3dd5006..3237760 100644
--- a/Products/PortalTransforms/transforms/office_uno.py
+++ b/Products/PortalTransforms/transforms/office_uno.py
@@ -1,6 +1,7 @@
+# -*- coding: utf-8 -*-
 from com.sun.star.beans import PropertyValue
 from com.sun.star.util import CloseVetoException
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
 
diff --git a/Products/PortalTransforms/transforms/office_wvware.py b/Products/PortalTransforms/transforms/office_wvware.py
index 84ad0fc..ceab99f 100644
--- a/Products/PortalTransforms/transforms/office_wvware.py
+++ b/Products/PortalTransforms/transforms/office_wvware.py
@@ -1,4 +1,5 @@
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+# -*- coding: utf-8 -*-
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
 
diff --git a/Products/PortalTransforms/transforms/pdf_to_html.py b/Products/PortalTransforms/transforms/pdf_to_html.py
index 0a8a870..2a65568 100644
--- a/Products/PortalTransforms/transforms/pdf_to_html.py
+++ b/Products/PortalTransforms/transforms/pdf_to_html.py
@@ -1,10 +1,11 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://sf.net/projects/pdftohtml bin to do its handy work
 
 """
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
-from Products.PortalTransforms.libtransforms.commandtransform import popentransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
+from Products.PortalTransforms.libtransforms.commandtransform import popentransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import sansext
 from zope.interface import implements
diff --git a/Products/PortalTransforms/transforms/pdf_to_text.py b/Products/PortalTransforms/transforms/pdf_to_text.py
index 86dadcd..9762293 100644
--- a/Products/PortalTransforms/transforms/pdf_to_text.py
+++ b/Products/PortalTransforms/transforms/pdf_to_text.py
@@ -1,10 +1,11 @@
+# -*- coding: utf-8 -*-
 """
 Uses the xpdf (www.foolabs.com/xpdf)
 """
 
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
-from Products.PortalTransforms.libtransforms.commandtransform import popentransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
+from Products.PortalTransforms.libtransforms.commandtransform import popentransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import sansext
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py
index fe41233..6fb3033 100644
--- a/Products/PortalTransforms/transforms/python.py
+++ b/Products/PortalTransforms/transforms/python.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """
 Original code from active state recipe
         'Colorize Python source using the built-in tokenizer'
diff --git a/Products/PortalTransforms/transforms/rest.py b/Products/PortalTransforms/transforms/rest.py
index 7689f7e..ff93fd4 100644
--- a/Products/PortalTransforms/transforms/rest.py
+++ b/Products/PortalTransforms/transforms/rest.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from reStructuredText import HTML
 from zope.interface import implements
@@ -20,7 +21,8 @@ class rest:
     default:
 
       >>> try:
-      ...     out = transform.convert('.. raw:: html\n  :file: <isonum.txt>', D())
+      ...     out = transform.convert(
+      ..          '.. raw:: html\n  :file: <isonum.txt>', D())
       ... except NotImplementedError:
       ...     print 'Good'
       ... else:
diff --git a/Products/PortalTransforms/transforms/rtf_to_html.py b/Products/PortalTransforms/transforms/rtf_to_html.py
index 34cb500..ad37b33 100644
--- a/Products/PortalTransforms/transforms/rtf_to_html.py
+++ b/Products/PortalTransforms/transforms/rtf_to_html.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://freshmeat.net/projects/rtfconverter/ bin to do its handy work
 """
 
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import sansext
 from zope.interface import implements
diff --git a/Products/PortalTransforms/transforms/rtf_to_xml.py b/Products/PortalTransforms/transforms/rtf_to_xml.py
index 34c6292..18583f8 100644
--- a/Products/PortalTransforms/transforms/rtf_to_xml.py
+++ b/Products/PortalTransforms/transforms/rtf_to_xml.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://sf.net/projects/rtf2xml bin to do its handy work
 
 """
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import sansext
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index 11e9e86..62879aa 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from cgi import escape
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
@@ -17,13 +18,22 @@ class IllegalHTML(ValueError):
 
 
 # These are the HTML tags that we will leave intact
-VALID_TAGS = {'a': 1, 'b': 1, 'base': 0, 'big': 1, 'blockquote': 1, 'body': 1, 'br': 0, 'caption': 1, 'cite': 1, 'code': 1, 'dd': 1, 'div': 1, 'dl': 1, 'dt': 1, 'em': 1, 'h1': 1, 'h2': 1, 'h3': 1, 'h4': 1, 'h5': 1, 'h6': 1, 'head': 1, 'hr': 0, 'html': 1, 'i': 1, 'img': 0, 'kbd': 1, 'li': 1              # , 'link'       : 1 type="script" hoses us
-              , 'meta': 0, 'ol': 1, 'p': 1, 'pre': 1, 'small': 1, 'span': 1, 'strong': 1, 'sub': 1, 'sup': 1, 'table': 1, 'tbody': 1, 'td': 1, 'th': 1, 'title': 1, 'tr': 1, 'tt': 1, 'u': 1, 'ul': 1, 'iframe': 1
-              }
+VALID_TAGS = {
+    'a': 1, 'b': 1, 'base': 0, 'big': 1, 'blockquote': 1, 'body': 1, 'br': 0,
+    'caption': 1, 'cite': 1, 'code': 1, 'dd': 1, 'div': 1, 'dl': 1, 'dt': 1,
+    'em': 1, 'h1': 1, 'h2': 1, 'h3': 1, 'h4': 1, 'h5': 1, 'h6': 1, 'head': 1,
+    'hr': 0, 'html': 1, 'i': 1, 'img': 0, 'kbd': 1, 'li': 1,
+    # , 'link'       : 1, type="script" hoses us
+    'meta': 0, 'ol': 1, 'p': 1, 'pre': 1, 'small': 1, 'span': 1, 'strong': 1,
+    'sub': 1, 'sup': 1, 'table': 1, 'tbody': 1, 'td': 1, 'th': 1, 'title': 1,
+    'tr': 1, 'tt': 1, 'u': 1, 'ul': 1, 'iframe': 1
+}
 
-NASTY_TAGS = {'script': 1, 'object': 1, 'embed': 1, 'applet': 1, 'style': 1  # this helps improve Word HTML cleanup.
-              , 'meta': 1  # allowed by parsers, but can cause unexpected behavior
-              }
+NASTY_TAGS = {
+    'script': 1, 'object': 1, 'embed': 1, 'applet': 1, 'style': 1,
+    # this helps improve Word HTML cleanup.
+    'meta': 1  # allowed by parsers, but can cause unexpected behavior
+}
 
 
 # add some tags to allowed types.
@@ -84,7 +94,9 @@ class IllegalHTML(ValueError):
 def hasScript(s):
     """Dig out evil Java/VB script inside an HTML attribute.
 
-    >>> hasScript('data:text/html;base64,PHNjcmlwdD5hbGVydCgidGVzdCIpOzwvc2NyaXB0Pg==')
+    >>> hasScript(
+    ...     'data:text/html;'
+    ...     'base64,PHNjcmlwdD5hbGVydCgidGVzdCIpOzwvc2NyaXB0Pg==')
     True
     >>> hasScript('script:evil(1);')
     True
@@ -158,8 +170,8 @@ def decode_htmlentities(s):
     return ENTITYREF_RE.sub(decode_entityref, s)
 
 
-# maps the HTML5 named character references to the equivalent Unicode character(s)
-# (taken from http://hg.python.org/cpython/rev/2b54e25d6ecb)
+# maps the HTML5 named character references to the equivalent Unicode
+# character(s) (taken from http://hg.python.org/cpython/rev/2b54e25d6ecb)
 html5entities = {
     'Aacute;': u'\xc1',
     'Aacute': u'\xc1',
@@ -2493,7 +2505,7 @@ def unknown_starttag(self, tag, attrs):
 
     def unknown_endtag(self, tag):
         self.inside_script = False
-        if tag in self.nasty and not tag in self.valid:
+        if tag in self.nasty and tag not in self.valid:
             self.suppress = False
         if self.suppress:
             return
diff --git a/Products/PortalTransforms/transforms/st.py b/Products/PortalTransforms/transforms/st.py
index 18ebbbd..0afdb53 100644
--- a/Products/PortalTransforms/transforms/st.py
+++ b/Products/PortalTransforms/transforms/st.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 from zope.structuredtext import stx2html
diff --git a/Products/PortalTransforms/transforms/text_pre_to_html.py b/Products/PortalTransforms/transforms/text_pre_to_html.py
index 4f836ed..cf9f446 100644
--- a/Products/PortalTransforms/transforms/text_pre_to_html.py
+++ b/Products/PortalTransforms/transforms/text_pre_to_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from DocumentTemplate.DT_Util import html_quote
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
diff --git a/Products/PortalTransforms/transforms/text_to_html.py b/Products/PortalTransforms/transforms/text_to_html.py
index 090f656..9ca7c1c 100644
--- a/Products/PortalTransforms/transforms/text_to_html.py
+++ b/Products/PortalTransforms/transforms/text_to_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from DocumentTemplate.DT_Util import html_quote
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
diff --git a/Products/PortalTransforms/transforms/textile_to_html.py b/Products/PortalTransforms/transforms/textile_to_html.py
index cdb5cef..eb9b27a 100644
--- a/Products/PortalTransforms/transforms/textile_to_html.py
+++ b/Products/PortalTransforms/transforms/textile_to_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """
 Uses Roberto A. F. De Almeida's http://dealmeida.net/ module to do its
 handy work
diff --git a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
index 331db20..1208b73 100644
--- a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
+++ b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
@@ -1,4 +1,5 @@
-from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml
+# -*- coding: utf-8 -*-
+from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml  # noqa
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/transforms/word_to_html.py b/Products/PortalTransforms/transforms/word_to_html.py
index 04cdcee..52c4517 100644
--- a/Products/PortalTransforms/transforms/word_to_html.py
+++ b/Products/PortalTransforms/transforms/word_to_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/unsafe_transforms/build_transforms.py b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
index 9016015..a7d9171 100644
--- a/Products/PortalTransforms/unsafe_transforms/build_transforms.py
+++ b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
@@ -1,4 +1,5 @@
-"""try to build some usefull transformations with the command and xml
+# -*- coding: utf-8 -*-
+"""try to build some useful transformations with the command and xml
 transforms and the available binaries
 """
 from command import ExternalCommandTransform
diff --git a/Products/PortalTransforms/unsafe_transforms/command.py b/Products/PortalTransforms/unsafe_transforms/command.py
index 73df561..f468f1a 100644
--- a/Products/PortalTransforms/unsafe_transforms/command.py
+++ b/Products/PortalTransforms/unsafe_transforms/command.py
@@ -1,10 +1,11 @@
+# -*- coding: utf-8 -*-
 """
 A custom transform using external command
 """
 
 from os import popen3
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.utils import log
 from zope.interface import implements
 
diff --git a/Products/PortalTransforms/unsafe_transforms/xml.py b/Products/PortalTransforms/unsafe_transforms/xml.py
index 4ce8283..abb25b1 100644
--- a/Products/PortalTransforms/unsafe_transforms/xml.py
+++ b/Products/PortalTransforms/unsafe_transforms/xml.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """
 A custom transform using external command
 """
@@ -8,7 +9,7 @@
 from os.path import exists
 from os.path import join
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.libtransforms.commandtransform import commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bin_search
 from Products.PortalTransforms.libtransforms.utils import sansext
 from Products.PortalTransforms.utils import log
@@ -40,7 +41,8 @@ def __init__(self, name=None, **kwargs):
             'output_encoding': 'UTF-8',
             'dtds': {
                 '-//OASIS//DTD DocBook V4.1//EN':
-                    '/usr/share/sgml/docbook/xsl-stylesheets-1.29/html/docbook.xsl',
+                    '/usr/share/sgml/docbook/xsl-stylesheets-1.29/html/'
+                    'docbook.xsl',
             },
             'default_transform': '',
         }
@@ -77,7 +79,9 @@ def __init__(self, name=None, **kwargs):
             'default_transform': (
                 'string',
                 'Default xslt',
-                'Default xslt, used when no specific transformation is found.'),
+                'Default xslt, used when no specific transformation is '
+                'found.'
+            ),
         }
         self.config.update(kwargs)
         if name:


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-19T23:17:02+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/a165db5413661d27b8865a958a2a329c630c3856

doc changes

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 18f9e8d..4376e46 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- cleanup: autopep8, isort sorted imports, utf8 header, minor manual edits.
+  [jensens]
 
 
 2.1.10 (2015-09-15)


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-20T00:10:04+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/eaf62d84cb5f7ab32485d19ed777ad25f24fe91f

decorators ftw

Files changed:
M CHANGES.rst
M Products/PortalTransforms/Transform.py
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/chain.py
M Products/PortalTransforms/data.py
M Products/PortalTransforms/libtransforms/commandtransform.py
M Products/PortalTransforms/libtransforms/piltransform.py
M Products/PortalTransforms/libtransforms/retransform.py
M Products/PortalTransforms/tests/test_engine.py
M Products/PortalTransforms/transforms/broken.py
M Products/PortalTransforms/transforms/html_body.py
M Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
M Products/PortalTransforms/transforms/identity.py
M Products/PortalTransforms/transforms/image_to_html.py
M Products/PortalTransforms/transforms/lynx_dump.py
M Products/PortalTransforms/transforms/markdown_to_html.py
M Products/PortalTransforms/transforms/office_com.py
M Products/PortalTransforms/transforms/pdf_to_html.py
M Products/PortalTransforms/transforms/pdf_to_text.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/rest.py
M Products/PortalTransforms/transforms/rtf_to_html.py
M Products/PortalTransforms/transforms/rtf_to_xml.py
M Products/PortalTransforms/transforms/safe_html.py
M Products/PortalTransforms/transforms/st.py
M Products/PortalTransforms/transforms/text_pre_to_html.py
M Products/PortalTransforms/transforms/text_to_html.py
M Products/PortalTransforms/transforms/textile_to_html.py
M Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
M Products/PortalTransforms/transforms/word_to_html.py
M Products/PortalTransforms/unsafe_transforms/command.py
M Products/PortalTransforms/unsafe_transforms/xml.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4376e46..e1cd916 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- cleanup: autopep8, isort sorted imports, utf8 header, minor manual edits.
+- cleanup: autopep8, isort sorted imports, utf8 header, security decorators,
+  zca decorators, minor manual edits
   [jensens]
 
 
diff --git a/Products/PortalTransforms/Transform.py b/Products/PortalTransforms/Transform.py
index 027b42a..d5ea272 100644
--- a/Products/PortalTransforms/Transform.py
+++ b/Products/PortalTransforms/Transform.py
@@ -14,7 +14,7 @@
 from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.utils import TransformException
 from UserDict import UserDict
-from zope.interface import implements
+from zope.interface import implementer
 
 
 def import_from_name(module_name):
@@ -62,13 +62,12 @@ def make_config_nonpersistent(kwargs):
 }
 
 
+@implementer(ITransform)
 class Transform(SimpleItem):
     """A transform is an external method with
     additional configuration information
     """
 
-    implements(ITransform)
-
     meta_type = 'Transform'
     meta_types = all_meta_types = ()
 
@@ -174,8 +173,7 @@ def _load_transform(self):
         self._v_transform = transform
         return transform
 
-    security.declarePrivate('manage_beforeDelete')
-
+    @security.private
     def manage_beforeDelete(self, item, container):
         SimpleItem.manage_beforeDelete(self, item, container)
         if self is item:
@@ -183,30 +181,26 @@ def manage_beforeDelete(self, item, container):
             tr_tool = getToolByName(self, 'portal_transforms')
             tr_tool._unmapTransform(self)
 
-    security.declarePublic('get_documentation')
-
+    @security.public
     def get_documentation(self):
         """ return transform documentation """
         if not hasattr(self, '_v_transform'):
             self._load_transform()
         return self._v_transform.__doc__
 
-    security.declarePublic('convert')
-
+    @security.public
     def convert(self, *args, **kwargs):
         # return apply the transform and return the result
         if not hasattr(self, '_v_transform'):
             self._load_transform()
         return self._v_transform.convert(*args, **kwargs)
 
-    security.declarePublic('name')
-
+    @security.public
     def name(self):
         """return the name of the transform instance"""
         return self.id
 
-    security.declareProtected(ManagePortal, 'get_parameters')
-
+    @security.protected(ManagePortal)
     def get_parameters(self):
         """ get transform's parameters names """
         if not hasattr(self, '_v_transform'):
@@ -214,8 +208,7 @@ def get_parameters(self):
         keys = sorted(self._v_transform.config.keys())
         return keys
 
-    security.declareProtected(ManagePortal, 'get_parameter_value')
-
+    @security.protected(ManagePortal)
     def get_parameter_value(self, key):
         """ get value of a transform's parameter """
         value = self._config[key]
@@ -231,8 +224,7 @@ def get_parameter_value(self, key):
             result = value
         return result
 
-    security.declareProtected(ManagePortal, 'get_parameter_infos')
-
+    @security.protected(ManagePortal)
     def get_parameter_infos(self, key):
         """ get informations about a parameter
 
@@ -247,8 +239,7 @@ def get_parameter_infos(self, key):
         except KeyError:
             return 'string', '', ''
 
-    security.declareProtected(ManagePortal, 'set_parameters')
-
+    @security.protected(ManagePortal)
     def set_parameters(self, REQUEST=None, **kwargs):
         """ set transform's parameters """
         if not kwargs:
@@ -280,8 +271,7 @@ def set_parameters(self, REQUEST=None, **kwargs):
             REQUEST['RESPONSE'].redirect(
                 tr_tool.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'reload')
-
+    @security.protected(ManagePortal)
     def reload(self):
         """ reload the module where the transformation class is defined """
         log('Reloading transform %s' % self.module)
diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py
index 28ef1c0..14fc33f 100644
--- a/Products/PortalTransforms/TransformEngine.py
+++ b/Products/PortalTransforms/TransformEngine.py
@@ -27,17 +27,16 @@
 from Products.PortalTransforms.utils import _www
 from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.utils import TransformException
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(IPortalTransformsTool, IEngine)
 class TransformTool(UniqueObject, ActionProviderBase, Folder):
 
     id = 'portal_transforms'
     meta_type = id.title().replace('_', ' ')
     isPrincipiaFolderish = 1  # Show up in the ZMI
 
-    implements(IPortalTransformsTool, IEngine)
-
     meta_types = all_meta_types = (
         {'name': 'Transform', 'action': 'manage_addTransformForm'},
         {'name': 'TransformsChain', 'action': 'manage_addTransformsChainForm'},
@@ -69,8 +68,7 @@ def __init__(self, policies=None, max_sec_in_cache=3600):
 
     # mimetype oriented conversions (iengine interface)
 
-    security.declarePrivate('unregisterTransform')
-
+    @security.private
     def unregisterTransform(self, name):
         """ unregister a transform
         name is the name of a registered transform
@@ -79,8 +77,7 @@ def unregisterTransform(self, name):
         if name in self.objectIds():
             self._delObject(name)
 
-    security.declarePublic('convertTo')
-
+    @security.public
     def convertTo(self, target_mimetype, orig, data=None, object=None,
                   usedby=None, context=None, **kwargs):
         """Convert orig to a given mimetype
@@ -183,8 +180,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
     # make sure it's not publishable (XSS risk)
     del convertTo.__doc__
 
-    security.declarePublic('convertToData')
-
+    @security.public
     def convertToData(self, target_mimetype, orig, data=None, object=None,
                       usedby=None, context=None, **kwargs):
         # Convert to a given mimetype and return the raw data
@@ -195,8 +191,7 @@ def convertToData(self, target_mimetype, orig, data=None, object=None,
             return data.getData()
         return None
 
-    security.declarePublic('convert')
-
+    @security.public
     def convert(self, name, orig, data=None, context=None, **kwargs):
         # run a tranform of a given name on data
 
@@ -279,7 +274,7 @@ def _mapTransform(self, transform):
 
                     for mt2 in mto[0].mimetypes:
                         try:
-                            if not transform in mt_in[mt2]:
+                            if transform not in mt_in[mt2]:
                                 mt_in[mt2].append(transform)
                         except KeyError:
                             mt_in[mt2] = PersistentList([transform])
@@ -470,8 +465,7 @@ def _getPaths(self, orig, target, requirements, path=None, result=None):
 
         return result
 
-    security.declarePrivate('manage_afterAdd')
-
+    @security.private
     def manage_afterAdd(self, item, container):
         """ overload manage_afterAdd to finish initialization when the
         transform tool is added
@@ -483,8 +477,7 @@ def manage_afterAdd(self, item, container):
             # may fail on copy or zexp import
             pass
 
-    security.declareProtected(ManagePortal, 'manage_addTransform')
-
+    @security.protected(ManagePortal)
     def manage_addTransform(self, id, module, REQUEST=None):
         """ add a new transform to the tool """
         transform = Transform(id, module)
@@ -493,8 +486,7 @@ def manage_addTransform(self, id, module, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'manage_addTransform')
-
+    @security.protected(ManagePortal)
     def manage_addTransformsChain(self, id, description, REQUEST=None):
         """ add a new transform to the tool """
         transform = TransformsChain(id, description)
@@ -503,16 +495,14 @@ def manage_addTransformsChain(self, id, description, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'manage_addTransform')
-
+    @security.protected(ManagePortal)
     def manage_setCacheValidityTime(self, seconds, REQUEST=None):
         """set  the lifetime of cached data in seconds"""
         self.max_sec_in_cache = int(seconds)
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'reloadTransforms')
-
+    @security.protected(ManagePortal)
     def reloadTransforms(self, ids=()):
         """ reload transforms with the given ids
         if no ids, reload all registered transforms
@@ -567,8 +557,7 @@ def listPolicies(self):
 
     # mimetype oriented conversions (iengine interface)
 
-    security.declarePrivate('registerTransform')
-
+    @security.private
     def registerTransform(self, transform):
         """register a new transform
 
@@ -588,8 +577,7 @@ def registerTransform(self, transform):
             self._setObject(name, transform)
             self._mapTransform(transform)
 
-    security.declareProtected(ManagePortal, 'ZopeFind')
-
+    @security.protected(ManagePortal)
     def ZopeFind(self, *args, **kwargs):
         """Don't break ZopeFind feature when a transform can't be loaded
         """
@@ -598,8 +586,7 @@ def ZopeFind(self, *args, **kwargs):
         except MissingBinary:
             log('ZopeFind: catched MissingBinary exception')
 
-    security.declareProtected(View, 'objectItems')
-
+    @security.protected(View)
     def objectItems(self, *args, **kwargs):
         """Don't break ZopeFind feature when a transform can't be loaded
         """
diff --git a/Products/PortalTransforms/chain.py b/Products/PortalTransforms/chain.py
index bb7648d..d859a87 100644
--- a/Products/PortalTransforms/chain.py
+++ b/Products/PortalTransforms/chain.py
@@ -11,7 +11,7 @@
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import _www
 from UserList import UserList
-from zope.interface import implements
+from zope.interface import implementer
 
 
 try:
@@ -21,11 +21,10 @@
     from AccessControl.Role import RoleManager
 
 
+@implementer(IChain, ITransform)
 class chain(UserList):
     """A chain of transforms used to transform data"""
 
-    implements(IChain, ITransform)
-
     def __init__(self, name='', *args):
         UserList.__init__(self, *args)
         self.__name__ = name
@@ -129,22 +128,19 @@ def _chain_init(self):
         self.inputs = c.inputs or ('application/octet-stream',)
         self.output = c.output or 'application/octet-stream'
 
-    security.declarePublic('convert')
-
+    @security.public
     def convert(self, *args, **kwargs):
         """ return apply the transform and return the result """
         if self._chain is None:
             self._chain_init()
         return self._chain.convert(*args, **kwargs)
 
-    security.declarePublic('name')
-
+    @security.public
     def name(self):
         """return the name of the transform instance"""
         return self.id
 
-    security.declarePrivate('manage_beforeDelete')
-
+    @security.private
     def manage_beforeDelete(self, item, container):
         Item.manage_beforeDelete(self, item, container)
         if self is item:
@@ -152,8 +148,7 @@ def manage_beforeDelete(self, item, container):
             tr_tool = getToolByName(self, 'portal_transforms')
             tr_tool.unregisterTransform(self.id)
 
-    security.declareProtected(ManagePortal, 'manage_addObject')
-
+    @security.protected(ManagePortal)
     def manage_addObject(self, id, REQUEST=None):
         """ add a new transform or chain to the chain """
         assert id not in self._object_ids
@@ -162,8 +157,7 @@ def manage_addObject(self, id, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'manage_delObjects')
-
+    @security.protected(ManagePortal)
     def manage_delObjects(self, ids, REQUEST=None):
         """ delete the selected mime types """
         for id in ids:
@@ -174,8 +168,7 @@ def manage_delObjects(self, ids, REQUEST=None):
 
     # transforms order handling #
 
-    security.declareProtected(ManagePortal, 'move_object_to_position')
-
+    @security.protected(ManagePortal)
     def move_object_to_position(self, id, newpos):
         """ overriden from OrderedFolder to store id instead of objects
         """
@@ -187,8 +180,7 @@ def move_object_to_position(self, id, newpos):
         self._chain_init()
         return 1
 
-    security.declareProtected(ManageProperties, 'move_object_up')
-
+    @security.protected(ManageProperties)
     def move_object_up(self, id, REQUEST=None):
         """  move object with the given id up in the list """
         newpos = self._object_ids.index(id) - 1
@@ -196,8 +188,7 @@ def move_object_up(self, id, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManageProperties, 'move_object_down')
-
+    @security.protected(ManageProperties)
     def move_object_down(self, id, REQUEST=None):
         """  move object with the given id down in the list """
         newpos = self._object_ids.index(id) + 1
@@ -207,8 +198,7 @@ def move_object_down(self, id, REQUEST=None):
 
     # Z transform interface #
 
-    security.declareProtected(ManagePortal, 'reload')
-
+    @security.protected(ManagePortal)
     def reload(self):
         """ reload the module where the transformation class is defined """
         for tr in self.objectValues():
@@ -217,22 +207,19 @@ def reload(self):
 
     # utilities #
 
-    security.declareProtected(ManagePortal, 'listAddableObjectIds')
-
+    @security.protected(ManagePortal)
     def listAddableObjectIds(self):
         """ return a list of addable transform """
         tr_tool = getToolByName(self, 'portal_transforms')
         return [id for id in tr_tool.objectIds()
                 if not (id == self.id or id in self._object_ids)]
 
-    security.declareProtected(ManagePortal, 'objectIds')
-
+    @security.protected(ManagePortal)
     def objectIds(self):
         """ return a list of addable transform """
         return tuple(self._object_ids)
 
-    security.declareProtected(ManagePortal, 'objectValues')
-
+    @security.protected(ManagePortal)
     def objectValues(self):
         """ return a list of addable transform """
         tr_tool = getToolByName(self, 'portal_transforms')
diff --git a/Products/PortalTransforms/data.py b/Products/PortalTransforms/data.py
index 7f63716..4ee12cb 100644
--- a/Products/PortalTransforms/data.py
+++ b/Products/PortalTransforms/data.py
@@ -1,14 +1,13 @@
 from Products.PortalTransforms.interfaces import IDataStream
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class datastream:
+@implementer(IDataStream)
+class datastream(object):
     """A transformation datastream packet"""
 
     __slots__ = ('name', '_data', '_metadata')
 
-    implements(IDataStream)
-
     def __init__(self, name):
         self.__name__ = name
         self._data = ''
diff --git a/Products/PortalTransforms/libtransforms/commandtransform.py b/Products/PortalTransforms/libtransforms/commandtransform.py
index b4ea802..2999715 100644
--- a/Products/PortalTransforms/libtransforms/commandtransform.py
+++ b/Products/PortalTransforms/libtransforms/commandtransform.py
@@ -4,7 +4,7 @@
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.utils import bin_search
 from Products.PortalTransforms.libtransforms.utils import getShortPathName
-from zope.interface import implements
+from zope.interface import implementer
 
 import os
 import re
@@ -12,10 +12,10 @@
 import tempfile
 
 
-class commandtransform:
+@implementer(ITransform)
+class commandtransform(object):
     """abstract class for external command based transform
     """
-    implements(ITransform)
 
     def __init__(self, name=None, binary=None, **kwargs):
         if name is not None:
@@ -35,7 +35,8 @@ def initialize_tmpdir(self, data, **kwargs):
         os.mkdir(tmpdir)
         filename = kwargs.get("filename", '')
         fullname = join(tmpdir, basename(filename))
-        filedest = open(fullname, "wb").write(data)
+        with open(fullname, "wb") as fd:
+            fd.write(data)
         return tmpdir, fullname
 
     def subObjects(self, tmpdir):
@@ -57,12 +58,12 @@ def cleanDir(self, tmpdir):
         shutil.rmtree(tmpdir)
 
 
-class popentransform:
+@implementer(ITransform)
+class popentransform(object):
     """abstract class for external command based transform
 
     Command must read from stdin and write to stdout
     """
-    implements(ITransform)
 
     binaryName = ""
     binaryArgs = ""
@@ -106,7 +107,7 @@ def convert(self, data, cache, **kwargs):
             if self.useStdin:
                 cin.write(data)
 
-            status = cin.close()
+            cin.close()
 
             out = self.getData(couterr)
             couterr.close()
diff --git a/Products/PortalTransforms/libtransforms/piltransform.py b/Products/PortalTransforms/libtransforms/piltransform.py
index 99c50d9..cf31947 100644
--- a/Products/PortalTransforms/libtransforms/piltransform.py
+++ b/Products/PortalTransforms/libtransforms/piltransform.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from StringIO import StringIO
-from zope.interface import implements
+from zope.interface import implementer
 
 import PIL.Image
 
 
+@implementer(ITransform)
 class PILTransforms:
-    implements(ITransform)
     __name__ = "piltransforms"
 
     def __init__(self, name=None):
diff --git a/Products/PortalTransforms/libtransforms/retransform.py b/Products/PortalTransforms/libtransforms/retransform.py
index eacf1f7..ad5699b 100644
--- a/Products/PortalTransforms/libtransforms/retransform.py
+++ b/Products/PortalTransforms/libtransforms/retransform.py
@@ -1,15 +1,14 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 import re
 
 
+@implementer(ITransform)
 class retransform:
     """abstract class for regex transforms (re.sub wrapper)"""
 
-    implements(ITransform)
-
     inputs = ('text/',)
 
     def __init__(self, name, *args):
diff --git a/Products/PortalTransforms/tests/test_engine.py b/Products/PortalTransforms/tests/test_engine.py
index 8fdced2..7b8f1a8 100644
--- a/Products/PortalTransforms/tests/test_engine.py
+++ b/Products/PortalTransforms/tests/test_engine.py
@@ -3,7 +3,7 @@
 from Products.PortalTransforms.chain import chain
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import TransformException
-from zope.interface import implements
+from zope.interface import implementer
 
 import re
 import urllib
@@ -15,8 +15,8 @@ def name(self):
         return getattr(self, '__name__', self.__class__.__name__)
 
 
+@implementer(ITransform)
 class HtmlToText(BaseTransform):
-    implements(ITransform)
     inputs = ('text/html',)
     output = 'text/plain'
 
@@ -34,8 +34,8 @@ class HtmlToTextWithEncoding(HtmlToText):
     output_encoding = 'ascii'
 
 
+@implementer(ITransform)
 class FooToBar(BaseTransform):
-    implements(ITransform)
     inputs = ('text/*',)
     output = 'text/plain'
 
@@ -49,8 +49,8 @@ def convert(self, orig, data, **kwargs):
         return data
 
 
+@implementer(ITransform)
 class DummyHtmlFilter1(BaseTransform):
-    implements(ITransform)
     __name__ = 'dummy_html_filter1'
     inputs = ('text/html',)
     output = 'text/html'
@@ -60,8 +60,8 @@ def convert(self, orig, data, **kwargs):
         return data
 
 
+@implementer(ITransform)
 class DummyHtmlFilter2(BaseTransform):
-    implements(ITransform)
     __name__ = 'dummy_html_filter2'
     inputs = ('text/html',)
     output = 'text/html'
@@ -79,8 +79,8 @@ def convert(self, orig, data, context, **kwargs):
         return data
 
 
+@implementer(ITransform)
 class TransformNoIO(BaseTransform):
-    implements(ITransform)
 
 
 class BadTransformMissingImplements(BaseTransform):
@@ -89,26 +89,26 @@ class BadTransformMissingImplements(BaseTransform):
     output = 'text/plain'
 
 
+@implementer(ITransform)
 class BadTransformBadMIMEType1(BaseTransform):
-    implements(ITransform)
     inputs = ('truc/muche',)
     output = 'text/plain'
 
 
+@implementer(ITransform)
 class BadTransformBadMIMEType2(BaseTransform):
-    implements(ITransform)
     inputs = ('text/plain',)
     output = 'truc/muche'
 
 
+@implementer(ITransform)
 class BadTransformNoInput(BaseTransform):
-    implements(ITransform)
     inputs = ()
     output = 'text/plain'
 
 
+@implementer(ITransform)
 class BadTransformWildcardOutput(BaseTransform):
-    implements(ITransform)
     inputs = ('text/plain',)
     output = 'text/*'
 
diff --git a/Products/PortalTransforms/transforms/broken.py b/Products/PortalTransforms/transforms/broken.py
index e820e5d..0eb30d1 100644
--- a/Products/PortalTransforms/transforms/broken.py
+++ b/Products/PortalTransforms/transforms/broken.py
@@ -1,14 +1,14 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
-from zope.interface import implements
+from zope.interface import implementer
 
 
 WARNING = 100
 
 
-class BrokenTransform:
-    implements(ITransform)
+@implementer(ITransform)
+class BrokenTransform(object):
 
     __name__ = "broken transform"
     inputs = ("BROKEN",)
diff --git a/Products/PortalTransforms/transforms/html_body.py b/Products/PortalTransforms/transforms/html_body.py
index 5b5ee1c..192039f 100644
--- a/Products/PortalTransforms/transforms/html_body.py
+++ b/Products/PortalTransforms/transforms/html_body.py
@@ -1,14 +1,13 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class HTMLBody:
+@implementer(ITransform)
+class HTMLBody(object):
     """Simple transform which extracts the content of the body tag"""
 
-    implements(ITransform)
-
     __name__ = "html_body"
     inputs = ('text/html',)
     output = "text/html"
diff --git a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
index b4eec17..da5d1e5 100644
--- a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
+++ b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
@@ -2,14 +2,13 @@
 from plone.intelligenttext.transforms import \
     convertHtmlToWebIntelligentPlainText
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ITransform)
 class HtmlToWebIntelligentPlainText:
     """Transform which replaces urls and email into hyperlinks"""
 
-    implements(ITransform)
-
     __name__ = "html_to_web_intelligent_plain_text"
     output = "text/x-web-intelligent"
 
diff --git a/Products/PortalTransforms/transforms/identity.py b/Products/PortalTransforms/transforms/identity.py
index 52e0a57..a8a7962 100644
--- a/Products/PortalTransforms/transforms/identity.py
+++ b/Products/PortalTransforms/transforms/identity.py
@@ -4,15 +4,15 @@
 """
 
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class IdentityTransform:
+@implementer(ITransform)
+class IdentityTransform(object):
     """ Identity transform
 
     return content unchanged.
     """
-    implements(ITransform)
 
     __name__ = "rest_to_text"
 
diff --git a/Products/PortalTransforms/transforms/image_to_html.py b/Products/PortalTransforms/transforms/image_to_html.py
index 2456cf3..63a37eb 100644
--- a/Products/PortalTransforms/transforms/image_to_html.py
+++ b/Products/PortalTransforms/transforms/image_to_html.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class image_to_html:
-    implements(ITransform)
+@implementer(ITransform)
+class image_to_html(object):
 
     __name__ = "image_to_html"
     inputs = ('image/*', )
diff --git a/Products/PortalTransforms/transforms/lynx_dump.py b/Products/PortalTransforms/transforms/lynx_dump.py
index 42b26ba..4721365 100644
--- a/Products/PortalTransforms/transforms/lynx_dump.py
+++ b/Products/PortalTransforms/transforms/lynx_dump.py
@@ -7,13 +7,13 @@
     commandtransform
 from Products.PortalTransforms.libtransforms.commandtransform import \
     popentransform
-from zope.interface import implements
+from zope.interface import implementer
 
 import os
 
 
+@implementer(ITransform)
 class lynx_dump(popentransform):
-    implements(ITransform)
 
     __name__ = "lynx_dump"
     inputs = ('text/html',)
@@ -27,8 +27,9 @@ class lynx_dump(popentransform):
     useStdin = True
 
 
+@implementer(ITransform)
 class old_lynx_dump(commandtransform):
-    implements(ITransform)
+    # XXX i doubt this one works
 
     __name__ = "lynx_dump"
     inputs = ('text/html',)
diff --git a/Products/PortalTransforms/transforms/markdown_to_html.py b/Products/PortalTransforms/transforms/markdown_to_html.py
index 0a194c0..9121f10 100644
--- a/Products/PortalTransforms/transforms/markdown_to_html.py
+++ b/Products/PortalTransforms/transforms/markdown_to_html.py
@@ -7,7 +7,7 @@
 
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
-from zope.interface import implements
+from zope.interface import implementer
 
 
 try:
@@ -19,8 +19,8 @@
     HAS_MARKDOWN = True
 
 
-class markdown:
-    implements(ITransform)
+@implementer(ITransform)
+class markdown(object):
 
     __name__ = "markdown_to_html"
     inputs = ("text/x-web-markdown",)
diff --git a/Products/PortalTransforms/transforms/office_com.py b/Products/PortalTransforms/transforms/office_com.py
index 03c25fe..047cf75 100644
--- a/Products/PortalTransforms/transforms/office_com.py
+++ b/Products/PortalTransforms/transforms/office_com.py
@@ -12,11 +12,6 @@
 
 import os
 import os.path
-import re
-import string
-import sys
-import tempfile
-import traceback
 import win32api
 import win32com
 import win32com.client
diff --git a/Products/PortalTransforms/transforms/pdf_to_html.py b/Products/PortalTransforms/transforms/pdf_to_html.py
index 2a65568..bc0779f 100644
--- a/Products/PortalTransforms/transforms/pdf_to_html.py
+++ b/Products/PortalTransforms/transforms/pdf_to_html.py
@@ -8,13 +8,13 @@
 from Products.PortalTransforms.libtransforms.commandtransform import popentransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import sansext
-from zope.interface import implements
+from zope.interface import implementer
 
 import os
 
 
+@implementer(ITransform)
 class popen_pdf_to_html(popentransform):
-    implements(ITransform)
 
     __version__ = '2004-07-02.01'
 
@@ -31,8 +31,8 @@ def getData(self, couterr):
         return bodyfinder(couterr.read())
 
 
+@implementer(ITransform)
 class pdf_to_html(commandtransform):
-    implements(ITransform)
 
     __name__ = "pdf_to_html"
     inputs = ('application/pdf',)
diff --git a/Products/PortalTransforms/transforms/pdf_to_text.py b/Products/PortalTransforms/transforms/pdf_to_text.py
index 9762293..57c8196 100644
--- a/Products/PortalTransforms/transforms/pdf_to_text.py
+++ b/Products/PortalTransforms/transforms/pdf_to_text.py
@@ -7,13 +7,13 @@
 from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.commandtransform import popentransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import sansext
-from zope.interface import implements
+from zope.interface import implementer
 
 import os
 
 
+@implementer(ITransform)
 class pdf_to_text(popentransform):
-    implements(ITransform)
 
     __name__ = "pdf_to_text"
     inputs = ('application/pdf',)
@@ -27,8 +27,8 @@ class pdf_to_text(popentransform):
     useStdin = False
 
 
+@implementer(ITransform)
 class old_pdf_to_text(commandtransform):
-    implements(ITransform)
 
     __name__ = "pdf_to_text"
     inputs = ('application/pdf',)
diff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py
index 6fb3033..56b0b88 100644
--- a/Products/PortalTransforms/transforms/python.py
+++ b/Products/PortalTransforms/transforms/python.py
@@ -18,7 +18,7 @@
 from cStringIO import StringIO
 from DocumentTemplate.DT_Util import html_quote
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 import keyword
 import string
@@ -109,10 +109,10 @@ def __call__(self, toktype, toktext, sx, ex, line):
         self.out.write(close_tag)
 
 
-class PythonTransform:
+@implementer(ITransform)
+class PythonTransform(object):
     """Colorize Python source files
     """
-    implements(ITransform)
 
     __name__ = "python_to_html"
     inputs = ("text/x-python",)
diff --git a/Products/PortalTransforms/transforms/rest.py b/Products/PortalTransforms/transforms/rest.py
index ff93fd4..92069fd 100644
--- a/Products/PortalTransforms/transforms/rest.py
+++ b/Products/PortalTransforms/transforms/rest.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
 from reStructuredText import HTML
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class rest:
+@implementer(ITransform)
+class rest(object):
     r"""Converts from reST to HTML.
 
       >>> transform = rest()
@@ -14,8 +15,9 @@ class rest:
 
       >>> data = transform.convert('*hello world*', D())
       >>> print data.value
+
       <p><em>hello world</em></p>
-      <BLANKLINE>
+    @<BLANKLINer>:(object)
 
     We want the 'raw' and 'include' directives to be disabled by
     default:
@@ -43,7 +45,6 @@ class rest:
       ...         print 'Failure'
       Good
     """
-    implements(ITransform)
 
     __name__ = "rest_to_html"
     inputs = ("text/x-rst", "text/restructured",)
diff --git a/Products/PortalTransforms/transforms/rtf_to_html.py b/Products/PortalTransforms/transforms/rtf_to_html.py
index ad37b33..2ddddf3 100644
--- a/Products/PortalTransforms/transforms/rtf_to_html.py
+++ b/Products/PortalTransforms/transforms/rtf_to_html.py
@@ -7,13 +7,13 @@
 from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import sansext
-from zope.interface import implements
+from zope.interface import implementer
 
 import os
 
 
+@implementer(ITransform)
 class rtf_to_html(commandtransform):
-    implements(ITransform)
 
     __name__ = "rtf_to_html"
     inputs = ('application/rtf',)
diff --git a/Products/PortalTransforms/transforms/rtf_to_xml.py b/Products/PortalTransforms/transforms/rtf_to_xml.py
index 18583f8..6193fd1 100644
--- a/Products/PortalTransforms/transforms/rtf_to_xml.py
+++ b/Products/PortalTransforms/transforms/rtf_to_xml.py
@@ -6,13 +6,13 @@
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import sansext
-from zope.interface import implements
+from zope.interface import implementer
 
 import os
 
 
+@implementer(ITransform)
 class rtf_to_xml(commandtransform):
-    implements(ITransform)
 
     __name__ = "rtf_to_xml"
     inputs = ('application/rtf',)
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index 62879aa..74e31ac 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -6,7 +6,7 @@
 from Products.PortalTransforms.utils import safeToInt
 from sgmllib import SGMLParseError
 from sgmllib import SGMLParser
-from zope.interface import implements
+from zope.interface import implementer
 
 import logging
 import re
@@ -2544,7 +2544,8 @@ def scrubHTML(html, valid=VALID_TAGS, nasty=NASTY_TAGS,
     return parser.getResult()
 
 
-class SafeHTML:
+@implementer(ITransform)
+class SafeHTML(object):
     """Simple transform which uses CMFDefault functions to
     clean potentially bad tags.
 
@@ -2561,8 +2562,6 @@ class SafeHTML:
         -> Flush Cache.
     """
 
-    implements(ITransform)
-
     __name__ = "safe_html"
     inputs = ('text/html', )
     output = "text/x-html-safe"
diff --git a/Products/PortalTransforms/transforms/st.py b/Products/PortalTransforms/transforms/st.py
index 0afdb53..e6c1d31 100644
--- a/Products/PortalTransforms/transforms/st.py
+++ b/Products/PortalTransforms/transforms/st.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 from zope.structuredtext import stx2html
 
 
@@ -8,8 +8,8 @@
 STX_LEVEL = DEFAULT_STX_LEVEL
 
 
-class st:
-    implements(ITransform)
+@implementer(ITransform)
+class st(object):
 
     __name__ = "st_to_html"
     inputs = ("text/structured",)
diff --git a/Products/PortalTransforms/transforms/text_pre_to_html.py b/Products/PortalTransforms/transforms/text_pre_to_html.py
index cf9f446..5918c2f 100644
--- a/Products/PortalTransforms/transforms/text_pre_to_html.py
+++ b/Products/PortalTransforms/transforms/text_pre_to_html.py
@@ -1,14 +1,13 @@
 # -*- coding: utf-8 -*-
 from DocumentTemplate.DT_Util import html_quote
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ITransform)
 class TextPreToHTML:
     """simple transform which wraps raw text into a <pre> tag"""
 
-    implements(ITransform)
-
     __name__ = "text-pre_to_html"
     inputs = ('text/plain-pre',)
     output = "text/html"
diff --git a/Products/PortalTransforms/transforms/text_to_html.py b/Products/PortalTransforms/transforms/text_to_html.py
index 9ca7c1c..174c560 100644
--- a/Products/PortalTransforms/transforms/text_to_html.py
+++ b/Products/PortalTransforms/transforms/text_to_html.py
@@ -1,14 +1,13 @@
 # -*- coding: utf-8 -*-
 from DocumentTemplate.DT_Util import html_quote
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class TextToHTML:
+@implementer(ITransform)
+class TextToHTML(object):
     """simple transform which wrap raw text in a verbatim environment"""
 
-    implements(ITransform)
-
     __name__ = "text_to_html"
     output = "text/html"
 
diff --git a/Products/PortalTransforms/transforms/textile_to_html.py b/Products/PortalTransforms/transforms/textile_to_html.py
index eb9b27a..93153c3 100644
--- a/Products/PortalTransforms/transforms/textile_to_html.py
+++ b/Products/PortalTransforms/transforms/textile_to_html.py
@@ -9,7 +9,7 @@
 
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
-from zope.interface import implements
+from zope.interface import implementer
 
 
 HAS_TEXTILE = True
@@ -20,8 +20,8 @@
     log('textile_to_html: Could not import textile.')
 
 
-class textile:
-    implements(ITransform)
+@implementer(ITransform)
+class textile(object):
 
     __name__ = "textile_to_html"
     inputs = ("text/x-web-textile",)
diff --git a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
index 1208b73..7ef3f8e 100644
--- a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
+++ b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
@@ -1,14 +1,13 @@
 # -*- coding: utf-8 -*-
 from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml  # noqa
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class WebIntelligentPlainTextToHtml:
+@implementer(ITransform)
+class WebIntelligentPlainTextToHtml(object):
     """Transform which replaces urls and email into hyperlinks"""
 
-    implements(ITransform)
-
     __name__ = "web_intelligent_plain_text_to_html"
     output = "text/html"
 
diff --git a/Products/PortalTransforms/transforms/word_to_html.py b/Products/PortalTransforms/transforms/word_to_html.py
index 52c4517..624225f 100644
--- a/Products/PortalTransforms/transforms/word_to_html.py
+++ b/Products/PortalTransforms/transforms/word_to_html.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 import os
 
@@ -32,8 +32,8 @@
         from office_com import document
 
 
-class word_to_html:
-    implements(ITransform)
+@implementer(ITransform)
+class word_to_html(object):
 
     __name__ = "word_to_html"
     inputs = ('application/msword',)
diff --git a/Products/PortalTransforms/unsafe_transforms/command.py b/Products/PortalTransforms/unsafe_transforms/command.py
index f468f1a..5f9d940 100644
--- a/Products/PortalTransforms/unsafe_transforms/command.py
+++ b/Products/PortalTransforms/unsafe_transforms/command.py
@@ -7,11 +7,12 @@
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.utils import log
-from zope.interface import implements
+from zope.interface import implementer
 
 import os.path
 
 
+@implementer(ITransform)
 class ExternalCommandTransform(commandtransform):
     """ Custom external command
 
@@ -21,7 +22,6 @@ class ExternalCommandTransform(commandtransform):
     the command line parameters) and return output on stdout.
     Input and output mime types must be set correctly !
     """
-    implements(ITransform)
 
     __name__ = "command_transform"
 
diff --git a/Products/PortalTransforms/unsafe_transforms/xml.py b/Products/PortalTransforms/unsafe_transforms/xml.py
index abb25b1..de8c68b 100644
--- a/Products/PortalTransforms/unsafe_transforms/xml.py
+++ b/Products/PortalTransforms/unsafe_transforms/xml.py
@@ -13,11 +13,12 @@
 from Products.PortalTransforms.libtransforms.utils import bin_search
 from Products.PortalTransforms.libtransforms.utils import sansext
 from Products.PortalTransforms.utils import log
-from zope.interface import implements
+from zope.interface import implementer
 
 import re
 
 
+@implementer(ITransform)
 class XsltTransform(commandtransform):
     """ Custom external command
 
@@ -27,7 +28,6 @@ class XsltTransform(commandtransform):
 
     You can associate different document type to different transformations.
     """
-    implements(ITransform)
 
     __name__ = "xml_to_html"
 


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-20T00:29:49+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.PortalTransforms/commit/78b791044a756d696381b568bafc3311354be8a6

polishing and fixes

Files changed:
M Products/PortalTransforms/data.py
M Products/PortalTransforms/tests/test_engine.py
M Products/PortalTransforms/transforms/rest.py
M Products/PortalTransforms/transforms/safe_html.py

diff --git a/Products/PortalTransforms/data.py b/Products/PortalTransforms/data.py
index 4ee12cb..00e379b 100644
--- a/Products/PortalTransforms/data.py
+++ b/Products/PortalTransforms/data.py
@@ -6,7 +6,9 @@
 class datastream(object):
     """A transformation datastream packet"""
 
-    __slots__ = ('name', '_data', '_metadata')
+    __slots__ = (
+        'name', '_data', '_metadata', '__name__', '_objects', '_cacheable'
+    )
 
     def __init__(self, name):
         self.__name__ = name
diff --git a/Products/PortalTransforms/tests/test_engine.py b/Products/PortalTransforms/tests/test_engine.py
index 7b8f1a8..d344a7f 100644
--- a/Products/PortalTransforms/tests/test_engine.py
+++ b/Products/PortalTransforms/tests/test_engine.py
@@ -81,10 +81,10 @@ def convert(self, orig, data, context, **kwargs):
 
 @implementer(ITransform)
 class TransformNoIO(BaseTransform):
+    pass
 
 
 class BadTransformMissingImplements(BaseTransform):
-    #__implements__ = None
     inputs = ('text/*',)
     output = 'text/plain'
 
diff --git a/Products/PortalTransforms/transforms/rest.py b/Products/PortalTransforms/transforms/rest.py
index 92069fd..e86a0ad 100644
--- a/Products/PortalTransforms/transforms/rest.py
+++ b/Products/PortalTransforms/transforms/rest.py
@@ -15,16 +15,14 @@ class rest(object):
 
       >>> data = transform.convert('*hello world*', D())
       >>> print data.value
-
       <p><em>hello world</em></p>
-    @<BLANKLINer>:(object)
+      <BLANKLINE>
 
     We want the 'raw' and 'include' directives to be disabled by
     default:
 
       >>> try:
-      ...     out = transform.convert(
-      ..          '.. raw:: html\n  :file: <isonum.txt>', D())
+      ...     out = transform.convert('.. raw:: html\n  :file: <isonum.txt>', D())
       ... except NotImplementedError:
       ...     print 'Good'
       ... else:
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index 74e31ac..c368521 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -19,20 +19,63 @@ class IllegalHTML(ValueError):
 
 # These are the HTML tags that we will leave intact
 VALID_TAGS = {
-    'a': 1, 'b': 1, 'base': 0, 'big': 1, 'blockquote': 1, 'body': 1, 'br': 0,
-    'caption': 1, 'cite': 1, 'code': 1, 'dd': 1, 'div': 1, 'dl': 1, 'dt': 1,
-    'em': 1, 'h1': 1, 'h2': 1, 'h3': 1, 'h4': 1, 'h5': 1, 'h6': 1, 'head': 1,
-    'hr': 0, 'html': 1, 'i': 1, 'img': 0, 'kbd': 1, 'li': 1,
-    # , 'link'       : 1, type="script" hoses us
-    'meta': 0, 'ol': 1, 'p': 1, 'pre': 1, 'small': 1, 'span': 1, 'strong': 1,
-    'sub': 1, 'sup': 1, 'table': 1, 'tbody': 1, 'td': 1, 'th': 1, 'title': 1,
-    'tr': 1, 'tt': 1, 'u': 1, 'ul': 1, 'iframe': 1
+    'a': 1,
+    'b': 1,
+    'base': 0,
+    'big': 1,
+    'blockquote': 1,
+    'body': 1,
+    'br': 0,
+    'caption': 1,
+    'cite': 1,
+    'code': 1,
+    'dd': 1,
+    'div': 1,
+    'dl': 1,
+    'dt': 1,
+    'em': 1,
+    'h1': 1,
+    'h2': 1,
+    'h3': 1,
+    'h4': 1,
+    'h5': 1,
+    'h6': 1,
+    'head': 1,
+    'hr': 0,
+    'html': 1,
+    'i': 1,
+    'img': 0,
+    'kbd': 1,
+    'li': 1,
+    # 'link' 1, type="script" hoses us
+    'meta': 0,
+    'ol': 1,
+    'p': 1,
+    'pre': 1,
+    'small': 1,
+    'span': 1,
+    'strong': 1,
+    'sub': 1,
+    'sup': 1,
+    'table': 1,
+    'tbody': 1,
+    'td': 1,
+    'th': 1,
+    'title': 1,
+    'tr': 1,
+    'tt': 1,
+    'u': 1,
+    'ul': 1,
+    'iframe': 1,
 }
 
 NASTY_TAGS = {
-    'script': 1, 'object': 1, 'embed': 1, 'applet': 1, 'style': 1,
-    # this helps improve Word HTML cleanup.
-    'meta': 1  # allowed by parsers, but can cause unexpected behavior
+    'script': 1,
+    'object': 1,
+    'embed': 1,
+    'applet': 1,
+    'style': 1,  # this helps improve Word HTML cleanup.
+    'meta': 1,  # allowed by parsers, but can cause unexpected behavior
 }
 
 


Repository: Products.PortalTransforms


Branch: refs/heads/master
Date: 2016-01-20T09:44:33+01:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/Products.PortalTransforms/commit/ee6f53396e14f89673c76e6f8a6d835ba6696312

Merge pull request #10 from plone/jensens-cleanup

cleanup

Files changed:
A .isort.cfg
M CHANGES.rst
M Products/PortalTransforms/Transform.py
M Products/PortalTransforms/TransformEngine.py
M Products/PortalTransforms/TransformTool.py
M Products/PortalTransforms/TransformsChain.py
M Products/PortalTransforms/__init__.py
M Products/PortalTransforms/cache.py
M Products/PortalTransforms/chain.py
M Products/PortalTransforms/data.py
M Products/PortalTransforms/libtransforms/commandtransform.py
M Products/PortalTransforms/libtransforms/piltransform.py
M Products/PortalTransforms/libtransforms/retransform.py
M Products/PortalTransforms/libtransforms/utils.py
M Products/PortalTransforms/setuphandlers.py
M Products/PortalTransforms/tests/__init__.py
M Products/PortalTransforms/tests/input/test_python.py
M Products/PortalTransforms/tests/test_doctests.py
M Products/PortalTransforms/tests/test_engine.py
M Products/PortalTransforms/tests/test_graph.py
M Products/PortalTransforms/tests/test_intelligenttext.py
M Products/PortalTransforms/tests/test_transforms.py
M Products/PortalTransforms/tests/test_xss.py
M Products/PortalTransforms/tests/utils.py
M Products/PortalTransforms/tests/word.py
M Products/PortalTransforms/transforms/__init__.py
M Products/PortalTransforms/transforms/broken.py
M Products/PortalTransforms/transforms/html_body.py
M Products/PortalTransforms/transforms/html_to_text.py
M Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
M Products/PortalTransforms/transforms/identity.py
M Products/PortalTransforms/transforms/image_to_bmp.py
M Products/PortalTransforms/transforms/image_to_gif.py
M Products/PortalTransforms/transforms/image_to_html.py
M Products/PortalTransforms/transforms/image_to_jpeg.py
M Products/PortalTransforms/transforms/image_to_pcx.py
M Products/PortalTransforms/transforms/image_to_png.py
M Products/PortalTransforms/transforms/image_to_ppm.py
M Products/PortalTransforms/transforms/image_to_tiff.py
M Products/PortalTransforms/transforms/lynx_dump.py
M Products/PortalTransforms/transforms/markdown_to_html.py
M Products/PortalTransforms/transforms/office_com.py
M Products/PortalTransforms/transforms/office_uno.py
M Products/PortalTransforms/transforms/office_wvware.py
M Products/PortalTransforms/transforms/pdf_to_html.py
M Products/PortalTransforms/transforms/pdf_to_text.py
M Products/PortalTransforms/transforms/python.py
M Products/PortalTransforms/transforms/rest.py
M Products/PortalTransforms/transforms/rtf_to_html.py
M Products/PortalTransforms/transforms/rtf_to_xml.py
M Products/PortalTransforms/transforms/safe_html.py
M Products/PortalTransforms/transforms/st.py
M Products/PortalTransforms/transforms/text_pre_to_html.py
M Products/PortalTransforms/transforms/text_to_html.py
M Products/PortalTransforms/transforms/textile_to_html.py
M Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
M Products/PortalTransforms/transforms/word_to_html.py
M Products/PortalTransforms/unsafe_transforms/build_transforms.py
M Products/PortalTransforms/unsafe_transforms/command.py
M Products/PortalTransforms/unsafe_transforms/xml.py
M Products/PortalTransforms/utils.py
M bootstrap.py
M setup.py

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..64d5832
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,6 @@
+[settings]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
diff --git a/CHANGES.rst b/CHANGES.rst
index 18f9e8d..e1cd916 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ New:
 
 Fixes:
 
-- *add item here*
+- cleanup: autopep8, isort sorted imports, utf8 header, security decorators,
+  zca decorators, minor manual edits
+  [jensens]
 
 
 2.1.10 (2015-09-15)
diff --git a/Products/PortalTransforms/Transform.py b/Products/PortalTransforms/Transform.py
index 40cc325..d5ea272 100644
--- a/Products/PortalTransforms/Transform.py
+++ b/Products/PortalTransforms/Transform.py
@@ -1,21 +1,20 @@
-from logging import ERROR
-from UserDict import UserDict
-
-from zope.interface import implements
-
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+# -*- coding: utf-8 -*-
+from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
+from logging import ERROR
+from OFS.SimpleItem import SimpleItem
 from Persistence import PersistentMapping
 from persistent.list import PersistentList
-from OFS.SimpleItem import SimpleItem
-from AccessControl import ClassSecurityInfo
-
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from Products.PortalTransforms.interfaces import ITransform
-from Products.PortalTransforms.utils import TransformException, log, _www
 from Products.PortalTransforms.transforms.broken import BrokenTransform
+from Products.PortalTransforms.utils import _www
+from Products.PortalTransforms.utils import log
+from Products.PortalTransforms.utils import TransformException
+from UserDict import UserDict
+from zope.interface import implementer
 
 
 def import_from_name(module_name):
@@ -25,7 +24,7 @@ def import_from_name(module_name):
     try:
         for sub in module_name.split('.')[1:]:
             m = getattr(m, sub)
-    except AttributeError, e:
+    except AttributeError as e:
         raise ImportError(str(e))
     return m
 
@@ -35,7 +34,7 @@ def make_config_persistent(kwargs):
     dictionary by persistent mapping.
     """
     for key, value in kwargs.items():
-        if type(value) == type({}):
+        if isinstance(value, type({})):
             p_value = PersistentMapping(value)
             kwargs[key] = p_value
         elif type(value) in (type(()), type([])):
@@ -60,16 +59,15 @@ def make_config_nonpersistent(kwargs):
     'string': str,
     'list': PersistentList,
     'dict': PersistentMapping,
-    }
+}
 
 
+@implementer(ITransform)
 class Transform(SimpleItem):
     """A transform is an external method with
     additional configuration information
     """
 
-    implements(ITransform)
-
     meta_type = 'Transform'
     meta_types = all_meta_types = ()
 
@@ -79,7 +77,7 @@ class Transform(SimpleItem):
          {'label': 'Reload',
           'action': 'manage_reloadTransform'},) +
         SimpleItem.manage_options
-        )
+    )
 
     manage_main = PageTemplateFile('configureTransform', _www)
     manage_reloadTransform = PageTemplateFile('reloadTransform', _www)
@@ -151,7 +149,7 @@ def _tr_init(self, set_conf=0, transform=None):
     def _load_transform(self):
         try:
             m = import_from_name(self.module)
-        except ImportError, err:
+        except ImportError as err:
             transform = BrokenTransform(self.id, self.module, err)
             msg = ("Cannot register transform %s (ImportError), using "
                    "BrokenTransform: Error\n %s" % (self.id, err))
@@ -164,7 +162,7 @@ def _load_transform(self):
             raise TransformException(msg)
         try:
             transform = m.register()
-        except Exception, err:
+        except Exception as err:
             transform = BrokenTransform(self.id, self.module, err)
             msg = ("Cannot register transform %s, using BrokenTransform: "
                    "Error\n %s" % (self.id, err))
@@ -175,7 +173,7 @@ def _load_transform(self):
         self._v_transform = transform
         return transform
 
-    security.declarePrivate('manage_beforeDelete')
+    @security.private
     def manage_beforeDelete(self, item, container):
         SimpleItem.manage_beforeDelete(self, item, container)
         if self is item:
@@ -183,35 +181,34 @@ def manage_beforeDelete(self, item, container):
             tr_tool = getToolByName(self, 'portal_transforms')
             tr_tool._unmapTransform(self)
 
-    security.declarePublic('get_documentation')
+    @security.public
     def get_documentation(self):
         """ return transform documentation """
         if not hasattr(self, '_v_transform'):
             self._load_transform()
         return self._v_transform.__doc__
 
-    security.declarePublic('convert')
+    @security.public
     def convert(self, *args, **kwargs):
         # return apply the transform and return the result
         if not hasattr(self, '_v_transform'):
             self._load_transform()
         return self._v_transform.convert(*args, **kwargs)
 
-    security.declarePublic('name')
+    @security.public
     def name(self):
         """return the name of the transform instance"""
         return self.id
 
-    security.declareProtected(ManagePortal, 'get_parameters')
+    @security.protected(ManagePortal)
     def get_parameters(self):
         """ get transform's parameters names """
         if not hasattr(self, '_v_transform'):
             self._load_transform()
-        keys = self._v_transform.config.keys()
-        keys.sort()
+        keys = sorted(self._v_transform.config.keys())
         return keys
 
-    security.declareProtected(ManagePortal, 'get_parameter_value')
+    @security.protected(ManagePortal)
     def get_parameter_value(self, key):
         """ get value of a transform's parameter """
         value = self._config[key]
@@ -227,7 +224,7 @@ def get_parameter_value(self, key):
             result = value
         return result
 
-    security.declareProtected(ManagePortal, 'get_parameter_infos')
+    @security.protected(ManagePortal)
     def get_parameter_infos(self, key):
         """ get informations about a parameter
 
@@ -242,7 +239,7 @@ def get_parameter_infos(self, key):
         except KeyError:
             return 'string', '', ''
 
-    security.declareProtected(ManagePortal, 'set_parameters')
+    @security.protected(ManagePortal)
     def set_parameters(self, REQUEST=None, **kwargs):
         """ set transform's parameters """
         if not kwargs:
@@ -274,7 +271,7 @@ def set_parameters(self, REQUEST=None, **kwargs):
             REQUEST['RESPONSE'].redirect(
                 tr_tool.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'reload')
+    @security.protected(ManagePortal)
     def reload(self):
         """ reload the module where the transformation class is defined """
         log('Reloading transform %s' % self.module)
diff --git a/Products/PortalTransforms/TransformEngine.py b/Products/PortalTransforms/TransformEngine.py
index 145bfde..14fc33f 100644
--- a/Products/PortalTransforms/TransformEngine.py
+++ b/Products/PortalTransforms/TransformEngine.py
@@ -1,48 +1,46 @@
-from logging import DEBUG
-
-from persistent.list import PersistentList
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from Acquisition import aq_base
 from App.class_init import InitializeClass
+from logging import DEBUG
 from OFS.Folder import Folder
 from Persistence import PersistentMapping
+from persistent.list import PersistentList
 from Products.CMFCore.ActionProviderBase import ActionProviderBase
-from Products.CMFCore.permissions import ManagePortal, View
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import getToolByName
 from Products.CMFCore.utils import registerToolInterface
 from Products.CMFCore.utils import UniqueObject
-from Products.CMFCore.utils import getToolByName
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-
-from Products.PortalTransforms.data import datastream
-from Products.PortalTransforms.chain import TransformsChain
-from Products.PortalTransforms.chain import chain
 from Products.PortalTransforms.cache import Cache
+from Products.PortalTransforms.chain import chain
+from Products.PortalTransforms.chain import TransformsChain
+from Products.PortalTransforms.data import datastream
 from Products.PortalTransforms.interfaces import IDataStream
-from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.interfaces import IEngine
 from Products.PortalTransforms.interfaces import IPortalTransformsTool
+from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
 from Products.PortalTransforms.Transform import Transform
 from Products.PortalTransforms.transforms import initialize
+from Products.PortalTransforms.utils import _www
 from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.utils import TransformException
-from Products.PortalTransforms.utils import _www
+from zope.interface import implementer
 
 
+@implementer(IPortalTransformsTool, IEngine)
 class TransformTool(UniqueObject, ActionProviderBase, Folder):
 
     id = 'portal_transforms'
     meta_type = id.title().replace('_', ' ')
     isPrincipiaFolderish = 1  # Show up in the ZMI
 
-    implements(IPortalTransformsTool, IEngine)
-
     meta_types = all_meta_types = (
         {'name': 'Transform', 'action': 'manage_addTransformForm'},
         {'name': 'TransformsChain', 'action': 'manage_addTransformsChainForm'},
-        )
+    )
 
     manage_addTransformForm = PageTemplateFile('addTransform', _www)
     manage_addTransformsChainForm = PageTemplateFile(
@@ -58,7 +56,7 @@ class TransformTool(UniqueObject, ActionProviderBase, Folder):
          {'label': 'Policy', 'action': 'manage_editTransformationPolicyForm'},
          {'label': 'Reload transforms',
           'action': 'manage_reloadAllTransforms'},
-        ))
+         ))
 
     security = ClassSecurityInfo()
 
@@ -70,7 +68,7 @@ def __init__(self, policies=None, max_sec_in_cache=3600):
 
     # mimetype oriented conversions (iengine interface)
 
-    security.declarePrivate('unregisterTransform')
+    @security.private
     def unregisterTransform(self, name):
         """ unregister a transform
         name is the name of a registered transform
@@ -79,7 +77,7 @@ def unregisterTransform(self, name):
         if name in self.objectIds():
             self._delObject(name)
 
-    security.declarePublic('convertTo')
+    @security.public
     def convertTo(self, target_mimetype, orig, data=None, object=None,
                   usedby=None, context=None, **kwargs):
         """Convert orig to a given mimetype
@@ -136,7 +134,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
                 severity=DEBUG)
             return None
 
-        ## fastpath
+        # fastpath
         # If orig_mt and target_mt are the same, we only allow
         # a one-hop transform, a.k.a. filter.
         # XXX disabled filtering for now
@@ -148,7 +146,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
                 cache.setCache(str(target_mimetype), data)
             return data
 
-        ## get a path to output mime type
+        # get a path to output mime type
         requirements = self._policies.get(str(target_mt), [])
         path = self._findPath(orig_mt, target_mt, list(requirements))
         if not path and requirements:
@@ -162,7 +160,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
             return None
 
         if len(path) > 1:
-            ## create a chain on the fly (sly)
+            # create a chain on the fly (sly)
             transform = chain()
             for t in path:
                 transform.registerTransform(t)
@@ -182,7 +180,7 @@ def convertTo(self, target_mimetype, orig, data=None, object=None,
     # make sure it's not publishable (XSS risk)
     del convertTo.__doc__
 
-    security.declarePublic('convertToData')
+    @security.public
     def convertToData(self, target_mimetype, orig, data=None, object=None,
                       usedby=None, context=None, **kwargs):
         # Convert to a given mimetype and return the raw data
@@ -193,7 +191,7 @@ def convertToData(self, target_mimetype, orig, data=None, object=None,
             return data.getData()
         return None
 
-    security.declarePublic('convert')
+    @security.public
     def convert(self, name, orig, data=None, context=None, **kwargs):
         # run a tranform of a given name on data
 
@@ -276,7 +274,7 @@ def _mapTransform(self, transform):
 
                     for mt2 in mto[0].mimetypes:
                         try:
-                            if not transform in mt_in[mt2]:
+                            if transform not in mt_in[mt2]:
                                 mt_in[mt2].append(transform)
                         except KeyError:
                             mt_in[mt2] = PersistentList([transform])
@@ -345,7 +343,7 @@ def _findPath(self, orig, target, required_transforms=()):
                         # which also reach the required transform.
                         shortest = len(firstPath)
                         shortestFirstPath = firstPath
-            if shortestFirstPath == None:
+            if shortestFirstPath is None:
                 return None  # there is no path leading to this transform
             # Then we have to take this transform.
             secondPath = [requiredTransform]
@@ -467,7 +465,7 @@ def _getPaths(self, orig, target, requirements, path=None, result=None):
 
         return result
 
-    security.declarePrivate('manage_afterAdd')
+    @security.private
     def manage_afterAdd(self, item, container):
         """ overload manage_afterAdd to finish initialization when the
         transform tool is added
@@ -479,7 +477,7 @@ def manage_afterAdd(self, item, container):
             # may fail on copy or zexp import
             pass
 
-    security.declareProtected(ManagePortal, 'manage_addTransform')
+    @security.protected(ManagePortal)
     def manage_addTransform(self, id, module, REQUEST=None):
         """ add a new transform to the tool """
         transform = Transform(id, module)
@@ -488,7 +486,7 @@ def manage_addTransform(self, id, module, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'manage_addTransform')
+    @security.protected(ManagePortal)
     def manage_addTransformsChain(self, id, description, REQUEST=None):
         """ add a new transform to the tool """
         transform = TransformsChain(id, description)
@@ -497,14 +495,14 @@ def manage_addTransformsChain(self, id, description, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'manage_addTransform')
+    @security.protected(ManagePortal)
     def manage_setCacheValidityTime(self, seconds, REQUEST=None):
         """set  the lifetime of cached data in seconds"""
         self.max_sec_in_cache = int(seconds)
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'reloadTransforms')
+    @security.protected(ManagePortal)
     def reloadTransforms(self, ids=()):
         """ reload transforms with the given ids
         if no ids, reload all registered transforms
@@ -537,7 +535,7 @@ def manage_addPolicy(self, output_mimetype, required_transforms,
         self._policies[output_mimetype] = required_transforms
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() +
-                '/manage_editTransformationPolicyForm')
+                                         '/manage_editTransformationPolicyForm')
 
     def manage_delPolicies(self, outputs, REQUEST=None):
         """ remove policies for given output mime types"""
@@ -545,7 +543,7 @@ def manage_delPolicies(self, outputs, REQUEST=None):
             del self._policies[mimetype]
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() +
-                '/manage_editTransformationPolicyForm')
+                                         '/manage_editTransformationPolicyForm')
 
     def listPolicies(self):
         """ return the list of defined policies
@@ -559,7 +557,7 @@ def listPolicies(self):
 
     # mimetype oriented conversions (iengine interface)
 
-    security.declarePrivate('registerTransform')
+    @security.private
     def registerTransform(self, transform):
         """register a new transform
 
@@ -579,7 +577,7 @@ def registerTransform(self, transform):
             self._setObject(name, transform)
             self._mapTransform(transform)
 
-    security.declareProtected(ManagePortal, 'ZopeFind')
+    @security.protected(ManagePortal)
     def ZopeFind(self, *args, **kwargs):
         """Don't break ZopeFind feature when a transform can't be loaded
         """
@@ -588,7 +586,7 @@ def ZopeFind(self, *args, **kwargs):
         except MissingBinary:
             log('ZopeFind: catched MissingBinary exception')
 
-    security.declareProtected(View, 'objectItems')
+    @security.protected(View)
     def objectItems(self, *args, **kwargs):
         """Don't break ZopeFind feature when a transform can't be loaded
         """
diff --git a/Products/PortalTransforms/TransformTool.py b/Products/PortalTransforms/TransformTool.py
index cd7cb9a..e2e740f 100644
--- a/Products/PortalTransforms/TransformTool.py
+++ b/Products/PortalTransforms/TransformTool.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.TransformEngine import TransformTool
diff --git a/Products/PortalTransforms/TransformsChain.py b/Products/PortalTransforms/TransformsChain.py
index 5d545ca..8eab11a 100644
--- a/Products/PortalTransforms/TransformsChain.py
+++ b/Products/PortalTransforms/TransformsChain.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """FIXME: backward compat, remove later
 """
 from Products.PortalTransforms.chain import Chain as TransformsChain
diff --git a/Products/PortalTransforms/__init__.py b/Products/PortalTransforms/__init__.py
index 0e68d3f..5b2ba26 100644
--- a/Products/PortalTransforms/__init__.py
+++ b/Products/PortalTransforms/__init__.py
@@ -1,23 +1,24 @@
+from Products.MimetypesRegistry import mime_types
+from Products.MimetypesRegistry import MimeTypeItem
 from Products.PortalTransforms.TransformEngine import TransformTool
 
+# running (required)
+# XXX backward compatibility tricks to make old PortalTransform based Mimetypes
+import sys
+
+
 PKG_NAME = 'PortalTransforms'
 
 tools = (
     TransformTool,
-    )
+)
 
-# XXX backward compatibility tricks to make old PortalTransform based Mimetypes
-# running (required)
-import sys
 this_module = sys.modules[__name__]
 
-from Products.MimetypesRegistry import mime_types
 setattr(this_module, 'mime_types', mime_types)
 
-from Products.MimetypesRegistry import MimeTypeItem
 setattr(this_module, 'MimeTypeItem', MimeTypeItem)
 
-from Products.MimetypesRegistry import MimeTypeItem
 sys.modules['Products.PortalTransforms.zope.MimeTypeItem'] = MimeTypeItem
 
 
diff --git a/Products/PortalTransforms/cache.py b/Products/PortalTransforms/cache.py
index 41742a7..3b065c3 100644
--- a/Products/PortalTransforms/cache.py
+++ b/Products/PortalTransforms/cache.py
@@ -1,7 +1,8 @@
 """Cache
 """
-from time import time
 from Acquisition import aq_base
+from time import time
+
 
 _marker = object()
 
diff --git a/Products/PortalTransforms/chain.py b/Products/PortalTransforms/chain.py
index 15f3932..d859a87 100644
--- a/Products/PortalTransforms/chain.py
+++ b/Products/PortalTransforms/chain.py
@@ -1,21 +1,18 @@
-from zope.interface import implements
-
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from Persistence import Persistent
-from App.class_init import InitializeClass
+from AccessControl import ClassSecurityInfo
 from Acquisition import Implicit
+from App.class_init import InitializeClass
 from OFS.SimpleItem import Item
-from AccessControl import ClassSecurityInfo
-
-from Products.CMFCore.permissions import ManagePortal, ManageProperties
+from Persistence import Persistent
+from Products.CMFCore.permissions import ManagePortal
+from Products.CMFCore.permissions import ManageProperties
 from Products.CMFCore.utils import getToolByName
-
-from Products.PortalTransforms.utils import _www
-
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
 from Products.PortalTransforms.interfaces import IChain
 from Products.PortalTransforms.interfaces import ITransform
-
+from Products.PortalTransforms.utils import _www
 from UserList import UserList
+from zope.interface import implementer
+
 
 try:
     from OFS.role import RoleManager
@@ -23,11 +20,11 @@
     # Zope <=2.12
     from AccessControl.Role import RoleManager
 
+
+@implementer(IChain, ITransform)
 class chain(UserList):
     """A chain of transforms used to transform data"""
 
-    implements(IChain, ITransform)
-
     def __init__(self, name='', *args):
         UserList.__init__(self, *args)
         self.__name__ = name
@@ -81,8 +78,8 @@ def _update(self):
         self.inputs = self[0].inputs
         self.output = self[-1].output
         for i in range(len(self)):
-            if hasattr(self[-i-1], 'output_encoding'):
-                self.output_encoding = self[-i-1].output_encoding
+            if hasattr(self[-i - 1], 'output_encoding'):
+                self.output_encoding = self[-i - 1].output_encoding
                 break
         else:
             try:
@@ -131,19 +128,19 @@ def _chain_init(self):
         self.inputs = c.inputs or ('application/octet-stream',)
         self.output = c.output or 'application/octet-stream'
 
-    security.declarePublic('convert')
+    @security.public
     def convert(self, *args, **kwargs):
         """ return apply the transform and return the result """
         if self._chain is None:
             self._chain_init()
         return self._chain.convert(*args, **kwargs)
 
-    security.declarePublic('name')
+    @security.public
     def name(self):
         """return the name of the transform instance"""
         return self.id
 
-    security.declarePrivate('manage_beforeDelete')
+    @security.private
     def manage_beforeDelete(self, item, container):
         Item.manage_beforeDelete(self, item, container)
         if self is item:
@@ -151,7 +148,7 @@ def manage_beforeDelete(self, item, container):
             tr_tool = getToolByName(self, 'portal_transforms')
             tr_tool.unregisterTransform(self.id)
 
-    security.declareProtected(ManagePortal, 'manage_addObject')
+    @security.protected(ManagePortal)
     def manage_addObject(self, id, REQUEST=None):
         """ add a new transform or chain to the chain """
         assert id not in self._object_ids
@@ -160,7 +157,7 @@ def manage_addObject(self, id, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManagePortal, 'manage_delObjects')
+    @security.protected(ManagePortal)
     def manage_delObjects(self, ids, REQUEST=None):
         """ delete the selected mime types """
         for id in ids:
@@ -171,7 +168,7 @@ def manage_delObjects(self, ids, REQUEST=None):
 
     # transforms order handling #
 
-    security.declareProtected(ManagePortal, 'move_object_to_position')
+    @security.protected(ManagePortal)
     def move_object_to_position(self, id, newpos):
         """ overriden from OrderedFolder to store id instead of objects
         """
@@ -183,7 +180,7 @@ def move_object_to_position(self, id, newpos):
         self._chain_init()
         return 1
 
-    security.declareProtected(ManageProperties, 'move_object_up')
+    @security.protected(ManageProperties)
     def move_object_up(self, id, REQUEST=None):
         """  move object with the given id up in the list """
         newpos = self._object_ids.index(id) - 1
@@ -191,7 +188,7 @@ def move_object_up(self, id, REQUEST=None):
         if REQUEST is not None:
             REQUEST['RESPONSE'].redirect(self.absolute_url() + '/manage_main')
 
-    security.declareProtected(ManageProperties, 'move_object_down')
+    @security.protected(ManageProperties)
     def move_object_down(self, id, REQUEST=None):
         """  move object with the given id down in the list """
         newpos = self._object_ids.index(id) + 1
@@ -201,7 +198,7 @@ def move_object_down(self, id, REQUEST=None):
 
     # Z transform interface #
 
-    security.declareProtected(ManagePortal, 'reload')
+    @security.protected(ManagePortal)
     def reload(self):
         """ reload the module where the transformation class is defined """
         for tr in self.objectValues():
@@ -210,19 +207,19 @@ def reload(self):
 
     # utilities #
 
-    security.declareProtected(ManagePortal, 'listAddableObjectIds')
+    @security.protected(ManagePortal)
     def listAddableObjectIds(self):
         """ return a list of addable transform """
         tr_tool = getToolByName(self, 'portal_transforms')
         return [id for id in tr_tool.objectIds()
                 if not (id == self.id or id in self._object_ids)]
 
-    security.declareProtected(ManagePortal, 'objectIds')
+    @security.protected(ManagePortal)
     def objectIds(self):
         """ return a list of addable transform """
         return tuple(self._object_ids)
 
-    security.declareProtected(ManagePortal, 'objectValues')
+    @security.protected(ManagePortal)
     def objectValues(self):
         """ return a list of addable transform """
         tr_tool = getToolByName(self, 'portal_transforms')
diff --git a/Products/PortalTransforms/data.py b/Products/PortalTransforms/data.py
index f345dae..00e379b 100644
--- a/Products/PortalTransforms/data.py
+++ b/Products/PortalTransforms/data.py
@@ -1,14 +1,14 @@
-from zope.interface import implements
-
 from Products.PortalTransforms.interfaces import IDataStream
+from zope.interface import implementer
 
 
-class datastream:
+@implementer(IDataStream)
+class datastream(object):
     """A transformation datastream packet"""
 
-    __slots__ = ('name', '_data', '_metadata')
-
-    implements(IDataStream)
+    __slots__ = (
+        'name', '_data', '_metadata', '__name__', '_objects', '_cacheable'
+    )
 
     def __init__(self, name):
         self.__name__ = name
diff --git a/Products/PortalTransforms/libtransforms/commandtransform.py b/Products/PortalTransforms/libtransforms/commandtransform.py
index 2a8e799..2999715 100644
--- a/Products/PortalTransforms/libtransforms/commandtransform.py
+++ b/Products/PortalTransforms/libtransforms/commandtransform.py
@@ -1,20 +1,21 @@
+# -*- coding: utf-8 -*-
+from os.path import basename
+from os.path import join
+from Products.PortalTransforms.interfaces import ITransform
+from Products.PortalTransforms.libtransforms.utils import bin_search
+from Products.PortalTransforms.libtransforms.utils import getShortPathName
+from zope.interface import implementer
+
 import os
-import tempfile
 import re
 import shutil
-from os.path import join, basename
-
-from zope.interface import implements
-
-from Products.PortalTransforms.libtransforms.utils import (
-    bin_search, getShortPathName)
-from Products.PortalTransforms.interfaces import ITransform
+import tempfile
 
 
-class commandtransform:
+@implementer(ITransform)
+class commandtransform(object):
     """abstract class for external command based transform
     """
-    implements(ITransform)
 
     def __init__(self, name=None, binary=None, **kwargs):
         if name is not None:
@@ -34,7 +35,8 @@ def initialize_tmpdir(self, data, **kwargs):
         os.mkdir(tmpdir)
         filename = kwargs.get("filename", '')
         fullname = join(tmpdir, basename(filename))
-        filedest = open(fullname, "wb").write(data)
+        with open(fullname, "wb") as fd:
+            fd.write(data)
         return tmpdir, fullname
 
     def subObjects(self, tmpdir):
@@ -56,12 +58,12 @@ def cleanDir(self, tmpdir):
         shutil.rmtree(tmpdir)
 
 
-class popentransform:
+@implementer(ITransform)
+class popentransform(object):
     """abstract class for external command based transform
 
     Command must read from stdin and write to stdout
     """
-    implements(ITransform)
 
     binaryName = ""
     binaryArgs = ""
@@ -105,7 +107,7 @@ def convert(self, data, cache, **kwargs):
             if self.useStdin:
                 cin.write(data)
 
-            status = cin.close()
+            cin.close()
 
             out = self.getData(couterr)
             couterr.close()
diff --git a/Products/PortalTransforms/libtransforms/piltransform.py b/Products/PortalTransforms/libtransforms/piltransform.py
index 396907b..cf31947 100644
--- a/Products/PortalTransforms/libtransforms/piltransform.py
+++ b/Products/PortalTransforms/libtransforms/piltransform.py
@@ -1,11 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from StringIO import StringIO
+from zope.interface import implementer
+
 import PIL.Image
 
 
+@implementer(ITransform)
 class PILTransforms:
-    implements(ITransform)
     __name__ = "piltransforms"
 
     def __init__(self, name=None):
diff --git a/Products/PortalTransforms/libtransforms/retransform.py b/Products/PortalTransforms/libtransforms/retransform.py
index 08b284d..ad5699b 100644
--- a/Products/PortalTransforms/libtransforms/retransform.py
+++ b/Products/PortalTransforms/libtransforms/retransform.py
@@ -1,15 +1,14 @@
-import re
-
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implementer
+
+import re
 
 
+@implementer(ITransform)
 class retransform:
     """abstract class for regex transforms (re.sub wrapper)"""
 
-    implements(ITransform)
-
     inputs = ('text/',)
 
     def __init__(self, name, *args):
diff --git a/Products/PortalTransforms/libtransforms/utils.py b/Products/PortalTransforms/libtransforms/utils.py
index b3781ae..f800cdb 100644
--- a/Products/PortalTransforms/libtransforms/utils.py
+++ b/Products/PortalTransforms/libtransforms/utils.py
@@ -1,7 +1,12 @@
+# -*- coding: utf-8 -*-
+from htmlentitydefs import entitydefs
+from Products.PortalTransforms.utils import log
+from sgmllib import SGMLParseError
+from sgmllib import SGMLParser
+
 import os
 import sys
-from sgmllib import SGMLParser, SGMLParseError
-from htmlentitydefs import entitydefs
+
 
 try:
     # Need to be imported before win32api to avoid dll loading
@@ -14,8 +19,6 @@
 except ImportError:
     WIN32 = False
 
-from Products.PortalTransforms.utils import log
-
 
 class MissingBinary(Exception):
     pass
@@ -97,82 +100,80 @@ def bodyfinder(text):
 # value of 0 means it is an empty tag, like '<br />'.  Also note that
 # there currently is a separate list in the safe_html transform, which
 # itself is a copy from CMFDefault, with some changes done on the fly.
-VALID_TAGS = { 'a'          : 1
-             , 'article'    : 1
-             , 'aside'      : 1
-             , 'audio'      : 1
-             , 'b'          : 1
-             , 'base'       : 0
-             , 'blockquote' : 1
-             , 'body'       : 1
-             , 'br'         : 0
-             , 'canvas'     : 1
-             , 'caption'    : 1
-             , 'cite'       : 1
-             , 'code'       : 1
-             , 'command'    : 1
-             , 'datalist'   : 1
-             , 'dd'         : 1
-             , 'details'    : 1
-             , 'div'        : 1
-             , 'dl'         : 1
-             , 'dt'         : 1
-             , 'em'         : 1
-             , 'figcaption' : 1
-             , 'figure'     : 1
-             , 'footer'     : 1
-             , 'h1'         : 1
-             , 'h2'         : 1
-             , 'h3'         : 1
-             , 'h4'         : 1
-             , 'h5'         : 1
-             , 'h6'         : 1
-             , 'head'       : 1
-             , 'header'     : 1
-             , 'hgroup'     : 1
-             , 'hr'         : 0
-             , 'html'       : 1
-             , 'i'          : 1
-             , 'img'        : 0
-             , 'kbd'        : 1
-             , 'keygen'     : 1
-             , 'li'         : 1
-             , 'mark'       : 1
-             , 'meta'       : 0
-             , 'ol'         : 1
-             , 'p'          : 1
-             , 'pre'        : 1
-             , 'rp'         : 1
-             , 'rt'         : 1
-             , 'ruby'       : 1
-             , 'section'    : 1
-             , 'source'     : 1
-             , 'span'       : 1
-             , 'strike'     : 1
-             , 'strong'     : 1
-             , 'summary'    : 1
-             , 'table'      : 1
-             , 'tbody'      : 1
-             , 'td'         : 1
-             , 'th'         : 1
-             , 'thead'      : 1
-             , 'time'       : 1
-             , 'title'      : 1
-             , 'tr'         : 1
-             , 'tt'         : 1
-             , 'u'          : 1
-             , 'ul'         : 1
-             , 'video'      : 1
-             }
+VALID_TAGS = {
+    'a': 1,
+    'article': 1,
+    'aside': 1,
+    'audio': 1,
+    'b': 1,
+    'base': 0,
+    'blockquote': 1,
+    'body': 1,
+    'br': 0,
+    'canvas': 1,
+    'caption': 1,
+    'cite': 1,
+    'code': 1,
+    'command': 1,
+    'datalist': 1,
+    'dd': 1,
+    'details': 1,
+    'div': 1,
+    'dl': 1,
+    'dt': 1,
+    'em': 1,
+    'figcaption': 1,
+    'figure': 1,
+    'footer': 1,
+    'h1': 1,
+    'h2': 1,
+    'h3': 1,
+    'h4': 1,
+    'h5': 1,
+    'h6': 1,
+    'head': 1,
+    'header': 1,
+    'hgroup': 1,
+    'hr': 0,
+    'html': 1,
+    'i': 1,
+    'img': 0,
+    'kbd': 1,
+    'keygen': 1,
+    'li': 1,
+    'mark': 1,
+    'meta': 0,
+    'ol': 1,
+    'p': 1,
+    'pre': 1,
+    'rp': 1,
+    'rt': 1,
+    'ruby': 1,
+    'section': 1,
+    'source': 1,
+    'span': 1,
+    'strike': 1,
+    'strong': 1,
+    'summary': 1,
+    'table': 1,
+    'tbody': 1,
+    'td': 1,
+    'th': 1,
+    'thead': 1,
+    'time': 1,
+    'title': 1,
+    'tr': 1,
+    'tt': 1,
+    'u': 1,
+    'ul': 1,
+    'video': 1
+}
 
 # These tags and their complete contents should be removed.  Note that
 # parsers may choose to raise an Exception when finding such a nasty
 # tag.
-NASTY_TAGS = { 'script'     : 1
-             , 'object'     : 1
-             , 'embed'      : 1
-             , 'applet'     : 1
-             }
+NASTY_TAGS = {'script': 1, 'object': 1, 'embed': 1, 'applet': 1
+              }
 
 
 class IllegalHTML(ValueError):
@@ -210,7 +211,6 @@ def handle_entityref(self, name):
         self.result = "%s&%s%s" % (self.result, name, x)
 
     def unknown_starttag(self, tag, attrs):
-
         """ Delete all tags except for legal ones.
         """
         if tag in VALID_TAGS:
@@ -234,7 +234,7 @@ def handle_valid_tag(self, tag, attrs):
 
         for k, v in attrs:
             self.result = '%s %s' % (self.result,
-                    self.handle_javascript_attr(k, v))
+                                     self.handle_javascript_attr(k, v))
 
         # endTag = '</%s>' % tag
         if VALID_TAGS.get(tag):
diff --git a/Products/PortalTransforms/setuphandlers.py b/Products/PortalTransforms/setuphandlers.py
index ff82baa..00c71aa 100644
--- a/Products/PortalTransforms/setuphandlers.py
+++ b/Products/PortalTransforms/setuphandlers.py
@@ -2,8 +2,8 @@
 PortalTransforms setup handlers.
 """
 
-from StringIO import StringIO
 from Products.CMFCore.utils import getToolByName
+from StringIO import StringIO
 
 
 def correctMapping(out, portal):
diff --git a/Products/PortalTransforms/tests/__init__.py b/Products/PortalTransforms/tests/__init__.py
index a00479d..40a96af 100644
--- a/Products/PortalTransforms/tests/__init__.py
+++ b/Products/PortalTransforms/tests/__init__.py
@@ -1 +1 @@
-"""import this"""
+# -*- coding: utf-8 -*-
diff --git a/Products/PortalTransforms/tests/input/test_python.py b/Products/PortalTransforms/tests/input/test_python.py
index 50db5a4..267e92d 100644
--- a/Products/PortalTransforms/tests/input/test_python.py
+++ b/Products/PortalTransforms/tests/input/test_python.py
@@ -1,11 +1,15 @@
 """ nice docstring """
 
-class A : pass
+
+class A:
+    pass
 
 # comment
 
+
 def inc(i):
-    return i+1
+    return i + 1
+
 
 def greater(a, b):
     """foo <html />"""
diff --git a/Products/PortalTransforms/tests/test_doctests.py b/Products/PortalTransforms/tests/test_doctests.py
index e00a955..d529af2 100644
--- a/Products/PortalTransforms/tests/test_doctests.py
+++ b/Products/PortalTransforms/tests/test_doctests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import doctest
 import unittest
 
@@ -5,7 +6,7 @@
 modules = (
     'Products.PortalTransforms.transforms.safe_html',
     'Products.PortalTransforms.transforms.rest',
-    )
+)
 
 
 def test_suite():
diff --git a/Products/PortalTransforms/tests/test_engine.py b/Products/PortalTransforms/tests/test_engine.py
index 0f6ba72..d344a7f 100644
--- a/Products/PortalTransforms/tests/test_engine.py
+++ b/Products/PortalTransforms/tests/test_engine.py
@@ -1,21 +1,22 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
-
-from zope.interface import implements
-from Products.PortalTransforms.utils import TransformException
-from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.chain import chain
+from Products.PortalTransforms.interfaces import ITransform
+from Products.PortalTransforms.utils import TransformException
+from zope.interface import implementer
 
-import urllib
 import re
+import urllib
 
 
 class BaseTransform:
+
     def name(self):
         return getattr(self, '__name__', self.__class__.__name__)
 
 
+@implementer(ITransform)
 class HtmlToText(BaseTransform):
-    implements(ITransform)
     inputs = ('text/html',)
     output = 'text/plain'
 
@@ -33,8 +34,8 @@ class HtmlToTextWithEncoding(HtmlToText):
     output_encoding = 'ascii'
 
 
+@implementer(ITransform)
 class FooToBar(BaseTransform):
-    implements(ITransform)
     inputs = ('text/*',)
     output = 'text/plain'
 
@@ -48,8 +49,8 @@ def convert(self, orig, data, **kwargs):
         return data
 
 
+@implementer(ITransform)
 class DummyHtmlFilter1(BaseTransform):
-    implements(ITransform)
     __name__ = 'dummy_html_filter1'
     inputs = ('text/html',)
     output = 'text/html'
@@ -59,8 +60,8 @@ def convert(self, orig, data, **kwargs):
         return data
 
 
+@implementer(ITransform)
 class DummyHtmlFilter2(BaseTransform):
-    implements(ITransform)
     __name__ = 'dummy_html_filter2'
     inputs = ('text/html',)
     output = 'text/html'
@@ -78,36 +79,36 @@ def convert(self, orig, data, context, **kwargs):
         return data
 
 
+@implementer(ITransform)
 class TransformNoIO(BaseTransform):
-    implements(ITransform)
+    pass
 
 
 class BadTransformMissingImplements(BaseTransform):
-    #__implements__ = None
     inputs = ('text/*',)
     output = 'text/plain'
 
 
+@implementer(ITransform)
 class BadTransformBadMIMEType1(BaseTransform):
-    implements(ITransform)
     inputs = ('truc/muche',)
     output = 'text/plain'
 
 
+@implementer(ITransform)
 class BadTransformBadMIMEType2(BaseTransform):
-    implements(ITransform)
     inputs = ('text/plain',)
     output = 'truc/muche'
 
 
+@implementer(ITransform)
 class BadTransformNoInput(BaseTransform):
-    implements(ITransform)
     inputs = ()
     output = 'text/plain'
 
 
+@implementer(ITransform)
 class BadTransformWildcardOutput(BaseTransform):
-    implements(ITransform)
     inputs = ('text/plain',)
     output = 'text/*'
 
@@ -122,7 +123,7 @@ def afterSetUp(self):
             self.engine.manage_delPolicies([mt])
 
     def register(self):
-        #A default set of transforms to prove the interfaces work
+        # A default set of transforms to prove the interfaces work
         self.engine.registerTransform(HtmlToText())
         self.engine.registerTransform(FooToBar())
 
@@ -226,9 +227,9 @@ def testPolicy(self):
 
         path = self.engine._findPath('text/html', mt, required)
         self.assertEqual(str(path),
-                             "[<Transform at dummy_html_filter1>, "
-                             "<Transform at dummy_html_filter2>, "
-                             "<Transform at safe_html>]")
+                         "[<Transform at dummy_html_filter1>, "
+                         "<Transform at dummy_html_filter2>, "
+                         "<Transform at safe_html>]")
 
     def testSame(self):
         data = "This is a test"
diff --git a/Products/PortalTransforms/tests/test_graph.py b/Products/PortalTransforms/tests/test_graph.py
index e05783c..e697c07 100644
--- a/Products/PortalTransforms/tests/test_graph.py
+++ b/Products/PortalTransforms/tests/test_graph.py
@@ -1,6 +1,8 @@
+# -*- coding: utf-8 -*-
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
-
 from utils import input_file_path
+
+
 FILE_PATH = input_file_path("demo1.pdf")
 
 
@@ -38,8 +40,10 @@ def testFindPath(self):
         """
         # we need a DummyTransform class
         class DT:
+
             def __init__(self, name):
                 self._name = name
+
             def name(self):
                 return self._name
 
@@ -57,7 +61,7 @@ def name(self):
                   '6': [DT('transform4-6')]},
             '5': {'3': [DT('transform5-3')]},
             '7': {'6': [DT('transform7-6')]},
-            }
+        }
         expectedPathes = {
             '1-1': [],
             '1-2': ['transform1-2'],
@@ -71,7 +75,7 @@ def name(self):
             '2-4': ['transform2-4'],
             '4-2': ['transform4-5', 'transform5-3', 'transform3-2'],
             '5-3': ['transform5-3'],
-            }
+        }
         self.engine._mtmap = dummyMap1
         for orig in ['1', '2', '3', '4', '5', '6', '7']:
             for target in ['1', '2', '3', '4', '5', '6', '7']:
diff --git a/Products/PortalTransforms/tests/test_intelligenttext.py b/Products/PortalTransforms/tests/test_intelligenttext.py
index c2b5013..55dc448 100644
--- a/Products/PortalTransforms/tests/test_intelligenttext.py
+++ b/Products/PortalTransforms/tests/test_intelligenttext.py
@@ -20,12 +20,14 @@ def performTransform(self, orig, targetMimetype='text/html',
     def testHyperlinks(self):
         orig = "A test http://test.com"
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test <a href="http://test.com" rel="nofollow">http://test.com</a>')
+        self.assertEqual(
+            new, 'A test <a href="http://test.com" rel="nofollow">http://test.com</a>')
 
     def testMailto(self):
         orig = "A test test@test.com of mailto"
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto')
+        self.assertEqual(
+            new, 'A test <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> of mailto')
 
     def testTextAndLinks(self):
         orig = """A test
@@ -33,9 +35,9 @@ def testTextAndLinks(self):
 Mail: test@test.com End
 URL: http://foo.com End"""
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test<br />' \
-                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />' \
-                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />' \
+        self.assertEqual(new, 'A test<br />'
+                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a> End<br />'
+                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a> End<br />'
                               'URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a> End')
 
     def testTextAndLinksAtEndOfLine(self):
@@ -44,9 +46,9 @@ def testTextAndLinksAtEndOfLine(self):
 Mail: test@test.com
 URL: http://foo.com"""
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test<br />' \
-                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />' \
-                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />' \
+        self.assertEqual(new, 'A test<br />'
+                              'URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />'
+                              'Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />'
                               'URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>')
 
     def testIndents(self):
@@ -55,9 +57,9 @@ def testIndents(self):
     Mail: test@test.com
       URL: http://foo.com"""
         new = self.performTransform(orig)
-        self.assertEqual(new, 'A test<br />' \
-                              '&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />' \
-                              '&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />' \
+        self.assertEqual(new, 'A test<br />'
+                              '&nbsp;&nbsp;URL: <a href="http://test.com" rel="nofollow">http://test.com</a><br />'
+                              '&nbsp;&nbsp;&nbsp;&nbsp;Mail: <a href="&#0109;ailto&#0058;test&#0064;test.com">test&#0064;test.com</a><br />'
                               '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL: <a href="http://foo.com" rel="nofollow">http://foo.com</a>')
 
     def testEntities(self):
@@ -68,7 +70,8 @@ def testEntities(self):
     def testAccentuatedCharacters(self):
         orig = "The French use é à ô ù à and ç"
         new = self.performTransform(orig)
-        self.assertEqual(new, "The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;")
+        self.assertEqual(
+            new, "The French use &eacute; &agrave; &ocirc; &ugrave; &agrave; and &ccedil;")
 
 
 class TestHtmlToIntelligentText(TransformTestCase):
diff --git a/Products/PortalTransforms/tests/test_transforms.py b/Products/PortalTransforms/tests/test_transforms.py
index 3886353..d1c331d 100644
--- a/Products/PortalTransforms/tests/test_transforms.py
+++ b/Products/PortalTransforms/tests/test_transforms.py
@@ -1,36 +1,36 @@
 # -*- coding: utf8  -*-
-import os
-import copy
-import logging
-import unittest
-import itertools
+from os.path import exists
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 from Products.CMFCore.utils import getToolByName
-
-from utils import input_file_path, output_file_path, normalize_html,\
-     load, matching_inputs
 from Products.PortalTransforms.data import datastream
 from Products.PortalTransforms.interfaces import IDataStream
-
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
+from Products.PortalTransforms.transforms.image_to_bmp import image_to_bmp
 from Products.PortalTransforms.transforms.image_to_gif import image_to_gif
-from Products.PortalTransforms.transforms.image_to_png import image_to_png
 from Products.PortalTransforms.transforms.image_to_jpeg import image_to_jpeg
-from Products.PortalTransforms.transforms.image_to_bmp import image_to_bmp
+from Products.PortalTransforms.transforms.image_to_pcx import image_to_pcx
+from Products.PortalTransforms.transforms.image_to_png import image_to_png
+from Products.PortalTransforms.transforms.image_to_ppm import image_to_ppm
 from Products.PortalTransforms.transforms.image_to_tiff import image_to_tiff
-from Products.PortalTransforms.transforms.image_to_ppm  import image_to_ppm
-from Products.PortalTransforms.transforms.image_to_pcx  import image_to_pcx
-
+from Products.PortalTransforms.transforms.markdown_to_html import HAS_MARKDOWN
+from Products.PortalTransforms.transforms.safe_html import NASTY_TAGS
+from Products.PortalTransforms.transforms.safe_html import SafeHTML
+from Products.PortalTransforms.transforms.safe_html import VALID_TAGS
+from Products.PortalTransforms.transforms.textile_to_html import HAS_TEXTILE
 from Products.PortalTransforms.transforms.word_to_html import word_to_html
+from utils import input_file_path
+from utils import load
+from utils import matching_inputs
+from utils import normalize_html
+from utils import output_file_path
 
-from Products.PortalTransforms.transforms.safe_html  import SafeHTML
-from Products.PortalTransforms.transforms.safe_html  import VALID_TAGS
-from Products.PortalTransforms.transforms.safe_html  import NASTY_TAGS
+import copy
+import itertools
+import logging
+import os
+import unittest
 
-from Products.PortalTransforms.transforms.textile_to_html import HAS_TEXTILE
-from Products.PortalTransforms.transforms.markdown_to_html import HAS_MARKDOWN
 
-from os.path import exists
 # we have to set locale because lynx output is locale sensitive !
 os.environ['LC_ALL'] = 'C'
 logger = logging.getLogger('PortalTransforms')
@@ -69,10 +69,10 @@ def do_convert(self, filename=None):
         got_start = got.strip()[:20]
         expected_start = expected.strip()[:20]
         self.assertEqual(got_start, expected_start,
-                          '[%s]\n\n!=\n\n[%s]\n\nIN %s(%s)' % (
-            got_start, expected_start, self.transform.name(), self.input))
+                         '[%s]\n\n!=\n\n[%s]\n\nIN %s(%s)' % (
+                             got_start, expected_start, self.transform.name(), self.input))
         self.assertEqual(self.subobjects, len(res_data.getSubObjects()),
-                          '%s\n\n!=\n\n%s\n\nIN %s(%s)' % (
+                         '%s\n\n!=\n\n%s\n\nIN %s(%s)' % (
             self.subobjects, len(res_data.getSubObjects()),
             self.transform.name(), self.input))
 
@@ -93,6 +93,7 @@ def __repr__(self):
 
 
 class PILTransformsTest(ATSiteTestCase):
+
     def afterSetUp(self):
         ATSiteTestCase.afterSetUp(self)
         self.pt = self.portal.portal_transforms
@@ -104,7 +105,7 @@ def test_image_to_bmp(self):
         imgFile = open(input_file_path('logo.jpg'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/jpeg')
+                         'image/jpeg')
         data = self.pt.convertTo(target_mimetype='image/x-ms-bmp', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/x-ms-bmp')
 
@@ -113,7 +114,7 @@ def test_image_to_gif(self):
         imgFile = open(input_file_path('logo.png'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/png')
+                         'image/png')
         data = self.pt.convertTo(target_mimetype='image/gif', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/gif')
 
@@ -122,7 +123,7 @@ def test_image_to_jpeg(self):
         imgFile = open(input_file_path('logo.gif'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/gif')
+                         'image/gif')
         data = self.pt.convertTo(target_mimetype='image/jpeg', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/jpeg')
 
@@ -131,7 +132,7 @@ def test_image_to_png(self):
         imgFile = open(input_file_path('logo.jpg'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/jpeg')
+                         'image/jpeg')
         data = self.pt.convertTo(target_mimetype='image/png', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/png')
 
@@ -140,7 +141,7 @@ def test_image_to_pcx(self):
         imgFile = open(input_file_path('logo.gif'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/gif')
+                         'image/gif')
         data = self.pt.convertTo(target_mimetype='image/pcx', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/pcx')
 
@@ -149,18 +150,18 @@ def test_image_to_ppm(self):
         imgFile = open(input_file_path('logo.png'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/png')
+                         'image/png')
         data = self.pt.convertTo(target_mimetype='image/x-portable-pixmap',
                                  orig=data)
         self.assertEqual(data.getMetadata()['mimetype'],
-                             'image/x-portable-pixmap')
+                         'image/x-portable-pixmap')
 
     def test_image_to_tiff(self):
         self.pt.registerTransform(image_to_tiff())
         imgFile = open(input_file_path('logo.jpg'), 'rb')
         data = imgFile.read()
         self.assertEqual(self.mimetypes_registry.classify(data),
-                             'image/jpeg')
+                         'image/jpeg')
         data = self.pt.convertTo(target_mimetype='image/tiff', orig=data)
         self.assertEqual(data.getMetadata()['mimetype'], 'image/tiff')
 
@@ -195,6 +196,7 @@ def test_charref_data(self):
         data = self.pt.convertTo(target_mimetype='text/x-html-safe', orig=orig)
         self.assertEqual(data.getData(), orig)
 
+
 class SafeHtmlTransformsWithScriptTest(ATSiteTestCase):
 
     def afterSetUp(self):
@@ -286,7 +288,7 @@ class ParsersTestCase(unittest.TestCase):
 
     def test_javascript_on_attr(self):
         from Products.PortalTransforms.libtransforms.utils import (
-                scrubHTMLNoRaise, scrubHTML)
+            scrubHTMLNoRaise, scrubHTML)
         from Products.PortalTransforms.libtransforms.utils import IllegalHTML
 
         htmlFile = open(input_file_path('test_js_on.html'), 'rb')
@@ -297,7 +299,7 @@ def test_javascript_on_attr(self):
 
     def test_javascript_uri(self):
         from Products.PortalTransforms.libtransforms.utils import (
-                scrubHTMLNoRaise, scrubHTML)
+            scrubHTMLNoRaise, scrubHTML)
         from Products.PortalTransforms.libtransforms.utils import IllegalHTML
 
         htmlFile = open(input_file_path('test_js_uri.html'), 'rb')
@@ -308,7 +310,7 @@ def test_javascript_uri(self):
 
     def test_invalid_tags(self):
         from Products.PortalTransforms.libtransforms.utils import (
-                scrubHTMLNoRaise, scrubHTML)
+            scrubHTMLNoRaise, scrubHTML)
         from Products.PortalTransforms.libtransforms.utils import IllegalHTML
 
         htmlFile = open(input_file_path('test_invalid_tags.html'), 'rb')
@@ -360,26 +362,26 @@ def test_invalid_tags(self):
     ('Products.PortalTransforms.transforms.image_to_pcx',
      "logo.png", "logo.pcx", None, 0,
      ),
-   )
+)
 if HAS_MARKDOWN:
     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (
         ('Products.PortalTransforms.transforms.markdown_to_html',
          "markdown.txt", "markdown.html", None, 0,
          ),
-       )
+    )
 if HAS_TEXTILE:
     TRANSFORMS_TESTINFO = TRANSFORMS_TESTINFO + (
         ('Products.PortalTransforms.transforms.textile_to_html',
          "input.textile", "textile.html", None, 0,
-        ),
-       )
+         ),
+    )
 
 
 def initialise(transform, normalize, pattern):
     global TRANSFORMS_TESTINFO
     for fname in matching_inputs(pattern):
         outname = '%s.out' % fname.split('.')[0]
-        #print transform, fname, outname
+        # print transform, fname, outname
         TRANSFORMS_TESTINFO += ((transform, fname, outname, normalize, 0),)
 
 
@@ -403,7 +405,7 @@ def make_tests(test_descr=TRANSFORMS_TESTINFO):
     tests = []
     for _transform, tr_input, tr_output, _normalize, _subobjects in test_descr:
         # load transform if necessary
-        if type(_transform) is type(''):
+        if isinstance(_transform, type('')):
             try:
                 _transform = load(_transform).register()
             except MissingBinary:
diff --git a/Products/PortalTransforms/tests/test_xss.py b/Products/PortalTransforms/tests/test_xss.py
index dbf4c8a..67a45dc 100644
--- a/Products/PortalTransforms/tests/test_xss.py
+++ b/Products/PortalTransforms/tests/test_xss.py
@@ -1,5 +1,4 @@
-"""
-"""
+# -*- coding: utf-8 -*-
 from Products.Archetypes.tests.atsitetestcase import ATSiteTestCase
 
 
diff --git a/Products/PortalTransforms/tests/utils.py b/Products/PortalTransforms/tests/utils.py
index e222fc8..973e9dd 100644
--- a/Products/PortalTransforms/tests/utils.py
+++ b/Products/PortalTransforms/tests/utils.py
@@ -1,8 +1,13 @@
-import re
-import glob
-from unittest import TestSuite
+# -*- coding: utf-8 -*-
+from os.path import abspath
+from os.path import basename
+from os.path import dirname
+from os.path import join
 from sys import modules
-from os.path import join, abspath, dirname, basename
+from unittest import TestSuite
+
+import glob
+import re
 
 
 def normalize_html(s):
diff --git a/Products/PortalTransforms/tests/word.py b/Products/PortalTransforms/tests/word.py
index 6c66a72..5f6fae3 100644
--- a/Products/PortalTransforms/tests/word.py
+++ b/Products/PortalTransforms/tests/word.py
@@ -1,21 +1,23 @@
+# -*- coding: utf-8 -*-
 from rigging import transformer
 
 
-## BIG BAD FUNCTIONAL TEST OF OOo Word Conversion
-## The interfaces work, but are not quite what we need
-## I might have to back fill a chain from source/dest graphing
+# BIG BAD FUNCTIONAL TEST OF OOo Word Conversion
+# The interfaces work, but are not quite what we need
+# I might have to back fill a chain from source/dest graphing
 
 file = "/tmp/word.doc"
 
 
 class curry:
+
     def __init__(self, func, *fixed_args):
         self.func = func
         self.fixed_args = fixed_args
 
     def __call__(self, *variable_args):
-        return apply(self.func, self.fixed_args +
-          variable_args)
+        return self.func(*self.fixed_args +
+                         variable_args)
 
 data = open("/tmp/word.doc", "r").read()
 
diff --git a/Products/PortalTransforms/transforms/__init__.py b/Products/PortalTransforms/transforms/__init__.py
index be6014d..b2b5941 100644
--- a/Products/PortalTransforms/transforms/__init__.py
+++ b/Products/PortalTransforms/transforms/__init__.py
@@ -1,19 +1,23 @@
-### Register Transforms
-### This is interesting because we don't expect all transforms to be
-### available on all platforms. To do this we allow things to fail at
-### two levels
-### 1) Imports
-###    If the import fails the module is removed from the list and
-###    will not be processed/registered
-### 2) Registration
-###    A second phase happens when the loaded modules register method
-###    is called and this produces an instance that will be used to
-###    implement the transform, if register needs to fail for now it
-###    should raise an ImportError as well (dumb, I know)
+# -*- coding: utf-8 -*-
+# Register Transforms
+# This is interesting because we don't expect all transforms to be
+# available on all platforms. To do this we allow things to fail at
+# two levels
+# 1) Imports
+# If the import fails the module is removed from the list and
+# will not be processed/registered
+# 2) Registration
+# A second phase happens when the loaded modules register method
+# is called and this produces an instance that will be used to
+# implement the transform, if register needs to fail for now it
+# should raise an ImportError as well (dumb, I know)
 
-from logging import DEBUG, ERROR
-from Products.PortalTransforms.utils import log
+from logging import DEBUG
+from logging import ERROR
 from Products.PortalTransforms.libtransforms.utils import MissingBinary
+from Products.PortalTransforms.utils import log
+
+
 modules = [
     'st',             # zopish
     'rest',           # docutils
@@ -37,11 +41,15 @@
     'lynx_dump',      # lynx -dump
     'python',         # python source files, no dependancies
     'identity',       # identity transform, no dependancies
-    'markdown_to_html',  # markdown, depends on http://surfnet.dl.sourceforge.net/sourceforge/python-markdown/markdown-1-5.py
-    'textile_to_html',  # textile, depends on PyTextile http://dom.eav.free.fr/python/textile-mirror-2.0.10.tar.gz
+    # markdown, depends on
+    # http://surfnet.dl.sourceforge.net/sourceforge/python-markdown/markdown-1-5.py
+    'markdown_to_html',
+    # textile, depends on PyTextile
+    # http://dom.eav.free.fr/python/textile-mirror-2.0.10.tar.gz
+    'textile_to_html',
     'web_intelligent_plain_text_to_html',
     'html_to_web_intelligent_plain_text',
-    ]
+]
 
 g = globals()
 transforms = []
@@ -49,12 +57,12 @@
     try:
         ns = __import__(m, g, g, None)
         transforms.append(ns.register())
-    except ImportError, e:
+    except ImportError as e:
         msg = "Problem importing module %s : %s" % (m, e)
         log(msg, severity=ERROR)
-    except MissingBinary, e:
+    except MissingBinary as e:
         log(str(e), severity=DEBUG)
-    except Exception, e:
+    except Exception as e:
         import traceback
         traceback.print_exc()
         log("Raised error %s for %s" % (e, m), severity=ERROR)
diff --git a/Products/PortalTransforms/transforms/broken.py b/Products/PortalTransforms/transforms/broken.py
index 64915ce..0eb30d1 100644
--- a/Products/PortalTransforms/transforms/broken.py
+++ b/Products/PortalTransforms/transforms/broken.py
@@ -1,11 +1,14 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from Products.PortalTransforms.utils import log
+from zope.interface import implementer
+
+
 WARNING = 100
 
 
-class BrokenTransform:
-    implements(ITransform)
+@implementer(ITransform)
+class BrokenTransform(object):
 
     __name__ = "broken transform"
     inputs = ("BROKEN",)
diff --git a/Products/PortalTransforms/transforms/html_body.py b/Products/PortalTransforms/transforms/html_body.py
index 78181ab..192039f 100644
--- a/Products/PortalTransforms/transforms/html_body.py
+++ b/Products/PortalTransforms/transforms/html_body.py
@@ -1,13 +1,13 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
+from zope.interface import implementer
 
 
-class HTMLBody:
+@implementer(ITransform)
+class HTMLBody(object):
     """Simple transform which extracts the content of the body tag"""
 
-    implements(ITransform)
-
     __name__ = "html_body"
     inputs = ('text/html',)
     output = "text/html"
@@ -18,7 +18,7 @@ def __init__(self, name=None):
                 ('list',
                  'Inputs',
                  'Input(s) MIME type. Change with care.'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/html_to_text.py b/Products/PortalTransforms/transforms/html_to_text.py
index d7a813b..9661c8f 100644
--- a/Products/PortalTransforms/transforms/html_to_text.py
+++ b/Products/PortalTransforms/transforms/html_to_text.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.retransform import retransform
 
 import htmlentitydefs
@@ -21,16 +22,15 @@ def sub_func(matchobj):
         else:
             res = unichr(result)
 
-        if type(full) is unicode:
+        if isinstance(full, unicode):
             return res
         return res.encode('utf-8')
 
-
     return html_to_text("html_to_text",
-                       ('<script [^>]>.*</script>(?im)', ' '),
-                       ('<style [^>]>.*</style>(?im)', ' '),
-                       ('<head [^>]>.*</head>(?im)', ' '),
-                       ('(?im)</?(font|em|i|strong|b)(?=\W)[^>]*>', ''),
-                       ('<[^>]*>(?i)(?m)', ' '),
-                       (r'&([a-zA-Z0-9#]*?);', sub_func),
-                       )
+                        ('<script [^>]>.*</script>(?im)', ' '),
+                        ('<style [^>]>.*</style>(?im)', ' '),
+                        ('<head [^>]>.*</head>(?im)', ' '),
+                        ('(?im)</?(font|em|i|strong|b)(?=\W)[^>]*>', ''),
+                        ('<[^>]*>(?i)(?m)', ' '),
+                        (r'&([a-zA-Z0-9#]*?);', sub_func),
+                        )
diff --git a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
index 5a99f31..da5d1e5 100644
--- a/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
+++ b/Products/PortalTransforms/transforms/html_to_web_intelligent_plain_text.py
@@ -1,14 +1,14 @@
-from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from plone.intelligenttext.transforms import \
     convertHtmlToWebIntelligentPlainText
+from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implementer
 
 
+@implementer(ITransform)
 class HtmlToWebIntelligentPlainText:
     """Transform which replaces urls and email into hyperlinks"""
 
-    implements(ITransform)
-
     __name__ = "html_to_web_intelligent_plain_text"
     output = "text/x-web-intelligent"
 
@@ -23,7 +23,7 @@ def __init__(self, name=None, inputs=('text/html',), tab_width=4):
                 ('string',
                  'Tab width',
                  'Number of spaces for a tab in the input'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/identity.py b/Products/PortalTransforms/transforms/identity.py
index ff67c17..a8a7962 100644
--- a/Products/PortalTransforms/transforms/identity.py
+++ b/Products/PortalTransforms/transforms/identity.py
@@ -1,17 +1,18 @@
+# -*- coding: utf-8 -*-
 """
 A simple identity transform
 """
 
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class IdentityTransform:
+@implementer(ITransform)
+class IdentityTransform(object):
     """ Identity transform
 
     return content unchanged.
     """
-    implements(ITransform)
 
     __name__ = "rest_to_text"
 
@@ -19,13 +20,13 @@ def __init__(self, name=None, **kwargs):
         self.config = {
             'inputs': ('text/x-rst',),
             'output': 'text/plain',
-            }
+        }
         self.config_metadata = {
             'inputs':
                 ('list', 'Inputs', 'Input(s) MIME type. Change with care.'),
             'output':
                 ('string', 'Output', 'Output MIME type. Change with care.'),
-            }
+        }
         self.config.update(kwargs)
 
     def __getattr__(self, attr):
diff --git a/Products/PortalTransforms/transforms/image_to_bmp.py b/Products/PortalTransforms/transforms/image_to_bmp.py
index 1738960..05a546b 100644
--- a/Products/PortalTransforms/transforms/image_to_bmp.py
+++ b/Products/PortalTransforms/transforms/image_to_bmp.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_gif.py b/Products/PortalTransforms/transforms/image_to_gif.py
index fb4cc33..e21a9e4 100644
--- a/Products/PortalTransforms/transforms/image_to_gif.py
+++ b/Products/PortalTransforms/transforms/image_to_gif.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_html.py b/Products/PortalTransforms/transforms/image_to_html.py
index 39cd51f..63a37eb 100644
--- a/Products/PortalTransforms/transforms/image_to_html.py
+++ b/Products/PortalTransforms/transforms/image_to_html.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 
 
-class image_to_html:
-    implements(ITransform)
+@implementer(ITransform)
+class image_to_html(object):
 
     __name__ = "image_to_html"
     inputs = ('image/*', )
diff --git a/Products/PortalTransforms/transforms/image_to_jpeg.py b/Products/PortalTransforms/transforms/image_to_jpeg.py
index 1ce1468..423cabf 100644
--- a/Products/PortalTransforms/transforms/image_to_jpeg.py
+++ b/Products/PortalTransforms/transforms/image_to_jpeg.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_pcx.py b/Products/PortalTransforms/transforms/image_to_pcx.py
index bb67bf2..a37d78d 100644
--- a/Products/PortalTransforms/transforms/image_to_pcx.py
+++ b/Products/PortalTransforms/transforms/image_to_pcx.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_png.py b/Products/PortalTransforms/transforms/image_to_png.py
index 0e2b9a2..d1ab386 100644
--- a/Products/PortalTransforms/transforms/image_to_png.py
+++ b/Products/PortalTransforms/transforms/image_to_png.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_ppm.py b/Products/PortalTransforms/transforms/image_to_ppm.py
index a0ce264..fa04d7b 100644
--- a/Products/PortalTransforms/transforms/image_to_ppm.py
+++ b/Products/PortalTransforms/transforms/image_to_ppm.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/image_to_tiff.py b/Products/PortalTransforms/transforms/image_to_tiff.py
index 63a082b..14fd922 100644
--- a/Products/PortalTransforms/transforms/image_to_tiff.py
+++ b/Products/PortalTransforms/transforms/image_to_tiff.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.libtransforms.piltransform import PILTransforms
 
 
diff --git a/Products/PortalTransforms/transforms/lynx_dump.py b/Products/PortalTransforms/transforms/lynx_dump.py
index ec55021..4721365 100644
--- a/Products/PortalTransforms/transforms/lynx_dump.py
+++ b/Products/PortalTransforms/transforms/lynx_dump.py
@@ -1,15 +1,19 @@
+# -*- coding: utf-8 -*-
 """
 Uses lynx -dump
 """
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.commandtransform import (
-    commandtransform, popentransform)
+from Products.PortalTransforms.libtransforms.commandtransform import \
+    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import \
+    popentransform
+from zope.interface import implementer
+
 import os
 
 
+@implementer(ITransform)
 class lynx_dump(popentransform):
-    implements(ITransform)
 
     __name__ = "lynx_dump"
     inputs = ('text/html',)
@@ -23,8 +27,9 @@ class lynx_dump(popentransform):
     useStdin = True
 
 
+@implementer(ITransform)
 class old_lynx_dump(commandtransform):
-    implements(ITransform)
+    # XXX i doubt this one works
 
     __name__ = "lynx_dump"
     inputs = ('text/html',)
@@ -47,8 +52,8 @@ def convert(self, data, cache, **kwargs):
         return cache
 
     def invokeCommand(self, tmpdir, inputname, outname):
-        os.system('cd "%s" && %s %s "%s" 1>"%s" 2>/dev/null' % \
-               (tmpdir, self.binary, self.binaryArgs, inputname, outname))
+        os.system('cd "%s" && %s %s "%s" 1>"%s" 2>/dev/null' %
+                  (tmpdir, self.binary, self.binaryArgs, inputname, outname))
 
     def astext(self, outname):
         txtfile = open("%s" % (outname), 'r')
diff --git a/Products/PortalTransforms/transforms/markdown_to_html.py b/Products/PortalTransforms/transforms/markdown_to_html.py
index eb29716..9121f10 100644
--- a/Products/PortalTransforms/transforms/markdown_to_html.py
+++ b/Products/PortalTransforms/transforms/markdown_to_html.py
@@ -1,13 +1,14 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://www.freewisdom.org/projects/python-markdown/ module
 
 Author: Tom Lazar <tom@tomster.org> at the archipelago sprint 2006
 """
 
-from zope.interface import implements
-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
+from zope.interface import implementer
+
 
 try:
     import markdown as markdown_transformer
@@ -18,8 +19,8 @@
     HAS_MARKDOWN = True
 
 
-class markdown:
-    implements(ITransform)
+@implementer(ITransform)
+class markdown(object):
 
     __name__ = "markdown_to_html"
     inputs = ("text/x-web-markdown",)
diff --git a/Products/PortalTransforms/transforms/office_com.py b/Products/PortalTransforms/transforms/office_com.py
index 9a0474d..047cf75 100644
--- a/Products/PortalTransforms/transforms/office_com.py
+++ b/Products/PortalTransforms/transforms/office_com.py
@@ -1,18 +1,20 @@
+# -*- coding: utf-8 -*-
 # Need to be imported first to avoid dll loading problems.
 import pywintypes
 import pythoncom
 
-import os.path
-
-import win32com, sys, string, win32api, traceback, re, tempfile, os
-import win32com.client
-from win32com.client import gencache
-from win32com.client import constants, Dispatch
-
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
+from win32com.client import constants
+from win32com.client import Dispatch
+from win32com.client import gencache
+
+import os
+import os.path
+import win32api
+import win32com
+import win32com.client
 
 
 class document(commandtransform):
@@ -67,6 +69,6 @@ def html(self):
         body = bodyfinder(html)
         return body
 
-## This function has to be done. It's more difficult to delete the temp
-## directory under Windows, because there is sometimes a directory in it.
-##    def cleanDir(self, tmpdir):
+# This function has to be done. It's more difficult to delete the temp
+# directory under Windows, because there is sometimes a directory in it.
+# def cleanDir(self, tmpdir):
diff --git a/Products/PortalTransforms/transforms/office_uno.py b/Products/PortalTransforms/transforms/office_uno.py
index 416c4a1..3237760 100644
--- a/Products/PortalTransforms/transforms/office_uno.py
+++ b/Products/PortalTransforms/transforms/office_uno.py
@@ -1,13 +1,13 @@
-import uno
-import unohelper
+# -*- coding: utf-8 -*-
 from com.sun.star.beans import PropertyValue
 from com.sun.star.util import CloseVetoException
-
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
 
+import uno
+import unohelper
+
 
 class document(commandtransform):
 
@@ -26,13 +26,13 @@ def convert(self):
 
         localContext = uno.getComponentContext()
         resolver = localContext.ServiceManager.createInstanceWithContext(
-                       'com.sun.star.bridge.UnoUrlResolver', localContext)
+            'com.sun.star.bridge.UnoUrlResolver', localContext)
         ctx = resolver.resolve(
-                       'uno:socket,host=localhost,port=2002;'
-                       'urp;StarOffice.ComponentContext')
+            'uno:socket,host=localhost,port=2002;'
+            'urp;StarOffice.ComponentContext')
         smgr = ctx.ServiceManager
         desktop = smgr.createInstanceWithContext(
-                       'com.sun.star.frame.Desktop', ctx)
+            'com.sun.star.frame.Desktop', ctx)
 
         # load the document
         url = unohelper.systemPathToFileUrl(self.fullname)
@@ -40,8 +40,8 @@ def convert(self):
 
         filterName = 'swriter: HTML (StarWriter)'
         storeProps = (
-                       PropertyValue('FilterName', 0, filterName, 0),
-                      )
+            PropertyValue('FilterName', 0, filterName, 0),
+        )
 
         # pre-create a empty file for security reason
         url = unohelper.systemPathToFileUrl(self.outputfile)
diff --git a/Products/PortalTransforms/transforms/office_wvware.py b/Products/PortalTransforms/transforms/office_wvware.py
index 135dfde..ceab99f 100644
--- a/Products/PortalTransforms/transforms/office_wvware.py
+++ b/Products/PortalTransforms/transforms/office_wvware.py
@@ -1,8 +1,9 @@
-import os
+# -*- coding: utf-8 -*-
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
 from Products.PortalTransforms.libtransforms.utils import scrubHTMLNoRaise
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+
+import os
 
 
 class document(commandtransform):
@@ -29,7 +30,7 @@ def convert(self):
 
         if os.name == 'posix':
             os.system('cd "%s" && %s --charset=utf-8 "%s" "%s.html"' % (
-                    tmpdir, self.binary, self.fullname, self.__name__))
+                tmpdir, self.binary, self.fullname, self.__name__))
 
     def html(self):
         htmlfile = open("%s/%s.html" % (self.tmpdir, self.__name__), 'r')
diff --git a/Products/PortalTransforms/transforms/pdf_to_html.py b/Products/PortalTransforms/transforms/pdf_to_html.py
index 27f9f24..bc0779f 100644
--- a/Products/PortalTransforms/transforms/pdf_to_html.py
+++ b/Products/PortalTransforms/transforms/pdf_to_html.py
@@ -1,18 +1,20 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://sf.net/projects/pdftohtml bin to do its handy work
 
 """
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.utils import sansext
-from Products.PortalTransforms.libtransforms.commandtransform import (
-    commandtransform, popentransform)
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
+from Products.PortalTransforms.libtransforms.commandtransform import popentransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
+from Products.PortalTransforms.libtransforms.utils import sansext
+from zope.interface import implementer
+
 import os
 
 
+@implementer(ITransform)
 class popen_pdf_to_html(popentransform):
-    implements(ITransform)
 
     __version__ = '2004-07-02.01'
 
@@ -29,8 +31,8 @@ def getData(self, couterr):
         return bodyfinder(couterr.read())
 
 
+@implementer(ITransform)
 class pdf_to_html(commandtransform):
-    implements(ITransform)
 
     __name__ = "pdf_to_html"
     inputs = ('application/pdf',)
@@ -60,7 +62,7 @@ def convert(self, data, cache, **kwargs):
     def invokeCommand(self, tmpdir, fullname):
         if os.name == 'posix':
             cmd = 'cd "%s" && %s %s "%s" 2>error_log 1>/dev/null' % (
-                   tmpdir, self.binary, self.binaryArgs, fullname)
+                tmpdir, self.binary, self.binaryArgs, fullname)
         else:
             cmd = 'cd "%s" && %s %s "%s"' % (
                   tmpdir, self.binary, self.binaryArgs, fullname)
diff --git a/Products/PortalTransforms/transforms/pdf_to_text.py b/Products/PortalTransforms/transforms/pdf_to_text.py
index 4f9893c..57c8196 100644
--- a/Products/PortalTransforms/transforms/pdf_to_text.py
+++ b/Products/PortalTransforms/transforms/pdf_to_text.py
@@ -1,18 +1,19 @@
+# -*- coding: utf-8 -*-
 """
 Uses the xpdf (www.foolabs.com/xpdf)
 """
 
-import os
-
-from zope.interface import implements
 from Products.PortalTransforms.interfaces import ITransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
+from Products.PortalTransforms.libtransforms.commandtransform import popentransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import sansext
-from Products.PortalTransforms.libtransforms.commandtransform import (
-    commandtransform, popentransform)
+from zope.interface import implementer
+
+import os
 
 
+@implementer(ITransform)
 class pdf_to_text(popentransform):
-    implements(ITransform)
 
     __name__ = "pdf_to_text"
     inputs = ('application/pdf',)
@@ -26,8 +27,8 @@ class pdf_to_text(popentransform):
     useStdin = False
 
 
+@implementer(ITransform)
 class old_pdf_to_text(commandtransform):
-    implements(ITransform)
 
     __name__ = "pdf_to_text"
     inputs = ('application/pdf',)
diff --git a/Products/PortalTransforms/transforms/python.py b/Products/PortalTransforms/transforms/python.py
index 92a154c..56b0b88 100644
--- a/Products/PortalTransforms/transforms/python.py
+++ b/Products/PortalTransforms/transforms/python.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """
 Original code from active state recipe
         'Colorize Python source using the built-in tokenizer'
@@ -14,17 +15,18 @@
  original formatting (which is the hard part).
 """
 
-import string
+from cStringIO import StringIO
+from DocumentTemplate.DT_Util import html_quote
+from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implementer
+
 import keyword
+import string
 import token
 import tokenize
-from cStringIO import StringIO
 
-from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from DocumentTemplate.DT_Util import html_quote
 
-## Python Source Parser #####################################################
+# Python Source Parser #####################################################
 
 _KEYWORD = token.NT_OFFSET + 1
 _TEXT = token.NT_OFFSET + 2
@@ -47,7 +49,7 @@ def format(self):
         # store line offsets in self.lines
         self.lines = [0, 0]
         pos = 0
-        while 1:
+        while True:
             pos = string.find(self.raw, '\n', pos) + 1
             if not pos:
                 break
@@ -60,39 +62,37 @@ def format(self):
         self.out.write('<pre class="python">\n')
         try:
             tokenize.tokenize(text.readline, self)
-        except tokenize.TokenError, ex:
+        except tokenize.TokenError as ex:
             msg = ex[0]
             line = ex[1][0]
             self.out.write("<h5 class='error>'ERROR: %s%s</h5>" % (
                 msg, self.raw[self.lines[line]:]))
         self.out.write('\n</pre>\n')
 
-    def __call__(self, toktype, toktext, (srow, scol), (erow, ecol), line):
+    def __call__(self, toktype, toktext, sx, ex, line):
         """ Token handler.
         """
-        #print "type", toktype, token.tok_name[toktype], "text", toktext,
-        #print "start", srow,scol, "end", erow,ecol, "<br>"
-
-        ## calculate new positions
+        (srow, scol) = sx
+        (erow, ecol) = ex
         oldpos = self.pos
         newpos = self.lines[srow] + scol
         self.pos = newpos + len(toktext)
 
-        ## handle newlines
+        # handle newlines
         if toktype in [token.NEWLINE, tokenize.NL]:
             self.out.write('\n')
             return
 
-        ## send the original whitespace, if needed
+        # send the original whitespace, if needed
         if newpos > oldpos:
             self.out.write(self.raw[oldpos:newpos])
 
-        ## skip indenting tokens
+        # skip indenting tokens
         if toktype in [token.INDENT, token.DEDENT]:
             self.pos = newpos
             return
 
-        ## map token type to a group
+        # map token type to a group
         if token.LPAR <= toktype and toktype <= token.OP:
             toktype = 'OP'
         elif toktype == token.NAME and keyword.iskeyword(toktext):
@@ -100,42 +100,42 @@ def __call__(self, toktype, toktext, (srow, scol), (erow, ecol), line):
         else:
             toktype = tokenize.tok_name[toktype]
 
-        open_tag = self.tags.get('OPEN_'+toktype, self.tags['OPEN_TEXT'])
-        close_tag = self.tags.get('CLOSE_'+toktype, self.tags['CLOSE_TEXT'])
+        open_tag = self.tags.get('OPEN_' + toktype, self.tags['OPEN_TEXT'])
+        close_tag = self.tags.get('CLOSE_' + toktype, self.tags['CLOSE_TEXT'])
 
-        ## send text
+        # send text
         self.out.write(open_tag)
         self.out.write(html_quote(toktext))
         self.out.write(close_tag)
 
 
-class PythonTransform:
+@implementer(ITransform)
+class PythonTransform(object):
     """Colorize Python source files
     """
-    implements(ITransform)
 
     __name__ = "python_to_html"
     inputs = ("text/x-python",)
     output = "text/html"
 
     config = {
-        'OPEN_NUMBER':       '<span style="color: #0080C0;">',
-        'CLOSE_NUMBER':      '</span>',
-        'OPEN_OP':           '<span style="color: #0000C0;">',
-        'CLOSE_OP':          '</span>',
-        'OPEN_STRING':       '<span style="color: #004080;">',
-        'CLOSE_STRING':      '</span>',
-        'OPEN_COMMENT':      '<span style="color: #008000;">',
-        'CLOSE_COMMENT':      '</span>',
-        'OPEN_NAME':         '<span style="color: #000000;">',
-        'CLOSE_NAME':        '</span>',
-        'OPEN_ERRORTOKEN':   '<span style="color: #FF8080;">',
-        'CLOSE_ERRORTOKEN':  '</span>',
-        'OPEN_KEYWORD':      '<span style="color: #C00000;">',
-        'CLOSE_KEYWORD':     '</span>',
-        'OPEN_TEXT':         '',
-        'CLOSE_TEXT':        '',
-        }
+        'OPEN_NUMBER': '<span style="color: #0080C0;">',
+        'CLOSE_NUMBER': '</span>',
+        'OPEN_OP': '<span style="color: #0000C0;">',
+        'CLOSE_OP': '</span>',
+        'OPEN_STRING': '<span style="color: #004080;">',
+        'CLOSE_STRING': '</span>',
+        'OPEN_COMMENT': '<span style="color: #008000;">',
+        'CLOSE_COMMENT': '</span>',
+        'OPEN_NAME': '<span style="color: #000000;">',
+        'CLOSE_NAME': '</span>',
+        'OPEN_ERRORTOKEN': '<span style="color: #FF8080;">',
+        'CLOSE_ERRORTOKEN': '</span>',
+        'OPEN_KEYWORD': '<span style="color: #C00000;">',
+        'CLOSE_KEYWORD': '</span>',
+        'OPEN_TEXT': '',
+        'CLOSE_TEXT': '',
+    }
 
     def name(self):
         return self.__name__
diff --git a/Products/PortalTransforms/transforms/rest.py b/Products/PortalTransforms/transforms/rest.py
index 6d0605a..e86a0ad 100644
--- a/Products/PortalTransforms/transforms/rest.py
+++ b/Products/PortalTransforms/transforms/rest.py
@@ -1,9 +1,11 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
 from reStructuredText import HTML
+from zope.interface import implementer
 
 
-class rest:
+@implementer(ITransform)
+class rest(object):
     r"""Converts from reST to HTML.
 
       >>> transform = rest()
@@ -41,7 +43,6 @@ class rest:
       ...         print 'Failure'
       Good
     """
-    implements(ITransform)
 
     __name__ = "rest_to_html"
     inputs = ("text/x-rst", "text/restructured",)
@@ -56,7 +57,7 @@ def __init__(self, name=None, **kwargs):
             'output': self.output,
             'report_level': 2,
             'initial_header_level': 2,
-            }
+        }
 
         self.config_metadata = {
             'inputs':
@@ -69,7 +70,7 @@ def __init__(self, name=None, **kwargs):
                 ('int', 'Report Level',
                  'Level of error reporting. Set to "1" will display all '
                  'messages. Setting it to "5" will display no messages.'),
-            }
+        }
 
         self.config.update(kwargs)
 
diff --git a/Products/PortalTransforms/transforms/rtf_to_html.py b/Products/PortalTransforms/transforms/rtf_to_html.py
index 7df9d68..2ddddf3 100644
--- a/Products/PortalTransforms/transforms/rtf_to_html.py
+++ b/Products/PortalTransforms/transforms/rtf_to_html.py
@@ -1,18 +1,19 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://freshmeat.net/projects/rtfconverter/ bin to do its handy work
 """
 
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.utils import sansext
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.utils import sansext
+from zope.interface import implementer
+
 import os
 
 
+@implementer(ITransform)
 class rtf_to_html(commandtransform):
-    implements(ITransform)
 
     __name__ = "rtf_to_html"
     inputs = ('application/rtf',)
diff --git a/Products/PortalTransforms/transforms/rtf_to_xml.py b/Products/PortalTransforms/transforms/rtf_to_xml.py
index 2bc698e..6193fd1 100644
--- a/Products/PortalTransforms/transforms/rtf_to_xml.py
+++ b/Products/PortalTransforms/transforms/rtf_to_xml.py
@@ -1,17 +1,18 @@
+# -*- coding: utf-8 -*-
 """
 Uses the http://sf.net/projects/rtf2xml bin to do its handy work
 
 """
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.libtransforms.utils import sansext
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from zope.interface import implementer
+
 import os
 
 
+@implementer(ITransform)
 class rtf_to_xml(commandtransform):
-    implements(ITransform)
 
     __name__ = "rtf_to_xml"
     inputs = ('application/rtf',)
diff --git a/Products/PortalTransforms/transforms/safe_html.py b/Products/PortalTransforms/transforms/safe_html.py
index e2e2b46..c368521 100644
--- a/Products/PortalTransforms/transforms/safe_html.py
+++ b/Products/PortalTransforms/transforms/safe_html.py
@@ -1,13 +1,16 @@
-import logging
-from sgmllib import SGMLParser, SGMLParseError
-import re
+# -*- coding: utf-8 -*-
 from cgi import escape
-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.libtransforms.utils import bodyfinder
+from Products.PortalTransforms.utils import log
 from Products.PortalTransforms.utils import safeToInt
+from sgmllib import SGMLParseError
+from sgmllib import SGMLParser
+from zope.interface import implementer
+
+import logging
+import re
+
 
 class IllegalHTML(ValueError):
     """ Illegal HTML error.
@@ -15,63 +18,65 @@ class IllegalHTML(ValueError):
 
 
 # These are the HTML tags that we will leave intact
-VALID_TAGS = { 'a'          : 1
-             , 'b'          : 1
-             , 'base'       : 0
-             , 'big'        : 1
-             , 'blockquote' : 1
-             , 'body'       : 1
-             , 'br'         : 0
-             , 'caption'    : 1
-             , 'cite'       : 1
-             , 'code'       : 1
-             , 'dd'         : 1
-             , 'div'        : 1
-             , 'dl'         : 1
-             , 'dt'         : 1
-             , 'em'         : 1
-             , 'h1'         : 1
-             , 'h2'         : 1
-             , 'h3'         : 1
-             , 'h4'         : 1
-             , 'h5'         : 1
-             , 'h6'         : 1
-             , 'head'       : 1
-             , 'hr'         : 0
-             , 'html'       : 1
-             , 'i'          : 1
-             , 'img'        : 0
-             , 'kbd'        : 1
-             , 'li'         : 1
-           # , 'link'       : 1 type="script" hoses us
-             , 'meta'       : 0
-             , 'ol'         : 1
-             , 'p'          : 1
-             , 'pre'        : 1
-             , 'small'      : 1
-             , 'span'       : 1
-             , 'strong'     : 1
-             , 'sub'        : 1
-             , 'sup'        : 1
-             , 'table'      : 1
-             , 'tbody'      : 1
-             , 'td'         : 1
-             , 'th'         : 1
-             , 'title'      : 1
-             , 'tr'         : 1
-             , 'tt'         : 1
-             , 'u'          : 1
-             , 'ul'         : 1
-             , 'iframe'     : 1
-             }
-
-NASTY_TAGS = { 'script'     : 1
-             , 'object'     : 1
-             , 'embed'      : 1
-             , 'applet'     : 1
-             , 'style'      : 1  # this helps improve Word HTML cleanup.
-             , 'meta'       : 1  # allowed by parsers, but can cause unexpected behavior
-             }
+VALID_TAGS = {
+    'a': 1,
+    'b': 1,
+    'base': 0,
+    'big': 1,
+    'blockquote': 1,
+    'body': 1,
+    'br': 0,
+    'caption': 1,
+    'cite': 1,
+    'code': 1,
+    'dd': 1,
+    'div': 1,
+    'dl': 1,
+    'dt': 1,
+    'em': 1,
+    'h1': 1,
+    'h2': 1,
+    'h3': 1,
+    'h4': 1,
+    'h5': 1,
+    'h6': 1,
+    'head': 1,
+    'hr': 0,
+    'html': 1,
+    'i': 1,
+    'img': 0,
+    'kbd': 1,
+    'li': 1,
+    # 'link' 1, type="script" hoses us
+    'meta': 0,
+    'ol': 1,
+    'p': 1,
+    'pre': 1,
+    'small': 1,
+    'span': 1,
+    'strong': 1,
+    'sub': 1,
+    'sup': 1,
+    'table': 1,
+    'tbody': 1,
+    'td': 1,
+    'th': 1,
+    'title': 1,
+    'tr': 1,
+    'tt': 1,
+    'u': 1,
+    'ul': 1,
+    'iframe': 1,
+}
+
+NASTY_TAGS = {
+    'script': 1,
+    'object': 1,
+    'embed': 1,
+    'applet': 1,
+    'style': 1,  # this helps improve Word HTML cleanup.
+    'meta': 1,  # allowed by parsers, but can cause unexpected behavior
+}
 
 
 # add some tags to allowed types.
@@ -120,7 +125,6 @@ class IllegalHTML(ValueError):
 VALID_TAGS['video'] = 1
 
 
-
 msg_pat = """
 <div class="system-message">
 <p class="system-message-title">System message: %s</p>
@@ -128,10 +132,14 @@ class IllegalHTML(ValueError):
 """
 
 CSS_COMMENT = re.compile(r'/\*.*\*/')
+
+
 def hasScript(s):
     """Dig out evil Java/VB script inside an HTML attribute.
 
-    >>> hasScript('data:text/html;base64,PHNjcmlwdD5hbGVydCgidGVzdCIpOzwvc2NyaXB0Pg==')
+    >>> hasScript(
+    ...     'data:text/html;'
+    ...     'base64,PHNjcmlwdD5hbGVydCgidGVzdCIpOzwvc2NyaXB0Pg==')
     True
     >>> hasScript('script:evil(1);')
     True
@@ -153,6 +161,8 @@ def hasScript(s):
 
 
 CHR_RE = re.compile(r'\\(\d+)')
+
+
 def unescape_chr(matchobj):
     try:
         return chr(int(matchobj.group(1), 16))
@@ -172,7 +182,7 @@ def decode_charref(s):
             c = c.encode('utf8')
         return c
     except ValueError:
-        return '&#'+s+';'
+        return '&#' + s + ';'
 
 
 def decode_entityref(s):
@@ -193,6 +203,7 @@ def decode_entityref(s):
 CHARREF_RE = re.compile(r"&(?:amp;)?#([xX]?[0-9a-fA-F]+);?")
 ENTITYREF_RE = re.compile(r"&(\w{1,32});?")
 
+
 def decode_htmlentities(s):
     # Decode HTML5 entities (numeric or named).
     s = CHR_RE.sub(unescape_chr, s)
@@ -202,8 +213,8 @@ def decode_htmlentities(s):
     return ENTITYREF_RE.sub(decode_entityref, s)
 
 
-# maps the HTML5 named character references to the equivalent Unicode character(s)
-# (taken from http://hg.python.org/cpython/rev/2b54e25d6ecb)
+# maps the HTML5 named character references to the equivalent Unicode
+# character(s) (taken from http://hg.python.org/cpython/rev/2b54e25d6ecb)
 html5entities = {
     'Aacute;': u'\xc1',
     'Aacute': u'\xc1',
@@ -1371,7 +1382,8 @@ def decode_htmlentities(s):
     'nesim;': u'\u2242\u0338',
     'NestedGreaterGreater;': u'\u226b',
     'NestedLessLess;': u'\u226a',
-    'NewLine;': u'\n', # should be \u240a but Chrome treats it as whitespace so...
+    # should be \u240a but Chrome treats it as whitespace so...
+    'NewLine;': u'\n',
     'nexist;': u'\u2204',
     'nexists;': u'\u2204',
     'Nfr;': u'\U0001d511',
@@ -2110,7 +2122,7 @@ def decode_htmlentities(s):
     'swnwar;': u'\u292a',
     'szlig;': u'\xdf',
     'szlig': u'\xdf',
-    'Tab;': u'\t', # should be \u2409 but Chrome treats it as whitespace so...
+    'Tab;': u'\t',  # should be \u2409 but Chrome treats it as whitespace so...
     'target;': u'\u2316',
     'Tau;': u'\u03a4',
     'tau;': u'\u03c4',
@@ -2521,7 +2533,7 @@ def unknown_starttag(self, tag, attrs):
                 else:
                     self.result.append(' %s="%s"' % (k, v))
 
-            #UNUSED endTag = '</%s>' % tag
+            # UNUSED endTag = '</%s>' % tag
             if safeToInt(self.valid.get(tag)):
                 self.result.append('>')
             else:
@@ -2536,7 +2548,7 @@ def unknown_starttag(self, tag, attrs):
 
     def unknown_endtag(self, tag):
         self.inside_script = False
-        if tag in self.nasty and not tag in self.valid:
+        if tag in self.nasty and tag not in self.valid:
             self.suppress = False
         if self.suppress:
             return
@@ -2547,17 +2559,17 @@ def parse_declaration(self, i):
         """Fix handling of CDATA sections. Code borrowed from BeautifulSoup.
         """
         j = None
-        if self.rawdata[i:i+9] == '<![CDATA[':
+        if self.rawdata[i:i + 9] == '<![CDATA[':
             k = self.rawdata.find(']]>', i)
             if k == -1:
                 k = len(self.rawdata)
-            j = k+3
+            j = k + 3
         else:
             try:
                 j = SGMLParser.parse_declaration(self, i)
             except SGMLParseError:
                 j = len(self.rawdata)
-        return j  
+        return j
 
     def getResult(self):
         return ''.join(self.result)
@@ -2565,7 +2577,6 @@ def getResult(self):
 
 def scrubHTML(html, valid=VALID_TAGS, nasty=NASTY_TAGS,
               remove_javascript=True, raise_error=True):
-
     """ Strip illegal HTML tags from string text.
     """
     parser = StrippingParser(valid=valid, nasty=nasty,
@@ -2576,7 +2587,8 @@ def scrubHTML(html, valid=VALID_TAGS, nasty=NASTY_TAGS,
     return parser.getResult()
 
 
-class SafeHTML:
+@implementer(ITransform)
+class SafeHTML(object):
     """Simple transform which uses CMFDefault functions to
     clean potentially bad tags.
 
@@ -2593,8 +2605,6 @@ class SafeHTML:
         -> Flush Cache.
     """
 
-    implements(ITransform)
-
     __name__ = "safe_html"
     inputs = ('text/html', )
     output = "text/x-html-safe"
@@ -2614,7 +2624,7 @@ def __init__(self, name=None, **kwargs):
             'class_blacklist': [],
             'remove_javascript': 1,
             'disable_transform': 0,
-            }
+        }
 
         self.config_metadata = {
             'inputs': ('list',
@@ -2662,7 +2672,7 @@ def __init__(self, name=None, **kwargs):
             'disable_transform': ("int",
                                   'disable_transform',
                                   'If 1, nothing is done.'),
-            }
+        }
 
         self.config.update(kwargs)
 
@@ -2701,7 +2711,7 @@ def convert(self, orig, data, **kwargs):
                     remove_javascript=self.config.get(
                         'remove_javascript', True),
                     raise_error=False)
-            except IllegalHTML, inst:
+            except IllegalHTML as inst:
                 data.setData(msg_pat % ("Error", str(inst)))
                 break
             else:
diff --git a/Products/PortalTransforms/transforms/st.py b/Products/PortalTransforms/transforms/st.py
index f6332e7..e6c1d31 100644
--- a/Products/PortalTransforms/transforms/st.py
+++ b/Products/PortalTransforms/transforms/st.py
@@ -1,13 +1,15 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
 from zope.structuredtext import stx2html
 
+
 DEFAULT_STX_LEVEL = 2
 STX_LEVEL = DEFAULT_STX_LEVEL
 
 
-class st:
-    implements(ITransform)
+@implementer(ITransform)
+class st(object):
 
     __name__ = "st_to_html"
     inputs = ("text/structured",)
diff --git a/Products/PortalTransforms/transforms/text_pre_to_html.py b/Products/PortalTransforms/transforms/text_pre_to_html.py
index 2f10e90..5918c2f 100644
--- a/Products/PortalTransforms/transforms/text_pre_to_html.py
+++ b/Products/PortalTransforms/transforms/text_pre_to_html.py
@@ -1,13 +1,13 @@
-from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from DocumentTemplate.DT_Util import html_quote
+from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implementer
 
 
+@implementer(ITransform)
 class TextPreToHTML:
     """simple transform which wraps raw text into a <pre> tag"""
 
-    implements(ITransform)
-
     __name__ = "text-pre_to_html"
     inputs = ('text/plain-pre',)
     output = "text/html"
@@ -16,7 +16,7 @@ def __init__(self, name=None):
         self.config_metadata = {
             'inputs': ('list', 'Inputs',
                        'Input(s) MIME type. Change with care.'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/text_to_html.py b/Products/PortalTransforms/transforms/text_to_html.py
index 97ef9e5..174c560 100644
--- a/Products/PortalTransforms/transforms/text_to_html.py
+++ b/Products/PortalTransforms/transforms/text_to_html.py
@@ -1,13 +1,13 @@
-from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from DocumentTemplate.DT_Util import html_quote
+from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implementer
 
 
-class TextToHTML:
+@implementer(ITransform)
+class TextToHTML(object):
     """simple transform which wrap raw text in a verbatim environment"""
 
-    implements(ITransform)
-
     __name__ = "text_to_html"
     output = "text/html"
 
@@ -18,7 +18,7 @@ def __init__(self, name=None, inputs=('text/plain',)):
                 'list',
                 'Inputs',
                 'Input(s) MIME type. Change with care.'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/textile_to_html.py b/Products/PortalTransforms/transforms/textile_to_html.py
index 32b0363..93153c3 100644
--- a/Products/PortalTransforms/transforms/textile_to_html.py
+++ b/Products/PortalTransforms/transforms/textile_to_html.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """
 Uses Roberto A. F. De Almeida's http://dealmeida.net/ module to do its
 handy work
@@ -6,10 +7,9 @@
 
 """
 
-from zope.interface import implements
-
 from Products.PortalTransforms.interfaces import ITransform
 from Products.PortalTransforms.utils import log
+from zope.interface import implementer
 
 
 HAS_TEXTILE = True
@@ -20,8 +20,8 @@
     log('textile_to_html: Could not import textile.')
 
 
-class textile:
-    implements(ITransform)
+@implementer(ITransform)
+class textile(object):
 
     __name__ = "textile_to_html"
     inputs = ("text/x-web-textile",)
diff --git a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
index 6d84e3e..7ef3f8e 100644
--- a/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
+++ b/Products/PortalTransforms/transforms/web_intelligent_plain_text_to_html.py
@@ -1,14 +1,13 @@
+# -*- coding: utf-8 -*-
+from plone.intelligenttext.transforms import convertWebIntelligentPlainTextToHtml  # noqa
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from plone.intelligenttext.transforms import \
-    convertWebIntelligentPlainTextToHtml
+from zope.interface import implementer
 
 
-class WebIntelligentPlainTextToHtml:
+@implementer(ITransform)
+class WebIntelligentPlainTextToHtml(object):
     """Transform which replaces urls and email into hyperlinks"""
 
-    implements(ITransform)
-
     __name__ = "web_intelligent_plain_text_to_html"
     output = "text/html"
 
@@ -24,7 +23,7 @@ def __init__(self, name=None, inputs=('text/x-web-intelligent',),
                 'string',
                 'Tab width',
                 'Number of spaces for a tab in the input'),
-            }
+        }
         if name:
             self.__name__ = name
 
diff --git a/Products/PortalTransforms/transforms/word_to_html.py b/Products/PortalTransforms/transforms/word_to_html.py
index aa6fd61..624225f 100644
--- a/Products/PortalTransforms/transforms/word_to_html.py
+++ b/Products/PortalTransforms/transforms/word_to_html.py
@@ -1,5 +1,9 @@
+# -*- coding: utf-8 -*-
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
+from zope.interface import implementer
+
+import os
+
 
 EXTRACT_BODY = 1
 EXTRACT_STYLE = 0
@@ -10,7 +14,6 @@
 # disable office_uno because it doesn't support multithread yet
 ENABLE_UNO = False
 
-import os
 if os.name == 'posix':
     try:
         if ENABLE_UNO:
@@ -29,8 +32,8 @@
         from office_com import document
 
 
-class word_to_html:
-    implements(ITransform)
+@implementer(ITransform)
+class word_to_html(object):
 
     __name__ = "word_to_html"
     inputs = ('application/msword',)
diff --git a/Products/PortalTransforms/unsafe_transforms/build_transforms.py b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
index 971a24e..a7d9171 100644
--- a/Products/PortalTransforms/unsafe_transforms/build_transforms.py
+++ b/Products/PortalTransforms/unsafe_transforms/build_transforms.py
@@ -1,51 +1,53 @@
-"""try to build some usefull transformations with the command and xml
+# -*- coding: utf-8 -*-
+"""try to build some useful transformations with the command and xml
 transforms and the available binaries
 """
-from Products.PortalTransforms.libtransforms.utils import (
-    bin_search, MissingBinary)
+from command import ExternalCommandTransform
+from Products.PortalTransforms.libtransforms.utils import bin_search
+from Products.PortalTransforms.libtransforms.utils import MissingBinary
+
 
 COMMAND_CONFIGS = (
     ('lynx_dump', '.html',
-     {'binary_path'  : 'lynx',
-      'command_line' : '-dump %(input)s',
-      'inputs'       : ('text/html',),
-      'output'       : 'text/plain',
+     {'binary_path': 'lynx',
+      'command_line': '-dump %(input)s',
+      'inputs': ('text/html',),
+      'output': 'text/plain',
       }),
     ('tidy_html', '.html',
-     {'binary_path'  : 'tidy',
-      'command_line' : '%(input)s',
-      'inputs'       : ('text/html',),
-      'output'       : 'text/html',
+     {'binary_path': 'tidy',
+      'command_line': '%(input)s',
+      'inputs': ('text/html',),
+      'output': 'text/html',
       }),
     ('rtf_to_html', None,
-     {'binary_path'  : 'unrtf',
-      'command_line' : '%(input)s',
-      'inputs'       : ('application/rtf',),
-      'output'       : 'text/html',
+     {'binary_path': 'unrtf',
+      'command_line': '%(input)s',
+      'inputs': ('application/rtf',),
+      'output': 'text/html',
       }),
     ('ppt_to_html', None,
-     {'binary_path'  : 'ppthtml',
-      'command_line' : '%(input)s',
-      'inputs'       : ('application/vnd.ms-powerpoint',),
-      'output'       : 'text/html',
+     {'binary_path': 'ppthtml',
+      'command_line': '%(input)s',
+      'inputs': ('application/vnd.ms-powerpoint',),
+      'output': 'text/html',
       }),
     ('excel_to_html', None,
-     {'binary_path'  : 'xlhtml',
-      'command_line' : '-nh -a %(input)s',
-      'inputs'       : ('application/vnd.ms-excel',),
-      'output'       : 'text/html',
+     {'binary_path': 'xlhtml',
+      'command_line': '-nh -a %(input)s',
+      'inputs': ('application/vnd.ms-excel',),
+      'output': 'text/html',
       }),
     ('ps_to_text', None,
-     {'binary_path'  : 'ps2ascii',
-      'command_line' : '%(input)s',
-      'inputs'       : ('application/postscript',),
-      'output'       : 'text/plain',
+     {'binary_path': 'ps2ascii',
+      'command_line': '%(input)s',
+      'inputs': ('application/postscript',),
+      'output': 'text/plain',
       }),
-    )
+)
 
 TRANSFORMS = {}
 
-from command import ExternalCommandTransform
 for tr_name, extension, config in COMMAND_CONFIGS:
     try:
         bin = bin_search(config['binary_path'])
@@ -59,9 +61,9 @@
         TRANSFORMS[tr_name] = tr
 
 XMLPROCS_CONF = {
-    'xsltproc' : '--catalogs --xinclude -o %(output)s %(transform)s %(input)s',
-    '4xslt' : ' -o %(output)s %(input)s %(transform)s',
-    }
+    'xsltproc': '--catalogs --xinclude -o %(output)s %(transform)s %(input)s',
+    '4xslt': ' -o %(output)s %(input)s %(transform)s',
+}
 
 bin = None
 for proc in XMLPROCS_CONF.keys():
@@ -78,7 +80,7 @@
         name = "xml_to_" + output
         command_line = XMLPROCS_CONF[proc]
         tr = XsltTransform(name=name, inputs=('text/xml',),
-                           output='text/'+output,
+                           output='text/' + output,
                            binary_path=bin, command_line=command_line)
         TRANSFORMS[name] = tr
 
diff --git a/Products/PortalTransforms/unsafe_transforms/command.py b/Products/PortalTransforms/unsafe_transforms/command.py
index 9bc16ca..5f9d940 100644
--- a/Products/PortalTransforms/unsafe_transforms/command.py
+++ b/Products/PortalTransforms/unsafe_transforms/command.py
@@ -1,16 +1,18 @@
+# -*- coding: utf-8 -*-
 """
 A custom transform using external command
 """
 
-import os.path
 from os import popen3
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
 from Products.PortalTransforms.utils import log
+from zope.interface import implementer
+
+import os.path
 
 
+@implementer(ITransform)
 class ExternalCommandTransform(commandtransform):
     """ Custom external command
 
@@ -20,7 +22,6 @@ class ExternalCommandTransform(commandtransform):
     the command line parameters) and return output on stdout.
     Input and output mime types must be set correctly !
     """
-    implements(ITransform)
 
     __name__ = "command_transform"
 
@@ -30,7 +31,7 @@ def __init__(self, name=None, input_extension=None, **kwargs):
             'command_line': '',
             'inputs': ('text/plain',),
             'output': 'text/plain',
-            }
+        }
         self.config_metadata = {
             'binary_path': (
                 'string',
@@ -51,7 +52,7 @@ def __init__(self, name=None, input_extension=None, **kwargs):
                 'string',
                 'Output',
                 'Output MIME type. Change with care.'),
-            }
+        }
         self.config.update(kwargs)
         commandtransform.__init__(self, name=name,
                                   binary=self.config['binary_path'], **kwargs)
diff --git a/Products/PortalTransforms/unsafe_transforms/xml.py b/Products/PortalTransforms/unsafe_transforms/xml.py
index 5dee985..de8c68b 100644
--- a/Products/PortalTransforms/unsafe_transforms/xml.py
+++ b/Products/PortalTransforms/unsafe_transforms/xml.py
@@ -1,20 +1,24 @@
+# -*- coding: utf-8 -*-
 """
 A custom transform using external command
 """
 
-from os.path import join, dirname, exists
-import re
-from os import system
 from cStringIO import StringIO
-
+from os import system
+from os.path import dirname
+from os.path import exists
+from os.path import join
 from Products.PortalTransforms.interfaces import ITransform
-from zope.interface import implements
-from Products.PortalTransforms.libtransforms.utils import bin_search, sansext
-from Products.PortalTransforms.libtransforms.commandtransform import \
-    commandtransform
+from Products.PortalTransforms.libtransforms.commandtransform import commandtransform  # noqa
+from Products.PortalTransforms.libtransforms.utils import bin_search
+from Products.PortalTransforms.libtransforms.utils import sansext
 from Products.PortalTransforms.utils import log
+from zope.interface import implementer
+
+import re
 
 
+@implementer(ITransform)
 class XsltTransform(commandtransform):
     """ Custom external command
 
@@ -24,7 +28,6 @@ class XsltTransform(commandtransform):
 
     You can associate different document type to different transformations.
     """
-    implements(ITransform)
 
     __name__ = "xml_to_html"
 
@@ -38,10 +41,11 @@ def __init__(self, name=None, **kwargs):
             'output_encoding': 'UTF-8',
             'dtds': {
                 '-//OASIS//DTD DocBook V4.1//EN':
-                    '/usr/share/sgml/docbook/xsl-stylesheets-1.29/html/docbook.xsl',
-                },
+                    '/usr/share/sgml/docbook/xsl-stylesheets-1.29/html/'
+                    'docbook.xsl',
+            },
             'default_transform': '',
-            }
+        }
         self.config_metadata = {
             'binary_path': (
                 'string',
@@ -75,8 +79,10 @@ def __init__(self, name=None, **kwargs):
             'default_transform': (
                 'string',
                 'Default xslt',
-                'Default xslt, used when no specific transformation is found.'),
-            }
+                'Default xslt, used when no specific transformation is '
+                'found.'
+            ),
+        }
         self.config.update(kwargs)
         if name:
             self.__name__ = name
diff --git a/Products/PortalTransforms/utils.py b/Products/PortalTransforms/utils.py
index af817c3..a993959 100644
--- a/Products/PortalTransforms/utils.py
+++ b/Products/PortalTransforms/utils.py
@@ -1,6 +1,8 @@
 """some common utilities
 """
+# directory where template for the ZMI are located
 import logging
+import os.path
 
 
 class TransformException(Exception):
@@ -15,8 +17,6 @@ class TransformException(Exception):
 def log(message, severity=logging.DEBUG):
     logger.log(severity, message)
 
-# directory where template for the ZMI are located
-import os.path
 _www = os.path.join(os.path.dirname(__file__), 'www')
 
 
diff --git a/bootstrap.py b/bootstrap.py
index a629566..e23fccc 100644
--- a/bootstrap.py
+++ b/bootstrap.py
@@ -18,12 +18,17 @@
 use the -c option to specify an alternate configuration file.
 """
 
+from optparse import OptionParser
+
 import os
+import pkg_resources
+import setuptools
 import shutil
+import subprocess
 import sys
 import tempfile
+import zc.buildout.buildout
 
-from optparse import OptionParser
 
 tmpeggs = tempfile.mkdtemp()
 
@@ -96,8 +101,6 @@
     setup_args['version'] = options.setuptools_version
 
 ez['use_setuptools'](**setup_args)
-import setuptools
-import pkg_resources
 
 # This does not (always?) update the default working set.  We will
 # do it.
@@ -119,7 +122,7 @@
     options.find_links or
     ('http://downloads.buildout.org/'
      if options.accept_buildout_test_releases else None)
-    )
+)
 if find_links:
     cmd.extend(['-f', find_links])
 
@@ -166,7 +169,6 @@ def _final_version(parsed_version):
     requirement = '=='.join((requirement, version))
 cmd.append(requirement)
 
-import subprocess
 if subprocess.call(cmd, env=dict(os.environ, PYTHONPATH=setuptools_path)) != 0:
     raise Exception(
         "Failed to execute command:\n%s" % repr(cmd)[1:-1])
@@ -176,7 +178,6 @@ def _final_version(parsed_version):
 
 ws.add_entry(tmpeggs)
 ws.require(requirement)
-import zc.buildout.buildout
 
 if not [a for a in args if '=' not in a]:
     args.append('bootstrap')
diff --git a/setup.py b/setup.py
index d01af2a..abe0fd6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,19 +1,21 @@
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '2.1.11.dev0'
 
 setup(name='Products.PortalTransforms',
       version=version,
       description="MIME based content transformations",
-      long_description=open("README.rst").read() + "\n" + \
-                       open("CHANGES.rst").read(),
+      long_description=open("README.rst").read() + "\n" +
+      open("CHANGES.rst").read(),
       classifiers=[
-        "Framework :: Zope2",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.6",
-        "Programming Language :: Python :: 2.7",
-        ],
+          "Framework :: Zope2",
+          "Operating System :: OS Independent",
+          "Programming Language :: Python",
+          "Programming Language :: Python :: 2.6",
+          "Programming Language :: Python :: 2.7",
+      ],
       keywords='Zope Plone Transform',
       author='Benjamin Saller',
       author_email='plone-developers@lists.sourceforge.net',
@@ -23,11 +25,11 @@
       include_package_data=True,
       zip_safe=False,
       extras_require=dict(
-        test=[
-            'zope.testing',
-            'Products.Archetypes [test]',
-            'Pillow',
-        ],
+          test=[
+              'zope.testing',
+              'Products.Archetypes [test]',
+              'Pillow',
+          ],
       ),
       install_requires=[
           'setuptools',


