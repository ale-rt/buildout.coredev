Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-10-22T14:35:10-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/825f1705205de8eb9471bfcc7ff92358cf3f7f57

Remove (really) old upgrades

Fixes
https://github.com/plone/Products.CMFPlone/issues/1778

Files changed:
M CHANGES.rst
M plone/app/upgrade/__init__.py
M plone/app/upgrade/configure.zcml
M plone/app/upgrade/v43/final.py
D plone/app/upgrade/v25/__init__.py
D plone/app/upgrade/v25/configure.zcml
D plone/app/upgrade/v25/data/test-base.zexp
D plone/app/upgrade/v25/profiles.zcml
D plone/app/upgrade/v25/profiles/final_two51/actions.xml
D plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml
D plone/app/upgrade/v25/tests.py
D plone/app/upgrade/v30/__init__.py
D plone/app/upgrade/v30/alphas.py
D plone/app/upgrade/v30/betas.py
D plone/app/upgrade/v30/configure.zcml
D plone/app/upgrade/v30/data/test-base.zexp
D plone/app/upgrade/v30/data/test-full.zexp
D plone/app/upgrade/v30/final_three0x.py
D plone/app/upgrade/v30/profiles.zcml
D plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml
D plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml
D plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt
D plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml
D plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml
D plone/app/upgrade/v30/profiles/final_three01/rolemap.xml
D plone/app/upgrade/v30/profiles/final_three01/toolset.xml
D plone/app/upgrade/v30/profiles/rc2_final/actions.xml
D plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml
D plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml
D plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml
D plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml
D plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml
D plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml
D plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml
D plone/app/upgrade/v30/rcs.py
D plone/app/upgrade/v30/tests.py
D plone/app/upgrade/v31/__init__.py
D plone/app/upgrade/v31/betas.py
D plone/app/upgrade/v31/configure.zcml
D plone/app/upgrade/v31/data/test-base.zexp
D plone/app/upgrade/v31/data/test-full.zexp
D plone/app/upgrade/v31/final_three1x.py
D plone/app/upgrade/v31/profiles.zcml
D plone/app/upgrade/v31/profiles/three0_beta1/actions.xml
D plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml
D plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml
D plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml
D plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml
D plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml
D plone/app/upgrade/v31/tests.py
D plone/app/upgrade/v32/__init__.py
D plone/app/upgrade/v32/betas.py
D plone/app/upgrade/v32/configure.zcml
D plone/app/upgrade/v32/data/test-base.zexp
D plone/app/upgrade/v32/data/test-full.zexp
D plone/app/upgrade/v32/profiles.zcml
D plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml
D plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml
D plone/app/upgrade/v32/tests.py
D plone/app/upgrade/v33/__init__.py
D plone/app/upgrade/v33/configure.zcml
D plone/app/upgrade/v33/data/test-base.zexp
D plone/app/upgrade/v33/data/test-full.zexp
D plone/app/upgrade/v33/profiles.zcml
D plone/app/upgrade/v33/profiles/three2_three3/actions.xml
D plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml
D plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml
D plone/app/upgrade/v33/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 98f410b..485acf4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 
 Breaking changes:
 
-- *add item here*
+- Remove really old upgrade steps (everything up to v40).
+  [gforcada]
 
 New features:
 
diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index 56d6312..5b8931d 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -13,11 +13,6 @@ class HiddenProducts(object):
 
     def getNonInstallableProducts(self):
         return [
-            'plone.app.upgrade.v25',
-            'plone.app.upgrade.v30',
-            'plone.app.upgrade.v31',
-            'plone.app.upgrade.v32',
-            'plone.app.upgrade.v33',
             'plone.app.upgrade.v40',
             'plone.app.upgrade.v41',
             'plone.app.upgrade.v42',
diff --git a/plone/app/upgrade/configure.zcml b/plone/app/upgrade/configure.zcml
index 601ac13..09b00ec 100644
--- a/plone/app/upgrade/configure.zcml
+++ b/plone/app/upgrade/configure.zcml
@@ -4,11 +4,6 @@
     xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone">
 
-    <include package=".v25" />
-    <include package=".v30" />
-    <include package=".v31" />
-    <include package=".v32" />
-    <include package=".v33" />
     <include package=".v40" />
     <include package=".v41" />
     <include package=".v42" />
diff --git a/plone/app/upgrade/v25/__init__.py b/plone/app/upgrade/v25/__init__.py
deleted file mode 100644
index bfa47ca..0000000
--- a/plone/app/upgrade/v25/__init__.py
+++ /dev/null
@@ -1,77 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.UnicodeSplitter import Splitter, CaseNormalizer
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def final_two51(context):
-    """2.5-final -> 2.5.1
-    """
-    loadMigrationProfile(
-        context, 'profile-plone.app.upgrade.v25:2.5final-2.5.1')
-
-    # Required for #5569 (is_folderish needs reindexing) and #5231 (all text
-    # indices need to be reindexed so they are split properly)
-    migtool = getToolByName(context, 'portal_migration')
-    migtool._needRecatalog = True
-
-
-def fixupPloneLexicon(context):
-    """Updates the plone_lexicon pipeline with the new splitter
-       and case normalizer.
-    """
-    catalog = getToolByName(context, 'portal_catalog', None)
-    if catalog is not None:
-        if 'plone_lexicon' in catalog.objectIds():
-            lexicon = catalog.plone_lexicon
-            pipeline = list(lexicon._pipeline)
-            if len(pipeline) >= 2:
-                if (not isinstance(pipeline[0], Splitter) or
-                        not isinstance(pipeline[1], CaseNormalizer)):
-                    pipeline[0] = Splitter()
-                    pipeline[1] = CaseNormalizer()
-                    lexicon._pipeline = tuple(pipeline)
-                    # Clear the lexicon
-                    from BTrees.OIBTree import OIBTree
-                    from BTrees.IOBTree import IOBTree
-                    from BTrees.Length import Length
-                    lexicon._wids = OIBTree()
-                    lexicon._words = IOBTree()
-                    lexicon.length = Length()
-                    logger.info('Updated plone_lexicon pipeline.')
-
-
-def setLoginFormInCookieAuth(context, out=None):
-    """Makes sure the cookie auth redirects to 'require_login' instead
-       of 'login_form'."""
-    uf = getattr(context, 'acl_users', None)
-    if uf is None or getattr(uf.aq_base, '_getOb', None) is None:
-        # we have no user folder or it's not a PAS folder, do nothing
-        return
-    cookie_auth = uf._getOb('credentials_cookie_auth', None)
-    if cookie_auth is None:
-        # there's no cookie auth object, do nothing
-        return
-    current_login_form = cookie_auth.getProperty('login_path')
-    if current_login_form != 'login_form':
-        # it's customized already, do nothing
-        return
-    cookie_auth.manage_changeProperties(login_path='require_login')
-    logger.info("Changed credentials_cookie_path login_path property "
-                "to 'require_login'.")
-
-
-def addMissingMimeTypes(context):
-    """ Add mime types that weren't included with the MimetypesRegistry that
-        shipped with Plone 2.5.2 and are now required (#6695)
-    """
-    # manage_addMimeType handles existing types gracefully, so we can just go
-    # ahead and add them without testing for existing ones
-    mtr = getToolByName(context, 'mimetypes_registry', None)
-    if mtr is not None:
-        mtr.manage_addMimeType('text/x-web-markdown',
-                               ['text/x-web-markdown'], ['markdown'], 'text.png')
-        mtr.manage_addMimeType('text/x-web-textile',
-                               ['text/x-web-textile'], ['textile'], 'text.png')
-        logger.info("Added `text/x-web-markdown` and `text/x-web-textile`.")
diff --git a/plone/app/upgrade/v25/configure.zcml b/plone/app/upgrade/v25/configure.zcml
deleted file mode 100644
index 1c5b61e..0000000
--- a/plone/app/upgrade/v25/configure.zcml
+++ /dev/null
@@ -1,94 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <genericsetup:upgradeSteps
-        source="2.5"
-        destination="2.5.1.rc1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Upgrade all existing actions to new-style actions"
-            handler="plone.app.upgrade.v30.alphas.migrateOldActions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Repair plone_lexicon pipeline"
-            handler=".fixupPloneLexicon"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".final_two51"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeStep
-        source="2.5.1.rc1"
-        destination="2.5.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.1"
-        destination="2.5.2.rc1"
-        title="Changes cookie auth redirects to the correct location"
-        profile="Products.CMFPlone:plone"
-        handler=".setLoginFormInCookieAuth"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.2.rc1"
-        destination="2.5.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.2"
-        destination="2.5.3.rc1"
-        title="Add markdown and textile mime types."
-        profile="Products.CMFPlone:plone"
-        handler=".addMissingMimeTypes"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.3.rc1"
-        destination="2.5.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.3"
-        destination="2.5.4"
-        title="Correct baseline profile in GenericSetup."
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.v30.alphas.updateImportStepsFromBaseProfile"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.4"
-        destination="2.5.4.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.4.2"
-        destination="2.5.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v25/data/test-base.zexp b/plone/app/upgrade/v25/data/test-base.zexp
deleted file mode 100644
index 6575e1b..0000000
Binary files a/plone/app/upgrade/v25/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v25/profiles.zcml b/plone/app/upgrade/v25/profiles.zcml
deleted file mode 100644
index b621706..0000000
--- a/plone/app/upgrade/v25/profiles.zcml
+++ /dev/null
@@ -1,15 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <genericsetup:registerProfile
-        name="2.5final-2.5.1"
-        title="Upgrade profile for Plone 2.5-final to Plone 2.5.1"
-        description="This profile contains configuration changes that are applied during the Plone 2.5-final to 2.5.1 upgrade."
-        directory="profiles/final_two51"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v25/profiles/final_two51/actions.xml b/plone/app/upgrade/v25/profiles/final_two51/actions.xml
deleted file mode 100644
index 4095598..0000000
--- a/plone/app/upgrade/v25/profiles/final_two51/actions.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
-  <object name="object_buttons" meta_type="CMF Action Category">
-
-    <object name="delete" meta_type="CMF Action" i18n:domain="plone">
-     <property name="title" i18n:translate="">Delete</property>
-     <property name="description" i18n:translate=""></property>
-     <property
-        name="url_expr">string:${globals_view/getCurrentObjectUrl}/delete_confirmation</property>
-     <property name="icon_expr"></property>
-     <property
-        name="available_expr">python:checkPermission("Delete objects", globals_view.getParentObject()) and not globals_view.isPortalOrPortalDefaultPage()</property>
-     <property name="permissions">
-      <element value="Delete objects"/>
-     </property>
-     <property name="visible">True</property>
-    </object>
-
-  </object>
-</object>
diff --git a/plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml b/plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml
deleted file mode 100644
index 4324196..0000000
--- a/plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet id="plone.css" remove=""/>
-</object>
diff --git a/plone/app/upgrade/v25/tests.py b/plone/app/upgrade/v25/tests.py
deleted file mode 100644
index cf752cf..0000000
--- a/plone/app/upgrade/v25/tests.py
+++ /dev/null
@@ -1,131 +0,0 @@
-from Products.CMFPlone.UnicodeSplitter import Splitter
-from Products.CMFPlone.UnicodeSplitter import CaseNormalizer
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import version_match
-
-from plone.app.upgrade.v25 import fixupPloneLexicon
-from plone.app.upgrade.v25 import setLoginFormInCookieAuth
-from plone.app.upgrade.v25 import addMissingMimeTypes
-
-
-class TestMigrations_v2_5_0(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v25:2.5final-2.5.1'
-        self.actions = self.portal.portal_actions
-        self.css = self.portal.portal_css
-
-    def tesFixObjDeleteAction(self):
-        # Prepare delete actions test
-        editActions = ('delete',)
-        for a in editActions:
-            self.removeActionFromTool(a, category='object_buttons')
-        loadMigrationProfile(self.portal, self.profile, ('actions', ))
-        # delete action tests
-        actions = [x.id for x in self.actions.object_buttons.listActions()
-                   if x.id in editActions]
-        # check that all of our deleted actions are now present
-        for a in editActions:
-            self.assertTrue(a in actions)
-        # ensure that they are present only once
-        self.assertEqual(len(editActions), len(actions))
-
-    def testFixupPloneLexicon(self):
-        # Should update the plone_lexicon pipeline
-        lexicon = self.portal.portal_catalog.plone_lexicon
-        lexicon._pipeline = (object(), object())
-        # Test it twice
-        for i in range(2):
-            fixupPloneLexicon(self.portal)
-            self.assertTrue(isinstance(lexicon._pipeline[0], Splitter))
-            self.assertTrue(isinstance(lexicon._pipeline[1], CaseNormalizer))
-
-
-class TestMigrations_v2_5_1(MigrationTest):
-
-    def afterSetUp(self):
-        self.actions = self.portal.portal_actions
-        self.memberdata = self.portal.portal_memberdata
-        self.catalog = self.portal.portal_catalog
-        self.skins = self.portal.portal_skins
-        self.types = self.portal.portal_types
-        self.workflow = self.portal.portal_workflow
-        self.css = self.portal.portal_css
-
-    def testSetLoginFormInCookieAuth(self):
-        setLoginFormInCookieAuth(self.portal)
-        cookie_auth = self.portal.acl_users.credentials_cookie_auth
-        self.assertEqual(cookie_auth.getProperty('login_path'),
-                         'require_login')
-
-    def testSetLoginFormNoCookieAuth(self):
-        # Shouldn't error
-        uf = self.portal.acl_users
-        uf._delOb('credentials_cookie_auth')
-        setLoginFormInCookieAuth(self.portal)
-
-    def testSetLoginFormAlreadyChanged(self):
-        # Shouldn't change the value if it's not the default
-        cookie_auth = self.portal.acl_users.credentials_cookie_auth
-        cookie_auth.manage_changeProperties(login_path='foo')
-        setLoginFormInCookieAuth(self.portal)
-        self.assertTrue(cookie_auth.getProperty(
-            'login_path') != 'require_login')
-
-
-class TestMigrations_v2_5_2(MigrationTest):
-
-    def afterSetUp(self):
-        self.mimetypes = self.portal.mimetypes_registry
-
-    def testMissingMimeTypes(self):
-        # we're testing for 'text/x-web-markdown' and 'text/x-web-textile'
-        missing_types = ['text/x-web-markdown', 'text/x-web-textile']
-        # since we're running a full 2.5.4 instance in this test, the missing
-        # types might in fact already be there:
-        current_types = self.mimetypes.list_mimetypes()
-        types_to_delete = []
-        for mtype in missing_types:
-            if mtype in current_types:
-                types_to_delete.append(mtype)
-        if types_to_delete:
-            self.mimetypes.manage_delObjects(types_to_delete)
-        # now they're gone:
-        self.assertFalse(set(self.mimetypes.list_mimetypes()
-                             ).issuperset(set(missing_types)))
-        addMissingMimeTypes(self.portal)
-        # now they're back:
-        self.assertTrue(set(self.mimetypes.list_mimetypes()
-                            ).issuperset(set(missing_types)))
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testDCMIStorageUpdated(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        dcmi = getattr(oldsite.portal_metadata, 'DCMI', None)
-        self.assertFalse(dcmi is None)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('2.5'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v2_5_0))
-    suite.addTest(makeSuite(TestMigrations_v2_5_1))
-    suite.addTest(makeSuite(TestMigrations_v2_5_2))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v30/__init__.py b/plone/app/upgrade/v30/__init__.py
deleted file mode 100644
index 6f9a1ca..0000000
--- a/plone/app/upgrade/v30/__init__.py
+++ /dev/null
@@ -1,5 +0,0 @@
-# Plone 3.0
-import alphas
-import betas
-import rcs
-import final_three0x
diff --git a/plone/app/upgrade/v30/alphas.py b/plone/app/upgrade/v30/alphas.py
deleted file mode 100644
index 1fe1d9e..0000000
--- a/plone/app/upgrade/v30/alphas.py
+++ /dev/null
@@ -1,573 +0,0 @@
-import os
-
-from five.localsitemanager import find_next_sitemanager
-from five.localsitemanager import make_objectmanager_site
-from five.localsitemanager.registry import FiveVerifyingAdapterLookup
-from five.localsitemanager.registry import PersistentComponents
-from plone.app.portlets.utils import convert_legacy_portlets
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import ILocalPortletAssignmentManager
-from plone.portlets.constants import CONTEXT_CATEGORY as CONTEXT_PORTLETS
-from zope.location.interfaces import ISite
-from zope.component import getMultiAdapter
-from zope.component import getSiteManager
-from zope.component import getUtility
-from zope.component.globalregistry import base
-from zope.component.interfaces import ComponentLookupError
-from zope.site.hooks import setSite
-
-from Acquisition import aq_base
-from App.Common import package_home
-from Products.Archetypes.interfaces import IArchetypeTool
-from Products.Archetypes.interfaces import IReferenceCatalog
-from Products.Archetypes.interfaces import IUIDCatalog
-from Products.CMFActionIcons.interfaces import IActionIconsTool
-from Products.CMFCalendar.interfaces import ICalendarTool
-from Products.CMFCore.ActionInformation import Action
-from Products.CMFCore.ActionInformation import ActionCategory
-from Products.CMFCore.interfaces import IActionsTool
-from Products.CMFCore.interfaces import ICachingPolicyManager
-from Products.CMFCore.interfaces import ICatalogTool
-from Products.CMFCore.interfaces import IContentTypeRegistry
-from Products.CMFCore.interfaces import IDiscussionTool
-from Products.CMFCore.interfaces import IMemberDataTool
-from Products.CMFCore.interfaces import IMembershipTool
-from Products.CMFCore.interfaces import IMetadataTool
-from Products.CMFCore.interfaces import IPropertiesTool
-from Products.CMFCore.interfaces import IRegistrationTool
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFCore.interfaces import ISkinsTool
-from Products.CMFCore.interfaces import ISyndicationTool
-from Products.CMFCore.interfaces import ITypesTool
-from Products.CMFCore.interfaces import IUndoTool
-from Products.CMFCore.interfaces import IURLTool
-from Products.CMFCore.interfaces import IConfigurableWorkflowTool
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.DirectoryView import createDirectoryView
-from Products.CMFDiffTool.interfaces import IDiffTool
-from Products.CMFEditions.interfaces import IArchivistTool
-from Products.CMFEditions.interfaces import IPortalModifierTool
-from Products.CMFEditions.interfaces import IPurgePolicyTool
-from Products.CMFEditions.interfaces.IRepository import IRepositoryTool
-from Products.CMFEditions.interfaces import IStorageTool
-from Products.CMFFormController.interfaces import IFormControllerTool
-from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool
-from Products.CMFUid.interfaces import IUniqueIdAnnotationManagement
-from Products.CMFUid.interfaces import IUniqueIdGenerator
-from Products.CMFUid.interfaces import IUniqueIdHandler
-from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition
-from Products.DCWorkflow.exportimport import WorkflowDefinitionConfigurator, _initDCWorkflow
-from Products.GenericSetup.interfaces import ISetupTool
-from Products.MailHost.interfaces import IMailHost
-from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
-from Products.PloneLanguageTool.interfaces import ILanguageTool
-from Products.PlonePAS.interfaces.group import IGroupTool
-from Products.PlonePAS.interfaces.group import IGroupDataTool
-from Products.PortalTransforms.interfaces import IPortalTransformsTool
-from Products.ResourceRegistries.interfaces import ICSSRegistry
-from Products.ResourceRegistries.interfaces import IJSRegistry
-from Products.StandardCacheManagers import RAMCacheManager
-
-from Products.CMFPlone import cmfplone_globals
-from Products.CMFPlone.factory import _DEFAULT_PROFILE
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.CMFPlone.interfaces import IPloneTool
-from Products.CMFPlone.interfaces import ITranslationServiceTool
-
-from plone.app.upgrade.utils import installOrReinstallProduct
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import logger
-
-try:
-    from Products.ATContentTypes.interface import IATCTTool
-    from Products.ATContentTypes.migration.v1_2 import upgradeATCTTool
-    HAS_ATCT = True
-except ImportError:
-    HAS_ATCT = False
-
-try:
-    from Products.CMFPlone.interfaces import IFactoryTool
-except:
-    from Products.ATContentTypes.interfaces import IFactoryTool
-
-
-def three0_alpha1(context):
-    """2.5.x -> 3.0-alpha1
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:2.5.x-3.0a1')
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-
-    # The ATCT tool has lost all type migration functionality and quite some
-    # metadata and index information stored on it needs to be updated.
-    if HAS_ATCT:
-        upgradeATCTTool(portal)
-
-    # Install CMFEditions and CMFDiffTool
-    installProduct('CMFEditions', portal, hidden=True)
-
-
-def alpha1_alpha2(context):
-    """ 3.0-alpha1 -> 3.0-alpha2
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0a1-3.0a2')
-
-
-def alpha2_beta1(context):
-    """ 3.0-alpha2 -> 3.0-beta1
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0a2-3.0b1')
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-
-    # Install PloneLanguageTool
-    installProduct('PloneLanguageTool', portal, hidden=True)
-
-
-def enableZope3Site(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    if not ISite.providedBy(portal):
-        make_objectmanager_site(portal)
-        logger.info('Made the portal a Zope3 site.')
-    try:
-        components = portal.getSiteManager()
-    except ComponentLookupError:
-        next = find_next_sitemanager(portal)
-        if next is None:
-            next = base
-        name = '/'.join(portal.getPhysicalPath())
-        components = PersistentComponents(name, (next,))
-        components.__parent__ = portal
-        portal.setSiteManager(components)
-        logger.info("Site manager '%s' added." % name)
-    else:
-        if components.utilities.LookupClass != FiveVerifyingAdapterLookup:
-            # for CMF 2.1 beta instances
-            components.__parent__ = portal
-            components.utilities.LookupClass = FiveVerifyingAdapterLookup
-            components.utilities._createLookup()
-            components.utilities.__parent__ = components
-            logger.info('LookupClass replaced.')
-    # Make sure to set the new site as the new active one
-    setSite(portal)
-
-
-def migrateOldActions(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    special_providers = ['portal_controlpanel',
-                         'portal_types',
-                         'portal_workflow']
-    # We don't need to operate on the providers that are still valid and
-    # should ignore the control panel as well
-    providers = [obj for obj in portal.objectValues()
-                 if hasattr(obj, '_actions') and
-                 obj.getId() not in special_providers]
-    non_empty_providers = [p for p in providers if len(p._actions) > 0]
-    for provider in non_empty_providers:
-        for action in provider._actions:
-            category = action.category
-            # check if the category already exists, otherwise create it
-            new_category = getattr(
-                aq_base(portal.portal_actions), category, None)
-            if new_category is None:
-                portal.portal_actions._setObject(
-                    category, ActionCategory(id=category))
-                new_category = portal.portal_actions[category]
-
-            # Special handling for Expressions
-            url_expr = ''
-            if action.action:
-                url_expr = action.action.text
-            available_expr = ''
-            if action.condition:
-                available_expr = action.condition.text
-
-            new_action = Action(action.id,
-                                title=action.title,
-                                description=action.description,
-                                url_expr=url_expr,
-                                available_expr=available_expr,
-                                permissions=action.permissions,
-                                visible=action.visible)
-
-            # Only add an action if there isn't one with that name already
-            if getattr(aq_base(new_category), action.id, None) is None:
-                new_category._setObject(action.id, new_action)
-
-        # Remove old actions from upgraded providers
-        provider._actions = ()
-    logger.info('Upgraded old actions to new actions stored in portal_actions.')
-
-
-def _check_ascii(text):
-    try:
-        unicode(text, 'ascii')
-    except UnicodeDecodeError:
-        return False
-    return True
-
-
-def updateActionsI18NDomain(context):
-    actions = getToolByName(context, 'portal_actions')
-    actions = actions.listActions()
-    domainless_actions = [a for a in actions if not a.i18n_domain]
-    for action in domainless_actions:
-        if _check_ascii(action.title) and _check_ascii(action.description):
-            action.i18n_domain = 'plone'
-    if domainless_actions:
-        logger.info('Updated actions i18n domain attribute.')
-
-
-def updateFTII18NDomain(context):
-    types = getToolByName(context, 'portal_types')
-    types = types.listTypeInfo()
-    domainless_types = [fti for fti in types if not fti.i18n_domain]
-    for fti in domainless_types:
-        if _check_ascii(fti.title) and _check_ascii(fti.description):
-            fti.i18n_domain = 'plone'
-    if domainless_types:
-        logger.info('Updated type informations i18n domain attribute.')
-
-
-def addPortletManagers(context):
-    """Add new portlets managers."""
-    loadMigrationProfile(context, 'profile-Products.CMFPlone:plone',
-                         steps=['portlets'])
-
-
-def convertLegacyPortlets(context):
-    """Convert portlets defined in left_slots and right_slots at the portal
-    root to use plone.portlets. Also block portlets in the Members folder.
-
-    Note - there may be other portlets defined elsewhere. These will require
-    manual upgrade from the @@manage-portlets view. This is to avoid a
-    full walk of the portal (i.e. waking up every single object) looking for
-    potential left_slots/right_slots!
-    """
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    convert_legacy_portlets(portal)
-    logger.info('Converted legacy portlets at the portal root')
-    logger.info('NOTE: You may need to convert other portlets manually.')
-    logger.info(' - to do so, click "manage portlets" in the relevant folder.')
-
-    members = getattr(portal, 'Members', None)
-    if members is not None:
-        membersRightSlots = getattr(aq_base(members), 'right_slots', None)
-        if membersRightSlots == []:
-            rightColumn = getUtility(
-                IPortletManager, name=u'plone.rightcolumn', context=portal)
-            portletAssignments = getMultiAdapter(
-                (members, rightColumn,), ILocalPortletAssignmentManager)
-            portletAssignments.setBlacklistStatus(CONTEXT_PORTLETS, True)
-            logger.info(
-                'Blacklisted contextual portlets in the Members folder')
-
-
-def installProduct(product, portal, out=None, hidden=False):
-    """Quickinstalls a product if it is not installed yet."""
-    if out is None:
-        out = []
-    installOrReinstallProduct(portal, product, out, hidden=hidden)
-
-
-registration = (('mimetypes_registry', IMimetypesRegistryTool),
-                ('portal_transforms', IPortalTransformsTool),
-                ('portal_actionicons', IActionIconsTool),
-                ('portal_discussion', IDiscussionTool),
-                ('portal_metadata', IMetadataTool),
-                ('portal_properties', IPropertiesTool),
-                ('portal_syndication', ISyndicationTool),
-                ('portal_undo', IUndoTool),
-                ('MailHost', IMailHost),
-                ('portal_diff', IDiffTool),
-                ('portal_uidannotation', IUniqueIdAnnotationManagement),
-                ('portal_uidgenerator', IUniqueIdGenerator),
-                )
-if HAS_ATCT:
-    registration += (('portal_atct', IATCTTool),)
-
-invalid_regs = (ILanguageTool, IArchivistTool, IPortalModifierTool,
-                IPurgePolicyTool, IRepositoryTool, IStorageTool,
-                IFormControllerTool, IReferenceCatalog, IUIDCatalog,
-                ICalendarTool, IActionsTool, ICatalogTool,
-                IContentTypeRegistry, ISkinsTool, ITypesTool, IURLTool,
-                IConfigurableWorkflowTool, IPloneTool, ICSSRegistry,
-                IJSRegistry, IUniqueIdHandler, IFactoryTool, IMembershipTool,
-                IGroupTool, IGroupDataTool, IMemberDataTool,
-                ICachingPolicyManager, IRegistrationTool, IArchetypeTool,
-                ITranslationServiceTool, IQuickInstallerTool,
-                ISetupTool,
-                )
-
-
-def registerToolsAsUtilities(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    sm = getSiteManager(portal)
-
-    portalregistration = ((portal, ISiteRoot),
-                          (portal, IPloneSiteRoot),)
-
-    for reg in portalregistration:
-        if sm.queryUtility(reg[1]) is None:
-            sm.registerUtility(aq_base(reg[0]), reg[1])
-
-    for reg in registration:
-        if sm.queryUtility(reg[1]) is None:
-            if reg[0] in portal.keys():
-                tool = aq_base(portal[reg[0]])
-                sm.registerUtility(tool, reg[1])
-
-    for reg in invalid_regs:
-        if sm.queryUtility(reg) is not None:
-            sm.unregisterUtility(provided=reg)
-
-    logger.info("Registered tools as utilities.")
-
-
-def addReaderAndEditorRoles(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    if 'Reader' not in portal.valid_roles():
-        portal._addRole('Reader')
-    if 'Editor' not in portal.valid_roles():
-        portal._addRole('Editor')
-    if 'Reader' not in portal.acl_users.portal_role_manager.listRoleIds():
-        portal.acl_users.portal_role_manager.addRole('Reader')
-    if 'Editor' not in portal.acl_users.portal_role_manager.listRoleIds():
-        portal.acl_users.portal_role_manager.addRole('Editor')
-
-    viewRoles = [r['name']
-                 for r in portal.rolesOfPermission('View') if r['selected']]
-    modifyRoles = [r['name'] for r in portal.rolesOfPermission(
-        'Modify portal content') if r['selected']]
-
-    if 'Reader' not in viewRoles:
-        viewRoles.append('Reader')
-        portal.manage_permission('View', viewRoles, True)
-
-    if 'Editor' not in modifyRoles:
-        modifyRoles.append('Editor')
-        portal.manage_permission('Modify portal content', modifyRoles, True)
-
-    logger.info('Added reader and editor roles')
-
-
-def migrateLocalroleForm(context):
-    portal_types = getToolByName(context, 'portal_types', None)
-    if portal_types is not None:
-        for fti in portal_types.objectValues():
-            if not hasattr(fti, '_aliases'):
-                fti._aliases = {}
-
-            aliases = fti.getMethodAliases()
-            new_aliases = aliases.copy()
-            for k, v in aliases.items():
-                if 'folder_localrole_form' in v:
-                    new_aliases[k] = v.replace(
-                        'folder_localrole_form', '@@sharing')
-            fti.setMethodAliases(new_aliases)
-
-            for a in fti.listActions():
-                expr = a.getActionExpression()
-                if 'folder_localrole_form' in expr:
-                    a.setActionExpression(expr.replace(
-                        'folder_localrole_form', '@@sharing'))
-    logger.info(
-        'Ensured references to folder_localrole_form point to @@sharing now')
-
-
-def reorderUserActions(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        user_category = getattr(portal_actions, 'user', None)
-        if user_category is not None:
-            new_actions = ['login', 'join', 'mystuff',
-                           'preferences', 'undo', 'logout']
-            new_actions.reverse()
-            for action in new_actions:
-                if action in user_category.objectIds():
-                    user_category.moveObjectsToTop([action])
-
-
-def updateMemberSecurity(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    pprop = getToolByName(portal, 'portal_properties')
-    portal.manage_permission('Add portal member', roles=[
-                             'Manager', 'Owner'], acquire=0)
-    pprop.site_properties.manage_changeProperties(
-        allowAnonymousViewAbout=False)
-
-    portal.manage_changeProperties(validate_email=True)
-
-    pmembership = getToolByName(portal, 'portal_membership')
-    pmembership.memberareaCreationFlag = 0
-    logger.info("Updated member management security")
-
-
-def updatePASPlugins(context):
-    from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-
-    activatePluginInterfaces(portal, 'mutable_properties')
-    activatePluginInterfaces(portal, 'source_users')
-    activatePluginInterfaces(portal, 'credentials_cookie_auth',
-                             disable=['ICredentialsResetPlugin', 'ICredentialsUpdatePlugin'])
-    if not portal.acl_users.objectIds(['Plone Session Plugin']):
-        from plone.session.plugins.session import manage_addSessionPlugin
-        manage_addSessionPlugin(portal.acl_users, 'session')
-        activatePluginInterfaces(portal, "session")
-        logger.info("Added Plone Session Plugin.")
-
-
-def updateConfigletTitles(portal):
-    """Update titles of some configlets"""
-    controlPanel = getToolByName(portal, 'portal_controlpanel', None)
-    if controlPanel is not None:
-        collection = controlPanel.getActionObject('Plone/portal_atct')
-        language = controlPanel.getActionObject('Plone/PloneLanguageTool')
-        navigation = controlPanel.getActionObject('Plone/NavigationSettings')
-        types = controlPanel.getActionObject('Plone/TypesSettings')
-        users = controlPanel.getActionObject('Plone/UsersGroups')
-        users2 = controlPanel.getActionObject('Plone/UsersGroups2')
-
-        if collection is not None:
-            collection.title = "Collection"
-        if language is not None:
-            language.title = "Language"
-        if navigation is not None:
-            navigation.title = "Navigation"
-        if types is not None:
-            types.title = "Types"
-        if users is not None:
-            users.title = "Users and Groups"
-        if users2 is not None:
-            users2.title = "Users and Groups"
-
-
-def updateKukitJS(context):
-    """Use the unpacked kukit-src.js and pack it ourself.
-    """
-    jsreg = getToolByName(context, 'portal_javascripts', None)
-    old_id = '++resource++kukit.js'
-    new_id = '++resource++kukit-src.js'
-    if jsreg is not None:
-        script_ids = jsreg.getResourceIds()
-        if old_id in script_ids and new_id in script_ids:
-            jsreg.unregisterResource(old_id)
-        elif old_id in script_ids:
-            jsreg.renameResource(old_id, new_id)
-            logger.info("Use %s instead of %s" % (new_id, old_id))
-        resource = jsreg.getResource(new_id)
-        if resource is not None:
-            resource.setCompression('full')
-            logger.info("Set 'full' compression on %s" % new_id)
-
-
-def addCacheForResourceRegistry(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    ram_cache_id = 'ResourceRegistryCache'
-    if not ram_cache_id in portal.objectIds():
-        RAMCacheManager.manage_addRAMCacheManager(portal, ram_cache_id)
-        cache = getattr(portal, ram_cache_id)
-        settings = cache.getSettings()
-        settings['max_age'] = 24 * 3600  # keep for up to 24 hours
-        settings['request_vars'] = ('URL',)
-        cache.manage_editProps(
-            'Cache for saved ResourceRegistry files', settings)
-        logger.info('Created RAMCache %s for ResourceRegistry output' %
-                    ram_cache_id)
-    reg = getToolByName(portal, 'portal_css', None)
-    if reg is not None and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) is not None:
-        reg.ZCacheable_setManagerId(ram_cache_id)
-        reg.ZCacheable_setEnabled(1)
-        logger.info('Associated portal_css with %s' % ram_cache_id)
-    reg = getToolByName(portal, 'portal_javascripts', None)
-    if reg is not None and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) is not None:
-        reg.ZCacheable_setManagerId(ram_cache_id)
-        reg.ZCacheable_setEnabled(1)
-        logger.info('Associated portal_javascripts with %s' % ram_cache_id)
-
-
-def removeTablelessSkin(context):
-    st = getToolByName(context, 'portal_skins')
-    if 'Plone Tableless' in st.getSkinSelections():
-        st.manage_skinLayers(['Plone Tableless'], del_skin=True)
-        logger.info("Removed the Plone Tableless skin")
-    if st.default_skin == 'Plone Tableless':
-        st.default_skin = 'Plone Default'
-        logger.info("Changed the default skin to 'Plone Default'")
-
-
-def addObjectProvidesIndex(context):
-    """Add the object_provides index to the portal_catalog.
-    """
-    catalog = getToolByName(context, 'portal_catalog')
-    if 'object_provides' not in catalog.indexes():
-        catalog.addIndex('object_provides', 'KeywordIndex')
-        logger.info("Added object_provides index to portal_catalog")
-
-
-def removeMyStuffAction(context):
-    """The mystuff action is now covered by the dashboard"""
-    actions = getToolByName(context, 'portal_actions')
-    if getattr(actions, 'user', None) is None:
-        return
-    category = actions.user
-    if 'mystuff' in category.objectIds():
-        category.manage_delObjects(ids=['mystuff'])
-        logger.info("Removed the mystuff user action")
-
-
-def addMissingWorkflows(context):
-    """Add new Plone 3.0 workflows
-    """
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    wft = getToolByName(portal, 'portal_workflow', None)
-    if wft is None:
-        return
-
-    new_workflow_ids = ['intranet_workflow', 'intranet_folder_workflow',
-                        'one_state_workflow', 'simple_publication_workflow']
-    encoding = 'utf-8'
-    path_prefix = os.path.join(package_home(cmfplone_globals), 'profiles',
-                               'default', 'workflows')
-
-    for wf_id in new_workflow_ids:
-        if wf_id in wft.objectIds():
-            logger.info("Workflow %s already installed; doing nothing" % wf_id)
-            continue
-
-        path = os.path.join(path_prefix, wf_id, 'definition.xml')
-        body = open(path, 'r').read()
-
-        wft._setObject(wf_id, DCWorkflowDefinition(wf_id))
-        wf = wft[wf_id]
-        wfdc = WorkflowDefinitionConfigurator(wf)
-
-        (workflow_id, title, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, description, manager_bypass, creation_guard
-         ) = wfdc.parseWorkflowXML(body, encoding)
-
-        _initDCWorkflow(wf, title, description, manager_bypass, creation_guard, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, portal     # not sure what to pass here
-                        # the site or the wft?
-                        # (does it matter at all?)
-                        )
-        logger.info("Added workflow %s" % wf_id)
-
-
-def restorePloneTool(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    tool = getToolByName(portal, "plone_utils")
-    if tool.meta_type == 'PlonePAS Utilities Tool':
-        from Products.CMFPlone.PloneTool import PloneTool
-
-        # PloneSite has its own security check for manage_delObjects which
-        # breaks in the test runner. So we bypass this check.
-        super(portal.__class__, portal).manage_delObjects(['plone_utils'])
-        portal._setObject(PloneTool.id, PloneTool())
-        logger.info("Replaced obsolete PlonePAS version of plone tool "
-                    "with the normal one.")
-
-
-def updateImportStepsFromBaseProfile(context):
-    """Updates the available import steps for existing sites."""
-    context.setBaselineContext("profile-%s" % _DEFAULT_PROFILE)
diff --git a/plone/app/upgrade/v30/betas.py b/plone/app/upgrade/v30/betas.py
deleted file mode 100644
index 48f7077..0000000
--- a/plone/app/upgrade/v30/betas.py
+++ /dev/null
@@ -1,241 +0,0 @@
-from StringIO import StringIO
-
-from zope.component import queryUtility
-
-from Products.CMFActionIcons.interfaces import IActionIconsTool
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.interfaces import IActionProvider
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def beta1_beta2(context):
-    """ 3.0-beta1 -> 3.0-beta2
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0b1-3.0b2')
-
-
-def beta2_beta3(context):
-    """ 3.0-beta2 -> 3.0-beta3
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0b2-3.0b3')
-
-
-def beta3_rc1(context):
-    """ 3.0-beta3 -> 3.0-rc1
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0b3-3.0b4')
-
-
-def migrateHistoryTab(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        objects = getattr(portal_actions, 'object', None)
-        if objects is not None:
-            if 'rss' in objects.objectIds():
-                objects.manage_renameObjects(['rss'], ['history'])
-                logger.info('Upgraded history action.')
-
-
-def changeOrderOfActionProviders(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        portal_actions.deleteActionProvider('portal_actions')
-        portal_actions.addActionProvider('portal_actions')
-        logger.info('Changed the order of action providers.')
-
-
-def cleanupOldActions(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        # Remove some known unused actions from the object_tabs category and
-        # remove the category completely if no actions are left
-        object_tabs = getattr(portal_actions, 'object_tabs', None)
-        if object_tabs is not None:
-            if 'contentrules' in object_tabs.objectIds():
-                object_tabs._delObject('contentrules')
-            if 'change_ownership' in object_tabs.objectIds():
-                object_tabs._delObject('change_ownership')
-            if len(object_tabs.objectIds()) == 0:
-                del object_tabs
-                portal_actions._delObject('object_tabs')
-                logger.info('Removed object_tabs action category.')
-        object_ = getattr(portal_actions, 'object', None)
-        if object_ is not None:
-            if 'reply' in object_.objectIds():
-                object_._delObject('reply')
-        user = getattr(portal_actions, 'user', None)
-        if user is not None:
-            if 'logged_in' in user.objectIds():
-                user._delObject('logged_in')
-            if 'myworkspace' in user.objectIds():
-                user._delObject('myworkspace')
-        global_ = getattr(portal_actions, 'global', None)
-        if global_ is not None:
-            if 'manage_members' in global_.objectIds():
-                global_._delObject('manage_members')
-            if 'configPortal' in global_.objectIds():
-                global_._delObject('configPortal')
-            if len(global_.objectIds()) == 0:
-                del global_
-                portal_actions._delObject('global')
-                logger.info('Removed global action category.')
-
-
-def cleanDefaultCharset(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    charset = portal.getProperty('default_charset', None)
-    if charset is not None:
-        if not charset.strip():
-            portal.manage_delProperties(['default_charset'])
-            logger.info('Removed empty default_charset portal property')
-
-
-def addAutoGroupToPAS(context):
-    from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    sout = StringIO()
-
-    if not portal.acl_users.objectIds(['Automatic Group Plugin']):
-        from Products.PlonePAS.plugins.autogroup import manage_addAutoGroup
-        manage_addAutoGroup(portal.acl_users, 'auto_group',
-                            'Automatic Group Provider',
-                            'AuthenticatedUsers', "Logged-in users (Virtual Group)")
-        activatePluginInterfaces(portal, "auto_group", sout)
-        logger.info("Added automatic group PAS plugin")
-
-
-def removeS5Actions(context):
-    portalTypes = getToolByName(context, 'portal_types', None)
-    if portalTypes is not None:
-        document = portalTypes.restrictedTraverse('Document', None)
-        if document:
-            ids = [x.getId() for x in document.listActions()]
-            if 's5_presentation' in ids:
-                index = ids.index('s5_presentation')
-                document.deleteActions([index])
-                logger.info(
-                    "Removed 's5_presentation' action from actions tool.")
-
-    iconsTool = queryUtility(IActionIconsTool)
-    if iconsTool is not None:
-        ids = [x._action_id for x in iconsTool.listActionIcons()]
-        if 's5_presentation' in ids:
-            iconsTool.removeActionIcon('plone', 's5_presentation')
-            logger.info(
-                "Removed 's5_presentation' icon from actionicons tool.")
-
-
-def addContributorToCreationPermissions(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    if 'Contributor' not in portal.valid_roles():
-        portal._addRole('Contributor')
-    if 'Contributor' not in portal.acl_users.portal_role_manager.listRoleIds():
-        portal.acl_users.portal_role_manager.addRole('Contributor')
-
-    for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-              'ATContentTypes: Add Event',
-              'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-              'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-              'ATContentTypes: Add News Item', ]:
-        roles = [r['name']
-                 for r in portal.rolesOfPermission(p) if r['selected']]
-        if 'Contributor' not in roles:
-            roles.append('Contributor')
-            portal.manage_permission(p, roles, bool(
-                portal.acquiredRolesAreUsedBy(p)))
-
-
-def removeSharingAction(context):
-    portal_types = getToolByName(context, 'portal_types', None)
-    if portal_types is not None:
-        for fti in portal_types.objectValues():
-            action_ids = [a.id for a in fti.listActions()]
-            if 'local_roles' in action_ids:
-                fti.deleteActions([action_ids.index('local_roles')])
-
-        logger.info('Removed explicit references to sharing action')
-
-
-def addEditorToSecondaryEditorPermissions(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    for p in ['Manage properties', 'Modify view template', 'Request review']:
-        roles = [r['name']
-                 for r in portal.rolesOfPermission(p) if r['selected']]
-        if 'Editor' not in roles:
-            roles.append('Editor')
-            portal.manage_permission(p, roles, bool(
-                portal.acquiredRolesAreUsedBy(p)))
-
-
-def updateEditActionConditionForLocking(context):
-    """
-    Condition on edit views for Document, Event, File, Folder, Image,
-    Link, Topic has been added to not display the Edit
-    tab if an item is locked
-    """
-    portal_types = getToolByName(context, 'portal_types', None)
-    lockable_types = ['Document', 'Event', 'File', 'Folder',
-                      'Image', 'Link', 'News Item', 'Topic']
-    if portal_types is not None:
-        for contentType in lockable_types:
-            fti = portal_types.getTypeInfo(contentType)
-            if fti:
-                for action in fti.listActions():
-                    if action.getId() == 'edit' and not action.condition:
-                        action.condition = Expression(
-                            "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
-
-
-def addOnFormUnloadJS(context):
-    """
-    add the form unload JS to the js registry
-    """
-    jsreg = getToolByName(context, 'portal_javascripts', None)
-    script = 'unlockOnFormUnload.js'
-    if jsreg is not None:
-        script_ids = jsreg.getResourceIds()
-        # Failsafe: first make sure the stylesheet doesn't exist in the list
-        if script not in script_ids:
-            jsreg.registerScript(script,
-                                 enabled=True,
-                                 cookable=True)
-            # put it at the bottom of the stack
-            jsreg.moveResourceToBottom(script)
-            logger.info("Added " + script + " to portal_javascripts")
-
-
-def updateTopicTitle(context):
-    """Update the title of the topic type."""
-    tt = getToolByName(context, 'portal_types', None)
-    if tt is not None:
-        topic = tt.get('Topic')
-        if topic is not None:
-            topic.title = 'Collection'
-
-
-def cleanupActionProviders(context):
-    """Remove no longer existing action proiders."""
-    at = getToolByName(context, "portal_actions")
-    for provider in at.listActionProviders():
-        candidate = getToolByName(context, provider, None)
-        if candidate is None or not IActionProvider.providedBy(candidate):
-            at.deleteActionProvider(provider)
-            logger.info("%s is no longer an action provider" % provider)
-
-
-def hidePropertiesAction(context):
-    tt = getToolByName(context, 'portal_types', None)
-    if not IActionProvider.providedBy(tt):
-        return
-    for ti in tt.listTypeInfo():
-        actions = ti.listActions()
-        index = [i for i in range(len(actions))
-                 if actions[i].category == "object" and
-                 actions[i].id == "metadata"]
-        if index:
-            ti.deleteActions(index)
-            logger.info("Removed properties action from type %s" % ti.id)
diff --git a/plone/app/upgrade/v30/configure.zcml b/plone/app/upgrade/v30/configure.zcml
deleted file mode 100644
index 59e1c98..0000000
--- a/plone/app/upgrade/v30/configure.zcml
+++ /dev/null
@@ -1,343 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <!-- General -->
-
-    <genericsetup:upgradeSteps
-        source="*"
-        destination="3.0.5"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Make the portal a Zope3 site"
-            handler=".alphas.enableZope3Site"
-            />
-
-        <genericsetup:upgradeStep
-            title="Register some tools as utilities"
-            handler=".alphas.registerToolsAsUtilities"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <!-- Plone 2.5 -->
-
-    <genericsetup:upgradeSteps
-        source="2.5.5"
-        destination="3.0.a1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Updates the available GS import steps"
-            handler=".alphas.updateImportStepsFromBaseProfile"
-            />
-
-        <genericsetup:upgradeStep
-            title="Upgrade all existing actions to new-style actions"
-            handler=".alphas.migrateOldActions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add an i18n_domain to actions"
-            handler=".alphas.updateActionsI18NDomain"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add an i18n_domain to type information"
-            handler=".alphas.updateFTII18NDomain"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".alphas.three0_alpha1"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove tableless skin"
-            handler=".alphas.removeTablelessSkin"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add portlet managers"
-            handler=".alphas.addPortletManagers"
-            />
-
-        <genericsetup:upgradeStep
-            title="Upgrade legacy portlets"
-            handler=".alphas.convertLegacyPortlets"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <!-- Plone 3.0 -->
-
-    <genericsetup:upgradeSteps
-        source="3.0.a1"
-        destination="3.0.a2"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".alphas.alpha1_alpha2"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add reader and editor roles"
-            handler=".alphas.addReaderAndEditorRoles"
-            />
-
-        <genericsetup:upgradeStep
-            title="Change folder_localrole_form to @@sharing"
-            handler=".alphas.migrateLocalroleForm"
-            />
-
-        <genericsetup:upgradeStep
-            title="Reorder the user actions"
-            handler=".alphas.reorderUserActions"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.a2"
-        destination="3.0.b1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Remove empty default_charset from portal"
-            handler=".betas.cleanDefaultCharset"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".alphas.alpha2_beta1"
-            />
-
-        <genericsetup:upgradeStep
-            title="Use the unpacked kukit-src.js and pack it ourself"
-            handler=".alphas.updateKukitJS"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove the mystuff user action"
-            handler=".alphas.removeMyStuffAction"
-            />
-
-        <genericsetup:upgradeStep
-            title="Modify security settings to match new default policies"
-            handler=".alphas.updateMemberSecurity"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add new Plone Session Plugin"
-            handler=".alphas.updatePASPlugins"
-            />
-
-        <genericsetup:upgradeStep
-            title="Update configlet titles"
-            handler=".alphas.updateConfigletTitles"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add a RAMCache for ResourceRegistries"
-            handler=".alphas.addCacheForResourceRegistry"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add the object_provides catalog index"
-            handler=".alphas.addObjectProvidesIndex"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add additional example workflows"
-            handler=".alphas.addMissingWorkflows"
-            />
-
-        <genericsetup:upgradeStep
-            title="Replace obsolete PlonePAS version of plone tool"
-            handler=".alphas.restorePloneTool"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.b1"
-        destination="3.0.b2"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Upgrade history action"
-            handler=".betas.migrateHistoryTab"
-            />
-
-        <genericsetup:upgradeStep
-            title="Change the order of action providers"
-            handler=".betas.changeOrderOfActionProviders"
-            />
-
-        <genericsetup:upgradeStep
-            title="Update edit action with locking condition"
-            handler=".betas.updateEditActionConditionForLocking"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add form unload JS to the JSregistry"
-            handler=".betas.addOnFormUnloadJS"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove old no longer used actions"
-            handler=".betas.cleanupOldActions"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".betas.beta1_beta2"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add automatic group PAS plugin"
-            handler=".betas.addAutoGroupToPAS"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove s5_presentation action"
-            handler=".betas.removeS5Actions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Allow contributer role to add content"
-            handler=".betas.addContributorToCreationPermissions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove no longer existing action providers"
-            handler=".betas.cleanupActionProviders"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove properties tab from types"
-            handler=".betas.hidePropertiesAction"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.b2"
-        destination="3.0.b3"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".betas.beta2_beta3"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove sharing action from types"
-            handler=".betas.removeSharingAction"
-            />
-
-        <genericsetup:upgradeStep
-            title="Grant editor role secondary edit permissions"
-            handler=".betas.addEditorToSecondaryEditorPermissions"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.b3"
-        destination="3.0.rc1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".betas.beta3_rc1"
-            />
-
-        <genericsetup:upgradeStep
-            title="Change the title of topics to collection"
-            handler=".betas.updateTopicTitle"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeStep
-        source="3.0.rc1"
-        destination="3.0.rc2"
-        title="Add intelligenttext mime type and transforms"
-        profile="Products.CMFPlone:plone"
-        handler=".rcs.addIntelligentText"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.rc2"
-        destination="3.0"
-        title="General required upgrade steps"
-        profile="Products.CMFPlone:plone"
-        handler=".rcs.rc2_final"
-        />
-
-    <!-- Plone 3.0.x -->
-
-    <genericsetup:upgradeStep
-        source="3.0"
-        destination="3.0.1"
-        title="General required upgrade steps"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three0x.final_three01"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.1"
-        destination="3.0.2"
-        title="General required upgrade steps"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three0x.three01_three02"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.2"
-        destination="3.0.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeSteps
-        source="3.0.3"
-        destination="3.0.4"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".final_three0x.three03_three04"
-            />
-
-        <genericsetup:upgradeStep
-            title="Added new CMFEditions modifiers"
-            handler=".final_three0x.installNewModifiers"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeStep
-        source="3.0.4"
-        destination="3.0.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.5"
-        destination="3.0.6"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v30/data/test-base.zexp b/plone/app/upgrade/v30/data/test-base.zexp
deleted file mode 100644
index f22699e..0000000
Binary files a/plone/app/upgrade/v30/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v30/data/test-full.zexp b/plone/app/upgrade/v30/data/test-full.zexp
deleted file mode 100644
index 13d7183..0000000
Binary files a/plone/app/upgrade/v30/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v30/final_three0x.py b/plone/app/upgrade/v30/final_three0x.py
deleted file mode 100644
index 62ea2fd..0000000
--- a/plone/app/upgrade/v30/final_three0x.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-from Products.CMFEditions.StandardModifiers import install
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def final_three01(context):
-    loadMigrationProfile(
-        context, 'profile-plone.app.upgrade.v30:3.0final-3.0.1')
-
-
-def three01_three02(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0.1-3.0.2')
-
-
-def three03_three04(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0.3-3.0.4')
-
-
-def installNewModifiers(context):
-    modifiers = getToolByName(context, 'portal_modifier', None)
-    if modifiers is not None:
-        install(modifiers)
-        logger.info('Added new CMFEditions modifiers.')
diff --git a/plone/app/upgrade/v30/profiles.zcml b/plone/app/upgrade/v30/profiles.zcml
deleted file mode 100644
index 7a2937e..0000000
--- a/plone/app/upgrade/v30/profiles.zcml
+++ /dev/null
@@ -1,105 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <genericsetup:registerProfile
-        name="2.5.x-3.0a1"
-        title="Upgrade profile for Plone 2.5.x to Plone 3.0-alpha1"
-        description="This profile contains configuration changes that are applied during the Plone 2.5.x to Plone 3.0-alpha1 upgrade."
-        directory="profiles/two5x_alpha1"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0a1-3.0a2"
-        title="Upgrade profile for Plone 3.0-alpha1 to Plone 3.0-alpha2"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-alpha1 to 3.0-alpha2 upgrade."
-        directory="profiles/alpha1_alpha2"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0a2-3.0b1"
-        title="Upgrade profile for Plone 3.0-alpha2 to Plone 3.0-beta1"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-alpha2 to 3.0-beta1 upgrade."
-        directory="profiles/alpha2_beta1"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0b1-3.0b2"
-        title="Upgrade profile for Plone 3.0-beta1 to Plone 3.0-beta2"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-beta1 to 3.0-beta2 upgrade."
-        directory="profiles/beta1_beta2"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0b2-3.0b3"
-        title="Upgrade profile for Plone 3.0-beta2 to Plone 3.0-beta3"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-beta2 to 3.0-beta3 upgrade."
-        directory="profiles/beta2_beta3"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0b3-3.0b4"
-        title="Upgrade profile for Plone 3.0-beta3 to Plone 3.0-beta4"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-beta3 to 3.0-beta4 upgrade."
-        directory="profiles/beta3_beta4"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0rc2-3.0final"
-        title="Upgrade profile for Plone 3.0-rc2 to Plone 3.0-final"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-rc2 to 3.0-final upgrade."
-        directory="profiles/rc2_final"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0rc2-3.0final-iterate"
-        title="Upgrade profile for Plone 3.0-rc2 to Plone 3.0-final with iterate step."
-        description="This profile contains configuration changes that are applied during the Plone 3.0-rc2 to 3.0-final upgrade when iterate is installed."
-        directory="profiles/rc2_final_iterate"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0final-3.0.1"
-        title="Upgrade profile for Plone 3.0-final to Plone 3.0.1"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-final to 3.0.1 upgrade."
-        directory="profiles/final_three01"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0.1-3.0.2"
-        title="Upgrade profile for Plone 3.0.1 to Plone 3.0.2"
-        description="This profile contains configuration changes that are applied during the Plone 3.0.1 to 3.0.2 upgrade."
-        directory="profiles/three01_three02"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0.3-3.0.4"
-        title="Upgrade profile for Plone 3.0.3 to Plone 3.0.4"
-        description="This profile contains configuration changes that are applied during the Plone 3.0.3 to 3.0.4 upgrade."
-        directory="profiles/three03_three04"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml b/plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml
deleted file mode 100644
index 0674a27..0000000
--- a/plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-     interface="plone.app.redirector.interfaces.IRedirectionStorage"
-     factory="plone.app.redirector.storage.RedirectionStorage"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml b/plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml
deleted file mode 100644
index f27f1b0..0000000
--- a/plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
-  <configlet title="Search" action_id="SearchSettings" appId="Plone"
-    category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@search-controlpanel"
-    icon_expr="string:${portal_url}/search_icon.png"
-    visible="True" i18n:attributes="title">
-    <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Mail" action_id="MailHost" appId="MailHost"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@mail-controlpanel"
-     icon_expr="string:${portal_url}/mail_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml b/plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml
deleted file mode 100644
index 3438a54..0000000
--- a/plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet id="generated.css" remove="True"/>
- <stylesheet id="RTL.css" update="True"
-    expression="python:portal.restrictedTraverse('@@plone_portal_state').is_rtl()" />
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml
deleted file mode 100644
index e626c54..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-     interface="plone.contentrules.engine.interfaces.IRuleStorage"
-     factory="plone.contentrules.engine.storage.RuleStorage"/>
-  <utility
-     interface="plone.app.i18n.locales.interfaces.ICountries"
-     factory="plone.app.i18n.locales.countries.Countries"/>
-  <utility
-     interface="plone.app.i18n.locales.interfaces.IContentLanguages"
-     factory="plone.app.i18n.locales.languages.ContentLanguages"/>
-  <utility
-     interface="plone.app.i18n.locales.interfaces.IMetadataLanguages"
-     factory="plone.app.i18n.locales.languages.MetadataLanguages"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml
deleted file mode 100644
index a18e907..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
-  <configlet title="Maintenance" action_id="Maintenance"
-     appId="Plone" category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@maintenance-controlpanel"
-     icon_expr="string:${portal_url}/maintenance_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Themes" action_id="PortalSkin" appId="PortalSkin"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@skins-controlpanel"
-     icon_expr="string:${portal_url}/skins_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Site" action_id="PloneReconfig" appId="Plone"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@site-controlpanel"
-     icon_expr="string:${portal_url}/logoIcon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="HTML Filtering" action_id="HtmlFilter" appId="HtmlFilter"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@filter-controlpanel"
-     icon_expr="string:${portal_url}/htmlfilter_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Security" action_id="SecuritySettings"
-     appId="SecuritySettings" category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@security-controlpanel"
-     icon_expr="string:${portal_url}/lock_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Content Rules" action_id="ContentRules" appId="Plone"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@rules-controlpanel"
-     icon_expr="string:${portal_url}/contentrules_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Content rules: Manage rules</permission>
-  </configlet>
-  <configlet title="Types" action_id="TypesSettings"
-     appId="TypesSettings" category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@types-controlpanel"
-     icon_expr="string:${portal_url}/document_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml
deleted file mode 100644
index 1385165..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
- <javascript id="folder_contents_hideAddItems.js" remove="True"/>
- <javascript cacheable="True" compression="safe" cookable="True"
-   enabled="True" expression="" id="form_tabbing.js" inline="False"
-   insert-after="collapsiblesections.js"/>
- <javascript cacheable="True" compression="safe" cookable="True"
-   enabled="True" expression="" id="input-label.js" inline="False"
-   insert-after="form_tabbing.js"/>
- <javascript cacheable="True" compression="safe" cookable="True"
-   enabled="True" expression="" id="toc.js" inline="False"
-   insert-after="styleswitcher.js"/>
- <javascript cacheable="True" compression="none" cookable="True"
-   enabled="True" expression="" id="webstats.js" inline="False"
-   insert-after="toc.js"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml
deleted file mode 100644
index cd7f73a..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<site>
- <property name="email_charset" type="string">utf-8</property>
-</site>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml
deleted file mode 100644
index 110cced..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="enable_link_integrity_checks" type="boolean">True</property>
-  <property name="enable_sitemap" type="boolean">False</property>
-  <property name="external_links_open_new_window" type="string">False</property>
-  <property name="many_groups" type="boolean">False</property>
-  <property name="number_of_days_to_keep" type="int">7</property>
-  <property name="webstats_js" type="string"></property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml
deleted file mode 100644
index 6f63786..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="user" meta_type="CMF Action Category">
-  <object name="join" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Register</property>
-  </object>
-  <object name="undo" meta_type="CMF Action" i18n:domain="plone">
-   <property name="visible">False</property>
-  </object>
- </object>
- <object name="document_actions" meta_type="CMF Action Category">
-  <object name="rss" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">RSS feed</property>
-  </object>
-  <object name="sendto" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Send this</property>
-  </object>
-  <object name="print" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Print this</property>
-  </object>
-  <object name="full_screen" meta_type="CMF Action" i18n:domain="plone">
-   <property name="visible">False</property>
-  </object>
- </object>
- <object name="object" meta_type="CMF Action Category">
-  <object name="contentrules" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Rules</property>
-   <property name="description" i18n:translate=""></property>
-   <property
-      name="url_expr">string:${plone_context_state/canonical_object_url}/@@manage-content-rules</property>
-   <property name="icon_expr"></property>
-   <property
-      name="available_expr">python:plone_context_state.canonical_object().restrictedTraverse('@@plone_contentrules_info').show_rules_tab()</property>
-   <property name="permissions">
-    <element value="Content rules: Manage rules"/>
-   </property>
-   <property name="visible">True</property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml
deleted file mode 100644
index 0f41af0..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_catalog" meta_type="Plone Catalog Tool">
- <index name="UID" meta_type="FieldIndex">
-  <indexed_attr value="UID"/>
- </index>
- <column value="UID"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml
deleted file mode 100644
index 0cb28a7..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <utilities>
-  <utility factory="Products.CMFPlone.PloneTool.PloneTool"
-     interface="Products.CMFPlone.interfaces.basetool.IPloneTool"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml
deleted file mode 100644
index 2dc84c0..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="controlpanel.css" media="screen"
-    rel="stylesheet" rendering="import" insert-after="portlets.css"/>
- <stylesheet id="toc.css" remove=""/>
- <stylesheet id="navtree.css" insert-after="deprecated.css"/>
- <stylesheet id="invisibles.css" insert-after="navtree.css"/>
- <stylesheet id="forms.css" insert-after="invisibles.css"/>
- <stylesheet id="presentation.css" remove=""/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml
deleted file mode 100644
index a138995..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0"?>
-<export-steps>
- <export-step id="archetypetool"
-              handler="Products.Archetypes.exportimport.archetypetool.exportArchetypeTool"
-              title="Archetype Tool">
-
-    Export Archetype type specific configuration.
-
- </export-step>
-</export-steps>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml
deleted file mode 100644
index a10c74b..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml
+++ /dev/null
@@ -1,57 +0,0 @@
-<?xml version="1.0"?>
-<import-steps>
- <import-step id="archetypes-various" version="20070318-01"
-              handler="Products.Archetypes.setuphandlers.setupArchetypes"
-              title="Archetypes setup">
-  <dependency step="componentregistry"/>
-
-
-     Archetypes installation step.
-
- </import-step>
- <import-step id="archetypetool" version="20070318-01"
-              handler="Products.Archetypes.exportimport.archetypetool.importArchetypeTool"
-              title="Archetype Tool">
-  <dependency step="archetypes-various"/>
-
-
-    Import Archetype type specific configuration.
-
- </import-step>
- <import-step id="mimetypes-registry-various"
-              version="20070309-01"
-              handler="Products.MimetypesRegistry.setuphandlers.setupMimetypesRegistry"
-              title="MimetypesRegistry setup">
-  <dependency step="componentregistry"/>
-
-
-    MimetypesRegistry installation step.
-
- </import-step>
- <import-step id="plonepas" version="20061230-01"
-              handler="Products.PlonePAS.setuphandlers.setupPlonePAS"
-              title="PlonePAS setup">
-  <dependency step="componentregistry"/>
-  <dependency step="memberdata-properties"/>
-  <dependency step="rolemap"/>
-
-
-
-
-
-
-    PlonePAS installation step.
-
- </import-step>
- <import-step id="portal-transforms-various"
-              version="20070309-01"
-              handler="Products.PortalTransforms.setuphandlers.setupPortalTransforms"
-              title="PortalTransforms setup">
-  <dependency step="componentregistry"/>
-
-
-    PortalTransforms installation step.
-
- </import-step>
-</import-steps>
-
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml
deleted file mode 100644
index 26391e2..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0"?>
-<atcttool>
- <topic_indexes>
-  <index name="object_provides" description="" enabled="False"
-     friendlyName="">
-   <criteria>ATCurrentAuthorCriterion</criteria>
-   <criteria>ATListCriterion</criteria>
-   <criteria>ATReferenceCriterion</criteria>
-   <criteria>ATSelectionCriterion</criteria>
-   <criteria>ATSimpleIntCriterion</criteria>
-   <criteria>ATSimpleStringCriterion</criteria>
-  </index>
-   <index name="Subject" description="The keywords used to describe an item"
-     enabled="True" friendlyName="Categories">
-  </index>
-  <index name="UID" description="" enabled="False" friendlyName="">
-   <criteria>ATBooleanCriterion</criteria>
-   <criteria>ATCurrentAuthorCriterion</criteria>
-   <criteria>ATDateRangeCriterion</criteria>
-   <criteria>ATFriendlyDateCriteria</criteria>
-   <criteria>ATListCriterion</criteria>
-   <criteria>ATPortalTypeCriterion</criteria>
-   <criteria>ATReferenceCriterion</criteria>
-   <criteria>ATSelectionCriterion</criteria>
-   <criteria>ATSimpleIntCriterion</criteria>
-   <criteria>ATSimpleStringCriterion</criteria>
-  </index>
- </topic_indexes>
- <topic_metadata>
-  <metadata name="effective"
-     description="The time and date an item becomes publicly available (non-ISO)"
-     />
-  <metadata name="ExpirationDate"
-     description="The time and date an item is no longer publicly available"
-     />
-  <metadata name="modified"
-     description="The time and date an item was last modified (non-ISO)"
-     />
-  <metadata name="Subject"
-    friendlyName="Categories"
-    />
-  <metadata name="UID" description="" enabled="False" friendlyName=""/>
-  <metadata name="effective"
-     description="The time and date an item becomes publicly available (non-ISO)"
-     />
-  <metadata name="ExpirationDate"
-     description="The time and date an item is no longer publicly available"
-     />
-  <metadata name="modified"
-     description="The time and date an item was last modified (non-ISO)"
-     />
-  <metadata name="Subject"
-    friendlyName="Categories"
-    />
-  <metadata name="expires"
-    description="The time and date an item is no longer publicly available (non-ISO)"
-    />
-
-  <metadata name="UID" description="" enabled="False" friendlyName=""/>
- </topic_metadata>
-</atcttool>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml
deleted file mode 100644
index d29f73d..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="navtree_properties" meta_type="Plone Property Sheet">
-  <property name="metaTypesNotToList" type="lines" purge="False">
-   <element value="ChangeSet"/>
-   <element value="ATRelativePathCriterion"/>
-  </property>
- </object>
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="localTimeFormat" type="string">%b %d, %Y</property>
-  <property name="localLongTimeFormat"
-     type="string">%b %d, %Y %I:%M %p</property>
-  <property name="calendar_starting_year" type="int">2001</property>
-  <property name="types_not_searched" type="lines" purge="False">
-   <element value="ChangeSet"/>
-    <element value="ATRelativePathCriterion"/>
-  </property>
-  <property name="number_of_days_to_keep" type="int">7</property>
-  <property name="enable_link_integrity_checks" type="boolean">True</property>
-  <property name="icon_visibility" type="string">enabled</property>
-  <property name="forbidden_contenttypes" type="lines" purge="False">
-   <element value="text/restructured"/>
-   <element value="text/plain"/>
-  </property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml
deleted file mode 100644
index e5960e9..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="CMFEditions: Access previous versions"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-      <role name="Contributor" />
-    </permission>
-    <permission name="CMFEditions: Apply version control"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-      <role name="Contributor" />
-    </permission>
-    <permission name="CMFEditions: Checkout to location"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-    </permission>
-    <permission name="CMFEditions: Revert to previous versions"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-    </permission>
-    <permission name="CMFEditions: Save new version"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-      <role name="Contributor" />
-    </permission>
-  </permissions>
-</rolemap>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml
deleted file mode 100644
index 07f9046..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_workflow" meta_type="Plone Workflow Tool">
- <bindings>
-  <type type_id="ATRelativePathCriterion"/>
- </bindings>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml
deleted file mode 100644
index 900ce49..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="object" meta_type="CMF Action Category">
-
-  <object name="local_roles" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Sharing</property>
-   <property name="description" i18n:translate=""></property>
-   <property name="url_expr">string:${object_url}/@@sharing</property>
-   <property name="icon_expr"></property>
-   <property name="available_expr"></property>
-   <property name="permissions">
-    <element value="Change local roles"/>
-   </property>
-   <property name="visible">True</property>
-  </object>
-
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml
deleted file mode 100644
index 4ec722d..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <utilities>
-  <utility
-     interface="plone.app.viewletmanager.interfaces.IViewletSettingsStorage"
-     factory="plone.app.viewletmanager.storage.ViewletSettingsStorage"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml
deleted file mode 100644
index 79d5702..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<export-steps>
- <export-step id="viewlets"
-              handler="plone.app.viewletmanager.exportimport.storage.exportViewletSettingsStorage"
-              title="Viewlet Settings">
-  Export viewlet settings
- </export-step>
-</export-steps>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml
deleted file mode 100644
index 5f82f7a..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<import-steps>
- <import-step id="viewlets" version="20070503-01"
-              handler="plone.app.viewletmanager.exportimport.storage.importViewletSettingsStorage"
-              title="Viewlet Settings">
-  <dependency step="componentregistry"/>
-    Import viewlet settings
- </import-step>
-</import-steps>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml
deleted file mode 100644
index d011c4a..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<?xml version="1.0"?>
-<object>
-  <order manager="plone.portaltop" skinname="Plone Default">
-    <viewlet name="plone.header" />
-    <viewlet name="plone.personal_bar" />
-    <viewlet name="plone.app.i18n.locales.languageselector" />
-    <viewlet name="plone.path_bar" />
-  </order>
-  <order manager="plone.portalheader" skinname="Plone Default">
-    <viewlet name="plone.skip_links" />
-    <viewlet name="plone.site_actions" />
-    <viewlet name="plone.searchbox" />
-    <viewlet name="plone.logo" />
-    <viewlet name="plone.global_sections" />
-  </order>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml
deleted file mode 100644
index c04f721..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="object" meta_type="CMF Action Category">
-
-  <object name="contentrules" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Rules</property>
-   <property name="description" i18n:translate=""></property>
-   <property
-      name="url_expr">string:${plone_context_state/canonical_object_url}/@@manage-content-rules</property>
-   <property name="icon_expr"></property>
-   <property
-      name="available_expr">python:plone_context_state.canonical_object().restrictedTraverse('@@plone_contentrules_info').show_rules_tab()</property>
-   <property name="permissions">
-    <element value="Content rules: Manage rules"/>
-   </property>
-   <property name="visible">True</property>
-  </object>
-
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt b/plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt
deleted file mode 100644
index 21f7128..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt
+++ /dev/null
@@ -1 +0,0 @@
-# re-run the cmfeditions import
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml
deleted file mode 100644
index 9b7554c..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet id="mobile.css" enabled="0" />
- <!-- These are now implemented using JS -->
- <stylesheet id="textLarge.css" remove="True" />
- <stylesheet id="textSmall.css" remove="True" />
-
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml
deleted file mode 100644
index 4f229fa..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml
+++ /dev/null
@@ -1,52 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript id="kupuspellchecker.js" remove="True"/>
-  <javascript id="plone_menu.js" remove="True"/>
-  <javascript id="plone_javascripts.js" remove="True"/>
-  <javascript cacheable="True" compression="safe" cookable="True"
-              enabled="True" expression="not:here/@@plone_portal_state/anonymous"
-              id="++resource++kukit-src.js" inline="False"/>
-
-  <!-- Sarissa should be almost at the top, because it's a dependency for
-       many other scripts -->
-  <javascript id="sarissa.js" insert-after="toc.js" />
-  <!-- Move these, so they won't break up the rendering -->
-  <javascript id="toc.js" insert-after="styleswitcher.js" />
-  <javascript id="webstats.js" insert-after="toc.js" />
-
-  <!-- new file -->
-  <javascript cacheable="True" compression="safe" cookable="True"
-              enabled="True" expression="" id="accessibility.js"
-              inline="False" insert-before="styleswitcher.js"/>
-
-  <!-- Make these resources only render for logged-in users -->
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="dropdown.js"
-              insert-after="webstats.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="table_sorter.js"
-              insert-after="dropdown.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="calendar_formfield.js"
-              insert-after="table_sorter.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="calendarpopup.js"
-              insert-after="calendar_formfield.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="formUnload.js"
-              insert-after="calendarpopup.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="formsubmithelpers.js"
-              insert-after="formUnload.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="unlockOnFormUnload.js"
-              insert-after="formsubmithelpers.js"/>
-
- <!-- Remove unused JS -->
- <javascript id="correctPREformatting.js" remove="True"/>
- <javascript id="plone_minwidth.js" remove="True"/>
- <javascript id="folder_contents_filter.js" remove="True"/>
- <javascript id="fullscreenmode.js" remove="True"/>
- <javascript id="login.js" remove="True"/>
-
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml
deleted file mode 100644
index 933806c..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <!-- Note - for newly created sites, this is False, but it represents a
-       behavioural change we may not want when upgrading sites
-    -->
-  <property name="disable_nonfolderish_sections" type="boolean">True</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml
deleted file mode 100644
index 58df294..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object>
-  <order manager="plone.contentviews" skinname="Plone Default">
-    <viewlet name="plone.contentviews" />
-    <viewlet name="plone.contentactions" />
-  </order>
-  <order manager="plone.portalfooter" skinname="Plone Default">
-    <viewlet name="plone.footer" />
-    <viewlet name="plone.colophon" />
-  </order>
-</object>
\ No newline at end of file
diff --git a/plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml b/plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml
deleted file mode 100644
index b7896f4..0000000
--- a/plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-     interface="five.customerize.interfaces.IViewTemplateContainer"
-     object="portal_view_customizations"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/final_three01/rolemap.xml b/plone/app/upgrade/v30/profiles/final_three01/rolemap.xml
deleted file mode 100644
index 8685620..0000000
--- a/plone/app/upgrade/v30/profiles/final_three01/rolemap.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="Delete objects" acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-    </permission>
-  </permissions>
-</rolemap>
diff --git a/plone/app/upgrade/v30/profiles/final_three01/toolset.xml b/plone/app/upgrade/v30/profiles/final_three01/toolset.xml
deleted file mode 100644
index e5b7055..0000000
--- a/plone/app/upgrade/v30/profiles/final_three01/toolset.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0"?>
-<tool-setup>
- <required tool_id="portal_view_customizations"
-           class="plone.app.customerize.tool.ViewTemplateContainer"/>
-</tool-setup>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final/actions.xml b/plone/app/upgrade/v30/profiles/rc2_final/actions.xml
deleted file mode 100644
index 2e67757..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final/actions.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="document_actions" meta_type="CMF Action Category">
-
-  <object name="extedit" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title"
-       i18n:translate="">Edit with external application</property>
-  </object>
-
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml b/plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml
deleted file mode 100644
index 41b375e..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
-
- <!-- Move the CSS to the top, so the anon CSS block is rendered last -->
- <stylesheet id="member.css" insert-before="base.css" />
- <stylesheet id="RTL.css" insert-before="base.css" />
-</object>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml b/plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml
deleted file mode 100644
index 14cff81..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript id="kupucontextmenu.js" remove="True"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml b/plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml
deleted file mode 100644
index 0494be2..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="iterate : Check in content"
-                acquire="True">
-      <role name="Owner"/>
-      <role name="Manager"/>
-      <role name="Editor"/>
-    </permission>
-    <permission name="iterate : Check out content"
-                acquire="True">
-      <role name="Owner"/>
-      <role name="Manager"/>
-      <role name="Editor"/>
-    </permission>
-  </permissions>
-</rolemap>
diff --git a/plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml b/plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml
deleted file mode 100644
index c5deef8..0000000
--- a/plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
- <configlet title="Language" action_id="PloneLanguageTool"
-    appId="PloneLanguageTool" category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@language-controlpanel"
-    icon_expr="string:${portal_url}/flag-plone.png"
-    visible="True" i18n:attributes="title">
-  <permission>Manage portal</permission>
- </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml b/plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml
deleted file mode 100644
index 3598f22..0000000
--- a/plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript id="webstats.js" remove="True"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml b/plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml
deleted file mode 100644
index 9e62b5f..0000000
--- a/plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="Modify portal content"
-                acquire="True">
-        <role name="Editor" />
-        <role name="Owner" />
-    </permission>
-  </permissions>
-</rolemap>
-
-
diff --git a/plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml b/plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml
deleted file mode 100644
index 470100d..0000000
--- a/plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0"?>
-<object>
- <difftypes>
-  <type portal_type="Document">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Event">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="File">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Folder">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Image">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Link">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="News Item">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
- </difftypes>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml
deleted file mode 100644
index c534642..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <utilities>
-  <utility
-     interface="Products.CMFDiffTool.interfaces.IDiffTool"
-     object="portal_diff"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml
deleted file mode 100644
index 0815f58..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
- <configlet title="Markup" action_id="MarkupSettings"
-    appId="MarkupSettings" category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@markup-controlpanel"
-    icon_expr="string:${portal_url}/edit.png"
-    visible="True" i18n:attributes="title">
-  <permission>Manage portal</permission>
- </configlet>
- <configlet title="Calendar" action_id="CalendarSettings"
-    appId="Plone" category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@calendar-controlpanel"
-    icon_expr="string:${portal_url}/event_icon.png"
-    visible="True" i18n:attributes="title">
-  <permission>Manage portal</permission>
- </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml
deleted file mode 100644
index 330f099..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="navtree.css" media="screen" rel="stylesheet"
-    rendering="import" insert-after="deprecated.css" />
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="invisibles.css" media="screen" rel="stylesheet"
-    rendering="import" insert-after="navtree.css" />
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="forms.css" media="screen" rel="stylesheet"
-    rendering="import" insert-after="invisibles.css" />
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml
deleted file mode 100644
index 444bb1c..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="default_contenttype" type="string">text/html</property>
-  <property name="forbidden_contenttypes" type="lines">
-   <element value="text/structured"/>
-   <element value="text/restructured"/>
-   <element value="text/x-rst"/>
-   <element value="text/plain"/>
-   <element value="text/plain-pre"/>
-   <element value="text/x-python"/>
-   <element value="text/x-web-markdown"/>
-   <element value="text/x-web-intelligent"/>
-   <element value="text/x-web-textile"/>
-  </property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml
deleted file mode 100644
index bcc1cdc..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0"?>
-<tool-setup>
- <required tool_id="portal_groupdata"
-           class="Products.PlonePAS.tools.groupdata.GroupDataTool"/>
- <required tool_id="portal_groups"
-           class="Products.PlonePAS.tools.groups.GroupsTool"/>
- <required tool_id="portal_memberdata"
-           class="Products.PlonePAS.tools.memberdata.MemberDataTool"/>
- <required tool_id="portal_membership"
-           class="Products.PlonePAS.tools.membership.MembershipTool"/>
- <required tool_id="portal_diff"
-           class="Products.CMFDiffTool.CMFDiffTool.CMFDiffTool"/>
-</tool-setup>
diff --git a/plone/app/upgrade/v30/rcs.py b/plone/app/upgrade/v30/rcs.py
deleted file mode 100644
index 50fcbd8..0000000
--- a/plone/app/upgrade/v30/rcs.py
+++ /dev/null
@@ -1,44 +0,0 @@
-from types import InstanceType
-
-from Products.CMFCore.utils import getToolByName
-from Products.MimetypesRegistry.mime_types.mtr_mimetypes import text_web_intelligent
-from Products.PortalTransforms.transforms.web_intelligent_plain_text_to_html import register as intel2html_register
-from Products.PortalTransforms.transforms.html_to_web_intelligent_plain_text import register as html2intel_register
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def rc2_final(context):
-    loadMigrationProfile(
-        context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final')
-    try:
-        import plone.app.iterate
-    except ImportError:
-        pass
-    else:
-        loadMigrationProfile(
-            context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final-iterate')
-
-
-def addIntelligentText(context):
-    """ add intelligenttext mime type and transforms that have been
-    introduced in MimetypesRegistry and PortalTransforms 1.6 and that
-    are never updated anywhere (#6684)
-    """
-    # Add mime type
-    # See MimetypesRegistry/mime_types/mtr_mimetypes.py
-    mt = text_web_intelligent
-    if type(mt) != InstanceType:
-        mt = mt()
-    mtr = getToolByName(context, 'mimetypes_registry')
-    mtr.register(mt)
-    logger.info("Added text_web_intelligent mime type to registry")
-
-    # Add transforms
-    # See PortalTransforms/transforms/__init__.py
-    engine = getToolByName(context, 'portal_transforms')
-    engine.registerTransform(intel2html_register())
-    logger.info("Added intelligenttext to html transform to registry")
-    engine.registerTransform(html2intel_register())
-    logger.info("Added html to intelligenttext transform to registry")
diff --git a/plone/app/upgrade/v30/tests.py b/plone/app/upgrade/v30/tests.py
deleted file mode 100644
index e4954e7..0000000
--- a/plone/app/upgrade/v30/tests.py
+++ /dev/null
@@ -1,1203 +0,0 @@
-from Acquisition import aq_base
-
-from five.localsitemanager.registry import FiveVerifyingAdapterLookup
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.app.i18n.locales.interfaces import IContentLanguages
-from plone.app.i18n.locales.interfaces import ICountries
-from plone.app.i18n.locales.interfaces import IMetadataLanguages
-from plone.app.portlets import portlets
-from plone.app.redirector.interfaces import IRedirectionStorage
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import IPortletAssignmentMapping
-from plone.portlets.interfaces import ILocalPortletAssignmentManager
-from plone.portlets.constants import CONTEXT_CATEGORY as CONTEXT_PORTLETS
-
-from zExceptions import BadRequest
-from zope.location.interfaces import ISite
-from zope.component import getGlobalSiteManager
-from zope.component import getSiteManager
-from zope.component import getUtility, getMultiAdapter
-from zope.component.hooks import clearSite
-
-from Products.Archetypes.interfaces import IArchetypeTool
-from Products.Archetypes.interfaces import IReferenceCatalog
-from Products.Archetypes.interfaces import IUIDCatalog
-from Products.CMFActionIcons.interfaces import IActionIconsTool
-from Products.CMFCalendar.interfaces import ICalendarTool
-from Products.CMFCore.ActionInformation import Action
-from Products.CMFCore.ActionInformation import ActionCategory
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.utils import getToolInterface
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.permissions import AccessInactivePortalContent
-from Products.CMFCore.interfaces import IActionsTool
-from Products.CMFCore.interfaces import ICachingPolicyManager
-from Products.CMFCore.interfaces import ICatalogTool
-from Products.CMFCore.interfaces import IContentTypeRegistry
-from Products.CMFCore.interfaces import IDiscussionTool
-from Products.CMFCore.interfaces import IMemberDataTool
-from Products.CMFCore.interfaces import IMembershipTool
-from Products.CMFCore.interfaces import IMetadataTool
-from Products.CMFCore.interfaces import IPropertiesTool
-from Products.CMFCore.interfaces import IRegistrationTool
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFCore.interfaces import ISkinsTool
-from Products.CMFCore.interfaces import ISyndicationTool
-from Products.CMFCore.interfaces import ITypesTool
-from Products.CMFCore.interfaces import IURLTool
-from Products.CMFCore.interfaces import IConfigurableWorkflowTool
-from Products.CMFCore.ActionInformation import ActionInformation
-from Products.CMFDiffTool.interfaces import IDiffTool
-from Products.CMFEditions.interfaces import IArchivistTool
-from Products.CMFEditions.interfaces import IPortalModifierTool
-from Products.CMFEditions.interfaces import IPurgePolicyTool
-from Products.CMFEditions.interfaces.IRepository import IRepositoryTool
-from Products.CMFEditions.interfaces import IStorageTool
-from Products.CMFFormController.interfaces import IFormControllerTool
-from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.CMFPlone.interfaces import IPloneTool
-from Products.CMFPlone.interfaces import ITranslationServiceTool
-from Products.CMFUid.interfaces import IUniqueIdAnnotationManagement
-from Products.CMFUid.interfaces import IUniqueIdGenerator
-from Products.CMFUid.interfaces import IUniqueIdHandler
-from Products.GenericSetup.interfaces import ISetupTool
-from Products.MailHost.interfaces import IMailHost
-from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
-from Products.PortalTransforms.interfaces import IPortalTransformsTool
-from Products.PloneLanguageTool.interfaces import ILanguageTool
-from Products.PlonePAS.interfaces.group import IGroupTool
-from Products.PlonePAS.interfaces.group import IGroupDataTool
-from Products.ResourceRegistries.interfaces import ICSSRegistry
-from Products.ResourceRegistries.interfaces import IJSRegistry
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import version_match
-
-from plone.app.upgrade.v30.alphas import enableZope3Site
-from plone.app.upgrade.v30.alphas import migrateOldActions
-from plone.app.upgrade.v30.alphas import updateActionsI18NDomain
-from plone.app.upgrade.v30.alphas import updateFTII18NDomain
-from plone.app.upgrade.v30.alphas import convertLegacyPortlets
-from plone.app.upgrade.v30.alphas import registerToolsAsUtilities
-from plone.app.upgrade.v30.alphas import registration
-from plone.app.upgrade.v30.alphas import addReaderAndEditorRoles
-from plone.app.upgrade.v30.alphas import migrateLocalroleForm
-from plone.app.upgrade.v30.alphas import reorderUserActions
-from plone.app.upgrade.v30.alphas import updatePASPlugins
-from plone.app.upgrade.v30.alphas import updateConfigletTitles
-from plone.app.upgrade.v30.alphas import updateMemberSecurity
-from plone.app.upgrade.v30.alphas import addCacheForResourceRegistry
-from plone.app.upgrade.v30.alphas import removeTablelessSkin
-from plone.app.upgrade.v30.alphas import addObjectProvidesIndex
-from plone.app.upgrade.v30.alphas import restorePloneTool
-from plone.app.upgrade.v30.alphas import installProduct
-
-from plone.app.upgrade.v30.betas import migrateHistoryTab
-from plone.app.upgrade.v30.betas import changeOrderOfActionProviders
-from plone.app.upgrade.v30.betas import cleanupOldActions
-from plone.app.upgrade.v30.betas import cleanDefaultCharset
-from plone.app.upgrade.v30.betas import addAutoGroupToPAS
-from plone.app.upgrade.v30.betas import removeS5Actions
-from plone.app.upgrade.v30.betas import addContributorToCreationPermissions
-from plone.app.upgrade.v30.betas import removeSharingAction
-from plone.app.upgrade.v30.betas import addEditorToSecondaryEditorPermissions
-from plone.app.upgrade.v30.betas import updateEditActionConditionForLocking
-from plone.app.upgrade.v30.betas import addOnFormUnloadJS
-
-from plone.app.upgrade.v30.betas import updateTopicTitle
-from plone.app.upgrade.v30.betas import cleanupActionProviders
-from plone.app.upgrade.v30.betas import hidePropertiesAction
-
-from plone.app.upgrade.v30.rcs import addIntelligentText
-
-from plone.app.upgrade.v30.final_three0x import installNewModifiers
-
-try:
-    from Products.ATContentTypes.interface import IATCTTool
-    HAS_ATCT = True
-except ImportError:
-    HAS_ATCT = False
-
-try:
-    from Products.CMFPlone.interfaces import IFactoryTool
-except:
-    from Products.ATContentTypes.interfaces import IFactoryTool
-
-
-class TestMigrations_v3_0_Actions(MigrationTest):
-
-    def afterSetUp(self):
-        self.actions = self.portal.portal_actions
-        self.types = self.portal.portal_types
-        self.workflow = self.portal.portal_workflow
-        self._migrate_reply_action()
-
-    def _migrate_reply_action(self):
-        # Create dummy old ActionInformation
-        reply = ActionInformation('reply',
-                                  title='Reply',
-                                  category='reply_actions',
-                                  condition='context/replyAllowed',
-                                  permissions=(AccessInactivePortalContent, ),
-                                  priority=10,
-                                  visible=True,
-                                  action='context/reply'
-                                  )
-
-        from OFS.SimpleItem import SimpleItem
-
-        class DummyTool(SimpleItem):
-            pass
-        dummy = DummyTool()
-        dummy._actions = (reply,)
-        self.portal._setObject('dummy', dummy)
-
-    def testMigrateActions(self):
-        # Test it twice
-        for i in range(2):
-            migrateOldActions(self.portal)
-            reply_actions = getattr(self.actions, 'reply_actions', None)
-            self.assertFalse(reply_actions is None)
-            reply = getattr(reply_actions, 'reply', None)
-            self.assertFalse(reply is None)
-            self.assertTrue(isinstance(reply, Action))
-            # Verify all data has been upgraded correctly to the new Action
-            data = reply.getInfoData()[0]
-            self.assertEqual(data['category'], 'reply_actions')
-            self.assertEqual(data['title'], 'Reply')
-            self.assertEqual(data['visible'], True)
-            self.assertEqual(data['permissions'],
-                             (AccessInactivePortalContent, ))
-            self.assertEqual(data['available'].text, 'context/replyAllowed')
-            self.assertEqual(data['url'].text, 'context/reply')
-            # Make sure the original action has been removed
-            self.assertEqual(len(self.portal.dummy._actions), 0)
-
-    def testUpdateActionsI18NDomain(self):
-        migrateOldActions(self.portal)
-        reply = self.actions.reply_actions.reply
-        self.assertEqual(reply.i18n_domain, '')
-        # Test it twice
-        for i in range(2):
-            updateActionsI18NDomain(self.portal)
-            self.assertEqual(reply.i18n_domain, 'plone')
-
-    def testUpdateActionsI18NDomainNonAscii(self):
-        migrateOldActions(self.portal)
-        reply = self.actions.reply_actions.reply
-        reply.title = 'Foo\xc3'
-        self.assertEqual(reply.i18n_domain, '')
-        self.assertEqual(reply.title, 'Foo\xc3')
-
-        updateActionsI18NDomain(self.portal)
-
-        self.assertEqual(reply.i18n_domain, '')
-
-    def testHistoryActionID(self):
-        # Test it twice
-        for i in range(2):
-            migrateHistoryTab(self.portal)
-            objects = getattr(self.actions, 'object', None)
-            self.assertFalse('rss' in objects.objectIds())
-
-    def testProviderCleanup(self):
-        self.actions.addActionProvider("portal_membership")
-        self.assertTrue(
-            "portal_membership" in self.actions.listActionProviders())
-        # Test it twice
-        for i in range(2):
-            cleanupActionProviders(self.portal)
-            self.assertFalse(
-                "portal_membership" in self.actions.listActionProviders())
-
-    def testRemovePropertiesActions(self):
-        ti = self.types.getTypeInfo("Document")
-        if ti.getActionObject("object/properties") is None:
-            ti.addAction("metadata", "name", "action", "condition",
-                         "permission", "object",)
-        # Test it twice
-        for i in range(2):
-            hidePropertiesAction(self.portal)
-            self.assertTrue(ti.getActionObject("object/metadata") is None)
-
-    def tearDown(self):
-        self.portal._delObject('dummy')
-
-
-class TestMigrations_v2_5_x(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:2.5.x-3.0a1'
-        self.types = self.portal.portal_types
-        self.properties = self.portal.portal_properties
-
-        for legacy_tool in ('portal_discussion', 'portal_actionicons'):
-            if legacy_tool not in self.portal:
-                from OFS.SimpleItem import SimpleItem
-                self.portal._setObject(legacy_tool, SimpleItem())
-
-    def disableSite(self, obj, iface=ISite):
-        # We need our own disableSite method as the CMF portal implements
-        # ISite directly, so we cannot remove it, like the disableSite method
-        # in Five.component would have done
-        from ZPublisher.BeforeTraverse import unregisterBeforeTraverse
-        from Products.Five.component import HOOK_NAME
-        obj = aq_base(obj)
-        if not iface.providedBy(obj):
-            raise TypeError('Object must be a site.')
-        unregisterBeforeTraverse(obj, HOOK_NAME)
-        if hasattr(obj, HOOK_NAME):
-            delattr(obj, HOOK_NAME)
-
-    def testEnableZope3Site(self):
-        # First we remove the site and site manager
-        self.disableSite(self.portal)
-        clearSite(self.portal)
-        self.portal.setSiteManager(None)
-        gsm = getGlobalSiteManager()
-        # Test it twice
-        for i in range(2):
-            enableZope3Site(self.portal)
-            # And see if we have an ISite with a local site manager
-            self.assertTrue(ISite.providedBy(self.portal))
-            sm = getSiteManager(self.portal)
-            self.assertFalse(gsm is sm)
-            lc = sm.utilities.LookupClass
-            self.assertEqual(lc, FiveVerifyingAdapterLookup)
-
-        # Test the lookupclass migration
-        sm.utilities.LookupClass = None
-        # Test it twice
-        for i in range(2):
-            enableZope3Site(self.portal)
-            self.assertEqual(sm.utilities.LookupClass,
-                             FiveVerifyingAdapterLookup)
-            self.assertEqual(sm.utilities.__parent__, sm)
-            self.assertEqual(sm.__parent__, self.portal)
-
-    def testUpdateFTII18NDomain(self):
-        doc = self.types.Document
-        doc.i18n_domain = ''
-        # Test it twice
-        for i in range(2):
-            updateFTII18NDomain(self.portal)
-            self.assertEqual(doc.i18n_domain, 'plone')
-
-    def testUpdateFTII18NDomainNonAscii(self):
-        doc = self.types.Document
-        doc.i18n_domain = ''
-        doc.title = 'Foo\xc3'
-        # Update FTI's
-        updateFTII18NDomain(self.portal)
-        # domain should have been updated
-        self.assertEqual(doc.i18n_domain, '')
-
-    def testAddDefaultAndForbiddenContentTypesProperties(self):
-        # Should add the forbidden_contenttypes and default_contenttype
-        # property
-        self.removeSiteProperty('forbidden_contenttypes')
-        self.removeSiteProperty('default_contenttype')
-        self.assertFalse(self.properties.site_properties.hasProperty(
-            'forbidden_contenttypes'))
-        self.assertFalse(
-            self.properties.site_properties.hasProperty('default_contenttype'))
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('propertiestool', ))
-            self.assertTrue(self.properties.site_properties.hasProperty(
-                'forbidden_contenttypes'))
-            self.assertTrue(self.properties.site_properties.hasProperty(
-                'default_contenttype'))
-            self.assertEqual(self.properties.site_properties.forbidden_contenttypes,
-                             ('text/structured', 'text/restructured', 'text/x-rst',
-                              'text/plain', 'text/plain-pre', 'text/x-python',
-                              'text/x-web-markdown', 'text/x-web-intelligent', 'text/x-web-textile')
-                             )
-
-    def testTablelessRemoval(self):
-        st = getToolByName(self.portal, "portal_skins")
-        if "Plone Tableless" not in st.getSkinSelections():
-            st.addSkinSelection('Plone Tableless',
-                                'one,two', make_default=True)
-        # Test it twice
-        for i in range(2):
-            removeTablelessSkin(self.portal)
-            self.assertFalse('Plone Tableless' in st.getSkinSelections())
-            self.assertFalse(st.default_skin == 'Plone Tableless')
-
-    def testLegacyPortletsConverted(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet',
-                                  'here/portlet_related/macros/portlet']
-        self.portal.right_slots = ['here/portlet_login/macros/portlet',
-                                   'here/portlet_languages/macros/portlet']
-
-        self.portal.Members.right_slots = []
-
-        # Test it twice
-        for i in range(2):
-            convertLegacyPortlets(self.portal)
-
-            self.assertEqual(self.portal.left_slots, [])
-            self.assertEqual(self.portal.right_slots, [])
-
-            left = getMultiAdapter(
-                (self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-            right = getMultiAdapter(
-                (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-            lp = left.values()
-            self.assertEqual(2, len(lp))
-
-            self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-            self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-            rp = right.values()
-            self.assertEqual(1, len(rp))
-            self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
-
-            members = self.portal.Members
-            portletAssignments = getMultiAdapter(
-                (members, rightColumn,), ILocalPortletAssignmentManager)
-            self.assertEqual(
-                True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
-
-    def testLegacyPortletsConvertedNoSlots(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet']
-
-        self.portal.Members.right_slots = []
-
-        if hasattr(self.portal.aq_base, 'right_slots'):
-            delattr(self.portal, 'right_slots')
-
-        convertLegacyPortlets(self.portal)
-
-        self.assertEqual(self.portal.left_slots, [])
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        lp = left.values()
-        self.assertEqual(2, len(lp))
-
-        self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-        self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-        rp = right.values()
-        self.assertEqual(0, len(rp))
-
-        members = self.portal.Members
-        portletAssignments = getMultiAdapter(
-            (members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(
-            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
-
-    def testLegacyPortletsConvertedBadSlots(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet',
-                                  'foobar', ]
-        self.portal.right_slots = ['here/portlet_login/macros/portlet']
-
-        self.portal.Members.right_slots = []
-
-        convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        self.assertEqual(self.portal.left_slots, [])
-        self.assertEqual(self.portal.right_slots, [])
-
-        lp = left.values()
-        self.assertEqual(2, len(lp))
-
-        self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-        self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-        rp = right.values()
-        self.assertEqual(1, len(rp))
-        self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
-
-        members = self.portal.Members
-        portletAssignments = getMultiAdapter(
-            (members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(
-            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
-
-    def testLegacyPortletsConvertedNoMembersFolder(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet',
-                                  'foobar', ]
-        self.portal.right_slots = ['here/portlet_login/macros/portlet']
-
-        self.portal._delObject('Members')
-
-        convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        self.assertEqual(self.portal.left_slots, [])
-        self.assertEqual(self.portal.right_slots, [])
-
-        lp = left.values()
-        self.assertEqual(2, len(lp))
-
-        self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-        self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-        rp = right.values()
-        self.assertEqual(1, len(rp))
-        self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
-
-    def testRegisterToolsAsUtilities(self):
-        sm = getSiteManager(self.portal)
-        interfaces = (ISiteRoot, IPloneSiteRoot,
-                      IActionIconsTool, ISyndicationTool,
-                      IMetadataTool, IPropertiesTool, IMailHost,
-                      IUniqueIdAnnotationManagement, IUniqueIdGenerator,
-                      IDiffTool, IMimetypesRegistryTool,
-                      IPortalTransformsTool, IDiscussionTool, )
-        if HAS_ATCT:
-            interfaces += (IATCTTool,)
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertFalse(sm.queryUtility(i) is None)
-
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertFalse(sm.queryUtility(i) is None)
-
-    def testDontRegisterToolsAsUtilities(self):
-        sm = getSiteManager(self.portal)
-        interfaces = (ILanguageTool, IArchivistTool, IPortalModifierTool,
-                      IPurgePolicyTool, IRepositoryTool, IStorageTool,
-                      IFormControllerTool, IReferenceCatalog, IUIDCatalog,
-                      ICalendarTool, IActionsTool, ICatalogTool,
-                      IContentTypeRegistry, ISkinsTool, ITypesTool, IURLTool,
-                      IConfigurableWorkflowTool, IPloneTool, ICSSRegistry,
-                      IJSRegistry, IUniqueIdHandler, IFactoryTool,
-                      IMembershipTool, IGroupTool, IGroupDataTool,
-                      IMemberDataTool, IArchetypeTool, ICachingPolicyManager,
-                      IRegistrationTool, ITranslationServiceTool,
-                      ISetupTool, IQuickInstallerTool,
-                      )
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertTrue(sm.queryUtility(i) is None)
-
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertTrue(sm.queryUtility(i) is None)
-
-    def testToolRegistration(self):
-        for (tool_id, interface) in registration:
-            self.assertEqual(getToolInterface(tool_id), interface)
-
-
-class TestMigrations_v3_0_alpha1(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:3.0a1-3.0a2'
-        self.actions = self.portal.portal_actions
-
-    def testInstallRedirectorUtility(self):
-        sm = getSiteManager(self.portal)
-        sm.unregisterUtility(provided=IRedirectionStorage)
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('componentregistry', ))
-            self.assertFalse(sm.queryUtility(IRedirectionStorage) is None)
-
-    def testAddReaderEditorRoles(self):
-        self.portal._delRoles(['Reader', 'Editor'])
-        # Test it twice
-        for i in range(2):
-            addReaderAndEditorRoles(self.portal)
-            self.assertTrue('Reader' in self.portal.valid_roles())
-            self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue(
-                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue(
-                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
-                'Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [
-                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testAddReaderEditorRolesPermissionOnly(self):
-        self.portal.manage_permission('View', [], True)
-        self.portal.manage_permission('Modify portal content', [], True)
-        # Test it twice
-        for i in range(2):
-            addReaderAndEditorRoles(self.portal)
-            self.assertTrue('Reader' in self.portal.valid_roles())
-            self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue(
-                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue(
-                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
-                'Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [
-                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testMigrateLocalroleForm(self):
-        fti = self.portal.portal_types['Document']
-        aliases = fti.getMethodAliases()
-        aliases['sharing'] = 'folder_localrole_form'
-        fti.setMethodAliases(aliases)
-        fti.addAction(
-            'test', 'Test', 'string:${object_url}/folder_localrole_form', None, 'View', 'object')
-        # Test it twice
-        for i in range(2):
-            migrateLocalroleForm(self.portal)
-            self.assertEqual('@@sharing', fti.getMethodAliases()['sharing'])
-            test_action = fti.listActions()[-1]
-            self.assertEqual(
-                'string:${object_url}/@@sharing', test_action.getActionExpression())
-
-    def testReorderUserActions(self):
-        self.actions.user.moveObjectsToTop(['logout', 'undo', 'join'])
-        # Test it twice
-        for i in range(2):
-            reorderUserActions(self.portal)
-            # build a dict that has the position as the value to make it easier
-            # to compare postions in the ordered list of actions
-            n = 0
-            sort = {}
-            for action in self.actions.user.objectIds():
-                sort[action] = n
-                n += 1
-            self.assertTrue(sort['preferences'] < sort['undo'])
-            self.assertTrue(sort['undo'] < sort['logout'])
-            self.assertTrue(sort['login'] < sort['join'])
-
-    def testReorderUserActionsIncompleteActions(self):
-        self.actions.user.moveObjectsToTop(['logout', 'undo', 'join'])
-        self.actions.user._delObject('preferences')
-        # Test it twice
-        for i in range(2):
-            reorderUserActions(self.portal)
-            n = 0
-            sort = {}
-            for action in self.actions.user.objectIds():
-                sort[action] = n
-                n += 1
-            self.assertTrue(sort['undo'] < sort['logout'])
-            self.assertTrue(sort['login'] < sort['join'])
-
-
-class TestMigrations_v3_0_alpha2(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:3.0a2-3.0b1'
-        self.actions = self.portal.portal_actions
-        self.properties = self.portal.portal_properties
-        self.cp = self.portal.portal_controlpanel
-
-    def testAddVariousProperties(self):
-        PROPERTIES = ('enable_link_integrity_checks', 'enable_sitemap',
-                      'external_links_open_new_window', 'many_groups',
-                      'number_of_days_to_keep', 'webstats_js')
-        for prop in PROPERTIES:
-            self.removeSiteProperty(prop)
-        sheet = self.properties.site_properties
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('propertiestool', ))
-            for prop in PROPERTIES:
-                self.assertTrue(sheet.hasProperty(prop))
-
-    def testInstallContentrulesAndLanguageUtilities(self):
-        sm = getSiteManager()
-        INTERFACES = (IRuleStorage, ICountries, IContentLanguages,
-                      IMetadataLanguages)
-        for i in INTERFACES:
-            sm.unregisterUtility(provided=i)
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('componentregistry', ))
-            for i in INTERFACES:
-                self.assertFalse(sm.queryUtility(i) is None)
-
-    def testAddEmailCharsetProperty(self):
-        if self.portal.hasProperty('email_charset'):
-            self.portal.manage_delProperties(['email_charset'])
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('properties', ))
-            self.assertTrue(self.portal.hasProperty('email_charset'))
-            self.assertEqual(self.portal.getProperty('email_charset'), 'utf-8')
-
-    def testUpdateMemberSecurity(self):
-        # These properties were removed in Plone 5, so we add them
-        # manually here if needed and check if they are properly updated by the
-        # updateMemberSecurity upgrade step
-        pprop = getToolByName(self.portal, 'portal_properties')
-        try:
-            self.portal.manage_addProperty('validate_email', False, 'boolean')
-        except BadRequest:  # property is already there
-            pass
-        try:
-            pprop.site_properties.manage_addProperty(
-                'allowAnonymousViewAbout', True, 'boolean')
-        except BadRequest:  # property is already there
-            pass
-
-        updateMemberSecurity(self.portal)
-
-        self.assertEqual(
-            pprop.site_properties.getProperty('allowAnonymousViewAbout'),
-            False
-        )
-
-        pmembership = getToolByName(self.portal, 'portal_membership')
-        self.assertEqual(pmembership.memberareaCreationFlag, False)
-        self.assertEqual(self.portal.getProperty('validate_email'), True)
-
-        app_roles = self.portal.rolesOfPermission(
-            permission='Add portal member')
-        app_perms = self.portal.permission_settings(
-            permission='Add portal member')
-        acquire_check = app_perms[0]['acquire']
-        reg_roles = []
-        for appperm in app_roles:
-            if appperm['selected'] == 'SELECTED':
-                reg_roles.append(appperm['name'])
-        self.assertTrue('Manager' in reg_roles)
-        self.assertTrue('Owner' in reg_roles)
-        self.assertEqual(acquire_check, '')
-
-    def testPASPluginInterfaces(self):
-        pas = self.portal.acl_users
-        from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin
-        pas.plugins.deactivatePlugin(
-            IUserEnumerationPlugin, 'mutable_properties')
-        updatePASPlugins(self.portal)
-
-        plugin = pas.mutable_properties
-        for intf_id in plugin.listInterfaces():
-            try:
-                intf = pas.plugins._getInterfaceFromName(intf_id)
-                self.assertTrue(
-                    'mutable_properties' in pas.plugins.listPluginIds(intf))
-            except KeyError:
-                # Ignore unregistered interface types
-                pass
-
-    def testUpdateConfigletTitles(self):
-        collection = self.cp.getActionObject('Plone/portal_atct')
-        language = self.cp.getActionObject('Plone/PloneLanguageTool')
-        navigation = self.cp.getActionObject('Plone/NavigationSettings')
-        types = self.cp.getActionObject('Plone/TypesSettings')
-        users = self.cp.getActionObject('Plone/UsersGroups')
-        users2 = self.cp.getActionObject('Plone/UsersGroups2')
-        # test it twice
-        for i in range(2):
-            updateConfigletTitles(self.portal)
-            self.assertEqual(collection.title, 'Collection')
-            self.assertEqual(language.title, 'Language')
-            self.assertEqual(navigation.title, 'Navigation')
-            self.assertEqual(types.title, 'Types')
-            self.assertEqual(users.title, 'Users and Groups')
-            self.assertEqual(users2.title, 'Users and Groups')
-
-    def testAddCacheForResourceRegistry(self):
-        ram_cache_id = 'ResourceRegistryCache'
-        # first remove the cache manager and make sure it's removed
-        self.portal._delObject(ram_cache_id)
-        self.assertFalse(ram_cache_id in self.portal.objectIds())
-        cssreg = self.portal.portal_css
-        cssreg.ZCacheable_setEnabled(0)
-        cssreg.ZCacheable_setManagerId(None)
-        self.assertFalse(cssreg.ZCacheable_enabled())
-        self.assertTrue(cssreg.ZCacheable_getManagerId() is None)
-        jsreg = self.portal.portal_javascripts
-        jsreg.ZCacheable_setEnabled(0)
-        jsreg.ZCacheable_setManagerId(None)
-        self.assertFalse(jsreg.ZCacheable_enabled())
-        self.assertTrue(jsreg.ZCacheable_getManagerId() is None)
-        # Test it twice
-        for i in range(2):
-            addCacheForResourceRegistry(self.portal)
-            self.assertTrue(ram_cache_id in self.portal.objectIds())
-            self.assertTrue(cssreg.ZCacheable_enabled())
-            self.assertFalse(cssreg.ZCacheable_getManagerId() is None)
-            self.assertTrue(jsreg.ZCacheable_enabled())
-            self.assertFalse(jsreg.ZCacheable_getManagerId() is None)
-
-    def testObjectProvidesIndex(self):
-        catalog = getToolByName(self.portal, 'portal_catalog')
-        if 'object_provides' in catalog.indexes():
-            catalog.delIndex('object_provides')
-        self.assertFalse('object_provides' in catalog.indexes())
-        # Test it twice
-        for i in range(2):
-            addObjectProvidesIndex(self.portal)
-            self.assertTrue('object_provides' in catalog.indexes())
-
-    def testMigratePloneTool(self):
-        tool = self.portal.plone_utils
-        tool.meta_type = 'PlonePAS Utilities Tool'
-        # Test it twice
-        for i in range(2):
-            restorePloneTool(self.portal)
-            tool = self.portal.plone_utils
-            self.assertEqual('Plone Utility Tool', tool.meta_type)
-
-    def testInstallPloneLanguageTool(self):
-        super(self.portal.__class__, self.portal).manage_delObjects(
-            ['portal_languages'])
-        self.uninstallProduct('PloneLanguageTool')
-        qi = getToolByName(self.portal, "portal_quickinstaller", None)
-        if qi is None:
-            # Newer Plone without qi.
-            return
-        # Test it twice
-        for i in range(2):
-            installProduct('PloneLanguageTool', self.portal)
-            self.assertTrue(qi.isProductInstalled('PloneLanguageTool'))
-            self.assertTrue('portal_languages' in self.portal.keys())
-
-
-class TestMigrations_v3_0(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:3.0b1-3.0b2'
-        self.actions = self.portal.portal_actions
-        self.skins = self.portal.portal_skins
-        self.types = self.portal.portal_types
-        self.workflow = self.portal.portal_workflow
-        self.properties = getToolByName(self.portal, 'portal_properties')
-
-    def testAddContentRulesAction(self):
-        self.portal.portal_actions.object._delObject('contentrules')
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('actions', ))
-            self.assertTrue(
-                'contentrules' in self.portal.portal_actions.object.objectIds())
-
-    def testChangeOrderOfActionProviders(self):
-        self.actions.deleteActionProvider('portal_types')
-        self.actions.addActionProvider('portal_types')
-        self.assertEqual(
-            self.actions.listActionProviders(),
-            ('portal_workflow', 'portal_actions', 'portal_types'))
-        # Test it twice
-        for i in range(2):
-            changeOrderOfActionProviders(self.portal)
-            self.assertEqual(
-                self.actions.listActionProviders(),
-                ('portal_workflow', 'portal_types', 'portal_actions'))
-
-    def testCleanupOldActions(self):
-        reply = Action('reply', title='Reply')
-        logged_in = Action('logged_in', title='Logged in')
-        change_ownership = Action('change_ownership', title='Change ownership')
-
-        object_ = self.actions.object
-        object_tabs = getattr(self.actions, 'object_tabs', None)
-        if object_tabs is None:
-            category = 'object_tabs'
-            self.actions._setObject(category, ActionCategory(id=category))
-            object_tabs = self.actions.object_tabs
-        if getattr(self.actions, 'global', None) is None:
-            category = 'global'
-            self.actions._setObject(category, ActionCategory(id=category))
-
-        if not 'reply' in object_.keys():
-            object_._setObject('reply', reply)
-        user = self.actions.user
-        if not 'logged_in' in user.keys():
-            user._setObject('logged_in', logged_in)
-        if not 'change_ownership' in object_tabs.keys():
-            object_tabs._setObject('change_ownership', change_ownership)
-        del object_tabs
-
-        # Test it twice
-        for i in range(2):
-            cleanupOldActions(self.portal)
-            self.assertFalse('reply' in object_.keys())
-            self.assertFalse('logged_in' in user.keys())
-            self.assertFalse('object_tabs' in self.actions.keys())
-            self.assertFalse('global' in self.actions.keys())
-
-    def testCharsetCleanup(self):
-        if not self.portal.hasProperty('default_charset'):
-            self.portal.manage_addProperty('default_charset', '', 'string')
-        # Test it twice
-        for i in range(2):
-            self.portal.manage_changeProperties(default_charset='latin1')
-            cleanDefaultCharset(self.portal)
-            self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                             'latin1')
-        # Test it twice
-        for i in range(2):
-            self.portal.manage_changeProperties(default_charset='')
-            cleanDefaultCharset(self.portal)
-            self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                             'nothere')
-
-    def testAutoGroupCreated(self):
-        pas = self.portal.acl_users
-        ids = pas.objectIds(['Automatic Group Plugin'])
-        if ids:
-            pas.manage_delObjects(ids)
-        addAutoGroupToPAS(self.portal)
-        self.assertEqual(pas.objectIds(['Automatic Group Plugin']),
-                         ['auto_group'])
-        plugin = pas.auto_group
-        interfaces = [info['interface']
-                      for info in pas.plugins.listPluginTypeInfo()]
-        for iface in interfaces:
-            if plugin.testImplements(iface):
-                self.assertFalse(
-                    'auto_group' not in pas.plugins.listPluginIds(iface))
-        self.assertEqual(len(pas.searchGroups(id='AuthenticatedUsers',
-                                              exact_match=True)), 1)
-
-    def testPloneS5(self):
-        pt = getToolByName(self.portal, "portal_types")
-        document = pt.restrictedTraverse('Document')
-        document.addAction('s5_presentation',
-                           name='View as presentation',
-                           action="string:${object/absolute_url}/document_s5_presentation",
-                           condition='python:object.document_s5_alter(test=True)',
-                           permission='View',
-                           category='document_actions',
-                           visible=1,
-                           )
-        action_ids = [x.getId() for x in document.listActions()]
-        self.assertTrue("s5_presentation" in action_ids)
-        # Test it twice
-        for i in range(2):
-            removeS5Actions(self.portal)
-            action_ids = [x.getId() for x in document.listActions()]
-            self.assertFalse("s5_presentation" in action_ids)
-
-    def testAddContributorToCreationPermissions(self):
-        self.portal._delRoles(['Contributor', ])
-        for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                  'ATContentTypes: Add Event',
-                  'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                  'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                  'ATContentTypes: Add News Item', ]:
-            self.portal.manage_permission(p, ['Manager', 'Owner'], True)
-        # Test it twice
-        for i in range(2):
-            addContributorToCreationPermissions(self.portal)
-            self.assertTrue('Contributor' in self.portal.valid_roles())
-            self.assertTrue(
-                'Contributor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                      'ATContentTypes: Add Event',
-                      'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                      'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                      'ATContentTypes: Add News Item', ]:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
-
-    def testAddContributerToCreationPermissionsNoStomp(self):
-        self.portal.manage_permission('Add portal content', ['Manager'], False)
-        # Test it twice
-        for i in range(2):
-            addContributorToCreationPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
-                'Add portal content') if r['selected']])
-            self.assertEqual(['Contributor', 'Manager'], roles)
-            self.assertEqual(False, bool(
-                self.portal.acquiredRolesAreUsedBy('Add portal content')))
-
-    def testAddBeta2VersioningPermissionsToNewRoles(self):
-        # This upgrade just uses GS to apply the role changes,
-        # these permissions will not have been installed previously,
-        # so this should be safe
-        for p in ['CMFEditions: Apply version control',
-                  'CMFEditions: Save new version',
-                  'CMFEditions: Access previous versions',
-                  'CMFEditions: Revert to previous versions',
-                  'CMFEditions: Checkout to location']:
-            self.portal.manage_permission(p, ['Manager', 'Owner'], True)
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal,
-                                 'profile-plone.app.upgrade.v30:3.0b1-3.0b2',
-                                 steps=["rolemap"])
-            for p in ['CMFEditions: Apply version control',
-                      'CMFEditions: Save new version',
-                      'CMFEditions: Access previous versions']:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Editor') if r['selected']])
-            for p in ['CMFEditions: Revert to previous versions',
-                      'CMFEditions: Checkout to location']:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testRemoveSharingAction(self):
-        fti = self.types['Document']
-        fti.addAction(id='local_roles', name='Sharing',
-                      action='string:${object_url}/sharing',
-                      condition=None, permission='Manage properties',
-                      category='object')
-        # Test it twice
-        for i in range(2):
-            removeSharingAction(self.portal)
-            self.assertFalse('local_roles' in [
-                             a.id for a in fti.listActions()])
-
-    def testAddEditorToCreationPermissions(self):
-        for p in ['Manage properties', 'Modify view template', 'Request review']:
-            self.portal.manage_permission(p, ['Manager', 'Owner'], True)
-        # Test it twice
-        for i in range(2):
-            addEditorToSecondaryEditorPermissions(self.portal)
-            for p in ['Manage properties', 'Modify view template', 'Request review']:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testAddEditorToCreationPermissionsNoStomp(self):
-        self.portal.manage_permission('Manage properties', ['Manager'], False)
-        # Test it twice
-        for i in range(2):
-            addEditorToSecondaryEditorPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
-                'Manage properties') if r['selected']])
-            self.assertEqual(['Editor', 'Manager'], roles)
-            self.assertEqual(False, bool(
-                self.portal.acquiredRolesAreUsedBy('Manage properties')))
-
-    def testUpdateEditActionConditionForLocking(self):
-        lockable_types = ['Document', 'Event', 'File', 'Folder',
-                          'Image', 'Link', 'News Item', 'Topic']
-        for contentType in lockable_types:
-            fti = self.types.getTypeInfo(contentType)
-            for action in fti.listActions():
-                if action.getId() == 'edit':
-                    action.condition = ''
-        # Test it twice
-        for i in range(2):
-            updateEditActionConditionForLocking(self.portal)
-            for contentType in lockable_types:
-                fti = self.types.getTypeInfo(contentType)
-                for action in fti.listActions():
-                    if action.getId() == 'edit':
-                        self.assertEqual(action.condition.text,
-                                         "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
-
-    def testUpdateEditExistingActionConditionForLocking(self):
-        fti = self.types.getTypeInfo('Document')
-        for action in fti.listActions():
-            if action.getId() == 'edit':
-                action.condition = Expression("foo")
-        # Test it twice
-        for i in range(2):
-            updateEditActionConditionForLocking(self.portal)
-            fti = self.types.getTypeInfo('Document')
-            for action in fti.listActions():
-                if action.getId() == 'edit':
-                    self.assertEqual(action.condition.text, 'foo')
-
-    def testAddOnFormUnloadRegistrationJS(self):
-        jsreg = self.portal.portal_javascripts
-        # unregister first
-        jsreg.unregisterResource('unlockOnFormUnload.js')
-        script_ids = jsreg.getResourceIds()
-        self.assertFalse('unlockOnFormUnload.js' in script_ids)
-        # Test it twice
-        for i in range(2):
-            addOnFormUnloadJS(self.portal)
-            script_ids = jsreg.getResourceIds()
-            self.assertTrue('unlockOnFormUnload.js' in script_ids)
-
-    def testUpdateTopicTitle(self):
-        topic = self.types.get('Topic')
-        topic.title = 'Old'
-        # Test it twice
-        for i in range(2):
-            updateTopicTitle(self.portal)
-            self.assertEqual(topic.title, 'Collection')
-
-    def testAddIntelligentText(self):
-        # Before the upgrade, the mime type and transforms of intelligent text
-        # are not available. They *are* here in a fresh site, so we may need
-        # to remove them first for testing. First we remove the transforms,
-        # as they depend on the mimetype being there.
-        missing_transforms = ["web_intelligent_plain_text_to_html",
-                              "html_to_web_intelligent_plain_text"]
-        ptr = self.portal.portal_transforms
-        current_transforms = ptr.objectIds()
-        for trans in missing_transforms:
-            if trans in current_transforms:
-                ptr.unregisterTransform(trans)
-        # Then we remove the mime type
-        mime_type = 'text/x-web-intelligent'
-        mtr = self.portal.mimetypes_registry
-        current_types = mtr.list_mimetypes()
-        if mime_type in current_types:
-            mtr.manage_delObjects((mime_type,))
-        # now all are gone:
-        self.assertFalse(mime_type in mtr.list_mimetypes())
-        self.assertFalse(set(ptr.objectIds()).issuperset(
-            set(missing_transforms)))
-        # Test it twice
-        for i in range(2):
-            addIntelligentText(self.portal)
-            # now all are back:
-            self.assertTrue(mime_type in mtr.list_mimetypes())
-            self.assertTrue(set(ptr.objectIds()).issuperset(
-                set(missing_transforms)))
-
-    def testInstallNewModifiers(self):
-        # ensure the new modifiers are installed
-        modifiers = self.portal.portal_modifier
-        self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                        modifiers.objectIds())
-        modifiers.manage_delObjects(['AbortVersioningOfLargeFilesAndImages',
-                                     'SkipVersioningOfLargeFilesAndImages'])
-        self.assertFalse('AbortVersioningOfLargeFilesAndImages' in
-                         modifiers.objectIds())
-        installNewModifiers(self.portal)
-        self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                        modifiers.objectIds())
-        self.assertTrue('SkipVersioningOfLargeFilesAndImages' in
-                        modifiers.objectIds())
-
-    def testInstallNewModifiersTwice(self):
-        # ensure that we get no errors when run twice
-        installNewModifiers(self.portal)
-        installNewModifiers(self.portal)
-
-    def testInstallNewModifiersDoesNotStompChanges(self):
-        # ensure that reinstalling doesn't kill customizations
-        modifiers = self.portal.portal_modifier
-        modifiers.AbortVersioningOfLargeFilesAndImages.max_size = 1000
-        installNewModifiers(self.portal)
-        self.assertEqual(modifiers.AbortVersioningOfLargeFilesAndImages.max_size,
-                         1000)
-
-    def testInstallNewModifiersNoTool(self):
-        # make sure there are no errors if the tool is missing
-        self.portal._delObject('portal_modifier')
-        installNewModifiers(self.portal)
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.0'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v2_5_x))
-    suite.addTest(makeSuite(TestMigrations_v3_0_Actions))
-    suite.addTest(makeSuite(TestMigrations_v3_0_alpha1))
-    suite.addTest(makeSuite(TestMigrations_v3_0_alpha2))
-    suite.addTest(makeSuite(TestMigrations_v3_0))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v31/__init__.py b/plone/app/upgrade/v31/__init__.py
deleted file mode 100644
index 7c01bcd..0000000
--- a/plone/app/upgrade/v31/__init__.py
+++ /dev/null
@@ -1,2 +0,0 @@
-import betas
-import final_three1x
diff --git a/plone/app/upgrade/v31/betas.py b/plone/app/upgrade/v31/betas.py
deleted file mode 100644
index 1748c17..0000000
--- a/plone/app/upgrade/v31/betas.py
+++ /dev/null
@@ -1,94 +0,0 @@
-from borg.localrole.utils import replace_local_role_manager
-from plone.portlets.interfaces import IPortletType
-from zope.component import getUtilitiesFor
-from zope.interface import Interface
-
-from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.browser.manage import ImportStepsView
-from Products.GenericSetup.browser.manage import ExportStepsView
-
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three0_beta1(portal):
-    """3.0.6 -> 3.1-beta1
-    """
-    out = []
-
-    loadMigrationProfile(
-        portal, 'profile-plone.app.upgrade.v31:3.0.6-3.1beta1')
-
-    addBrowserLayer(portal, out)
-    addCollectionAndStaticPortlets(portal, out)
-    migratePortletTypeRegistrations(portal, out)
-    removeDoubleGenericSetupSteps(portal, out)
-    reinstallCMFPlacefulWorkflow(portal, out)
-    replace_local_role_manager(portal)
-
-    return out
-
-
-def addBrowserLayer(portal, out):
-    qi = getToolByName(portal, "portal_quickinstaller", None)
-    if qi is None:
-        # Newer Plone without qi.
-        return
-    if not qi.isProductInstalled("plone.browserlayer"):
-        qi.installProduct("plone.browserlayer", locked=True)
-        out.append("Installed plone.browserlayer")
-
-
-def addCollectionAndStaticPortlets(portal, out):
-    qi = getToolByName(portal, "portal_quickinstaller", None)
-    if qi is None:
-        # Newer Plone without qi.
-        return
-    if not qi.isProductInstalled("plone.portlet.static"):
-        qi.installProduct("plone.portlet.static", locked=True)
-        out.append("Installed plone.portlet.static")
-    if not qi.isProductInstalled("plone.portlet.collection"):
-        qi.installProduct("plone.portlet.collection", locked=True)
-        out.append("Installed plone.portlet.collection")
-
-
-def migratePortletTypeRegistrations(portal, out):
-    for name, portletType in getUtilitiesFor(IPortletType):
-        if portletType.for_ is None:
-            portletType.for_ = [Interface]
-        elif type(portletType.for_) is not list:
-            portletType.for_ = [portletType.for_]
-
-    out.append("Upgraded portlet types to support multiple " +
-               "portlet manager interfaces.")
-
-
-def removeDoubleGenericSetupSteps(portal, out):
-    """Remove all GenericSetup steps that are registered both using
-    zcml and in the persistent registry from the persistent registry.
-    """
-    st = getToolByName(portal, "portal_setup")
-    view = ImportStepsView(st, None)
-    steps = [step["id"] for step in view.doubleSteps()]
-    if steps:
-        for step in steps:
-            st._import_registry.unregisterStep(step)
-        st._p_changed = True
-        out.append("Removed doubly registered GenericSetup import steps: %s" %
-                   " ".join(steps))
-
-    view = ExportStepsView(st, None)
-    steps = [step["id"] for step in view.doubleSteps()]
-    if steps:
-        for step in steps:
-            st._export_registry.unregisterStep(step)
-        out.append("Removed doubly registered GenericSetup export steps: %s" %
-                   " ".join(steps))
-
-
-def reinstallCMFPlacefulWorkflow(portal, out):
-    qi = getToolByName(portal, 'portal_quickinstaller', None)
-    if qi is not None:
-        installed = qi.isProductInstalled('CMFPlacefulWorkflow')
-        if installed:
-            qi.reinstallProducts(['CMFPlacefulWorkflow'])
-            out.append('Reinstalled CMFPlacefulWorkflow')
diff --git a/plone/app/upgrade/v31/configure.zcml b/plone/app/upgrade/v31/configure.zcml
deleted file mode 100644
index 31d2524..0000000
--- a/plone/app/upgrade/v31/configure.zcml
+++ /dev/null
@@ -1,98 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <!-- Plone 3.1.x -->
-
-    <genericsetup:upgradeStep
-        source="3.0.6"
-        destination="3.1-beta1"
-        title="Upgrade from Plone 3.0.6 to Plone 3.1-beta1"
-        profile="Products.CMFPlone:plone"
-        handler=".betas.three0_beta1"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1-beta1"
-        destination="3.1-rc1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1-rc1"
-        destination="3.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1"
-        destination="3.1.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.1"
-        destination="3.1.2"
-        title="Upgrade from Plone 3.1.1 to Plone 3.1.2"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three1x.three11_three12"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.2"
-        destination="3.1.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.3"
-        destination="3.1.4"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.4"
-        destination="3.1.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three1x.three14_three15"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.5"
-        destination="3.1.5.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.5.1"
-        destination="3.1.6"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.6"
-        destination="3.1.7"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v31/data/test-base.zexp b/plone/app/upgrade/v31/data/test-base.zexp
deleted file mode 100644
index 10d3488..0000000
Binary files a/plone/app/upgrade/v31/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v31/data/test-full.zexp b/plone/app/upgrade/v31/data/test-full.zexp
deleted file mode 100644
index dac79cd..0000000
Binary files a/plone/app/upgrade/v31/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v31/final_three1x.py b/plone/app/upgrade/v31/final_three1x.py
deleted file mode 100644
index f0ab05d..0000000
--- a/plone/app/upgrade/v31/final_three1x.py
+++ /dev/null
@@ -1,14 +0,0 @@
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three11_three12(portal):
-    """3.1.1 -> 3.1.2"""
-    pass
-
-
-def three14_three15(portal):
-    """3.1.4 -> 3.1.5"""
-
-    out = []
-
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v31:3.1.3-3.1.4')
diff --git a/plone/app/upgrade/v31/profiles.zcml b/plone/app/upgrade/v31/profiles.zcml
deleted file mode 100644
index 3752385..0000000
--- a/plone/app/upgrade/v31/profiles.zcml
+++ /dev/null
@@ -1,24 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <genericsetup:registerProfile
-        name="3.0.6-3.1beta1"
-        title="Upgrade profile for Plone 3.0.6 to Plone 3.1-beta1"
-        description="This profile contains configuration changes that are applied during the Plone 3.0.6 to 3.1-beta1 upgrade."
-        directory="profiles/three0_beta1"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-  <genericsetup:registerProfile
-      name="3.1.3-3.1.4"
-      title="Upgrade profile for Plone 3.1.3 to Plone 3.1.4"
-      description="This profile contains configuration changes that are applied during the Plone 3.1.3 to 3.1.4 upgrade."
-      directory="profiles/three13_three14"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-</configure>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/actions.xml b/plone/app/upgrade/v31/profiles/three0_beta1/actions.xml
deleted file mode 100644
index c531feb..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/actions.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="object">
-  <object name="local_roles" meta_type="CMF Action" i18n:domain="plone">
-   <property name="permissions">
-    <element value="Sharing page: Delegate roles"/>
-   </property>
-  </object>
- </object>
-
-</object>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml b/plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml
deleted file mode 100644
index 91aa754..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-      interface="plone.keyring.interfaces.IKeyManager"
-      factory="plone.keyring.keymanager.KeyManager"
-      />
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml b/plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml
deleted file mode 100644
index 6584ae4..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript cacheable="True" compression="none" cookable="True"
-    enabled="True" expression="" id="jquery.js" inline="False"
-    insert-top="" />
- 	<javascript cacheable="True" compression="safe" cookable="True"
-    enabled="True" expression="" id="jquery-integration.js" inline="False"
-    insert-after="jquery.js" />
-  <javascript cacheable="True" compression="safe" cookable="True"
-    enabled="False" expression="" id="fullscreenmode.js" inline="False" />
-  <javascript id="collapsiblesections.js" compression="full" />
-  <javascript id="accessibility.js" update="" compression="full" />
-  <!-- calendarpopup.js has been deprecated and disabled on new sites,
-       upgrade leaves it enabled -->
-</object>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml b/plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml
deleted file mode 100644
index d6cdd06..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<metadata>
-  <version>3.1alpha1</version>
-</metadata>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml b/plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml
deleted file mode 100644
index 5485127..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml
+++ /dev/null
@@ -1,77 +0,0 @@
-<?xml version="1.0"?>
-<portlets>
- <!-- Modify existing portlet type registrations -->
-
- <portlet
-   addview="portlets.Calendar"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Classic"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.News"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Events"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Recent"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Review"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.rss"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Search"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
-</portlets>
diff --git a/plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml b/plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml
deleted file mode 100644
index 0ff2314..0000000
--- a/plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="enable_inline_editing" type="boolean">True</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v31/tests.py b/plone/app/upgrade/v31/tests.py
deleted file mode 100644
index 7fa994a..0000000
--- a/plone/app/upgrade/v31/tests.py
+++ /dev/null
@@ -1,122 +0,0 @@
-from borg.localrole.utils import replace_local_role_manager
-from zope.interface import noLongerProvides
-
-from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import version_match
-
-from plone.app.upgrade.v31.betas import reinstallCMFPlacefulWorkflow
-
-
-class TestMigrations_v3_1(MigrationTest):
-
-    def afterSetUp(self):
-        self.qi = self.portal.portal_quickinstaller
-        self.wf = self.portal.portal_workflow
-        self.ps = self.portal.portal_setup
-
-    def testReinstallCMFPlacefulWorkflow(self):
-        try:
-            from Products.CMFPlacefulWorkflow.interfaces import IPlacefulMarker
-        except ImportError:
-            return
-        # first the product needs to be installed
-        self.qi.installProduct('CMFPlacefulWorkflow')
-        # Delete existing logs to prevent race condition
-        self.ps.manage_delObjects(self.ps.objectIds())
-        # We remove the new marker, to ensure it's added on reinstall
-        if IPlacefulMarker.providedBy(self.wf):
-            noLongerProvides(self.wf, IPlacefulMarker)
-        reinstallCMFPlacefulWorkflow(self.portal, [])
-        self.assertTrue(IPlacefulMarker.providedBy(self.wf))
-
-    def testReinstallCMFPlacefulWorkflowDoesNotInstall(self):
-        reinstallCMFPlacefulWorkflow(self.portal, [])
-        self.assertFalse(self.qi.isProductInstalled('CMFPlacefulWorkflow'))
-
-    def testReinstallCMFPlacefulWorkflowNoTool(self):
-        self.portal._delObject('portal_quickinstaller')
-        reinstallCMFPlacefulWorkflow(self.portal, [])
-
-    def testReplaceLocalRoleManager(self):
-        # first we replace the local role manager with the one from PlonePAS
-        uf = self.portal.acl_users
-        # deactivate and remove the borg plugin
-        uf.plugins.removePluginById('borg_localroles')
-        uf.manage_delObjects(['borg_localroles'])
-        # activate the standard plugin
-        uf.plugins.activatePlugin(ILocalRolesPlugin, 'local_roles')
-        # Bring things back to normal
-        replace_local_role_manager(self.portal)
-        plugins = uf.plugins.listPlugins(ILocalRolesPlugin)
-        self.assertEqual(len(plugins), 1)
-        self.assertEqual(plugins[0][0], 'borg_localroles')
-
-    def testReplaceLocalRoleManagerTwice(self):
-        # first we replace the local role manager with the one from PlonePAS
-        uf = self.portal.acl_users
-        # deactivate and remove the borg plugin
-        uf.plugins.removePluginById('borg_localroles')
-        uf.manage_delObjects(['borg_localroles'])
-        # activate the standard plugin
-        uf.plugins.activatePlugin(ILocalRolesPlugin, 'local_roles')
-        # run the upgrade twice
-        replace_local_role_manager(self.portal)
-        replace_local_role_manager(self.portal)
-        plugins = uf.plugins.listPlugins(ILocalRolesPlugin)
-        self.assertEqual(len(plugins), 1)
-        self.assertEqual(plugins[0][0], 'borg_localroles')
-
-    def testReplaceLocalRoleManagerNoPlugin(self):
-        # first we replace the local role manager with the one from PlonePAS
-        uf = self.portal.acl_users
-        # deactivate and remove the borg plugin
-        uf.plugins.removePluginById('borg_localroles')
-        uf.manage_delObjects(['borg_localroles'])
-        # delete the standard plugin
-        uf.manage_delObjects(['local_roles'])
-        # Run the upgrade, which shouldn't fail even if the expected
-        # plugin is missing
-        replace_local_role_manager(self.portal)
-        plugins = uf.plugins.listPlugins(ILocalRolesPlugin)
-        self.assertEqual(len(plugins), 1)
-        self.assertEqual(plugins[0][0], 'borg_localroles')
-
-    def testReplaceLocalRoleManagerNoPAS(self):
-        uf = self.portal.acl_users
-        # delete the plugin registry
-        uf._delObject('plugins')
-        replace_local_role_manager(self.portal)
-
-    def testReplaceLocalRoleManagerNoUF(self):
-        # Delete the user folder
-        replace_local_role_manager(self.portal)
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.1'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v3_1))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v32/__init__.py b/plone/app/upgrade/v32/__init__.py
deleted file mode 100644
index 6bc2385..0000000
--- a/plone/app/upgrade/v32/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-import betas
diff --git a/plone/app/upgrade/v32/betas.py b/plone/app/upgrade/v32/betas.py
deleted file mode 100644
index 3d3bd53..0000000
--- a/plone/app/upgrade/v32/betas.py
+++ /dev/null
@@ -1,13 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three1_beta1(portal):
-    """3.1.7 -> 3.2beta1
-    """
-    actions = getToolByName(portal, 'portal_actions')
-    if 'iterate_checkin' in actions.object_buttons.objectIds():
-        loadMigrationProfile(
-            portal,
-            'profile-plone.app.upgrade.v32:3.2a1-3.2a2-iterate')
diff --git a/plone/app/upgrade/v32/configure.zcml b/plone/app/upgrade/v32/configure.zcml
deleted file mode 100644
index 40b6631..0000000
--- a/plone/app/upgrade/v32/configure.zcml
+++ /dev/null
@@ -1,56 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <genericsetup:upgradeStep
-        source="3.1.7"
-        destination="3.2a1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2a1"
-        destination="3.2rc1"
-        title="Update permissions on iterate actions."
-        profile="Products.CMFPlone:plone"
-        handler=".betas.three1_beta1"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2rc1"
-        destination="3.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2"
-        destination="3.2.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2.1"
-        destination="3.2.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2.2"
-        destination="3.2.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v32/data/test-base.zexp b/plone/app/upgrade/v32/data/test-base.zexp
deleted file mode 100644
index 1c5c620..0000000
Binary files a/plone/app/upgrade/v32/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v32/data/test-full.zexp b/plone/app/upgrade/v32/data/test-full.zexp
deleted file mode 100644
index 7b41a2f..0000000
Binary files a/plone/app/upgrade/v32/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v32/profiles.zcml b/plone/app/upgrade/v32/profiles.zcml
deleted file mode 100644
index 552ce28..0000000
--- a/plone/app/upgrade/v32/profiles.zcml
+++ /dev/null
@@ -1,24 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-  <genericsetup:registerProfile
-      name="3.2a1-3.2a2-iterate"
-      title="Upgrade profile for Plone 3.2a1 to Plone 3.2a2 with Iterate"
-      description="This profile contains configuration changes that are applied during the Plone 3.2a1 to 3.2a2 upgrade when Iterate is installed."
-      directory="profiles/three1_beta1_iterate"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-  <genericsetup:registerProfile
-      name="3.2-3.2.1"
-      title="Upgrade profile for Plone 3.2 to Plone 3.2.1"
-      description="This profile contains configuration changes that are applied during the Plone 3.2 to 3.2.1 upgrade."
-      directory="v3_2/profiles/three2_three21"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-</configure>
diff --git a/plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml b/plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml
deleted file mode 100644
index b5a214a..0000000
--- a/plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="object_buttons">
-  <object name="iterate_checkin">
-   <property name="permissions">
-    <element value="iterate : Check in content"/>
-   </property>
-  </object>
-  <object name="iterate_checkout">
-   <property name="permissions">
-    <element value="iterate : Check out content"/>
-   </property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml b/plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml
deleted file mode 100644
index e038b5e..0000000
--- a/plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="localTimeOnlyFormat" type="string">%I:%M %p</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v32/tests.py b/plone/app/upgrade/v32/tests.py
deleted file mode 100644
index 02a2a06..0000000
--- a/plone/app/upgrade/v32/tests.py
+++ /dev/null
@@ -1,55 +0,0 @@
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import version_match
-from plone.app.upgrade.v32.betas import three1_beta1
-
-
-class TestMigrations_v3_2(MigrationTest):
-
-    def afterSetUp(self):
-        self.qi = self.portal.portal_quickinstaller
-        self.actions = self.portal.portal_actions
-        self.migration = self.portal.portal_migration
-
-    def testIterateActionsMigratedIfIterateInstalled(self):
-        self.qi.installProduct('plone.app.iterate')
-        self.actions.object_buttons.iterate_checkin.permissions = (
-            'Modify portal content',)
-        three1_beta1(self.portal)
-        self.assertEqual(
-            self.actions.object_buttons.iterate_checkin.permissions,
-            ('iterate : Check in content',))
-
-    def testIterateInstalledButActionMissing(self):
-        self.qi.installProduct('plone.app.iterate')
-        self.actions.object_buttons.manage_delObjects(['iterate_checkin'])
-        three1_beta1(self.portal)
-        self.assertFalse('iterate_checkin' in
-                         self.actions.object_buttons.objectIds())
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.2'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v3_2))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v33/__init__.py b/plone/app/upgrade/v33/__init__.py
deleted file mode 100644
index baed573..0000000
--- a/plone/app/upgrade/v33/__init__.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three2_three3(portal):
-    """3.2.1 -> 3.3a1
-    """
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.2.1-3.3a1')
-    maybeUpdateLinkView(portal)
-
-
-def three3_rc3_three3_rc4(portal):
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.3rc3-3.3')
-    cookCSSRegistries(portal)
-
-
-def maybeUpdateLinkView(portal):
-    ttool = getToolByName(portal, 'portal_types')
-    link_fti = ttool.Link
-    if link_fti.default_view == 'link_view':
-        link_fti.view_methods = ('link_redirect_view',)
-        link_fti.default_view = 'link_redirect_view'
-        link_fti.immediate_view = 'link_redirect_view'
-
-
-def cookCSSRegistries(portal):
-    csstool = getToolByName(portal, 'portal_css')
-    for resource in csstool.resources:
-        resource.getCookedExpression()
-    csstool.cookResources()
diff --git a/plone/app/upgrade/v33/configure.zcml b/plone/app/upgrade/v33/configure.zcml
deleted file mode 100644
index da4fe85..0000000
--- a/plone/app/upgrade/v33/configure.zcml
+++ /dev/null
@@ -1,116 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <genericsetup:upgradeStep
-        source="3.2.3"
-        destination="3.3b1"
-        title="Add link and lock settings for Plone 3.3"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.v33.three2_three3"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3b1"
-        destination="3.3rc1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc1"
-        destination="3.3rc2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc2"
-        destination="3.3rc3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc3"
-        destination="3.3rc4"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc4"
-        destination="3.3rc5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc5"
-        destination="3.3"
-        title="Modify actions to work with the new INavigationRoot"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.v33.three3_rc3_three3_rc4"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3"
-        destination="3.3.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.1"
-        destination="3.3.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.2"
-        destination="3.3.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.3"
-        destination="3.3.4"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <!-- the following are placeholders for anticipated releases in the 3.3.x series.
-         if these are released with real profile changes, we'll need to merge the
-         upgrade steps here -->
-
-    <genericsetup:upgradeStep
-        source="3.3.4"
-        destination="3.3.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.5"
-        destination="3.3.6"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v33/data/test-base.zexp b/plone/app/upgrade/v33/data/test-base.zexp
deleted file mode 100644
index e3872c2..0000000
Binary files a/plone/app/upgrade/v33/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v33/data/test-full.zexp b/plone/app/upgrade/v33/data/test-full.zexp
deleted file mode 100644
index 6ac5779..0000000
Binary files a/plone/app/upgrade/v33/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v33/profiles.zcml b/plone/app/upgrade/v33/profiles.zcml
deleted file mode 100644
index ba73265..0000000
--- a/plone/app/upgrade/v33/profiles.zcml
+++ /dev/null
@@ -1,24 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-  <genericsetup:registerProfile
-      name="3.2.1-3.3a1"
-      title="Upgrade profile for Plone 3.2.1 to Plone 3.3a1"
-      description="This profile adds default link and lock settings for Plone 3.3"
-      directory="profiles/three2_three3"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-  <genericsetup:registerProfile
-      name="3.3rc3-3.3"
-      title="Upgrade profile for Plone 3.3rc3 to Plone 3.3"
-      description="This profile contains configuration changes that are applied during the Plone 3.3rc3 to 3.3 upgrade."
-      directory="profiles/three3_rc3_three3_rc4"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-</configure>
diff --git a/plone/app/upgrade/v33/profiles/three2_three3/actions.xml b/plone/app/upgrade/v33/profiles/three2_three3/actions.xml
deleted file mode 100644
index fcb667d..0000000
--- a/plone/app/upgrade/v33/profiles/three2_three3/actions.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="site_actions" meta_type="CMF Action Category">
-  <object name="sitemap" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/sitemap</property>
-  </object>
-  <object name="accessibility" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/accessibility-info</property>
-  </object>
-  <object name="contact" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/contact-info</property>
-  </object>
- </object>
- <object name="user" meta_type="CMF Action Category">
-  <object name="preferences" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/plone_memberprefs_panel</property>
-  </object>
-  <object name="login" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/login_form</property>
-  </object>
-  <object name="join" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/join_form</property>
-  </object>
-  <object name="undo" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/undo_form</property>
-  </object>
-  <object name="logout" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/logout</property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml b/plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml
deleted file mode 100644
index 36f2ba3..0000000
--- a/plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="redirect_links" type="boolean">True</property>
-  <property name="lock_on_ttw_edit" type="boolean">True</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml b/plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml
deleted file mode 100644
index fcb667d..0000000
--- a/plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="site_actions" meta_type="CMF Action Category">
-  <object name="sitemap" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/sitemap</property>
-  </object>
-  <object name="accessibility" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/accessibility-info</property>
-  </object>
-  <object name="contact" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/contact-info</property>
-  </object>
- </object>
- <object name="user" meta_type="CMF Action Category">
-  <object name="preferences" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/plone_memberprefs_panel</property>
-  </object>
-  <object name="login" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/login_form</property>
-  </object>
-  <object name="join" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/join_form</property>
-  </object>
-  <object name="undo" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/undo_form</property>
-  </object>
-  <object name="logout" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/logout</property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v33/tests.py b/plone/app/upgrade/v33/tests.py
deleted file mode 100644
index bd9de99..0000000
--- a/plone/app/upgrade/v33/tests.py
+++ /dev/null
@@ -1,98 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.v33 import three2_three3
-from plone.app.upgrade.utils import version_match
-
-
-class TestMigrations_v3_3(MigrationTest):
-
-    def afterSetUp(self):
-        self.types = self.portal.portal_types
-        self.properties = getToolByName(self.portal, 'portal_properties')
-
-    def _upgrade(self):
-        three2_three3(self.portal)
-
-    def testRedirectLinksProperty(self):
-        del self.properties.site_properties.redirect_links
-        self._upgrade()
-        self.assertEqual(True,
-                         self.properties.site_properties.getProperty('redirect_links'))
-
-    def testLinkDefaultView(self):
-        self.types.Link.default_view = 'link_view'
-        self.types.Link.immediate_view = 'link_view'
-        self.types.Link.view_methods = ('link_view',)
-        self._upgrade()
-        self.assertEqual(self.types.Link.default_view, 'link_redirect_view')
-        self.assertEqual(self.types.Link.immediate_view, 'link_redirect_view')
-        self.assertEqual(self.types.Link.view_methods, ('link_redirect_view',))
-
-    def testCustomizedLinkDefaultView(self):
-        # but only change if old default was 'link_view'
-        self.types.Link.default_view = 'foobar'
-        self.types.Link.immediate_view = 'foobar'
-        self.types.Link.view_methods = ('foobar',)
-        self._upgrade()
-        self.assertEqual(self.types.Link.default_view, 'foobar')
-        self.assertEqual(self.types.Link.immediate_view, 'foobar')
-        self.assertEqual(self.types.Link.view_methods, ('foobar',))
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFolderUpgrade(self):
-        from plone.folder.interfaces import IOrderableFolder
-        self.importFile(__file__, 'test-full.zexp')
-        # `portal_type` and `Type` can be checked before migration...
-        oldsite = getattr(self.app, self.site_id)
-        ids = 'news', 'events', 'Members'
-        for id in ids:
-            obj = oldsite[id]
-            self.assertEqual(obj.portal_type, 'Large Plone Folder')
-            self.assertEqual(obj.Type(), 'Large Folder')
-            brain, = oldsite.portal_catalog(getId=id)   # asserts only one
-            self.assertEqual(brain.portal_type, 'Large Plone Folder')
-            self.assertEqual(brain.Type, 'Large Folder')
-        # now let's migrate...
-        oldsite, result = self.migrate()
-        self.assertFalse(oldsite.portal_migration.needUpgrading())
-        # after migration `/news`, `/events` and `/Members` are based on
-        # `plone.(app.)folder`, but still have no ordering set...
-        for id in ids:
-            obj = oldsite[id]
-            self.assertTrue(IOrderableFolder.providedBy(obj),
-                            '%s not orderable?' % id)
-            self.assertEqual(obj._ordering, 'unordered',
-                             '%s has no `_ordering`?' % id)
-            self.assertEqual(obj.portal_type, 'Folder')
-            self.assertEqual(obj.Type(), 'Folder')
-            brain, = oldsite.portal_catalog(getId=id)   # asserts only one
-            self.assertEqual(brain.portal_type, 'Folder')
-            self.assertEqual(brain.Type, 'Folder')
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.3'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v3_3))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index 2cda0ba..08750b4 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -148,11 +148,6 @@ def markProductsInstalledForUninstallableProfiles(context):
     'plone.app.intid',
     'plone.app.referenceablebehavior',
     'plone.app.relationfield',
-    'plone.app.upgrade.v25',
-    'plone.app.upgrade.v30',
-    'plone.app.upgrade.v31',
-    'plone.app.upgrade.v32',
-    'plone.app.upgrade.v33',
     'plone.app.upgrade.v40',
     'plone.app.upgrade.v41',
     'plone.app.upgrade.v42',


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-10-22T14:35:10-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/aac74f6fbdfd07453035d0918feb81335e1b7d01

Copy method from v30

Files changed:
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/configure.zcml

diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index 05d639a..5a6a9e4 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -591,3 +591,11 @@ def alpha4_alpha5(context):
     """
     loadMigrationProfile(
         context, 'profile-plone.app.upgrade.v40:4alpha4-4alpha5')
+
+
+def installNewModifiers(context):
+    from Products.CMFEditions.StandardModifiers import install
+    modifiers = getToolByName(context, 'portal_modifier', None)
+    if modifiers is not None:
+        install(modifiers)
+        logger.info('Added new CMFEditions modifiers.')
diff --git a/plone/app/upgrade/v40/configure.zcml b/plone/app/upgrade/v40/configure.zcml
index a51e4d6..714d9da 100644
--- a/plone/app/upgrade/v40/configure.zcml
+++ b/plone/app/upgrade/v40/configure.zcml
@@ -120,7 +120,7 @@
 
         <genericsetup:upgradeStep
             title="Add new CMFEditions default modifiers."
-            handler="plone.app.upgrade.v30.final_three0x.installNewModifiers"
+            handler=".alphas.installNewModifiers"
             />
 
         <genericsetup:upgradeStep


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-10-23T09:15:37-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/8066f517ea9524c476e741dfeeaaf59a402eb764

These attributes do not exist anymore

Files changed:
M plone/app/upgrade/utils.py
M plone/app/upgrade/v50/alphas.py
M plone/app/upgrade/v50/betas.py

diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index e85deb1..e482bca 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -344,3 +344,10 @@ def updateIconsInBrains(context, typesToUpdate=None):
         i += 1
     pghandler.finish()
     logger.info('Updated `getIcon` metadata.')
+
+
+def get_property(context, property_name, default_value=None):
+    try:
+        return getattr(context, property_name, default_value)
+    except AttributeError:
+        return default_value
diff --git a/plone/app/upgrade/v50/alphas.py b/plone/app/upgrade/v50/alphas.py
index 53a6567..f7af84d 100644
--- a/plone/app/upgrade/v50/alphas.py
+++ b/plone/app/upgrade/v50/alphas.py
@@ -9,6 +9,7 @@
 from Products.CMFPlone.interfaces import ISearchSchema
 from Products.CMFPlone.interfaces import ISiteSchema
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import get_property
 from plone.app.upgrade.v40.alphas import cleanUpToolRegistry
 from plone.app.vocabularies.types import BAD_TYPES
 from plone.keyring.interfaces import IKeyManager
@@ -193,7 +194,11 @@ def upgrade_editing_controlpanel_settings(context):
         # ignore the setting.
         if site_properties.default_editor != 'Kupu':
             settings.default_editor = site_properties.default_editor
-        settings.lock_on_ttw_edit = site_properties.lock_on_ttw_edit
+        settings.lock_on_ttw_edit = get_property(
+            site_properties,
+            'lock_on_ttw_edit',
+            None,
+        )
 
 
 def upgrade_maintenance_controlpanel_settings(context):
@@ -218,7 +223,11 @@ def upgrade_maintenance_controlpanel_settings(context):
     except KeyError:
         settings = False
     if settings:
-        settings.days = site_properties.number_of_days_to_keep
+        settings.days = get_property(
+            site_properties,
+            'number_of_days_to_keep',
+            None,
+        )
 
 
 def upgrade_navigation_controlpanel_settings(context):
@@ -252,7 +261,11 @@ def upgrade_navigation_controlpanel_settings(context):
         settings.show_all_parents = navigation_properties.getProperty(
             'showAllParents')
         allTypes = types_tool.listContentTypes()
-        blacklist = navigation_properties.metaTypesNotToList
+        blacklist = get_property(
+            navigation_properties,
+            'metaTypesNotToList',
+            default_value=[],
+        )
         settings.displayed_types = tuple([
             t for t in allTypes if t not in blacklist
             and t not in BAD_TYPES
@@ -289,9 +302,14 @@ def upgrade_search_controlpanel_settings(context):
 
     if site_properties.hasProperty('enable_livesearch'):
         settings.enable_livesearch = site_properties.enable_livesearch
+    types_not_searched = get_property(
+        site_properties,
+        'types_not_searched',
+        default_value=[],
+    )
     settings.types_not_searched = tuple([
         t for t in types_tool.listContentTypes()
-        if t in site_properties.types_not_searched and
+        if t in types_not_searched and
         t not in BAD_TYPES
     ])
 
@@ -319,7 +337,8 @@ def upgrade_site_controlpanel_settings(context):
     except KeyError:
         settings = False
     settings.site_title = unicode(portal.title)
-    settings.webstats_js = unicode(site_properties.webstats_js)
-    settings.enable_sitemap = site_properties.enable_sitemap
+    webstat_js = get_property(site_properties, 'webstats_js', '')
+    settings.webstats_js = unicode(webstat_js)
+    settings.enable_sitemap = get_property(site_properties, 'enable_sitemap')
     if site_properties.hasProperty('exposeDCMetaTags'):
         settings.exposeDCMetaTags = site_properties.exposeDCMetaTags
diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index bfb5bc8..c49cc8e 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import get_property
 from plone.registry.interfaces import IRegistry
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
@@ -135,7 +136,11 @@ def upgrade_markup_controlpanel_settings(context):
     except KeyError:
         settings = False
     if settings:
-        settings.default_type = site_properties.default_contenttype
+        settings.default_type = get_property(
+            site_properties,
+            'default_contenttype',
+            None,
+        )
 
         forbidden_types = site_properties.getProperty('forbidden_contenttypes')
         forbidden_types = list(forbidden_types) if forbidden_types else []


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-10-23T09:15:37-04:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/20011caf4906282fa3c52d942f3840b1eed87562

Cleanup setup.py

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/configure.zcml
M setup.py
D plone/app/upgrade/gruf_bbb.py

diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index 5b8931d..8ca157d 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -21,16 +21,6 @@ def getNonInstallableProducts(self):
             'plone.app.upgrade.v51',
         ]
 
-# Make sure folks upgrading from Plone 2.1 see a helpful message telling them
-# how to do a two-stage upgrade, instead of a GroupUserFolder error.
-try:
-    from Products.GroupUserFolder.GroupUserFolder import GroupUserFolder
-except ImportError:
-    from plone.app.upgrade import gruf_bbb
-    sys.modules['Products.GroupUserFolder'] = gruf_bbb
-    sys.modules['Products.GroupUserFolder.GroupUserFolder'] = gruf_bbb
-
-
 try:
     from zope.app.cache.interfaces.ram import IRAMCache
 except ImportError:
diff --git a/plone/app/upgrade/configure.zcml b/plone/app/upgrade/configure.zcml
index 09b00ec..e88c052 100644
--- a/plone/app/upgrade/configure.zcml
+++ b/plone/app/upgrade/configure.zcml
@@ -16,11 +16,4 @@
         name="plone.app.upgrade"
         />
 
-    <browser:page
-        name="index.html"
-        for=".gruf_bbb.UpgradeProcessError"
-        class=".gruf_bbb.UpgradeProcessErrorView"
-        permission="zope.Public"
-        />
-
 </configure>
diff --git a/plone/app/upgrade/gruf_bbb.py b/plone/app/upgrade/gruf_bbb.py
deleted file mode 100644
index d1033ba..0000000
--- a/plone/app/upgrade/gruf_bbb.py
+++ /dev/null
@@ -1,24 +0,0 @@
-from persistent import Persistent
-from Products.Five import BrowserView
-
-
-class UpgradeProcessError(Exception):
-    """Two-stage upgrade required."""
-
-
-class GroupUserFolder(Persistent):
-    """Dummy GRUF for the purpose of raising our exception
-       when its iterator is called by the ZPublisher validation hook
-    """
-
-    def __iter__(self):
-        raise UpgradeProcessError
-
-
-class UpgradeProcessErrorView(BrowserView):
-
-    def __call__(self):
-        return ('Upgrades from Plone < 2.5 are not supported. Please do a '
-                'two-stage upgrade by upgrading to Plone 3 first. See '
-                '<a href="http://plone.org/upgrade">the upgrade '
-                'manual</a> for details.')
diff --git a/setup.py b/setup.py
index a504f59..594471f 100644
--- a/setup.py
+++ b/setup.py
@@ -32,54 +32,33 @@
     zip_safe=False,
     extras_require=dict(
         test=[
+            'zope.site',
             'mock',
-            'Products.CMFPlacefulWorkflow',
-            'Products.CMFQuickInstallerTool',
-            'plone.contentrules',
-            'plone.app.i18n',
-            'plone.app.iterate',
-            'plone.app.openid',
-            'plone.app.redirector',
-            'plone.app.viewletmanager',
             'plone.app.testing',
             'plone.app.theming',
         ]
     ),
     install_requires=[
         'setuptools',
-        'borg.localrole',
-        'five.localsitemanager',
         'plone.portlets',
-        'plone.session',
         'plone.app.folder',
-        'plone.app.portlets',
         'transaction',
         'zope.component',
         'zope.interface',
-        'zope.location',
         'zope.ramcache',
-        'zope.site',
         'Acquisition',
         'Products.CMFPlone',
-        'Products.Archetypes',
-        'Products.contentmigration',
         'Products.CMFCore',
-        'Products.CMFDiffTool',
         'Products.CMFEditions',
-        'Products.CMFFormController',
         'Products.CMFQuickInstallerTool',
-        'Products.CMFUid',
-        'Products.DCWorkflow',
         'Products.GenericSetup>=1.8.1',
-        'Products.MimetypesRegistry',
-        # 'Products.PloneLanguageTool',
         'Products.PlonePAS',
         'Products.PluggableAuthService',
-        'Products.PortalTransforms',
-        'Products.ResourceRegistries',
-        'Products.SecureMailHost',  # For migration only, when can we remove this?
         'Products.ZCatalog >= 2.13.4',
         'Zope2',
+        'plone.contentrules',
+        'plone.app.iterate',
+        'plone.app.viewletmanager',
     ],
     entry_points="""
     [z3c.autoinclude.plugin]


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-10-23T14:33:34-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.upgrade/commit/f4e80d030dee4ea5e7bc902da95a8c800f234a07

Merge pull request #91 from plone/gforcada-remove-old-upgrades

Remove (really) old upgrades

Files changed:
M CHANGES.rst
M plone/app/upgrade/__init__.py
M plone/app/upgrade/configure.zcml
M plone/app/upgrade/utils.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/configure.zcml
M plone/app/upgrade/v43/final.py
M plone/app/upgrade/v50/alphas.py
M plone/app/upgrade/v50/betas.py
M setup.py
D plone/app/upgrade/gruf_bbb.py
D plone/app/upgrade/v25/__init__.py
D plone/app/upgrade/v25/configure.zcml
D plone/app/upgrade/v25/data/test-base.zexp
D plone/app/upgrade/v25/profiles.zcml
D plone/app/upgrade/v25/profiles/final_two51/actions.xml
D plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml
D plone/app/upgrade/v25/tests.py
D plone/app/upgrade/v30/__init__.py
D plone/app/upgrade/v30/alphas.py
D plone/app/upgrade/v30/betas.py
D plone/app/upgrade/v30/configure.zcml
D plone/app/upgrade/v30/data/test-base.zexp
D plone/app/upgrade/v30/data/test-full.zexp
D plone/app/upgrade/v30/final_three0x.py
D plone/app/upgrade/v30/profiles.zcml
D plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml
D plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml
D plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml
D plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml
D plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml
D plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt
D plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml
D plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml
D plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml
D plone/app/upgrade/v30/profiles/final_three01/rolemap.xml
D plone/app/upgrade/v30/profiles/final_three01/toolset.xml
D plone/app/upgrade/v30/profiles/rc2_final/actions.xml
D plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml
D plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml
D plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml
D plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml
D plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml
D plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml
D plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml
D plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml
D plone/app/upgrade/v30/rcs.py
D plone/app/upgrade/v30/tests.py
D plone/app/upgrade/v31/__init__.py
D plone/app/upgrade/v31/betas.py
D plone/app/upgrade/v31/configure.zcml
D plone/app/upgrade/v31/data/test-base.zexp
D plone/app/upgrade/v31/data/test-full.zexp
D plone/app/upgrade/v31/final_three1x.py
D plone/app/upgrade/v31/profiles.zcml
D plone/app/upgrade/v31/profiles/three0_beta1/actions.xml
D plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml
D plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml
D plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml
D plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml
D plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml
D plone/app/upgrade/v31/tests.py
D plone/app/upgrade/v32/__init__.py
D plone/app/upgrade/v32/betas.py
D plone/app/upgrade/v32/configure.zcml
D plone/app/upgrade/v32/data/test-base.zexp
D plone/app/upgrade/v32/data/test-full.zexp
D plone/app/upgrade/v32/profiles.zcml
D plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml
D plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml
D plone/app/upgrade/v32/tests.py
D plone/app/upgrade/v33/__init__.py
D plone/app/upgrade/v33/configure.zcml
D plone/app/upgrade/v33/data/test-base.zexp
D plone/app/upgrade/v33/data/test-full.zexp
D plone/app/upgrade/v33/profiles.zcml
D plone/app/upgrade/v33/profiles/three2_three3/actions.xml
D plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml
D plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml
D plone/app/upgrade/v33/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 98f410b..485acf4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,8 @@ Changelog
 
 Breaking changes:
 
-- *add item here*
+- Remove really old upgrade steps (everything up to v40).
+  [gforcada]
 
 New features:
 
diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index 56d6312..8ca157d 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -13,11 +13,6 @@ class HiddenProducts(object):
 
     def getNonInstallableProducts(self):
         return [
-            'plone.app.upgrade.v25',
-            'plone.app.upgrade.v30',
-            'plone.app.upgrade.v31',
-            'plone.app.upgrade.v32',
-            'plone.app.upgrade.v33',
             'plone.app.upgrade.v40',
             'plone.app.upgrade.v41',
             'plone.app.upgrade.v42',
@@ -26,16 +21,6 @@ def getNonInstallableProducts(self):
             'plone.app.upgrade.v51',
         ]
 
-# Make sure folks upgrading from Plone 2.1 see a helpful message telling them
-# how to do a two-stage upgrade, instead of a GroupUserFolder error.
-try:
-    from Products.GroupUserFolder.GroupUserFolder import GroupUserFolder
-except ImportError:
-    from plone.app.upgrade import gruf_bbb
-    sys.modules['Products.GroupUserFolder'] = gruf_bbb
-    sys.modules['Products.GroupUserFolder.GroupUserFolder'] = gruf_bbb
-
-
 try:
     from zope.app.cache.interfaces.ram import IRAMCache
 except ImportError:
diff --git a/plone/app/upgrade/configure.zcml b/plone/app/upgrade/configure.zcml
index 601ac13..e88c052 100644
--- a/plone/app/upgrade/configure.zcml
+++ b/plone/app/upgrade/configure.zcml
@@ -4,11 +4,6 @@
     xmlns:zcml="http://namespaces.zope.org/zcml"
     i18n_domain="plone">
 
-    <include package=".v25" />
-    <include package=".v30" />
-    <include package=".v31" />
-    <include package=".v32" />
-    <include package=".v33" />
     <include package=".v40" />
     <include package=".v41" />
     <include package=".v42" />
@@ -21,11 +16,4 @@
         name="plone.app.upgrade"
         />
 
-    <browser:page
-        name="index.html"
-        for=".gruf_bbb.UpgradeProcessError"
-        class=".gruf_bbb.UpgradeProcessErrorView"
-        permission="zope.Public"
-        />
-
 </configure>
diff --git a/plone/app/upgrade/gruf_bbb.py b/plone/app/upgrade/gruf_bbb.py
deleted file mode 100644
index d1033ba..0000000
--- a/plone/app/upgrade/gruf_bbb.py
+++ /dev/null
@@ -1,24 +0,0 @@
-from persistent import Persistent
-from Products.Five import BrowserView
-
-
-class UpgradeProcessError(Exception):
-    """Two-stage upgrade required."""
-
-
-class GroupUserFolder(Persistent):
-    """Dummy GRUF for the purpose of raising our exception
-       when its iterator is called by the ZPublisher validation hook
-    """
-
-    def __iter__(self):
-        raise UpgradeProcessError
-
-
-class UpgradeProcessErrorView(BrowserView):
-
-    def __call__(self):
-        return ('Upgrades from Plone < 2.5 are not supported. Please do a '
-                'two-stage upgrade by upgrading to Plone 3 first. See '
-                '<a href="http://plone.org/upgrade">the upgrade '
-                'manual</a> for details.')
diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index e85deb1..e482bca 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -344,3 +344,10 @@ def updateIconsInBrains(context, typesToUpdate=None):
         i += 1
     pghandler.finish()
     logger.info('Updated `getIcon` metadata.')
+
+
+def get_property(context, property_name, default_value=None):
+    try:
+        return getattr(context, property_name, default_value)
+    except AttributeError:
+        return default_value
diff --git a/plone/app/upgrade/v25/__init__.py b/plone/app/upgrade/v25/__init__.py
deleted file mode 100644
index bfa47ca..0000000
--- a/plone/app/upgrade/v25/__init__.py
+++ /dev/null
@@ -1,77 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.UnicodeSplitter import Splitter, CaseNormalizer
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def final_two51(context):
-    """2.5-final -> 2.5.1
-    """
-    loadMigrationProfile(
-        context, 'profile-plone.app.upgrade.v25:2.5final-2.5.1')
-
-    # Required for #5569 (is_folderish needs reindexing) and #5231 (all text
-    # indices need to be reindexed so they are split properly)
-    migtool = getToolByName(context, 'portal_migration')
-    migtool._needRecatalog = True
-
-
-def fixupPloneLexicon(context):
-    """Updates the plone_lexicon pipeline with the new splitter
-       and case normalizer.
-    """
-    catalog = getToolByName(context, 'portal_catalog', None)
-    if catalog is not None:
-        if 'plone_lexicon' in catalog.objectIds():
-            lexicon = catalog.plone_lexicon
-            pipeline = list(lexicon._pipeline)
-            if len(pipeline) >= 2:
-                if (not isinstance(pipeline[0], Splitter) or
-                        not isinstance(pipeline[1], CaseNormalizer)):
-                    pipeline[0] = Splitter()
-                    pipeline[1] = CaseNormalizer()
-                    lexicon._pipeline = tuple(pipeline)
-                    # Clear the lexicon
-                    from BTrees.OIBTree import OIBTree
-                    from BTrees.IOBTree import IOBTree
-                    from BTrees.Length import Length
-                    lexicon._wids = OIBTree()
-                    lexicon._words = IOBTree()
-                    lexicon.length = Length()
-                    logger.info('Updated plone_lexicon pipeline.')
-
-
-def setLoginFormInCookieAuth(context, out=None):
-    """Makes sure the cookie auth redirects to 'require_login' instead
-       of 'login_form'."""
-    uf = getattr(context, 'acl_users', None)
-    if uf is None or getattr(uf.aq_base, '_getOb', None) is None:
-        # we have no user folder or it's not a PAS folder, do nothing
-        return
-    cookie_auth = uf._getOb('credentials_cookie_auth', None)
-    if cookie_auth is None:
-        # there's no cookie auth object, do nothing
-        return
-    current_login_form = cookie_auth.getProperty('login_path')
-    if current_login_form != 'login_form':
-        # it's customized already, do nothing
-        return
-    cookie_auth.manage_changeProperties(login_path='require_login')
-    logger.info("Changed credentials_cookie_path login_path property "
-                "to 'require_login'.")
-
-
-def addMissingMimeTypes(context):
-    """ Add mime types that weren't included with the MimetypesRegistry that
-        shipped with Plone 2.5.2 and are now required (#6695)
-    """
-    # manage_addMimeType handles existing types gracefully, so we can just go
-    # ahead and add them without testing for existing ones
-    mtr = getToolByName(context, 'mimetypes_registry', None)
-    if mtr is not None:
-        mtr.manage_addMimeType('text/x-web-markdown',
-                               ['text/x-web-markdown'], ['markdown'], 'text.png')
-        mtr.manage_addMimeType('text/x-web-textile',
-                               ['text/x-web-textile'], ['textile'], 'text.png')
-        logger.info("Added `text/x-web-markdown` and `text/x-web-textile`.")
diff --git a/plone/app/upgrade/v25/configure.zcml b/plone/app/upgrade/v25/configure.zcml
deleted file mode 100644
index 1c5b61e..0000000
--- a/plone/app/upgrade/v25/configure.zcml
+++ /dev/null
@@ -1,94 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <genericsetup:upgradeSteps
-        source="2.5"
-        destination="2.5.1.rc1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Upgrade all existing actions to new-style actions"
-            handler="plone.app.upgrade.v30.alphas.migrateOldActions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Repair plone_lexicon pipeline"
-            handler=".fixupPloneLexicon"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".final_two51"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeStep
-        source="2.5.1.rc1"
-        destination="2.5.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.1"
-        destination="2.5.2.rc1"
-        title="Changes cookie auth redirects to the correct location"
-        profile="Products.CMFPlone:plone"
-        handler=".setLoginFormInCookieAuth"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.2.rc1"
-        destination="2.5.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.2"
-        destination="2.5.3.rc1"
-        title="Add markdown and textile mime types."
-        profile="Products.CMFPlone:plone"
-        handler=".addMissingMimeTypes"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.3.rc1"
-        destination="2.5.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.3"
-        destination="2.5.4"
-        title="Correct baseline profile in GenericSetup."
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.v30.alphas.updateImportStepsFromBaseProfile"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.4"
-        destination="2.5.4.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="2.5.4.2"
-        destination="2.5.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v25/data/test-base.zexp b/plone/app/upgrade/v25/data/test-base.zexp
deleted file mode 100644
index 6575e1b..0000000
Binary files a/plone/app/upgrade/v25/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v25/profiles.zcml b/plone/app/upgrade/v25/profiles.zcml
deleted file mode 100644
index b621706..0000000
--- a/plone/app/upgrade/v25/profiles.zcml
+++ /dev/null
@@ -1,15 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <genericsetup:registerProfile
-        name="2.5final-2.5.1"
-        title="Upgrade profile for Plone 2.5-final to Plone 2.5.1"
-        description="This profile contains configuration changes that are applied during the Plone 2.5-final to 2.5.1 upgrade."
-        directory="profiles/final_two51"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v25/profiles/final_two51/actions.xml b/plone/app/upgrade/v25/profiles/final_two51/actions.xml
deleted file mode 100644
index 4095598..0000000
--- a/plone/app/upgrade/v25/profiles/final_two51/actions.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
-  <object name="object_buttons" meta_type="CMF Action Category">
-
-    <object name="delete" meta_type="CMF Action" i18n:domain="plone">
-     <property name="title" i18n:translate="">Delete</property>
-     <property name="description" i18n:translate=""></property>
-     <property
-        name="url_expr">string:${globals_view/getCurrentObjectUrl}/delete_confirmation</property>
-     <property name="icon_expr"></property>
-     <property
-        name="available_expr">python:checkPermission("Delete objects", globals_view.getParentObject()) and not globals_view.isPortalOrPortalDefaultPage()</property>
-     <property name="permissions">
-      <element value="Delete objects"/>
-     </property>
-     <property name="visible">True</property>
-    </object>
-
-  </object>
-</object>
diff --git a/plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml b/plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml
deleted file mode 100644
index 4324196..0000000
--- a/plone/app/upgrade/v25/profiles/final_two51/cssregistry.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet id="plone.css" remove=""/>
-</object>
diff --git a/plone/app/upgrade/v25/tests.py b/plone/app/upgrade/v25/tests.py
deleted file mode 100644
index cf752cf..0000000
--- a/plone/app/upgrade/v25/tests.py
+++ /dev/null
@@ -1,131 +0,0 @@
-from Products.CMFPlone.UnicodeSplitter import Splitter
-from Products.CMFPlone.UnicodeSplitter import CaseNormalizer
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import version_match
-
-from plone.app.upgrade.v25 import fixupPloneLexicon
-from plone.app.upgrade.v25 import setLoginFormInCookieAuth
-from plone.app.upgrade.v25 import addMissingMimeTypes
-
-
-class TestMigrations_v2_5_0(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v25:2.5final-2.5.1'
-        self.actions = self.portal.portal_actions
-        self.css = self.portal.portal_css
-
-    def tesFixObjDeleteAction(self):
-        # Prepare delete actions test
-        editActions = ('delete',)
-        for a in editActions:
-            self.removeActionFromTool(a, category='object_buttons')
-        loadMigrationProfile(self.portal, self.profile, ('actions', ))
-        # delete action tests
-        actions = [x.id for x in self.actions.object_buttons.listActions()
-                   if x.id in editActions]
-        # check that all of our deleted actions are now present
-        for a in editActions:
-            self.assertTrue(a in actions)
-        # ensure that they are present only once
-        self.assertEqual(len(editActions), len(actions))
-
-    def testFixupPloneLexicon(self):
-        # Should update the plone_lexicon pipeline
-        lexicon = self.portal.portal_catalog.plone_lexicon
-        lexicon._pipeline = (object(), object())
-        # Test it twice
-        for i in range(2):
-            fixupPloneLexicon(self.portal)
-            self.assertTrue(isinstance(lexicon._pipeline[0], Splitter))
-            self.assertTrue(isinstance(lexicon._pipeline[1], CaseNormalizer))
-
-
-class TestMigrations_v2_5_1(MigrationTest):
-
-    def afterSetUp(self):
-        self.actions = self.portal.portal_actions
-        self.memberdata = self.portal.portal_memberdata
-        self.catalog = self.portal.portal_catalog
-        self.skins = self.portal.portal_skins
-        self.types = self.portal.portal_types
-        self.workflow = self.portal.portal_workflow
-        self.css = self.portal.portal_css
-
-    def testSetLoginFormInCookieAuth(self):
-        setLoginFormInCookieAuth(self.portal)
-        cookie_auth = self.portal.acl_users.credentials_cookie_auth
-        self.assertEqual(cookie_auth.getProperty('login_path'),
-                         'require_login')
-
-    def testSetLoginFormNoCookieAuth(self):
-        # Shouldn't error
-        uf = self.portal.acl_users
-        uf._delOb('credentials_cookie_auth')
-        setLoginFormInCookieAuth(self.portal)
-
-    def testSetLoginFormAlreadyChanged(self):
-        # Shouldn't change the value if it's not the default
-        cookie_auth = self.portal.acl_users.credentials_cookie_auth
-        cookie_auth.manage_changeProperties(login_path='foo')
-        setLoginFormInCookieAuth(self.portal)
-        self.assertTrue(cookie_auth.getProperty(
-            'login_path') != 'require_login')
-
-
-class TestMigrations_v2_5_2(MigrationTest):
-
-    def afterSetUp(self):
-        self.mimetypes = self.portal.mimetypes_registry
-
-    def testMissingMimeTypes(self):
-        # we're testing for 'text/x-web-markdown' and 'text/x-web-textile'
-        missing_types = ['text/x-web-markdown', 'text/x-web-textile']
-        # since we're running a full 2.5.4 instance in this test, the missing
-        # types might in fact already be there:
-        current_types = self.mimetypes.list_mimetypes()
-        types_to_delete = []
-        for mtype in missing_types:
-            if mtype in current_types:
-                types_to_delete.append(mtype)
-        if types_to_delete:
-            self.mimetypes.manage_delObjects(types_to_delete)
-        # now they're gone:
-        self.assertFalse(set(self.mimetypes.list_mimetypes()
-                             ).issuperset(set(missing_types)))
-        addMissingMimeTypes(self.portal)
-        # now they're back:
-        self.assertTrue(set(self.mimetypes.list_mimetypes()
-                            ).issuperset(set(missing_types)))
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testDCMIStorageUpdated(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        dcmi = getattr(oldsite.portal_metadata, 'DCMI', None)
-        self.assertFalse(dcmi is None)
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('2.5'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v2_5_0))
-    suite.addTest(makeSuite(TestMigrations_v2_5_1))
-    suite.addTest(makeSuite(TestMigrations_v2_5_2))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v30/__init__.py b/plone/app/upgrade/v30/__init__.py
deleted file mode 100644
index 6f9a1ca..0000000
--- a/plone/app/upgrade/v30/__init__.py
+++ /dev/null
@@ -1,5 +0,0 @@
-# Plone 3.0
-import alphas
-import betas
-import rcs
-import final_three0x
diff --git a/plone/app/upgrade/v30/alphas.py b/plone/app/upgrade/v30/alphas.py
deleted file mode 100644
index 1fe1d9e..0000000
--- a/plone/app/upgrade/v30/alphas.py
+++ /dev/null
@@ -1,573 +0,0 @@
-import os
-
-from five.localsitemanager import find_next_sitemanager
-from five.localsitemanager import make_objectmanager_site
-from five.localsitemanager.registry import FiveVerifyingAdapterLookup
-from five.localsitemanager.registry import PersistentComponents
-from plone.app.portlets.utils import convert_legacy_portlets
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import ILocalPortletAssignmentManager
-from plone.portlets.constants import CONTEXT_CATEGORY as CONTEXT_PORTLETS
-from zope.location.interfaces import ISite
-from zope.component import getMultiAdapter
-from zope.component import getSiteManager
-from zope.component import getUtility
-from zope.component.globalregistry import base
-from zope.component.interfaces import ComponentLookupError
-from zope.site.hooks import setSite
-
-from Acquisition import aq_base
-from App.Common import package_home
-from Products.Archetypes.interfaces import IArchetypeTool
-from Products.Archetypes.interfaces import IReferenceCatalog
-from Products.Archetypes.interfaces import IUIDCatalog
-from Products.CMFActionIcons.interfaces import IActionIconsTool
-from Products.CMFCalendar.interfaces import ICalendarTool
-from Products.CMFCore.ActionInformation import Action
-from Products.CMFCore.ActionInformation import ActionCategory
-from Products.CMFCore.interfaces import IActionsTool
-from Products.CMFCore.interfaces import ICachingPolicyManager
-from Products.CMFCore.interfaces import ICatalogTool
-from Products.CMFCore.interfaces import IContentTypeRegistry
-from Products.CMFCore.interfaces import IDiscussionTool
-from Products.CMFCore.interfaces import IMemberDataTool
-from Products.CMFCore.interfaces import IMembershipTool
-from Products.CMFCore.interfaces import IMetadataTool
-from Products.CMFCore.interfaces import IPropertiesTool
-from Products.CMFCore.interfaces import IRegistrationTool
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFCore.interfaces import ISkinsTool
-from Products.CMFCore.interfaces import ISyndicationTool
-from Products.CMFCore.interfaces import ITypesTool
-from Products.CMFCore.interfaces import IUndoTool
-from Products.CMFCore.interfaces import IURLTool
-from Products.CMFCore.interfaces import IConfigurableWorkflowTool
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.DirectoryView import createDirectoryView
-from Products.CMFDiffTool.interfaces import IDiffTool
-from Products.CMFEditions.interfaces import IArchivistTool
-from Products.CMFEditions.interfaces import IPortalModifierTool
-from Products.CMFEditions.interfaces import IPurgePolicyTool
-from Products.CMFEditions.interfaces.IRepository import IRepositoryTool
-from Products.CMFEditions.interfaces import IStorageTool
-from Products.CMFFormController.interfaces import IFormControllerTool
-from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool
-from Products.CMFUid.interfaces import IUniqueIdAnnotationManagement
-from Products.CMFUid.interfaces import IUniqueIdGenerator
-from Products.CMFUid.interfaces import IUniqueIdHandler
-from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition
-from Products.DCWorkflow.exportimport import WorkflowDefinitionConfigurator, _initDCWorkflow
-from Products.GenericSetup.interfaces import ISetupTool
-from Products.MailHost.interfaces import IMailHost
-from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
-from Products.PloneLanguageTool.interfaces import ILanguageTool
-from Products.PlonePAS.interfaces.group import IGroupTool
-from Products.PlonePAS.interfaces.group import IGroupDataTool
-from Products.PortalTransforms.interfaces import IPortalTransformsTool
-from Products.ResourceRegistries.interfaces import ICSSRegistry
-from Products.ResourceRegistries.interfaces import IJSRegistry
-from Products.StandardCacheManagers import RAMCacheManager
-
-from Products.CMFPlone import cmfplone_globals
-from Products.CMFPlone.factory import _DEFAULT_PROFILE
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.CMFPlone.interfaces import IPloneTool
-from Products.CMFPlone.interfaces import ITranslationServiceTool
-
-from plone.app.upgrade.utils import installOrReinstallProduct
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import logger
-
-try:
-    from Products.ATContentTypes.interface import IATCTTool
-    from Products.ATContentTypes.migration.v1_2 import upgradeATCTTool
-    HAS_ATCT = True
-except ImportError:
-    HAS_ATCT = False
-
-try:
-    from Products.CMFPlone.interfaces import IFactoryTool
-except:
-    from Products.ATContentTypes.interfaces import IFactoryTool
-
-
-def three0_alpha1(context):
-    """2.5.x -> 3.0-alpha1
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:2.5.x-3.0a1')
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-
-    # The ATCT tool has lost all type migration functionality and quite some
-    # metadata and index information stored on it needs to be updated.
-    if HAS_ATCT:
-        upgradeATCTTool(portal)
-
-    # Install CMFEditions and CMFDiffTool
-    installProduct('CMFEditions', portal, hidden=True)
-
-
-def alpha1_alpha2(context):
-    """ 3.0-alpha1 -> 3.0-alpha2
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0a1-3.0a2')
-
-
-def alpha2_beta1(context):
-    """ 3.0-alpha2 -> 3.0-beta1
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0a2-3.0b1')
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-
-    # Install PloneLanguageTool
-    installProduct('PloneLanguageTool', portal, hidden=True)
-
-
-def enableZope3Site(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    if not ISite.providedBy(portal):
-        make_objectmanager_site(portal)
-        logger.info('Made the portal a Zope3 site.')
-    try:
-        components = portal.getSiteManager()
-    except ComponentLookupError:
-        next = find_next_sitemanager(portal)
-        if next is None:
-            next = base
-        name = '/'.join(portal.getPhysicalPath())
-        components = PersistentComponents(name, (next,))
-        components.__parent__ = portal
-        portal.setSiteManager(components)
-        logger.info("Site manager '%s' added." % name)
-    else:
-        if components.utilities.LookupClass != FiveVerifyingAdapterLookup:
-            # for CMF 2.1 beta instances
-            components.__parent__ = portal
-            components.utilities.LookupClass = FiveVerifyingAdapterLookup
-            components.utilities._createLookup()
-            components.utilities.__parent__ = components
-            logger.info('LookupClass replaced.')
-    # Make sure to set the new site as the new active one
-    setSite(portal)
-
-
-def migrateOldActions(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    special_providers = ['portal_controlpanel',
-                         'portal_types',
-                         'portal_workflow']
-    # We don't need to operate on the providers that are still valid and
-    # should ignore the control panel as well
-    providers = [obj for obj in portal.objectValues()
-                 if hasattr(obj, '_actions') and
-                 obj.getId() not in special_providers]
-    non_empty_providers = [p for p in providers if len(p._actions) > 0]
-    for provider in non_empty_providers:
-        for action in provider._actions:
-            category = action.category
-            # check if the category already exists, otherwise create it
-            new_category = getattr(
-                aq_base(portal.portal_actions), category, None)
-            if new_category is None:
-                portal.portal_actions._setObject(
-                    category, ActionCategory(id=category))
-                new_category = portal.portal_actions[category]
-
-            # Special handling for Expressions
-            url_expr = ''
-            if action.action:
-                url_expr = action.action.text
-            available_expr = ''
-            if action.condition:
-                available_expr = action.condition.text
-
-            new_action = Action(action.id,
-                                title=action.title,
-                                description=action.description,
-                                url_expr=url_expr,
-                                available_expr=available_expr,
-                                permissions=action.permissions,
-                                visible=action.visible)
-
-            # Only add an action if there isn't one with that name already
-            if getattr(aq_base(new_category), action.id, None) is None:
-                new_category._setObject(action.id, new_action)
-
-        # Remove old actions from upgraded providers
-        provider._actions = ()
-    logger.info('Upgraded old actions to new actions stored in portal_actions.')
-
-
-def _check_ascii(text):
-    try:
-        unicode(text, 'ascii')
-    except UnicodeDecodeError:
-        return False
-    return True
-
-
-def updateActionsI18NDomain(context):
-    actions = getToolByName(context, 'portal_actions')
-    actions = actions.listActions()
-    domainless_actions = [a for a in actions if not a.i18n_domain]
-    for action in domainless_actions:
-        if _check_ascii(action.title) and _check_ascii(action.description):
-            action.i18n_domain = 'plone'
-    if domainless_actions:
-        logger.info('Updated actions i18n domain attribute.')
-
-
-def updateFTII18NDomain(context):
-    types = getToolByName(context, 'portal_types')
-    types = types.listTypeInfo()
-    domainless_types = [fti for fti in types if not fti.i18n_domain]
-    for fti in domainless_types:
-        if _check_ascii(fti.title) and _check_ascii(fti.description):
-            fti.i18n_domain = 'plone'
-    if domainless_types:
-        logger.info('Updated type informations i18n domain attribute.')
-
-
-def addPortletManagers(context):
-    """Add new portlets managers."""
-    loadMigrationProfile(context, 'profile-Products.CMFPlone:plone',
-                         steps=['portlets'])
-
-
-def convertLegacyPortlets(context):
-    """Convert portlets defined in left_slots and right_slots at the portal
-    root to use plone.portlets. Also block portlets in the Members folder.
-
-    Note - there may be other portlets defined elsewhere. These will require
-    manual upgrade from the @@manage-portlets view. This is to avoid a
-    full walk of the portal (i.e. waking up every single object) looking for
-    potential left_slots/right_slots!
-    """
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    convert_legacy_portlets(portal)
-    logger.info('Converted legacy portlets at the portal root')
-    logger.info('NOTE: You may need to convert other portlets manually.')
-    logger.info(' - to do so, click "manage portlets" in the relevant folder.')
-
-    members = getattr(portal, 'Members', None)
-    if members is not None:
-        membersRightSlots = getattr(aq_base(members), 'right_slots', None)
-        if membersRightSlots == []:
-            rightColumn = getUtility(
-                IPortletManager, name=u'plone.rightcolumn', context=portal)
-            portletAssignments = getMultiAdapter(
-                (members, rightColumn,), ILocalPortletAssignmentManager)
-            portletAssignments.setBlacklistStatus(CONTEXT_PORTLETS, True)
-            logger.info(
-                'Blacklisted contextual portlets in the Members folder')
-
-
-def installProduct(product, portal, out=None, hidden=False):
-    """Quickinstalls a product if it is not installed yet."""
-    if out is None:
-        out = []
-    installOrReinstallProduct(portal, product, out, hidden=hidden)
-
-
-registration = (('mimetypes_registry', IMimetypesRegistryTool),
-                ('portal_transforms', IPortalTransformsTool),
-                ('portal_actionicons', IActionIconsTool),
-                ('portal_discussion', IDiscussionTool),
-                ('portal_metadata', IMetadataTool),
-                ('portal_properties', IPropertiesTool),
-                ('portal_syndication', ISyndicationTool),
-                ('portal_undo', IUndoTool),
-                ('MailHost', IMailHost),
-                ('portal_diff', IDiffTool),
-                ('portal_uidannotation', IUniqueIdAnnotationManagement),
-                ('portal_uidgenerator', IUniqueIdGenerator),
-                )
-if HAS_ATCT:
-    registration += (('portal_atct', IATCTTool),)
-
-invalid_regs = (ILanguageTool, IArchivistTool, IPortalModifierTool,
-                IPurgePolicyTool, IRepositoryTool, IStorageTool,
-                IFormControllerTool, IReferenceCatalog, IUIDCatalog,
-                ICalendarTool, IActionsTool, ICatalogTool,
-                IContentTypeRegistry, ISkinsTool, ITypesTool, IURLTool,
-                IConfigurableWorkflowTool, IPloneTool, ICSSRegistry,
-                IJSRegistry, IUniqueIdHandler, IFactoryTool, IMembershipTool,
-                IGroupTool, IGroupDataTool, IMemberDataTool,
-                ICachingPolicyManager, IRegistrationTool, IArchetypeTool,
-                ITranslationServiceTool, IQuickInstallerTool,
-                ISetupTool,
-                )
-
-
-def registerToolsAsUtilities(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    sm = getSiteManager(portal)
-
-    portalregistration = ((portal, ISiteRoot),
-                          (portal, IPloneSiteRoot),)
-
-    for reg in portalregistration:
-        if sm.queryUtility(reg[1]) is None:
-            sm.registerUtility(aq_base(reg[0]), reg[1])
-
-    for reg in registration:
-        if sm.queryUtility(reg[1]) is None:
-            if reg[0] in portal.keys():
-                tool = aq_base(portal[reg[0]])
-                sm.registerUtility(tool, reg[1])
-
-    for reg in invalid_regs:
-        if sm.queryUtility(reg) is not None:
-            sm.unregisterUtility(provided=reg)
-
-    logger.info("Registered tools as utilities.")
-
-
-def addReaderAndEditorRoles(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    if 'Reader' not in portal.valid_roles():
-        portal._addRole('Reader')
-    if 'Editor' not in portal.valid_roles():
-        portal._addRole('Editor')
-    if 'Reader' not in portal.acl_users.portal_role_manager.listRoleIds():
-        portal.acl_users.portal_role_manager.addRole('Reader')
-    if 'Editor' not in portal.acl_users.portal_role_manager.listRoleIds():
-        portal.acl_users.portal_role_manager.addRole('Editor')
-
-    viewRoles = [r['name']
-                 for r in portal.rolesOfPermission('View') if r['selected']]
-    modifyRoles = [r['name'] for r in portal.rolesOfPermission(
-        'Modify portal content') if r['selected']]
-
-    if 'Reader' not in viewRoles:
-        viewRoles.append('Reader')
-        portal.manage_permission('View', viewRoles, True)
-
-    if 'Editor' not in modifyRoles:
-        modifyRoles.append('Editor')
-        portal.manage_permission('Modify portal content', modifyRoles, True)
-
-    logger.info('Added reader and editor roles')
-
-
-def migrateLocalroleForm(context):
-    portal_types = getToolByName(context, 'portal_types', None)
-    if portal_types is not None:
-        for fti in portal_types.objectValues():
-            if not hasattr(fti, '_aliases'):
-                fti._aliases = {}
-
-            aliases = fti.getMethodAliases()
-            new_aliases = aliases.copy()
-            for k, v in aliases.items():
-                if 'folder_localrole_form' in v:
-                    new_aliases[k] = v.replace(
-                        'folder_localrole_form', '@@sharing')
-            fti.setMethodAliases(new_aliases)
-
-            for a in fti.listActions():
-                expr = a.getActionExpression()
-                if 'folder_localrole_form' in expr:
-                    a.setActionExpression(expr.replace(
-                        'folder_localrole_form', '@@sharing'))
-    logger.info(
-        'Ensured references to folder_localrole_form point to @@sharing now')
-
-
-def reorderUserActions(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        user_category = getattr(portal_actions, 'user', None)
-        if user_category is not None:
-            new_actions = ['login', 'join', 'mystuff',
-                           'preferences', 'undo', 'logout']
-            new_actions.reverse()
-            for action in new_actions:
-                if action in user_category.objectIds():
-                    user_category.moveObjectsToTop([action])
-
-
-def updateMemberSecurity(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    pprop = getToolByName(portal, 'portal_properties')
-    portal.manage_permission('Add portal member', roles=[
-                             'Manager', 'Owner'], acquire=0)
-    pprop.site_properties.manage_changeProperties(
-        allowAnonymousViewAbout=False)
-
-    portal.manage_changeProperties(validate_email=True)
-
-    pmembership = getToolByName(portal, 'portal_membership')
-    pmembership.memberareaCreationFlag = 0
-    logger.info("Updated member management security")
-
-
-def updatePASPlugins(context):
-    from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-
-    activatePluginInterfaces(portal, 'mutable_properties')
-    activatePluginInterfaces(portal, 'source_users')
-    activatePluginInterfaces(portal, 'credentials_cookie_auth',
-                             disable=['ICredentialsResetPlugin', 'ICredentialsUpdatePlugin'])
-    if not portal.acl_users.objectIds(['Plone Session Plugin']):
-        from plone.session.plugins.session import manage_addSessionPlugin
-        manage_addSessionPlugin(portal.acl_users, 'session')
-        activatePluginInterfaces(portal, "session")
-        logger.info("Added Plone Session Plugin.")
-
-
-def updateConfigletTitles(portal):
-    """Update titles of some configlets"""
-    controlPanel = getToolByName(portal, 'portal_controlpanel', None)
-    if controlPanel is not None:
-        collection = controlPanel.getActionObject('Plone/portal_atct')
-        language = controlPanel.getActionObject('Plone/PloneLanguageTool')
-        navigation = controlPanel.getActionObject('Plone/NavigationSettings')
-        types = controlPanel.getActionObject('Plone/TypesSettings')
-        users = controlPanel.getActionObject('Plone/UsersGroups')
-        users2 = controlPanel.getActionObject('Plone/UsersGroups2')
-
-        if collection is not None:
-            collection.title = "Collection"
-        if language is not None:
-            language.title = "Language"
-        if navigation is not None:
-            navigation.title = "Navigation"
-        if types is not None:
-            types.title = "Types"
-        if users is not None:
-            users.title = "Users and Groups"
-        if users2 is not None:
-            users2.title = "Users and Groups"
-
-
-def updateKukitJS(context):
-    """Use the unpacked kukit-src.js and pack it ourself.
-    """
-    jsreg = getToolByName(context, 'portal_javascripts', None)
-    old_id = '++resource++kukit.js'
-    new_id = '++resource++kukit-src.js'
-    if jsreg is not None:
-        script_ids = jsreg.getResourceIds()
-        if old_id in script_ids and new_id in script_ids:
-            jsreg.unregisterResource(old_id)
-        elif old_id in script_ids:
-            jsreg.renameResource(old_id, new_id)
-            logger.info("Use %s instead of %s" % (new_id, old_id))
-        resource = jsreg.getResource(new_id)
-        if resource is not None:
-            resource.setCompression('full')
-            logger.info("Set 'full' compression on %s" % new_id)
-
-
-def addCacheForResourceRegistry(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    ram_cache_id = 'ResourceRegistryCache'
-    if not ram_cache_id in portal.objectIds():
-        RAMCacheManager.manage_addRAMCacheManager(portal, ram_cache_id)
-        cache = getattr(portal, ram_cache_id)
-        settings = cache.getSettings()
-        settings['max_age'] = 24 * 3600  # keep for up to 24 hours
-        settings['request_vars'] = ('URL',)
-        cache.manage_editProps(
-            'Cache for saved ResourceRegistry files', settings)
-        logger.info('Created RAMCache %s for ResourceRegistry output' %
-                    ram_cache_id)
-    reg = getToolByName(portal, 'portal_css', None)
-    if reg is not None and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) is not None:
-        reg.ZCacheable_setManagerId(ram_cache_id)
-        reg.ZCacheable_setEnabled(1)
-        logger.info('Associated portal_css with %s' % ram_cache_id)
-    reg = getToolByName(portal, 'portal_javascripts', None)
-    if reg is not None and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) is not None:
-        reg.ZCacheable_setManagerId(ram_cache_id)
-        reg.ZCacheable_setEnabled(1)
-        logger.info('Associated portal_javascripts with %s' % ram_cache_id)
-
-
-def removeTablelessSkin(context):
-    st = getToolByName(context, 'portal_skins')
-    if 'Plone Tableless' in st.getSkinSelections():
-        st.manage_skinLayers(['Plone Tableless'], del_skin=True)
-        logger.info("Removed the Plone Tableless skin")
-    if st.default_skin == 'Plone Tableless':
-        st.default_skin = 'Plone Default'
-        logger.info("Changed the default skin to 'Plone Default'")
-
-
-def addObjectProvidesIndex(context):
-    """Add the object_provides index to the portal_catalog.
-    """
-    catalog = getToolByName(context, 'portal_catalog')
-    if 'object_provides' not in catalog.indexes():
-        catalog.addIndex('object_provides', 'KeywordIndex')
-        logger.info("Added object_provides index to portal_catalog")
-
-
-def removeMyStuffAction(context):
-    """The mystuff action is now covered by the dashboard"""
-    actions = getToolByName(context, 'portal_actions')
-    if getattr(actions, 'user', None) is None:
-        return
-    category = actions.user
-    if 'mystuff' in category.objectIds():
-        category.manage_delObjects(ids=['mystuff'])
-        logger.info("Removed the mystuff user action")
-
-
-def addMissingWorkflows(context):
-    """Add new Plone 3.0 workflows
-    """
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    wft = getToolByName(portal, 'portal_workflow', None)
-    if wft is None:
-        return
-
-    new_workflow_ids = ['intranet_workflow', 'intranet_folder_workflow',
-                        'one_state_workflow', 'simple_publication_workflow']
-    encoding = 'utf-8'
-    path_prefix = os.path.join(package_home(cmfplone_globals), 'profiles',
-                               'default', 'workflows')
-
-    for wf_id in new_workflow_ids:
-        if wf_id in wft.objectIds():
-            logger.info("Workflow %s already installed; doing nothing" % wf_id)
-            continue
-
-        path = os.path.join(path_prefix, wf_id, 'definition.xml')
-        body = open(path, 'r').read()
-
-        wft._setObject(wf_id, DCWorkflowDefinition(wf_id))
-        wf = wft[wf_id]
-        wfdc = WorkflowDefinitionConfigurator(wf)
-
-        (workflow_id, title, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, description, manager_bypass, creation_guard
-         ) = wfdc.parseWorkflowXML(body, encoding)
-
-        _initDCWorkflow(wf, title, description, manager_bypass, creation_guard, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, portal     # not sure what to pass here
-                        # the site or the wft?
-                        # (does it matter at all?)
-                        )
-        logger.info("Added workflow %s" % wf_id)
-
-
-def restorePloneTool(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    tool = getToolByName(portal, "plone_utils")
-    if tool.meta_type == 'PlonePAS Utilities Tool':
-        from Products.CMFPlone.PloneTool import PloneTool
-
-        # PloneSite has its own security check for manage_delObjects which
-        # breaks in the test runner. So we bypass this check.
-        super(portal.__class__, portal).manage_delObjects(['plone_utils'])
-        portal._setObject(PloneTool.id, PloneTool())
-        logger.info("Replaced obsolete PlonePAS version of plone tool "
-                    "with the normal one.")
-
-
-def updateImportStepsFromBaseProfile(context):
-    """Updates the available import steps for existing sites."""
-    context.setBaselineContext("profile-%s" % _DEFAULT_PROFILE)
diff --git a/plone/app/upgrade/v30/betas.py b/plone/app/upgrade/v30/betas.py
deleted file mode 100644
index 48f7077..0000000
--- a/plone/app/upgrade/v30/betas.py
+++ /dev/null
@@ -1,241 +0,0 @@
-from StringIO import StringIO
-
-from zope.component import queryUtility
-
-from Products.CMFActionIcons.interfaces import IActionIconsTool
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.interfaces import IActionProvider
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def beta1_beta2(context):
-    """ 3.0-beta1 -> 3.0-beta2
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0b1-3.0b2')
-
-
-def beta2_beta3(context):
-    """ 3.0-beta2 -> 3.0-beta3
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0b2-3.0b3')
-
-
-def beta3_rc1(context):
-    """ 3.0-beta3 -> 3.0-rc1
-    """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0b3-3.0b4')
-
-
-def migrateHistoryTab(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        objects = getattr(portal_actions, 'object', None)
-        if objects is not None:
-            if 'rss' in objects.objectIds():
-                objects.manage_renameObjects(['rss'], ['history'])
-                logger.info('Upgraded history action.')
-
-
-def changeOrderOfActionProviders(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        portal_actions.deleteActionProvider('portal_actions')
-        portal_actions.addActionProvider('portal_actions')
-        logger.info('Changed the order of action providers.')
-
-
-def cleanupOldActions(context):
-    portal_actions = getToolByName(context, 'portal_actions', None)
-    if portal_actions is not None:
-        # Remove some known unused actions from the object_tabs category and
-        # remove the category completely if no actions are left
-        object_tabs = getattr(portal_actions, 'object_tabs', None)
-        if object_tabs is not None:
-            if 'contentrules' in object_tabs.objectIds():
-                object_tabs._delObject('contentrules')
-            if 'change_ownership' in object_tabs.objectIds():
-                object_tabs._delObject('change_ownership')
-            if len(object_tabs.objectIds()) == 0:
-                del object_tabs
-                portal_actions._delObject('object_tabs')
-                logger.info('Removed object_tabs action category.')
-        object_ = getattr(portal_actions, 'object', None)
-        if object_ is not None:
-            if 'reply' in object_.objectIds():
-                object_._delObject('reply')
-        user = getattr(portal_actions, 'user', None)
-        if user is not None:
-            if 'logged_in' in user.objectIds():
-                user._delObject('logged_in')
-            if 'myworkspace' in user.objectIds():
-                user._delObject('myworkspace')
-        global_ = getattr(portal_actions, 'global', None)
-        if global_ is not None:
-            if 'manage_members' in global_.objectIds():
-                global_._delObject('manage_members')
-            if 'configPortal' in global_.objectIds():
-                global_._delObject('configPortal')
-            if len(global_.objectIds()) == 0:
-                del global_
-                portal_actions._delObject('global')
-                logger.info('Removed global action category.')
-
-
-def cleanDefaultCharset(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    charset = portal.getProperty('default_charset', None)
-    if charset is not None:
-        if not charset.strip():
-            portal.manage_delProperties(['default_charset'])
-            logger.info('Removed empty default_charset portal property')
-
-
-def addAutoGroupToPAS(context):
-    from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    sout = StringIO()
-
-    if not portal.acl_users.objectIds(['Automatic Group Plugin']):
-        from Products.PlonePAS.plugins.autogroup import manage_addAutoGroup
-        manage_addAutoGroup(portal.acl_users, 'auto_group',
-                            'Automatic Group Provider',
-                            'AuthenticatedUsers', "Logged-in users (Virtual Group)")
-        activatePluginInterfaces(portal, "auto_group", sout)
-        logger.info("Added automatic group PAS plugin")
-
-
-def removeS5Actions(context):
-    portalTypes = getToolByName(context, 'portal_types', None)
-    if portalTypes is not None:
-        document = portalTypes.restrictedTraverse('Document', None)
-        if document:
-            ids = [x.getId() for x in document.listActions()]
-            if 's5_presentation' in ids:
-                index = ids.index('s5_presentation')
-                document.deleteActions([index])
-                logger.info(
-                    "Removed 's5_presentation' action from actions tool.")
-
-    iconsTool = queryUtility(IActionIconsTool)
-    if iconsTool is not None:
-        ids = [x._action_id for x in iconsTool.listActionIcons()]
-        if 's5_presentation' in ids:
-            iconsTool.removeActionIcon('plone', 's5_presentation')
-            logger.info(
-                "Removed 's5_presentation' icon from actionicons tool.")
-
-
-def addContributorToCreationPermissions(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    if 'Contributor' not in portal.valid_roles():
-        portal._addRole('Contributor')
-    if 'Contributor' not in portal.acl_users.portal_role_manager.listRoleIds():
-        portal.acl_users.portal_role_manager.addRole('Contributor')
-
-    for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-              'ATContentTypes: Add Event',
-              'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-              'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-              'ATContentTypes: Add News Item', ]:
-        roles = [r['name']
-                 for r in portal.rolesOfPermission(p) if r['selected']]
-        if 'Contributor' not in roles:
-            roles.append('Contributor')
-            portal.manage_permission(p, roles, bool(
-                portal.acquiredRolesAreUsedBy(p)))
-
-
-def removeSharingAction(context):
-    portal_types = getToolByName(context, 'portal_types', None)
-    if portal_types is not None:
-        for fti in portal_types.objectValues():
-            action_ids = [a.id for a in fti.listActions()]
-            if 'local_roles' in action_ids:
-                fti.deleteActions([action_ids.index('local_roles')])
-
-        logger.info('Removed explicit references to sharing action')
-
-
-def addEditorToSecondaryEditorPermissions(context):
-    portal = getToolByName(context, 'portal_url').getPortalObject()
-    for p in ['Manage properties', 'Modify view template', 'Request review']:
-        roles = [r['name']
-                 for r in portal.rolesOfPermission(p) if r['selected']]
-        if 'Editor' not in roles:
-            roles.append('Editor')
-            portal.manage_permission(p, roles, bool(
-                portal.acquiredRolesAreUsedBy(p)))
-
-
-def updateEditActionConditionForLocking(context):
-    """
-    Condition on edit views for Document, Event, File, Folder, Image,
-    Link, Topic has been added to not display the Edit
-    tab if an item is locked
-    """
-    portal_types = getToolByName(context, 'portal_types', None)
-    lockable_types = ['Document', 'Event', 'File', 'Folder',
-                      'Image', 'Link', 'News Item', 'Topic']
-    if portal_types is not None:
-        for contentType in lockable_types:
-            fti = portal_types.getTypeInfo(contentType)
-            if fti:
-                for action in fti.listActions():
-                    if action.getId() == 'edit' and not action.condition:
-                        action.condition = Expression(
-                            "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
-
-
-def addOnFormUnloadJS(context):
-    """
-    add the form unload JS to the js registry
-    """
-    jsreg = getToolByName(context, 'portal_javascripts', None)
-    script = 'unlockOnFormUnload.js'
-    if jsreg is not None:
-        script_ids = jsreg.getResourceIds()
-        # Failsafe: first make sure the stylesheet doesn't exist in the list
-        if script not in script_ids:
-            jsreg.registerScript(script,
-                                 enabled=True,
-                                 cookable=True)
-            # put it at the bottom of the stack
-            jsreg.moveResourceToBottom(script)
-            logger.info("Added " + script + " to portal_javascripts")
-
-
-def updateTopicTitle(context):
-    """Update the title of the topic type."""
-    tt = getToolByName(context, 'portal_types', None)
-    if tt is not None:
-        topic = tt.get('Topic')
-        if topic is not None:
-            topic.title = 'Collection'
-
-
-def cleanupActionProviders(context):
-    """Remove no longer existing action proiders."""
-    at = getToolByName(context, "portal_actions")
-    for provider in at.listActionProviders():
-        candidate = getToolByName(context, provider, None)
-        if candidate is None or not IActionProvider.providedBy(candidate):
-            at.deleteActionProvider(provider)
-            logger.info("%s is no longer an action provider" % provider)
-
-
-def hidePropertiesAction(context):
-    tt = getToolByName(context, 'portal_types', None)
-    if not IActionProvider.providedBy(tt):
-        return
-    for ti in tt.listTypeInfo():
-        actions = ti.listActions()
-        index = [i for i in range(len(actions))
-                 if actions[i].category == "object" and
-                 actions[i].id == "metadata"]
-        if index:
-            ti.deleteActions(index)
-            logger.info("Removed properties action from type %s" % ti.id)
diff --git a/plone/app/upgrade/v30/configure.zcml b/plone/app/upgrade/v30/configure.zcml
deleted file mode 100644
index 59e1c98..0000000
--- a/plone/app/upgrade/v30/configure.zcml
+++ /dev/null
@@ -1,343 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <!-- General -->
-
-    <genericsetup:upgradeSteps
-        source="*"
-        destination="3.0.5"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Make the portal a Zope3 site"
-            handler=".alphas.enableZope3Site"
-            />
-
-        <genericsetup:upgradeStep
-            title="Register some tools as utilities"
-            handler=".alphas.registerToolsAsUtilities"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <!-- Plone 2.5 -->
-
-    <genericsetup:upgradeSteps
-        source="2.5.5"
-        destination="3.0.a1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Updates the available GS import steps"
-            handler=".alphas.updateImportStepsFromBaseProfile"
-            />
-
-        <genericsetup:upgradeStep
-            title="Upgrade all existing actions to new-style actions"
-            handler=".alphas.migrateOldActions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add an i18n_domain to actions"
-            handler=".alphas.updateActionsI18NDomain"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add an i18n_domain to type information"
-            handler=".alphas.updateFTII18NDomain"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".alphas.three0_alpha1"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove tableless skin"
-            handler=".alphas.removeTablelessSkin"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add portlet managers"
-            handler=".alphas.addPortletManagers"
-            />
-
-        <genericsetup:upgradeStep
-            title="Upgrade legacy portlets"
-            handler=".alphas.convertLegacyPortlets"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <!-- Plone 3.0 -->
-
-    <genericsetup:upgradeSteps
-        source="3.0.a1"
-        destination="3.0.a2"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".alphas.alpha1_alpha2"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add reader and editor roles"
-            handler=".alphas.addReaderAndEditorRoles"
-            />
-
-        <genericsetup:upgradeStep
-            title="Change folder_localrole_form to @@sharing"
-            handler=".alphas.migrateLocalroleForm"
-            />
-
-        <genericsetup:upgradeStep
-            title="Reorder the user actions"
-            handler=".alphas.reorderUserActions"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.a2"
-        destination="3.0.b1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Remove empty default_charset from portal"
-            handler=".betas.cleanDefaultCharset"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".alphas.alpha2_beta1"
-            />
-
-        <genericsetup:upgradeStep
-            title="Use the unpacked kukit-src.js and pack it ourself"
-            handler=".alphas.updateKukitJS"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove the mystuff user action"
-            handler=".alphas.removeMyStuffAction"
-            />
-
-        <genericsetup:upgradeStep
-            title="Modify security settings to match new default policies"
-            handler=".alphas.updateMemberSecurity"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add new Plone Session Plugin"
-            handler=".alphas.updatePASPlugins"
-            />
-
-        <genericsetup:upgradeStep
-            title="Update configlet titles"
-            handler=".alphas.updateConfigletTitles"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add a RAMCache for ResourceRegistries"
-            handler=".alphas.addCacheForResourceRegistry"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add the object_provides catalog index"
-            handler=".alphas.addObjectProvidesIndex"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add additional example workflows"
-            handler=".alphas.addMissingWorkflows"
-            />
-
-        <genericsetup:upgradeStep
-            title="Replace obsolete PlonePAS version of plone tool"
-            handler=".alphas.restorePloneTool"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.b1"
-        destination="3.0.b2"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="Upgrade history action"
-            handler=".betas.migrateHistoryTab"
-            />
-
-        <genericsetup:upgradeStep
-            title="Change the order of action providers"
-            handler=".betas.changeOrderOfActionProviders"
-            />
-
-        <genericsetup:upgradeStep
-            title="Update edit action with locking condition"
-            handler=".betas.updateEditActionConditionForLocking"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add form unload JS to the JSregistry"
-            handler=".betas.addOnFormUnloadJS"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove old no longer used actions"
-            handler=".betas.cleanupOldActions"
-            />
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".betas.beta1_beta2"
-            />
-
-        <genericsetup:upgradeStep
-            title="Add automatic group PAS plugin"
-            handler=".betas.addAutoGroupToPAS"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove s5_presentation action"
-            handler=".betas.removeS5Actions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Allow contributer role to add content"
-            handler=".betas.addContributorToCreationPermissions"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove no longer existing action providers"
-            handler=".betas.cleanupActionProviders"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove properties tab from types"
-            handler=".betas.hidePropertiesAction"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.b2"
-        destination="3.0.b3"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".betas.beta2_beta3"
-            />
-
-        <genericsetup:upgradeStep
-            title="Remove sharing action from types"
-            handler=".betas.removeSharingAction"
-            />
-
-        <genericsetup:upgradeStep
-            title="Grant editor role secondary edit permissions"
-            handler=".betas.addEditorToSecondaryEditorPermissions"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeSteps
-        source="3.0.b3"
-        destination="3.0.rc1"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".betas.beta3_rc1"
-            />
-
-        <genericsetup:upgradeStep
-            title="Change the title of topics to collection"
-            handler=".betas.updateTopicTitle"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeStep
-        source="3.0.rc1"
-        destination="3.0.rc2"
-        title="Add intelligenttext mime type and transforms"
-        profile="Products.CMFPlone:plone"
-        handler=".rcs.addIntelligentText"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.rc2"
-        destination="3.0"
-        title="General required upgrade steps"
-        profile="Products.CMFPlone:plone"
-        handler=".rcs.rc2_final"
-        />
-
-    <!-- Plone 3.0.x -->
-
-    <genericsetup:upgradeStep
-        source="3.0"
-        destination="3.0.1"
-        title="General required upgrade steps"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three0x.final_three01"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.1"
-        destination="3.0.2"
-        title="General required upgrade steps"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three0x.three01_three02"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.2"
-        destination="3.0.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeSteps
-        source="3.0.3"
-        destination="3.0.4"
-        profile="Products.CMFPlone:plone">
-
-        <genericsetup:upgradeStep
-            title="General required upgrade steps"
-            handler=".final_three0x.three03_three04"
-            />
-
-        <genericsetup:upgradeStep
-            title="Added new CMFEditions modifiers"
-            handler=".final_three0x.installNewModifiers"
-            />
-
-    </genericsetup:upgradeSteps>
-
-    <genericsetup:upgradeStep
-        source="3.0.4"
-        destination="3.0.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.0.5"
-        destination="3.0.6"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v30/data/test-base.zexp b/plone/app/upgrade/v30/data/test-base.zexp
deleted file mode 100644
index f22699e..0000000
Binary files a/plone/app/upgrade/v30/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v30/data/test-full.zexp b/plone/app/upgrade/v30/data/test-full.zexp
deleted file mode 100644
index 13d7183..0000000
Binary files a/plone/app/upgrade/v30/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v30/final_three0x.py b/plone/app/upgrade/v30/final_three0x.py
deleted file mode 100644
index 62ea2fd..0000000
--- a/plone/app/upgrade/v30/final_three0x.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-from Products.CMFEditions.StandardModifiers import install
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def final_three01(context):
-    loadMigrationProfile(
-        context, 'profile-plone.app.upgrade.v30:3.0final-3.0.1')
-
-
-def three01_three02(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0.1-3.0.2')
-
-
-def three03_three04(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0.3-3.0.4')
-
-
-def installNewModifiers(context):
-    modifiers = getToolByName(context, 'portal_modifier', None)
-    if modifiers is not None:
-        install(modifiers)
-        logger.info('Added new CMFEditions modifiers.')
diff --git a/plone/app/upgrade/v30/profiles.zcml b/plone/app/upgrade/v30/profiles.zcml
deleted file mode 100644
index 7a2937e..0000000
--- a/plone/app/upgrade/v30/profiles.zcml
+++ /dev/null
@@ -1,105 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <genericsetup:registerProfile
-        name="2.5.x-3.0a1"
-        title="Upgrade profile for Plone 2.5.x to Plone 3.0-alpha1"
-        description="This profile contains configuration changes that are applied during the Plone 2.5.x to Plone 3.0-alpha1 upgrade."
-        directory="profiles/two5x_alpha1"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0a1-3.0a2"
-        title="Upgrade profile for Plone 3.0-alpha1 to Plone 3.0-alpha2"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-alpha1 to 3.0-alpha2 upgrade."
-        directory="profiles/alpha1_alpha2"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0a2-3.0b1"
-        title="Upgrade profile for Plone 3.0-alpha2 to Plone 3.0-beta1"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-alpha2 to 3.0-beta1 upgrade."
-        directory="profiles/alpha2_beta1"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0b1-3.0b2"
-        title="Upgrade profile for Plone 3.0-beta1 to Plone 3.0-beta2"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-beta1 to 3.0-beta2 upgrade."
-        directory="profiles/beta1_beta2"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0b2-3.0b3"
-        title="Upgrade profile for Plone 3.0-beta2 to Plone 3.0-beta3"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-beta2 to 3.0-beta3 upgrade."
-        directory="profiles/beta2_beta3"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0b3-3.0b4"
-        title="Upgrade profile for Plone 3.0-beta3 to Plone 3.0-beta4"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-beta3 to 3.0-beta4 upgrade."
-        directory="profiles/beta3_beta4"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0rc2-3.0final"
-        title="Upgrade profile for Plone 3.0-rc2 to Plone 3.0-final"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-rc2 to 3.0-final upgrade."
-        directory="profiles/rc2_final"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0rc2-3.0final-iterate"
-        title="Upgrade profile for Plone 3.0-rc2 to Plone 3.0-final with iterate step."
-        description="This profile contains configuration changes that are applied during the Plone 3.0-rc2 to 3.0-final upgrade when iterate is installed."
-        directory="profiles/rc2_final_iterate"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0final-3.0.1"
-        title="Upgrade profile for Plone 3.0-final to Plone 3.0.1"
-        description="This profile contains configuration changes that are applied during the Plone 3.0-final to 3.0.1 upgrade."
-        directory="profiles/final_three01"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0.1-3.0.2"
-        title="Upgrade profile for Plone 3.0.1 to Plone 3.0.2"
-        description="This profile contains configuration changes that are applied during the Plone 3.0.1 to 3.0.2 upgrade."
-        directory="profiles/three01_three02"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-    <genericsetup:registerProfile
-        name="3.0.3-3.0.4"
-        title="Upgrade profile for Plone 3.0.3 to Plone 3.0.4"
-        description="This profile contains configuration changes that are applied during the Plone 3.0.3 to 3.0.4 upgrade."
-        directory="profiles/three03_three04"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml b/plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml
deleted file mode 100644
index 0674a27..0000000
--- a/plone/app/upgrade/v30/profiles/alpha1_alpha2/componentregistry.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-     interface="plone.app.redirector.interfaces.IRedirectionStorage"
-     factory="plone.app.redirector.storage.RedirectionStorage"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml b/plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml
deleted file mode 100644
index f27f1b0..0000000
--- a/plone/app/upgrade/v30/profiles/alpha1_alpha2/controlpanel.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
-  <configlet title="Search" action_id="SearchSettings" appId="Plone"
-    category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@search-controlpanel"
-    icon_expr="string:${portal_url}/search_icon.png"
-    visible="True" i18n:attributes="title">
-    <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Mail" action_id="MailHost" appId="MailHost"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@mail-controlpanel"
-     icon_expr="string:${portal_url}/mail_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml b/plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml
deleted file mode 100644
index 3438a54..0000000
--- a/plone/app/upgrade/v30/profiles/alpha1_alpha2/cssregistry.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet id="generated.css" remove="True"/>
- <stylesheet id="RTL.css" update="True"
-    expression="python:portal.restrictedTraverse('@@plone_portal_state').is_rtl()" />
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml
deleted file mode 100644
index e626c54..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/componentregistry.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-     interface="plone.contentrules.engine.interfaces.IRuleStorage"
-     factory="plone.contentrules.engine.storage.RuleStorage"/>
-  <utility
-     interface="plone.app.i18n.locales.interfaces.ICountries"
-     factory="plone.app.i18n.locales.countries.Countries"/>
-  <utility
-     interface="plone.app.i18n.locales.interfaces.IContentLanguages"
-     factory="plone.app.i18n.locales.languages.ContentLanguages"/>
-  <utility
-     interface="plone.app.i18n.locales.interfaces.IMetadataLanguages"
-     factory="plone.app.i18n.locales.languages.MetadataLanguages"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml
deleted file mode 100644
index a18e907..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/controlpanel.xml
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
-  <configlet title="Maintenance" action_id="Maintenance"
-     appId="Plone" category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@maintenance-controlpanel"
-     icon_expr="string:${portal_url}/maintenance_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Themes" action_id="PortalSkin" appId="PortalSkin"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@skins-controlpanel"
-     icon_expr="string:${portal_url}/skins_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Site" action_id="PloneReconfig" appId="Plone"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@site-controlpanel"
-     icon_expr="string:${portal_url}/logoIcon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="HTML Filtering" action_id="HtmlFilter" appId="HtmlFilter"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@filter-controlpanel"
-     icon_expr="string:${portal_url}/htmlfilter_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Security" action_id="SecuritySettings"
-     appId="SecuritySettings" category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@security-controlpanel"
-     icon_expr="string:${portal_url}/lock_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-  <configlet title="Content Rules" action_id="ContentRules" appId="Plone"
-     category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@rules-controlpanel"
-     icon_expr="string:${portal_url}/contentrules_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Content rules: Manage rules</permission>
-  </configlet>
-  <configlet title="Types" action_id="TypesSettings"
-     appId="TypesSettings" category="Plone" condition_expr=""
-     url_expr="string:${portal_url}/@@types-controlpanel"
-     icon_expr="string:${portal_url}/document_icon.png"
-     visible="True" i18n:attributes="title">
-   <permission>Manage portal</permission>
-  </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml
deleted file mode 100644
index 1385165..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/jsregistry.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
- <javascript id="folder_contents_hideAddItems.js" remove="True"/>
- <javascript cacheable="True" compression="safe" cookable="True"
-   enabled="True" expression="" id="form_tabbing.js" inline="False"
-   insert-after="collapsiblesections.js"/>
- <javascript cacheable="True" compression="safe" cookable="True"
-   enabled="True" expression="" id="input-label.js" inline="False"
-   insert-after="form_tabbing.js"/>
- <javascript cacheable="True" compression="safe" cookable="True"
-   enabled="True" expression="" id="toc.js" inline="False"
-   insert-after="styleswitcher.js"/>
- <javascript cacheable="True" compression="none" cookable="True"
-   enabled="True" expression="" id="webstats.js" inline="False"
-   insert-after="toc.js"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml
deleted file mode 100644
index cd7f73a..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/properties.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<site>
- <property name="email_charset" type="string">utf-8</property>
-</site>
diff --git a/plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml b/plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml
deleted file mode 100644
index 110cced..0000000
--- a/plone/app/upgrade/v30/profiles/alpha2_beta1/propertiestool.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="enable_link_integrity_checks" type="boolean">True</property>
-  <property name="enable_sitemap" type="boolean">False</property>
-  <property name="external_links_open_new_window" type="string">False</property>
-  <property name="many_groups" type="boolean">False</property>
-  <property name="number_of_days_to_keep" type="int">7</property>
-  <property name="webstats_js" type="string"></property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml
deleted file mode 100644
index 6f63786..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/actions.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="user" meta_type="CMF Action Category">
-  <object name="join" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Register</property>
-  </object>
-  <object name="undo" meta_type="CMF Action" i18n:domain="plone">
-   <property name="visible">False</property>
-  </object>
- </object>
- <object name="document_actions" meta_type="CMF Action Category">
-  <object name="rss" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">RSS feed</property>
-  </object>
-  <object name="sendto" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Send this</property>
-  </object>
-  <object name="print" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Print this</property>
-  </object>
-  <object name="full_screen" meta_type="CMF Action" i18n:domain="plone">
-   <property name="visible">False</property>
-  </object>
- </object>
- <object name="object" meta_type="CMF Action Category">
-  <object name="contentrules" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Rules</property>
-   <property name="description" i18n:translate=""></property>
-   <property
-      name="url_expr">string:${plone_context_state/canonical_object_url}/@@manage-content-rules</property>
-   <property name="icon_expr"></property>
-   <property
-      name="available_expr">python:plone_context_state.canonical_object().restrictedTraverse('@@plone_contentrules_info').show_rules_tab()</property>
-   <property name="permissions">
-    <element value="Content rules: Manage rules"/>
-   </property>
-   <property name="visible">True</property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml
deleted file mode 100644
index 0f41af0..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/catalog.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_catalog" meta_type="Plone Catalog Tool">
- <index name="UID" meta_type="FieldIndex">
-  <indexed_attr value="UID"/>
- </index>
- <column value="UID"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml
deleted file mode 100644
index 0cb28a7..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/componentregistry.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <utilities>
-  <utility factory="Products.CMFPlone.PloneTool.PloneTool"
-     interface="Products.CMFPlone.interfaces.basetool.IPloneTool"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml
deleted file mode 100644
index 2dc84c0..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/cssregistry.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="controlpanel.css" media="screen"
-    rel="stylesheet" rendering="import" insert-after="portlets.css"/>
- <stylesheet id="toc.css" remove=""/>
- <stylesheet id="navtree.css" insert-after="deprecated.css"/>
- <stylesheet id="invisibles.css" insert-after="navtree.css"/>
- <stylesheet id="forms.css" insert-after="invisibles.css"/>
- <stylesheet id="presentation.css" remove=""/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml
deleted file mode 100644
index a138995..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/export_steps.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0"?>
-<export-steps>
- <export-step id="archetypetool"
-              handler="Products.Archetypes.exportimport.archetypetool.exportArchetypeTool"
-              title="Archetype Tool">
-
-    Export Archetype type specific configuration.
-
- </export-step>
-</export-steps>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml
deleted file mode 100644
index a10c74b..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/import_steps.xml
+++ /dev/null
@@ -1,57 +0,0 @@
-<?xml version="1.0"?>
-<import-steps>
- <import-step id="archetypes-various" version="20070318-01"
-              handler="Products.Archetypes.setuphandlers.setupArchetypes"
-              title="Archetypes setup">
-  <dependency step="componentregistry"/>
-
-
-     Archetypes installation step.
-
- </import-step>
- <import-step id="archetypetool" version="20070318-01"
-              handler="Products.Archetypes.exportimport.archetypetool.importArchetypeTool"
-              title="Archetype Tool">
-  <dependency step="archetypes-various"/>
-
-
-    Import Archetype type specific configuration.
-
- </import-step>
- <import-step id="mimetypes-registry-various"
-              version="20070309-01"
-              handler="Products.MimetypesRegistry.setuphandlers.setupMimetypesRegistry"
-              title="MimetypesRegistry setup">
-  <dependency step="componentregistry"/>
-
-
-    MimetypesRegistry installation step.
-
- </import-step>
- <import-step id="plonepas" version="20061230-01"
-              handler="Products.PlonePAS.setuphandlers.setupPlonePAS"
-              title="PlonePAS setup">
-  <dependency step="componentregistry"/>
-  <dependency step="memberdata-properties"/>
-  <dependency step="rolemap"/>
-
-
-
-
-
-
-    PlonePAS installation step.
-
- </import-step>
- <import-step id="portal-transforms-various"
-              version="20070309-01"
-              handler="Products.PortalTransforms.setuphandlers.setupPortalTransforms"
-              title="PortalTransforms setup">
-  <dependency step="componentregistry"/>
-
-
-    PortalTransforms installation step.
-
- </import-step>
-</import-steps>
-
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml
deleted file mode 100644
index 26391e2..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/portal_atct.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0"?>
-<atcttool>
- <topic_indexes>
-  <index name="object_provides" description="" enabled="False"
-     friendlyName="">
-   <criteria>ATCurrentAuthorCriterion</criteria>
-   <criteria>ATListCriterion</criteria>
-   <criteria>ATReferenceCriterion</criteria>
-   <criteria>ATSelectionCriterion</criteria>
-   <criteria>ATSimpleIntCriterion</criteria>
-   <criteria>ATSimpleStringCriterion</criteria>
-  </index>
-   <index name="Subject" description="The keywords used to describe an item"
-     enabled="True" friendlyName="Categories">
-  </index>
-  <index name="UID" description="" enabled="False" friendlyName="">
-   <criteria>ATBooleanCriterion</criteria>
-   <criteria>ATCurrentAuthorCriterion</criteria>
-   <criteria>ATDateRangeCriterion</criteria>
-   <criteria>ATFriendlyDateCriteria</criteria>
-   <criteria>ATListCriterion</criteria>
-   <criteria>ATPortalTypeCriterion</criteria>
-   <criteria>ATReferenceCriterion</criteria>
-   <criteria>ATSelectionCriterion</criteria>
-   <criteria>ATSimpleIntCriterion</criteria>
-   <criteria>ATSimpleStringCriterion</criteria>
-  </index>
- </topic_indexes>
- <topic_metadata>
-  <metadata name="effective"
-     description="The time and date an item becomes publicly available (non-ISO)"
-     />
-  <metadata name="ExpirationDate"
-     description="The time and date an item is no longer publicly available"
-     />
-  <metadata name="modified"
-     description="The time and date an item was last modified (non-ISO)"
-     />
-  <metadata name="Subject"
-    friendlyName="Categories"
-    />
-  <metadata name="UID" description="" enabled="False" friendlyName=""/>
-  <metadata name="effective"
-     description="The time and date an item becomes publicly available (non-ISO)"
-     />
-  <metadata name="ExpirationDate"
-     description="The time and date an item is no longer publicly available"
-     />
-  <metadata name="modified"
-     description="The time and date an item was last modified (non-ISO)"
-     />
-  <metadata name="Subject"
-    friendlyName="Categories"
-    />
-  <metadata name="expires"
-    description="The time and date an item is no longer publicly available (non-ISO)"
-    />
-
-  <metadata name="UID" description="" enabled="False" friendlyName=""/>
- </topic_metadata>
-</atcttool>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml
deleted file mode 100644
index d29f73d..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/propertiestool.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="navtree_properties" meta_type="Plone Property Sheet">
-  <property name="metaTypesNotToList" type="lines" purge="False">
-   <element value="ChangeSet"/>
-   <element value="ATRelativePathCriterion"/>
-  </property>
- </object>
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="localTimeFormat" type="string">%b %d, %Y</property>
-  <property name="localLongTimeFormat"
-     type="string">%b %d, %Y %I:%M %p</property>
-  <property name="calendar_starting_year" type="int">2001</property>
-  <property name="types_not_searched" type="lines" purge="False">
-   <element value="ChangeSet"/>
-    <element value="ATRelativePathCriterion"/>
-  </property>
-  <property name="number_of_days_to_keep" type="int">7</property>
-  <property name="enable_link_integrity_checks" type="boolean">True</property>
-  <property name="icon_visibility" type="string">enabled</property>
-  <property name="forbidden_contenttypes" type="lines" purge="False">
-   <element value="text/restructured"/>
-   <element value="text/plain"/>
-  </property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml
deleted file mode 100644
index e5960e9..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/rolemap.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="CMFEditions: Access previous versions"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-      <role name="Contributor" />
-    </permission>
-    <permission name="CMFEditions: Apply version control"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-      <role name="Contributor" />
-    </permission>
-    <permission name="CMFEditions: Checkout to location"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-    </permission>
-    <permission name="CMFEditions: Revert to previous versions"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-    </permission>
-    <permission name="CMFEditions: Save new version"
-                acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-      <role name="Reviewer"/>
-      <role name="Contributor" />
-    </permission>
-  </permissions>
-</rolemap>
diff --git a/plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml b/plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml
deleted file mode 100644
index 07f9046..0000000
--- a/plone/app/upgrade/v30/profiles/beta1_beta2/workflows.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_workflow" meta_type="Plone Workflow Tool">
- <bindings>
-  <type type_id="ATRelativePathCriterion"/>
- </bindings>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml
deleted file mode 100644
index 900ce49..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/actions.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="object" meta_type="CMF Action Category">
-
-  <object name="local_roles" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Sharing</property>
-   <property name="description" i18n:translate=""></property>
-   <property name="url_expr">string:${object_url}/@@sharing</property>
-   <property name="icon_expr"></property>
-   <property name="available_expr"></property>
-   <property name="permissions">
-    <element value="Change local roles"/>
-   </property>
-   <property name="visible">True</property>
-  </object>
-
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml
deleted file mode 100644
index 4ec722d..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/componentregistry.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <utilities>
-  <utility
-     interface="plone.app.viewletmanager.interfaces.IViewletSettingsStorage"
-     factory="plone.app.viewletmanager.storage.ViewletSettingsStorage"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml
deleted file mode 100644
index 79d5702..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/export_steps.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<export-steps>
- <export-step id="viewlets"
-              handler="plone.app.viewletmanager.exportimport.storage.exportViewletSettingsStorage"
-              title="Viewlet Settings">
-  Export viewlet settings
- </export-step>
-</export-steps>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml
deleted file mode 100644
index 5f82f7a..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/import_steps.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<import-steps>
- <import-step id="viewlets" version="20070503-01"
-              handler="plone.app.viewletmanager.exportimport.storage.importViewletSettingsStorage"
-              title="Viewlet Settings">
-  <dependency step="componentregistry"/>
-    Import viewlet settings
- </import-step>
-</import-steps>
diff --git a/plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml b/plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml
deleted file mode 100644
index d011c4a..0000000
--- a/plone/app/upgrade/v30/profiles/beta2_beta3/viewlets.xml
+++ /dev/null
@@ -1,16 +0,0 @@
-<?xml version="1.0"?>
-<object>
-  <order manager="plone.portaltop" skinname="Plone Default">
-    <viewlet name="plone.header" />
-    <viewlet name="plone.personal_bar" />
-    <viewlet name="plone.app.i18n.locales.languageselector" />
-    <viewlet name="plone.path_bar" />
-  </order>
-  <order manager="plone.portalheader" skinname="Plone Default">
-    <viewlet name="plone.skip_links" />
-    <viewlet name="plone.site_actions" />
-    <viewlet name="plone.searchbox" />
-    <viewlet name="plone.logo" />
-    <viewlet name="plone.global_sections" />
-  </order>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml
deleted file mode 100644
index c04f721..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/actions.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="object" meta_type="CMF Action Category">
-
-  <object name="contentrules" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title" i18n:translate="">Rules</property>
-   <property name="description" i18n:translate=""></property>
-   <property
-      name="url_expr">string:${plone_context_state/canonical_object_url}/@@manage-content-rules</property>
-   <property name="icon_expr"></property>
-   <property
-      name="available_expr">python:plone_context_state.canonical_object().restrictedTraverse('@@plone_contentrules_info').show_rules_tab()</property>
-   <property name="permissions">
-    <element value="Content rules: Manage rules"/>
-   </property>
-   <property name="visible">True</property>
-  </object>
-
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt b/plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt
deleted file mode 100644
index 21f7128..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/cmfeditions_various.txt
+++ /dev/null
@@ -1 +0,0 @@
-# re-run the cmfeditions import
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml
deleted file mode 100644
index 9b7554c..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/cssregistry.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet id="mobile.css" enabled="0" />
- <!-- These are now implemented using JS -->
- <stylesheet id="textLarge.css" remove="True" />
- <stylesheet id="textSmall.css" remove="True" />
-
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml
deleted file mode 100644
index 4f229fa..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/jsregistry.xml
+++ /dev/null
@@ -1,52 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript id="kupuspellchecker.js" remove="True"/>
-  <javascript id="plone_menu.js" remove="True"/>
-  <javascript id="plone_javascripts.js" remove="True"/>
-  <javascript cacheable="True" compression="safe" cookable="True"
-              enabled="True" expression="not:here/@@plone_portal_state/anonymous"
-              id="++resource++kukit-src.js" inline="False"/>
-
-  <!-- Sarissa should be almost at the top, because it's a dependency for
-       many other scripts -->
-  <javascript id="sarissa.js" insert-after="toc.js" />
-  <!-- Move these, so they won't break up the rendering -->
-  <javascript id="toc.js" insert-after="styleswitcher.js" />
-  <javascript id="webstats.js" insert-after="toc.js" />
-
-  <!-- new file -->
-  <javascript cacheable="True" compression="safe" cookable="True"
-              enabled="True" expression="" id="accessibility.js"
-              inline="False" insert-before="styleswitcher.js"/>
-
-  <!-- Make these resources only render for logged-in users -->
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="dropdown.js"
-              insert-after="webstats.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="table_sorter.js"
-              insert-after="dropdown.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="calendar_formfield.js"
-              insert-after="table_sorter.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="calendarpopup.js"
-              insert-after="calendar_formfield.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="formUnload.js"
-              insert-after="calendarpopup.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="formsubmithelpers.js"
-              insert-after="formUnload.js"/>
-  <javascript expression="not: portal/portal_membership/isAnonymousUser"
-              id="unlockOnFormUnload.js"
-              insert-after="formsubmithelpers.js"/>
-
- <!-- Remove unused JS -->
- <javascript id="correctPREformatting.js" remove="True"/>
- <javascript id="plone_minwidth.js" remove="True"/>
- <javascript id="folder_contents_filter.js" remove="True"/>
- <javascript id="fullscreenmode.js" remove="True"/>
- <javascript id="login.js" remove="True"/>
-
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml
deleted file mode 100644
index 933806c..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/propertiestool.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <!-- Note - for newly created sites, this is False, but it represents a
-       behavioural change we may not want when upgrading sites
-    -->
-  <property name="disable_nonfolderish_sections" type="boolean">True</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml b/plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml
deleted file mode 100644
index 58df294..0000000
--- a/plone/app/upgrade/v30/profiles/beta3_beta4/viewlets.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object>
-  <order manager="plone.contentviews" skinname="Plone Default">
-    <viewlet name="plone.contentviews" />
-    <viewlet name="plone.contentactions" />
-  </order>
-  <order manager="plone.portalfooter" skinname="Plone Default">
-    <viewlet name="plone.footer" />
-    <viewlet name="plone.colophon" />
-  </order>
-</object>
\ No newline at end of file
diff --git a/plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml b/plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml
deleted file mode 100644
index b7896f4..0000000
--- a/plone/app/upgrade/v30/profiles/final_three01/componentregistry.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-     interface="five.customerize.interfaces.IViewTemplateContainer"
-     object="portal_view_customizations"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/final_three01/rolemap.xml b/plone/app/upgrade/v30/profiles/final_three01/rolemap.xml
deleted file mode 100644
index 8685620..0000000
--- a/plone/app/upgrade/v30/profiles/final_three01/rolemap.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="Delete objects" acquire="True">
-      <role name="Manager"/>
-      <role name="Owner"/>
-      <role name="Editor"/>
-    </permission>
-  </permissions>
-</rolemap>
diff --git a/plone/app/upgrade/v30/profiles/final_three01/toolset.xml b/plone/app/upgrade/v30/profiles/final_three01/toolset.xml
deleted file mode 100644
index e5b7055..0000000
--- a/plone/app/upgrade/v30/profiles/final_three01/toolset.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0"?>
-<tool-setup>
- <required tool_id="portal_view_customizations"
-           class="plone.app.customerize.tool.ViewTemplateContainer"/>
-</tool-setup>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final/actions.xml b/plone/app/upgrade/v30/profiles/rc2_final/actions.xml
deleted file mode 100644
index 2e67757..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final/actions.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="document_actions" meta_type="CMF Action Category">
-
-  <object name="extedit" meta_type="CMF Action" i18n:domain="plone">
-   <property name="title"
-       i18n:translate="">Edit with external application</property>
-  </object>
-
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml b/plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml
deleted file mode 100644
index 41b375e..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final/cssregistry.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
-
- <!-- Move the CSS to the top, so the anon CSS block is rendered last -->
- <stylesheet id="member.css" insert-before="base.css" />
- <stylesheet id="RTL.css" insert-before="base.css" />
-</object>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml b/plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml
deleted file mode 100644
index 14cff81..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final/jsregistry.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript id="kupucontextmenu.js" remove="True"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml b/plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml
deleted file mode 100644
index 0494be2..0000000
--- a/plone/app/upgrade/v30/profiles/rc2_final_iterate/rolemap.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="iterate : Check in content"
-                acquire="True">
-      <role name="Owner"/>
-      <role name="Manager"/>
-      <role name="Editor"/>
-    </permission>
-    <permission name="iterate : Check out content"
-                acquire="True">
-      <role name="Owner"/>
-      <role name="Manager"/>
-      <role name="Editor"/>
-    </permission>
-  </permissions>
-</rolemap>
diff --git a/plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml b/plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml
deleted file mode 100644
index c5deef8..0000000
--- a/plone/app/upgrade/v30/profiles/three01_three02/controlpanel.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
- <configlet title="Language" action_id="PloneLanguageTool"
-    appId="PloneLanguageTool" category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@language-controlpanel"
-    icon_expr="string:${portal_url}/flag-plone.png"
-    visible="True" i18n:attributes="title">
-  <permission>Manage portal</permission>
- </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml b/plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml
deleted file mode 100644
index 3598f22..0000000
--- a/plone/app/upgrade/v30/profiles/three01_three02/jsregistry.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript id="webstats.js" remove="True"/>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml b/plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml
deleted file mode 100644
index 9e62b5f..0000000
--- a/plone/app/upgrade/v30/profiles/three01_three02/rolemap.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<rolemap>
-  <permissions>
-    <permission name="Modify portal content"
-                acquire="True">
-        <role name="Editor" />
-        <role name="Owner" />
-    </permission>
-  </permissions>
-</rolemap>
-
-
diff --git a/plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml b/plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml
deleted file mode 100644
index 470100d..0000000
--- a/plone/app/upgrade/v30/profiles/three03_three04/diff_tool.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0"?>
-<object>
- <difftypes>
-  <type portal_type="Document">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Event">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="File">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Folder">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Image">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="Link">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
-  <type portal_type="News Item">
-   <field name="any" difftype="Compound Diff for AT types"/>
-  </type>
- </difftypes>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml
deleted file mode 100644
index c534642..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/componentregistry.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <utilities>
-  <utility
-     interface="Products.CMFDiffTool.interfaces.IDiffTool"
-     object="portal_diff"/>
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml
deleted file mode 100644
index 0815f58..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/controlpanel.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_controlpanel"
-    xmlns:i18n="http://xml.zope.org/namespaces/i18n" i18n:domain="plone">
- <configlet title="Markup" action_id="MarkupSettings"
-    appId="MarkupSettings" category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@markup-controlpanel"
-    icon_expr="string:${portal_url}/edit.png"
-    visible="True" i18n:attributes="title">
-  <permission>Manage portal</permission>
- </configlet>
- <configlet title="Calendar" action_id="CalendarSettings"
-    appId="Plone" category="Plone" condition_expr=""
-    url_expr="string:${portal_url}/@@calendar-controlpanel"
-    icon_expr="string:${portal_url}/event_icon.png"
-    visible="True" i18n:attributes="title">
-  <permission>Manage portal</permission>
- </configlet>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml
deleted file mode 100644
index 330f099..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/cssregistry.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_css" meta_type="Stylesheets Registry">
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="navtree.css" media="screen" rel="stylesheet"
-    rendering="import" insert-after="deprecated.css" />
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="invisibles.css" media="screen" rel="stylesheet"
-    rendering="import" insert-after="navtree.css" />
- <stylesheet title="" cacheable="True" compression="safe" cookable="True"
-    enabled="1" expression="" id="forms.css" media="screen" rel="stylesheet"
-    rendering="import" insert-after="invisibles.css" />
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml
deleted file mode 100644
index 444bb1c..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/propertiestool.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="default_contenttype" type="string">text/html</property>
-  <property name="forbidden_contenttypes" type="lines">
-   <element value="text/structured"/>
-   <element value="text/restructured"/>
-   <element value="text/x-rst"/>
-   <element value="text/plain"/>
-   <element value="text/plain-pre"/>
-   <element value="text/x-python"/>
-   <element value="text/x-web-markdown"/>
-   <element value="text/x-web-intelligent"/>
-   <element value="text/x-web-textile"/>
-  </property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml b/plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml
deleted file mode 100644
index bcc1cdc..0000000
--- a/plone/app/upgrade/v30/profiles/two5x_alpha1/toolset.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0"?>
-<tool-setup>
- <required tool_id="portal_groupdata"
-           class="Products.PlonePAS.tools.groupdata.GroupDataTool"/>
- <required tool_id="portal_groups"
-           class="Products.PlonePAS.tools.groups.GroupsTool"/>
- <required tool_id="portal_memberdata"
-           class="Products.PlonePAS.tools.memberdata.MemberDataTool"/>
- <required tool_id="portal_membership"
-           class="Products.PlonePAS.tools.membership.MembershipTool"/>
- <required tool_id="portal_diff"
-           class="Products.CMFDiffTool.CMFDiffTool.CMFDiffTool"/>
-</tool-setup>
diff --git a/plone/app/upgrade/v30/rcs.py b/plone/app/upgrade/v30/rcs.py
deleted file mode 100644
index 50fcbd8..0000000
--- a/plone/app/upgrade/v30/rcs.py
+++ /dev/null
@@ -1,44 +0,0 @@
-from types import InstanceType
-
-from Products.CMFCore.utils import getToolByName
-from Products.MimetypesRegistry.mime_types.mtr_mimetypes import text_web_intelligent
-from Products.PortalTransforms.transforms.web_intelligent_plain_text_to_html import register as intel2html_register
-from Products.PortalTransforms.transforms.html_to_web_intelligent_plain_text import register as html2intel_register
-
-from plone.app.upgrade.utils import logger
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def rc2_final(context):
-    loadMigrationProfile(
-        context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final')
-    try:
-        import plone.app.iterate
-    except ImportError:
-        pass
-    else:
-        loadMigrationProfile(
-            context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final-iterate')
-
-
-def addIntelligentText(context):
-    """ add intelligenttext mime type and transforms that have been
-    introduced in MimetypesRegistry and PortalTransforms 1.6 and that
-    are never updated anywhere (#6684)
-    """
-    # Add mime type
-    # See MimetypesRegistry/mime_types/mtr_mimetypes.py
-    mt = text_web_intelligent
-    if type(mt) != InstanceType:
-        mt = mt()
-    mtr = getToolByName(context, 'mimetypes_registry')
-    mtr.register(mt)
-    logger.info("Added text_web_intelligent mime type to registry")
-
-    # Add transforms
-    # See PortalTransforms/transforms/__init__.py
-    engine = getToolByName(context, 'portal_transforms')
-    engine.registerTransform(intel2html_register())
-    logger.info("Added intelligenttext to html transform to registry")
-    engine.registerTransform(html2intel_register())
-    logger.info("Added html to intelligenttext transform to registry")
diff --git a/plone/app/upgrade/v30/tests.py b/plone/app/upgrade/v30/tests.py
deleted file mode 100644
index e4954e7..0000000
--- a/plone/app/upgrade/v30/tests.py
+++ /dev/null
@@ -1,1203 +0,0 @@
-from Acquisition import aq_base
-
-from five.localsitemanager.registry import FiveVerifyingAdapterLookup
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.app.i18n.locales.interfaces import IContentLanguages
-from plone.app.i18n.locales.interfaces import ICountries
-from plone.app.i18n.locales.interfaces import IMetadataLanguages
-from plone.app.portlets import portlets
-from plone.app.redirector.interfaces import IRedirectionStorage
-from plone.portlets.interfaces import IPortletManager
-from plone.portlets.interfaces import IPortletAssignmentMapping
-from plone.portlets.interfaces import ILocalPortletAssignmentManager
-from plone.portlets.constants import CONTEXT_CATEGORY as CONTEXT_PORTLETS
-
-from zExceptions import BadRequest
-from zope.location.interfaces import ISite
-from zope.component import getGlobalSiteManager
-from zope.component import getSiteManager
-from zope.component import getUtility, getMultiAdapter
-from zope.component.hooks import clearSite
-
-from Products.Archetypes.interfaces import IArchetypeTool
-from Products.Archetypes.interfaces import IReferenceCatalog
-from Products.Archetypes.interfaces import IUIDCatalog
-from Products.CMFActionIcons.interfaces import IActionIconsTool
-from Products.CMFCalendar.interfaces import ICalendarTool
-from Products.CMFCore.ActionInformation import Action
-from Products.CMFCore.ActionInformation import ActionCategory
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.utils import getToolInterface
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.permissions import AccessInactivePortalContent
-from Products.CMFCore.interfaces import IActionsTool
-from Products.CMFCore.interfaces import ICachingPolicyManager
-from Products.CMFCore.interfaces import ICatalogTool
-from Products.CMFCore.interfaces import IContentTypeRegistry
-from Products.CMFCore.interfaces import IDiscussionTool
-from Products.CMFCore.interfaces import IMemberDataTool
-from Products.CMFCore.interfaces import IMembershipTool
-from Products.CMFCore.interfaces import IMetadataTool
-from Products.CMFCore.interfaces import IPropertiesTool
-from Products.CMFCore.interfaces import IRegistrationTool
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFCore.interfaces import ISkinsTool
-from Products.CMFCore.interfaces import ISyndicationTool
-from Products.CMFCore.interfaces import ITypesTool
-from Products.CMFCore.interfaces import IURLTool
-from Products.CMFCore.interfaces import IConfigurableWorkflowTool
-from Products.CMFCore.ActionInformation import ActionInformation
-from Products.CMFDiffTool.interfaces import IDiffTool
-from Products.CMFEditions.interfaces import IArchivistTool
-from Products.CMFEditions.interfaces import IPortalModifierTool
-from Products.CMFEditions.interfaces import IPurgePolicyTool
-from Products.CMFEditions.interfaces.IRepository import IRepositoryTool
-from Products.CMFEditions.interfaces import IStorageTool
-from Products.CMFFormController.interfaces import IFormControllerTool
-from Products.CMFQuickInstallerTool.interfaces import IQuickInstallerTool
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.CMFPlone.interfaces import IPloneTool
-from Products.CMFPlone.interfaces import ITranslationServiceTool
-from Products.CMFUid.interfaces import IUniqueIdAnnotationManagement
-from Products.CMFUid.interfaces import IUniqueIdGenerator
-from Products.CMFUid.interfaces import IUniqueIdHandler
-from Products.GenericSetup.interfaces import ISetupTool
-from Products.MailHost.interfaces import IMailHost
-from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
-from Products.PortalTransforms.interfaces import IPortalTransformsTool
-from Products.PloneLanguageTool.interfaces import ILanguageTool
-from Products.PlonePAS.interfaces.group import IGroupTool
-from Products.PlonePAS.interfaces.group import IGroupDataTool
-from Products.ResourceRegistries.interfaces import ICSSRegistry
-from Products.ResourceRegistries.interfaces import IJSRegistry
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import loadMigrationProfile
-from plone.app.upgrade.utils import version_match
-
-from plone.app.upgrade.v30.alphas import enableZope3Site
-from plone.app.upgrade.v30.alphas import migrateOldActions
-from plone.app.upgrade.v30.alphas import updateActionsI18NDomain
-from plone.app.upgrade.v30.alphas import updateFTII18NDomain
-from plone.app.upgrade.v30.alphas import convertLegacyPortlets
-from plone.app.upgrade.v30.alphas import registerToolsAsUtilities
-from plone.app.upgrade.v30.alphas import registration
-from plone.app.upgrade.v30.alphas import addReaderAndEditorRoles
-from plone.app.upgrade.v30.alphas import migrateLocalroleForm
-from plone.app.upgrade.v30.alphas import reorderUserActions
-from plone.app.upgrade.v30.alphas import updatePASPlugins
-from plone.app.upgrade.v30.alphas import updateConfigletTitles
-from plone.app.upgrade.v30.alphas import updateMemberSecurity
-from plone.app.upgrade.v30.alphas import addCacheForResourceRegistry
-from plone.app.upgrade.v30.alphas import removeTablelessSkin
-from plone.app.upgrade.v30.alphas import addObjectProvidesIndex
-from plone.app.upgrade.v30.alphas import restorePloneTool
-from plone.app.upgrade.v30.alphas import installProduct
-
-from plone.app.upgrade.v30.betas import migrateHistoryTab
-from plone.app.upgrade.v30.betas import changeOrderOfActionProviders
-from plone.app.upgrade.v30.betas import cleanupOldActions
-from plone.app.upgrade.v30.betas import cleanDefaultCharset
-from plone.app.upgrade.v30.betas import addAutoGroupToPAS
-from plone.app.upgrade.v30.betas import removeS5Actions
-from plone.app.upgrade.v30.betas import addContributorToCreationPermissions
-from plone.app.upgrade.v30.betas import removeSharingAction
-from plone.app.upgrade.v30.betas import addEditorToSecondaryEditorPermissions
-from plone.app.upgrade.v30.betas import updateEditActionConditionForLocking
-from plone.app.upgrade.v30.betas import addOnFormUnloadJS
-
-from plone.app.upgrade.v30.betas import updateTopicTitle
-from plone.app.upgrade.v30.betas import cleanupActionProviders
-from plone.app.upgrade.v30.betas import hidePropertiesAction
-
-from plone.app.upgrade.v30.rcs import addIntelligentText
-
-from plone.app.upgrade.v30.final_three0x import installNewModifiers
-
-try:
-    from Products.ATContentTypes.interface import IATCTTool
-    HAS_ATCT = True
-except ImportError:
-    HAS_ATCT = False
-
-try:
-    from Products.CMFPlone.interfaces import IFactoryTool
-except:
-    from Products.ATContentTypes.interfaces import IFactoryTool
-
-
-class TestMigrations_v3_0_Actions(MigrationTest):
-
-    def afterSetUp(self):
-        self.actions = self.portal.portal_actions
-        self.types = self.portal.portal_types
-        self.workflow = self.portal.portal_workflow
-        self._migrate_reply_action()
-
-    def _migrate_reply_action(self):
-        # Create dummy old ActionInformation
-        reply = ActionInformation('reply',
-                                  title='Reply',
-                                  category='reply_actions',
-                                  condition='context/replyAllowed',
-                                  permissions=(AccessInactivePortalContent, ),
-                                  priority=10,
-                                  visible=True,
-                                  action='context/reply'
-                                  )
-
-        from OFS.SimpleItem import SimpleItem
-
-        class DummyTool(SimpleItem):
-            pass
-        dummy = DummyTool()
-        dummy._actions = (reply,)
-        self.portal._setObject('dummy', dummy)
-
-    def testMigrateActions(self):
-        # Test it twice
-        for i in range(2):
-            migrateOldActions(self.portal)
-            reply_actions = getattr(self.actions, 'reply_actions', None)
-            self.assertFalse(reply_actions is None)
-            reply = getattr(reply_actions, 'reply', None)
-            self.assertFalse(reply is None)
-            self.assertTrue(isinstance(reply, Action))
-            # Verify all data has been upgraded correctly to the new Action
-            data = reply.getInfoData()[0]
-            self.assertEqual(data['category'], 'reply_actions')
-            self.assertEqual(data['title'], 'Reply')
-            self.assertEqual(data['visible'], True)
-            self.assertEqual(data['permissions'],
-                             (AccessInactivePortalContent, ))
-            self.assertEqual(data['available'].text, 'context/replyAllowed')
-            self.assertEqual(data['url'].text, 'context/reply')
-            # Make sure the original action has been removed
-            self.assertEqual(len(self.portal.dummy._actions), 0)
-
-    def testUpdateActionsI18NDomain(self):
-        migrateOldActions(self.portal)
-        reply = self.actions.reply_actions.reply
-        self.assertEqual(reply.i18n_domain, '')
-        # Test it twice
-        for i in range(2):
-            updateActionsI18NDomain(self.portal)
-            self.assertEqual(reply.i18n_domain, 'plone')
-
-    def testUpdateActionsI18NDomainNonAscii(self):
-        migrateOldActions(self.portal)
-        reply = self.actions.reply_actions.reply
-        reply.title = 'Foo\xc3'
-        self.assertEqual(reply.i18n_domain, '')
-        self.assertEqual(reply.title, 'Foo\xc3')
-
-        updateActionsI18NDomain(self.portal)
-
-        self.assertEqual(reply.i18n_domain, '')
-
-    def testHistoryActionID(self):
-        # Test it twice
-        for i in range(2):
-            migrateHistoryTab(self.portal)
-            objects = getattr(self.actions, 'object', None)
-            self.assertFalse('rss' in objects.objectIds())
-
-    def testProviderCleanup(self):
-        self.actions.addActionProvider("portal_membership")
-        self.assertTrue(
-            "portal_membership" in self.actions.listActionProviders())
-        # Test it twice
-        for i in range(2):
-            cleanupActionProviders(self.portal)
-            self.assertFalse(
-                "portal_membership" in self.actions.listActionProviders())
-
-    def testRemovePropertiesActions(self):
-        ti = self.types.getTypeInfo("Document")
-        if ti.getActionObject("object/properties") is None:
-            ti.addAction("metadata", "name", "action", "condition",
-                         "permission", "object",)
-        # Test it twice
-        for i in range(2):
-            hidePropertiesAction(self.portal)
-            self.assertTrue(ti.getActionObject("object/metadata") is None)
-
-    def tearDown(self):
-        self.portal._delObject('dummy')
-
-
-class TestMigrations_v2_5_x(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:2.5.x-3.0a1'
-        self.types = self.portal.portal_types
-        self.properties = self.portal.portal_properties
-
-        for legacy_tool in ('portal_discussion', 'portal_actionicons'):
-            if legacy_tool not in self.portal:
-                from OFS.SimpleItem import SimpleItem
-                self.portal._setObject(legacy_tool, SimpleItem())
-
-    def disableSite(self, obj, iface=ISite):
-        # We need our own disableSite method as the CMF portal implements
-        # ISite directly, so we cannot remove it, like the disableSite method
-        # in Five.component would have done
-        from ZPublisher.BeforeTraverse import unregisterBeforeTraverse
-        from Products.Five.component import HOOK_NAME
-        obj = aq_base(obj)
-        if not iface.providedBy(obj):
-            raise TypeError('Object must be a site.')
-        unregisterBeforeTraverse(obj, HOOK_NAME)
-        if hasattr(obj, HOOK_NAME):
-            delattr(obj, HOOK_NAME)
-
-    def testEnableZope3Site(self):
-        # First we remove the site and site manager
-        self.disableSite(self.portal)
-        clearSite(self.portal)
-        self.portal.setSiteManager(None)
-        gsm = getGlobalSiteManager()
-        # Test it twice
-        for i in range(2):
-            enableZope3Site(self.portal)
-            # And see if we have an ISite with a local site manager
-            self.assertTrue(ISite.providedBy(self.portal))
-            sm = getSiteManager(self.portal)
-            self.assertFalse(gsm is sm)
-            lc = sm.utilities.LookupClass
-            self.assertEqual(lc, FiveVerifyingAdapterLookup)
-
-        # Test the lookupclass migration
-        sm.utilities.LookupClass = None
-        # Test it twice
-        for i in range(2):
-            enableZope3Site(self.portal)
-            self.assertEqual(sm.utilities.LookupClass,
-                             FiveVerifyingAdapterLookup)
-            self.assertEqual(sm.utilities.__parent__, sm)
-            self.assertEqual(sm.__parent__, self.portal)
-
-    def testUpdateFTII18NDomain(self):
-        doc = self.types.Document
-        doc.i18n_domain = ''
-        # Test it twice
-        for i in range(2):
-            updateFTII18NDomain(self.portal)
-            self.assertEqual(doc.i18n_domain, 'plone')
-
-    def testUpdateFTII18NDomainNonAscii(self):
-        doc = self.types.Document
-        doc.i18n_domain = ''
-        doc.title = 'Foo\xc3'
-        # Update FTI's
-        updateFTII18NDomain(self.portal)
-        # domain should have been updated
-        self.assertEqual(doc.i18n_domain, '')
-
-    def testAddDefaultAndForbiddenContentTypesProperties(self):
-        # Should add the forbidden_contenttypes and default_contenttype
-        # property
-        self.removeSiteProperty('forbidden_contenttypes')
-        self.removeSiteProperty('default_contenttype')
-        self.assertFalse(self.properties.site_properties.hasProperty(
-            'forbidden_contenttypes'))
-        self.assertFalse(
-            self.properties.site_properties.hasProperty('default_contenttype'))
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('propertiestool', ))
-            self.assertTrue(self.properties.site_properties.hasProperty(
-                'forbidden_contenttypes'))
-            self.assertTrue(self.properties.site_properties.hasProperty(
-                'default_contenttype'))
-            self.assertEqual(self.properties.site_properties.forbidden_contenttypes,
-                             ('text/structured', 'text/restructured', 'text/x-rst',
-                              'text/plain', 'text/plain-pre', 'text/x-python',
-                              'text/x-web-markdown', 'text/x-web-intelligent', 'text/x-web-textile')
-                             )
-
-    def testTablelessRemoval(self):
-        st = getToolByName(self.portal, "portal_skins")
-        if "Plone Tableless" not in st.getSkinSelections():
-            st.addSkinSelection('Plone Tableless',
-                                'one,two', make_default=True)
-        # Test it twice
-        for i in range(2):
-            removeTablelessSkin(self.portal)
-            self.assertFalse('Plone Tableless' in st.getSkinSelections())
-            self.assertFalse(st.default_skin == 'Plone Tableless')
-
-    def testLegacyPortletsConverted(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet',
-                                  'here/portlet_related/macros/portlet']
-        self.portal.right_slots = ['here/portlet_login/macros/portlet',
-                                   'here/portlet_languages/macros/portlet']
-
-        self.portal.Members.right_slots = []
-
-        # Test it twice
-        for i in range(2):
-            convertLegacyPortlets(self.portal)
-
-            self.assertEqual(self.portal.left_slots, [])
-            self.assertEqual(self.portal.right_slots, [])
-
-            left = getMultiAdapter(
-                (self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-            right = getMultiAdapter(
-                (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-            lp = left.values()
-            self.assertEqual(2, len(lp))
-
-            self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-            self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-            rp = right.values()
-            self.assertEqual(1, len(rp))
-            self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
-
-            members = self.portal.Members
-            portletAssignments = getMultiAdapter(
-                (members, rightColumn,), ILocalPortletAssignmentManager)
-            self.assertEqual(
-                True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
-
-    def testLegacyPortletsConvertedNoSlots(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet']
-
-        self.portal.Members.right_slots = []
-
-        if hasattr(self.portal.aq_base, 'right_slots'):
-            delattr(self.portal, 'right_slots')
-
-        convertLegacyPortlets(self.portal)
-
-        self.assertEqual(self.portal.left_slots, [])
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        lp = left.values()
-        self.assertEqual(2, len(lp))
-
-        self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-        self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-        rp = right.values()
-        self.assertEqual(0, len(rp))
-
-        members = self.portal.Members
-        portletAssignments = getMultiAdapter(
-            (members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(
-            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
-
-    def testLegacyPortletsConvertedBadSlots(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet',
-                                  'foobar', ]
-        self.portal.right_slots = ['here/portlet_login/macros/portlet']
-
-        self.portal.Members.right_slots = []
-
-        convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        self.assertEqual(self.portal.left_slots, [])
-        self.assertEqual(self.portal.right_slots, [])
-
-        lp = left.values()
-        self.assertEqual(2, len(lp))
-
-        self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-        self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-        rp = right.values()
-        self.assertEqual(1, len(rp))
-        self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
-
-        members = self.portal.Members
-        portletAssignments = getMultiAdapter(
-            (members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(
-            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
-
-    def testLegacyPortletsConvertedNoMembersFolder(self):
-        self.setRoles(('Manager',))
-        leftColumn = getUtility(
-            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(
-            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
-
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        for k in left:
-            del left[k]
-        for k in right:
-            del right[k]
-
-        self.portal.left_slots = ['here/portlet_recent/macros/portlet',
-                                  'here/portlet_news/macros/portlet',
-                                  'foobar', ]
-        self.portal.right_slots = ['here/portlet_login/macros/portlet']
-
-        self.portal._delObject('Members')
-
-        convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,),
-                               IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter(
-            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
-
-        self.assertEqual(self.portal.left_slots, [])
-        self.assertEqual(self.portal.right_slots, [])
-
-        lp = left.values()
-        self.assertEqual(2, len(lp))
-
-        self.assertTrue(isinstance(lp[0], portlets.recent.Assignment))
-        self.assertTrue(isinstance(lp[1], portlets.news.Assignment))
-
-        rp = right.values()
-        self.assertEqual(1, len(rp))
-        self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
-
-    def testRegisterToolsAsUtilities(self):
-        sm = getSiteManager(self.portal)
-        interfaces = (ISiteRoot, IPloneSiteRoot,
-                      IActionIconsTool, ISyndicationTool,
-                      IMetadataTool, IPropertiesTool, IMailHost,
-                      IUniqueIdAnnotationManagement, IUniqueIdGenerator,
-                      IDiffTool, IMimetypesRegistryTool,
-                      IPortalTransformsTool, IDiscussionTool, )
-        if HAS_ATCT:
-            interfaces += (IATCTTool,)
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertFalse(sm.queryUtility(i) is None)
-
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertFalse(sm.queryUtility(i) is None)
-
-    def testDontRegisterToolsAsUtilities(self):
-        sm = getSiteManager(self.portal)
-        interfaces = (ILanguageTool, IArchivistTool, IPortalModifierTool,
-                      IPurgePolicyTool, IRepositoryTool, IStorageTool,
-                      IFormControllerTool, IReferenceCatalog, IUIDCatalog,
-                      ICalendarTool, IActionsTool, ICatalogTool,
-                      IContentTypeRegistry, ISkinsTool, ITypesTool, IURLTool,
-                      IConfigurableWorkflowTool, IPloneTool, ICSSRegistry,
-                      IJSRegistry, IUniqueIdHandler, IFactoryTool,
-                      IMembershipTool, IGroupTool, IGroupDataTool,
-                      IMemberDataTool, IArchetypeTool, ICachingPolicyManager,
-                      IRegistrationTool, ITranslationServiceTool,
-                      ISetupTool, IQuickInstallerTool,
-                      )
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertTrue(sm.queryUtility(i) is None)
-
-        for i in interfaces:
-            sm.unregisterUtility(provided=i)
-        registerToolsAsUtilities(self.portal)
-        registerToolsAsUtilities(self.portal)
-        for i in interfaces:
-            self.assertTrue(sm.queryUtility(i) is None)
-
-    def testToolRegistration(self):
-        for (tool_id, interface) in registration:
-            self.assertEqual(getToolInterface(tool_id), interface)
-
-
-class TestMigrations_v3_0_alpha1(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:3.0a1-3.0a2'
-        self.actions = self.portal.portal_actions
-
-    def testInstallRedirectorUtility(self):
-        sm = getSiteManager(self.portal)
-        sm.unregisterUtility(provided=IRedirectionStorage)
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('componentregistry', ))
-            self.assertFalse(sm.queryUtility(IRedirectionStorage) is None)
-
-    def testAddReaderEditorRoles(self):
-        self.portal._delRoles(['Reader', 'Editor'])
-        # Test it twice
-        for i in range(2):
-            addReaderAndEditorRoles(self.portal)
-            self.assertTrue('Reader' in self.portal.valid_roles())
-            self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue(
-                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue(
-                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
-                'Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [
-                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testAddReaderEditorRolesPermissionOnly(self):
-        self.portal.manage_permission('View', [], True)
-        self.portal.manage_permission('Modify portal content', [], True)
-        # Test it twice
-        for i in range(2):
-            addReaderAndEditorRoles(self.portal)
-            self.assertTrue('Reader' in self.portal.valid_roles())
-            self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue(
-                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue(
-                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
-                'Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [
-                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testMigrateLocalroleForm(self):
-        fti = self.portal.portal_types['Document']
-        aliases = fti.getMethodAliases()
-        aliases['sharing'] = 'folder_localrole_form'
-        fti.setMethodAliases(aliases)
-        fti.addAction(
-            'test', 'Test', 'string:${object_url}/folder_localrole_form', None, 'View', 'object')
-        # Test it twice
-        for i in range(2):
-            migrateLocalroleForm(self.portal)
-            self.assertEqual('@@sharing', fti.getMethodAliases()['sharing'])
-            test_action = fti.listActions()[-1]
-            self.assertEqual(
-                'string:${object_url}/@@sharing', test_action.getActionExpression())
-
-    def testReorderUserActions(self):
-        self.actions.user.moveObjectsToTop(['logout', 'undo', 'join'])
-        # Test it twice
-        for i in range(2):
-            reorderUserActions(self.portal)
-            # build a dict that has the position as the value to make it easier
-            # to compare postions in the ordered list of actions
-            n = 0
-            sort = {}
-            for action in self.actions.user.objectIds():
-                sort[action] = n
-                n += 1
-            self.assertTrue(sort['preferences'] < sort['undo'])
-            self.assertTrue(sort['undo'] < sort['logout'])
-            self.assertTrue(sort['login'] < sort['join'])
-
-    def testReorderUserActionsIncompleteActions(self):
-        self.actions.user.moveObjectsToTop(['logout', 'undo', 'join'])
-        self.actions.user._delObject('preferences')
-        # Test it twice
-        for i in range(2):
-            reorderUserActions(self.portal)
-            n = 0
-            sort = {}
-            for action in self.actions.user.objectIds():
-                sort[action] = n
-                n += 1
-            self.assertTrue(sort['undo'] < sort['logout'])
-            self.assertTrue(sort['login'] < sort['join'])
-
-
-class TestMigrations_v3_0_alpha2(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:3.0a2-3.0b1'
-        self.actions = self.portal.portal_actions
-        self.properties = self.portal.portal_properties
-        self.cp = self.portal.portal_controlpanel
-
-    def testAddVariousProperties(self):
-        PROPERTIES = ('enable_link_integrity_checks', 'enable_sitemap',
-                      'external_links_open_new_window', 'many_groups',
-                      'number_of_days_to_keep', 'webstats_js')
-        for prop in PROPERTIES:
-            self.removeSiteProperty(prop)
-        sheet = self.properties.site_properties
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('propertiestool', ))
-            for prop in PROPERTIES:
-                self.assertTrue(sheet.hasProperty(prop))
-
-    def testInstallContentrulesAndLanguageUtilities(self):
-        sm = getSiteManager()
-        INTERFACES = (IRuleStorage, ICountries, IContentLanguages,
-                      IMetadataLanguages)
-        for i in INTERFACES:
-            sm.unregisterUtility(provided=i)
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile,
-                                 ('componentregistry', ))
-            for i in INTERFACES:
-                self.assertFalse(sm.queryUtility(i) is None)
-
-    def testAddEmailCharsetProperty(self):
-        if self.portal.hasProperty('email_charset'):
-            self.portal.manage_delProperties(['email_charset'])
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('properties', ))
-            self.assertTrue(self.portal.hasProperty('email_charset'))
-            self.assertEqual(self.portal.getProperty('email_charset'), 'utf-8')
-
-    def testUpdateMemberSecurity(self):
-        # These properties were removed in Plone 5, so we add them
-        # manually here if needed and check if they are properly updated by the
-        # updateMemberSecurity upgrade step
-        pprop = getToolByName(self.portal, 'portal_properties')
-        try:
-            self.portal.manage_addProperty('validate_email', False, 'boolean')
-        except BadRequest:  # property is already there
-            pass
-        try:
-            pprop.site_properties.manage_addProperty(
-                'allowAnonymousViewAbout', True, 'boolean')
-        except BadRequest:  # property is already there
-            pass
-
-        updateMemberSecurity(self.portal)
-
-        self.assertEqual(
-            pprop.site_properties.getProperty('allowAnonymousViewAbout'),
-            False
-        )
-
-        pmembership = getToolByName(self.portal, 'portal_membership')
-        self.assertEqual(pmembership.memberareaCreationFlag, False)
-        self.assertEqual(self.portal.getProperty('validate_email'), True)
-
-        app_roles = self.portal.rolesOfPermission(
-            permission='Add portal member')
-        app_perms = self.portal.permission_settings(
-            permission='Add portal member')
-        acquire_check = app_perms[0]['acquire']
-        reg_roles = []
-        for appperm in app_roles:
-            if appperm['selected'] == 'SELECTED':
-                reg_roles.append(appperm['name'])
-        self.assertTrue('Manager' in reg_roles)
-        self.assertTrue('Owner' in reg_roles)
-        self.assertEqual(acquire_check, '')
-
-    def testPASPluginInterfaces(self):
-        pas = self.portal.acl_users
-        from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin
-        pas.plugins.deactivatePlugin(
-            IUserEnumerationPlugin, 'mutable_properties')
-        updatePASPlugins(self.portal)
-
-        plugin = pas.mutable_properties
-        for intf_id in plugin.listInterfaces():
-            try:
-                intf = pas.plugins._getInterfaceFromName(intf_id)
-                self.assertTrue(
-                    'mutable_properties' in pas.plugins.listPluginIds(intf))
-            except KeyError:
-                # Ignore unregistered interface types
-                pass
-
-    def testUpdateConfigletTitles(self):
-        collection = self.cp.getActionObject('Plone/portal_atct')
-        language = self.cp.getActionObject('Plone/PloneLanguageTool')
-        navigation = self.cp.getActionObject('Plone/NavigationSettings')
-        types = self.cp.getActionObject('Plone/TypesSettings')
-        users = self.cp.getActionObject('Plone/UsersGroups')
-        users2 = self.cp.getActionObject('Plone/UsersGroups2')
-        # test it twice
-        for i in range(2):
-            updateConfigletTitles(self.portal)
-            self.assertEqual(collection.title, 'Collection')
-            self.assertEqual(language.title, 'Language')
-            self.assertEqual(navigation.title, 'Navigation')
-            self.assertEqual(types.title, 'Types')
-            self.assertEqual(users.title, 'Users and Groups')
-            self.assertEqual(users2.title, 'Users and Groups')
-
-    def testAddCacheForResourceRegistry(self):
-        ram_cache_id = 'ResourceRegistryCache'
-        # first remove the cache manager and make sure it's removed
-        self.portal._delObject(ram_cache_id)
-        self.assertFalse(ram_cache_id in self.portal.objectIds())
-        cssreg = self.portal.portal_css
-        cssreg.ZCacheable_setEnabled(0)
-        cssreg.ZCacheable_setManagerId(None)
-        self.assertFalse(cssreg.ZCacheable_enabled())
-        self.assertTrue(cssreg.ZCacheable_getManagerId() is None)
-        jsreg = self.portal.portal_javascripts
-        jsreg.ZCacheable_setEnabled(0)
-        jsreg.ZCacheable_setManagerId(None)
-        self.assertFalse(jsreg.ZCacheable_enabled())
-        self.assertTrue(jsreg.ZCacheable_getManagerId() is None)
-        # Test it twice
-        for i in range(2):
-            addCacheForResourceRegistry(self.portal)
-            self.assertTrue(ram_cache_id in self.portal.objectIds())
-            self.assertTrue(cssreg.ZCacheable_enabled())
-            self.assertFalse(cssreg.ZCacheable_getManagerId() is None)
-            self.assertTrue(jsreg.ZCacheable_enabled())
-            self.assertFalse(jsreg.ZCacheable_getManagerId() is None)
-
-    def testObjectProvidesIndex(self):
-        catalog = getToolByName(self.portal, 'portal_catalog')
-        if 'object_provides' in catalog.indexes():
-            catalog.delIndex('object_provides')
-        self.assertFalse('object_provides' in catalog.indexes())
-        # Test it twice
-        for i in range(2):
-            addObjectProvidesIndex(self.portal)
-            self.assertTrue('object_provides' in catalog.indexes())
-
-    def testMigratePloneTool(self):
-        tool = self.portal.plone_utils
-        tool.meta_type = 'PlonePAS Utilities Tool'
-        # Test it twice
-        for i in range(2):
-            restorePloneTool(self.portal)
-            tool = self.portal.plone_utils
-            self.assertEqual('Plone Utility Tool', tool.meta_type)
-
-    def testInstallPloneLanguageTool(self):
-        super(self.portal.__class__, self.portal).manage_delObjects(
-            ['portal_languages'])
-        self.uninstallProduct('PloneLanguageTool')
-        qi = getToolByName(self.portal, "portal_quickinstaller", None)
-        if qi is None:
-            # Newer Plone without qi.
-            return
-        # Test it twice
-        for i in range(2):
-            installProduct('PloneLanguageTool', self.portal)
-            self.assertTrue(qi.isProductInstalled('PloneLanguageTool'))
-            self.assertTrue('portal_languages' in self.portal.keys())
-
-
-class TestMigrations_v3_0(MigrationTest):
-
-    def afterSetUp(self):
-        self.profile = 'profile-plone.app.upgrade.v30:3.0b1-3.0b2'
-        self.actions = self.portal.portal_actions
-        self.skins = self.portal.portal_skins
-        self.types = self.portal.portal_types
-        self.workflow = self.portal.portal_workflow
-        self.properties = getToolByName(self.portal, 'portal_properties')
-
-    def testAddContentRulesAction(self):
-        self.portal.portal_actions.object._delObject('contentrules')
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('actions', ))
-            self.assertTrue(
-                'contentrules' in self.portal.portal_actions.object.objectIds())
-
-    def testChangeOrderOfActionProviders(self):
-        self.actions.deleteActionProvider('portal_types')
-        self.actions.addActionProvider('portal_types')
-        self.assertEqual(
-            self.actions.listActionProviders(),
-            ('portal_workflow', 'portal_actions', 'portal_types'))
-        # Test it twice
-        for i in range(2):
-            changeOrderOfActionProviders(self.portal)
-            self.assertEqual(
-                self.actions.listActionProviders(),
-                ('portal_workflow', 'portal_types', 'portal_actions'))
-
-    def testCleanupOldActions(self):
-        reply = Action('reply', title='Reply')
-        logged_in = Action('logged_in', title='Logged in')
-        change_ownership = Action('change_ownership', title='Change ownership')
-
-        object_ = self.actions.object
-        object_tabs = getattr(self.actions, 'object_tabs', None)
-        if object_tabs is None:
-            category = 'object_tabs'
-            self.actions._setObject(category, ActionCategory(id=category))
-            object_tabs = self.actions.object_tabs
-        if getattr(self.actions, 'global', None) is None:
-            category = 'global'
-            self.actions._setObject(category, ActionCategory(id=category))
-
-        if not 'reply' in object_.keys():
-            object_._setObject('reply', reply)
-        user = self.actions.user
-        if not 'logged_in' in user.keys():
-            user._setObject('logged_in', logged_in)
-        if not 'change_ownership' in object_tabs.keys():
-            object_tabs._setObject('change_ownership', change_ownership)
-        del object_tabs
-
-        # Test it twice
-        for i in range(2):
-            cleanupOldActions(self.portal)
-            self.assertFalse('reply' in object_.keys())
-            self.assertFalse('logged_in' in user.keys())
-            self.assertFalse('object_tabs' in self.actions.keys())
-            self.assertFalse('global' in self.actions.keys())
-
-    def testCharsetCleanup(self):
-        if not self.portal.hasProperty('default_charset'):
-            self.portal.manage_addProperty('default_charset', '', 'string')
-        # Test it twice
-        for i in range(2):
-            self.portal.manage_changeProperties(default_charset='latin1')
-            cleanDefaultCharset(self.portal)
-            self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                             'latin1')
-        # Test it twice
-        for i in range(2):
-            self.portal.manage_changeProperties(default_charset='')
-            cleanDefaultCharset(self.portal)
-            self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                             'nothere')
-
-    def testAutoGroupCreated(self):
-        pas = self.portal.acl_users
-        ids = pas.objectIds(['Automatic Group Plugin'])
-        if ids:
-            pas.manage_delObjects(ids)
-        addAutoGroupToPAS(self.portal)
-        self.assertEqual(pas.objectIds(['Automatic Group Plugin']),
-                         ['auto_group'])
-        plugin = pas.auto_group
-        interfaces = [info['interface']
-                      for info in pas.plugins.listPluginTypeInfo()]
-        for iface in interfaces:
-            if plugin.testImplements(iface):
-                self.assertFalse(
-                    'auto_group' not in pas.plugins.listPluginIds(iface))
-        self.assertEqual(len(pas.searchGroups(id='AuthenticatedUsers',
-                                              exact_match=True)), 1)
-
-    def testPloneS5(self):
-        pt = getToolByName(self.portal, "portal_types")
-        document = pt.restrictedTraverse('Document')
-        document.addAction('s5_presentation',
-                           name='View as presentation',
-                           action="string:${object/absolute_url}/document_s5_presentation",
-                           condition='python:object.document_s5_alter(test=True)',
-                           permission='View',
-                           category='document_actions',
-                           visible=1,
-                           )
-        action_ids = [x.getId() for x in document.listActions()]
-        self.assertTrue("s5_presentation" in action_ids)
-        # Test it twice
-        for i in range(2):
-            removeS5Actions(self.portal)
-            action_ids = [x.getId() for x in document.listActions()]
-            self.assertFalse("s5_presentation" in action_ids)
-
-    def testAddContributorToCreationPermissions(self):
-        self.portal._delRoles(['Contributor', ])
-        for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                  'ATContentTypes: Add Event',
-                  'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                  'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                  'ATContentTypes: Add News Item', ]:
-            self.portal.manage_permission(p, ['Manager', 'Owner'], True)
-        # Test it twice
-        for i in range(2):
-            addContributorToCreationPermissions(self.portal)
-            self.assertTrue('Contributor' in self.portal.valid_roles())
-            self.assertTrue(
-                'Contributor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                      'ATContentTypes: Add Event',
-                      'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                      'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                      'ATContentTypes: Add News Item', ]:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
-
-    def testAddContributerToCreationPermissionsNoStomp(self):
-        self.portal.manage_permission('Add portal content', ['Manager'], False)
-        # Test it twice
-        for i in range(2):
-            addContributorToCreationPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
-                'Add portal content') if r['selected']])
-            self.assertEqual(['Contributor', 'Manager'], roles)
-            self.assertEqual(False, bool(
-                self.portal.acquiredRolesAreUsedBy('Add portal content')))
-
-    def testAddBeta2VersioningPermissionsToNewRoles(self):
-        # This upgrade just uses GS to apply the role changes,
-        # these permissions will not have been installed previously,
-        # so this should be safe
-        for p in ['CMFEditions: Apply version control',
-                  'CMFEditions: Save new version',
-                  'CMFEditions: Access previous versions',
-                  'CMFEditions: Revert to previous versions',
-                  'CMFEditions: Checkout to location']:
-            self.portal.manage_permission(p, ['Manager', 'Owner'], True)
-        # Test it twice
-        for i in range(2):
-            loadMigrationProfile(self.portal,
-                                 'profile-plone.app.upgrade.v30:3.0b1-3.0b2',
-                                 steps=["rolemap"])
-            for p in ['CMFEditions: Apply version control',
-                      'CMFEditions: Save new version',
-                      'CMFEditions: Access previous versions']:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Editor') if r['selected']])
-            for p in ['CMFEditions: Revert to previous versions',
-                      'CMFEditions: Checkout to location']:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testRemoveSharingAction(self):
-        fti = self.types['Document']
-        fti.addAction(id='local_roles', name='Sharing',
-                      action='string:${object_url}/sharing',
-                      condition=None, permission='Manage properties',
-                      category='object')
-        # Test it twice
-        for i in range(2):
-            removeSharingAction(self.portal)
-            self.assertFalse('local_roles' in [
-                             a.id for a in fti.listActions()])
-
-    def testAddEditorToCreationPermissions(self):
-        for p in ['Manage properties', 'Modify view template', 'Request review']:
-            self.portal.manage_permission(p, ['Manager', 'Owner'], True)
-        # Test it twice
-        for i in range(2):
-            addEditorToSecondaryEditorPermissions(self.portal)
-            for p in ['Manage properties', 'Modify view template', 'Request review']:
-                self.assertTrue(p in [r['name'] for r in
-                                      self.portal.permissionsOfRole('Editor') if r['selected']])
-
-    def testAddEditorToCreationPermissionsNoStomp(self):
-        self.portal.manage_permission('Manage properties', ['Manager'], False)
-        # Test it twice
-        for i in range(2):
-            addEditorToSecondaryEditorPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
-                'Manage properties') if r['selected']])
-            self.assertEqual(['Editor', 'Manager'], roles)
-            self.assertEqual(False, bool(
-                self.portal.acquiredRolesAreUsedBy('Manage properties')))
-
-    def testUpdateEditActionConditionForLocking(self):
-        lockable_types = ['Document', 'Event', 'File', 'Folder',
-                          'Image', 'Link', 'News Item', 'Topic']
-        for contentType in lockable_types:
-            fti = self.types.getTypeInfo(contentType)
-            for action in fti.listActions():
-                if action.getId() == 'edit':
-                    action.condition = ''
-        # Test it twice
-        for i in range(2):
-            updateEditActionConditionForLocking(self.portal)
-            for contentType in lockable_types:
-                fti = self.types.getTypeInfo(contentType)
-                for action in fti.listActions():
-                    if action.getId() == 'edit':
-                        self.assertEqual(action.condition.text,
-                                         "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
-
-    def testUpdateEditExistingActionConditionForLocking(self):
-        fti = self.types.getTypeInfo('Document')
-        for action in fti.listActions():
-            if action.getId() == 'edit':
-                action.condition = Expression("foo")
-        # Test it twice
-        for i in range(2):
-            updateEditActionConditionForLocking(self.portal)
-            fti = self.types.getTypeInfo('Document')
-            for action in fti.listActions():
-                if action.getId() == 'edit':
-                    self.assertEqual(action.condition.text, 'foo')
-
-    def testAddOnFormUnloadRegistrationJS(self):
-        jsreg = self.portal.portal_javascripts
-        # unregister first
-        jsreg.unregisterResource('unlockOnFormUnload.js')
-        script_ids = jsreg.getResourceIds()
-        self.assertFalse('unlockOnFormUnload.js' in script_ids)
-        # Test it twice
-        for i in range(2):
-            addOnFormUnloadJS(self.portal)
-            script_ids = jsreg.getResourceIds()
-            self.assertTrue('unlockOnFormUnload.js' in script_ids)
-
-    def testUpdateTopicTitle(self):
-        topic = self.types.get('Topic')
-        topic.title = 'Old'
-        # Test it twice
-        for i in range(2):
-            updateTopicTitle(self.portal)
-            self.assertEqual(topic.title, 'Collection')
-
-    def testAddIntelligentText(self):
-        # Before the upgrade, the mime type and transforms of intelligent text
-        # are not available. They *are* here in a fresh site, so we may need
-        # to remove them first for testing. First we remove the transforms,
-        # as they depend on the mimetype being there.
-        missing_transforms = ["web_intelligent_plain_text_to_html",
-                              "html_to_web_intelligent_plain_text"]
-        ptr = self.portal.portal_transforms
-        current_transforms = ptr.objectIds()
-        for trans in missing_transforms:
-            if trans in current_transforms:
-                ptr.unregisterTransform(trans)
-        # Then we remove the mime type
-        mime_type = 'text/x-web-intelligent'
-        mtr = self.portal.mimetypes_registry
-        current_types = mtr.list_mimetypes()
-        if mime_type in current_types:
-            mtr.manage_delObjects((mime_type,))
-        # now all are gone:
-        self.assertFalse(mime_type in mtr.list_mimetypes())
-        self.assertFalse(set(ptr.objectIds()).issuperset(
-            set(missing_transforms)))
-        # Test it twice
-        for i in range(2):
-            addIntelligentText(self.portal)
-            # now all are back:
-            self.assertTrue(mime_type in mtr.list_mimetypes())
-            self.assertTrue(set(ptr.objectIds()).issuperset(
-                set(missing_transforms)))
-
-    def testInstallNewModifiers(self):
-        # ensure the new modifiers are installed
-        modifiers = self.portal.portal_modifier
-        self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                        modifiers.objectIds())
-        modifiers.manage_delObjects(['AbortVersioningOfLargeFilesAndImages',
-                                     'SkipVersioningOfLargeFilesAndImages'])
-        self.assertFalse('AbortVersioningOfLargeFilesAndImages' in
-                         modifiers.objectIds())
-        installNewModifiers(self.portal)
-        self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                        modifiers.objectIds())
-        self.assertTrue('SkipVersioningOfLargeFilesAndImages' in
-                        modifiers.objectIds())
-
-    def testInstallNewModifiersTwice(self):
-        # ensure that we get no errors when run twice
-        installNewModifiers(self.portal)
-        installNewModifiers(self.portal)
-
-    def testInstallNewModifiersDoesNotStompChanges(self):
-        # ensure that reinstalling doesn't kill customizations
-        modifiers = self.portal.portal_modifier
-        modifiers.AbortVersioningOfLargeFilesAndImages.max_size = 1000
-        installNewModifiers(self.portal)
-        self.assertEqual(modifiers.AbortVersioningOfLargeFilesAndImages.max_size,
-                         1000)
-
-    def testInstallNewModifiersNoTool(self):
-        # make sure there are no errors if the tool is missing
-        self.portal._delObject('portal_modifier')
-        installNewModifiers(self.portal)
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.0'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v2_5_x))
-    suite.addTest(makeSuite(TestMigrations_v3_0_Actions))
-    suite.addTest(makeSuite(TestMigrations_v3_0_alpha1))
-    suite.addTest(makeSuite(TestMigrations_v3_0_alpha2))
-    suite.addTest(makeSuite(TestMigrations_v3_0))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v31/__init__.py b/plone/app/upgrade/v31/__init__.py
deleted file mode 100644
index 7c01bcd..0000000
--- a/plone/app/upgrade/v31/__init__.py
+++ /dev/null
@@ -1,2 +0,0 @@
-import betas
-import final_three1x
diff --git a/plone/app/upgrade/v31/betas.py b/plone/app/upgrade/v31/betas.py
deleted file mode 100644
index 1748c17..0000000
--- a/plone/app/upgrade/v31/betas.py
+++ /dev/null
@@ -1,94 +0,0 @@
-from borg.localrole.utils import replace_local_role_manager
-from plone.portlets.interfaces import IPortletType
-from zope.component import getUtilitiesFor
-from zope.interface import Interface
-
-from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.browser.manage import ImportStepsView
-from Products.GenericSetup.browser.manage import ExportStepsView
-
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three0_beta1(portal):
-    """3.0.6 -> 3.1-beta1
-    """
-    out = []
-
-    loadMigrationProfile(
-        portal, 'profile-plone.app.upgrade.v31:3.0.6-3.1beta1')
-
-    addBrowserLayer(portal, out)
-    addCollectionAndStaticPortlets(portal, out)
-    migratePortletTypeRegistrations(portal, out)
-    removeDoubleGenericSetupSteps(portal, out)
-    reinstallCMFPlacefulWorkflow(portal, out)
-    replace_local_role_manager(portal)
-
-    return out
-
-
-def addBrowserLayer(portal, out):
-    qi = getToolByName(portal, "portal_quickinstaller", None)
-    if qi is None:
-        # Newer Plone without qi.
-        return
-    if not qi.isProductInstalled("plone.browserlayer"):
-        qi.installProduct("plone.browserlayer", locked=True)
-        out.append("Installed plone.browserlayer")
-
-
-def addCollectionAndStaticPortlets(portal, out):
-    qi = getToolByName(portal, "portal_quickinstaller", None)
-    if qi is None:
-        # Newer Plone without qi.
-        return
-    if not qi.isProductInstalled("plone.portlet.static"):
-        qi.installProduct("plone.portlet.static", locked=True)
-        out.append("Installed plone.portlet.static")
-    if not qi.isProductInstalled("plone.portlet.collection"):
-        qi.installProduct("plone.portlet.collection", locked=True)
-        out.append("Installed plone.portlet.collection")
-
-
-def migratePortletTypeRegistrations(portal, out):
-    for name, portletType in getUtilitiesFor(IPortletType):
-        if portletType.for_ is None:
-            portletType.for_ = [Interface]
-        elif type(portletType.for_) is not list:
-            portletType.for_ = [portletType.for_]
-
-    out.append("Upgraded portlet types to support multiple " +
-               "portlet manager interfaces.")
-
-
-def removeDoubleGenericSetupSteps(portal, out):
-    """Remove all GenericSetup steps that are registered both using
-    zcml and in the persistent registry from the persistent registry.
-    """
-    st = getToolByName(portal, "portal_setup")
-    view = ImportStepsView(st, None)
-    steps = [step["id"] for step in view.doubleSteps()]
-    if steps:
-        for step in steps:
-            st._import_registry.unregisterStep(step)
-        st._p_changed = True
-        out.append("Removed doubly registered GenericSetup import steps: %s" %
-                   " ".join(steps))
-
-    view = ExportStepsView(st, None)
-    steps = [step["id"] for step in view.doubleSteps()]
-    if steps:
-        for step in steps:
-            st._export_registry.unregisterStep(step)
-        out.append("Removed doubly registered GenericSetup export steps: %s" %
-                   " ".join(steps))
-
-
-def reinstallCMFPlacefulWorkflow(portal, out):
-    qi = getToolByName(portal, 'portal_quickinstaller', None)
-    if qi is not None:
-        installed = qi.isProductInstalled('CMFPlacefulWorkflow')
-        if installed:
-            qi.reinstallProducts(['CMFPlacefulWorkflow'])
-            out.append('Reinstalled CMFPlacefulWorkflow')
diff --git a/plone/app/upgrade/v31/configure.zcml b/plone/app/upgrade/v31/configure.zcml
deleted file mode 100644
index 31d2524..0000000
--- a/plone/app/upgrade/v31/configure.zcml
+++ /dev/null
@@ -1,98 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <!-- Plone 3.1.x -->
-
-    <genericsetup:upgradeStep
-        source="3.0.6"
-        destination="3.1-beta1"
-        title="Upgrade from Plone 3.0.6 to Plone 3.1-beta1"
-        profile="Products.CMFPlone:plone"
-        handler=".betas.three0_beta1"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1-beta1"
-        destination="3.1-rc1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1-rc1"
-        destination="3.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1"
-        destination="3.1.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.1"
-        destination="3.1.2"
-        title="Upgrade from Plone 3.1.1 to Plone 3.1.2"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three1x.three11_three12"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.2"
-        destination="3.1.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.3"
-        destination="3.1.4"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.4"
-        destination="3.1.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler=".final_three1x.three14_three15"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.5"
-        destination="3.1.5.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.5.1"
-        destination="3.1.6"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.1.6"
-        destination="3.1.7"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v31/data/test-base.zexp b/plone/app/upgrade/v31/data/test-base.zexp
deleted file mode 100644
index 10d3488..0000000
Binary files a/plone/app/upgrade/v31/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v31/data/test-full.zexp b/plone/app/upgrade/v31/data/test-full.zexp
deleted file mode 100644
index dac79cd..0000000
Binary files a/plone/app/upgrade/v31/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v31/final_three1x.py b/plone/app/upgrade/v31/final_three1x.py
deleted file mode 100644
index f0ab05d..0000000
--- a/plone/app/upgrade/v31/final_three1x.py
+++ /dev/null
@@ -1,14 +0,0 @@
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three11_three12(portal):
-    """3.1.1 -> 3.1.2"""
-    pass
-
-
-def three14_three15(portal):
-    """3.1.4 -> 3.1.5"""
-
-    out = []
-
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v31:3.1.3-3.1.4')
diff --git a/plone/app/upgrade/v31/profiles.zcml b/plone/app/upgrade/v31/profiles.zcml
deleted file mode 100644
index 3752385..0000000
--- a/plone/app/upgrade/v31/profiles.zcml
+++ /dev/null
@@ -1,24 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <genericsetup:registerProfile
-        name="3.0.6-3.1beta1"
-        title="Upgrade profile for Plone 3.0.6 to Plone 3.1-beta1"
-        description="This profile contains configuration changes that are applied during the Plone 3.0.6 to 3.1-beta1 upgrade."
-        directory="profiles/three0_beta1"
-        for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-        provides="Products.GenericSetup.interfaces.EXTENSION"
-        />
-
-  <genericsetup:registerProfile
-      name="3.1.3-3.1.4"
-      title="Upgrade profile for Plone 3.1.3 to Plone 3.1.4"
-      description="This profile contains configuration changes that are applied during the Plone 3.1.3 to 3.1.4 upgrade."
-      directory="profiles/three13_three14"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-</configure>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/actions.xml b/plone/app/upgrade/v31/profiles/three0_beta1/actions.xml
deleted file mode 100644
index c531feb..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/actions.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
-
- <object name="object">
-  <object name="local_roles" meta_type="CMF Action" i18n:domain="plone">
-   <property name="permissions">
-    <element value="Sharing page: Delegate roles"/>
-   </property>
-  </object>
- </object>
-
-</object>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml b/plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml
deleted file mode 100644
index 91aa754..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/componentregistry.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0"?>
-<componentregistry>
- <adapters/>
- <utilities>
-  <utility
-      interface="plone.keyring.interfaces.IKeyManager"
-      factory="plone.keyring.keymanager.KeyManager"
-      />
- </utilities>
-</componentregistry>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml b/plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml
deleted file mode 100644
index 6584ae4..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/jsregistry.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_javascripts" meta_type="JavaScripts Registry">
-  <javascript cacheable="True" compression="none" cookable="True"
-    enabled="True" expression="" id="jquery.js" inline="False"
-    insert-top="" />
- 	<javascript cacheable="True" compression="safe" cookable="True"
-    enabled="True" expression="" id="jquery-integration.js" inline="False"
-    insert-after="jquery.js" />
-  <javascript cacheable="True" compression="safe" cookable="True"
-    enabled="False" expression="" id="fullscreenmode.js" inline="False" />
-  <javascript id="collapsiblesections.js" compression="full" />
-  <javascript id="accessibility.js" update="" compression="full" />
-  <!-- calendarpopup.js has been deprecated and disabled on new sites,
-       upgrade leaves it enabled -->
-</object>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml b/plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml
deleted file mode 100644
index d6cdd06..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/metadata.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<metadata>
-  <version>3.1alpha1</version>
-</metadata>
diff --git a/plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml b/plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml
deleted file mode 100644
index 5485127..0000000
--- a/plone/app/upgrade/v31/profiles/three0_beta1/portlets.xml
+++ /dev/null
@@ -1,77 +0,0 @@
-<?xml version="1.0"?>
-<portlets>
- <!-- Modify existing portlet type registrations -->
-
- <portlet
-   addview="portlets.Calendar"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Classic"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.News"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Events"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Recent"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Review"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.rss"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
- <portlet
-   addview="portlets.Search"
-   extend=""
-   >
-   <for interface="zope.interface.Interface" remove="" />
-   <for interface="plone.app.portlets.interfaces.IColumn" />
-   <for interface="plone.app.portlets.interfaces.IDashboard" />
- </portlet>
-
-</portlets>
diff --git a/plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml b/plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml
deleted file mode 100644
index 0ff2314..0000000
--- a/plone/app/upgrade/v31/profiles/three13_three14/propertiestool.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="enable_inline_editing" type="boolean">True</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v31/tests.py b/plone/app/upgrade/v31/tests.py
deleted file mode 100644
index 7fa994a..0000000
--- a/plone/app/upgrade/v31/tests.py
+++ /dev/null
@@ -1,122 +0,0 @@
-from borg.localrole.utils import replace_local_role_manager
-from zope.interface import noLongerProvides
-
-from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import version_match
-
-from plone.app.upgrade.v31.betas import reinstallCMFPlacefulWorkflow
-
-
-class TestMigrations_v3_1(MigrationTest):
-
-    def afterSetUp(self):
-        self.qi = self.portal.portal_quickinstaller
-        self.wf = self.portal.portal_workflow
-        self.ps = self.portal.portal_setup
-
-    def testReinstallCMFPlacefulWorkflow(self):
-        try:
-            from Products.CMFPlacefulWorkflow.interfaces import IPlacefulMarker
-        except ImportError:
-            return
-        # first the product needs to be installed
-        self.qi.installProduct('CMFPlacefulWorkflow')
-        # Delete existing logs to prevent race condition
-        self.ps.manage_delObjects(self.ps.objectIds())
-        # We remove the new marker, to ensure it's added on reinstall
-        if IPlacefulMarker.providedBy(self.wf):
-            noLongerProvides(self.wf, IPlacefulMarker)
-        reinstallCMFPlacefulWorkflow(self.portal, [])
-        self.assertTrue(IPlacefulMarker.providedBy(self.wf))
-
-    def testReinstallCMFPlacefulWorkflowDoesNotInstall(self):
-        reinstallCMFPlacefulWorkflow(self.portal, [])
-        self.assertFalse(self.qi.isProductInstalled('CMFPlacefulWorkflow'))
-
-    def testReinstallCMFPlacefulWorkflowNoTool(self):
-        self.portal._delObject('portal_quickinstaller')
-        reinstallCMFPlacefulWorkflow(self.portal, [])
-
-    def testReplaceLocalRoleManager(self):
-        # first we replace the local role manager with the one from PlonePAS
-        uf = self.portal.acl_users
-        # deactivate and remove the borg plugin
-        uf.plugins.removePluginById('borg_localroles')
-        uf.manage_delObjects(['borg_localroles'])
-        # activate the standard plugin
-        uf.plugins.activatePlugin(ILocalRolesPlugin, 'local_roles')
-        # Bring things back to normal
-        replace_local_role_manager(self.portal)
-        plugins = uf.plugins.listPlugins(ILocalRolesPlugin)
-        self.assertEqual(len(plugins), 1)
-        self.assertEqual(plugins[0][0], 'borg_localroles')
-
-    def testReplaceLocalRoleManagerTwice(self):
-        # first we replace the local role manager with the one from PlonePAS
-        uf = self.portal.acl_users
-        # deactivate and remove the borg plugin
-        uf.plugins.removePluginById('borg_localroles')
-        uf.manage_delObjects(['borg_localroles'])
-        # activate the standard plugin
-        uf.plugins.activatePlugin(ILocalRolesPlugin, 'local_roles')
-        # run the upgrade twice
-        replace_local_role_manager(self.portal)
-        replace_local_role_manager(self.portal)
-        plugins = uf.plugins.listPlugins(ILocalRolesPlugin)
-        self.assertEqual(len(plugins), 1)
-        self.assertEqual(plugins[0][0], 'borg_localroles')
-
-    def testReplaceLocalRoleManagerNoPlugin(self):
-        # first we replace the local role manager with the one from PlonePAS
-        uf = self.portal.acl_users
-        # deactivate and remove the borg plugin
-        uf.plugins.removePluginById('borg_localroles')
-        uf.manage_delObjects(['borg_localroles'])
-        # delete the standard plugin
-        uf.manage_delObjects(['local_roles'])
-        # Run the upgrade, which shouldn't fail even if the expected
-        # plugin is missing
-        replace_local_role_manager(self.portal)
-        plugins = uf.plugins.listPlugins(ILocalRolesPlugin)
-        self.assertEqual(len(plugins), 1)
-        self.assertEqual(plugins[0][0], 'borg_localroles')
-
-    def testReplaceLocalRoleManagerNoPAS(self):
-        uf = self.portal.acl_users
-        # delete the plugin registry
-        uf._delObject('plugins')
-        replace_local_role_manager(self.portal)
-
-    def testReplaceLocalRoleManagerNoUF(self):
-        # Delete the user folder
-        replace_local_role_manager(self.portal)
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.1'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v3_1))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v32/__init__.py b/plone/app/upgrade/v32/__init__.py
deleted file mode 100644
index 6bc2385..0000000
--- a/plone/app/upgrade/v32/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-import betas
diff --git a/plone/app/upgrade/v32/betas.py b/plone/app/upgrade/v32/betas.py
deleted file mode 100644
index 3d3bd53..0000000
--- a/plone/app/upgrade/v32/betas.py
+++ /dev/null
@@ -1,13 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three1_beta1(portal):
-    """3.1.7 -> 3.2beta1
-    """
-    actions = getToolByName(portal, 'portal_actions')
-    if 'iterate_checkin' in actions.object_buttons.objectIds():
-        loadMigrationProfile(
-            portal,
-            'profile-plone.app.upgrade.v32:3.2a1-3.2a2-iterate')
diff --git a/plone/app/upgrade/v32/configure.zcml b/plone/app/upgrade/v32/configure.zcml
deleted file mode 100644
index 40b6631..0000000
--- a/plone/app/upgrade/v32/configure.zcml
+++ /dev/null
@@ -1,56 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <genericsetup:upgradeStep
-        source="3.1.7"
-        destination="3.2a1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2a1"
-        destination="3.2rc1"
-        title="Update permissions on iterate actions."
-        profile="Products.CMFPlone:plone"
-        handler=".betas.three1_beta1"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2rc1"
-        destination="3.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2"
-        destination="3.2.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2.1"
-        destination="3.2.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.2.2"
-        destination="3.2.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v32/data/test-base.zexp b/plone/app/upgrade/v32/data/test-base.zexp
deleted file mode 100644
index 1c5c620..0000000
Binary files a/plone/app/upgrade/v32/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v32/data/test-full.zexp b/plone/app/upgrade/v32/data/test-full.zexp
deleted file mode 100644
index 7b41a2f..0000000
Binary files a/plone/app/upgrade/v32/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v32/profiles.zcml b/plone/app/upgrade/v32/profiles.zcml
deleted file mode 100644
index 552ce28..0000000
--- a/plone/app/upgrade/v32/profiles.zcml
+++ /dev/null
@@ -1,24 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-  <genericsetup:registerProfile
-      name="3.2a1-3.2a2-iterate"
-      title="Upgrade profile for Plone 3.2a1 to Plone 3.2a2 with Iterate"
-      description="This profile contains configuration changes that are applied during the Plone 3.2a1 to 3.2a2 upgrade when Iterate is installed."
-      directory="profiles/three1_beta1_iterate"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-  <genericsetup:registerProfile
-      name="3.2-3.2.1"
-      title="Upgrade profile for Plone 3.2 to Plone 3.2.1"
-      description="This profile contains configuration changes that are applied during the Plone 3.2 to 3.2.1 upgrade."
-      directory="v3_2/profiles/three2_three21"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-</configure>
diff --git a/plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml b/plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml
deleted file mode 100644
index b5a214a..0000000
--- a/plone/app/upgrade/v32/profiles/three1_beta1_iterate/actions.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="object_buttons">
-  <object name="iterate_checkin">
-   <property name="permissions">
-    <element value="iterate : Check in content"/>
-   </property>
-  </object>
-  <object name="iterate_checkout">
-   <property name="permissions">
-    <element value="iterate : Check out content"/>
-   </property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml b/plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml
deleted file mode 100644
index e038b5e..0000000
--- a/plone/app/upgrade/v32/profiles/three2_three21/propertiestool.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="localTimeOnlyFormat" type="string">%I:%M %p</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v32/tests.py b/plone/app/upgrade/v32/tests.py
deleted file mode 100644
index 02a2a06..0000000
--- a/plone/app/upgrade/v32/tests.py
+++ /dev/null
@@ -1,55 +0,0 @@
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.utils import version_match
-from plone.app.upgrade.v32.betas import three1_beta1
-
-
-class TestMigrations_v3_2(MigrationTest):
-
-    def afterSetUp(self):
-        self.qi = self.portal.portal_quickinstaller
-        self.actions = self.portal.portal_actions
-        self.migration = self.portal.portal_migration
-
-    def testIterateActionsMigratedIfIterateInstalled(self):
-        self.qi.installProduct('plone.app.iterate')
-        self.actions.object_buttons.iterate_checkin.permissions = (
-            'Modify portal content',)
-        three1_beta1(self.portal)
-        self.assertEqual(
-            self.actions.object_buttons.iterate_checkin.permissions,
-            ('iterate : Check in content',))
-
-    def testIterateInstalledButActionMissing(self):
-        self.qi.installProduct('plone.app.iterate')
-        self.actions.object_buttons.manage_delObjects(['iterate_checkin'])
-        three1_beta1(self.portal)
-        self.assertFalse('iterate_checkin' in
-                         self.actions.object_buttons.objectIds())
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.2'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v3_2))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v33/__init__.py b/plone/app/upgrade/v33/__init__.py
deleted file mode 100644
index baed573..0000000
--- a/plone/app/upgrade/v33/__init__.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-from plone.app.upgrade.utils import loadMigrationProfile
-
-
-def three2_three3(portal):
-    """3.2.1 -> 3.3a1
-    """
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.2.1-3.3a1')
-    maybeUpdateLinkView(portal)
-
-
-def three3_rc3_three3_rc4(portal):
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.3rc3-3.3')
-    cookCSSRegistries(portal)
-
-
-def maybeUpdateLinkView(portal):
-    ttool = getToolByName(portal, 'portal_types')
-    link_fti = ttool.Link
-    if link_fti.default_view == 'link_view':
-        link_fti.view_methods = ('link_redirect_view',)
-        link_fti.default_view = 'link_redirect_view'
-        link_fti.immediate_view = 'link_redirect_view'
-
-
-def cookCSSRegistries(portal):
-    csstool = getToolByName(portal, 'portal_css')
-    for resource in csstool.resources:
-        resource.getCookedExpression()
-    csstool.cookResources()
diff --git a/plone/app/upgrade/v33/configure.zcml b/plone/app/upgrade/v33/configure.zcml
deleted file mode 100644
index da4fe85..0000000
--- a/plone/app/upgrade/v33/configure.zcml
+++ /dev/null
@@ -1,116 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-    <include file="profiles.zcml" />
-
-    <genericsetup:upgradeStep
-        source="3.2.3"
-        destination="3.3b1"
-        title="Add link and lock settings for Plone 3.3"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.v33.three2_three3"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3b1"
-        destination="3.3rc1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc1"
-        destination="3.3rc2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc2"
-        destination="3.3rc3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc3"
-        destination="3.3rc4"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc4"
-        destination="3.3rc5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3rc5"
-        destination="3.3"
-        title="Modify actions to work with the new INavigationRoot"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.v33.three3_rc3_three3_rc4"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3"
-        destination="3.3.1"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.1"
-        destination="3.3.2"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.2"
-        destination="3.3.3"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.3"
-        destination="3.3.4"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <!-- the following are placeholders for anticipated releases in the 3.3.x series.
-         if these are released with real profile changes, we'll need to merge the
-         upgrade steps here -->
-
-    <genericsetup:upgradeStep
-        source="3.3.4"
-        destination="3.3.5"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-    <genericsetup:upgradeStep
-        source="3.3.5"
-        destination="3.3.6"
-        title="Empty upgrade step"
-        profile="Products.CMFPlone:plone"
-        handler="plone.app.upgrade.utils.null_upgrade_step"
-        />
-
-</configure>
diff --git a/plone/app/upgrade/v33/data/test-base.zexp b/plone/app/upgrade/v33/data/test-base.zexp
deleted file mode 100644
index e3872c2..0000000
Binary files a/plone/app/upgrade/v33/data/test-base.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v33/data/test-full.zexp b/plone/app/upgrade/v33/data/test-full.zexp
deleted file mode 100644
index 6ac5779..0000000
Binary files a/plone/app/upgrade/v33/data/test-full.zexp and /dev/null differ
diff --git a/plone/app/upgrade/v33/profiles.zcml b/plone/app/upgrade/v33/profiles.zcml
deleted file mode 100644
index ba73265..0000000
--- a/plone/app/upgrade/v33/profiles.zcml
+++ /dev/null
@@ -1,24 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
-    i18n_domain="plone">
-
-  <genericsetup:registerProfile
-      name="3.2.1-3.3a1"
-      title="Upgrade profile for Plone 3.2.1 to Plone 3.3a1"
-      description="This profile adds default link and lock settings for Plone 3.3"
-      directory="profiles/three2_three3"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-  <genericsetup:registerProfile
-      name="3.3rc3-3.3"
-      title="Upgrade profile for Plone 3.3rc3 to Plone 3.3"
-      description="This profile contains configuration changes that are applied during the Plone 3.3rc3 to 3.3 upgrade."
-      directory="profiles/three3_rc3_three3_rc4"
-      for="Products.CMFPlone.interfaces.IMigratingPloneSiteRoot"
-      provides="Products.GenericSetup.interfaces.EXTENSION"
-      />
-
-</configure>
diff --git a/plone/app/upgrade/v33/profiles/three2_three3/actions.xml b/plone/app/upgrade/v33/profiles/three2_three3/actions.xml
deleted file mode 100644
index fcb667d..0000000
--- a/plone/app/upgrade/v33/profiles/three2_three3/actions.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="site_actions" meta_type="CMF Action Category">
-  <object name="sitemap" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/sitemap</property>
-  </object>
-  <object name="accessibility" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/accessibility-info</property>
-  </object>
-  <object name="contact" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/contact-info</property>
-  </object>
- </object>
- <object name="user" meta_type="CMF Action Category">
-  <object name="preferences" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/plone_memberprefs_panel</property>
-  </object>
-  <object name="login" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/login_form</property>
-  </object>
-  <object name="join" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/join_form</property>
-  </object>
-  <object name="undo" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/undo_form</property>
-  </object>
-  <object name="logout" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/logout</property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml b/plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml
deleted file mode 100644
index 36f2ba3..0000000
--- a/plone/app/upgrade/v33/profiles/three2_three3/propertiestool.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_properties" meta_type="Plone Properties Tool">
- <object name="site_properties" meta_type="Plone Property Sheet">
-  <property name="redirect_links" type="boolean">True</property>
-  <property name="lock_on_ttw_edit" type="boolean">True</property>
- </object>
-</object>
diff --git a/plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml b/plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml
deleted file mode 100644
index fcb667d..0000000
--- a/plone/app/upgrade/v33/profiles/three3_rc3_three3_rc4/actions.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0"?>
-<object name="portal_actions" meta_type="Plone Actions Tool"
-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">
- <object name="site_actions" meta_type="CMF Action Category">
-  <object name="sitemap" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/sitemap</property>
-  </object>
-  <object name="accessibility" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/accessibility-info</property>
-  </object>
-  <object name="contact" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/contact-info</property>
-  </object>
- </object>
- <object name="user" meta_type="CMF Action Category">
-  <object name="preferences" meta_type="CMF Action" i18n:domain="plone">
-   <property
-      name="url_expr">string:${globals_view/navigationRootUrl}/plone_memberprefs_panel</property>
-  </object>
-  <object name="login" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/login_form</property>
-  </object>
-  <object name="join" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/join_form</property>
-  </object>
-  <object name="undo" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/undo_form</property>
-  </object>
-  <object name="logout" meta_type="CMF Action" i18n:domain="plone">
-   <property name="url_expr">string:${globals_view/navigationRootUrl}/logout</property>
-  </object>
- </object>
-</object>
diff --git a/plone/app/upgrade/v33/tests.py b/plone/app/upgrade/v33/tests.py
deleted file mode 100644
index bd9de99..0000000
--- a/plone/app/upgrade/v33/tests.py
+++ /dev/null
@@ -1,98 +0,0 @@
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.upgrade.tests.base import FunctionalUpgradeTestCase
-from plone.app.upgrade.tests.base import MigrationTest
-from plone.app.upgrade.v33 import three2_three3
-from plone.app.upgrade.utils import version_match
-
-
-class TestMigrations_v3_3(MigrationTest):
-
-    def afterSetUp(self):
-        self.types = self.portal.portal_types
-        self.properties = getToolByName(self.portal, 'portal_properties')
-
-    def _upgrade(self):
-        three2_three3(self.portal)
-
-    def testRedirectLinksProperty(self):
-        del self.properties.site_properties.redirect_links
-        self._upgrade()
-        self.assertEqual(True,
-                         self.properties.site_properties.getProperty('redirect_links'))
-
-    def testLinkDefaultView(self):
-        self.types.Link.default_view = 'link_view'
-        self.types.Link.immediate_view = 'link_view'
-        self.types.Link.view_methods = ('link_view',)
-        self._upgrade()
-        self.assertEqual(self.types.Link.default_view, 'link_redirect_view')
-        self.assertEqual(self.types.Link.immediate_view, 'link_redirect_view')
-        self.assertEqual(self.types.Link.view_methods, ('link_redirect_view',))
-
-    def testCustomizedLinkDefaultView(self):
-        # but only change if old default was 'link_view'
-        self.types.Link.default_view = 'foobar'
-        self.types.Link.immediate_view = 'foobar'
-        self.types.Link.view_methods = ('foobar',)
-        self._upgrade()
-        self.assertEqual(self.types.Link.default_view, 'foobar')
-        self.assertEqual(self.types.Link.immediate_view, 'foobar')
-        self.assertEqual(self.types.Link.view_methods, ('foobar',))
-
-
-class TestFunctionalMigrations(FunctionalUpgradeTestCase):
-
-    def testBaseUpgrade(self):
-        self.importFile(__file__, 'test-base.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFullUpgrade(self):
-        self.importFile(__file__, 'test-full.zexp')
-        oldsite, result = self.migrate()
-
-        mig = oldsite.portal_migration
-        self.assertFalse(mig.needUpgrading())
-
-    def testFolderUpgrade(self):
-        from plone.folder.interfaces import IOrderableFolder
-        self.importFile(__file__, 'test-full.zexp')
-        # `portal_type` and `Type` can be checked before migration...
-        oldsite = getattr(self.app, self.site_id)
-        ids = 'news', 'events', 'Members'
-        for id in ids:
-            obj = oldsite[id]
-            self.assertEqual(obj.portal_type, 'Large Plone Folder')
-            self.assertEqual(obj.Type(), 'Large Folder')
-            brain, = oldsite.portal_catalog(getId=id)   # asserts only one
-            self.assertEqual(brain.portal_type, 'Large Plone Folder')
-            self.assertEqual(brain.Type, 'Large Folder')
-        # now let's migrate...
-        oldsite, result = self.migrate()
-        self.assertFalse(oldsite.portal_migration.needUpgrading())
-        # after migration `/news`, `/events` and `/Members` are based on
-        # `plone.(app.)folder`, but still have no ordering set...
-        for id in ids:
-            obj = oldsite[id]
-            self.assertTrue(IOrderableFolder.providedBy(obj),
-                            '%s not orderable?' % id)
-            self.assertEqual(obj._ordering, 'unordered',
-                             '%s has no `_ordering`?' % id)
-            self.assertEqual(obj.portal_type, 'Folder')
-            self.assertEqual(obj.Type(), 'Folder')
-            brain, = oldsite.portal_catalog(getId=id)   # asserts only one
-            self.assertEqual(brain.portal_type, 'Folder')
-            self.assertEqual(brain.Type, 'Folder')
-
-
-def test_suite():
-    from unittest import TestSuite, makeSuite
-    suite = TestSuite()
-    if not version_match('3.3'):
-        return suite
-    suite.addTest(makeSuite(TestMigrations_v3_3))
-    suite.addTest(makeSuite(TestFunctionalMigrations))
-    return suite
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index 05d639a..5a6a9e4 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -591,3 +591,11 @@ def alpha4_alpha5(context):
     """
     loadMigrationProfile(
         context, 'profile-plone.app.upgrade.v40:4alpha4-4alpha5')
+
+
+def installNewModifiers(context):
+    from Products.CMFEditions.StandardModifiers import install
+    modifiers = getToolByName(context, 'portal_modifier', None)
+    if modifiers is not None:
+        install(modifiers)
+        logger.info('Added new CMFEditions modifiers.')
diff --git a/plone/app/upgrade/v40/configure.zcml b/plone/app/upgrade/v40/configure.zcml
index a51e4d6..714d9da 100644
--- a/plone/app/upgrade/v40/configure.zcml
+++ b/plone/app/upgrade/v40/configure.zcml
@@ -120,7 +120,7 @@
 
         <genericsetup:upgradeStep
             title="Add new CMFEditions default modifiers."
-            handler="plone.app.upgrade.v30.final_three0x.installNewModifiers"
+            handler=".alphas.installNewModifiers"
             />
 
         <genericsetup:upgradeStep
diff --git a/plone/app/upgrade/v43/final.py b/plone/app/upgrade/v43/final.py
index 2cda0ba..08750b4 100644
--- a/plone/app/upgrade/v43/final.py
+++ b/plone/app/upgrade/v43/final.py
@@ -148,11 +148,6 @@ def markProductsInstalledForUninstallableProfiles(context):
     'plone.app.intid',
     'plone.app.referenceablebehavior',
     'plone.app.relationfield',
-    'plone.app.upgrade.v25',
-    'plone.app.upgrade.v30',
-    'plone.app.upgrade.v31',
-    'plone.app.upgrade.v32',
-    'plone.app.upgrade.v33',
     'plone.app.upgrade.v40',
     'plone.app.upgrade.v41',
     'plone.app.upgrade.v42',
diff --git a/plone/app/upgrade/v50/alphas.py b/plone/app/upgrade/v50/alphas.py
index 53a6567..f7af84d 100644
--- a/plone/app/upgrade/v50/alphas.py
+++ b/plone/app/upgrade/v50/alphas.py
@@ -9,6 +9,7 @@
 from Products.CMFPlone.interfaces import ISearchSchema
 from Products.CMFPlone.interfaces import ISiteSchema
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import get_property
 from plone.app.upgrade.v40.alphas import cleanUpToolRegistry
 from plone.app.vocabularies.types import BAD_TYPES
 from plone.keyring.interfaces import IKeyManager
@@ -193,7 +194,11 @@ def upgrade_editing_controlpanel_settings(context):
         # ignore the setting.
         if site_properties.default_editor != 'Kupu':
             settings.default_editor = site_properties.default_editor
-        settings.lock_on_ttw_edit = site_properties.lock_on_ttw_edit
+        settings.lock_on_ttw_edit = get_property(
+            site_properties,
+            'lock_on_ttw_edit',
+            None,
+        )
 
 
 def upgrade_maintenance_controlpanel_settings(context):
@@ -218,7 +223,11 @@ def upgrade_maintenance_controlpanel_settings(context):
     except KeyError:
         settings = False
     if settings:
-        settings.days = site_properties.number_of_days_to_keep
+        settings.days = get_property(
+            site_properties,
+            'number_of_days_to_keep',
+            None,
+        )
 
 
 def upgrade_navigation_controlpanel_settings(context):
@@ -252,7 +261,11 @@ def upgrade_navigation_controlpanel_settings(context):
         settings.show_all_parents = navigation_properties.getProperty(
             'showAllParents')
         allTypes = types_tool.listContentTypes()
-        blacklist = navigation_properties.metaTypesNotToList
+        blacklist = get_property(
+            navigation_properties,
+            'metaTypesNotToList',
+            default_value=[],
+        )
         settings.displayed_types = tuple([
             t for t in allTypes if t not in blacklist
             and t not in BAD_TYPES
@@ -289,9 +302,14 @@ def upgrade_search_controlpanel_settings(context):
 
     if site_properties.hasProperty('enable_livesearch'):
         settings.enable_livesearch = site_properties.enable_livesearch
+    types_not_searched = get_property(
+        site_properties,
+        'types_not_searched',
+        default_value=[],
+    )
     settings.types_not_searched = tuple([
         t for t in types_tool.listContentTypes()
-        if t in site_properties.types_not_searched and
+        if t in types_not_searched and
         t not in BAD_TYPES
     ])
 
@@ -319,7 +337,8 @@ def upgrade_site_controlpanel_settings(context):
     except KeyError:
         settings = False
     settings.site_title = unicode(portal.title)
-    settings.webstats_js = unicode(site_properties.webstats_js)
-    settings.enable_sitemap = site_properties.enable_sitemap
+    webstat_js = get_property(site_properties, 'webstats_js', '')
+    settings.webstats_js = unicode(webstat_js)
+    settings.enable_sitemap = get_property(site_properties, 'enable_sitemap')
     if site_properties.hasProperty('exposeDCMetaTags'):
         settings.exposeDCMetaTags = site_properties.exposeDCMetaTags
diff --git a/plone/app/upgrade/v50/betas.py b/plone/app/upgrade/v50/betas.py
index bfb5bc8..c49cc8e 100644
--- a/plone/app/upgrade/v50/betas.py
+++ b/plone/app/upgrade/v50/betas.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.linkintegrity.upgrades import migrate_linkintegrity_relations
 from plone.app.upgrade.utils import loadMigrationProfile
+from plone.app.upgrade.utils import get_property
 from plone.registry.interfaces import IRegistry
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
@@ -135,7 +136,11 @@ def upgrade_markup_controlpanel_settings(context):
     except KeyError:
         settings = False
     if settings:
-        settings.default_type = site_properties.default_contenttype
+        settings.default_type = get_property(
+            site_properties,
+            'default_contenttype',
+            None,
+        )
 
         forbidden_types = site_properties.getProperty('forbidden_contenttypes')
         forbidden_types = list(forbidden_types) if forbidden_types else []
diff --git a/setup.py b/setup.py
index a504f59..594471f 100644
--- a/setup.py
+++ b/setup.py
@@ -32,54 +32,33 @@
     zip_safe=False,
     extras_require=dict(
         test=[
+            'zope.site',
             'mock',
-            'Products.CMFPlacefulWorkflow',
-            'Products.CMFQuickInstallerTool',
-            'plone.contentrules',
-            'plone.app.i18n',
-            'plone.app.iterate',
-            'plone.app.openid',
-            'plone.app.redirector',
-            'plone.app.viewletmanager',
             'plone.app.testing',
             'plone.app.theming',
         ]
     ),
     install_requires=[
         'setuptools',
-        'borg.localrole',
-        'five.localsitemanager',
         'plone.portlets',
-        'plone.session',
         'plone.app.folder',
-        'plone.app.portlets',
         'transaction',
         'zope.component',
         'zope.interface',
-        'zope.location',
         'zope.ramcache',
-        'zope.site',
         'Acquisition',
         'Products.CMFPlone',
-        'Products.Archetypes',
-        'Products.contentmigration',
         'Products.CMFCore',
-        'Products.CMFDiffTool',
         'Products.CMFEditions',
-        'Products.CMFFormController',
         'Products.CMFQuickInstallerTool',
-        'Products.CMFUid',
-        'Products.DCWorkflow',
         'Products.GenericSetup>=1.8.1',
-        'Products.MimetypesRegistry',
-        # 'Products.PloneLanguageTool',
         'Products.PlonePAS',
         'Products.PluggableAuthService',
-        'Products.PortalTransforms',
-        'Products.ResourceRegistries',
-        'Products.SecureMailHost',  # For migration only, when can we remove this?
         'Products.ZCatalog >= 2.13.4',
         'Zope2',
+        'plone.contentrules',
+        'plone.app.iterate',
+        'plone.app.viewletmanager',
     ],
     entry_points="""
     [z3c.autoinclude.plugin]


