Repository: Products.ResourceRegistries


Branch: refs/heads/2.2.x
Date: 2017-03-08T15:18:33+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ResourceRegistries/commit/12db0bc5d803db886a84ad4ebc18d76eefb26e8b

Removed assertion for response status 200 for inline resources.

If after inlining a ``++resource++`` item the response status was not in the
200 range, the assertion would fail, leading to the html being returned
with a wrong mimetype showing raw html and an error while rendering
``plone.resourceregistries``.

Changed it into a condition instead: only restore original headers when
the status is in 200.

Files changed:
M CHANGES.rst
M Products/ResourceRegistries/tools/BaseRegistry.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d40f4b8..0dedbe9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,14 @@ Changelog
 2.2.13 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Removed assertion for response status 200 for inline resources.
+  If after inlining a ``++resource++`` item the response status was not in the
+  200 range, the assertion would fail, leading to the html being returned
+  with a wrong mimetype showing raw html and an error while rendering
+  ``plone.resourceregistries``.
+  Changed it into a condition instead: only restore original headers when
+  the status is in 200.
+  [maurits]
 
 
 2.2.12 (2016-06-21)
diff --git a/Products/ResourceRegistries/tools/BaseRegistry.py b/Products/ResourceRegistries/tools/BaseRegistry.py
index bf694c6..c678810 100644
--- a/Products/ResourceRegistries/tools/BaseRegistry.py
+++ b/Products/ResourceRegistries/tools/BaseRegistry.py
@@ -795,7 +795,8 @@ def _restoreCachingHeaders(self, original_response_headers, if_modified):
         # Now restore the headers and for safety, check that we
         # have a 20x response. If not, we have a problem and
         # some browser would hang indefinitely at this point.
-        assert int(self.REQUEST.RESPONSE.getStatus()) / 100 == 2
+        if int(self.REQUEST.RESPONSE.getStatus()) / 100 != 2:
+            return
         self.REQUEST.environ['HTTP_IF_MODIFIED_SINCE'] = if_modified
         self.REQUEST.RESPONSE.headers = original_response_headers
 


Repository: Products.ResourceRegistries


Branch: refs/heads/2.2.x
Date: 2017-03-08T16:41:20+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.ResourceRegistries/commit/ba9efe83e14f06596393c905eb1da5a95ddd81db

Merge pull request #24 from plone/remove-assertion-22x

Removed assertion for response status 200 for inline resources.

Files changed:
M CHANGES.rst
M Products/ResourceRegistries/tools/BaseRegistry.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d40f4b8..0dedbe9 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,7 +4,14 @@ Changelog
 2.2.13 (unreleased)
 -------------------
 
-- Nothing changed yet.
+- Removed assertion for response status 200 for inline resources.
+  If after inlining a ``++resource++`` item the response status was not in the
+  200 range, the assertion would fail, leading to the html being returned
+  with a wrong mimetype showing raw html and an error while rendering
+  ``plone.resourceregistries``.
+  Changed it into a condition instead: only restore original headers when
+  the status is in 200.
+  [maurits]
 
 
 2.2.12 (2016-06-21)
diff --git a/Products/ResourceRegistries/tools/BaseRegistry.py b/Products/ResourceRegistries/tools/BaseRegistry.py
index bf694c6..c678810 100644
--- a/Products/ResourceRegistries/tools/BaseRegistry.py
+++ b/Products/ResourceRegistries/tools/BaseRegistry.py
@@ -795,7 +795,8 @@ def _restoreCachingHeaders(self, original_response_headers, if_modified):
         # Now restore the headers and for safety, check that we
         # have a 20x response. If not, we have a problem and
         # some browser would hang indefinitely at this point.
-        assert int(self.REQUEST.RESPONSE.getStatus()) / 100 == 2
+        if int(self.REQUEST.RESPONSE.getStatus()) / 100 != 2:
+            return
         self.REQUEST.environ['HTTP_IF_MODIFIED_SINCE'] = if_modified
         self.REQUEST.RESPONSE.headers = original_response_headers
 


