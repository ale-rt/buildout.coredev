Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-08-26T17:32:04-03:00
Author: Rodrigo Ferreira de Souza (rodfersou) <rodfersou@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/8763479244ddf1ab7c2120caa35e83573f251500

Base tag differs from actual URL

Files changed:
M Products/CMFPlone/tests/testBrowserDefault.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py
index 0206212..00d90eb 100644
--- a/Products/CMFPlone/tests/testBrowserDefault.py
+++ b/Products/CMFPlone/tests/testBrowserDefault.py
@@ -13,6 +13,7 @@
 from Products.CMFPlone.utils import _createObjectByType
 from Products.CMFPlone.PloneFolder import ReplaceableWrapper
 
+RE_REMOVE_BASE = re.compile('<base.*/base>')
 RE_REMOVE_DOCCONT = re.compile('\s*href="http://.*?#content"')
 RE_REMOVE_SKIPNAV = re.compile('\s*href="http://.*?#portal-globalnav"')
 RE_REMOVE_TABS = re.compile('<ul id="portal-globalnav".*?</ul>', re.S)
@@ -68,10 +69,12 @@ def compareLayoutVsView(self, obj, path="", viewaction=None):
         body = response.getBody().decode('utf-8')
 
         # request/ACTUAL_URL is fubar in tests, remove lines that depend on it
+        resolved = RE_REMOVE_BASE.sub('', resolved)
         resolved = RE_REMOVE_DOCCONT.sub('', resolved)
         resolved = RE_REMOVE_SKIPNAV.sub('', resolved)
         resolved = RE_REMOVE_TABS.sub('', resolved)
 
+        body = RE_REMOVE_BASE.sub('', body)
         body = RE_REMOVE_DOCCONT.sub('', body)
         body = RE_REMOVE_SKIPNAV.sub('', body)
         body = RE_REMOVE_TABS.sub('', body)
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index c85ef52..333f5ff 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -19,9 +19,10 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Fix base tag differs from actual URL (fixes `#86`_).
+  [rodfersou]
 
+  
 4.3.11 (2016-08-15)
 -------------------
 
@@ -697,3 +698,4 @@ Fixes:
   [kleist]
 
 .. _`#1041`: https://github.com/plone/Products.CMFPlone/issues/1041
+.. _`#86`: https://github.com/plone/plone.app.layout/issues/86


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-12-15T17:45:08+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/decdadca75ea8a89721c314fd76cb0b44888a1b2

Merge branch '4.3.x' into issue_86

Files changed:
A Products/CMFPlone/earlypatches/__init__.py
A Products/CMFPlone/earlypatches/security.py
A Products/CMFPlone/patches/z3c_form.py
A Products/CMFPlone/tests/testBrowserAdmin.py
A Products/CMFPlone/tests/test_z3c_form_widgets.py
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/WorkflowTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/patches/__init__.py
M Products/CMFPlone/patches/securemailhost.py
M Products/CMFPlone/patches/security.py
M Products/CMFPlone/profiles/default/metadata.xml
M Products/CMFPlone/profiles/default/propertiestool.xml
M Products/CMFPlone/skins/plone_ecmascript/livesearch.js
M Products/CMFPlone/skins/plone_scripts/livesearch_reply.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testSSOLogin.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/tests/testURLTool.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index 34259fd..e6a43f7 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -30,8 +30,12 @@ def isURLInPortal(self, url, context=None):
 
         # sanitize url
         url = re.sub('^[\x00-\x20]+', '', url).strip()
-        if ('<script' in url or '%3Cscript' in url or 'javascript:' in url or
-                'javascript%3A' in url):
+        cmp_url = url.lower()
+        if ('\\\\' in cmp_url or
+                '<script' in cmp_url or
+                '%3cscript' in cmp_url or
+                'javascript:' in cmp_url or
+                'javascript%3a' in cmp_url):
             return False
 
         p_url = self()
diff --git a/Products/CMFPlone/WorkflowTool.py b/Products/CMFPlone/WorkflowTool.py
index a691ff2..e5f5e82 100644
--- a/Products/CMFPlone/WorkflowTool.py
+++ b/Products/CMFPlone/WorkflowTool.py
@@ -228,6 +228,10 @@ def getWorklistsResults(self):
                     # content in *all* languages
                     if 'Language' not in catalog_vars:
                         catalog_vars['Language'] = 'all'
+                    # Include inactive content in result list. This is
+                    # especially important for content scheduled to go public
+                    # in the future, but needs to be reviewed before this.
+                    catalog_vars['show_inactive'] = True
                     for result in catalog.searchResults(catalog_vars):
                         o = result.getObject()
                         if o \
diff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py
index fb18561..65af650 100644
--- a/Products/CMFPlone/__init__.py
+++ b/Products/CMFPlone/__init__.py
@@ -213,3 +213,7 @@ def initialize(context):
 # plonelocales domain
 from zope.i18nmessageid import MessageFactory
 PloneLocalesMessageFactory = MessageFactory('plonelocales')
+
+# Apply early monkey patches.  For these patches, it is too late if we do this
+# in the initialize method.
+from Products.CMFPlone import earlypatches  # noqa
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index 789b5a5..2244030 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -1,4 +1,6 @@
 from operator import itemgetter
+from urlparse import urljoin
+from urlparse import urlparse
 
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
 from plone.protect.interfaces import IDisableCSRFProtection
@@ -86,6 +88,16 @@ class RootLoginRedirect(BrowserView):
     """
 
     def __call__(self, came_from=None):
+        if came_from is not None:
+            # see if this is a relative url or an absolute
+            if len(urlparse(came_from)[1]) == 0:
+                # No host specified, so url is relative.  Get an absolute url.
+                # Note: '\\domain.org' is not recognised as host, which is good.
+                came_from = urljoin(self.context.absolute_url() + '/', came_from)
+            elif not came_from.startswith(self.context.absolute_url()):
+                # Note: we cannot use portal_url.isURLInPortal here, because we are
+                # not in a Plone portal, but in the Zope root.
+                came_from = None
         if came_from is None:
             came_from = self.context.absolute_url()
         self.request.response.redirect(came_from)
diff --git a/Products/CMFPlone/earlypatches/__init__.py b/Products/CMFPlone/earlypatches/__init__.py
new file mode 100644
index 0000000..d7d70f5
--- /dev/null
+++ b/Products/CMFPlone/earlypatches/__init__.py
@@ -0,0 +1,2 @@
+# misc security fixes
+import security  # noqa
diff --git a/Products/CMFPlone/earlypatches/security.py b/Products/CMFPlone/earlypatches/security.py
new file mode 100644
index 0000000..1303f91
--- /dev/null
+++ b/Products/CMFPlone/earlypatches/security.py
@@ -0,0 +1,95 @@
+# 1. make sure allow_module can't be called from restricted code
+import AccessControl
+AccessControl.allow_module.__roles__ = ()
+
+# 2. make sure /@@ doesn't traverse to annotations
+from zope.traversing import namespace
+from zope.traversing.interfaces import TraversalError
+old_traverse = namespace.view.traverse
+def traverse(self, name, ignored):
+    if not name:
+        raise TraversalError(self.context, name)
+    return old_traverse(self, name, ignored)
+namespace.view.traverse = traverse
+
+# 3. be sure to check Access contents information permission for FTP users
+from AccessControl import getSecurityManager
+from zExceptions import Unauthorized
+from OFS.ObjectManager import ObjectManager
+ObjectManager.__old_manage_FTPlist = ObjectManager.manage_FTPlist
+def manage_FTPlist(self, REQUEST):
+    """Returns a directory listing consisting of a tuple of
+    (id,stat) tuples, marshaled to a string. Note, the listing it
+    should include '..' if there is a Folder above the current
+    one.
+
+    In the case of non-foldoid objects it should return a single
+    tuple (id,stat) representing itself."""
+
+    if not getSecurityManager().checkPermission('Access contents information', self):
+        raise Unauthorized('Not allowed to access contents.')
+
+    return self.__old_manage_FTPlist(REQUEST)
+ObjectManager.manage_FTPlist = manage_FTPlist
+
+# 4. Make sure z3c.form widgets don't get declared as public
+from Products.Five.metaconfigure import ClassDirective
+old_require = ClassDirective.require
+def require(self, *args, **kw):
+    if self._ClassDirective__class.__module__.startswith('z3c.form.browser'):
+        return
+    return old_require(self, *args, **kw)
+ClassDirective.require = require
+
+# 5. Check return value of getToolByName
+# This is an unusual sort of monkey patching...we replace just the func_code
+# rather than the entire function, to make sure that aliases to the function
+# that were imported prior to this patch will still run the patched code.
+code = """
+from persistent.interfaces import IPersistent
+from OFS.interfaces import IItem
+from Products.CMFPlone.FactoryTool import FauxArchetypeTool
+
+def _getToolByName(self, name, default=_marker):
+    pass
+
+def check_getToolByName(obj, name, default=_marker):
+    result = _getToolByName(obj, name, default)
+    if IPersistent.providedBy(result) or \
+            IItem.providedBy(result) or \
+            name in _tool_interface_registry or \
+            (isinstance(result, FauxArchetypeTool)) or \
+            '.test' in result.__class__.__module__ or \
+            result is _marker or \
+            result is default:
+        return result
+    else:
+        raise TypeError("Object found is not a portal tool (%s)" % (name,))
+    return result
+"""
+from Products.CMFCore import utils
+if '_marker' not in utils.getToolByName.func_globals:
+    raise Exception("This Version of Products.CMFPlone is not compatible "
+                    "with Products.PloneHotfix20121106, the fixes are "
+                    "included already in Products.CMFPlone, please remove "
+                    "the hotfix")
+exec code in utils.getToolByName.func_globals
+utils._getToolByName.func_code = utils.getToolByName.func_code
+utils.getToolByName.func_code = utils.check_getToolByName.func_code
+
+# 6. Protect some methods in ZCatalog
+from Products.ZCatalog.ZCatalog import ZCatalog
+ZCatalog.resolve_path__roles__ = ()
+ZCatalog.resolve_url__roles__ = ()
+
+# 7. Prevent publish traversal of the request
+from ZPublisher.BaseRequest import BaseRequest
+from ZPublisher.HTTPRequest import HTTPRequest
+from zope.publisher.base import BaseRequest as ZPBaseRequest
+from zope.publisher.ftp import FTPRequest
+from zope.publisher.http import HTTPRequest as ZPHTTPRequest
+for c in [BaseRequest, HTTPRequest, ZPBaseRequest, FTPRequest, ZPHTTPRequest]:
+    try:
+        del c.__doc__
+    except:
+        pass
diff --git a/Products/CMFPlone/patches/__init__.py b/Products/CMFPlone/patches/__init__.py
index fd661fe..534d5d6 100644
--- a/Products/CMFPlone/patches/__init__.py
+++ b/Products/CMFPlone/patches/__init__.py
@@ -33,3 +33,5 @@
 
 import addMember
 import publishing
+
+import z3c_form
diff --git a/Products/CMFPlone/patches/securemailhost.py b/Products/CMFPlone/patches/securemailhost.py
index 3280829..1ee05bb 100644
--- a/Products/CMFPlone/patches/securemailhost.py
+++ b/Products/CMFPlone/patches/securemailhost.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """This module provides backwards compatiblity for products using the
 SecureMailHost API.  It should be removed entirely for Plone 5.0."""
 import sys
@@ -26,17 +27,17 @@
 fake_module = ModuleProxy(smh_module or sys.modules[__name__])
 deferred = fake_module.__deferred_definitions__
 deferred['EMAIL_RE'] = DeferredAndDeprecated(
-                'EMAIL_RE',
-                'Products.CMFPlone.PloneTool:EMAIL_RE',
-                'EMAIL_RE has been moved from SecureMailHost, which is no '
-                'longer shipped with Plone.  It can be imported from '
-                'Products.CMFPlone.utils.EMAIL_RE')
+    'EMAIL_RE',
+    'Products.CMFPlone.PloneTool:EMAIL_RE',
+    'EMAIL_RE has been moved from SecureMailHost, which is no '
+    'longer shipped with Plone.  It can be imported from '
+    'Products.CMFPlone.PloneTool.EMAIL_RE')
 deferred['EMAIL_CUTOFF_RE'] = DeferredAndDeprecated(
-                     'EMAIL_CUTOFF_RE',
-                     'Products.CMFPlone.PloneTool:EMAIL_CUTOFF_RE',
-                     'EMAIL_CUTOFF_RE has been moved from SecureMailHost, '
-                     'which is no longer shipped with Plone.  It can be '
-                     'imported from Products.CMFPlone.utils.EMAIL_CUTOFF_RE')
+    'EMAIL_CUTOFF_RE',
+    'Products.CMFPlone.PloneTool:EMAIL_CUTOFF_RE',
+    'EMAIL_CUTOFF_RE has been moved from SecureMailHost, '
+    'which is no longer shipped with Plone.  It can be '
+    'imported from Products.CMFPlone.PloneTool.EMAIL_CUTOFF_RE')
 
 
 # We can't depend on SecureMailHost, so we have to reimplement
diff --git a/Products/CMFPlone/patches/security.py b/Products/CMFPlone/patches/security.py
index 1303f91..afff6ad 100644
--- a/Products/CMFPlone/patches/security.py
+++ b/Products/CMFPlone/patches/security.py
@@ -1,95 +1,4 @@
-# 1. make sure allow_module can't be called from restricted code
-import AccessControl
-AccessControl.allow_module.__roles__ = ()
-
-# 2. make sure /@@ doesn't traverse to annotations
-from zope.traversing import namespace
-from zope.traversing.interfaces import TraversalError
-old_traverse = namespace.view.traverse
-def traverse(self, name, ignored):
-    if not name:
-        raise TraversalError(self.context, name)
-    return old_traverse(self, name, ignored)
-namespace.view.traverse = traverse
-
-# 3. be sure to check Access contents information permission for FTP users
-from AccessControl import getSecurityManager
-from zExceptions import Unauthorized
-from OFS.ObjectManager import ObjectManager
-ObjectManager.__old_manage_FTPlist = ObjectManager.manage_FTPlist
-def manage_FTPlist(self, REQUEST):
-    """Returns a directory listing consisting of a tuple of
-    (id,stat) tuples, marshaled to a string. Note, the listing it
-    should include '..' if there is a Folder above the current
-    one.
-
-    In the case of non-foldoid objects it should return a single
-    tuple (id,stat) representing itself."""
-
-    if not getSecurityManager().checkPermission('Access contents information', self):
-        raise Unauthorized('Not allowed to access contents.')
-
-    return self.__old_manage_FTPlist(REQUEST)
-ObjectManager.manage_FTPlist = manage_FTPlist
-
-# 4. Make sure z3c.form widgets don't get declared as public
-from Products.Five.metaconfigure import ClassDirective
-old_require = ClassDirective.require
-def require(self, *args, **kw):
-    if self._ClassDirective__class.__module__.startswith('z3c.form.browser'):
-        return
-    return old_require(self, *args, **kw)
-ClassDirective.require = require
-
-# 5. Check return value of getToolByName
-# This is an unusual sort of monkey patching...we replace just the func_code
-# rather than the entire function, to make sure that aliases to the function
-# that were imported prior to this patch will still run the patched code.
-code = """
-from persistent.interfaces import IPersistent
-from OFS.interfaces import IItem
-from Products.CMFPlone.FactoryTool import FauxArchetypeTool
-
-def _getToolByName(self, name, default=_marker):
-    pass
-
-def check_getToolByName(obj, name, default=_marker):
-    result = _getToolByName(obj, name, default)
-    if IPersistent.providedBy(result) or \
-            IItem.providedBy(result) or \
-            name in _tool_interface_registry or \
-            (isinstance(result, FauxArchetypeTool)) or \
-            '.test' in result.__class__.__module__ or \
-            result is _marker or \
-            result is default:
-        return result
-    else:
-        raise TypeError("Object found is not a portal tool (%s)" % (name,))
-    return result
-"""
-from Products.CMFCore import utils
-if '_marker' not in utils.getToolByName.func_globals:
-    raise Exception("This Version of Products.CMFPlone is not compatible "
-                    "with Products.PloneHotfix20121106, the fixes are "
-                    "included already in Products.CMFPlone, please remove "
-                    "the hotfix")
-exec code in utils.getToolByName.func_globals
-utils._getToolByName.func_code = utils.getToolByName.func_code
-utils.getToolByName.func_code = utils.check_getToolByName.func_code
-
-# 6. Protect some methods in ZCatalog
-from Products.ZCatalog.ZCatalog import ZCatalog
-ZCatalog.resolve_path__roles__ = ()
-ZCatalog.resolve_url__roles__ = ()
-
-# 7. Prevent publish traversal of the request
-from ZPublisher.BaseRequest import BaseRequest
-from ZPublisher.HTTPRequest import HTTPRequest
-from zope.publisher.base import BaseRequest as ZPBaseRequest
-from zope.publisher.ftp import FTPRequest
-from zope.publisher.http import HTTPRequest as ZPHTTPRequest
-for c in [BaseRequest, HTTPRequest, ZPBaseRequest, FTPRequest, ZPHTTPRequest]:
-    try:
-        del c.__doc__
-    except:
-        pass
+# Some security patches were done here until Plone 4.3.11, but they needed to
+# be loaded earlier.  No one should be importing from this place, but let's not
+# break if that happens.
+from Products.CMFPlone.earlypatches.security import *  # noqa
diff --git a/Products/CMFPlone/patches/z3c_form.py b/Products/CMFPlone/patches/z3c_form.py
new file mode 100644
index 0000000..1b61598
--- /dev/null
+++ b/Products/CMFPlone/patches/z3c_form.py
@@ -0,0 +1,50 @@
+# This is from Products.PloneHotfix20160830.
+from urlparse import urlparse
+from z3c.form import widget
+
+
+# Attribute name to allow prefilling a widget with a value from a GET request.
+# Usually all forms are only for POST, and we disallow filling it with GET
+# data.  This works the way around too: allow prefilling from a POST request
+# when the form only handles GET.  But that is unlikely.
+ALLOW_PREFILL = 'allow_prefill_from_GET_request'
+
+
+def _wrap_update(update):
+    def _wrapped(self):
+        # If we are ignoring the request on the form, we should also ignore it
+        # on the widget.  This means that when on the first widget we conclude
+        # that the form should be ignored, we quickly ignore it on all widgets,
+        # without needing to check the referer and method again and again.
+        # When we do not ignore the request, we do still run these checks for
+        # all widgets.  But it seems an international sport to override the
+        # update or updateWidgets method of the base z3c form, which makes it
+        # hard to fix all occurrences by one check on the form.
+        if not self.ignoreRequest and getattr(self.form, 'ignoreRequest', False):
+            self.ignoreRequest = True
+        # If we are not already ignoring the request, check the request method.
+        if (not self.ignoreRequest
+                and hasattr(self.form, 'method')
+                and hasattr(self.request, 'REQUEST_METHOD')):
+            if self.request.REQUEST_METHOD.lower() != self.form.method.lower():
+                # This is an unexpected request method.
+                # For special cases we allow a form to bail out.
+                if not getattr(self.form, ALLOW_PREFILL, False):
+                    self.ignoreRequest = True
+                    self.form.ignoreRequest = True
+        # If we are not already ignoring the request, check the referer.
+        if not self.ignoreRequest and hasattr(self.request, 'environ'):
+            env = self.request.environ
+            referrer = env.get('HTTP_REFERER', env.get('HTTP_REFERRER'))
+            if referrer:
+                req_url_parsed = urlparse(self.request.URL)
+                referrer_parsed = urlparse(referrer)
+                if req_url_parsed.netloc != referrer_parsed.netloc:
+                    # We do not trust data from outside referrers.
+                    self.ignoreRequest = True
+                    self.form.ignoreRequest = True
+        return update(self)
+    return _wrapped
+
+
+widget.Widget.update = _wrap_update(widget.Widget.update)
diff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml
index 460cd47..a6853b5 100644
--- a/Products/CMFPlone/profiles/default/metadata.xml
+++ b/Products/CMFPlone/profiles/default/metadata.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <metadata>
-  <version>4314</version>
+  <version>4315</version>
 </metadata>
diff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml
index a6380ff..aab80bd 100644
--- a/Products/CMFPlone/profiles/default/propertiestool.xml
+++ b/Products/CMFPlone/profiles/default/propertiestool.xml
@@ -157,5 +157,6 @@
   <property name="external_login_url" type="string"/>
   <property name="external_logout_url" type="string"/>
   <property name="external_login_iframe" type="boolean"/>
+  <property name="sort_on" type="string">relevance</property>
  </object>
 </object>
diff --git a/Products/CMFPlone/skins/plone_ecmascript/livesearch.js b/Products/CMFPlone/skins/plone_ecmascript/livesearch.js
index e8d5fd3..7cc9a9b 100644
--- a/Products/CMFPlone/skins/plone_ecmascript/livesearch.js
+++ b/Products/CMFPlone/skins/plone_ecmascript/livesearch.js
@@ -36,6 +36,7 @@ var livesearch = (function () {
             $shadow = $form.find('div.LSShadow'),
             $path = $form.find('input[name="path"]');
 
+        
         function _hide() {
             // hides the result window
             $$result.hide();
@@ -56,6 +57,25 @@ var livesearch = (function () {
         }
 
         function _search() {
+            var sort_on = function() {
+                var parameters = location.search,
+                    sorton_position = parameters.indexOf('sort_on');
+                if (sorton_position === -1) {
+                    // return default sort
+                    var $searchResults = $('#search-results');
+                    if ($searchResults.length > 0) {
+                        return $searchResults.attr('data-default-sort');
+                    }
+                    return '';
+                }
+                // cut string before sort_on parameter
+                var sort_on = parameters.substring(sorton_position);
+                // cut other parameters
+                sort_on = sort_on.split('&')[0];
+                // get just the value
+                sort_on = sort_on.split('=')[1];
+                return sort_on;
+            }();
             // does the actual search
             if ($lastsearch === $inputnode.value) {
                 // do nothing if the input didn't change
@@ -79,6 +99,9 @@ var livesearch = (function () {
             if ($path.length && $path[0].checked) {
                 $$query.path = $path.val();
             }
+            if (sort_on !== '') {
+                $$query.sortOn = sort_on;
+            }
             // turn into a string for use as a cache key
             $$query = jQuery.param($$query);
 
diff --git a/Products/CMFPlone/skins/plone_scripts/livesearch_reply.py b/Products/CMFPlone/skins/plone_scripts/livesearch_reply.py
index 03f0b56..f75d8b0 100644
--- a/Products/CMFPlone/skins/plone_scripts/livesearch_reply.py
+++ b/Products/CMFPlone/skins/plone_scripts/livesearch_reply.py
@@ -4,7 +4,7 @@
 ##bind namespace=
 ##bind script=script
 ##bind subpath=traverse_subpath
-##parameters=q,limit=10,path=None
+##parameters=q,limit=10,path=None,sortOn=None
 ##title=Determine whether to show an id in an edit form
 
 from Products.CMFCore.utils import getToolByName
@@ -72,6 +72,12 @@ def quote_bad_chars(s):
 REQUEST = context.REQUEST
 params = {'SearchableText': r,
           'sort_limit': limit + 1}
+if sortOn is None:
+    sortOn = siteProperties.getProperty('sort_on', 'relevance')
+if sortOn != 'relevance':
+    params['sort_on'] = sortOn
+if sortOn == 'Date':
+    params['sort_order'] = 'reverse'
 if 'portal_type' not in REQUEST:
     params['portal_type'] = friendly_types
 
diff --git a/Products/CMFPlone/tests/testBrowserAdmin.py b/Products/CMFPlone/tests/testBrowserAdmin.py
new file mode 100644
index 0000000..512d47a
--- /dev/null
+++ b/Products/CMFPlone/tests/testBrowserAdmin.py
@@ -0,0 +1,44 @@
+import urlparse
+import os
+from Products.CMFPlone.tests import PloneTestCase
+
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin
+
+from AccessControl import Permissions
+from AccessControl import getSecurityManager
+portal_owner = PloneTestCase.portal_owner
+default_password = PloneTestCase.default_password
+
+
+class TestPloneRootLoginURL(PloneTestCase.FunctionalTestCase):
+
+    def test_normal_redirect(self):
+        url = '@@plone-root-login?came_from=%s' % self.portal.absolute_url()
+        response = self.publish(
+            url,
+            basic='%s:%s' % (portal_owner, default_password),
+            handle_errors=False,
+        )
+        self.assertNotEqual(response.headers.get('location'), None)
+        self.assertEqual(response.headers.get('location'),
+                         self.portal.absolute_url())
+
+    def test_attacker_redirect(self):
+        attackers = (
+            'http://attacker.com',
+            '\\attacker.com',
+        )
+        for attacker in attackers:
+            url = '@@plone-root-login?came_from=%s' % attacker
+            response = self.publish(
+                url,
+                basic='%s:%s' % (portal_owner, default_password),
+                handle_errors=False,
+            )
+            self.assertNotEqual(response.headers.get('location'), None)
+            self.assertNotEqual(response.headers.get('location'), attacker)
+            # Whatever the url is, it starts with the Zope root url.
+            self.assertTrue(response.headers.get('location').startswith(
+                self.app.absolute_url()), response.headers.get('location'))
diff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py
index e848a79..a6cc38d 100644
--- a/Products/CMFPlone/tests/testPortalCreation.py
+++ b/Products/CMFPlone/tests/testPortalCreation.py
@@ -439,6 +439,11 @@ def testTTWLockableProperty(self):
         self.assertEquals(True,
                           self.properties.site_properties.lock_on_ttw_edit)
 
+    def testSortOnProperty(self):
+        # site_properties should have sort_on property
+        self.assertTrue(
+            self.properties.site_properties.hasProperty('sort_on'))
+
     def testPortalFTIIsDynamicFTI(self):
         # Plone Site FTI should be a DynamicView FTI
         fti = self.portal.getTypeInfo()
diff --git a/Products/CMFPlone/tests/testSSOLogin.py b/Products/CMFPlone/tests/testSSOLogin.py
index 222182f..ed961d1 100644
--- a/Products/CMFPlone/tests/testSSOLogin.py
+++ b/Products/CMFPlone/tests/testSSOLogin.py
@@ -30,6 +30,15 @@ def afterSetUp(self):
                 self.another_portal.absolute_url(),
                 ]
             )
+        # The normal portal needs to allow logins from the login portal,
+        # otherwise the redirect_to action on login or logout will refuse to
+        # redirect externally.  This may need to be done on another_portal too,
+        # but for the current tests this is not needed.
+        self.portal.portal_properties.site_properties._updateProperty(
+            'allow_external_login_sites', [
+                self.login_portal.absolute_url(),
+                ]
+            )
 
         # Configure our sites to use the login portal for logins and logouts
         login_portal_url = self.login_portal.absolute_url()
diff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py
index aedfb0c..51f4d62 100644
--- a/Products/CMFPlone/tests/testSecurity.py
+++ b/Products/CMFPlone/tests/testSecurity.py
@@ -195,8 +195,17 @@ def test_atat_does_not_return_anything(self):
     def test_go_back(self):
         res = self.publish('/plone/front-page/go_back?last_referer=http://${request}',
             basic=ptc.portal_owner + ':' + ptc.default_password)
+        # This used to show the request as location, so something like:
+        # http://<h3>form</h3><table>... and then all kinds of data from the
+        # request.  This was fixed in PloneHotfix20121106.  For this request
+        # you then got redirected to url http://${request} which your browser
+        # obviously does not know how to handle.
+        #
+        # In PloneHotfix20160830 this fix was kept, but additionally Plone
+        # refuses to redirect to external sites by default.
         self.assertEqual(302, res.status)
-        self.assertEqual('http://${request}', res.headers['location'][:17])
+        self.assertEqual(res.headers['location'],
+                         self.portal.absolute_url() + '/front-page')
 
     def test_getFolderContents(self):
         res = self.publish('/plone/getFolderContents')
diff --git a/Products/CMFPlone/tests/testURLTool.py b/Products/CMFPlone/tests/testURLTool.py
index d9ec743..1a0d0e1 100644
--- a/Products/CMFPlone/tests/testURLTool.py
+++ b/Products/CMFPlone/tests/testURLTool.py
@@ -43,6 +43,11 @@ def _makeOne(self, *args, **kw):
         return url_tool.__of__(self.site)
 
     def test_isURLInPortal(self):
+        # First test what the absolute url of the site is, otherwise these
+        # tests look really weird.  Apparently our domain is www.foobar.com.
+        self.assertEqual(self.site.absolute_url(),
+                         'http://www.foobar.com/bar/foo')
+
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertTrue(iURLiP('http://www.foobar.com/bar/foo/folder'))
@@ -101,11 +106,21 @@ def test_script_tag_url_not_in_portal(self):
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertFalse(iURLiP('<script>alert("hi");</script>'))
+        self.assertFalse(iURLiP('<sCript>alert("hi");</script>'))
         self.assertFalse(
             iURLiP('%3Cscript%3Ealert(%22hi%22)%3B%3C%2Fscript%3E'))
+        self.assertFalse(
+            iURLiP('%3CsCript%3Ealert(%22hi%22)%3B%3C%2Fscript%3E'))
 
     def test_inline_url_not_in_portal(self):
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertFalse(iURLiP('javascript%3Aalert(3)'))
+        self.assertFalse(iURLiP('jaVascript%3Aalert(3)'))
         self.assertFalse(iURLiP('javascript:alert(3)'))
+        self.assertFalse(iURLiP('jaVascript:alert(3)'))
+
+    def test_double_back_slash(self):
+        url_tool = self._makeOne()
+        iURLiP = url_tool.isURLInPortal
+        self.assertFalse(iURLiP('\\\\www.example.com'))
diff --git a/Products/CMFPlone/tests/test_z3c_form_widgets.py b/Products/CMFPlone/tests/test_z3c_form_widgets.py
new file mode 100644
index 0000000..38de318
--- /dev/null
+++ b/Products/CMFPlone/tests/test_z3c_form_widgets.py
@@ -0,0 +1,116 @@
+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+from z3c.form import widget
+from z3c.form.browser.text import TextWidget
+
+import unittest
+
+
+WIDGETS_TO_TEST = [
+    TextWidget,
+    widget.Widget,
+    widget.MultiWidget,
+    widget.SequenceWidget,
+]
+
+_marker = object()
+
+
+class FakeForm(object):
+    method = 'post'
+    ignoreRequest = False
+
+
+class TestAttackVector(unittest.TestCase):
+    layer = PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING
+    _widgets_to_test = WIDGETS_TO_TEST
+    _attack = '</textarea><script>alert("form.widgets.class_blacklist")</script>'  # noqa
+
+    def _terms(self):
+        # For the SequenceWidget we need basic terms.
+        # We make dummy (dumb) terms.
+        from z3c.form.term import Terms
+
+        class DummyTerms(Terms):
+            def getTermByToken(self, token):
+                return token
+
+        return DummyTerms()
+
+    def test_regression(self):
+        request = self.layer['request']
+        for Widget in self._widgets_to_test:
+            wi = Widget(request)
+            wi.name = 'foo'
+            request.REQUEST_METHOD = 'POST'
+            request.form.update({
+                'foo': 'bar'
+            })
+            wi.form = FakeForm()
+            self.assertEquals(wi.ignoreRequest, False)
+            # The SequenceWidget needs terms.  It will have terms=None,
+            # where the others have no terms attribute.
+            if getattr(wi, 'terms', _marker) is None:
+                wi.terms = self._terms()
+            wi.update()
+            self.assertEquals(wi.ignoreRequest, False)
+
+    def test_only_get_data_from_valid_request_method(self):
+        request = self.layer['request']
+        for Widget in self._widgets_to_test:
+            wi = Widget(request)
+            wi.name = 'foobar'
+            request.REQUEST_METHOD = 'GET'
+            request.form.update({
+                'foobar': self._attack
+            })
+            wi.form = FakeForm()
+            self.assertEquals(wi.ignoreRequest, False)
+            # The SequenceWidget needs terms.  It will have terms=None,
+            # where the others have no terms attribute.
+            if getattr(wi, 'terms', _marker) is None:
+                wi.terms = self._terms()
+            wi.update()
+            self.assertEquals(wi.ignoreRequest, True)
+
+    def test_explicitly_allow_data_from_invalid_request_method(self):
+        request = self.layer['request']
+        for Widget in self._widgets_to_test:
+            wi = Widget(request)
+            wi.name = 'foobar'
+            request.REQUEST_METHOD = 'GET'
+            request.form.update({
+                'foobar': self._attack
+            })
+            wi.form = FakeForm()
+            # Set attribute on form to explicitly allow prefill.
+            from Products.CMFPlone.patches.z3c_form import ALLOW_PREFILL
+            setattr(wi.form, ALLOW_PREFILL, True)
+            self.assertEquals(wi.ignoreRequest, False)
+            # The SequenceWidget needs terms.  It will have terms=None,
+            # where the others have no terms attribute.
+            if getattr(wi, 'terms', _marker) is None:
+                wi.terms = self._terms()
+            wi.update()
+            self.assertEquals(wi.ignoreRequest, False)
+
+    def test_only_get_data_from_valid_referrer(self):
+        # this handles the use case where hijacker gets user to click on
+        # button that submits to plone site
+        request = self.layer['request']
+
+        for Widget in self._widgets_to_test:
+            wi = Widget(request)
+            wi.name = 'foobar'
+            request.REQUEST_METHOD = 'POST'
+            request.form.update({
+                'foobar': self._attack
+            })
+            request.environ['HTTP_REFERER'] = 'http://attacker.com'
+            wi.form = FakeForm()
+            self.assertEquals(wi.ignoreRequest, False)
+            # The SequenceWidget needs terms.  It will have terms=None,
+            # where the others have no terms attribute.
+            if getattr(wi, 'terms', _marker) is None:
+                wi.terms = self._terms()
+            wi.update()
+            self.assertEquals(wi.ignoreRequest, True)
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 333f5ff..d20001f 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -15,13 +15,28 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add sort_on field to search controlpanel.
+  [rodfersou]
 
 Bug fixes:
 
 - Fix base tag differs from actual URL (fixes `#86`_).
   [rodfersou]
 
+- Load some patches earlier, instead of in our initialize method.
+  This is part of PloneHotfix20161129.
+  [maurits]
+
+- Apply security hotfix 20160830 for ``z3c.form`` widgets.  [maurits]
+
+- Fixed tests in combination with newer CMFFormController which has the hotfix.  [maurits]
+
+- Apply security hotfix 20160830 for ``@@plone-root-login``.  [maurits]
+
+- Apply security hotfix 20160830 for ``isURLInPortal``.  [maurits]
+
+- Include inactive content in worklists.  [sebasgo]
+
   
 4.3.11 (2016-08-15)
 -------------------


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-12-15T17:46:43+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/189eb4f415979c666b3586889cbc984b6a4e903c

Merge pull request #1710 from plone/issue_86

Base tag differs from actual URL

Files changed:
M Products/CMFPlone/tests/testBrowserDefault.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py
index 0206212..00d90eb 100644
--- a/Products/CMFPlone/tests/testBrowserDefault.py
+++ b/Products/CMFPlone/tests/testBrowserDefault.py
@@ -13,6 +13,7 @@
 from Products.CMFPlone.utils import _createObjectByType
 from Products.CMFPlone.PloneFolder import ReplaceableWrapper
 
+RE_REMOVE_BASE = re.compile('<base.*/base>')
 RE_REMOVE_DOCCONT = re.compile('\s*href="http://.*?#content"')
 RE_REMOVE_SKIPNAV = re.compile('\s*href="http://.*?#portal-globalnav"')
 RE_REMOVE_TABS = re.compile('<ul id="portal-globalnav".*?</ul>', re.S)
@@ -68,10 +69,12 @@ def compareLayoutVsView(self, obj, path="", viewaction=None):
         body = response.getBody().decode('utf-8')
 
         # request/ACTUAL_URL is fubar in tests, remove lines that depend on it
+        resolved = RE_REMOVE_BASE.sub('', resolved)
         resolved = RE_REMOVE_DOCCONT.sub('', resolved)
         resolved = RE_REMOVE_SKIPNAV.sub('', resolved)
         resolved = RE_REMOVE_TABS.sub('', resolved)
 
+        body = RE_REMOVE_BASE.sub('', body)
         body = RE_REMOVE_DOCCONT.sub('', body)
         body = RE_REMOVE_SKIPNAV.sub('', body)
         body = RE_REMOVE_TABS.sub('', body)
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index d02eeb0..d20001f 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -20,6 +20,9 @@ New features:
 
 Bug fixes:
 
+- Fix base tag differs from actual URL (fixes `#86`_).
+  [rodfersou]
+
 - Load some patches earlier, instead of in our initialize method.
   This is part of PloneHotfix20161129.
   [maurits]
@@ -34,6 +37,7 @@ Bug fixes:
 
 - Include inactive content in worklists.  [sebasgo]
 
+  
 4.3.11 (2016-08-15)
 -------------------
 
@@ -709,3 +713,4 @@ Fixes:
   [kleist]
 
 .. _`#1041`: https://github.com/plone/Products.CMFPlone/issues/1041
+.. _`#86`: https://github.com/plone/plone.app.layout/issues/86


