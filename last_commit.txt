Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-17T11:54:37+02:00
Author: Markus Hilbert (iham) <m.hilbert@akbild.ac.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/dbda402279d67f1155c3b48677316684928b408c

Creating language folder(s) on installation.

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/multilingual/configure.zcml
M src/plone/app/multilingual/setuphandlers.py
M src/plone/app/multilingual/testing.py
M src/plone/app/multilingual/tests/test_setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a80051d..accab9e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,11 +6,14 @@ Changelog
 
 Breaking changes:
 
-- *add item here*
+- No more compatible with GenericSetup below 1.8.2.
+  [iham]
 
 New features:
 
-- *add item here*
+- Creating language folder(s) on installation.
+  (fixes https://github.com/plone/plone.app.multilingual/issues/214)
+  [iham]
 
 Bug fixes:
 
@@ -25,7 +28,7 @@ Fixes:
 - Wait for visibility of select2 result, instead of time.
   [jensens]
 
-- Workaroud in robot test for TinyMCE overlap bug see 
+- Workaroud in robot test for TinyMCE overlap bug see
   https://github.com/plone/plone.app.multilingual/issues/227
   for details
   [jensens]
@@ -39,7 +42,7 @@ Fixes:
 - Fixed compatibility issue with archetypes contents: wrong URL were generated.
   [keul, hvelarde]
 
-- Really don't show the Google Translate button when no API key set 
+- Really don't show the Google Translate button when no API key set
   [djowett]
 
 
diff --git a/setup.py b/setup.py
index 2445b54..b39f9b4 100755
--- a/setup.py
+++ b/setup.py
@@ -1,11 +1,14 @@
-from setuptools import setup, find_packages
+"""Setup plone.app.multilingual."""
+
 import os
+from setuptools import setup, find_packages
+
 
-version = '3.0.18.dev0'
+VERSION = '3.0.18.dev0'
 
 setup(
     name='plone.app.multilingual',
-    version=version,
+    version=VERSION,
     description="Multilingual Plone UI package, enables maintenance of "
                 "translations for both Dexterity types and Archetypes",
     long_description="\n\n".join([
@@ -32,6 +35,7 @@
     zip_safe=False,
     install_requires=[
         'Products.CMFPlone>=5.0b1',
+        'Products.GenericSetup>=1.8.2',
         'archetypes.multilingual',
         'plone.app.registry',
         'plone.app.z3cform',
diff --git a/src/plone/app/multilingual/configure.zcml b/src/plone/app/multilingual/configure.zcml
index 703e6c6..9a26917 100644
--- a/src/plone/app/multilingual/configure.zcml
+++ b/src/plone/app/multilingual/configure.zcml
@@ -147,7 +147,8 @@
       description="Install to enable multilingual content support"
       directory="profiles/default"
       provides="Products.GenericSetup.interfaces.EXTENSION"
-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"/>
+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+      post_handler=".setuphandlers.init_pam"/>
 
   <genericsetup:registerProfile
       name="uninstall"
diff --git a/src/plone/app/multilingual/setuphandlers.py b/src/plone/app/multilingual/setuphandlers.py
index 26798c5..9032fd4 100644
--- a/src/plone/app/multilingual/setuphandlers.py
+++ b/src/plone/app/multilingual/setuphandlers.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
+from plone.api import portal
 from Products.CMFPlone.interfaces import INonInstallable
+from plone.app.multilingual.browser.setup import SetupMultilingualSite
 from zope.interface import implementer
 import pkg_resources
 
@@ -24,6 +26,12 @@ def getNonInstallableProfiles(self):
         ]
 
 
+def init_pam(tool):
+    """After installation run setup to create LRF and LIF."""
+    setup_tool = SetupMultilingualSite()
+    setup_tool.setupSite(portal.get())
+
+
 def step_default_various(context):
     if context.readDataFile('plone.app.multilingual_default.txt') is None:
         return
diff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py
index 2ef49c1..741d73a 100644
--- a/src/plone/app/multilingual/testing.py
+++ b/src/plone/app/multilingual/testing.py
@@ -81,6 +81,59 @@ def setUpPloneSite(self, portal):
     name="plone.app.multilingual:Integration")
 
 
+class PloneAppMultiLingualPresetLayer(PloneSandboxLayer):
+    """Test installation with preset languages."""
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        # Configure ZCML
+        xmlconfig.file('testing.zcml', plone.app.multilingual,
+                       context=configurationContext)
+
+        xmlconfig.file('overrides.zcml', plone.app.multilingual,
+                       context=configurationContext)
+
+        # Enable languageindependent-field on IRelatedItems-behavior
+        from plone.app.relationfield.behavior import IRelatedItems
+        alsoProvides(IRelatedItems['relatedItems'], ILanguageIndependentField)
+
+    def setUpPloneSite(self, portal):
+        # Define available languages before installing PAM
+        # This simulates the behavior of having predefined languages
+        # in GenericSetup before installing PAM
+        language_tool = getToolByName(portal, 'portal_languages')
+        language_tool.addSupportedLanguage('ca')
+        language_tool.addSupportedLanguage('es')
+
+        # Enable request negotiator
+        language_tool.use_request_negotiation = True
+
+        # Activate product
+        applyProfile(portal, 'plone.app.multilingual:default')
+
+        # Empower test user
+        setRoles(portal, TEST_USER_ID, ['Manager'])
+
+        # Enable all errors
+        error_log = getToolByName(portal, 'error_log')
+        error_log._ignored_exceptions = ()
+
+        # Set default workflow
+        wftool = getToolByName(portal, 'portal_workflow')
+        wftool.setDefaultChain('simple_publication_workflow')
+
+        # Cleanup p.a.contenttypes stuff
+        if 'robot-test-folder' in portal.objectIds():
+            portal.manage_delObjects('robot-test-folder')
+
+PLONE_APP_MULTILINGUAL_PRESET_FIXTURE = PloneAppMultiLingualPresetLayer()
+
+PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_APP_MULTILINGUAL_PRESET_FIXTURE,),
+    name="plone.app.multilingual:PresetIntegration")
+
+
 class MultipleLanguagesLayer(z2.Layer):
 
     defaultBases = (PLONE_APP_MULTILINGUAL_FIXTURE,)
@@ -203,5 +256,6 @@ def create_translation(self, *args, **kwargs):
 
 
 PAM_INTEGRATION_TESTING = PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING
+PAM_INTEGRATION_PRESET_TESTING = PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING
 PAM_FUNCTIONAL_TESTING = PLONE_APP_MULTILINGUAL_FUNCTIONAL_TESTING
 PAM_ROBOT_TESTING = PLONE_APP_MULTILINGUAL_ROBOT_TESTING
diff --git a/src/plone/app/multilingual/tests/test_setup.py b/src/plone/app/multilingual/tests/test_setup.py
index 65556d4..ca0aeb4 100644
--- a/src/plone/app/multilingual/tests/test_setup.py
+++ b/src/plone/app/multilingual/tests/test_setup.py
@@ -1,39 +1,105 @@
 # -*- coding: utf-8 -*-
+import unittest2 as unittest
+from zope.interface import alsoProvides
+
 from Products.CMFCore.utils import getToolByName
+
 from plone.app.multilingual.browser.setup import SetupMultilingualSite
+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 from plone.app.multilingual.browser.vocabularies import\
     AllContentLanguageVocabulary
-from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING
-import unittest2 as unittest
-from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
-from zope.interface import alsoProvides
+from plone.app.multilingual.testing import (PAM_INTEGRATION_TESTING,
+                                            PAM_INTEGRATION_PRESET_TESTING)
 
 
 class TestSetupMultilingualSite(unittest.TestCase):
+    """Testing multilingual site without predefined languages."""
 
     layer = PAM_INTEGRATION_TESTING
 
     def setUp(self):
+        """Setting up the test."""
         self.portal = self.layer['portal']
         self.request = self.layer['request']
+        self.language_tool = getToolByName(self.portal, 'portal_languages')
+        self.languages = self.language_tool.getSupportedLanguages()
         alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)
 
-    def test_add_all_supported_languages(self):
-        """There was a language which code is 'id' and it broke the root
-        language folder setup process
+    def test_single_language(self):
+        """Only one language is set."""
+        self.assertEqual(len(self.languages), 1)
+
+    def test_no_languagefolder_created(self):
+        """On a single language no folder creation is done."""
+        portal_objects = self.portal.objectIds()
+        for lang in self.languages:
+            self.assertNotIn(lang, portal_objects)
+
+    def test_all_supported_languages(self):
+        """There was a language which code is 'id'.
+        This broke the root language folder setup process.
+        To get rid of that the folder is 'id-id'.
         """
-        language_tool = getToolByName(self.portal, 'portal_languages')
-        for lang in AllContentLanguageVocabulary()(self.portal):
-            language_tool.addSupportedLanguage(lang.value)
+        all_langs = AllContentLanguageVocabulary()(self.portal)
+        for lang in all_langs:
+            self.language_tool.addSupportedLanguage(lang.value)
+
+        workflow_tool = getToolByName(self.portal, "portal_workflow")
+        workflow_tool.setDefaultChain('simple_publication_workflow')
 
-        workflowTool = getToolByName(self.portal, "portal_workflow")
-        workflowTool.setDefaultChain('simple_publication_workflow')
+        setup_tool = SetupMultilingualSite()
+        setup_tool.setupSite(self.portal)
 
-        setupTool = SetupMultilingualSite()
-        setupTool.setupSite(self.portal)
+        portal_objects = self.portal.objectIds()
 
-        for lang in AllContentLanguageVocabulary()(self.portal):
-            if lang.value == 'id':
-                self.assertIn('id-id', self.portal.objectIds())
+        for lang in all_langs.by_value.keys():
+            if lang == 'id':
+                self.assertIn('id-id', portal_objects)
             else:
-                self.assertIn(lang.value, self.portal.objectIds())
+                self.assertIn(lang, portal_objects)
+
+    def test_type_of_language_folders(self):
+        """The created objects have to be 'Language Root Folder'."""
+        all_langs = AllContentLanguageVocabulary()(self.portal)
+        for lang in all_langs:
+            self.language_tool.addSupportedLanguage(lang.value)
+
+        workflow_tool = getToolByName(self.portal, "portal_workflow")
+        workflow_tool.setDefaultChain('simple_publication_workflow')
+
+        setup_tool = SetupMultilingualSite()
+        setup_tool.setupSite(self.portal)
+
+        for lang in all_langs.by_value.keys():
+            if lang == 'id':
+                self.assertEqual(self.portal.get('id-id').portal_type, 'LRF')
+            else:
+                self.assertEqual(self.portal.get(lang).portal_type, 'LRF')
+
+
+class TestSetupMultilingualPresetSite(unittest.TestCase):
+    """Testing multilingual site with predefined languages."""
+
+    layer = PAM_INTEGRATION_PRESET_TESTING
+
+    def setUp(self):
+        """Setting up the test."""
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        self.language_tool = getToolByName(self.portal, 'portal_languages')
+        self.languages = self.language_tool.getSupportedLanguages()
+        alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)
+
+    def test_language_folders_created(self):
+        """Available languages are: 'en', 'ca', 'es'.
+        After setup has run there should be
+        new objects in the portal named after the languages.
+        """
+        portal_objects = self.portal.objectIds()
+        for lang in self.languages:
+            self.assertIn(lang, portal_objects)
+
+    def test_type_of_language_folders(self):
+        """The created objects have to be 'Language Root Folder'."""
+        for lang in self.languages:
+            self.assertEqual(self.portal.get(lang).portal_type, 'LRF')


Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-17T11:54:42+02:00
Author: Markus Hilbert (iham) <m.hilbert@akbild.ac.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/e895558b27ab6366ddbf6913379cb235eefe9e3e

Flake8 cleanup. [iham]

Files changed:
M src/plone/app/multilingual/browser/add.py
M src/plone/app/multilingual/browser/controlpanel.py
M src/plone/app/multilingual/browser/edit.py
M src/plone/app/multilingual/browser/helper_views.py
M src/plone/app/multilingual/browser/menu.py
M src/plone/app/multilingual/browser/translate.py
M src/plone/app/multilingual/browser/utils.py
M src/plone/app/multilingual/browser/vocabularies.py
M src/plone/app/multilingual/factory.py
M src/plone/app/multilingual/manager.py
M src/plone/app/multilingual/subscriber.py
M src/plone/app/multilingual/testing.py
M src/plone/app/multilingual/tests/test_directives.py
M src/plone/app/multilingual/tests/test_form.py
M src/plone/app/multilingual/tests/test_selector.py

diff --git a/src/plone/app/multilingual/browser/add.py b/src/plone/app/multilingual/browser/add.py
index 269c54f..2abab08 100644
--- a/src/plone/app/multilingual/browser/add.py
+++ b/src/plone/app/multilingual/browser/add.py
@@ -71,7 +71,8 @@ def traverse(self, name, ignored):
         if not IDexterityContent.providedBy(source):
             # we are not on DX content, assume AT
             baseUrl = self.context.absolute_url()
-            url = '%s/@@add_at_translation?type=%s' % (baseUrl, source.portal_type)
+            url = '%s/@@add_at_translation?type=%s' % (baseUrl,
+                                                       source.portal_type)
             return self.request.response.redirect(url)
 
         # set the self.context to the place where it should be stored
@@ -89,7 +90,8 @@ def traverse(self, name, ignored):
             raise TraversalError(self.context, name)
 
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
 
         if not settings.redirect_babel_view:
             add_view = None
@@ -134,7 +136,8 @@ def render(self):
     @property
     def max_nr_of_buttons(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         return settings.buttons_babel_view_up_to_nr_translations
 
     def _process_language_independent(self, fields, widgets):
diff --git a/src/plone/app/multilingual/browser/controlpanel.py b/src/plone/app/multilingual/browser/controlpanel.py
index 775e133..ed607f8 100644
--- a/src/plone/app/multilingual/browser/controlpanel.py
+++ b/src/plone/app/multilingual/browser/controlpanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _Plone
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-from Products.CMFPlone.controlpanel.browser.language import LanguageControlPanelForm
+from Products.CMFPlone.controlpanel.browser.language import \
+    LanguageControlPanelForm
 from plone.app.registry.browser import controlpanel
 
 from plone.app.multilingual import isLPinstalled
diff --git a/src/plone/app/multilingual/browser/edit.py b/src/plone/app/multilingual/browser/edit.py
index 6fb190e..96c0c32 100644
--- a/src/plone/app/multilingual/browser/edit.py
+++ b/src/plone/app/multilingual/browser/edit.py
@@ -84,7 +84,8 @@ def render(self):
     @property
     def max_nr_of_buttons(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         return settings.buttons_babel_view_up_to_nr_translations
 
 DefaultMultilingualEditView = layout.wrap_form(MultilingualEditForm)
diff --git a/src/plone/app/multilingual/browser/helper_views.py b/src/plone/app/multilingual/browser/helper_views.py
index cc065bf..4b74b6d 100644
--- a/src/plone/app/multilingual/browser/helper_views.py
+++ b/src/plone/app/multilingual/browser/helper_views.py
@@ -211,7 +211,8 @@ def __call__(self):
             url = self.wrapDestination(url)
         else:
             registry = getUtility(IRegistry)
-            policies = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+            policies = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                             prefix="plone")
             if policies.selector_lookup_translations_policy == 'closest':
                 url = self.getClosestDestination()
             else:
diff --git a/src/plone/app/multilingual/browser/menu.py b/src/plone/app/multilingual/browser/menu.py
index d67ee05..f6493ed 100644
--- a/src/plone/app/multilingual/browser/menu.py
+++ b/src/plone/app/multilingual/browser/menu.py
@@ -45,12 +45,13 @@ def getMenuItems(self, context, request):
         showflags = lt.showFlags
         context_id = ITranslationManager(context).tg
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         edit_view = 'babel_edit' if settings.redirect_babel_view else 'edit'
         # In case is neutral language show set language menu only
         is_neutral_content = (
-            ILanguage(context).get_language() == LANGUAGE_INDEPENDENT
-            or is_language_independent(context)
+            ILanguage(context).get_language() == LANGUAGE_INDEPENDENT or
+            is_language_independent(context)
         )
 
         shared_folder_url = site_url + '/folder_contents'
diff --git a/src/plone/app/multilingual/browser/translate.py b/src/plone/app/multilingual/browser/translate.py
index 688c899..0114d99 100644
--- a/src/plone/app/multilingual/browser/translate.py
+++ b/src/plone/app/multilingual/browser/translate.py
@@ -55,7 +55,8 @@ def __call__(self):
         else:
             manager = ITranslationManager(self.context)
             registry = getUtility(IRegistry)
-            settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+            settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                             prefix="plone")
             lang_target = ILanguage(self.context).get_language()
             lang_source = self.request.form['lang_source']
             orig_object = manager.get_translation(lang_source)
diff --git a/src/plone/app/multilingual/browser/utils.py b/src/plone/app/multilingual/browser/utils.py
index 0ea5a24..a2d7523 100644
--- a/src/plone/app/multilingual/browser/utils.py
+++ b/src/plone/app/multilingual/browser/utils.py
@@ -56,7 +56,8 @@ def objToTranslate(self):
 
     def gtenabled(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         key = settings.google_translation_key
         return key is not None and len(key.strip()) > 0
 
@@ -128,8 +129,8 @@ def translated_languages(self):
                 None
             )
             context_language = ILanguage(context).get_language()
-            if (portal_factory is None
-                or not portal_factory.isTemporary(self.context)) \
+            if (portal_factory is None or
+                    not portal_factory.isTemporary(self.context)) \
                and lang_info['code'] == context_language:
                 continue
 
@@ -154,7 +155,8 @@ def current_language_name(self):
 
     def max_nr_of_buttons(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         return settings.buttons_babel_view_up_to_nr_translations
 
 
diff --git a/src/plone/app/multilingual/browser/vocabularies.py b/src/plone/app/multilingual/browser/vocabularies.py
index e1aa5e1..2b260ea 100644
--- a/src/plone/app/multilingual/browser/vocabularies.py
+++ b/src/plone/app/multilingual/browser/vocabularies.py
@@ -6,7 +6,6 @@
 from plone.app.vocabularies.catalog import CatalogVocabularyFactory
 from plone.i18n.locales.interfaces import ILanguageAvailability
 from zope.component import getGlobalSiteManager
-from zope.component.hooks import getSite
 from zope.interface import implementer
 from zope.interface import provider
 from zope.schema.interfaces import IContextSourceBinder
diff --git a/src/plone/app/multilingual/factory.py b/src/plone/app/multilingual/factory.py
index 02cd2b3..cb14eb9 100644
--- a/src/plone/app/multilingual/factory.py
+++ b/src/plone/app/multilingual/factory.py
@@ -39,8 +39,8 @@ def __call__(self, language):
         parent = aq_parent(self.context)
         translated_parent = parent
         found = False
-        while not (IPloneSiteRoot.providedBy(parent)
-                   and not ILanguageRootFolder.providedBy(parent))\
+        while not (IPloneSiteRoot.providedBy(parent) and
+                   not ILanguageRootFolder.providedBy(parent))\
                 and not found:
             parent_translation = ITranslationManager(parent)
             if parent_translation.has_translation(language):
diff --git a/src/plone/app/multilingual/manager.py b/src/plone/app/multilingual/manager.py
index c644c92..76022aa 100644
--- a/src/plone/app/multilingual/manager.py
+++ b/src/plone/app/multilingual/manager.py
@@ -16,8 +16,6 @@
 from zope.event import notify
 from zope.interface import implementer
 from zope.site.hooks import getSite
-from plone.protect.interfaces import IDisableCSRFProtection
-from zope.interface import alsoProvides
 
 
 @implementer(ITranslationManager)
diff --git a/src/plone/app/multilingual/subscriber.py b/src/plone/app/multilingual/subscriber.py
index d4eaa40..66ccf91 100644
--- a/src/plone/app/multilingual/subscriber.py
+++ b/src/plone/app/multilingual/subscriber.py
@@ -16,7 +16,6 @@
 from zope.globalrequest import getRequest
 from zope.lifecycleevent import modified
 from zope.lifecycleevent.interfaces import IObjectRemovedEvent
-from plone.browserlayer.utils import registered_layers
 from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 
 
@@ -160,11 +159,9 @@ def createdEvent(obj, event):
     # AT check
     portal = getSite()
     portal_factory = getToolByName(portal, 'portal_factory', None)
-    if (
-        not IDexterityContent.providedBy(obj)
-        and portal_factory is not None
-        and not portal_factory.isTemporary(obj)
-    ):
+    if (not IDexterityContent.providedBy(obj) and
+            portal_factory is not None and
+            not portal_factory.isTemporary(obj)):
         return
 
     IMutableTG(obj).set(ti['tg'])
diff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py
index 741d73a..876ac43 100644
--- a/src/plone/app/multilingual/testing.py
+++ b/src/plone/app/multilingual/testing.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from Testing import ZopeTestCase
 from email.header import Header
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
 from plone.app.multilingual.browser.setup import SetupMultilingualSite
@@ -256,6 +255,7 @@ def create_translation(self, *args, **kwargs):
 
 
 PAM_INTEGRATION_TESTING = PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING
-PAM_INTEGRATION_PRESET_TESTING = PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING
+PAM_INTEGRATION_PRESET_TESTING = \
+    PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING
 PAM_FUNCTIONAL_TESTING = PLONE_APP_MULTILINGUAL_FUNCTIONAL_TESTING
 PAM_ROBOT_TESTING = PLONE_APP_MULTILINGUAL_ROBOT_TESTING
diff --git a/src/plone/app/multilingual/tests/test_directives.py b/src/plone/app/multilingual/tests/test_directives.py
index 01abe67..492194c 100644
--- a/src/plone/app/multilingual/tests/test_directives.py
+++ b/src/plone/app/multilingual/tests/test_directives.py
@@ -7,8 +7,6 @@
 from zope import schema
 from zope.interface import Interface
 import unittest
-from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
-from zope.interface import alsoProvides
 
 
 class TestDirectives(unittest.TestCase):
diff --git a/src/plone/app/multilingual/tests/test_form.py b/src/plone/app/multilingual/tests/test_form.py
index 3b0302e..57e4529 100644
--- a/src/plone/app/multilingual/tests/test_form.py
+++ b/src/plone/app/multilingual/tests/test_form.py
@@ -92,9 +92,8 @@ def test_translation_can_be_unregistered(self):
         transaction.commit()
 
         # Create translation
-        self.browser.open(
-            a_ca.absolute_url()
-            + '/@@create_translation?language=en')
+        self.browser.open(a_ca.absolute_url() +
+                          '/@@create_translation?language=en')
 
         # Fill in translation details
         self.browser.getControl(
@@ -102,8 +101,8 @@ def test_translation_can_be_unregistered(self):
         self.browser.getControl(name="form.buttons.save").click()
 
         # Unregister translation
-        self.browser.open(a_ca.absolute_url()
-                          + '/remove_translations?set_language=en')
+        self.browser.open(a_ca.absolute_url() +
+                          '/remove_translations?set_language=en')
 
         self.portal._p_jar.sync()
 
@@ -171,9 +170,8 @@ def test_translation_can_be_removed_by_deleting(self):
         transaction.commit()
 
         # Translate content
-        self.browser.open(
-            a_ca.absolute_url()
-            + '/@@create_translation?language=en')
+        self.browser.open(a_ca.absolute_url() +
+                          '/@@create_translation?language=en')
 
         # Fill in translation details
         self.browser.getControl(
@@ -197,9 +195,8 @@ def test_folderish_content_can_be_translated(self):
 
         transaction.commit()
 
-        self.browser.open(
-            self.portal.absolute_url()
-            + '/ca/test-folder/@@create_translation?language=en')
+        self.browser.open(self.portal.absolute_url() +
+                          '/ca/test-folder/@@create_translation?language=en')
 
         self.browser.getControl(
             name="form.widgets.IDublinCore.title").value = u"Test folder"
@@ -219,9 +216,8 @@ def test_content_in_folders_can_be_translated(self):
 
         transaction.commit()
 
-        self.browser.open(
-            af_ca.absolute_url() + '/' + b_ca.id
-            + '/@@create_translation?language=en')
+        self.browser.open(af_ca.absolute_url() + '/' + b_ca.id +
+                          '/@@create_translation?language=en')
 
         self.browser.getControl(
             name="form.widgets.IDublinCore.title").value = u"Test folder"
diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py
index 991e0e1..92af4e0 100644
--- a/src/plone/app/multilingual/tests/test_selector.py
+++ b/src/plone/app/multilingual/tests/test_selector.py
@@ -163,14 +163,16 @@ def assertFullyTranslatedPages(self):
 
     def test_languages_fully_translated_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertFullyTranslatedPages()
 
     def test_languages_fully_translated_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertFullyTranslatedPages()
@@ -218,7 +220,8 @@ def setUpFullyTranslatedContent(self):
     def test_languages_untranslated_by_closest(self):
         # Define selector policy
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         wftool = getToolByName(self.portal, "portal_workflow")
@@ -253,7 +256,8 @@ def test_languages_untranslated_by_closest(self):
 
     def test_languages_partially_translated_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         # Setup content
@@ -295,7 +299,8 @@ def test_languages_partially_translated_by_closest(self):
 
     def test_languages_partially_translated_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         # Setup content
@@ -356,8 +361,8 @@ def assertSiteRoot(self):
         # Check EN root
         self.assertEqual(
             selector_languages[0]['url'],
-            (self.portal.absolute_url()
-             + '/@@multilingual-selector/notg/en?set_language=en')
+            (self.portal.absolute_url() +
+             '/@@multilingual-selector/notg/en?set_language=en')
         )
         self.browser.open(selector_languages[0]['url'])
         self.assertIn(
@@ -369,8 +374,8 @@ def assertSiteRoot(self):
         # Check CA root
         self.assertEqual(
             selector_languages[1]['url'],
-            (self.portal.absolute_url()
-             + '/@@multilingual-selector/notg/ca?set_language=ca')
+            (self.portal.absolute_url() +
+             '/@@multilingual-selector/notg/ca?set_language=ca')
         )
         self.browser.open(selector_languages[1]['url'])
         self.assertIn(
@@ -382,8 +387,8 @@ def assertSiteRoot(self):
         self.browser.open(selector_languages[2]['url'])
         self.assertEqual(
             selector_languages[2]['url'],
-            (self.portal.absolute_url()
-             + '/@@multilingual-selector/notg/es?set_language=es')
+            (self.portal.absolute_url() +
+             '/@@multilingual-selector/notg/es?set_language=es')
         )
         self.assertIn(
             u'lang="es"'.encode("utf-8"),
@@ -392,14 +397,16 @@ def assertSiteRoot(self):
 
     def test_siteroot_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertSiteRoot()
 
     def test_siteroot_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertSiteRoot()
@@ -489,21 +496,24 @@ def assertRootFolders(self):
 
     def test_languages_root_folders_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertRootFolders()
 
     def test_languages_root_folders_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertRootFolders()
 
     def test_languages_preserve_view(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.setUpPartiallyTranslatedContent()
@@ -557,7 +567,8 @@ def test_languages_preserve_view(self):
 
         # Shouldn't do for the not-translated-yet thingie when dialog is on
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         selector = LanguageSelectorViewlet(f_en, self.request, None, None)
@@ -620,11 +631,11 @@ def assertLanguagesPreserveQuery(self, policy):
 
         tgid = selector_languages[2]['url'].split('/')[-3]
         untranslated_url = {
-            'closest': (self.portal['es'].absolute_url()
-                        + '?int=1&uni=pres%C3%98rved&set_language=es'),
-            'dialog': (self.portal.absolute_url()
-                       + NOT_TRANSLATED_YET_TEMPLATE + '/' + tgid
-                       + '?int=1&uni=pres%C3%98rved&set_language=es')
+            'closest': (self.portal['es'].absolute_url() +
+                        '?int=1&uni=pres%C3%98rved&set_language=es'),
+            'dialog': (self.portal.absolute_url() +
+                       NOT_TRANSLATED_YET_TEMPLATE + '/' + tgid +
+                       '?int=1&uni=pres%C3%98rved&set_language=es')
         }
 
         transaction.commit()
@@ -633,8 +644,8 @@ def assertLanguagesPreserveQuery(self, policy):
         self.browser.open(selector_languages[0]['url'])
         self.assertEqual(
             self.browser.url,
-            (f_en.absolute_url()
-             + '/contact-info?int=1&uni=pres%C3%98rved&set_language=en')
+            (f_en.absolute_url() +
+             '/contact-info?int=1&uni=pres%C3%98rved&set_language=en')
         )
         self.assertIn(
             u'lang="en"'.encode("utf-8"),
@@ -646,8 +657,8 @@ def assertLanguagesPreserveQuery(self, policy):
         self.browser.open(selector_languages[1]['url'])
         self.assertEqual(
             self.browser.url,
-            (f_ca.absolute_url()
-             + '/contact-info?int=1&uni=pres%C3%98rved&set_language=ca')
+            (f_ca.absolute_url() +
+             '/contact-info?int=1&uni=pres%C3%98rved&set_language=ca')
         )
         self.assertIn(
             u'lang="ca"'.encode("utf-8"),
@@ -668,14 +679,16 @@ def assertLanguagesPreserveQuery(self, policy):
 
     def test_languages_preserve_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertLanguagesPreserveQuery('closest')
 
     def test_languages_preserve_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertLanguagesPreserveQuery('dialog')


Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-20T13:49:23+02:00
Author: Markus Hilbert (iham) <m.hilbert@akbild.ac.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/c183c7cb312076bfd5134906bbb82e2692fe762d

Fixed test-setup for multilingual pages.

Files changed:
M src/plone/app/multilingual/testing.py

diff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py
index 876ac43..203894d 100644
--- a/src/plone/app/multilingual/testing.py
+++ b/src/plone/app/multilingual/testing.py
@@ -135,21 +135,8 @@ def setUpPloneSite(self, portal):
 
 class MultipleLanguagesLayer(z2.Layer):
 
-    defaultBases = (PLONE_APP_MULTILINGUAL_FIXTURE,)
+    defaultBases = (PLONE_APP_MULTILINGUAL_PRESET_FIXTURE,)
 
-    def setUp(self):
-        with ploneSite() as portal:
-            # Define available languages
-            language_tool = getToolByName(portal, 'portal_languages')
-            language_tool.addSupportedLanguage('ca')
-            language_tool.addSupportedLanguage('es')
-
-            # Enable request negotiator
-            language_tool.use_request_negotiation = True
-
-            # Setup language root folders
-            setupTool = SetupMultilingualSite()
-            setupTool.setupSite(portal)
 
 MULTIPLE_LANGUAGES_LAYER = MultipleLanguagesLayer()
 


Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-20T15:51:21+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/9e27c47d98064d343633ab076d498d22c26554b4

Merge pull request #230 from plone/create-lang-folders-on-install

Create lang folders on install

Files changed:
M CHANGES.rst
M setup.py
M src/plone/app/multilingual/browser/add.py
M src/plone/app/multilingual/browser/controlpanel.py
M src/plone/app/multilingual/browser/edit.py
M src/plone/app/multilingual/browser/helper_views.py
M src/plone/app/multilingual/browser/menu.py
M src/plone/app/multilingual/browser/translate.py
M src/plone/app/multilingual/browser/utils.py
M src/plone/app/multilingual/browser/vocabularies.py
M src/plone/app/multilingual/configure.zcml
M src/plone/app/multilingual/factory.py
M src/plone/app/multilingual/manager.py
M src/plone/app/multilingual/setuphandlers.py
M src/plone/app/multilingual/subscriber.py
M src/plone/app/multilingual/testing.py
M src/plone/app/multilingual/tests/test_directives.py
M src/plone/app/multilingual/tests/test_form.py
M src/plone/app/multilingual/tests/test_selector.py
M src/plone/app/multilingual/tests/test_setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a80051d..accab9e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,11 +6,14 @@ Changelog
 
 Breaking changes:
 
-- *add item here*
+- No more compatible with GenericSetup below 1.8.2.
+  [iham]
 
 New features:
 
-- *add item here*
+- Creating language folder(s) on installation.
+  (fixes https://github.com/plone/plone.app.multilingual/issues/214)
+  [iham]
 
 Bug fixes:
 
@@ -25,7 +28,7 @@ Fixes:
 - Wait for visibility of select2 result, instead of time.
   [jensens]
 
-- Workaroud in robot test for TinyMCE overlap bug see 
+- Workaroud in robot test for TinyMCE overlap bug see
   https://github.com/plone/plone.app.multilingual/issues/227
   for details
   [jensens]
@@ -39,7 +42,7 @@ Fixes:
 - Fixed compatibility issue with archetypes contents: wrong URL were generated.
   [keul, hvelarde]
 
-- Really don't show the Google Translate button when no API key set 
+- Really don't show the Google Translate button when no API key set
   [djowett]
 
 
diff --git a/setup.py b/setup.py
index 2445b54..b39f9b4 100755
--- a/setup.py
+++ b/setup.py
@@ -1,11 +1,14 @@
-from setuptools import setup, find_packages
+"""Setup plone.app.multilingual."""
+
 import os
+from setuptools import setup, find_packages
+
 
-version = '3.0.18.dev0'
+VERSION = '3.0.18.dev0'
 
 setup(
     name='plone.app.multilingual',
-    version=version,
+    version=VERSION,
     description="Multilingual Plone UI package, enables maintenance of "
                 "translations for both Dexterity types and Archetypes",
     long_description="\n\n".join([
@@ -32,6 +35,7 @@
     zip_safe=False,
     install_requires=[
         'Products.CMFPlone>=5.0b1',
+        'Products.GenericSetup>=1.8.2',
         'archetypes.multilingual',
         'plone.app.registry',
         'plone.app.z3cform',
diff --git a/src/plone/app/multilingual/browser/add.py b/src/plone/app/multilingual/browser/add.py
index 269c54f..2abab08 100644
--- a/src/plone/app/multilingual/browser/add.py
+++ b/src/plone/app/multilingual/browser/add.py
@@ -71,7 +71,8 @@ def traverse(self, name, ignored):
         if not IDexterityContent.providedBy(source):
             # we are not on DX content, assume AT
             baseUrl = self.context.absolute_url()
-            url = '%s/@@add_at_translation?type=%s' % (baseUrl, source.portal_type)
+            url = '%s/@@add_at_translation?type=%s' % (baseUrl,
+                                                       source.portal_type)
             return self.request.response.redirect(url)
 
         # set the self.context to the place where it should be stored
@@ -89,7 +90,8 @@ def traverse(self, name, ignored):
             raise TraversalError(self.context, name)
 
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
 
         if not settings.redirect_babel_view:
             add_view = None
@@ -134,7 +136,8 @@ def render(self):
     @property
     def max_nr_of_buttons(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         return settings.buttons_babel_view_up_to_nr_translations
 
     def _process_language_independent(self, fields, widgets):
diff --git a/src/plone/app/multilingual/browser/controlpanel.py b/src/plone/app/multilingual/browser/controlpanel.py
index 775e133..ed607f8 100644
--- a/src/plone/app/multilingual/browser/controlpanel.py
+++ b/src/plone/app/multilingual/browser/controlpanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _Plone
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-from Products.CMFPlone.controlpanel.browser.language import LanguageControlPanelForm
+from Products.CMFPlone.controlpanel.browser.language import \
+    LanguageControlPanelForm
 from plone.app.registry.browser import controlpanel
 
 from plone.app.multilingual import isLPinstalled
diff --git a/src/plone/app/multilingual/browser/edit.py b/src/plone/app/multilingual/browser/edit.py
index 6fb190e..96c0c32 100644
--- a/src/plone/app/multilingual/browser/edit.py
+++ b/src/plone/app/multilingual/browser/edit.py
@@ -84,7 +84,8 @@ def render(self):
     @property
     def max_nr_of_buttons(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         return settings.buttons_babel_view_up_to_nr_translations
 
 DefaultMultilingualEditView = layout.wrap_form(MultilingualEditForm)
diff --git a/src/plone/app/multilingual/browser/helper_views.py b/src/plone/app/multilingual/browser/helper_views.py
index cc065bf..4b74b6d 100644
--- a/src/plone/app/multilingual/browser/helper_views.py
+++ b/src/plone/app/multilingual/browser/helper_views.py
@@ -211,7 +211,8 @@ def __call__(self):
             url = self.wrapDestination(url)
         else:
             registry = getUtility(IRegistry)
-            policies = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+            policies = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                             prefix="plone")
             if policies.selector_lookup_translations_policy == 'closest':
                 url = self.getClosestDestination()
             else:
diff --git a/src/plone/app/multilingual/browser/menu.py b/src/plone/app/multilingual/browser/menu.py
index d67ee05..f6493ed 100644
--- a/src/plone/app/multilingual/browser/menu.py
+++ b/src/plone/app/multilingual/browser/menu.py
@@ -45,12 +45,13 @@ def getMenuItems(self, context, request):
         showflags = lt.showFlags
         context_id = ITranslationManager(context).tg
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         edit_view = 'babel_edit' if settings.redirect_babel_view else 'edit'
         # In case is neutral language show set language menu only
         is_neutral_content = (
-            ILanguage(context).get_language() == LANGUAGE_INDEPENDENT
-            or is_language_independent(context)
+            ILanguage(context).get_language() == LANGUAGE_INDEPENDENT or
+            is_language_independent(context)
         )
 
         shared_folder_url = site_url + '/folder_contents'
diff --git a/src/plone/app/multilingual/browser/translate.py b/src/plone/app/multilingual/browser/translate.py
index 688c899..0114d99 100644
--- a/src/plone/app/multilingual/browser/translate.py
+++ b/src/plone/app/multilingual/browser/translate.py
@@ -55,7 +55,8 @@ def __call__(self):
         else:
             manager = ITranslationManager(self.context)
             registry = getUtility(IRegistry)
-            settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+            settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                             prefix="plone")
             lang_target = ILanguage(self.context).get_language()
             lang_source = self.request.form['lang_source']
             orig_object = manager.get_translation(lang_source)
diff --git a/src/plone/app/multilingual/browser/utils.py b/src/plone/app/multilingual/browser/utils.py
index 0ea5a24..a2d7523 100644
--- a/src/plone/app/multilingual/browser/utils.py
+++ b/src/plone/app/multilingual/browser/utils.py
@@ -56,7 +56,8 @@ def objToTranslate(self):
 
     def gtenabled(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         key = settings.google_translation_key
         return key is not None and len(key.strip()) > 0
 
@@ -128,8 +129,8 @@ def translated_languages(self):
                 None
             )
             context_language = ILanguage(context).get_language()
-            if (portal_factory is None
-                or not portal_factory.isTemporary(self.context)) \
+            if (portal_factory is None or
+                    not portal_factory.isTemporary(self.context)) \
                and lang_info['code'] == context_language:
                 continue
 
@@ -154,7 +155,8 @@ def current_language_name(self):
 
     def max_nr_of_buttons(self):
         registry = getUtility(IRegistry)
-        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        settings = registry.forInterface(IMultiLanguageExtraOptionsSchema,
+                                         prefix="plone")
         return settings.buttons_babel_view_up_to_nr_translations
 
 
diff --git a/src/plone/app/multilingual/browser/vocabularies.py b/src/plone/app/multilingual/browser/vocabularies.py
index e1aa5e1..2b260ea 100644
--- a/src/plone/app/multilingual/browser/vocabularies.py
+++ b/src/plone/app/multilingual/browser/vocabularies.py
@@ -6,7 +6,6 @@
 from plone.app.vocabularies.catalog import CatalogVocabularyFactory
 from plone.i18n.locales.interfaces import ILanguageAvailability
 from zope.component import getGlobalSiteManager
-from zope.component.hooks import getSite
 from zope.interface import implementer
 from zope.interface import provider
 from zope.schema.interfaces import IContextSourceBinder
diff --git a/src/plone/app/multilingual/configure.zcml b/src/plone/app/multilingual/configure.zcml
index 703e6c6..9a26917 100644
--- a/src/plone/app/multilingual/configure.zcml
+++ b/src/plone/app/multilingual/configure.zcml
@@ -147,7 +147,8 @@
       description="Install to enable multilingual content support"
       directory="profiles/default"
       provides="Products.GenericSetup.interfaces.EXTENSION"
-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"/>
+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"
+      post_handler=".setuphandlers.init_pam"/>
 
   <genericsetup:registerProfile
       name="uninstall"
diff --git a/src/plone/app/multilingual/factory.py b/src/plone/app/multilingual/factory.py
index 02cd2b3..cb14eb9 100644
--- a/src/plone/app/multilingual/factory.py
+++ b/src/plone/app/multilingual/factory.py
@@ -39,8 +39,8 @@ def __call__(self, language):
         parent = aq_parent(self.context)
         translated_parent = parent
         found = False
-        while not (IPloneSiteRoot.providedBy(parent)
-                   and not ILanguageRootFolder.providedBy(parent))\
+        while not (IPloneSiteRoot.providedBy(parent) and
+                   not ILanguageRootFolder.providedBy(parent))\
                 and not found:
             parent_translation = ITranslationManager(parent)
             if parent_translation.has_translation(language):
diff --git a/src/plone/app/multilingual/manager.py b/src/plone/app/multilingual/manager.py
index c644c92..76022aa 100644
--- a/src/plone/app/multilingual/manager.py
+++ b/src/plone/app/multilingual/manager.py
@@ -16,8 +16,6 @@
 from zope.event import notify
 from zope.interface import implementer
 from zope.site.hooks import getSite
-from plone.protect.interfaces import IDisableCSRFProtection
-from zope.interface import alsoProvides
 
 
 @implementer(ITranslationManager)
diff --git a/src/plone/app/multilingual/setuphandlers.py b/src/plone/app/multilingual/setuphandlers.py
index 26798c5..9032fd4 100644
--- a/src/plone/app/multilingual/setuphandlers.py
+++ b/src/plone/app/multilingual/setuphandlers.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
+from plone.api import portal
 from Products.CMFPlone.interfaces import INonInstallable
+from plone.app.multilingual.browser.setup import SetupMultilingualSite
 from zope.interface import implementer
 import pkg_resources
 
@@ -24,6 +26,12 @@ def getNonInstallableProfiles(self):
         ]
 
 
+def init_pam(tool):
+    """After installation run setup to create LRF and LIF."""
+    setup_tool = SetupMultilingualSite()
+    setup_tool.setupSite(portal.get())
+
+
 def step_default_various(context):
     if context.readDataFile('plone.app.multilingual_default.txt') is None:
         return
diff --git a/src/plone/app/multilingual/subscriber.py b/src/plone/app/multilingual/subscriber.py
index d4eaa40..66ccf91 100644
--- a/src/plone/app/multilingual/subscriber.py
+++ b/src/plone/app/multilingual/subscriber.py
@@ -16,7 +16,6 @@
 from zope.globalrequest import getRequest
 from zope.lifecycleevent import modified
 from zope.lifecycleevent.interfaces import IObjectRemovedEvent
-from plone.browserlayer.utils import registered_layers
 from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 
 
@@ -160,11 +159,9 @@ def createdEvent(obj, event):
     # AT check
     portal = getSite()
     portal_factory = getToolByName(portal, 'portal_factory', None)
-    if (
-        not IDexterityContent.providedBy(obj)
-        and portal_factory is not None
-        and not portal_factory.isTemporary(obj)
-    ):
+    if (not IDexterityContent.providedBy(obj) and
+            portal_factory is not None and
+            not portal_factory.isTemporary(obj)):
         return
 
     IMutableTG(obj).set(ti['tg'])
diff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py
index 2ef49c1..203894d 100644
--- a/src/plone/app/multilingual/testing.py
+++ b/src/plone/app/multilingual/testing.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 from Products.CMFCore.utils import getToolByName
-from Testing import ZopeTestCase
 from email.header import Header
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
 from plone.app.multilingual.browser.setup import SetupMultilingualSite
@@ -81,23 +80,63 @@ def setUpPloneSite(self, portal):
     name="plone.app.multilingual:Integration")
 
 
-class MultipleLanguagesLayer(z2.Layer):
+class PloneAppMultiLingualPresetLayer(PloneSandboxLayer):
+    """Test installation with preset languages."""
+
+    defaultBases = (PLONE_APP_CONTENTTYPES_FIXTURE,)
+
+    def setUpZope(self, app, configurationContext):
+        # Configure ZCML
+        xmlconfig.file('testing.zcml', plone.app.multilingual,
+                       context=configurationContext)
+
+        xmlconfig.file('overrides.zcml', plone.app.multilingual,
+                       context=configurationContext)
+
+        # Enable languageindependent-field on IRelatedItems-behavior
+        from plone.app.relationfield.behavior import IRelatedItems
+        alsoProvides(IRelatedItems['relatedItems'], ILanguageIndependentField)
 
-    defaultBases = (PLONE_APP_MULTILINGUAL_FIXTURE,)
+    def setUpPloneSite(self, portal):
+        # Define available languages before installing PAM
+        # This simulates the behavior of having predefined languages
+        # in GenericSetup before installing PAM
+        language_tool = getToolByName(portal, 'portal_languages')
+        language_tool.addSupportedLanguage('ca')
+        language_tool.addSupportedLanguage('es')
+
+        # Enable request negotiator
+        language_tool.use_request_negotiation = True
+
+        # Activate product
+        applyProfile(portal, 'plone.app.multilingual:default')
 
-    def setUp(self):
-        with ploneSite() as portal:
-            # Define available languages
-            language_tool = getToolByName(portal, 'portal_languages')
-            language_tool.addSupportedLanguage('ca')
-            language_tool.addSupportedLanguage('es')
+        # Empower test user
+        setRoles(portal, TEST_USER_ID, ['Manager'])
+
+        # Enable all errors
+        error_log = getToolByName(portal, 'error_log')
+        error_log._ignored_exceptions = ()
+
+        # Set default workflow
+        wftool = getToolByName(portal, 'portal_workflow')
+        wftool.setDefaultChain('simple_publication_workflow')
+
+        # Cleanup p.a.contenttypes stuff
+        if 'robot-test-folder' in portal.objectIds():
+            portal.manage_delObjects('robot-test-folder')
+
+PLONE_APP_MULTILINGUAL_PRESET_FIXTURE = PloneAppMultiLingualPresetLayer()
+
+PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(PLONE_APP_MULTILINGUAL_PRESET_FIXTURE,),
+    name="plone.app.multilingual:PresetIntegration")
+
+
+class MultipleLanguagesLayer(z2.Layer):
 
-            # Enable request negotiator
-            language_tool.use_request_negotiation = True
+    defaultBases = (PLONE_APP_MULTILINGUAL_PRESET_FIXTURE,)
 
-            # Setup language root folders
-            setupTool = SetupMultilingualSite()
-            setupTool.setupSite(portal)
 
 MULTIPLE_LANGUAGES_LAYER = MultipleLanguagesLayer()
 
@@ -203,5 +242,7 @@ def create_translation(self, *args, **kwargs):
 
 
 PAM_INTEGRATION_TESTING = PLONE_APP_MULTILINGUAL_INTEGRATION_TESTING
+PAM_INTEGRATION_PRESET_TESTING = \
+    PLONE_APP_MULTILINGUAL_PRESET_INTEGRATION_TESTING
 PAM_FUNCTIONAL_TESTING = PLONE_APP_MULTILINGUAL_FUNCTIONAL_TESTING
 PAM_ROBOT_TESTING = PLONE_APP_MULTILINGUAL_ROBOT_TESTING
diff --git a/src/plone/app/multilingual/tests/test_directives.py b/src/plone/app/multilingual/tests/test_directives.py
index 01abe67..492194c 100644
--- a/src/plone/app/multilingual/tests/test_directives.py
+++ b/src/plone/app/multilingual/tests/test_directives.py
@@ -7,8 +7,6 @@
 from zope import schema
 from zope.interface import Interface
 import unittest
-from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
-from zope.interface import alsoProvides
 
 
 class TestDirectives(unittest.TestCase):
diff --git a/src/plone/app/multilingual/tests/test_form.py b/src/plone/app/multilingual/tests/test_form.py
index 3b0302e..57e4529 100644
--- a/src/plone/app/multilingual/tests/test_form.py
+++ b/src/plone/app/multilingual/tests/test_form.py
@@ -92,9 +92,8 @@ def test_translation_can_be_unregistered(self):
         transaction.commit()
 
         # Create translation
-        self.browser.open(
-            a_ca.absolute_url()
-            + '/@@create_translation?language=en')
+        self.browser.open(a_ca.absolute_url() +
+                          '/@@create_translation?language=en')
 
         # Fill in translation details
         self.browser.getControl(
@@ -102,8 +101,8 @@ def test_translation_can_be_unregistered(self):
         self.browser.getControl(name="form.buttons.save").click()
 
         # Unregister translation
-        self.browser.open(a_ca.absolute_url()
-                          + '/remove_translations?set_language=en')
+        self.browser.open(a_ca.absolute_url() +
+                          '/remove_translations?set_language=en')
 
         self.portal._p_jar.sync()
 
@@ -171,9 +170,8 @@ def test_translation_can_be_removed_by_deleting(self):
         transaction.commit()
 
         # Translate content
-        self.browser.open(
-            a_ca.absolute_url()
-            + '/@@create_translation?language=en')
+        self.browser.open(a_ca.absolute_url() +
+                          '/@@create_translation?language=en')
 
         # Fill in translation details
         self.browser.getControl(
@@ -197,9 +195,8 @@ def test_folderish_content_can_be_translated(self):
 
         transaction.commit()
 
-        self.browser.open(
-            self.portal.absolute_url()
-            + '/ca/test-folder/@@create_translation?language=en')
+        self.browser.open(self.portal.absolute_url() +
+                          '/ca/test-folder/@@create_translation?language=en')
 
         self.browser.getControl(
             name="form.widgets.IDublinCore.title").value = u"Test folder"
@@ -219,9 +216,8 @@ def test_content_in_folders_can_be_translated(self):
 
         transaction.commit()
 
-        self.browser.open(
-            af_ca.absolute_url() + '/' + b_ca.id
-            + '/@@create_translation?language=en')
+        self.browser.open(af_ca.absolute_url() + '/' + b_ca.id +
+                          '/@@create_translation?language=en')
 
         self.browser.getControl(
             name="form.widgets.IDublinCore.title").value = u"Test folder"
diff --git a/src/plone/app/multilingual/tests/test_selector.py b/src/plone/app/multilingual/tests/test_selector.py
index 991e0e1..92af4e0 100644
--- a/src/plone/app/multilingual/tests/test_selector.py
+++ b/src/plone/app/multilingual/tests/test_selector.py
@@ -163,14 +163,16 @@ def assertFullyTranslatedPages(self):
 
     def test_languages_fully_translated_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertFullyTranslatedPages()
 
     def test_languages_fully_translated_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertFullyTranslatedPages()
@@ -218,7 +220,8 @@ def setUpFullyTranslatedContent(self):
     def test_languages_untranslated_by_closest(self):
         # Define selector policy
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         wftool = getToolByName(self.portal, "portal_workflow")
@@ -253,7 +256,8 @@ def test_languages_untranslated_by_closest(self):
 
     def test_languages_partially_translated_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         # Setup content
@@ -295,7 +299,8 @@ def test_languages_partially_translated_by_closest(self):
 
     def test_languages_partially_translated_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         # Setup content
@@ -356,8 +361,8 @@ def assertSiteRoot(self):
         # Check EN root
         self.assertEqual(
             selector_languages[0]['url'],
-            (self.portal.absolute_url()
-             + '/@@multilingual-selector/notg/en?set_language=en')
+            (self.portal.absolute_url() +
+             '/@@multilingual-selector/notg/en?set_language=en')
         )
         self.browser.open(selector_languages[0]['url'])
         self.assertIn(
@@ -369,8 +374,8 @@ def assertSiteRoot(self):
         # Check CA root
         self.assertEqual(
             selector_languages[1]['url'],
-            (self.portal.absolute_url()
-             + '/@@multilingual-selector/notg/ca?set_language=ca')
+            (self.portal.absolute_url() +
+             '/@@multilingual-selector/notg/ca?set_language=ca')
         )
         self.browser.open(selector_languages[1]['url'])
         self.assertIn(
@@ -382,8 +387,8 @@ def assertSiteRoot(self):
         self.browser.open(selector_languages[2]['url'])
         self.assertEqual(
             selector_languages[2]['url'],
-            (self.portal.absolute_url()
-             + '/@@multilingual-selector/notg/es?set_language=es')
+            (self.portal.absolute_url() +
+             '/@@multilingual-selector/notg/es?set_language=es')
         )
         self.assertIn(
             u'lang="es"'.encode("utf-8"),
@@ -392,14 +397,16 @@ def assertSiteRoot(self):
 
     def test_siteroot_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertSiteRoot()
 
     def test_siteroot_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertSiteRoot()
@@ -489,21 +496,24 @@ def assertRootFolders(self):
 
     def test_languages_root_folders_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertRootFolders()
 
     def test_languages_root_folders_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertRootFolders()
 
     def test_languages_preserve_view(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.setUpPartiallyTranslatedContent()
@@ -557,7 +567,8 @@ def test_languages_preserve_view(self):
 
         # Shouldn't do for the not-translated-yet thingie when dialog is on
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         selector = LanguageSelectorViewlet(f_en, self.request, None, None)
@@ -620,11 +631,11 @@ def assertLanguagesPreserveQuery(self, policy):
 
         tgid = selector_languages[2]['url'].split('/')[-3]
         untranslated_url = {
-            'closest': (self.portal['es'].absolute_url()
-                        + '?int=1&uni=pres%C3%98rved&set_language=es'),
-            'dialog': (self.portal.absolute_url()
-                       + NOT_TRANSLATED_YET_TEMPLATE + '/' + tgid
-                       + '?int=1&uni=pres%C3%98rved&set_language=es')
+            'closest': (self.portal['es'].absolute_url() +
+                        '?int=1&uni=pres%C3%98rved&set_language=es'),
+            'dialog': (self.portal.absolute_url() +
+                       NOT_TRANSLATED_YET_TEMPLATE + '/' + tgid +
+                       '?int=1&uni=pres%C3%98rved&set_language=es')
         }
 
         transaction.commit()
@@ -633,8 +644,8 @@ def assertLanguagesPreserveQuery(self, policy):
         self.browser.open(selector_languages[0]['url'])
         self.assertEqual(
             self.browser.url,
-            (f_en.absolute_url()
-             + '/contact-info?int=1&uni=pres%C3%98rved&set_language=en')
+            (f_en.absolute_url() +
+             '/contact-info?int=1&uni=pres%C3%98rved&set_language=en')
         )
         self.assertIn(
             u'lang="en"'.encode("utf-8"),
@@ -646,8 +657,8 @@ def assertLanguagesPreserveQuery(self, policy):
         self.browser.open(selector_languages[1]['url'])
         self.assertEqual(
             self.browser.url,
-            (f_ca.absolute_url()
-             + '/contact-info?int=1&uni=pres%C3%98rved&set_language=ca')
+            (f_ca.absolute_url() +
+             '/contact-info?int=1&uni=pres%C3%98rved&set_language=ca')
         )
         self.assertIn(
             u'lang="ca"'.encode("utf-8"),
@@ -668,14 +679,16 @@ def assertLanguagesPreserveQuery(self, policy):
 
     def test_languages_preserve_by_closest(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'closest'
 
         self.assertLanguagesPreserveQuery('closest')
 
     def test_languages_preserve_by_dialog(self):
         self.registry = getUtility(IRegistry)
-        self.settings = self.registry.forInterface(IMultiLanguageExtraOptionsSchema, prefix="plone")
+        self.settings = self.registry.forInterface(
+            IMultiLanguageExtraOptionsSchema, prefix="plone")
         self.settings.selector_lookup_translations_policy = 'dialog'
 
         self.assertLanguagesPreserveQuery('dialog')
diff --git a/src/plone/app/multilingual/tests/test_setup.py b/src/plone/app/multilingual/tests/test_setup.py
index 65556d4..ca0aeb4 100644
--- a/src/plone/app/multilingual/tests/test_setup.py
+++ b/src/plone/app/multilingual/tests/test_setup.py
@@ -1,39 +1,105 @@
 # -*- coding: utf-8 -*-
+import unittest2 as unittest
+from zope.interface import alsoProvides
+
 from Products.CMFCore.utils import getToolByName
+
 from plone.app.multilingual.browser.setup import SetupMultilingualSite
+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 from plone.app.multilingual.browser.vocabularies import\
     AllContentLanguageVocabulary
-from plone.app.multilingual.testing import PAM_INTEGRATION_TESTING
-import unittest2 as unittest
-from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
-from zope.interface import alsoProvides
+from plone.app.multilingual.testing import (PAM_INTEGRATION_TESTING,
+                                            PAM_INTEGRATION_PRESET_TESTING)
 
 
 class TestSetupMultilingualSite(unittest.TestCase):
+    """Testing multilingual site without predefined languages."""
 
     layer = PAM_INTEGRATION_TESTING
 
     def setUp(self):
+        """Setting up the test."""
         self.portal = self.layer['portal']
         self.request = self.layer['request']
+        self.language_tool = getToolByName(self.portal, 'portal_languages')
+        self.languages = self.language_tool.getSupportedLanguages()
         alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)
 
-    def test_add_all_supported_languages(self):
-        """There was a language which code is 'id' and it broke the root
-        language folder setup process
+    def test_single_language(self):
+        """Only one language is set."""
+        self.assertEqual(len(self.languages), 1)
+
+    def test_no_languagefolder_created(self):
+        """On a single language no folder creation is done."""
+        portal_objects = self.portal.objectIds()
+        for lang in self.languages:
+            self.assertNotIn(lang, portal_objects)
+
+    def test_all_supported_languages(self):
+        """There was a language which code is 'id'.
+        This broke the root language folder setup process.
+        To get rid of that the folder is 'id-id'.
         """
-        language_tool = getToolByName(self.portal, 'portal_languages')
-        for lang in AllContentLanguageVocabulary()(self.portal):
-            language_tool.addSupportedLanguage(lang.value)
+        all_langs = AllContentLanguageVocabulary()(self.portal)
+        for lang in all_langs:
+            self.language_tool.addSupportedLanguage(lang.value)
+
+        workflow_tool = getToolByName(self.portal, "portal_workflow")
+        workflow_tool.setDefaultChain('simple_publication_workflow')
 
-        workflowTool = getToolByName(self.portal, "portal_workflow")
-        workflowTool.setDefaultChain('simple_publication_workflow')
+        setup_tool = SetupMultilingualSite()
+        setup_tool.setupSite(self.portal)
 
-        setupTool = SetupMultilingualSite()
-        setupTool.setupSite(self.portal)
+        portal_objects = self.portal.objectIds()
 
-        for lang in AllContentLanguageVocabulary()(self.portal):
-            if lang.value == 'id':
-                self.assertIn('id-id', self.portal.objectIds())
+        for lang in all_langs.by_value.keys():
+            if lang == 'id':
+                self.assertIn('id-id', portal_objects)
             else:
-                self.assertIn(lang.value, self.portal.objectIds())
+                self.assertIn(lang, portal_objects)
+
+    def test_type_of_language_folders(self):
+        """The created objects have to be 'Language Root Folder'."""
+        all_langs = AllContentLanguageVocabulary()(self.portal)
+        for lang in all_langs:
+            self.language_tool.addSupportedLanguage(lang.value)
+
+        workflow_tool = getToolByName(self.portal, "portal_workflow")
+        workflow_tool.setDefaultChain('simple_publication_workflow')
+
+        setup_tool = SetupMultilingualSite()
+        setup_tool.setupSite(self.portal)
+
+        for lang in all_langs.by_value.keys():
+            if lang == 'id':
+                self.assertEqual(self.portal.get('id-id').portal_type, 'LRF')
+            else:
+                self.assertEqual(self.portal.get(lang).portal_type, 'LRF')
+
+
+class TestSetupMultilingualPresetSite(unittest.TestCase):
+    """Testing multilingual site with predefined languages."""
+
+    layer = PAM_INTEGRATION_PRESET_TESTING
+
+    def setUp(self):
+        """Setting up the test."""
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        self.language_tool = getToolByName(self.portal, 'portal_languages')
+        self.languages = self.language_tool.getSupportedLanguages()
+        alsoProvides(self.layer['request'], IPloneAppMultilingualInstalled)
+
+    def test_language_folders_created(self):
+        """Available languages are: 'en', 'ca', 'es'.
+        After setup has run there should be
+        new objects in the portal named after the languages.
+        """
+        portal_objects = self.portal.objectIds()
+        for lang in self.languages:
+            self.assertIn(lang, portal_objects)
+
+    def test_type_of_language_folders(self):
+        """The created objects have to be 'Language Root Folder'."""
+        for lang in self.languages:
+            self.assertEqual(self.portal.get(lang).portal_type, 'LRF')


