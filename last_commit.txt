Repository: plone.portlets


Branch: refs/heads/master
Date: 2016-10-23T15:02:40-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.portlets/commit/ec30810b6be108d4deb69585ab1b35c87d8e6838

support python 3

Files changed:
A tox.ini
M .gitignore
M CHANGES.rst
M plone/portlets/README.txt
M plone/portlets/manager.py
M plone/portlets/storage.py
M plone/portlets/tests.py
M plone/portlets/uisupport.txt
M plone/portlets/utils.py
M plone/portlets/utils.txt
M setup.py

diff --git a/.gitignore b/.gitignore
index 350b1c5..d43c05f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 *.egg-info
 *.pyc
 *.pyo
+.tox
diff --git a/CHANGES.rst b/CHANGES.rst
index a4855e7..498d801 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,7 @@ Breaking changes:
 New features:
 
 - *add item here*
+- Support Python 3. [davisagli]
 
 Bug fixes:
 
diff --git a/plone/portlets/README.txt b/plone/portlets/README.txt
index c3296f1..873358f 100644
--- a/plone/portlets/README.txt
+++ b/plone/portlets/README.txt
@@ -77,8 +77,8 @@ is obviously not a realistic implementation (since it is non-persistent and
 instance-specific). The environment also represents the current user and
 that user's groups.
 
-  >>> from zope.interface import implements, Interface, directlyProvides
-  >>> from zope.component import adapts, provideAdapter
+  >>> from zope.interface import implementer, Interface, directlyProvides
+  >>> from zope.component import adapter, provideAdapter
 
   >>> from zope import schema
 
@@ -97,14 +97,14 @@ that user's groups.
   >>> class ITestGroup(Interface):
   ...     id = schema.TextLine(title=u'Group id')
 
-  >>> class TestUser(object):
-  ...     implements(ITestUser)
+  >>> @implementer(ITestUser)
+  ... class TestUser(object):
   ...     def __init__(self, id, groups):
   ...         self.id = id
   ...         self.groups = groups
 
-  >>> class TestGroup(object):
-  ...     implements(ITestGroup)
+  >>> @implementer(ITestGroup)
+  ... class TestGroup(object):
   ...     def __init__(self, id):
   ...         self.id = id
 
@@ -137,9 +137,9 @@ the order in which portlets are rendered.
   >>> from plone.portlets.constants import GROUP_CATEGORY
   >>> from plone.portlets.constants import CONTENT_TYPE_CATEGORY
 
-  >>> class TestPortletContext(object):
-  ...     implements(IPortletContext)
-  ...     adapts(Interface)
+  >>> @implementer(IPortletContext)
+  ... @adapter(Interface)
+  ... class TestPortletContext(object):
   ...
   ...     def __init__(self, context):
   ...         self.context = context
@@ -172,8 +172,8 @@ portlet context will work for all of them.
   ...     text = schema.TextLine(title=u"Text to render")
   >>> ITestDocument._content_iface = True
 
-  >>> class TestDocument(object):
-  ...     implements(ITestDocument)
+  >>> @implementer(ITestDocument)
+  ... class TestDocument(object):
   ...
   ...     def __init__(self, text=u''):
   ...         self.__name__ = None
@@ -227,7 +227,7 @@ We should now be able to get this via a provider: expression:
   >>> import os, tempfile
   >>> tempDir = tempfile.mkdtemp()
   >>> templateFileName = os.path.join(tempDir, 'template.pt')
-  >>> open(templateFileName, 'w').write("""
+  >>> _ = open(templateFileName, 'w').write("""
   ... <html>
   ...   <body>
   ...     <div class="left-column">
@@ -246,8 +246,8 @@ We register the template as a view for all objects.
   >>> from zope.publisher.interfaces.browser import IBrowserRequest
   >>> from zope.publisher.browser import BrowserPage
   >>> from zope.browserpage import ViewPageTemplateFile
-  >>> class TestPage(BrowserPage):
-  ...     adapts(Interface, IBrowserRequest)
+  >>> @adapter(Interface, IBrowserRequest)
+  ... class TestPage(BrowserPage):
   ...     __call__ = ViewPageTemplateFile(templateFileName)
   >>> provideAdapter(TestPage, provides=IBrowserPage, name='main.html')
 
@@ -268,7 +268,7 @@ For our memoised views to work, we need to make the request annotatable
 
   >>> from zope.component import getMultiAdapter
   >>> view = getMultiAdapter((doc1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -316,8 +316,8 @@ external object.
   >>> class ILoginPortlet(IPortletDataProvider):
   ...   pass
 
-  >>> class LoginPortletAssignment(Persistent, Contained):
-  ...     implements(IPortletAssignment, ILoginPortlet)
+  >>> @implementer(IPortletAssignment, ILoginPortlet)
+  ... class LoginPortletAssignment(Persistent, Contained):
   ...
   ...     @property
   ...     def available(self):
@@ -327,10 +327,9 @@ external object.
   ...     def data(self):
   ...         return self
 
-  >>> class LoginPortletRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, ILoginPortlet)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, ILoginPortlet)
+  ... class LoginPortletRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -353,8 +352,8 @@ as the ITestContent interface is already available.
 Notice that the assignment type is generic here, relying on the contrived UID
 that the portlet context also relies upon.
 
-  >>> class UIDPortletAssignment(Persistent, Contained):
-  ...     implements(IPortletAssignment)
+  >>> @implementer(IPortletAssignment)
+  ... class UIDPortletAssignment(Persistent, Contained):
   ...
   ...     def __init__(self, obj):
   ...         self.uid = id(obj)
@@ -367,10 +366,9 @@ that the portlet context also relies upon.
   ...     def data(self):
   ...          return __uids__[self.uid]
 
-  >>> class DocumentPortletRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, ITestDocument)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, ITestDocument)
+  ... class DocumentPortletRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -463,7 +461,7 @@ We can also re-order assignments:
 If we now render the view, we should see our newly assigned portlets.
 
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -481,7 +479,7 @@ property was false (the current user is not the anonymous user). Let's
 
   >>> __current_user__ = Anonymous
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -500,18 +498,17 @@ writing a bit easier:
   >>> class IDummyPortlet(IPortletDataProvider):
   ...   text = schema.TextLine(title=u'Text to render')
 
-  >>> class DummyPortlet(Persistent, Contained):
-  ...     implements(IPortletAssignment, IDummyPortlet)
+  >>> @implementer(IPortletAssignment, IDummyPortlet)
+  ... class DummyPortlet(Persistent, Contained):
   ...
   ...     def __init__(self, text, available=True):
   ...         self.text = text
   ...         self.available = available
   ...     data = property(lambda self: self)
 
-  >>> class DummyPortletRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, IDummyPortlet)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, IDummyPortlet)
+  ... class DummyPortletRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -537,7 +534,7 @@ Let's assign a portlet in a sub-folder of the root folder.
 This assignment does not affect rendering at the root folder:
 
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -554,7 +551,7 @@ It does, however, affect rendering at 'child1' (and any of its children).
 Notice also that by default, child portlets come before parent portlets.
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -604,7 +601,7 @@ above.
 These will now be rendered as expected.
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -621,7 +618,7 @@ These will now be rendered as expected.
 
   >>> __current_user__ = user1
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -652,7 +649,7 @@ portlets to users - we simply use a different category.
   >>> saveAssignment(left[GROUP_CATEGORY][group2.id], groupPortlet2)
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -687,7 +684,7 @@ category) or None (let the parent decide).
   True
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -707,7 +704,7 @@ The status is inherited from a parent unless a child also sets a status:
   >>> leftAtRootManager = getMultiAdapter((rootFolder, left), ILocalPortletAssignmentManager)
   >>> leftAtRootManager.setBlacklistStatus(GROUP_CATEGORY, True)
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -722,7 +719,7 @@ The status is inherited from a parent unless a child also sets a status:
 
   >>> leftAtChild1Manager.setBlacklistStatus(GROUP_CATEGORY, False)
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -744,7 +741,7 @@ at the particular context will still apply.
   >>> from plone.portlets.constants import CONTEXT_CATEGORY
   >>> rightAtChild1Manager.setBlacklistStatus(CONTEXT_CATEGORY, True)
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -761,7 +758,7 @@ at the particular context will still apply.
   >>> saveAssignment(rightAtChild1, DummyPortlet('Dummy at child 1 right'))
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -783,7 +780,7 @@ are still blocked, but those from child11 are not blocked.
   >>> __uids__[id(child11)] = child11
 
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -801,7 +798,7 @@ are still blocked, but those from child11 are not blocked.
   >>> saveAssignment(rightAtChild11, DummyPortlet('Dummy at child 11 right'))
 
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -825,7 +822,7 @@ portlets. In the UI, a simple True/False or True/None may suffice.
   >>> rightAtChild11Manager = getMultiAdapter((child11, right), ILocalPortletAssignmentManager)
   >>> rightAtChild11Manager.setBlacklistStatus(CONTEXT_CATEGORY, False)
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -846,7 +843,7 @@ block them as well.
   >>> rightAtChild11Manager = getMultiAdapter((child11, right), ILocalPortletAssignmentManager)
   >>> rightAtChild11Manager.setBlacklistStatus(CONTEXT_CATEGORY, True)
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -883,7 +880,7 @@ Parent contextual portlets are now blacklisted by default.
 And are hidden in the view.
 
   >>> view = getMultiAdapter((child2, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
     <html>
       <body>
         <div class="left-column">
@@ -927,7 +924,7 @@ placeless behaviour.
   ...                    name='columns.dashboard')
 
   >>> dashboardFileName = os.path.join(tempDir, 'dashboard.pt')
-  >>> open(dashboardFileName, 'w').write("""
+  >>> _ = open(dashboardFileName, 'w').write("""
   ... <html>
   ...   <body>
   ...     <div class="dashboard">
@@ -937,12 +934,12 @@ placeless behaviour.
   ... </html>
   ... """)
 
-  >>> class DashboardPage(BrowserPage):
-  ...     adapts(Interface, IBrowserRequest)
+  >>> @adapter(Interface, IBrowserRequest)
+  ... class DashboardPage(BrowserPage):
   ...     __call__ = ViewPageTemplateFile(dashboardFileName)
   >>> provideAdapter(DashboardPage, provides=IBrowserPage, name='dashboard.html')
   >>> view = getMultiAdapter((child1, TestRequest()), name='dashboard.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="dashboard">
@@ -976,7 +973,7 @@ not apply.
   >>> saveAssignment(dashboardAtChild1, DummyPortlet('dummy for dashboard in context'))
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='dashboard.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="dashboard">
@@ -999,17 +996,16 @@ the renderer.
   >>> class IDataAware(IPortletDataProvider):
   ...   pass
 
-  >>> class DataAwarePortlet(Persistent, Contained):
-  ...     implements(IPortletAssignment, IDataAware)
+  >>> @implementer(IPortletAssignment, IDataAware)
+  ... class DataAwarePortlet(Persistent, Contained):
   ...
   ...     def __init__(self, available=True):
   ...         self.available = available
   ...     data = property(lambda self: self)
 
-  >>> class DataAwareRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, IDataAware)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, IDataAware)
+  ... class DataAwareRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -1033,7 +1029,7 @@ Let's assign this in the root folder.
 Let's verify the output
 
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
       <body>
         <div class="left-column">
diff --git a/plone/portlets/manager.py b/plone/portlets/manager.py
index 5740a60..656a199 100644
--- a/plone/portlets/manager.py
+++ b/plone/portlets/manager.py
@@ -56,7 +56,7 @@ def filter(self, portlets):
                     filtered.append(p)
             except ConflictError:
                 raise
-            except Exception, e:
+            except Exception as e:
                 logger.exception(
                     "Error while determining assignment availability of "
                     "portlet (%r %r %r): %s" % (
@@ -117,7 +117,7 @@ def _lazyLoadPortlets(self, manager):
                 isAvailable = renderer.available
             except ConflictError:
                 raise
-            except Exception, e:
+            except Exception as e:
                 isAvailable = False
                 logger.exception(
                     "Error while determining renderer availability of portlet "
diff --git a/plone/portlets/storage.py b/plone/portlets/storage.py
index 4129162..7ea9984 100644
--- a/plone/portlets/storage.py
+++ b/plone/portlets/storage.py
@@ -1,17 +1,13 @@
-
-import logging
-
-from zope.interface import implementer
-
+from BTrees.OOBTree import OOBTree
+from plone.portlets.interfaces import IPortletAssignmentMapping
+from plone.portlets.interfaces import IPortletCategoryMapping
+from plone.portlets.interfaces import IPortletStorage
 from zope.container.btree import BTreeContainer
 from zope.container.contained import Contained
 from zope.container.ordered import OrderedContainer
-
-from plone.portlets.interfaces import IPortletStorage
-from plone.portlets.interfaces import IPortletCategoryMapping
-from plone.portlets.interfaces import IPortletAssignmentMapping
-
-from BTrees.OOBTree import OOBTree
+from zope.interface import implementer
+import logging
+import sys
 
 # XXX: We coerce all mapping keys (things like user and group ids)
 # to unicode, because the OOBTree that we store them in will fall over with
@@ -22,14 +18,21 @@
 
 LOG = logging.getLogger('portlets')
 
+if sys.version_info[0] > 2:
+    text_type = str
+    binary_type = bytes
+else:
+    text_type = unicode
+    binary_type = str
+
 
 def _coerce(key):
-    if isinstance(key, str):
+    if isinstance(key, binary_type):
         try:
-            key = unicode(key, encoding='utf-8')
+            key = text_type(key, encoding='utf-8')
         except UnicodeDecodeError:
             LOG.warn('Unable to convert %r to unicode' % key)
-            return unicode(key, 'utf-8', 'ignore')
+            return text_type(key, 'utf-8', 'ignore')
 
     return key
 
diff --git a/plone/portlets/tests.py b/plone/portlets/tests.py
index c16e80f..7803355 100644
--- a/plone/portlets/tests.py
+++ b/plone/portlets/tests.py
@@ -71,10 +71,10 @@ def test_portlet_metadata_availability():
     the PortletManagerRenderer checks for the availability of
     the PortletRenderers
 
-      >>> from zope.component import adapts
+      >>> from zope.component import adapter
       >>> from zope.component import provideAdapter
       >>> from zope.interface import directlyProvides
-      >>> from zope.interface import implements
+      >>> from zope.interface import implementer
       >>> from zope.interface import Interface
 
     Define a dummy PortletManager
@@ -84,16 +84,16 @@ def test_portlet_metadata_availability():
       >>> class IDummyPortletManager(IPortletManager):
       ...     "Dummy portlet manager"
 
-      >>> class DummyPortletManager:
-      ...     implements(IDummyPortletManager)
+      >>> @implementer(IDummyPortletManager)
+      ... class DummyPortletManager:
       ...     __name__ = None
 
     Define a dummy PortletRenderer that is only available in case
     it has __portlet_metadata__
 
       >>> from plone.portlets.interfaces import IPortletRenderer
-      >>> class DummyPortletRenderer:
-      ...     implements(IPortletRenderer)
+      >>> @implementer(IPortletRenderer)
+      ... class DummyPortletRenderer:
       ...
       ...     @property
       ...     def available(self):
@@ -117,9 +117,9 @@ def test_portlet_metadata_availability():
       >>> from plone.portlets.interfaces import IPortletRetriever
       >>> from plone.portlets.retriever import PortletRetriever
 
-      >>> class DummyPortletRetriever(PortletRetriever):
-      ...     implements(IPortletRetriever)
-      ...     adapts(Interface, IDummyPortletManager)
+      >>> @implementer(IPortletRetriever)
+      ... @adapter(Interface, IDummyPortletManager)
+      ... class DummyPortletRetriever(PortletRetriever):
       ...
       ...     def getPortlets(self):
       ...         p = dict()
@@ -147,8 +147,9 @@ def test_portlet_metadata_availability():
 
     We need a dummy context that implements Interface
 
-      >>> class DummyContext(object):
-      ...     implements(Interface)
+      >>> @implementer(Interface)
+      ... class DummyContext(object):
+      ...     pass
 
     We now test the PortletManagerRenderer. We override the _dataToPortlet
     method since our data is already our correct (dummy) IPortletRenderer
@@ -165,8 +166,8 @@ def test_portlet_metadata_availability():
       ...                                   TestRequest(),
       ...                                   None, DummyPortletManager())
       >>> renderer.update()
-      >>> renderer.render()
-      u'dummy portlet renderer'
+      >>> print(renderer.render())
+      dummy portlet renderer
     """
 
 
diff --git a/plone/portlets/uisupport.txt b/plone/portlets/uisupport.txt
index a42c6ae..e4ae5ae 100644
--- a/plone/portlets/uisupport.txt
+++ b/plone/portlets/uisupport.txt
@@ -95,7 +95,7 @@ The second portlet type is applicable only to portlet managers providing IFoo1:
   ...   for_=[IFoo1])
 
   >>> portlets = left.getAddablePortletTypes()
-  >>> portlets.sort(lambda x,y: cmp(x.addview, y.addview))
+  >>> portlets.sort(key=lambda x: x.addview)
   >>> [portlet.addview for portlet in portlets]
   ['portlets.a', 'portlets.b']
 
@@ -112,12 +112,12 @@ The third portlet type is applicable only to portlet managers providing IFoo1 or
   ...   for_=[IFoo1, IFoo2])
 
   >>> portlets = left.getAddablePortletTypes()
-  >>> portlets.sort(lambda x,y: cmp(x.addview, y.addview))
+  >>> portlets.sort(key=lambda x: x.addview)
   >>> [portlet.addview for portlet in portlets]
   ['portlets.a', 'portlets.b', 'portlets.c']
 
   >>> portlets = right.getAddablePortletTypes()
-  >>> portlets.sort(lambda x,y: cmp(x.addview, y.addview))
+  >>> portlets.sort(key=lambda x: x.addview)
   >>> [portlet.addview for portlet in portlets]
   ['portlets.a', 'portlets.c']
 
diff --git a/plone/portlets/utils.py b/plone/portlets/utils.py
index 7189a63..1091408 100644
--- a/plone/portlets/utils.py
+++ b/plone/portlets/utils.py
@@ -46,9 +46,14 @@ def hashPortletInfo(info):
     info is the portlet info dictionary. Hash is put into info, and
     also returned.
     """
-    info['name'] = str(info['name'])
-    concat_txt = '%(manager)s\n%(category)s\n%(key)s\n%(name)s' % info
-    info['hash'] = binascii.b2a_hex(concat_txt)
+    # Make sure all info values are decoded
+    newinfo = {}
+    for k, v in info.items():
+        if hasattr(v, 'decode'):
+            v = v.decode('utf8')
+        newinfo[k] = v
+    concat_txt = u'%(manager)s\n%(category)s\n%(key)s\n%(name)s' % newinfo
+    info['hash'] = binascii.b2a_hex(concat_txt.encode('utf8'))
     return info['hash']
 
 
@@ -58,7 +63,7 @@ def unhashPortletInfo(hash):
     Output is the info dictionary (containing only the
     hashed fields).
     """
-    concat_txt = binascii.a2b_hex(hash)
+    concat_txt = binascii.a2b_hex(hash).decode()
     manager, category, key, name = concat_txt.splitlines()
     info = dict(manager=manager, category=category, key=key, name=name, hash=hash)
     return info
diff --git a/plone/portlets/utils.txt b/plone/portlets/utils.txt
index ccabb9c..ce1294e 100644
--- a/plone/portlets/utils.txt
+++ b/plone/portlets/utils.txt
@@ -57,7 +57,7 @@ Now, let's check it only contains the allowed characters:
 
   >>> import re
   >>> re_allowed = re.compile(r'^[a-zA-Z0-9]*$')
-  >>> re_allowed.match(hash) is not None
+  >>> re_allowed.match(hash.decode()) is not None
   True
 
 Unicode handling
diff --git a/setup.py b/setup.py
index b150751..c18a9cc 100644
--- a/setup.py
+++ b/setup.py
@@ -20,6 +20,7 @@
         "Programming Language :: Python",
         "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.5",
     ],
     keywords='portlet viewlet',
     author='Plone Foundation',
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..58a7f52
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,10 @@
+[tox]
+envlist =
+    py27,py33,py34,py35
+
+[testenv]
+deps =
+    zope.testrunner
+    .[test]
+commands =
+    zope-testrunner --test-path=. {posargs:-pvc}


Repository: plone.portlets


Branch: refs/heads/master
Date: 2016-10-23T15:05:17-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.portlets/commit/58f8e453ccfb3c90445b04ba32a601a8c9f5142f

add travis config

Files changed:
A .travis.yml

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..55bc622
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.3
+    - 3.4
+    - 3.5
+install:
+    - pip install tox-travis
+script:
+    - tox
+notifications:
+    email: false


Repository: plone.portlets


Branch: refs/heads/master
Date: 2016-10-23T15:11:31-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.portlets/commit/cecae73e58bcd754f3cf4cfa01b1de27510649c3

don't support 3.3; it's not working for some reason

Files changed:
M .travis.yml
M tox.ini

diff --git a/.travis.yml b/.travis.yml
index 55bc622..e5805d5 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -2,7 +2,6 @@ language: python
 sudo: false
 python:
     - 2.7
-    - 3.3
     - 3.4
     - 3.5
 install:
diff --git a/tox.ini b/tox.ini
index 58a7f52..a413b63 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,6 +1,6 @@
 [tox]
 envlist =
-    py27,py33,py34,py35
+    py27,py34,py35
 
 [testenv]
 deps =


Repository: plone.portlets


Branch: refs/heads/master
Date: 2016-10-23T18:03:04-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlets/commit/61ff41c7a1f201873c234f19b8d3c96eb40ec8aa

Merge pull request #3 from plone/py3

support python 3

Files changed:
A .travis.yml
A tox.ini
M .gitignore
M CHANGES.rst
M plone/portlets/README.txt
M plone/portlets/manager.py
M plone/portlets/storage.py
M plone/portlets/tests.py
M plone/portlets/uisupport.txt
M plone/portlets/utils.py
M plone/portlets/utils.txt
M setup.py

diff --git a/.gitignore b/.gitignore
index 350b1c5..d43c05f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 *.egg-info
 *.pyc
 *.pyo
+.tox
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..e5805d5
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,12 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.4
+    - 3.5
+install:
+    - pip install tox-travis
+script:
+    - tox
+notifications:
+    email: false
diff --git a/CHANGES.rst b/CHANGES.rst
index a4855e7..498d801 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,7 @@ Breaking changes:
 New features:
 
 - *add item here*
+- Support Python 3. [davisagli]
 
 Bug fixes:
 
diff --git a/plone/portlets/README.txt b/plone/portlets/README.txt
index c3296f1..873358f 100644
--- a/plone/portlets/README.txt
+++ b/plone/portlets/README.txt
@@ -77,8 +77,8 @@ is obviously not a realistic implementation (since it is non-persistent and
 instance-specific). The environment also represents the current user and
 that user's groups.
 
-  >>> from zope.interface import implements, Interface, directlyProvides
-  >>> from zope.component import adapts, provideAdapter
+  >>> from zope.interface import implementer, Interface, directlyProvides
+  >>> from zope.component import adapter, provideAdapter
 
   >>> from zope import schema
 
@@ -97,14 +97,14 @@ that user's groups.
   >>> class ITestGroup(Interface):
   ...     id = schema.TextLine(title=u'Group id')
 
-  >>> class TestUser(object):
-  ...     implements(ITestUser)
+  >>> @implementer(ITestUser)
+  ... class TestUser(object):
   ...     def __init__(self, id, groups):
   ...         self.id = id
   ...         self.groups = groups
 
-  >>> class TestGroup(object):
-  ...     implements(ITestGroup)
+  >>> @implementer(ITestGroup)
+  ... class TestGroup(object):
   ...     def __init__(self, id):
   ...         self.id = id
 
@@ -137,9 +137,9 @@ the order in which portlets are rendered.
   >>> from plone.portlets.constants import GROUP_CATEGORY
   >>> from plone.portlets.constants import CONTENT_TYPE_CATEGORY
 
-  >>> class TestPortletContext(object):
-  ...     implements(IPortletContext)
-  ...     adapts(Interface)
+  >>> @implementer(IPortletContext)
+  ... @adapter(Interface)
+  ... class TestPortletContext(object):
   ...
   ...     def __init__(self, context):
   ...         self.context = context
@@ -172,8 +172,8 @@ portlet context will work for all of them.
   ...     text = schema.TextLine(title=u"Text to render")
   >>> ITestDocument._content_iface = True
 
-  >>> class TestDocument(object):
-  ...     implements(ITestDocument)
+  >>> @implementer(ITestDocument)
+  ... class TestDocument(object):
   ...
   ...     def __init__(self, text=u''):
   ...         self.__name__ = None
@@ -227,7 +227,7 @@ We should now be able to get this via a provider: expression:
   >>> import os, tempfile
   >>> tempDir = tempfile.mkdtemp()
   >>> templateFileName = os.path.join(tempDir, 'template.pt')
-  >>> open(templateFileName, 'w').write("""
+  >>> _ = open(templateFileName, 'w').write("""
   ... <html>
   ...   <body>
   ...     <div class="left-column">
@@ -246,8 +246,8 @@ We register the template as a view for all objects.
   >>> from zope.publisher.interfaces.browser import IBrowserRequest
   >>> from zope.publisher.browser import BrowserPage
   >>> from zope.browserpage import ViewPageTemplateFile
-  >>> class TestPage(BrowserPage):
-  ...     adapts(Interface, IBrowserRequest)
+  >>> @adapter(Interface, IBrowserRequest)
+  ... class TestPage(BrowserPage):
   ...     __call__ = ViewPageTemplateFile(templateFileName)
   >>> provideAdapter(TestPage, provides=IBrowserPage, name='main.html')
 
@@ -268,7 +268,7 @@ For our memoised views to work, we need to make the request annotatable
 
   >>> from zope.component import getMultiAdapter
   >>> view = getMultiAdapter((doc1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -316,8 +316,8 @@ external object.
   >>> class ILoginPortlet(IPortletDataProvider):
   ...   pass
 
-  >>> class LoginPortletAssignment(Persistent, Contained):
-  ...     implements(IPortletAssignment, ILoginPortlet)
+  >>> @implementer(IPortletAssignment, ILoginPortlet)
+  ... class LoginPortletAssignment(Persistent, Contained):
   ...
   ...     @property
   ...     def available(self):
@@ -327,10 +327,9 @@ external object.
   ...     def data(self):
   ...         return self
 
-  >>> class LoginPortletRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, ILoginPortlet)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, ILoginPortlet)
+  ... class LoginPortletRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -353,8 +352,8 @@ as the ITestContent interface is already available.
 Notice that the assignment type is generic here, relying on the contrived UID
 that the portlet context also relies upon.
 
-  >>> class UIDPortletAssignment(Persistent, Contained):
-  ...     implements(IPortletAssignment)
+  >>> @implementer(IPortletAssignment)
+  ... class UIDPortletAssignment(Persistent, Contained):
   ...
   ...     def __init__(self, obj):
   ...         self.uid = id(obj)
@@ -367,10 +366,9 @@ that the portlet context also relies upon.
   ...     def data(self):
   ...          return __uids__[self.uid]
 
-  >>> class DocumentPortletRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, ITestDocument)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, ITestDocument)
+  ... class DocumentPortletRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -463,7 +461,7 @@ We can also re-order assignments:
 If we now render the view, we should see our newly assigned portlets.
 
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -481,7 +479,7 @@ property was false (the current user is not the anonymous user). Let's
 
   >>> __current_user__ = Anonymous
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -500,18 +498,17 @@ writing a bit easier:
   >>> class IDummyPortlet(IPortletDataProvider):
   ...   text = schema.TextLine(title=u'Text to render')
 
-  >>> class DummyPortlet(Persistent, Contained):
-  ...     implements(IPortletAssignment, IDummyPortlet)
+  >>> @implementer(IPortletAssignment, IDummyPortlet)
+  ... class DummyPortlet(Persistent, Contained):
   ...
   ...     def __init__(self, text, available=True):
   ...         self.text = text
   ...         self.available = available
   ...     data = property(lambda self: self)
 
-  >>> class DummyPortletRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, IDummyPortlet)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, IDummyPortlet)
+  ... class DummyPortletRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -537,7 +534,7 @@ Let's assign a portlet in a sub-folder of the root folder.
 This assignment does not affect rendering at the root folder:
 
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -554,7 +551,7 @@ It does, however, affect rendering at 'child1' (and any of its children).
 Notice also that by default, child portlets come before parent portlets.
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -604,7 +601,7 @@ above.
 These will now be rendered as expected.
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -621,7 +618,7 @@ These will now be rendered as expected.
 
   >>> __current_user__ = user1
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -652,7 +649,7 @@ portlets to users - we simply use a different category.
   >>> saveAssignment(left[GROUP_CATEGORY][group2.id], groupPortlet2)
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -687,7 +684,7 @@ category) or None (let the parent decide).
   True
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -707,7 +704,7 @@ The status is inherited from a parent unless a child also sets a status:
   >>> leftAtRootManager = getMultiAdapter((rootFolder, left), ILocalPortletAssignmentManager)
   >>> leftAtRootManager.setBlacklistStatus(GROUP_CATEGORY, True)
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -722,7 +719,7 @@ The status is inherited from a parent unless a child also sets a status:
 
   >>> leftAtChild1Manager.setBlacklistStatus(GROUP_CATEGORY, False)
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -744,7 +741,7 @@ at the particular context will still apply.
   >>> from plone.portlets.constants import CONTEXT_CATEGORY
   >>> rightAtChild1Manager.setBlacklistStatus(CONTEXT_CATEGORY, True)
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -761,7 +758,7 @@ at the particular context will still apply.
   >>> saveAssignment(rightAtChild1, DummyPortlet('Dummy at child 1 right'))
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -783,7 +780,7 @@ are still blocked, but those from child11 are not blocked.
   >>> __uids__[id(child11)] = child11
 
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -801,7 +798,7 @@ are still blocked, but those from child11 are not blocked.
   >>> saveAssignment(rightAtChild11, DummyPortlet('Dummy at child 11 right'))
 
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -825,7 +822,7 @@ portlets. In the UI, a simple True/False or True/None may suffice.
   >>> rightAtChild11Manager = getMultiAdapter((child11, right), ILocalPortletAssignmentManager)
   >>> rightAtChild11Manager.setBlacklistStatus(CONTEXT_CATEGORY, False)
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -846,7 +843,7 @@ block them as well.
   >>> rightAtChild11Manager = getMultiAdapter((child11, right), ILocalPortletAssignmentManager)
   >>> rightAtChild11Manager.setBlacklistStatus(CONTEXT_CATEGORY, True)
   >>> view = getMultiAdapter((child11, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="left-column">
@@ -883,7 +880,7 @@ Parent contextual portlets are now blacklisted by default.
 And are hidden in the view.
 
   >>> view = getMultiAdapter((child2, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
     <html>
       <body>
         <div class="left-column">
@@ -927,7 +924,7 @@ placeless behaviour.
   ...                    name='columns.dashboard')
 
   >>> dashboardFileName = os.path.join(tempDir, 'dashboard.pt')
-  >>> open(dashboardFileName, 'w').write("""
+  >>> _ = open(dashboardFileName, 'w').write("""
   ... <html>
   ...   <body>
   ...     <div class="dashboard">
@@ -937,12 +934,12 @@ placeless behaviour.
   ... </html>
   ... """)
 
-  >>> class DashboardPage(BrowserPage):
-  ...     adapts(Interface, IBrowserRequest)
+  >>> @adapter(Interface, IBrowserRequest)
+  ... class DashboardPage(BrowserPage):
   ...     __call__ = ViewPageTemplateFile(dashboardFileName)
   >>> provideAdapter(DashboardPage, provides=IBrowserPage, name='dashboard.html')
   >>> view = getMultiAdapter((child1, TestRequest()), name='dashboard.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="dashboard">
@@ -976,7 +973,7 @@ not apply.
   >>> saveAssignment(dashboardAtChild1, DummyPortlet('dummy for dashboard in context'))
 
   >>> view = getMultiAdapter((child1, TestRequest()), name='dashboard.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
     <body>
       <div class="dashboard">
@@ -999,17 +996,16 @@ the renderer.
   >>> class IDataAware(IPortletDataProvider):
   ...   pass
 
-  >>> class DataAwarePortlet(Persistent, Contained):
-  ...     implements(IPortletAssignment, IDataAware)
+  >>> @implementer(IPortletAssignment, IDataAware)
+  ... class DataAwarePortlet(Persistent, Contained):
   ...
   ...     def __init__(self, available=True):
   ...         self.available = available
   ...     data = property(lambda self: self)
 
-  >>> class DataAwareRenderer(object):
-  ...     implements(IPortletRenderer)
-  ...     adapts(Interface, IBrowserRequest, IBrowserView,
-  ...             IPortletManager, IDataAware)
+  >>> @implementer(IPortletRenderer)
+  ... @adapter(Interface, IBrowserRequest, IBrowserView, IPortletManager, IDataAware)
+  ... class DataAwareRenderer(object):
   ...
   ...     def __init__(self, context, request, view, manager, data):
   ...         self.data = data
@@ -1033,7 +1029,7 @@ Let's assign this in the root folder.
 Let's verify the output
 
   >>> view = getMultiAdapter((rootFolder, TestRequest()), name='main.html')
-  >>> print view().strip()
+  >>> print(view().strip())
   <html>
       <body>
         <div class="left-column">
diff --git a/plone/portlets/manager.py b/plone/portlets/manager.py
index 5740a60..656a199 100644
--- a/plone/portlets/manager.py
+++ b/plone/portlets/manager.py
@@ -56,7 +56,7 @@ def filter(self, portlets):
                     filtered.append(p)
             except ConflictError:
                 raise
-            except Exception, e:
+            except Exception as e:
                 logger.exception(
                     "Error while determining assignment availability of "
                     "portlet (%r %r %r): %s" % (
@@ -117,7 +117,7 @@ def _lazyLoadPortlets(self, manager):
                 isAvailable = renderer.available
             except ConflictError:
                 raise
-            except Exception, e:
+            except Exception as e:
                 isAvailable = False
                 logger.exception(
                     "Error while determining renderer availability of portlet "
diff --git a/plone/portlets/storage.py b/plone/portlets/storage.py
index 4129162..7ea9984 100644
--- a/plone/portlets/storage.py
+++ b/plone/portlets/storage.py
@@ -1,17 +1,13 @@
-
-import logging
-
-from zope.interface import implementer
-
+from BTrees.OOBTree import OOBTree
+from plone.portlets.interfaces import IPortletAssignmentMapping
+from plone.portlets.interfaces import IPortletCategoryMapping
+from plone.portlets.interfaces import IPortletStorage
 from zope.container.btree import BTreeContainer
 from zope.container.contained import Contained
 from zope.container.ordered import OrderedContainer
-
-from plone.portlets.interfaces import IPortletStorage
-from plone.portlets.interfaces import IPortletCategoryMapping
-from plone.portlets.interfaces import IPortletAssignmentMapping
-
-from BTrees.OOBTree import OOBTree
+from zope.interface import implementer
+import logging
+import sys
 
 # XXX: We coerce all mapping keys (things like user and group ids)
 # to unicode, because the OOBTree that we store them in will fall over with
@@ -22,14 +18,21 @@
 
 LOG = logging.getLogger('portlets')
 
+if sys.version_info[0] > 2:
+    text_type = str
+    binary_type = bytes
+else:
+    text_type = unicode
+    binary_type = str
+
 
 def _coerce(key):
-    if isinstance(key, str):
+    if isinstance(key, binary_type):
         try:
-            key = unicode(key, encoding='utf-8')
+            key = text_type(key, encoding='utf-8')
         except UnicodeDecodeError:
             LOG.warn('Unable to convert %r to unicode' % key)
-            return unicode(key, 'utf-8', 'ignore')
+            return text_type(key, 'utf-8', 'ignore')
 
     return key
 
diff --git a/plone/portlets/tests.py b/plone/portlets/tests.py
index c16e80f..7803355 100644
--- a/plone/portlets/tests.py
+++ b/plone/portlets/tests.py
@@ -71,10 +71,10 @@ def test_portlet_metadata_availability():
     the PortletManagerRenderer checks for the availability of
     the PortletRenderers
 
-      >>> from zope.component import adapts
+      >>> from zope.component import adapter
       >>> from zope.component import provideAdapter
       >>> from zope.interface import directlyProvides
-      >>> from zope.interface import implements
+      >>> from zope.interface import implementer
       >>> from zope.interface import Interface
 
     Define a dummy PortletManager
@@ -84,16 +84,16 @@ def test_portlet_metadata_availability():
       >>> class IDummyPortletManager(IPortletManager):
       ...     "Dummy portlet manager"
 
-      >>> class DummyPortletManager:
-      ...     implements(IDummyPortletManager)
+      >>> @implementer(IDummyPortletManager)
+      ... class DummyPortletManager:
       ...     __name__ = None
 
     Define a dummy PortletRenderer that is only available in case
     it has __portlet_metadata__
 
       >>> from plone.portlets.interfaces import IPortletRenderer
-      >>> class DummyPortletRenderer:
-      ...     implements(IPortletRenderer)
+      >>> @implementer(IPortletRenderer)
+      ... class DummyPortletRenderer:
       ...
       ...     @property
       ...     def available(self):
@@ -117,9 +117,9 @@ def test_portlet_metadata_availability():
       >>> from plone.portlets.interfaces import IPortletRetriever
       >>> from plone.portlets.retriever import PortletRetriever
 
-      >>> class DummyPortletRetriever(PortletRetriever):
-      ...     implements(IPortletRetriever)
-      ...     adapts(Interface, IDummyPortletManager)
+      >>> @implementer(IPortletRetriever)
+      ... @adapter(Interface, IDummyPortletManager)
+      ... class DummyPortletRetriever(PortletRetriever):
       ...
       ...     def getPortlets(self):
       ...         p = dict()
@@ -147,8 +147,9 @@ def test_portlet_metadata_availability():
 
     We need a dummy context that implements Interface
 
-      >>> class DummyContext(object):
-      ...     implements(Interface)
+      >>> @implementer(Interface)
+      ... class DummyContext(object):
+      ...     pass
 
     We now test the PortletManagerRenderer. We override the _dataToPortlet
     method since our data is already our correct (dummy) IPortletRenderer
@@ -165,8 +166,8 @@ def test_portlet_metadata_availability():
       ...                                   TestRequest(),
       ...                                   None, DummyPortletManager())
       >>> renderer.update()
-      >>> renderer.render()
-      u'dummy portlet renderer'
+      >>> print(renderer.render())
+      dummy portlet renderer
     """
 
 
diff --git a/plone/portlets/uisupport.txt b/plone/portlets/uisupport.txt
index a42c6ae..e4ae5ae 100644
--- a/plone/portlets/uisupport.txt
+++ b/plone/portlets/uisupport.txt
@@ -95,7 +95,7 @@ The second portlet type is applicable only to portlet managers providing IFoo1:
   ...   for_=[IFoo1])
 
   >>> portlets = left.getAddablePortletTypes()
-  >>> portlets.sort(lambda x,y: cmp(x.addview, y.addview))
+  >>> portlets.sort(key=lambda x: x.addview)
   >>> [portlet.addview for portlet in portlets]
   ['portlets.a', 'portlets.b']
 
@@ -112,12 +112,12 @@ The third portlet type is applicable only to portlet managers providing IFoo1 or
   ...   for_=[IFoo1, IFoo2])
 
   >>> portlets = left.getAddablePortletTypes()
-  >>> portlets.sort(lambda x,y: cmp(x.addview, y.addview))
+  >>> portlets.sort(key=lambda x: x.addview)
   >>> [portlet.addview for portlet in portlets]
   ['portlets.a', 'portlets.b', 'portlets.c']
 
   >>> portlets = right.getAddablePortletTypes()
-  >>> portlets.sort(lambda x,y: cmp(x.addview, y.addview))
+  >>> portlets.sort(key=lambda x: x.addview)
   >>> [portlet.addview for portlet in portlets]
   ['portlets.a', 'portlets.c']
 
diff --git a/plone/portlets/utils.py b/plone/portlets/utils.py
index 7189a63..1091408 100644
--- a/plone/portlets/utils.py
+++ b/plone/portlets/utils.py
@@ -46,9 +46,14 @@ def hashPortletInfo(info):
     info is the portlet info dictionary. Hash is put into info, and
     also returned.
     """
-    info['name'] = str(info['name'])
-    concat_txt = '%(manager)s\n%(category)s\n%(key)s\n%(name)s' % info
-    info['hash'] = binascii.b2a_hex(concat_txt)
+    # Make sure all info values are decoded
+    newinfo = {}
+    for k, v in info.items():
+        if hasattr(v, 'decode'):
+            v = v.decode('utf8')
+        newinfo[k] = v
+    concat_txt = u'%(manager)s\n%(category)s\n%(key)s\n%(name)s' % newinfo
+    info['hash'] = binascii.b2a_hex(concat_txt.encode('utf8'))
     return info['hash']
 
 
@@ -58,7 +63,7 @@ def unhashPortletInfo(hash):
     Output is the info dictionary (containing only the
     hashed fields).
     """
-    concat_txt = binascii.a2b_hex(hash)
+    concat_txt = binascii.a2b_hex(hash).decode()
     manager, category, key, name = concat_txt.splitlines()
     info = dict(manager=manager, category=category, key=key, name=name, hash=hash)
     return info
diff --git a/plone/portlets/utils.txt b/plone/portlets/utils.txt
index ccabb9c..ce1294e 100644
--- a/plone/portlets/utils.txt
+++ b/plone/portlets/utils.txt
@@ -57,7 +57,7 @@ Now, let's check it only contains the allowed characters:
 
   >>> import re
   >>> re_allowed = re.compile(r'^[a-zA-Z0-9]*$')
-  >>> re_allowed.match(hash) is not None
+  >>> re_allowed.match(hash.decode()) is not None
   True
 
 Unicode handling
diff --git a/setup.py b/setup.py
index b150751..c18a9cc 100644
--- a/setup.py
+++ b/setup.py
@@ -20,6 +20,7 @@
         "Programming Language :: Python",
         "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.5",
     ],
     keywords='portlet viewlet',
     author='Plone Foundation',
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..a413b63
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,10 @@
+[tox]
+envlist =
+    py27,py34,py35
+
+[testenv]
+deps =
+    zope.testrunner
+    .[test]
+commands =
+    zope-testrunner --test-path=. {posargs:-pvc}


