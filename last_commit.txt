Repository: plone.caching


Branch: refs/heads/master
Date: 2016-07-05T23:15:02+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.caching/commit/a34258a0468af8ab62f2dff0cfd88a46228a7b1e

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M plone/caching/hooks.py
M plone/caching/lookup.py
M plone/caching/operations.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7a0126c..52fc259 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 1.1.0 (2016-05-18)
diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index e56f4f8..a97b018 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -1,6 +1,6 @@
 import logging
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.interface import alsoProvides
 
@@ -108,6 +108,7 @@ def intercept(event):
     except:
         logging.exception("Swallowed exception in plone.caching IPubAfterTraversal event handler")
 
+@implementer(ITransform)
 class MutatorTransform(object):
     """Transformation using plone.transformchain.
 
@@ -122,8 +123,6 @@ class MutatorTransform(object):
     response body. Instead, we look up caching operations which can modify
     response headers and perform other caching functions.
     """
-
-    implements(ITransform)
     adapts(Interface, Interface)
 
     order = 12000
diff --git a/plone/caching/lookup.py b/plone/caching/lookup.py
index d70088a..04fe060 100644
--- a/plone/caching/lookup.py
+++ b/plone/caching/lookup.py
@@ -1,18 +1,17 @@
 from zope.interface import Interface
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 
 from z3c.caching.registry import lookup
 from plone.caching.interfaces import IRulesetLookup
 
+@implementer(IRulesetLookup)
 class DefaultRulesetLookup(object):
     """Default ruleset lookup.
 
     Only override this if you have very special needs. The safest option is
     to use ``z3c.caching`` to set rulesets.
     """
-
-    implements(IRulesetLookup)
     adapts(Interface, Interface)
 
     def __init__(self, published, request):
diff --git a/plone/caching/operations.py b/plone/caching/operations.py
index e9c5242..bfe8746 100644
--- a/plone/caching/operations.py
+++ b/plone/caching/operations.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, classProvides, Interface
+from zope.interface import implementer, provider, Interface
 from zope.component import adapts, queryMultiAdapter
 
 from plone.caching.interfaces import ICachingOperation
@@ -7,6 +7,8 @@
 
 from plone.caching.utils import lookupOptions
 
+@implementer(ICachingOperation)
+@provider(ICachingOperationType)
 class Chain(object):
     """Caching operation which chains together several other operations.
 
@@ -21,13 +23,8 @@ class Chain(object):
 
     The option must be a sequence type (e.g. a ``Tuple``).
     """
-
-    implements(ICachingOperation)
     adapts(Interface, Interface)
 
-    # Type metadata
-    classProvides(ICachingOperationType)
-
     title = _(u"Chain")
     description = _(u"Allows multiple operations to be chained together")
     prefix = 'plone.caching.operations.chain'
diff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py
index fa29028..e4fa6a2 100644
--- a/plone/caching/tests/test_hooks.py
+++ b/plone/caching/tests/test_hooks.py
@@ -1,7 +1,7 @@
 import unittest
 
 from zope.component import adapts, provideUtility, provideAdapter, getUtility
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 from zope.globalrequest import setRequest, clearRequest
 
@@ -212,8 +212,8 @@ def test_match_unicode(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -249,8 +249,8 @@ def test_match_bytes(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -286,8 +286,8 @@ def test_match_iterable(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -323,8 +323,8 @@ def test_match_method(self):
         z3c.caching.registry.register(DummyResource, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -360,8 +360,8 @@ def test_off_switch(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -551,8 +551,8 @@ def test_match_unicode(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -590,8 +590,8 @@ def test_match_bytes(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -629,8 +629,8 @@ def test_match_iterable(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -668,8 +668,8 @@ def test_match_method(self):
         z3c.caching.registry.register(DummyResource, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -707,8 +707,8 @@ def test_off_switch(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -841,8 +841,8 @@ def test_match_abort(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -877,8 +877,8 @@ def test_match_body(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -925,8 +925,8 @@ def test_match_body_explicitly_enable_transform_chain(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -974,8 +974,8 @@ def test_match_body_method(self):
         z3c.caching.registry.register(DummyResource, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -1022,8 +1022,8 @@ def test_off_switch(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -1047,8 +1047,8 @@ def interceptResponse(self, rulename, response):
 
     def test_dont_swallow_conflict_error(self):
 
+        @implementer(IRulesetLookup)
         class DummyRulesetLookup(object):
-            implements(IRulesetLookup)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -1073,8 +1073,8 @@ def __call__(self):
 
     def test_swallow_other_error(self):
 
+        @implementer(IRulesetLookup)
         class DummyRulesetLookup(object):
-            implements(IRulesetLookup)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
diff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py
index 918fea3..82a3de8 100644
--- a/plone/caching/tests/test_operations.py
+++ b/plone/caching/tests/test_operations.py
@@ -1,6 +1,6 @@
 import unittest
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 
 from zope.component import provideUtility
@@ -104,8 +104,8 @@ def test_multiple_operations_one_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -141,8 +141,8 @@ def test_multiple_operations_multiple_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
+        @implementer(ICachingOperation)
         class DummyOperation1(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -157,8 +157,8 @@ def modifyResponse(self, rulename, response):
 
         provideAdapter(DummyOperation1, name="op1")
 
+        @implementer(ICachingOperation)
         class DummyOperation2(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
diff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py
index f1a83fd..c23b5a6 100644
--- a/plone/caching/tests/test_utils.py
+++ b/plone/caching/tests/test_utils.py
@@ -2,7 +2,7 @@
 
 import zope.component.testing
 
-from zope.interface import classProvides
+from zope.interface import provider
 from zope.component import provideUtility, getUtility
 
 from plone.registry.interfaces import IRegistry
@@ -55,8 +55,8 @@ def tearDown(self):
 
     def test_lookupOptions_no_registry(self):
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -69,8 +69,8 @@ class DummyOperation(object):
     def test_lookupOptions_no_records(self):
         provideUtility(Registry(), IRegistry)
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -86,8 +86,8 @@ def test_lookupOptions_default(self):
 
         registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -105,8 +105,8 @@ def test_lookupOptions_override(self):
         registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"bar")
         registry.records['plone.caching.tests.testrule.test2'] = Record(field.TextLine(), u"baz")
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -122,8 +122,8 @@ def test_lookupOptions_named(self):
 
         registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""


Repository: plone.caching


Branch: refs/heads/master
Date: 2016-07-07T00:50:41+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/d4a3a2ef1bd47127f635a10d405c2ad07f4f3acc

Merge pull request #3 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.rst
M plone/caching/hooks.py
M plone/caching/lookup.py
M plone/caching/operations.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 7a0126c..52fc259 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 1.1.0 (2016-05-18)
diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index e56f4f8..a97b018 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -1,6 +1,6 @@
 import logging
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.interface import alsoProvides
 
@@ -108,6 +108,7 @@ def intercept(event):
     except:
         logging.exception("Swallowed exception in plone.caching IPubAfterTraversal event handler")
 
+@implementer(ITransform)
 class MutatorTransform(object):
     """Transformation using plone.transformchain.
 
@@ -122,8 +123,6 @@ class MutatorTransform(object):
     response body. Instead, we look up caching operations which can modify
     response headers and perform other caching functions.
     """
-
-    implements(ITransform)
     adapts(Interface, Interface)
 
     order = 12000
diff --git a/plone/caching/lookup.py b/plone/caching/lookup.py
index d70088a..04fe060 100644
--- a/plone/caching/lookup.py
+++ b/plone/caching/lookup.py
@@ -1,18 +1,17 @@
 from zope.interface import Interface
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 
 from z3c.caching.registry import lookup
 from plone.caching.interfaces import IRulesetLookup
 
+@implementer(IRulesetLookup)
 class DefaultRulesetLookup(object):
     """Default ruleset lookup.
 
     Only override this if you have very special needs. The safest option is
     to use ``z3c.caching`` to set rulesets.
     """
-
-    implements(IRulesetLookup)
     adapts(Interface, Interface)
 
     def __init__(self, published, request):
diff --git a/plone/caching/operations.py b/plone/caching/operations.py
index e9c5242..bfe8746 100644
--- a/plone/caching/operations.py
+++ b/plone/caching/operations.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, classProvides, Interface
+from zope.interface import implementer, provider, Interface
 from zope.component import adapts, queryMultiAdapter
 
 from plone.caching.interfaces import ICachingOperation
@@ -7,6 +7,8 @@
 
 from plone.caching.utils import lookupOptions
 
+@implementer(ICachingOperation)
+@provider(ICachingOperationType)
 class Chain(object):
     """Caching operation which chains together several other operations.
 
@@ -21,13 +23,8 @@ class Chain(object):
 
     The option must be a sequence type (e.g. a ``Tuple``).
     """
-
-    implements(ICachingOperation)
     adapts(Interface, Interface)
 
-    # Type metadata
-    classProvides(ICachingOperationType)
-
     title = _(u"Chain")
     description = _(u"Allows multiple operations to be chained together")
     prefix = 'plone.caching.operations.chain'
diff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py
index fa29028..e4fa6a2 100644
--- a/plone/caching/tests/test_hooks.py
+++ b/plone/caching/tests/test_hooks.py
@@ -1,7 +1,7 @@
 import unittest
 
 from zope.component import adapts, provideUtility, provideAdapter, getUtility
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 from zope.globalrequest import setRequest, clearRequest
 
@@ -212,8 +212,8 @@ def test_match_unicode(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -249,8 +249,8 @@ def test_match_bytes(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -286,8 +286,8 @@ def test_match_iterable(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -323,8 +323,8 @@ def test_match_method(self):
         z3c.caching.registry.register(DummyResource, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -360,8 +360,8 @@ def test_off_switch(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -551,8 +551,8 @@ def test_match_unicode(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -590,8 +590,8 @@ def test_match_bytes(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -629,8 +629,8 @@ def test_match_iterable(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -668,8 +668,8 @@ def test_match_method(self):
         z3c.caching.registry.register(DummyResource, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -707,8 +707,8 @@ def test_off_switch(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -841,8 +841,8 @@ def test_match_abort(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -877,8 +877,8 @@ def test_match_body(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -925,8 +925,8 @@ def test_match_body_explicitly_enable_transform_chain(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -974,8 +974,8 @@ def test_match_body_method(self):
         z3c.caching.registry.register(DummyResource, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -1022,8 +1022,8 @@ def test_off_switch(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         settings.operationMapping = {'testrule': 'op1'}
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -1047,8 +1047,8 @@ def interceptResponse(self, rulename, response):
 
     def test_dont_swallow_conflict_error(self):
 
+        @implementer(IRulesetLookup)
         class DummyRulesetLookup(object):
-            implements(IRulesetLookup)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -1073,8 +1073,8 @@ def __call__(self):
 
     def test_swallow_other_error(self):
 
+        @implementer(IRulesetLookup)
         class DummyRulesetLookup(object):
-            implements(IRulesetLookup)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
diff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py
index 918fea3..82a3de8 100644
--- a/plone/caching/tests/test_operations.py
+++ b/plone/caching/tests/test_operations.py
@@ -1,6 +1,6 @@
 import unittest
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 
 from zope.component import provideUtility
@@ -104,8 +104,8 @@ def test_multiple_operations_one_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
+        @implementer(ICachingOperation)
         class DummyOperation(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -141,8 +141,8 @@ def test_multiple_operations_multiple_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
+        @implementer(ICachingOperation)
         class DummyOperation1(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
@@ -157,8 +157,8 @@ def modifyResponse(self, rulename, response):
 
         provideAdapter(DummyOperation1, name="op1")
 
+        @implementer(ICachingOperation)
         class DummyOperation2(object):
-            implements(ICachingOperation)
             adapts(Interface, Interface)
 
             def __init__(self, published, request):
diff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py
index f1a83fd..c23b5a6 100644
--- a/plone/caching/tests/test_utils.py
+++ b/plone/caching/tests/test_utils.py
@@ -2,7 +2,7 @@
 
 import zope.component.testing
 
-from zope.interface import classProvides
+from zope.interface import provider
 from zope.component import provideUtility, getUtility
 
 from plone.registry.interfaces import IRegistry
@@ -55,8 +55,8 @@ def tearDown(self):
 
     def test_lookupOptions_no_registry(self):
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -69,8 +69,8 @@ class DummyOperation(object):
     def test_lookupOptions_no_records(self):
         provideUtility(Registry(), IRegistry)
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -86,8 +86,8 @@ def test_lookupOptions_default(self):
 
         registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -105,8 +105,8 @@ def test_lookupOptions_override(self):
         registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"bar")
         registry.records['plone.caching.tests.testrule.test2'] = Record(field.TextLine(), u"baz")
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""
@@ -122,8 +122,8 @@ def test_lookupOptions_named(self):
 
         registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
 
+        @provider(ICachingOperationType)
         class DummyOperation(object):
-            classProvides(ICachingOperationType)
 
             title = u""
             description = u""


