Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2016-03-08T10:19:31+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/07fe125e1b0c34dfcaf64d2829c707ebe47b67e2

Cleanup, housekeeping and deprecations:

- Deprecated "plone.app.z3cform.object" and moved to
  "plone.app.z3cform.objectsubform" in order to avoid built in names
  as module names, which may result in difficult to debug errors.

- Made existing soft deprecation (by comment) of plone.app.z3cform.layout
  explicit by deprecating using zope.deferredimport.

- removed plone.app.z3cform.queryselect since this was deprecated already
  and removal planned (!) already for Plone 4.1

- Cleanup: pep8, uth8-headers, zca-decorators, ...

Files changed:
A .isort.cfg
A plone/app/z3cform/objectsubform.py
M CHANGES.rst
M plone/__init__.py
M plone/app/z3cform/__init__.py
M plone/app/z3cform/converters.py
M plone/app/z3cform/csrf.py
M plone/app/z3cform/inline_validation.py
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/layout.py
M plone/app/z3cform/object.py
M plone/app/z3cform/templates.py
M plone/app/z3cform/tests/__init__.py
M plone/app/z3cform/tests/example.py
M plone/app/z3cform/tests/layer.py
M plone/app/z3cform/tests/test_csrf.py
M plone/app/z3cform/tests/test_objectsubform.py
M plone/app/z3cform/tests/test_widget.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/tests/tests.py
M plone/app/z3cform/utils.py
M plone/app/z3cform/widget.py
M plone/app/z3cform/wysiwyg/__init__.py
M plone/app/z3cform/wysiwyg/widget.py
M setup.py
D plone/app/z3cform/queryselect/README.rst
D plone/app/z3cform/queryselect/__init__.py

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..fb79921
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,5 @@
+[settings]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
diff --git a/CHANGES.rst b/CHANGES.rst
index c3a8877..3921200 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,23 @@
 Changelog
 =========
 
-1.2.1 (unreleased)
+2.0.0 (unreleased)
 ------------------
 
 Incompatibilities:
 
-- *add item here*
+- Deprecated "plone.app.z3cform.object" and moved to
+  "plone.app.z3cform.objectsubform" in order to avoid built in names
+  as module names, which may result in difficult to debug errors.
+  [jensens]
+
+- Made existing soft deprecation (by comment) of plone.app.z3cform.layout
+  explicit by deprecating using zope.deferredimport.
+  [jensens]
+
+- removed plone.app.z3cform.queryselect since this was deprecated already
+  and removal planned (!) already for Plone 4.1
+  [jensens]
 
 New:
 
@@ -14,7 +25,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Cleanup: pep8, uth8-headers, zca-decorators, ...
+  [jensens]
 
 
 1.2.0 (2016-02-25)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/z3cform/__init__.py b/plone/app/z3cform/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/z3cform/__init__.py
+++ b/plone/app/z3cform/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py
index 9e43085..3abb39e 100644
--- a/plone/app/z3cform/converters.py
+++ b/plone/app/z3cform/converters.py
@@ -1,13 +1,21 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import safe_callable
 from datetime import date
 from datetime import datetime
+from plone.app.z3cform.interfaces import IAjaxSelectWidget
+from plone.app.z3cform.interfaces import IDatetimeWidget
+from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import IQueryStringWidget
+from plone.app.z3cform.interfaces import IRelatedItemsWidget
+from plone.app.z3cform.interfaces import ISelectWidget
 from plone.uuid.interfaces import IUUID
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_callable
 from z3c.form.converter import BaseDataConverter
 from z3c.form.converter import CollectionSequenceDataConverter
 from z3c.form.converter import SequenceDataConverter
-from zope.component import adapts
+from z3c.relationfield.interfaces import IRelationChoice
+from z3c.relationfield.interfaces import IRelationList
+from zope.component import adapter
 from zope.component.hooks import getSite
 from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import IDate
@@ -15,22 +23,14 @@
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import IList
 
-from plone.app.z3cform.interfaces import (
-    IDateWidget, IDatetimeWidget, ISelectWidget, IAjaxSelectWidget,
-    IRelatedItemsWidget, IQueryStringWidget)
-
-import pytz
 import json
-
-from z3c.relationfield.interfaces import IRelationChoice
-from z3c.relationfield.interfaces import IRelationList
+import pytz
 
 
+@adapter(IDate, IDateWidget)
 class DateWidgetConverter(BaseDataConverter):
     """Data converter for date fields."""
 
-    adapts(IDate, IDateWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -59,11 +59,10 @@ def toFieldValue(self, value):
         return date(*map(int, value.split('-')))
 
 
+@adapter(IDatetime, IDatetimeWidget)
 class DatetimeWidgetConverter(BaseDataConverter):
     """Data converter for datetime fields."""
 
-    adapts(IDatetime, IDatetimeWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -134,22 +133,23 @@ def toFieldValue(self, value):
         return super(SelectWidgetConverterBase, self).toFieldValue(value)
 
 
+@adapter(IField, ISelectWidget)
 class SequenceSelectWidgetConverter(
         SelectWidgetConverterBase, SequenceDataConverter):
-    adapts(IField, ISelectWidget)
+    pass
 
 
+@adapter(ICollection, ISelectWidget)
 class SelectWidgetConverter(
         SelectWidgetConverterBase, CollectionSequenceDataConverter):
-    adapts(ICollection, ISelectWidget)
+    pass
 
 
+@adapter(ICollection, IAjaxSelectWidget)
 class AjaxSelectWidgetConverter(BaseDataConverter):
     """Data converter for ICollection fields using the AjaxSelectWidget.
     """
 
-    adapts(ICollection, IAjaxSelectWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -186,12 +186,11 @@ def toFieldValue(self, value):
                               for v in value.split(separator))
 
 
+@adapter(IRelationChoice, IRelatedItemsWidget)
 class RelationChoiceRelatedItemsWidgetConverter(BaseDataConverter):
     """Data converter for RelationChoice fields using the RelatedItemsWidget.
     """
 
-    adapts(IRelationChoice, IRelatedItemsWidget)
-
     def toWidgetValue(self, value):
         if not value:
             return self.field.missing_value
@@ -212,11 +211,10 @@ def toFieldValue(self, value):
             return self.field.missing_value
 
 
+@adapter(ICollection, IRelatedItemsWidget)
 class RelatedItemsDataConverter(BaseDataConverter):
     """Data converter for ICollection fields using the RelatedItemsWidget."""
 
-    adapts(ICollection, IRelatedItemsWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -269,11 +267,10 @@ def toFieldValue(self, value):
             return collectionType(v for v in value)
 
 
+@adapter(IList, IQueryStringWidget)
 class QueryStringDataConverter(BaseDataConverter):
     """Data converter for IList."""
 
-    adapts(IList, IQueryStringWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
diff --git a/plone/app/z3cform/csrf.py b/plone/app/z3cform/csrf.py
index 0da7b65..4eaaf6d 100644
--- a/plone/app/z3cform/csrf.py
+++ b/plone/app/z3cform/csrf.py
@@ -1,18 +1,19 @@
+# -*- coding: utf-8 -*-
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.protect import CheckAuthenticator
 from z3c.form.button import ButtonActions
 from z3c.form.interfaces import IButtonForm
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import Interface
 
 
+@adapter(IButtonForm, IPloneFormLayer, Interface)
 class AuthenticatedButtonActions(ButtonActions):
     """z3c.form action manager that checks Plone's CSRF authenticator.
 
     The check is performed if the form's enableCSRFProtection attribute is
     True.
     """
-    adapts(IButtonForm, IPloneFormLayer, Interface)
 
     def execute(self):
         if getattr(self.form, 'enableCSRFProtection', False):
diff --git a/plone/app/z3cform/inline_validation.py b/plone/app/z3cform/inline_validation.py
index 56c9025..c55681b 100644
--- a/plone/app/z3cform/inline_validation.py
+++ b/plone/app/z3cform/inline_validation.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFPlone.utils import normalizeString
 from Products.Five import BrowserView
@@ -31,7 +32,7 @@ def __call__(self, fname=None, fset=None):
         else:
             return json.dumps(res)
 
-        #if we validate a field in a group we operate on the group
+        # if we validate a field in a group we operate on the group
         if fset is not None:
             try:
                 fset = int(fset)  # integer-indexed fieldset names
@@ -42,7 +43,7 @@ def __call__(self, fname=None, fset=None):
                 group_match = filter(
                     lambda group: normalizeString(_name(group)) == fset,
                     form.groups,
-                    )
+                )
                 if not group_match:
                     raise ValueError('Fieldset specified, but not found.')
                 form = group_match[0]
diff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py
index da4385a..5e097c9 100644
--- a/plone/app/z3cform/interfaces.py
+++ b/plone/app/z3cform/interfaces.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
+from plone.app.textfield.widget import IRichTextWidget as patextfield_IRichTextWidget  # noqa
 from z3c.form.interfaces import IFormLayer
-from zope.schema.interfaces import IDate
-from zope.schema.interfaces import IDatetime
 from z3c.form.interfaces import ISelectWidget as IBaseSelectWidget
 from z3c.form.interfaces import ITextWidget
-from plone.app.textfield.widget import IRichTextWidget as patextfield_IRichTextWidget
+from zope.schema.interfaces import IDate
+from zope.schema.interfaces import IDatetime
 
 
 class IPloneFormLayer(IFormLayer):
diff --git a/plone/app/z3cform/layout.py b/plone/app/z3cform/layout.py
index 688f90f..6fbb60d 100644
--- a/plone/app/z3cform/layout.py
+++ b/plone/app/z3cform/layout.py
@@ -1,2 +1,9 @@
-# Convenience/BBB API
-from plone.z3cform.layout import FormWrapper, wrap_form
+# -*- coding: utf-8 -*-
+import zope.deferredimport
+
+
+zope.deferredimport.deprecated(
+    "Import from plone.z3cform.layout instead.",
+    FormWrapper='plone.z3cform.layout:FormWrapper',
+    wrap_form='plone.z3cform.layout:wrap_form',
+)
diff --git a/plone/app/z3cform/object.py b/plone/app/z3cform/object.py
index e51183c..efadecd 100644
--- a/plone/app/z3cform/object.py
+++ b/plone/app/z3cform/object.py
@@ -1,19 +1,8 @@
-from plone.app.z3cform.utils import closest_content
-from z3c.form.object import SubformAdapter as BaseSubformAdapter
-from z3c.form.object import ObjectSubForm as BaseObjectSubForm
+# -*- coding: utf-8 -*-
+from zope.deprecation import moved
 
 
-class ObjectSubForm(BaseObjectSubForm):
-
-    def get_closest_content(self):
-        """Return the closest persistent context to this form.
-        The right context of this form is the object created by:
-        z3c.form.object.registerFactoryAdapter
-        """
-        return closest_content(self.context)
-
-
-class SubformAdapter(BaseSubformAdapter):
-    """Subform factory adapter used to override the subform factory
-    """
-    factory = ObjectSubForm
+moved(
+    'plone.app.z3cform.objectsubform',
+    'Version 3.0, because "object" in a builtin'
+)
diff --git a/plone/app/z3cform/objectsubform.py b/plone/app/z3cform/objectsubform.py
new file mode 100644
index 0000000..2f4ef1b
--- /dev/null
+++ b/plone/app/z3cform/objectsubform.py
@@ -0,0 +1,19 @@
+from plone.app.z3cform.utils import closest_content
+from z3c.form.object import ObjectSubForm as BaseObjectSubForm
+from z3c.form.object import SubformAdapter as BaseSubformAdapter
+
+
+class ObjectSubForm(BaseObjectSubForm):
+
+    def get_closest_content(self):
+        """Return the closest persistent context to this form.
+        The right context of this form is the object created by:
+        z3c.form.object.registerFactoryAdapter
+        """
+        return closest_content(self.context)
+
+
+class SubformAdapter(BaseSubformAdapter):
+    """Subform factory adapter used to override the subform factory
+    """
+    factory = ObjectSubForm
diff --git a/plone/app/z3cform/queryselect/README.rst b/plone/app/z3cform/queryselect/README.rst
deleted file mode 100644
index d0b4863..0000000
--- a/plone/app/z3cform/queryselect/README.rst
+++ /dev/null
@@ -1,32 +0,0 @@
-Query select widget
-===================
-
-The ``plone.app.z3cform.queryselect`` module provides a query source
-compatible with ``z3c.formwidget.query`` which combines to a selection field
-that can be queried.
-
-The native value type for the widget is Archetypes UID collections.
-The default implementation will simply search using the
-``SearchableText`` index in the portal catalog.
-
-This is how your form schema could look like:
-
-  >>> from zope import interface, schema
-  >>> from plone.app.z3cform.queryselect import ArchetypesContentSourceBinder
-
-  >>> class ISelection(interface.Interface):
-  ...     items = schema.Set(
-  ...         title=u"Selection",
-  ...         description=u"Search for content",
-  ...         value_type=schema.Choice(
-  ...             source=ArchetypesContentSourceBinder()))
-
-Optionally, instead of storing Archetypes UIDs, you can choose to use
-``persistent.wref``, i.e. weak references, instead of UIDs:
-
-  >>> from plone.app.z3cform.queryselect import uid2wref
-  >>> factory = uid2wref(ISelection['items'])
-
-To store weak references instead of UIDs you would register such a
-factory as a component adapting the context.  The factory
-automatically provides the interface which defines the field.
diff --git a/plone/app/z3cform/queryselect/__init__.py b/plone/app/z3cform/queryselect/__init__.py
deleted file mode 100644
index 56669c6..0000000
--- a/plone/app/z3cform/queryselect/__init__.py
+++ /dev/null
@@ -1,83 +0,0 @@
-from Products.CMFCore import utils as cmfutils
-from zope import interface
-import persistent.wref
-import z3c.formwidget.query.interfaces
-import zope.schema.interfaces
-import zope.schema.vocabulary
-import logging
-
-
-logger = logging.getLogger('plone.app.z3cform')
-
-
-class ArchetypesContentSource(object):
-    interface.implements(z3c.formwidget.query.interfaces.IQuerySource)
-
-    def __init__(self, context):
-        logger.warn("Deprecation Warning\nplone.app.z3cform.queryselect.ArchetypesContentSource "
-                    "is deprecated and will be removed in Plone 4.1")
-        self.context = context
-
-    def __contains__(self, uid):
-        """Verify the item exists."""
-        return bool(self.catalog(uid=uid))
-
-    def __iter__(self):
-        return [].__iter__()
-
-    @property
-    def catalog(self):
-        return cmfutils.getToolByName(self.context, 'portal_catalog')
-
-    def getTermByToken(self, token):
-        uid = token
-        brains = self.catalog(UID=uid)
-        if len(brains) > 0:
-            return self._term_for_brain(brains[0])
-        raise LookupError(token)
-
-    def getTerm(self, value):
-        uid = value
-        brains = self.catalog(UID=uid)
-        if len(brains) > 0:
-            return self._term_for_brain(brains[0])
-        raise LookupError(value)
-
-    def search(self, query_string, limit=20):
-        brains = self.catalog(SearchableText=query_string)[:limit]
-        return map(self._term_for_brain, brains)
-
-    def _term_for_brain(self, brain):
-        return zope.schema.vocabulary.SimpleTerm(
-            brain.UID,
-            brain.UID,
-            brain.Title
-        )
-
-
-class ArchetypesContentSourceBinder(object):
-    interface.implements(zope.schema.interfaces.IContextSourceBinder)
-
-    def __call__(self, context):
-        return ArchetypesContentSource(context)
-
-
-def uid2wref(field):
-    class Adapter(object):
-        interface.implements(field.interface)
-
-        def __init__(self, context):
-            self.context = context
-
-    def _get_items(self):
-        items = filter(None, (wref() for wref in self.context.items))
-        return [item.UID() for item in items]
-
-    def _set_items(self, uids):
-        catalog = cmfutils.getToolByName(self.context, 'portal_catalog')
-        brains = catalog(UID=tuple(uids))
-        items = [brain.getObject() for brain in brains]
-        self.context.items = map(persistent.wref.WeakRef, items)
-
-    setattr(Adapter, field.__name__, property(_get_items, _set_items))
-    return Adapter
diff --git a/plone/app/z3cform/templates.py b/plone/app/z3cform/templates.py
index 11d4336..2ac7445 100644
--- a/plone/app/z3cform/templates.py
+++ b/plone/app/z3cform/templates.py
@@ -10,11 +10,12 @@
 import z3c.form.interfaces
 
 
-path = lambda p: os.path.join(
-    os.path.dirname(plone.app.z3cform.__file__),
-    'templates',
-    p
-)
+def path(filepart):
+    return os.path.join(
+        os.path.dirname(plone.app.z3cform.__file__),
+        'templates',
+        filepart
+    )
 
 # Override the layout wrapper view default template with a more Plone-looking
 # one
@@ -34,6 +35,7 @@
 
 # The ploneform-macros view
 class Macros(BrowserView):
+
     def __getitem__(self, key):
         return self.index.macros[key]
 
diff --git a/plone/app/z3cform/tests/__init__.py b/plone/app/z3cform/tests/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/z3cform/tests/__init__.py
+++ b/plone/app/z3cform/tests/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/z3cform/tests/example.py b/plone/app/z3cform/tests/example.py
index c1e8fc8..0c1a286 100644
--- a/plone/app/z3cform/tests/example.py
+++ b/plone/app/z3cform/tests/example.py
@@ -1,8 +1,13 @@
+# -*- coding: utf-8 -*-
 from plone.z3cform.layout import FormWrapper
-from z3c.form import form, field, button, group
+from z3c.form import button
+from z3c.form import field
+from z3c.form import form
+from z3c.form import group
 from z3c.form.contentprovider import ContentProviders
 from z3c.form.interfaces import IFieldsAndContentProvidersForm
-from zope import interface, schema
+from zope import interface
+from zope import schema
 from zope.contentprovider.provider import ContentProviderBase
 from zope.interface import implements
 
@@ -12,6 +17,7 @@ class MySchema(interface.Interface):
 
 
 class MyContentProvider(ContentProviderBase):
+
     def render(self):
         return "My test content provider"
 
diff --git a/plone/app/z3cform/tests/layer.py b/plone/app/z3cform/tests/layer.py
index 1cef77b..9e87553 100644
--- a/plone/app/z3cform/tests/layer.py
+++ b/plone/app/z3cform/tests/layer.py
@@ -1,6 +1,6 @@
-from plone.app.testing.layers import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import IntegrationTesting
 from plone.testing import z2
 
 
diff --git a/plone/app/z3cform/tests/test_csrf.py b/plone/app/z3cform/tests/test_csrf.py
index e9873fe..0f95d3b 100644
--- a/plone/app/z3cform/tests/test_csrf.py
+++ b/plone/app/z3cform/tests/test_csrf.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.tests.case import KeyringTestCase
 
 
@@ -13,6 +14,7 @@ class DummyForm(object):
             enableCSRFProtection = True
 
         class DummyAction(object):
+
             def isExecuted(self):
                 return True
 
diff --git a/plone/app/z3cform/tests/test_objectsubform.py b/plone/app/z3cform/tests/test_objectsubform.py
index 275c45d..bce0307 100644
--- a/plone/app/z3cform/tests/test_objectsubform.py
+++ b/plone/app/z3cform/tests/test_objectsubform.py
@@ -1,12 +1,15 @@
-from plone.app.testing import TEST_USER_ID
+# -*- coding: utf-8 -*-
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
 from plone.app.z3cform.utils import closest_content
-from z3c.form import form, field
+from z3c.form import field
+from z3c.form import form
 from z3c.form.object import registerFactoryAdapter
-from zope import interface, schema
+from zope import interface
 from zope import publisher
+from zope import schema
 from zope.globalrequest import setRequest
 
 import unittest
diff --git a/plone/app/z3cform/tests/test_widget.py b/plone/app/z3cform/tests/test_widget.py
index ff44f4e..4569c28 100644
--- a/plone/app/z3cform/tests/test_widget.py
+++ b/plone/app/z3cform/tests/test_widget.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.app.z3cform.wysiwyg.widget import WysiwygWidget
 from zope import interface
@@ -29,7 +30,8 @@ def setUp(self):
     def test_missing_aq_chain(self):
         # testing support for contents witout Acquisiion chain (for avoid
         # regression)
-        # See https://github.com/plone/plone.app.z3cform/commit/587e229e267705a4fd48c6c51a76f849196fceba#commitcomment-2630299
+        # See
+        # https://github.com/plone/plone.app.z3cform/commit/587e229e267705a4fd48c6c51a76f849196fceba#commitcomment-2630299
         obj = NoAcquisitionAware()
         widget = WysiwygWidget(obj.request)
         widget.form = TestForm()
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 28818ef..dc2a8bd 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -2,22 +2,24 @@
 from datetime import date
 from datetime import datetime
 from mock import Mock
-from plone.app.testing import TEST_USER_ID
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.app.widgets.testing import ExampleVocabulary
 from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
 from plone.app.widgets.testing import TestRequest
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
+from plone.app.z3cform.widget import BaseWidget
 from plone.dexterity.fti import DexterityFTI
 from plone.registry.interfaces import IRegistry
 from plone.testing.zca import UNIT_TESTING
+from Products.CMFPlone.interfaces import IMarkupSchema
 from z3c.form.interfaces import IFormLayer
 from z3c.form.widget import FieldWidget
 from zope.component import getUtility
 from zope.component import provideUtility
 from zope.component.globalregistry import base
-from zope.interface import Interface
 from zope.interface import alsoProvides
+from zope.interface import Interface
 from zope.schema import Choice
 from zope.schema import Date
 from zope.schema import Datetime
@@ -25,14 +27,11 @@
 from zope.schema import Set
 from zope.schema import TextLine
 from zope.schema import Tuple
-from plone.app.z3cform.widget import BaseWidget
 
 import mock
 import pytz
 import unittest
 
-from Products.CMFPlone.interfaces import IMarkupSchema
-
 
 class BaseWidgetTests(unittest.TestCase):
 
@@ -757,7 +756,7 @@ def test_widget_choice(self):
                     'allowNewItems': 'false',
                     'vocabularyUrl':
                     'http://127.0.0.1/++widget++choicefield/@@getSource',
-                    },
+                },
             },
             widget._base_args(),
         )
@@ -890,7 +889,8 @@ def test_keywords_can_add(self):
         widget = AjaxSelectWidget(self.request)
         widget.context = portal
         widget.vocabulary = 'plone.app.vocabularies.Keywords'
-        self.assertEqual(widget._base_args()['pattern_options']['allowNewItems'], 'true')
+        self.assertEqual(widget._base_args()['pattern_options'][
+                         'allowNewItems'], 'true')
 
     def test_keywords_cannot_add(self):
         from plone.app.z3cform.widget import AjaxSelectWidget
@@ -899,7 +899,8 @@ def test_keywords_cannot_add(self):
         widget = AjaxSelectWidget(self.request)
         widget.context = portal
         widget.vocabulary = 'plone.app.vocabularies.Keywords'
-        self.assertEqual(widget._base_args()['pattern_options']['allowNewItems'], 'false')
+        self.assertEqual(widget._base_args()['pattern_options'][
+                         'allowNewItems'], 'false')
 
 
 class QueryStringWidgetTests(unittest.TestCase):
@@ -1014,7 +1015,7 @@ def test_multiple_selection(self):
         self.assertEqual(
             patterns_options['vocabularyUrl'],
             'fake_url/@@getVocabulary?name=foobar&field=selectfield',
-            )
+        )
 
     def test_converter_RelationChoice(self):
         from plone.app.z3cform.converters import \
diff --git a/plone/app/z3cform/tests/tests.py b/plone/app/z3cform/tests/tests.py
index 5ffbbc4..602d8d6 100644
--- a/plone/app/z3cform/tests/tests.py
+++ b/plone/app/z3cform/tests/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
 from plone.browserlayer.layer import mark_layer
 from zope.traversing.interfaces import BeforeTraverseEvent
@@ -6,6 +7,7 @@
 import unittest
 import zope.component.testing
 
+
 ROBOT_TEST_LEVEL = 5
 
 
@@ -54,12 +56,6 @@ def test_suite():
             setUp=zope.component.testing.setUp,
             tearDown=zope.component.testing.tearDown,
         ),
-        doctest.DocFileSuite(
-            'queryselect/README.rst',
-            package='plone.app.z3cform',
-            setUp=zope.component.testing.setUp,
-            tearDown=zope.component.testing.tearDown,
-        ),
         doctest.DocTestSuite(
             'plone.app.z3cform.wysiwyg.widget',
             package='plone.app.z3cform',
diff --git a/plone/app/z3cform/utils.py b/plone/app/z3cform/utils.py
index 6d8d6b9..921a2af 100644
--- a/plone/app/z3cform/utils.py
+++ b/plone/app/z3cform/utils.py
@@ -2,6 +2,8 @@
 from Products.CMFCore.interfaces import IContentish
 from Products.CMFCore.interfaces import IFolderish
 from zope.component.hooks import getSite
+
+
 try:
     from zope.globalrequest import getRequest
     getRequest  # pyflakes
diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py
index f3b3e2e..b025536 100644
--- a/plone/app/z3cform/widget.py
+++ b/plone/app/z3cform/widget.py
@@ -1,15 +1,13 @@
 # -*- coding: utf-8 -*-
 from Acquisition import ImplicitAcquisitionWrapper
-from UserDict import UserDict
-from Products.CMFCore.utils import getToolByName
 from lxml import etree
 from plone.app.textfield.value import RichTextValue
-from plone.app.textfield.widget import RichTextWidget as patextfield_RichTextWidget
+from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget
+from plone.app.widgets.base import dict_merge
 from plone.app.widgets.base import InputWidget
 from plone.app.widgets.base import SelectWidget as BaseSelectWidget
 from plone.app.widgets.base import TextareaWidget
-from plone.app.widgets.base import dict_merge
-from plone.app.widgets.utils import NotImplemented
+from plone.app.widgets.utils import first_weekday
 from plone.app.widgets.utils import get_ajaxselect_options
 from plone.app.widgets.utils import get_date_options
 from plone.app.widgets.utils import get_datetime_options
@@ -17,38 +15,41 @@
 from plone.app.widgets.utils import get_relateditems_options
 from plone.app.widgets.utils import get_tinymce_options
 from plone.app.widgets.utils import get_widget_form
-from plone.registry.interfaces import IRegistry
+from plone.app.widgets.utils import NotImplemented as PatternNotImplemented
+from plone.app.z3cform.converters import DatetimeWidgetConverter
+from plone.app.z3cform.converters import DateWidgetConverter
+from plone.app.z3cform.interfaces import IAjaxSelectWidget
+from plone.app.z3cform.interfaces import IDatetimeWidget
+from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import IQueryStringWidget
+from plone.app.z3cform.interfaces import IRelatedItemsWidget
+from plone.app.z3cform.interfaces import IRichTextWidget
+from plone.app.z3cform.interfaces import ISelectWidget
 from plone.app.z3cform.utils import closest_content
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import IEditingSchema
+from UserDict import UserDict
 from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget
 from z3c.form.browser.text import TextWidget as z3cform_TextWidget
 from z3c.form.browser.widget import HTMLInputWidget
 from z3c.form.interfaces import IEditForm
-from z3c.form.interfaces import IForm
 from z3c.form.interfaces import IFieldWidget
+from z3c.form.interfaces import IForm
 from z3c.form.interfaces import NO_VALUE
 from z3c.form.widget import FieldWidget
 from z3c.form.widget import Widget
-from zope.component import getUtility
 from zope.component import ComponentLookupError
+from zope.component import getUtility
 from zope.i18n import translate
 from zope.interface import implementer
-from zope.interface import implementsOnly
+from zope.interface import implementer_only
 from zope.schema.interfaces import IChoice
 from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import ISequence
-from plone.app.widgets.utils import first_weekday
-
-from plone.app.z3cform.converters import (
-    DateWidgetConverter, DatetimeWidgetConverter)
-from plone.app.z3cform.interfaces import (
-    IDatetimeWidget, IDateWidget, IAjaxSelectWidget,
-    IRelatedItemsWidget, IQueryStringWidget, IRichTextWidget,
-    ISelectWidget)
 
 import json
 
-from Products.CMFPlone.interfaces import IEditingSchema
-
 
 class BaseWidget(Widget):
     """Base widget for z3c.form."""
@@ -60,7 +61,7 @@ class BaseWidget(Widget):
 
     def _base(self, pattern, pattern_options={}):
         """Base widget class."""
-        raise NotImplemented
+        raise PatternNotImplemented
 
     def _base_args(self):
         """Method which will calculate _base class arguments.
@@ -73,7 +74,7 @@ def _base_args(self):
         :rtype: dict
         """
         if self.pattern is None:
-            raise NotImplemented("'pattern' option is not provided.")
+            raise PatternNotImplemented("'pattern' option is not provided.")
         return {
             'pattern': self.pattern,
             'pattern_options': self.pattern_options.copy(),
@@ -90,6 +91,7 @@ def render(self):
         return self._base(**self._base_args()).render()
 
 
+@implementer_only(IDateWidget)
 class DateWidget(BaseWidget, HTMLInputWidget):
     """Date widget for z3c.form."""
 
@@ -97,8 +99,6 @@ class DateWidget(BaseWidget, HTMLInputWidget):
     _converter = DateWidgetConverter
     _formater = 'date'
 
-    implementsOnly(IDateWidget)
-
     pattern = 'pickadate'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -153,6 +153,7 @@ def render(self):
         return field_value.ctime()
 
 
+@implementer_only(IDatetimeWidget)
 class DatetimeWidget(DateWidget, HTMLInputWidget):
     """Datetime widget for z3c.form.
 
@@ -165,8 +166,6 @@ class DatetimeWidget(DateWidget, HTMLInputWidget):
     _converter = DatetimeWidgetConverter
     _formater = 'dateTime'
 
-    implementsOnly(IDatetimeWidget)
-
     pattern_options = DateWidget.pattern_options.copy()
 
     default_timezone = None
@@ -202,13 +201,12 @@ def _base_args(self):
         return args
 
 
+@implementer_only(ISelectWidget)
 class SelectWidget(BaseWidget, z3cform_SelectWidget):
     """Select widget for z3c.form."""
 
     _base = BaseSelectWidget
 
-    implementsOnly(ISelectWidget)
-
     pattern = 'select2'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -277,13 +275,12 @@ def extract(self, default=NO_VALUE):
         return self.request.get(self.name, default)
 
 
+@implementer_only(IAjaxSelectWidget)
 class AjaxSelectWidget(BaseWidget, z3cform_TextWidget):
     """Ajax select widget for z3c.form."""
 
     _base = InputWidget
 
-    implementsOnly(IAjaxSelectWidget)
-
     pattern = 'select2'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -327,7 +324,10 @@ def _base_args(self):
         view_context = get_widget_form(self)
         # For EditForms and non-Forms (in tests), the vocabulary is looked
         # up on the context, otherwise on the view
-        if IEditForm.providedBy(view_context) or not IForm.providedBy(view_context):
+        if (
+            IEditForm.providedBy(view_context) or
+            not IForm.providedBy(view_context)
+        ):
             view_context = context
 
         vocabulary_name = self.vocabulary
@@ -372,13 +372,12 @@ def _base_args(self):
         return args
 
 
+@implementer_only(IRelatedItemsWidget)
 class RelatedItemsWidget(BaseWidget, z3cform_TextWidget):
     """RelatedItems widget for z3c.form."""
 
     _base = InputWidget
 
-    implementsOnly(IRelatedItemsWidget)
-
     pattern = 'relateditems'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -393,8 +392,11 @@ def update(self):
         field = getattr(self, 'field', None)
         if ICollection.providedBy(self.field):
             field = self.field.value_type
-        if (not self.vocabulary and field is not None and
-                getattr(field, 'vocabularyName', None)):
+        if (
+            not self.vocabulary and
+            field is not None and
+            getattr(field, 'vocabularyName', None)
+        ):
             self.vocabulary = field.vocabularyName
             self.vocabulary_override = True
         else:
@@ -433,32 +435,46 @@ def _base_args(self):
         view_context = get_widget_form(self)
         # For EditForms and non-Forms (in tests), the vocabulary is looked
         # up on the context, otherwise on the view
-        if IEditForm.providedBy(view_context) or not IForm.providedBy(view_context):
+        if (
+            IEditForm.providedBy(view_context) or
+            not IForm.providedBy(view_context)
+        ):
             view_context = context
 
         args['pattern_options'] = dict_merge(
-            get_relateditems_options(view_context, args['value'],
-                                     self.separator, vocabulary_name,
-                                     self.vocabulary_view, field_name),
-            args['pattern_options'])
-
-        if not self.vocabulary_override:  # widget vocab takes precedence over field
-            if field and getattr(field, 'vocabulary', None):
-                form_url = self.request.getURL()
-                source_url = "%s/++widget++%s/@@getSource" % (
-                    form_url, self.name)
-                args['pattern_options']['vocabularyUrl'] = source_url
+            get_relateditems_options(
+                view_context,
+                args['value'],
+                self.separator,
+                vocabulary_name,
+                self.vocabulary_view,
+                field_name,
+            ),
+            args['pattern_options']
+        )
+
+        if (
+            not self.vocabulary_override and
+            field and
+            getattr(field, 'vocabulary', None)
+        ):
+            # widget vocab takes precedence over field
+            form_url = self.request.getURL()
+            source_url = "{0:s}/++widget++{1:s}/@@getSource".format(
+                form_url,
+                self.name
+            )
+            args['pattern_options']['vocabularyUrl'] = source_url
 
         return args
 
 
+@implementer_only(IQueryStringWidget)
 class QueryStringWidget(BaseWidget, z3cform_TextWidget):
     """QueryString widget for z3c.form."""
 
     _base = InputWidget
 
-    implementsOnly(IQueryStringWidget)
-
     pattern = 'querystring'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -488,13 +504,12 @@ def _base_args(self):
         return args
 
 
-class RichTextWidget(BaseWidget, patextfield_RichTextWidget):
+@implementer_only(IRichTextWidget)
+class RichTextWidget(BaseWidget, patext_RichTextWidget):
     """TinyMCE widget for z3c.form."""
 
     _base = TextareaWidget
 
-    implementsOnly(IRichTextWidget)
-
     pattern_options = BaseWidget.pattern_options.copy()
 
     def __init__(self, *args, **kwargs):
diff --git a/plone/app/z3cform/wysiwyg/__init__.py b/plone/app/z3cform/wysiwyg/__init__.py
index 1e3e631..80e5486 100644
--- a/plone/app/z3cform/wysiwyg/__init__.py
+++ b/plone/app/z3cform/wysiwyg/__init__.py
@@ -1,2 +1,3 @@
+# -*- coding: utf-8 -*-
 # Convenience import
 from plone.app.z3cform.wysiwyg.widget import WysiwygFieldWidget
diff --git a/plone/app/z3cform/wysiwyg/widget.py b/plone/app/z3cform/wysiwyg/widget.py
index afe260d..e5ccd4d 100644
--- a/plone/app/z3cform/wysiwyg/widget.py
+++ b/plone/app/z3cform/wysiwyg/widget.py
@@ -1,10 +1,14 @@
-import logging
+# -*- coding: utf-8 -*-
+from zope.component import adapter
+from zope.component.hooks import getSite
+from zope.interface import implementer
+from zope.interface import implementer_only
 
 import Acquisition
+import logging
 import z3c.form.browser.textarea
 import z3c.form.interfaces
 import z3c.form.widget
-from zope.component.hooks import getSite
 import zope.interface
 import zope.schema.interfaces
 
@@ -16,8 +20,8 @@ class IWysiwygWidget(z3c.form.interfaces.ITextAreaWidget):
     pass
 
 
+@implementer_only(IWysiwygWidget)
 class WysiwygWidget(z3c.form.browser.textarea.TextAreaWidget):
-    zope.interface.implementsOnly(IWysiwygWidget)
 
     klass = u'kupu-widget'
     value = u''
@@ -35,11 +39,13 @@ def update(self):
                 self.form.context, getSite())
 
 
-@zope.component.adapter(zope.schema.interfaces.IField,
-                        z3c.form.interfaces.IFormLayer)
-@zope.interface.implementer(z3c.form.interfaces.IFieldWidget)
+@adapter(zope.schema.interfaces.IField, z3c.form.interfaces.IFormLayer)
+@implementer(z3c.form.interfaces.IFieldWidget)
 def WysiwygFieldWidget(field, request):
     """IFieldWidget factory for WysiwygWidget."""
-    logger.warn("Deprecation Warning\nplone.app.z3cform.wysiwyg.WysiwygFieldWidget "
-                "is deprecated and will be removed in Plone 5.1")
+    logger.warn(
+        'plone.app.z3cform.wysiwyg.WysiwygFieldWidget is deprecated and'
+        'will be removed in Plone 5.1',
+        DeprecationWarning
+    )
     return z3c.form.widget.FieldWidget(field, WysiwygWidget(request))
diff --git a/setup.py b/setup.py
index 2107874..eeff5db 100644
--- a/setup.py
+++ b/setup.py
@@ -1,24 +1,24 @@
+from setuptools import find_packages
+from setuptools import setup
+
 import os
-from setuptools import setup, find_packages
 
 
 def read(*rnames):
     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
 
-version = '1.2.1.dev0'
+version = '2.0.0.dev0'
 
 long_description = (
-    read('README.rst')
-    + '\n' +
-    read('plone', 'app', 'z3cform', 'wysiwyg', 'README.rst')
-    + '\n' +
-    read('plone', 'app', 'z3cform', 'queryselect', 'README.rst')
-    + '\n' +
-    read('plone', 'app', 'z3cform', 'inline_validation.rst')
-    + '\n' +
-    read('CHANGES.rst')
-    + '\n'
-    )
+    read('README.rst') +
+    '\n' +
+    read('plone', 'app', 'z3cform', 'wysiwyg', 'README.rst') +
+    '\n' +
+    read('plone', 'app', 'z3cform', 'inline_validation.rst') +
+    '\n' +
+    read('CHANGES.rst') +
+    '\n'
+)
 
 setup(
     name='plone.app.z3cform',


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2016-03-10T19:14:00+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/e37862b02dfa33d9d3d5c116f93ccf81ed320023

a world full of flake 8 happiness

Files changed:
M .isort.cfg
M plone/app/__init__.py
M plone/app/z3cform/inline_validation.py
M plone/app/z3cform/layout.py
M plone/app/z3cform/objectsubform.py
M plone/app/z3cform/templates.py
M plone/app/z3cform/tests/example.py
M plone/app/z3cform/tests/layer.py
M plone/app/z3cform/tests/test_objectsubform.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/utils.py
M plone/app/z3cform/widget.py
M plone/app/z3cform/wysiwyg/__init__.py

diff --git a/.isort.cfg b/.isort.cfg
index fb79921..dd9f25d 100644
--- a/.isort.cfg
+++ b/.isort.cfg
@@ -1,5 +1,6 @@
 [settings]
-force_alphabetical_sort=True
-force_single_line=True
-lines_after_imports=2
-line_length=200
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/z3cform/inline_validation.py b/plone/app/z3cform/inline_validation.py
index c55681b..3ab940f 100644
--- a/plone/app/z3cform/inline_validation.py
+++ b/plone/app/z3cform/inline_validation.py
@@ -20,14 +20,16 @@ def __call__(self, fname=None, fset=None):
         if fname is None:
             return json.dumps(res)
 
-        form = self.context
-        if hasattr(aq_base(form), 'form_instance'):
-            form = form.form_instance
-        if not hasattr(form, 'update'):
+        try:
+            form = aq_base(self.context).form_instance
+        except AttributeError:
+            form = self.context
+        try:
+            aq_base(form).update()
+        except AttributeError:
             return json.dumps(res)
-        form.update()
 
-        if getattr(form, "extractData", None):
+        if getattr(form, 'extractData', None):
             data, errors = form.extractData()
         else:
             return json.dumps(res)
@@ -39,7 +41,8 @@ def __call__(self, fname=None, fset=None):
                 form = form.groups[fset]
             except (ValueError, TypeError):
                 # try to match fieldset on group name
-                _name = lambda g: getattr(g, '__name__', None) or g.label
+                def _name(group):
+                    return getattr(group, '__name__', group.label)
                 group_match = filter(
                     lambda group: normalizeString(_name(group)) == fset,
                     form.groups,
diff --git a/plone/app/z3cform/layout.py b/plone/app/z3cform/layout.py
index 6fbb60d..e6eea71 100644
--- a/plone/app/z3cform/layout.py
+++ b/plone/app/z3cform/layout.py
@@ -3,7 +3,7 @@
 
 
 zope.deferredimport.deprecated(
-    "Import from plone.z3cform.layout instead.",
+    'Import from plone.z3cform.layout instead.',
     FormWrapper='plone.z3cform.layout:FormWrapper',
     wrap_form='plone.z3cform.layout:wrap_form',
 )
diff --git a/plone/app/z3cform/objectsubform.py b/plone/app/z3cform/objectsubform.py
index 2f4ef1b..99ec17a 100644
--- a/plone/app/z3cform/objectsubform.py
+++ b/plone/app/z3cform/objectsubform.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.z3cform.utils import closest_content
 from z3c.form.object import ObjectSubForm as BaseObjectSubForm
 from z3c.form.object import SubformAdapter as BaseSubformAdapter
diff --git a/plone/app/z3cform/templates.py b/plone/app/z3cform/templates.py
index 2ac7445..bf4c820 100644
--- a/plone/app/z3cform/templates.py
+++ b/plone/app/z3cform/templates.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Five.browser import BrowserView
 from Products.Five.browser.metaconfigure import ViewMixinForTemplates
 from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
diff --git a/plone/app/z3cform/tests/example.py b/plone/app/z3cform/tests/example.py
index 0c1a286..8994390 100644
--- a/plone/app/z3cform/tests/example.py
+++ b/plone/app/z3cform/tests/example.py
@@ -13,13 +13,13 @@
 
 
 class MySchema(interface.Interface):
-    age = schema.Int(title=u"Age")
+    age = schema.Int(title=u'Age')
 
 
 class MyContentProvider(ContentProviderBase):
 
     def render(self):
-        return "My test content provider"
+        return 'My test content provider'
 
 
 class MyForm(form.Form):
diff --git a/plone/app/z3cform/tests/layer.py b/plone/app/z3cform/tests/layer.py
index 9e87553..327c278 100644
--- a/plone/app/z3cform/tests/layer.py
+++ b/plone/app/z3cform/tests/layer.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.layers import IntegrationTesting
@@ -30,4 +31,5 @@ def setUpPloneSite(self, portal):
 PAZ3CForm_FIXTURE = PAZ3CFormLayer()
 PAZ3CForm_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PAZ3CForm_FIXTURE,),
-    name="plone.app.z3cform:Integration")
+    name='plone.app.z3cform:Integration'
+)
diff --git a/plone/app/z3cform/tests/test_objectsubform.py b/plone/app/z3cform/tests/test_objectsubform.py
index bce0307..2e049d7 100644
--- a/plone/app/z3cform/tests/test_objectsubform.py
+++ b/plone/app/z3cform/tests/test_objectsubform.py
@@ -34,7 +34,7 @@ def getId(self):
         return self.__name__ or ''
 
     def __repr__(self):
-        return "<SubObject title='%s'>" % self.title
+        return "<SubObject title='{0:s}'>".format(self.title)
 
 
 registerFactoryAdapter(ISubObject, SubObject)
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index dc2a8bd..137f03f 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -545,10 +545,10 @@ def test_widget_extract(self):
         )
         widget.name = 'selectfield'
         self.request.form['selectfield'] = 'one'
-        self.assertEquals(widget.extract(), 'one')
+        self.assertEqual(widget.extract(), 'one')
         widget.multiple = True
         self.request.form['selectfield'] = 'one;two'
-        self.assertEquals(widget.extract(), 'one;two')
+        self.assertEqual(widget.extract(), 'one;two')
 
     def test_data_converter_list(self):
         from plone.app.z3cform.widget import SelectWidget
@@ -765,9 +765,9 @@ def test_widget_addform_url_on_addform(self):
         from plone.app.z3cform.widget import AjaxSelectWidget
         widget = AjaxSelectWidget(self.request)
         form = Mock(parentForm=None)
-        from zope.interface import directlyProvides
+        from zope.interface import directlyProvides  # noqa
         from z3c.form.interfaces import IAddForm
-        directlyProvides(form, IAddForm)
+        directlyProvides(form, IAddForm)  # noqa
         form.request = {'URL': 'http://addform_url'}
         widget.form = form
         self.assertEqual(
@@ -987,7 +987,7 @@ def test_single_selection(self):
         widget.update()
         base_args = widget._base_args()
         pattern_options = base_args['pattern_options']
-        self.assertEquals(pattern_options.get('maximumSelectionSize', 0), 1)
+        self.assertEqual(pattern_options.get('maximumSelectionSize', 0), 1)
 
     def test_multiple_selection(self):
         """The pattern_options key maximumSelectionSize shouldn't be
@@ -1026,7 +1026,10 @@ def test_converter_RelationChoice(self):
         converter = RelationChoiceRelatedItemsWidgetConverter(
             TextLine(), widget)
 
-        with mock.patch('plone.app.z3cform.converters.IUUID', return_value='id'):
+        with mock.patch(
+            'plone.app.z3cform.converters.IUUID',
+            return_value='id'
+        ):
             self.assertEqual(converter.toWidgetValue('obj'), 'id')
         self.assertEqual(converter.toWidgetValue(None), None)
 
@@ -1049,7 +1052,9 @@ def test_converter_RelationList(self):
 
         self.assertEqual(converter.toWidgetValue(None), None)
         with mock.patch(
-                'plone.app.z3cform.converters.IUUID', side_effect=['id1', 'id2']):
+            'plone.app.z3cform.converters.IUUID',
+            side_effect=['id1', 'id2']
+        ):
             self.assertEqual(
                 converter.toWidgetValue(['obj1', 'obj2']), 'id1;id2')
 
@@ -1135,8 +1140,10 @@ def test_widget_params(self):
         self.assertEqual(base_args['pattern'], 'tinymce')
 
         prependToUrl = '/plone/resolveuid/'
-        self.assertEquals(base_args['pattern_options']['prependToUrl'],
-                          prependToUrl)
+        self.assertEqual(
+            base_args['pattern_options']['prependToUrl'],
+            prependToUrl
+        )
         self.assertEqual(
             base_args['pattern_options']['upload']['relativePath'],
             '@@fileUpload')
@@ -1150,7 +1157,7 @@ def test_widget_values(self):
         widget.context = self.portal
         widget.value = RichTextValue(u'Lorem ipsum \u2026')
         base_args = widget._base_args()
-        self.assertEquals(base_args['value'], u'Lorem ipsum \u2026')
+        self.assertEqual(base_args['value'], u'Lorem ipsum \u2026')
 
     def _set_mimetypes(self, default='text/html', allowed=('text/html')):
         """Set portal's mimetype settings.
@@ -1158,7 +1165,7 @@ def _set_mimetypes(self, default='text/html', allowed=('text/html')):
         if IMarkupSchema:
             registry = getUtility(IRegistry)
             self.settings = registry.forInterface(
-                IMarkupSchema, prefix="plone")
+                IMarkupSchema, prefix='plone')
             self.settings.default_type = default
             self.settings.allowed_types = allowed
 
diff --git a/plone/app/z3cform/utils.py b/plone/app/z3cform/utils.py
index 921a2af..42e94e6 100644
--- a/plone/app/z3cform/utils.py
+++ b/plone/app/z3cform/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFCore.interfaces import IContentish
 from Products.CMFCore.interfaces import IFolderish
diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py
index b025536..731849f 100644
--- a/plone/app/z3cform/widget.py
+++ b/plone/app/z3cform/widget.py
@@ -56,8 +56,10 @@ class BaseWidget(Widget):
 
     pattern = None
     pattern_options = {}
-    _adapterValueAttributes = (Widget._adapterValueAttributes +
-                               ('pattern_options',))
+    _adapterValueAttributes = (
+        Widget._adapterValueAttributes +
+        ('pattern_options',)
+    )
 
     def _base(self, pattern, pattern_options={}):
         """Base widget class."""
@@ -144,7 +146,9 @@ def render(self):
             return u''
 
         formatter = self.request.locale.dates.getFormatter(
-            self._formater, "short")
+            self._formater,
+            'short'
+        )
         if field_value.year > 1900:
             return formatter.format(field_value)
 
@@ -348,7 +352,10 @@ def _base_args(self):
 
         if field and getattr(field, 'vocabulary', None):
             form_url = self.request.getURL()
-            source_url = "%s/++widget++%s/@@getSource" % (form_url, self.name)
+            source_url = '{0:s}/++widget++{1:s}/@@getSource'.format(
+                form_url,
+                self.name
+            )
             args['pattern_options']['vocabularyUrl'] = source_url
 
         # ISequence represents an orderable collection
@@ -460,7 +467,7 @@ def _base_args(self):
         ):
             # widget vocab takes precedence over field
             form_url = self.request.getURL()
-            source_url = "{0:s}/++widget++{1:s}/@@getSource".format(
+            source_url = '{0:s}/++widget++{1:s}/@@getSource'.format(
                 form_url,
                 self.name
             )
@@ -539,7 +546,7 @@ def pattern(self):
             except AttributeError:
                 default = 'tinymce'
                 available = ['TinyMCE']
-            tool = getToolByName(self.wrapped_context(), "portal_membership")
+            tool = getToolByName(self.wrapped_context(), 'portal_membership')
             member = tool.getAuthenticatedMember()
             editor = member.getProperty('wysiwyg_editor')
             if editor in available:
@@ -557,10 +564,14 @@ def _base_args(self):
             self.field.getName(), value)).decode('utf-8')
 
         args.setdefault('pattern_options', {})
-        merged_options = dict_merge(get_tinymce_options(self.context,
-                                                        self.field,
-                                                        self.request),  # noqa
-                                    args['pattern_options'])
+        merged_options = dict_merge(
+            get_tinymce_options(
+                self.context,
+                self.field,
+                self.request
+            ),
+            args['pattern_options']
+        )
         args['pattern_options'] = merged_options
 
         return args
@@ -588,7 +599,7 @@ def render(self):
                 del base_args['pattern_options']
                 textarea_widget = self._base(None, None, **base_args)
                 textarea_widget.klass = ''
-                mt_pattern_name = '{}{}'.format(
+                mt_pattern_name = '{0}{1}'.format(
                     self._base._klass_prefix,
                     'textareamimetypeselector'
                 )
@@ -599,11 +610,13 @@ def render(self):
                 value_mime_type = self.value.mimeType if self.value\
                     else self.field.default_mime_type
                 mt_select = etree.Element('select')
-                mt_select.attrib['id'] = '{}_text_format'.format(self.id)
-                mt_select.attrib['name'] = '{}.mimeType'.format(self.name)
+                mt_select.attrib['id'] = '{0}_text_format'.format(self.id)
+                mt_select.attrib['name'] = '{0}.mimeType'.format(self.name)
                 mt_select.attrib['class'] = mt_pattern_name
-                mt_select.attrib['{}{}'.format('data-', mt_pattern_name)] =\
-                    json.dumps({
+                mt_select.attrib[
+                    'data-{0}'.format(mt_pattern_name)
+                ] = json.dumps(
+                    {
                         'textareaName': self.name,
                         'widgets': {
                             'text/html': {  # TODO: currently, we only support
@@ -613,7 +626,8 @@ def render(self):
                                 'patternOptions': pattern_options
                             }
                         }
-                    })
+                    }
+                )
 
                 # Create a list of allowed mime types
                 for mt in allowed_mime_types:
@@ -625,7 +639,7 @@ def render(self):
                     mt_select.append(opt)
 
                 # Render the combined widget
-                rendered = '{}\n{}'.format(
+                rendered = '{0}\n{1}'.format(
                     textarea_widget.render(),
                     etree.tostring(mt_select)
                 )
diff --git a/plone/app/z3cform/wysiwyg/__init__.py b/plone/app/z3cform/wysiwyg/__init__.py
index 80e5486..f7b239e 100644
--- a/plone/app/z3cform/wysiwyg/__init__.py
+++ b/plone/app/z3cform/wysiwyg/__init__.py
@@ -1,3 +1,6 @@
 # -*- coding: utf-8 -*-
 # Convenience import
 from plone.app.z3cform.wysiwyg.widget import WysiwygFieldWidget
+
+
+WysiwygFieldWidget  # flake 8 happiness


Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2016-03-11T11:09:10+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/40a9616fba5ab0766ad3232bd49c84defb09c0b8

Merge pull request #43 from plone/cleanup

Cleanup, housekeeping and deprecations

Files changed:
A .isort.cfg
A plone/app/z3cform/objectsubform.py
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/z3cform/__init__.py
M plone/app/z3cform/converters.py
M plone/app/z3cform/csrf.py
M plone/app/z3cform/inline_validation.py
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/layout.py
M plone/app/z3cform/object.py
M plone/app/z3cform/templates.py
M plone/app/z3cform/tests/__init__.py
M plone/app/z3cform/tests/example.py
M plone/app/z3cform/tests/layer.py
M plone/app/z3cform/tests/test_csrf.py
M plone/app/z3cform/tests/test_objectsubform.py
M plone/app/z3cform/tests/test_widget.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/tests/tests.py
M plone/app/z3cform/utils.py
M plone/app/z3cform/widget.py
M plone/app/z3cform/wysiwyg/__init__.py
M plone/app/z3cform/wysiwyg/widget.py
M setup.py
D plone/app/z3cform/queryselect/README.rst
D plone/app/z3cform/queryselect/__init__.py

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..dd9f25d
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,6 @@
+[settings]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
diff --git a/CHANGES.rst b/CHANGES.rst
index c3a8877..3921200 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,23 @@
 Changelog
 =========
 
-1.2.1 (unreleased)
+2.0.0 (unreleased)
 ------------------
 
 Incompatibilities:
 
-- *add item here*
+- Deprecated "plone.app.z3cform.object" and moved to
+  "plone.app.z3cform.objectsubform" in order to avoid built in names
+  as module names, which may result in difficult to debug errors.
+  [jensens]
+
+- Made existing soft deprecation (by comment) of plone.app.z3cform.layout
+  explicit by deprecating using zope.deferredimport.
+  [jensens]
+
+- removed plone.app.z3cform.queryselect since this was deprecated already
+  and removal planned (!) already for Plone 4.1
+  [jensens]
 
 New:
 
@@ -14,7 +25,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Cleanup: pep8, uth8-headers, zca-decorators, ...
+  [jensens]
 
 
 1.2.0 (2016-02-25)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/z3cform/__init__.py b/plone/app/z3cform/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/z3cform/__init__.py
+++ b/plone/app/z3cform/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py
index 9e43085..3abb39e 100644
--- a/plone/app/z3cform/converters.py
+++ b/plone/app/z3cform/converters.py
@@ -1,13 +1,21 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.utils import safe_callable
 from datetime import date
 from datetime import datetime
+from plone.app.z3cform.interfaces import IAjaxSelectWidget
+from plone.app.z3cform.interfaces import IDatetimeWidget
+from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import IQueryStringWidget
+from plone.app.z3cform.interfaces import IRelatedItemsWidget
+from plone.app.z3cform.interfaces import ISelectWidget
 from plone.uuid.interfaces import IUUID
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_callable
 from z3c.form.converter import BaseDataConverter
 from z3c.form.converter import CollectionSequenceDataConverter
 from z3c.form.converter import SequenceDataConverter
-from zope.component import adapts
+from z3c.relationfield.interfaces import IRelationChoice
+from z3c.relationfield.interfaces import IRelationList
+from zope.component import adapter
 from zope.component.hooks import getSite
 from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import IDate
@@ -15,22 +23,14 @@
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import IList
 
-from plone.app.z3cform.interfaces import (
-    IDateWidget, IDatetimeWidget, ISelectWidget, IAjaxSelectWidget,
-    IRelatedItemsWidget, IQueryStringWidget)
-
-import pytz
 import json
-
-from z3c.relationfield.interfaces import IRelationChoice
-from z3c.relationfield.interfaces import IRelationList
+import pytz
 
 
+@adapter(IDate, IDateWidget)
 class DateWidgetConverter(BaseDataConverter):
     """Data converter for date fields."""
 
-    adapts(IDate, IDateWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -59,11 +59,10 @@ def toFieldValue(self, value):
         return date(*map(int, value.split('-')))
 
 
+@adapter(IDatetime, IDatetimeWidget)
 class DatetimeWidgetConverter(BaseDataConverter):
     """Data converter for datetime fields."""
 
-    adapts(IDatetime, IDatetimeWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -134,22 +133,23 @@ def toFieldValue(self, value):
         return super(SelectWidgetConverterBase, self).toFieldValue(value)
 
 
+@adapter(IField, ISelectWidget)
 class SequenceSelectWidgetConverter(
         SelectWidgetConverterBase, SequenceDataConverter):
-    adapts(IField, ISelectWidget)
+    pass
 
 
+@adapter(ICollection, ISelectWidget)
 class SelectWidgetConverter(
         SelectWidgetConverterBase, CollectionSequenceDataConverter):
-    adapts(ICollection, ISelectWidget)
+    pass
 
 
+@adapter(ICollection, IAjaxSelectWidget)
 class AjaxSelectWidgetConverter(BaseDataConverter):
     """Data converter for ICollection fields using the AjaxSelectWidget.
     """
 
-    adapts(ICollection, IAjaxSelectWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -186,12 +186,11 @@ def toFieldValue(self, value):
                               for v in value.split(separator))
 
 
+@adapter(IRelationChoice, IRelatedItemsWidget)
 class RelationChoiceRelatedItemsWidgetConverter(BaseDataConverter):
     """Data converter for RelationChoice fields using the RelatedItemsWidget.
     """
 
-    adapts(IRelationChoice, IRelatedItemsWidget)
-
     def toWidgetValue(self, value):
         if not value:
             return self.field.missing_value
@@ -212,11 +211,10 @@ def toFieldValue(self, value):
             return self.field.missing_value
 
 
+@adapter(ICollection, IRelatedItemsWidget)
 class RelatedItemsDataConverter(BaseDataConverter):
     """Data converter for ICollection fields using the RelatedItemsWidget."""
 
-    adapts(ICollection, IRelatedItemsWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
@@ -269,11 +267,10 @@ def toFieldValue(self, value):
             return collectionType(v for v in value)
 
 
+@adapter(IList, IQueryStringWidget)
 class QueryStringDataConverter(BaseDataConverter):
     """Data converter for IList."""
 
-    adapts(IList, IQueryStringWidget)
-
     def toWidgetValue(self, value):
         """Converts from field value to widget.
 
diff --git a/plone/app/z3cform/csrf.py b/plone/app/z3cform/csrf.py
index 0da7b65..4eaaf6d 100644
--- a/plone/app/z3cform/csrf.py
+++ b/plone/app/z3cform/csrf.py
@@ -1,18 +1,19 @@
+# -*- coding: utf-8 -*-
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.protect import CheckAuthenticator
 from z3c.form.button import ButtonActions
 from z3c.form.interfaces import IButtonForm
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import Interface
 
 
+@adapter(IButtonForm, IPloneFormLayer, Interface)
 class AuthenticatedButtonActions(ButtonActions):
     """z3c.form action manager that checks Plone's CSRF authenticator.
 
     The check is performed if the form's enableCSRFProtection attribute is
     True.
     """
-    adapts(IButtonForm, IPloneFormLayer, Interface)
 
     def execute(self):
         if getattr(self.form, 'enableCSRFProtection', False):
diff --git a/plone/app/z3cform/inline_validation.py b/plone/app/z3cform/inline_validation.py
index 56c9025..3ab940f 100644
--- a/plone/app/z3cform/inline_validation.py
+++ b/plone/app/z3cform/inline_validation.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFPlone.utils import normalizeString
 from Products.Five import BrowserView
@@ -19,30 +20,33 @@ def __call__(self, fname=None, fset=None):
         if fname is None:
             return json.dumps(res)
 
-        form = self.context
-        if hasattr(aq_base(form), 'form_instance'):
-            form = form.form_instance
-        if not hasattr(form, 'update'):
+        try:
+            form = aq_base(self.context).form_instance
+        except AttributeError:
+            form = self.context
+        try:
+            aq_base(form).update()
+        except AttributeError:
             return json.dumps(res)
-        form.update()
 
-        if getattr(form, "extractData", None):
+        if getattr(form, 'extractData', None):
             data, errors = form.extractData()
         else:
             return json.dumps(res)
 
-        #if we validate a field in a group we operate on the group
+        # if we validate a field in a group we operate on the group
         if fset is not None:
             try:
                 fset = int(fset)  # integer-indexed fieldset names
                 form = form.groups[fset]
             except (ValueError, TypeError):
                 # try to match fieldset on group name
-                _name = lambda g: getattr(g, '__name__', None) or g.label
+                def _name(group):
+                    return getattr(group, '__name__', group.label)
                 group_match = filter(
                     lambda group: normalizeString(_name(group)) == fset,
                     form.groups,
-                    )
+                )
                 if not group_match:
                     raise ValueError('Fieldset specified, but not found.')
                 form = group_match[0]
diff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py
index da4385a..5e097c9 100644
--- a/plone/app/z3cform/interfaces.py
+++ b/plone/app/z3cform/interfaces.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
+from plone.app.textfield.widget import IRichTextWidget as patextfield_IRichTextWidget  # noqa
 from z3c.form.interfaces import IFormLayer
-from zope.schema.interfaces import IDate
-from zope.schema.interfaces import IDatetime
 from z3c.form.interfaces import ISelectWidget as IBaseSelectWidget
 from z3c.form.interfaces import ITextWidget
-from plone.app.textfield.widget import IRichTextWidget as patextfield_IRichTextWidget
+from zope.schema.interfaces import IDate
+from zope.schema.interfaces import IDatetime
 
 
 class IPloneFormLayer(IFormLayer):
diff --git a/plone/app/z3cform/layout.py b/plone/app/z3cform/layout.py
index 688f90f..e6eea71 100644
--- a/plone/app/z3cform/layout.py
+++ b/plone/app/z3cform/layout.py
@@ -1,2 +1,9 @@
-# Convenience/BBB API
-from plone.z3cform.layout import FormWrapper, wrap_form
+# -*- coding: utf-8 -*-
+import zope.deferredimport
+
+
+zope.deferredimport.deprecated(
+    'Import from plone.z3cform.layout instead.',
+    FormWrapper='plone.z3cform.layout:FormWrapper',
+    wrap_form='plone.z3cform.layout:wrap_form',
+)
diff --git a/plone/app/z3cform/object.py b/plone/app/z3cform/object.py
index e51183c..efadecd 100644
--- a/plone/app/z3cform/object.py
+++ b/plone/app/z3cform/object.py
@@ -1,19 +1,8 @@
-from plone.app.z3cform.utils import closest_content
-from z3c.form.object import SubformAdapter as BaseSubformAdapter
-from z3c.form.object import ObjectSubForm as BaseObjectSubForm
+# -*- coding: utf-8 -*-
+from zope.deprecation import moved
 
 
-class ObjectSubForm(BaseObjectSubForm):
-
-    def get_closest_content(self):
-        """Return the closest persistent context to this form.
-        The right context of this form is the object created by:
-        z3c.form.object.registerFactoryAdapter
-        """
-        return closest_content(self.context)
-
-
-class SubformAdapter(BaseSubformAdapter):
-    """Subform factory adapter used to override the subform factory
-    """
-    factory = ObjectSubForm
+moved(
+    'plone.app.z3cform.objectsubform',
+    'Version 3.0, because "object" in a builtin'
+)
diff --git a/plone/app/z3cform/objectsubform.py b/plone/app/z3cform/objectsubform.py
new file mode 100644
index 0000000..99ec17a
--- /dev/null
+++ b/plone/app/z3cform/objectsubform.py
@@ -0,0 +1,20 @@
+# -*- coding: utf-8 -*-
+from plone.app.z3cform.utils import closest_content
+from z3c.form.object import ObjectSubForm as BaseObjectSubForm
+from z3c.form.object import SubformAdapter as BaseSubformAdapter
+
+
+class ObjectSubForm(BaseObjectSubForm):
+
+    def get_closest_content(self):
+        """Return the closest persistent context to this form.
+        The right context of this form is the object created by:
+        z3c.form.object.registerFactoryAdapter
+        """
+        return closest_content(self.context)
+
+
+class SubformAdapter(BaseSubformAdapter):
+    """Subform factory adapter used to override the subform factory
+    """
+    factory = ObjectSubForm
diff --git a/plone/app/z3cform/queryselect/README.rst b/plone/app/z3cform/queryselect/README.rst
deleted file mode 100644
index d0b4863..0000000
--- a/plone/app/z3cform/queryselect/README.rst
+++ /dev/null
@@ -1,32 +0,0 @@
-Query select widget
-===================
-
-The ``plone.app.z3cform.queryselect`` module provides a query source
-compatible with ``z3c.formwidget.query`` which combines to a selection field
-that can be queried.
-
-The native value type for the widget is Archetypes UID collections.
-The default implementation will simply search using the
-``SearchableText`` index in the portal catalog.
-
-This is how your form schema could look like:
-
-  >>> from zope import interface, schema
-  >>> from plone.app.z3cform.queryselect import ArchetypesContentSourceBinder
-
-  >>> class ISelection(interface.Interface):
-  ...     items = schema.Set(
-  ...         title=u"Selection",
-  ...         description=u"Search for content",
-  ...         value_type=schema.Choice(
-  ...             source=ArchetypesContentSourceBinder()))
-
-Optionally, instead of storing Archetypes UIDs, you can choose to use
-``persistent.wref``, i.e. weak references, instead of UIDs:
-
-  >>> from plone.app.z3cform.queryselect import uid2wref
-  >>> factory = uid2wref(ISelection['items'])
-
-To store weak references instead of UIDs you would register such a
-factory as a component adapting the context.  The factory
-automatically provides the interface which defines the field.
diff --git a/plone/app/z3cform/queryselect/__init__.py b/plone/app/z3cform/queryselect/__init__.py
deleted file mode 100644
index 56669c6..0000000
--- a/plone/app/z3cform/queryselect/__init__.py
+++ /dev/null
@@ -1,83 +0,0 @@
-from Products.CMFCore import utils as cmfutils
-from zope import interface
-import persistent.wref
-import z3c.formwidget.query.interfaces
-import zope.schema.interfaces
-import zope.schema.vocabulary
-import logging
-
-
-logger = logging.getLogger('plone.app.z3cform')
-
-
-class ArchetypesContentSource(object):
-    interface.implements(z3c.formwidget.query.interfaces.IQuerySource)
-
-    def __init__(self, context):
-        logger.warn("Deprecation Warning\nplone.app.z3cform.queryselect.ArchetypesContentSource "
-                    "is deprecated and will be removed in Plone 4.1")
-        self.context = context
-
-    def __contains__(self, uid):
-        """Verify the item exists."""
-        return bool(self.catalog(uid=uid))
-
-    def __iter__(self):
-        return [].__iter__()
-
-    @property
-    def catalog(self):
-        return cmfutils.getToolByName(self.context, 'portal_catalog')
-
-    def getTermByToken(self, token):
-        uid = token
-        brains = self.catalog(UID=uid)
-        if len(brains) > 0:
-            return self._term_for_brain(brains[0])
-        raise LookupError(token)
-
-    def getTerm(self, value):
-        uid = value
-        brains = self.catalog(UID=uid)
-        if len(brains) > 0:
-            return self._term_for_brain(brains[0])
-        raise LookupError(value)
-
-    def search(self, query_string, limit=20):
-        brains = self.catalog(SearchableText=query_string)[:limit]
-        return map(self._term_for_brain, brains)
-
-    def _term_for_brain(self, brain):
-        return zope.schema.vocabulary.SimpleTerm(
-            brain.UID,
-            brain.UID,
-            brain.Title
-        )
-
-
-class ArchetypesContentSourceBinder(object):
-    interface.implements(zope.schema.interfaces.IContextSourceBinder)
-
-    def __call__(self, context):
-        return ArchetypesContentSource(context)
-
-
-def uid2wref(field):
-    class Adapter(object):
-        interface.implements(field.interface)
-
-        def __init__(self, context):
-            self.context = context
-
-    def _get_items(self):
-        items = filter(None, (wref() for wref in self.context.items))
-        return [item.UID() for item in items]
-
-    def _set_items(self, uids):
-        catalog = cmfutils.getToolByName(self.context, 'portal_catalog')
-        brains = catalog(UID=tuple(uids))
-        items = [brain.getObject() for brain in brains]
-        self.context.items = map(persistent.wref.WeakRef, items)
-
-    setattr(Adapter, field.__name__, property(_get_items, _set_items))
-    return Adapter
diff --git a/plone/app/z3cform/templates.py b/plone/app/z3cform/templates.py
index 11d4336..bf4c820 100644
--- a/plone/app/z3cform/templates.py
+++ b/plone/app/z3cform/templates.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Five.browser import BrowserView
 from Products.Five.browser.metaconfigure import ViewMixinForTemplates
 from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
@@ -10,11 +11,12 @@
 import z3c.form.interfaces
 
 
-path = lambda p: os.path.join(
-    os.path.dirname(plone.app.z3cform.__file__),
-    'templates',
-    p
-)
+def path(filepart):
+    return os.path.join(
+        os.path.dirname(plone.app.z3cform.__file__),
+        'templates',
+        filepart
+    )
 
 # Override the layout wrapper view default template with a more Plone-looking
 # one
@@ -34,6 +36,7 @@
 
 # The ploneform-macros view
 class Macros(BrowserView):
+
     def __getitem__(self, key):
         return self.index.macros[key]
 
diff --git a/plone/app/z3cform/tests/__init__.py b/plone/app/z3cform/tests/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/z3cform/tests/__init__.py
+++ b/plone/app/z3cform/tests/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/z3cform/tests/example.py b/plone/app/z3cform/tests/example.py
index c1e8fc8..8994390 100644
--- a/plone/app/z3cform/tests/example.py
+++ b/plone/app/z3cform/tests/example.py
@@ -1,19 +1,25 @@
+# -*- coding: utf-8 -*-
 from plone.z3cform.layout import FormWrapper
-from z3c.form import form, field, button, group
+from z3c.form import button
+from z3c.form import field
+from z3c.form import form
+from z3c.form import group
 from z3c.form.contentprovider import ContentProviders
 from z3c.form.interfaces import IFieldsAndContentProvidersForm
-from zope import interface, schema
+from zope import interface
+from zope import schema
 from zope.contentprovider.provider import ContentProviderBase
 from zope.interface import implements
 
 
 class MySchema(interface.Interface):
-    age = schema.Int(title=u"Age")
+    age = schema.Int(title=u'Age')
 
 
 class MyContentProvider(ContentProviderBase):
+
     def render(self):
-        return "My test content provider"
+        return 'My test content provider'
 
 
 class MyForm(form.Form):
diff --git a/plone/app/z3cform/tests/layer.py b/plone/app/z3cform/tests/layer.py
index 1cef77b..327c278 100644
--- a/plone/app/z3cform/tests/layer.py
+++ b/plone/app/z3cform/tests/layer.py
@@ -1,6 +1,7 @@
-from plone.app.testing.layers import IntegrationTesting
+# -*- coding: utf-8 -*-
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
+from plone.app.testing.layers import IntegrationTesting
 from plone.testing import z2
 
 
@@ -30,4 +31,5 @@ def setUpPloneSite(self, portal):
 PAZ3CForm_FIXTURE = PAZ3CFormLayer()
 PAZ3CForm_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PAZ3CForm_FIXTURE,),
-    name="plone.app.z3cform:Integration")
+    name='plone.app.z3cform:Integration'
+)
diff --git a/plone/app/z3cform/tests/test_csrf.py b/plone/app/z3cform/tests/test_csrf.py
index e9873fe..0f95d3b 100644
--- a/plone/app/z3cform/tests/test_csrf.py
+++ b/plone/app/z3cform/tests/test_csrf.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.tests.case import KeyringTestCase
 
 
@@ -13,6 +14,7 @@ class DummyForm(object):
             enableCSRFProtection = True
 
         class DummyAction(object):
+
             def isExecuted(self):
                 return True
 
diff --git a/plone/app/z3cform/tests/test_objectsubform.py b/plone/app/z3cform/tests/test_objectsubform.py
index 275c45d..2e049d7 100644
--- a/plone/app/z3cform/tests/test_objectsubform.py
+++ b/plone/app/z3cform/tests/test_objectsubform.py
@@ -1,12 +1,15 @@
-from plone.app.testing import TEST_USER_ID
+# -*- coding: utf-8 -*-
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
 from plone.app.z3cform.utils import closest_content
-from z3c.form import form, field
+from z3c.form import field
+from z3c.form import form
 from z3c.form.object import registerFactoryAdapter
-from zope import interface, schema
+from zope import interface
 from zope import publisher
+from zope import schema
 from zope.globalrequest import setRequest
 
 import unittest
@@ -31,7 +34,7 @@ def getId(self):
         return self.__name__ or ''
 
     def __repr__(self):
-        return "<SubObject title='%s'>" % self.title
+        return "<SubObject title='{0:s}'>".format(self.title)
 
 
 registerFactoryAdapter(ISubObject, SubObject)
diff --git a/plone/app/z3cform/tests/test_widget.py b/plone/app/z3cform/tests/test_widget.py
index ff44f4e..4569c28 100644
--- a/plone/app/z3cform/tests/test_widget.py
+++ b/plone/app/z3cform/tests/test_widget.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.z3cform.interfaces import IPloneFormLayer
 from plone.app.z3cform.wysiwyg.widget import WysiwygWidget
 from zope import interface
@@ -29,7 +30,8 @@ def setUp(self):
     def test_missing_aq_chain(self):
         # testing support for contents witout Acquisiion chain (for avoid
         # regression)
-        # See https://github.com/plone/plone.app.z3cform/commit/587e229e267705a4fd48c6c51a76f849196fceba#commitcomment-2630299
+        # See
+        # https://github.com/plone/plone.app.z3cform/commit/587e229e267705a4fd48c6c51a76f849196fceba#commitcomment-2630299
         obj = NoAcquisitionAware()
         widget = WysiwygWidget(obj.request)
         widget.form = TestForm()
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 28818ef..137f03f 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -2,22 +2,24 @@
 from datetime import date
 from datetime import datetime
 from mock import Mock
-from plone.app.testing import TEST_USER_ID
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.app.widgets.testing import ExampleVocabulary
 from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
 from plone.app.widgets.testing import TestRequest
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
+from plone.app.z3cform.widget import BaseWidget
 from plone.dexterity.fti import DexterityFTI
 from plone.registry.interfaces import IRegistry
 from plone.testing.zca import UNIT_TESTING
+from Products.CMFPlone.interfaces import IMarkupSchema
 from z3c.form.interfaces import IFormLayer
 from z3c.form.widget import FieldWidget
 from zope.component import getUtility
 from zope.component import provideUtility
 from zope.component.globalregistry import base
-from zope.interface import Interface
 from zope.interface import alsoProvides
+from zope.interface import Interface
 from zope.schema import Choice
 from zope.schema import Date
 from zope.schema import Datetime
@@ -25,14 +27,11 @@
 from zope.schema import Set
 from zope.schema import TextLine
 from zope.schema import Tuple
-from plone.app.z3cform.widget import BaseWidget
 
 import mock
 import pytz
 import unittest
 
-from Products.CMFPlone.interfaces import IMarkupSchema
-
 
 class BaseWidgetTests(unittest.TestCase):
 
@@ -546,10 +545,10 @@ def test_widget_extract(self):
         )
         widget.name = 'selectfield'
         self.request.form['selectfield'] = 'one'
-        self.assertEquals(widget.extract(), 'one')
+        self.assertEqual(widget.extract(), 'one')
         widget.multiple = True
         self.request.form['selectfield'] = 'one;two'
-        self.assertEquals(widget.extract(), 'one;two')
+        self.assertEqual(widget.extract(), 'one;two')
 
     def test_data_converter_list(self):
         from plone.app.z3cform.widget import SelectWidget
@@ -757,7 +756,7 @@ def test_widget_choice(self):
                     'allowNewItems': 'false',
                     'vocabularyUrl':
                     'http://127.0.0.1/++widget++choicefield/@@getSource',
-                    },
+                },
             },
             widget._base_args(),
         )
@@ -766,9 +765,9 @@ def test_widget_addform_url_on_addform(self):
         from plone.app.z3cform.widget import AjaxSelectWidget
         widget = AjaxSelectWidget(self.request)
         form = Mock(parentForm=None)
-        from zope.interface import directlyProvides
+        from zope.interface import directlyProvides  # noqa
         from z3c.form.interfaces import IAddForm
-        directlyProvides(form, IAddForm)
+        directlyProvides(form, IAddForm)  # noqa
         form.request = {'URL': 'http://addform_url'}
         widget.form = form
         self.assertEqual(
@@ -890,7 +889,8 @@ def test_keywords_can_add(self):
         widget = AjaxSelectWidget(self.request)
         widget.context = portal
         widget.vocabulary = 'plone.app.vocabularies.Keywords'
-        self.assertEqual(widget._base_args()['pattern_options']['allowNewItems'], 'true')
+        self.assertEqual(widget._base_args()['pattern_options'][
+                         'allowNewItems'], 'true')
 
     def test_keywords_cannot_add(self):
         from plone.app.z3cform.widget import AjaxSelectWidget
@@ -899,7 +899,8 @@ def test_keywords_cannot_add(self):
         widget = AjaxSelectWidget(self.request)
         widget.context = portal
         widget.vocabulary = 'plone.app.vocabularies.Keywords'
-        self.assertEqual(widget._base_args()['pattern_options']['allowNewItems'], 'false')
+        self.assertEqual(widget._base_args()['pattern_options'][
+                         'allowNewItems'], 'false')
 
 
 class QueryStringWidgetTests(unittest.TestCase):
@@ -986,7 +987,7 @@ def test_single_selection(self):
         widget.update()
         base_args = widget._base_args()
         pattern_options = base_args['pattern_options']
-        self.assertEquals(pattern_options.get('maximumSelectionSize', 0), 1)
+        self.assertEqual(pattern_options.get('maximumSelectionSize', 0), 1)
 
     def test_multiple_selection(self):
         """The pattern_options key maximumSelectionSize shouldn't be
@@ -1014,7 +1015,7 @@ def test_multiple_selection(self):
         self.assertEqual(
             patterns_options['vocabularyUrl'],
             'fake_url/@@getVocabulary?name=foobar&field=selectfield',
-            )
+        )
 
     def test_converter_RelationChoice(self):
         from plone.app.z3cform.converters import \
@@ -1025,7 +1026,10 @@ def test_converter_RelationChoice(self):
         converter = RelationChoiceRelatedItemsWidgetConverter(
             TextLine(), widget)
 
-        with mock.patch('plone.app.z3cform.converters.IUUID', return_value='id'):
+        with mock.patch(
+            'plone.app.z3cform.converters.IUUID',
+            return_value='id'
+        ):
             self.assertEqual(converter.toWidgetValue('obj'), 'id')
         self.assertEqual(converter.toWidgetValue(None), None)
 
@@ -1048,7 +1052,9 @@ def test_converter_RelationList(self):
 
         self.assertEqual(converter.toWidgetValue(None), None)
         with mock.patch(
-                'plone.app.z3cform.converters.IUUID', side_effect=['id1', 'id2']):
+            'plone.app.z3cform.converters.IUUID',
+            side_effect=['id1', 'id2']
+        ):
             self.assertEqual(
                 converter.toWidgetValue(['obj1', 'obj2']), 'id1;id2')
 
@@ -1134,8 +1140,10 @@ def test_widget_params(self):
         self.assertEqual(base_args['pattern'], 'tinymce')
 
         prependToUrl = '/plone/resolveuid/'
-        self.assertEquals(base_args['pattern_options']['prependToUrl'],
-                          prependToUrl)
+        self.assertEqual(
+            base_args['pattern_options']['prependToUrl'],
+            prependToUrl
+        )
         self.assertEqual(
             base_args['pattern_options']['upload']['relativePath'],
             '@@fileUpload')
@@ -1149,7 +1157,7 @@ def test_widget_values(self):
         widget.context = self.portal
         widget.value = RichTextValue(u'Lorem ipsum \u2026')
         base_args = widget._base_args()
-        self.assertEquals(base_args['value'], u'Lorem ipsum \u2026')
+        self.assertEqual(base_args['value'], u'Lorem ipsum \u2026')
 
     def _set_mimetypes(self, default='text/html', allowed=('text/html')):
         """Set portal's mimetype settings.
@@ -1157,7 +1165,7 @@ def _set_mimetypes(self, default='text/html', allowed=('text/html')):
         if IMarkupSchema:
             registry = getUtility(IRegistry)
             self.settings = registry.forInterface(
-                IMarkupSchema, prefix="plone")
+                IMarkupSchema, prefix='plone')
             self.settings.default_type = default
             self.settings.allowed_types = allowed
 
diff --git a/plone/app/z3cform/tests/tests.py b/plone/app/z3cform/tests/tests.py
index 5ffbbc4..602d8d6 100644
--- a/plone/app/z3cform/tests/tests.py
+++ b/plone/app/z3cform/tests/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING
 from plone.browserlayer.layer import mark_layer
 from zope.traversing.interfaces import BeforeTraverseEvent
@@ -6,6 +7,7 @@
 import unittest
 import zope.component.testing
 
+
 ROBOT_TEST_LEVEL = 5
 
 
@@ -54,12 +56,6 @@ def test_suite():
             setUp=zope.component.testing.setUp,
             tearDown=zope.component.testing.tearDown,
         ),
-        doctest.DocFileSuite(
-            'queryselect/README.rst',
-            package='plone.app.z3cform',
-            setUp=zope.component.testing.setUp,
-            tearDown=zope.component.testing.tearDown,
-        ),
         doctest.DocTestSuite(
             'plone.app.z3cform.wysiwyg.widget',
             package='plone.app.z3cform',
diff --git a/plone/app/z3cform/utils.py b/plone/app/z3cform/utils.py
index 6d8d6b9..42e94e6 100644
--- a/plone/app/z3cform/utils.py
+++ b/plone/app/z3cform/utils.py
@@ -1,7 +1,10 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFCore.interfaces import IContentish
 from Products.CMFCore.interfaces import IFolderish
 from zope.component.hooks import getSite
+
+
 try:
     from zope.globalrequest import getRequest
     getRequest  # pyflakes
diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py
index f3b3e2e..731849f 100644
--- a/plone/app/z3cform/widget.py
+++ b/plone/app/z3cform/widget.py
@@ -1,15 +1,13 @@
 # -*- coding: utf-8 -*-
 from Acquisition import ImplicitAcquisitionWrapper
-from UserDict import UserDict
-from Products.CMFCore.utils import getToolByName
 from lxml import etree
 from plone.app.textfield.value import RichTextValue
-from plone.app.textfield.widget import RichTextWidget as patextfield_RichTextWidget
+from plone.app.textfield.widget import RichTextWidget as patext_RichTextWidget
+from plone.app.widgets.base import dict_merge
 from plone.app.widgets.base import InputWidget
 from plone.app.widgets.base import SelectWidget as BaseSelectWidget
 from plone.app.widgets.base import TextareaWidget
-from plone.app.widgets.base import dict_merge
-from plone.app.widgets.utils import NotImplemented
+from plone.app.widgets.utils import first_weekday
 from plone.app.widgets.utils import get_ajaxselect_options
 from plone.app.widgets.utils import get_date_options
 from plone.app.widgets.utils import get_datetime_options
@@ -17,50 +15,55 @@
 from plone.app.widgets.utils import get_relateditems_options
 from plone.app.widgets.utils import get_tinymce_options
 from plone.app.widgets.utils import get_widget_form
-from plone.registry.interfaces import IRegistry
+from plone.app.widgets.utils import NotImplemented as PatternNotImplemented
+from plone.app.z3cform.converters import DatetimeWidgetConverter
+from plone.app.z3cform.converters import DateWidgetConverter
+from plone.app.z3cform.interfaces import IAjaxSelectWidget
+from plone.app.z3cform.interfaces import IDatetimeWidget
+from plone.app.z3cform.interfaces import IDateWidget
+from plone.app.z3cform.interfaces import IQueryStringWidget
+from plone.app.z3cform.interfaces import IRelatedItemsWidget
+from plone.app.z3cform.interfaces import IRichTextWidget
+from plone.app.z3cform.interfaces import ISelectWidget
 from plone.app.z3cform.utils import closest_content
+from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces import IEditingSchema
+from UserDict import UserDict
 from z3c.form.browser.select import SelectWidget as z3cform_SelectWidget
 from z3c.form.browser.text import TextWidget as z3cform_TextWidget
 from z3c.form.browser.widget import HTMLInputWidget
 from z3c.form.interfaces import IEditForm
-from z3c.form.interfaces import IForm
 from z3c.form.interfaces import IFieldWidget
+from z3c.form.interfaces import IForm
 from z3c.form.interfaces import NO_VALUE
 from z3c.form.widget import FieldWidget
 from z3c.form.widget import Widget
-from zope.component import getUtility
 from zope.component import ComponentLookupError
+from zope.component import getUtility
 from zope.i18n import translate
 from zope.interface import implementer
-from zope.interface import implementsOnly
+from zope.interface import implementer_only
 from zope.schema.interfaces import IChoice
 from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import ISequence
-from plone.app.widgets.utils import first_weekday
-
-from plone.app.z3cform.converters import (
-    DateWidgetConverter, DatetimeWidgetConverter)
-from plone.app.z3cform.interfaces import (
-    IDatetimeWidget, IDateWidget, IAjaxSelectWidget,
-    IRelatedItemsWidget, IQueryStringWidget, IRichTextWidget,
-    ISelectWidget)
 
 import json
 
-from Products.CMFPlone.interfaces import IEditingSchema
-
 
 class BaseWidget(Widget):
     """Base widget for z3c.form."""
 
     pattern = None
     pattern_options = {}
-    _adapterValueAttributes = (Widget._adapterValueAttributes +
-                               ('pattern_options',))
+    _adapterValueAttributes = (
+        Widget._adapterValueAttributes +
+        ('pattern_options',)
+    )
 
     def _base(self, pattern, pattern_options={}):
         """Base widget class."""
-        raise NotImplemented
+        raise PatternNotImplemented
 
     def _base_args(self):
         """Method which will calculate _base class arguments.
@@ -73,7 +76,7 @@ def _base_args(self):
         :rtype: dict
         """
         if self.pattern is None:
-            raise NotImplemented("'pattern' option is not provided.")
+            raise PatternNotImplemented("'pattern' option is not provided.")
         return {
             'pattern': self.pattern,
             'pattern_options': self.pattern_options.copy(),
@@ -90,6 +93,7 @@ def render(self):
         return self._base(**self._base_args()).render()
 
 
+@implementer_only(IDateWidget)
 class DateWidget(BaseWidget, HTMLInputWidget):
     """Date widget for z3c.form."""
 
@@ -97,8 +101,6 @@ class DateWidget(BaseWidget, HTMLInputWidget):
     _converter = DateWidgetConverter
     _formater = 'date'
 
-    implementsOnly(IDateWidget)
-
     pattern = 'pickadate'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -144,7 +146,9 @@ def render(self):
             return u''
 
         formatter = self.request.locale.dates.getFormatter(
-            self._formater, "short")
+            self._formater,
+            'short'
+        )
         if field_value.year > 1900:
             return formatter.format(field_value)
 
@@ -153,6 +157,7 @@ def render(self):
         return field_value.ctime()
 
 
+@implementer_only(IDatetimeWidget)
 class DatetimeWidget(DateWidget, HTMLInputWidget):
     """Datetime widget for z3c.form.
 
@@ -165,8 +170,6 @@ class DatetimeWidget(DateWidget, HTMLInputWidget):
     _converter = DatetimeWidgetConverter
     _formater = 'dateTime'
 
-    implementsOnly(IDatetimeWidget)
-
     pattern_options = DateWidget.pattern_options.copy()
 
     default_timezone = None
@@ -202,13 +205,12 @@ def _base_args(self):
         return args
 
 
+@implementer_only(ISelectWidget)
 class SelectWidget(BaseWidget, z3cform_SelectWidget):
     """Select widget for z3c.form."""
 
     _base = BaseSelectWidget
 
-    implementsOnly(ISelectWidget)
-
     pattern = 'select2'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -277,13 +279,12 @@ def extract(self, default=NO_VALUE):
         return self.request.get(self.name, default)
 
 
+@implementer_only(IAjaxSelectWidget)
 class AjaxSelectWidget(BaseWidget, z3cform_TextWidget):
     """Ajax select widget for z3c.form."""
 
     _base = InputWidget
 
-    implementsOnly(IAjaxSelectWidget)
-
     pattern = 'select2'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -327,7 +328,10 @@ def _base_args(self):
         view_context = get_widget_form(self)
         # For EditForms and non-Forms (in tests), the vocabulary is looked
         # up on the context, otherwise on the view
-        if IEditForm.providedBy(view_context) or not IForm.providedBy(view_context):
+        if (
+            IEditForm.providedBy(view_context) or
+            not IForm.providedBy(view_context)
+        ):
             view_context = context
 
         vocabulary_name = self.vocabulary
@@ -348,7 +352,10 @@ def _base_args(self):
 
         if field and getattr(field, 'vocabulary', None):
             form_url = self.request.getURL()
-            source_url = "%s/++widget++%s/@@getSource" % (form_url, self.name)
+            source_url = '{0:s}/++widget++{1:s}/@@getSource'.format(
+                form_url,
+                self.name
+            )
             args['pattern_options']['vocabularyUrl'] = source_url
 
         # ISequence represents an orderable collection
@@ -372,13 +379,12 @@ def _base_args(self):
         return args
 
 
+@implementer_only(IRelatedItemsWidget)
 class RelatedItemsWidget(BaseWidget, z3cform_TextWidget):
     """RelatedItems widget for z3c.form."""
 
     _base = InputWidget
 
-    implementsOnly(IRelatedItemsWidget)
-
     pattern = 'relateditems'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -393,8 +399,11 @@ def update(self):
         field = getattr(self, 'field', None)
         if ICollection.providedBy(self.field):
             field = self.field.value_type
-        if (not self.vocabulary and field is not None and
-                getattr(field, 'vocabularyName', None)):
+        if (
+            not self.vocabulary and
+            field is not None and
+            getattr(field, 'vocabularyName', None)
+        ):
             self.vocabulary = field.vocabularyName
             self.vocabulary_override = True
         else:
@@ -433,32 +442,46 @@ def _base_args(self):
         view_context = get_widget_form(self)
         # For EditForms and non-Forms (in tests), the vocabulary is looked
         # up on the context, otherwise on the view
-        if IEditForm.providedBy(view_context) or not IForm.providedBy(view_context):
+        if (
+            IEditForm.providedBy(view_context) or
+            not IForm.providedBy(view_context)
+        ):
             view_context = context
 
         args['pattern_options'] = dict_merge(
-            get_relateditems_options(view_context, args['value'],
-                                     self.separator, vocabulary_name,
-                                     self.vocabulary_view, field_name),
-            args['pattern_options'])
-
-        if not self.vocabulary_override:  # widget vocab takes precedence over field
-            if field and getattr(field, 'vocabulary', None):
-                form_url = self.request.getURL()
-                source_url = "%s/++widget++%s/@@getSource" % (
-                    form_url, self.name)
-                args['pattern_options']['vocabularyUrl'] = source_url
+            get_relateditems_options(
+                view_context,
+                args['value'],
+                self.separator,
+                vocabulary_name,
+                self.vocabulary_view,
+                field_name,
+            ),
+            args['pattern_options']
+        )
+
+        if (
+            not self.vocabulary_override and
+            field and
+            getattr(field, 'vocabulary', None)
+        ):
+            # widget vocab takes precedence over field
+            form_url = self.request.getURL()
+            source_url = '{0:s}/++widget++{1:s}/@@getSource'.format(
+                form_url,
+                self.name
+            )
+            args['pattern_options']['vocabularyUrl'] = source_url
 
         return args
 
 
+@implementer_only(IQueryStringWidget)
 class QueryStringWidget(BaseWidget, z3cform_TextWidget):
     """QueryString widget for z3c.form."""
 
     _base = InputWidget
 
-    implementsOnly(IQueryStringWidget)
-
     pattern = 'querystring'
     pattern_options = BaseWidget.pattern_options.copy()
 
@@ -488,13 +511,12 @@ def _base_args(self):
         return args
 
 
-class RichTextWidget(BaseWidget, patextfield_RichTextWidget):
+@implementer_only(IRichTextWidget)
+class RichTextWidget(BaseWidget, patext_RichTextWidget):
     """TinyMCE widget for z3c.form."""
 
     _base = TextareaWidget
 
-    implementsOnly(IRichTextWidget)
-
     pattern_options = BaseWidget.pattern_options.copy()
 
     def __init__(self, *args, **kwargs):
@@ -524,7 +546,7 @@ def pattern(self):
             except AttributeError:
                 default = 'tinymce'
                 available = ['TinyMCE']
-            tool = getToolByName(self.wrapped_context(), "portal_membership")
+            tool = getToolByName(self.wrapped_context(), 'portal_membership')
             member = tool.getAuthenticatedMember()
             editor = member.getProperty('wysiwyg_editor')
             if editor in available:
@@ -542,10 +564,14 @@ def _base_args(self):
             self.field.getName(), value)).decode('utf-8')
 
         args.setdefault('pattern_options', {})
-        merged_options = dict_merge(get_tinymce_options(self.context,
-                                                        self.field,
-                                                        self.request),  # noqa
-                                    args['pattern_options'])
+        merged_options = dict_merge(
+            get_tinymce_options(
+                self.context,
+                self.field,
+                self.request
+            ),
+            args['pattern_options']
+        )
         args['pattern_options'] = merged_options
 
         return args
@@ -573,7 +599,7 @@ def render(self):
                 del base_args['pattern_options']
                 textarea_widget = self._base(None, None, **base_args)
                 textarea_widget.klass = ''
-                mt_pattern_name = '{}{}'.format(
+                mt_pattern_name = '{0}{1}'.format(
                     self._base._klass_prefix,
                     'textareamimetypeselector'
                 )
@@ -584,11 +610,13 @@ def render(self):
                 value_mime_type = self.value.mimeType if self.value\
                     else self.field.default_mime_type
                 mt_select = etree.Element('select')
-                mt_select.attrib['id'] = '{}_text_format'.format(self.id)
-                mt_select.attrib['name'] = '{}.mimeType'.format(self.name)
+                mt_select.attrib['id'] = '{0}_text_format'.format(self.id)
+                mt_select.attrib['name'] = '{0}.mimeType'.format(self.name)
                 mt_select.attrib['class'] = mt_pattern_name
-                mt_select.attrib['{}{}'.format('data-', mt_pattern_name)] =\
-                    json.dumps({
+                mt_select.attrib[
+                    'data-{0}'.format(mt_pattern_name)
+                ] = json.dumps(
+                    {
                         'textareaName': self.name,
                         'widgets': {
                             'text/html': {  # TODO: currently, we only support
@@ -598,7 +626,8 @@ def render(self):
                                 'patternOptions': pattern_options
                             }
                         }
-                    })
+                    }
+                )
 
                 # Create a list of allowed mime types
                 for mt in allowed_mime_types:
@@ -610,7 +639,7 @@ def render(self):
                     mt_select.append(opt)
 
                 # Render the combined widget
-                rendered = '{}\n{}'.format(
+                rendered = '{0}\n{1}'.format(
                     textarea_widget.render(),
                     etree.tostring(mt_select)
                 )
diff --git a/plone/app/z3cform/wysiwyg/__init__.py b/plone/app/z3cform/wysiwyg/__init__.py
index 1e3e631..f7b239e 100644
--- a/plone/app/z3cform/wysiwyg/__init__.py
+++ b/plone/app/z3cform/wysiwyg/__init__.py
@@ -1,2 +1,6 @@
+# -*- coding: utf-8 -*-
 # Convenience import
 from plone.app.z3cform.wysiwyg.widget import WysiwygFieldWidget
+
+
+WysiwygFieldWidget  # flake 8 happiness
diff --git a/plone/app/z3cform/wysiwyg/widget.py b/plone/app/z3cform/wysiwyg/widget.py
index afe260d..e5ccd4d 100644
--- a/plone/app/z3cform/wysiwyg/widget.py
+++ b/plone/app/z3cform/wysiwyg/widget.py
@@ -1,10 +1,14 @@
-import logging
+# -*- coding: utf-8 -*-
+from zope.component import adapter
+from zope.component.hooks import getSite
+from zope.interface import implementer
+from zope.interface import implementer_only
 
 import Acquisition
+import logging
 import z3c.form.browser.textarea
 import z3c.form.interfaces
 import z3c.form.widget
-from zope.component.hooks import getSite
 import zope.interface
 import zope.schema.interfaces
 
@@ -16,8 +20,8 @@ class IWysiwygWidget(z3c.form.interfaces.ITextAreaWidget):
     pass
 
 
+@implementer_only(IWysiwygWidget)
 class WysiwygWidget(z3c.form.browser.textarea.TextAreaWidget):
-    zope.interface.implementsOnly(IWysiwygWidget)
 
     klass = u'kupu-widget'
     value = u''
@@ -35,11 +39,13 @@ def update(self):
                 self.form.context, getSite())
 
 
-@zope.component.adapter(zope.schema.interfaces.IField,
-                        z3c.form.interfaces.IFormLayer)
-@zope.interface.implementer(z3c.form.interfaces.IFieldWidget)
+@adapter(zope.schema.interfaces.IField, z3c.form.interfaces.IFormLayer)
+@implementer(z3c.form.interfaces.IFieldWidget)
 def WysiwygFieldWidget(field, request):
     """IFieldWidget factory for WysiwygWidget."""
-    logger.warn("Deprecation Warning\nplone.app.z3cform.wysiwyg.WysiwygFieldWidget "
-                "is deprecated and will be removed in Plone 5.1")
+    logger.warn(
+        'plone.app.z3cform.wysiwyg.WysiwygFieldWidget is deprecated and'
+        'will be removed in Plone 5.1',
+        DeprecationWarning
+    )
     return z3c.form.widget.FieldWidget(field, WysiwygWidget(request))
diff --git a/setup.py b/setup.py
index 2107874..eeff5db 100644
--- a/setup.py
+++ b/setup.py
@@ -1,24 +1,24 @@
+from setuptools import find_packages
+from setuptools import setup
+
 import os
-from setuptools import setup, find_packages
 
 
 def read(*rnames):
     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
 
-version = '1.2.1.dev0'
+version = '2.0.0.dev0'
 
 long_description = (
-    read('README.rst')
-    + '\n' +
-    read('plone', 'app', 'z3cform', 'wysiwyg', 'README.rst')
-    + '\n' +
-    read('plone', 'app', 'z3cform', 'queryselect', 'README.rst')
-    + '\n' +
-    read('plone', 'app', 'z3cform', 'inline_validation.rst')
-    + '\n' +
-    read('CHANGES.rst')
-    + '\n'
-    )
+    read('README.rst') +
+    '\n' +
+    read('plone', 'app', 'z3cform', 'wysiwyg', 'README.rst') +
+    '\n' +
+    read('plone', 'app', 'z3cform', 'inline_validation.rst') +
+    '\n' +
+    read('CHANGES.rst') +
+    '\n'
+)
 
 setup(
     name='plone.app.z3cform',


