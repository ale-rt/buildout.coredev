Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2016-08-25T11:51:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.iterate/commit/4bda56277d58fc373c518100f383c34485a0fba2

Remove broken references when making checkout.

Fixes issue https://github.com/plone/plone.app.iterate/issues/30.

Files changed:
M CHANGES.rst
M plone/app/iterate/relation.py
M plone/app/iterate/tests/test_iterate.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 16a726f..eda7e15 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Remove broken references when making checkout.
+  Fixes issue `30 <https://github.com/plone/plone.app.iterate/issues/30>`_.
+  [maurits]
 
 
 3.2.1 (2016-08-17)
diff --git a/plone/app/iterate/relation.py b/plone/app/iterate/relation.py
index 4cb6f62..b0877c2 100644
--- a/plone/app/iterate/relation.py
+++ b/plone/app/iterate/relation.py
@@ -28,12 +28,18 @@
 from zope.annotation.interfaces import IAttributeAnnotatable
 
 from Products.Archetypes import config as atconf
+from Products.Archetypes.exceptions import ReferenceException
 from Products.Archetypes.ReferenceEngine import Reference
 
 from interfaces import IWorkingCopyRelation
 from interfaces import ICheckinCheckoutReference
 from interfaces import IIterateAware
 
+import logging
+
+
+logger = logging.getLogger('plone.app.iterate')
+
 
 @implementer(IWorkingCopyRelation, IAttributeAnnotatable)
 class WorkingCopyRelation(Reference):
@@ -73,8 +79,15 @@ def __init__(self, context):
 
     def checkout(self, baseline, wc, refs, storage):
         for ref in refs:
-            wc.addReference(ref.targetUID, ref.relationship,
-                            referenceClass=ref.__class__)
+            try:
+                wc.addReference(ref.targetUID, ref.relationship,
+                                referenceClass=ref.__class__)
+            except ReferenceException:
+                logger.warn(
+                    'Reference exception when adding relation %r '
+                    'from new working copy %s to uid %s. Ignoring relation.',
+                    ref.relationship, '/'.join(wc.getPhysicalPath()),
+                    ref.targetUID)
 
     def checkin(self, *args):
         pass
diff --git a/plone/app/iterate/tests/test_iterate.py b/plone/app/iterate/tests/test_iterate.py
index 45f51f5..6c2a5a8 100644
--- a/plone/app/iterate/tests/test_iterate.py
+++ b/plone/app/iterate/tests/test_iterate.py
@@ -160,6 +160,26 @@ def test_baselineReferencesMaintained(self):
         self.assertEqual(len(doc.getReferences()), 1)
         self.assertEqual(len(doc.getBackReferences()), 1)
 
+    def test_baselineBrokenReferencesRemoved(self):
+        # When the baseline has a reference to a deleted object, a
+        # checkout should not fail with a ReferenceException.
+
+        doc = self.portal.docs.doc1
+        doc.addReference(self.portal.docs.doc2, "pony")
+        self.portal.docs._delOb('doc2')
+        # _delOb is low level enough that the reference does not get cleaned
+        # up.
+        self.assertEqual(len(doc.getReferences()), 1)
+
+        wc = ICheckinCheckoutPolicy(doc).checkout(self.portal.workarea)
+        # The working copy has one reference: its original.
+        self.assertEqual(len(wc.getReferences()), 1)
+        self.assertEqual(wc.getReferences()[0].id, 'doc1')
+
+        doc = ICheckinCheckoutPolicy(wc).checkin("updated")
+        # The checkin removes the broken reference.
+        self.assertEqual(len(doc.getReferences()), 0)
+
     def test_baselineNoCopyReferences(self):
         # ensure that custom state is maintained with the no copy adapter
 


Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2016-08-25T13:25:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.iterate/commit/58f5b21f03d69acb59355ef79035d24ff139db6a

Merge pull request #32 from plone/catch-reference-exception-master

Remove broken references when making checkout.

Files changed:
M CHANGES.rst
M plone/app/iterate/relation.py
M plone/app/iterate/tests/test_iterate.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 16a726f..eda7e15 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Remove broken references when making checkout.
+  Fixes issue `30 <https://github.com/plone/plone.app.iterate/issues/30>`_.
+  [maurits]
 
 
 3.2.1 (2016-08-17)
diff --git a/plone/app/iterate/relation.py b/plone/app/iterate/relation.py
index 4cb6f62..b0877c2 100644
--- a/plone/app/iterate/relation.py
+++ b/plone/app/iterate/relation.py
@@ -28,12 +28,18 @@
 from zope.annotation.interfaces import IAttributeAnnotatable
 
 from Products.Archetypes import config as atconf
+from Products.Archetypes.exceptions import ReferenceException
 from Products.Archetypes.ReferenceEngine import Reference
 
 from interfaces import IWorkingCopyRelation
 from interfaces import ICheckinCheckoutReference
 from interfaces import IIterateAware
 
+import logging
+
+
+logger = logging.getLogger('plone.app.iterate')
+
 
 @implementer(IWorkingCopyRelation, IAttributeAnnotatable)
 class WorkingCopyRelation(Reference):
@@ -73,8 +79,15 @@ def __init__(self, context):
 
     def checkout(self, baseline, wc, refs, storage):
         for ref in refs:
-            wc.addReference(ref.targetUID, ref.relationship,
-                            referenceClass=ref.__class__)
+            try:
+                wc.addReference(ref.targetUID, ref.relationship,
+                                referenceClass=ref.__class__)
+            except ReferenceException:
+                logger.warn(
+                    'Reference exception when adding relation %r '
+                    'from new working copy %s to uid %s. Ignoring relation.',
+                    ref.relationship, '/'.join(wc.getPhysicalPath()),
+                    ref.targetUID)
 
     def checkin(self, *args):
         pass
diff --git a/plone/app/iterate/tests/test_iterate.py b/plone/app/iterate/tests/test_iterate.py
index 45f51f5..6c2a5a8 100644
--- a/plone/app/iterate/tests/test_iterate.py
+++ b/plone/app/iterate/tests/test_iterate.py
@@ -160,6 +160,26 @@ def test_baselineReferencesMaintained(self):
         self.assertEqual(len(doc.getReferences()), 1)
         self.assertEqual(len(doc.getBackReferences()), 1)
 
+    def test_baselineBrokenReferencesRemoved(self):
+        # When the baseline has a reference to a deleted object, a
+        # checkout should not fail with a ReferenceException.
+
+        doc = self.portal.docs.doc1
+        doc.addReference(self.portal.docs.doc2, "pony")
+        self.portal.docs._delOb('doc2')
+        # _delOb is low level enough that the reference does not get cleaned
+        # up.
+        self.assertEqual(len(doc.getReferences()), 1)
+
+        wc = ICheckinCheckoutPolicy(doc).checkout(self.portal.workarea)
+        # The working copy has one reference: its original.
+        self.assertEqual(len(wc.getReferences()), 1)
+        self.assertEqual(wc.getReferences()[0].id, 'doc1')
+
+        doc = ICheckinCheckoutPolicy(wc).checkin("updated")
+        # The checkin removes the broken reference.
+        self.assertEqual(len(doc.getReferences()), 0)
+
     def test_baselineNoCopyReferences(self):
         # ensure that custom state is maintained with the no copy adapter
 


