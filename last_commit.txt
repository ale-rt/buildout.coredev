Repository: plone.registry


Branch: refs/heads/1.0.x
Date: 2017-02-10T12:29:03+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.registry/commit/6f12af802c7b45d08531a6cc8c5f84e30081fc94

fix recursion on getting reserved names from recordsproxy

Files changed:
M CHANGES.rst
M plone/registry/recordsproxy.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3bb1fc5..fd80fae 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix recursion on getting values from records proxy
+  [tomgross]
 
 
 1.0.4 (2016-06-12)
diff --git a/plone/registry/recordsproxy.py b/plone/registry/recordsproxy.py
index 64d591c..f71320d 100644
--- a/plone/registry/recordsproxy.py
+++ b/plone/registry/recordsproxy.py
@@ -32,6 +32,8 @@ def __init__(self, registry, schema, omitted=(), prefix=None):
         alsoProvides(self, schema)
 
     def __getattr__(self, name):
+        if name in self.__dict__.keys():
+           return super(RecordsProxy, self).__getattr__(name)
         if name not in self.__schema__:
             raise AttributeError(name)
         value = self.__registry__.get(self.__prefix__ + name, _marker)


Repository: plone.registry


Branch: refs/heads/1.0.x
Date: 2017-02-10T12:29:19+01:00
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.registry/commit/8f564747a78732c5846dd17fb7725cc65a067c0a

fix another case of endless recursion

Files changed:
M CHANGES.rst
M plone/registry/recordsproxy.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fd80fae..35c4570 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Fix recursion on getting values from records proxy
+- Fix endless recursion on getting values from broken records proxy objects
   [tomgross]
 
 
diff --git a/plone/registry/recordsproxy.py b/plone/registry/recordsproxy.py
index f71320d..f436e9e 100644
--- a/plone/registry/recordsproxy.py
+++ b/plone/registry/recordsproxy.py
@@ -32,7 +32,7 @@ def __init__(self, registry, schema, omitted=(), prefix=None):
         alsoProvides(self, schema)
 
     def __getattr__(self, name):
-        if name in self.__dict__.keys():
+        if not self.__dict__ or name in self.__dict__.keys():
            return super(RecordsProxy, self).__getattr__(name)
         if name not in self.__schema__:
             raise AttributeError(name)


Repository: plone.registry


Branch: refs/heads/1.0.x
Date: 2017-02-10T12:55:04+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.registry/commit/629276b95ea459aee5869d1bc0e2cdbd3ba5921a

Added link to issue 13.

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 35c4570..f35c8f0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -15,7 +15,8 @@ New features:
 Bug fixes:
 
 - Fix endless recursion on getting values from broken records proxy objects
-  [tomgross]
+  This fixes https://github.com/plone/plone.registry/issues/13.
+  [tomgross, maurits]
 
 
 1.0.4 (2016-06-12)


Repository: plone.registry


Branch: refs/heads/1.0.x
Date: 2017-02-11T14:01:12+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.registry/commit/013b9fcda350a744c0d556256d70eb80874546d9

Merge pull request #14 from plone/fix-endless-recursion-1.0

Fix endless recursion on 1.0.x

Files changed:
M CHANGES.rst
M plone/registry/recordsproxy.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3bb1fc5..f35c8f0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix endless recursion on getting values from broken records proxy objects
+  This fixes https://github.com/plone/plone.registry/issues/13.
+  [tomgross, maurits]
 
 
 1.0.4 (2016-06-12)
diff --git a/plone/registry/recordsproxy.py b/plone/registry/recordsproxy.py
index 64d591c..f436e9e 100644
--- a/plone/registry/recordsproxy.py
+++ b/plone/registry/recordsproxy.py
@@ -32,6 +32,8 @@ def __init__(self, registry, schema, omitted=(), prefix=None):
         alsoProvides(self, schema)
 
     def __getattr__(self, name):
+        if not self.__dict__ or name in self.__dict__.keys():
+           return super(RecordsProxy, self).__getattr__(name)
         if name not in self.__schema__:
             raise AttributeError(name)
         value = self.__registry__.get(self.__prefix__ + name, _marker)


