Repository: plone.memoize


Branch: refs/heads/master
Date: 2017-06-28T08:57:53+02:00
Author: Paul Grunewald (pgrunewald) <paul.grunewald@tu-dresden.de>
Commit: https://github.com/plone/plone.memoize/commit/ad81fb6adbf9dbd3ca7564dd10d016b42ab686ce

Keep docstrings intact in decorators

Files changed:
M CHANGES.rst
M plone/memoize/instance.py
M plone/memoize/request.py
M plone/memoize/view.py
M plone/memoize/volatile.py
M plone/memoize/volatile.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 9454c3c..87bab3c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,6 +6,9 @@ Changelog
 
 New:
 
+- Keep docstrings intact in decorators.
+  [pgrunewald]
+
 - *add item here*
 
 Fixes:
diff --git a/plone/memoize/instance.py b/plone/memoize/instance.py
index 585d9ac..42c2961 100644
--- a/plone/memoize/instance.py
+++ b/plone/memoize/instance.py
@@ -5,6 +5,7 @@
 
 This package current subsumes memojito.
 """
+from functools import wraps
 
 _marker = object()
 
@@ -35,6 +36,7 @@ def clear(*args, **kwargs):
 
     def memoize(self, func):
 
+        @wraps(func)
         def memogetter(*args, **kwargs):
             inst = args[0]
             cache = getattr(inst, self.propname, _marker)
diff --git a/plone/memoize/request.py b/plone/memoize/request.py
index e8c4a3f..8de98ff 100644
--- a/plone/memoize/request.py
+++ b/plone/memoize/request.py
@@ -3,7 +3,7 @@
 
 Stores values in an annotation of the request.
 """
-
+from functools import wraps
 from plone.memoize import volatile
 from zope.annotation.interfaces import IAnnotations
 import inspect
@@ -20,6 +20,7 @@ def __init__(self, arg=0):
 
     def __call__(self, func):
 
+        @wraps(func)
         def memogetter(*args, **kwargs):
             request = None
             if isinstance(self.arg, int):
diff --git a/plone/memoize/view.py b/plone/memoize/view.py
index da1e5cd..3586ce1 100644
--- a/plone/memoize/view.py
+++ b/plone/memoize/view.py
@@ -3,7 +3,7 @@
 
 Stores values in an annotation of the request. See view.rst.
 """
-
+from functools import wraps
 from zope.annotation.interfaces import IAnnotations
 
 _marker = object()
@@ -15,6 +15,7 @@ class ViewMemo(object):
 
     def memoize(self, func):
 
+        @wraps(func)
         def memogetter(*args, **kwargs):
             instance = args[0]
 
diff --git a/plone/memoize/volatile.py b/plone/memoize/volatile.py
index e6854b9..f921ded 100644
--- a/plone/memoize/volatile.py
+++ b/plone/memoize/volatile.py
@@ -5,6 +5,7 @@
 cache results of your functions or methods.
 """
 
+from functools import wraps
 import time
 
 
@@ -59,6 +60,7 @@ def cache(get_key, get_cache=store_on_self):
 
     def decorator(fun):
 
+        @wraps(fun)
         def replacement(*args, **kwargs):
             try:
                 key = get_key(fun, *args, **kwargs)
diff --git a/plone/memoize/volatile.rst b/plone/memoize/volatile.rst
index 2fd6e74..6222324 100644
--- a/plone/memoize/volatile.rst
+++ b/plone/memoize/volatile.rst
@@ -15,6 +15,7 @@ Let's say we have a class with an expensive method `pow` that we want to cache::
 
     >>> class MyClass:
     ...     def pow(self, first, second):
+    ...         """Returns the number 'first' to the power of 'second'."""
     ...         print('Someone or something called me')
     ...         return first ** second
 
@@ -35,6 +36,7 @@ Let's define our first class again, this time with a cached `pow` method::
     >>> class MyClass:
     ...     @cache(cache_key)
     ...     def pow(self, first, second):
+    ...         """Returns the number 'first' to the power of 'second'."""
     ...         print('Someone or something called me')
     ...         return first ** second
 
@@ -49,6 +51,11 @@ The results::
 
 Did you see that?  The method was called only once.
 
+You can also see, that the method's docstring is still intact::
+
+    >>> obj.pow.__doc__
+    "Returns the number 'first' to the power of 'second'."
+
 Now to where this cache is stored: That's actually variable.
 The cache decorator takes an optional second argument with which you can define the where the cache is stored to.
 


