Repository: icalendar


Branch: refs/heads/master
Date: 2016-02-19T13:54:02+01:00
Author: Stanislav Laznicka (stlaz) <slaznick@redhat.com>
Commit: https://github.com/collective/icalendar/commit/2c155275b324c9340672a685c80b4a42147bcacc

Added PERIOD value type to date types

https://github.com/collective/icalendar/issues/184

Files changed:
M src/icalendar/prop.py
M src/icalendar/tests/test_fixed_issues.py

diff --git a/src/icalendar/prop.py b/src/icalendar/prop.py
index cb50e4a..f084e84 100644
--- a/src/icalendar/prop.py
+++ b/src/icalendar/prop.py
@@ -273,14 +273,17 @@ class vDDDTypes(object):
     So this is practical.
     """
     def __init__(self, dt):
-        if not isinstance(dt, (datetime, date, timedelta, time)):
-            raise ValueError('You must use datetime, date, timedelta or time')
+        if not isinstance(dt, (datetime, date, timedelta, time, tuple)):
+            raise ValueError('You must use datetime, date, timedelta, '
+                             'time or tuple (for periods)')
         if isinstance(dt, datetime):
             self.params = Parameters({'value': 'DATE-TIME'})
         elif isinstance(dt, date):
             self.params = Parameters({'value': 'DATE'})
         elif isinstance(dt, time):
             self.params = Parameters({'value': 'TIME'})
+        elif isinstance(dt, tuple):
+            self.params = Parameters({'value': 'PERIOD'})
 
         if (isinstance(dt, datetime) or isinstance(dt, time))\
                 and getattr(dt, 'tzinfo', False):
@@ -303,8 +306,10 @@ def to_ical(self):
             return vDuration(dt).to_ical()
         elif isinstance(dt, time):
             return vTime(dt).to_ical()
+        elif isinstance(dt, tuple) and len(dt) == 2:
+            return vPeriod(dt).to_ical()
         else:
-            raise ValueError('Unknown date type')
+            raise ValueError('Unknown date type: {}'.format(type(dt)))
 
     @classmethod
     def from_ical(cls, ical, timezone=None):
@@ -313,6 +318,8 @@ def from_ical(cls, ical, timezone=None):
         u = ical.upper()
         if u.startswith(('P', '-P', '+P')):
             return vDuration.from_ical(ical)
+        if '/' in u:
+            return vPeriod.from_ical(ical)
 
         if len(ical) in (15, 16):
             return vDatetime.from_ical(ical, timezone=timezone)
diff --git a/src/icalendar/tests/test_fixed_issues.py b/src/icalendar/tests/test_fixed_issues.py
index ae29535..8a5f219 100644
--- a/src/icalendar/tests/test_fixed_issues.py
+++ b/src/icalendar/tests/test_fixed_issues.py
@@ -368,7 +368,7 @@ def test_index_error_issue(self):
         """
 
         with self.assertRaises(ValueError):
-            cal = icalendar.Calendar.from_ical('VERSION:2.0')
+            icalendar.Calendar.from_ical('VERSION:2.0')
 
     def test_issue_178(self):
         """Issue #178 - A component with an unknown/invalid name is represented
@@ -411,3 +411,23 @@ def test_issue_178(self):
                          b'BEGIN:MYCOMPTOO\r\nDTSTAMP:20150121T080000\r\n'
                          b'BEGIN:VEVENT\r\nDTSTART:20150122\r\nUID:12345\r\n'
                          b'END:VEVENT\r\nEND:MYCOMPTOO\r\n')
+
+    def test_issue_184(self):
+        """Issue #184 - Previous changes in code broke already broken
+        representation of PERIOD values - in a new way"""
+
+        ical_str = ['BEGIN:VEVENT',
+                    'DTSTAMP:20150219T133000',
+                    'DTSTART:20150219T133000',
+                    'UID:1234567',
+                    'RDATE;VALUE=PERIOD:20150219T133000/PT10H',
+                    'END:VEVENT']
+
+        event = icalendar.Event.from_ical('\r\n'.join(ical_str))
+        self.assertEqual(event.errors, [])
+        self.assertEqual(event.to_ical(),
+                         b'BEGIN:VEVENT\r\nDTSTART:20150219T133000\r\n'
+                         b'DTSTAMP:20150219T133000\r\nUID:1234567\r\n'
+                         b'RDATE;VALUE=PERIOD:20150219T133000/PT10H\r\n'
+                         b'END:VEVENT\r\n'
+                         )


Repository: icalendar


Branch: refs/heads/master
Date: 2016-05-26T11:00:11+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/icalendar/commit/f0d0496309b948ddec28d6bafd017d116117014e

Merge pull request #189 from stlaz/issue_184

Added PERIOD value type to date types

Files changed:
M src/icalendar/prop.py
M src/icalendar/tests/test_fixed_issues.py

diff --git a/src/icalendar/prop.py b/src/icalendar/prop.py
index cb50e4a..f084e84 100644
--- a/src/icalendar/prop.py
+++ b/src/icalendar/prop.py
@@ -273,14 +273,17 @@ class vDDDTypes(object):
     So this is practical.
     """
     def __init__(self, dt):
-        if not isinstance(dt, (datetime, date, timedelta, time)):
-            raise ValueError('You must use datetime, date, timedelta or time')
+        if not isinstance(dt, (datetime, date, timedelta, time, tuple)):
+            raise ValueError('You must use datetime, date, timedelta, '
+                             'time or tuple (for periods)')
         if isinstance(dt, datetime):
             self.params = Parameters({'value': 'DATE-TIME'})
         elif isinstance(dt, date):
             self.params = Parameters({'value': 'DATE'})
         elif isinstance(dt, time):
             self.params = Parameters({'value': 'TIME'})
+        elif isinstance(dt, tuple):
+            self.params = Parameters({'value': 'PERIOD'})
 
         if (isinstance(dt, datetime) or isinstance(dt, time))\
                 and getattr(dt, 'tzinfo', False):
@@ -303,8 +306,10 @@ def to_ical(self):
             return vDuration(dt).to_ical()
         elif isinstance(dt, time):
             return vTime(dt).to_ical()
+        elif isinstance(dt, tuple) and len(dt) == 2:
+            return vPeriod(dt).to_ical()
         else:
-            raise ValueError('Unknown date type')
+            raise ValueError('Unknown date type: {}'.format(type(dt)))
 
     @classmethod
     def from_ical(cls, ical, timezone=None):
@@ -313,6 +318,8 @@ def from_ical(cls, ical, timezone=None):
         u = ical.upper()
         if u.startswith(('P', '-P', '+P')):
             return vDuration.from_ical(ical)
+        if '/' in u:
+            return vPeriod.from_ical(ical)
 
         if len(ical) in (15, 16):
             return vDatetime.from_ical(ical, timezone=timezone)
diff --git a/src/icalendar/tests/test_fixed_issues.py b/src/icalendar/tests/test_fixed_issues.py
index 6b375d3..d1d2ade 100644
--- a/src/icalendar/tests/test_fixed_issues.py
+++ b/src/icalendar/tests/test_fixed_issues.py
@@ -369,7 +369,7 @@ def test_index_error_issue(self):
         """
 
         with self.assertRaises(ValueError):
-            cal = icalendar.Calendar.from_ical('VERSION:2.0')
+            icalendar.Calendar.from_ical('VERSION:2.0')
 
     def test_issue_178(self):
         """Issue #178 - A component with an unknown/invalid name is represented
@@ -412,3 +412,23 @@ def test_issue_178(self):
                          b'BEGIN:MYCOMPTOO\r\nDTSTAMP:20150121T080000\r\n'
                          b'BEGIN:VEVENT\r\nDTSTART:20150122\r\nUID:12345\r\n'
                          b'END:VEVENT\r\nEND:MYCOMPTOO\r\n')
+
+    def test_issue_184(self):
+        """Issue #184 - Previous changes in code broke already broken
+        representation of PERIOD values - in a new way"""
+
+        ical_str = ['BEGIN:VEVENT',
+                    'DTSTAMP:20150219T133000',
+                    'DTSTART:20150219T133000',
+                    'UID:1234567',
+                    'RDATE;VALUE=PERIOD:20150219T133000/PT10H',
+                    'END:VEVENT']
+
+        event = icalendar.Event.from_ical('\r\n'.join(ical_str))
+        self.assertEqual(event.errors, [])
+        self.assertEqual(event.to_ical(),
+                         b'BEGIN:VEVENT\r\nDTSTART:20150219T133000\r\n'
+                         b'DTSTAMP:20150219T133000\r\nUID:1234567\r\n'
+                         b'RDATE;VALUE=PERIOD:20150219T133000/PT10H\r\n'
+                         b'END:VEVENT\r\n'
+                         )


