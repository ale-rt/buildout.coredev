Repository: archetypes.referencebrowserwidget


Branch: refs/heads/master
Date: 2016-01-19T11:12:10-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/archetypes.referencebrowserwidget/commit/f703ba9cda739befe516551a16ef881819d454a9

fix to work for plone 5

Files changed:
M CHANGES.rst
M src/archetypes/referencebrowserwidget/browser/view.py
M src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
M src/archetypes/referencebrowserwidget/tests/test_product.py
M src/archetypes/referencebrowserwidget/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 25813aa..a59cb46 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix to work with Plone 5
 
 
 2.5.6 (2015-11-27)
diff --git a/src/archetypes/referencebrowserwidget/browser/view.py b/src/archetypes/referencebrowserwidget/browser/view.py
index a28426b..782544b 100644
--- a/src/archetypes/referencebrowserwidget/browser/view.py
+++ b/src/archetypes/referencebrowserwidget/browser/view.py
@@ -204,8 +204,8 @@ def __init__(self, context, request):
         base_props = getToolByName(aq_inner(context), 'base_properties', None)
         if base_props is not None:
 
-            self.discreetColor = getattr(base_props, 'discreetColor',
-                    DISCREETCOLOR)
+            self.discreetColor = getattr(
+                base_props, 'discreetColor', DISCREETCOLOR)
         else:
             # XXX This concept has changed in Plone 4.0
             self.discreetColor = DISCREETCOLOR
@@ -286,8 +286,8 @@ def wildcard_help_message(self):
         else:
             return _("wild_card_search_disabled_help",
                      default="Full-text search is disabled: searching for 'budget' will only "
-                     "return elements containing exact term 'budget'. You can enable full-text search "
-                     "by appending a '*' at the end of a word. For example, searching for 'budget*' "
+                     "return elements containing exact term 'budget'. You can enable full-text search "  # noqa
+                     "by appending a '*' at the end of a word. For example, searching for 'budget*' "  # noqa
                      "will also return elements containing 'budgetary'.")
 
     def getResult(self):
@@ -297,7 +297,8 @@ def getResult(self):
         # turn search string into a wildcard search if relevant, so if
         # wild_card_search is True and if current index is a ZCTextIndex
         index = self.search_catalog.Indexes[self.search_index]
-        if self.search_text and self.widget.use_wildcard_search and index.getId() in self.wildcardable_indexes:
+        if (self.search_text and self.widget.use_wildcard_search and
+                index.getId() in self.wildcardable_indexes):
             # only append a '*' if not already ending with a '*' and not surrounded
             # by " ", this is the case if user want to search exact match
             if not self.search_text.endswith('*') and \
@@ -307,7 +308,8 @@ def getResult(self):
         qc = getMultiAdapter((self.context, self.request),
                              name='refbrowser_querycatalog')
         if self.widget.show_results_without_query or self.search_text:
-            result = (self.widget.show_results_without_query or
+            result = (
+                self.widget.show_results_without_query or
                 self.search_text) and \
                 qc(search_catalog=self.widget.search_catalog)
 
@@ -368,8 +370,8 @@ def breadcrumbs(self, startup_directory=None):
         else:
             # display only crumbs into startup directory
             startup_dir_url = startup_directory or \
-                utils.getStartupDirectory(context,
-                        self.widget.getStartupDirectory(context, self.field))
+                utils.getStartupDirectory(
+                    context, self.widget.getStartupDirectory(context, self.field))
             newcrumbs = []
             crumbs = [c for c in crumbs
                       if c['absolute_url'].startswith(startup_dir_url)]
@@ -417,10 +419,6 @@ def title_or_id(self, item):
         return getattr(item, 'Title', '') or getattr(item, 'getId', '')
 
     def preview_url(self, item):
-        portal_properties = getMultiAdapter((self.context, self.request),
-                                            name=u'plone_tools').properties()
-        site_properties = portal_properties.site_properties
-        types_use_view = site_properties.typesUseViewActionInListings
-        if item.portal_type in types_use_view:
+        if item.portal_type in utils.getTypesUseViewActionInListings(self.context, self.request):
             return item.getURL() + '/view'
         return item.getURL()
diff --git a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
index 981af18..794595e 100644
--- a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
+++ b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
@@ -55,7 +55,7 @@
         </tal:item>
         </li>
         <li tal:condition="not:can_view" tal:omit-tag="not:multiValued">
-          <span i18:translate="">Undisclosed</span>
+          <span i18n:translate="">Undisclosed</span>
         </li>
         </tal:check>
         </tal:items>
@@ -162,7 +162,7 @@
                i18n:attributes="value label_add;"
                tal:define="popup_width widget/popup_width|string:500;
                            popup_height widget/popup_height|string:550;"
-               tal:attributes="src string:${startup_directory}/refbrowser_popup?fieldName=${fieldName}&amp;fieldRealName=${field/getName}&amp;at_url=${at_url};
+               tal:attributes="src string:${startup_directory}/refbrowser_popup?fieldName=${fieldName}&amp;fieldRealName=${field/getName}&amp;at_url=${at_url}&amp;_authenticator=${context/@@authenticator/token|nothing};
                            rel string:#${overlay_id}" />
         <input type="button" class="destructive removereference" value="Clear reference"
                i18n:attributes="value label_remove_reference"
diff --git a/src/archetypes/referencebrowserwidget/tests/test_product.py b/src/archetypes/referencebrowserwidget/tests/test_product.py
index 37ee063..b85b7ff 100644
--- a/src/archetypes/referencebrowserwidget/tests/test_product.py
+++ b/src/archetypes/referencebrowserwidget/tests/test_product.py
@@ -1,31 +1,40 @@
-import unittest
 import os.path
 import re
+import unittest
 from urllib import urlencode
 
+from Products.Archetypes.tests.utils import makeContent
+from Products.CMFCore.permissions import AccessContentsInformation
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import _checkPermission
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import Batch
+from Products.Five import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.PloneTestCase.PloneTestCase import default_password
+from Products.PloneTestCase.PloneTestCase import portal_owner
+from archetypes.referencebrowserwidget.browser.view import ReferenceBrowserHelperView
+from archetypes.referencebrowserwidget.interfaces import IFieldRelation
+from archetypes.referencebrowserwidget.interfaces import IReferenceBrowserHelperView
+from archetypes.referencebrowserwidget.tests.base import DummyObject
+from archetypes.referencebrowserwidget.tests.base import FunctionalTestCase
+from archetypes.referencebrowserwidget.tests.base import PopupBaseTestCase
+from archetypes.referencebrowserwidget.tests.base import TestCase
+from archetypes.referencebrowserwidget.tests.base import normalize
+from plone.app.form._named import named_template_adapter
+from plone.app.layout.navigation.interfaces import INavigationRoot
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
 import zope.component
-import zope.interface
 from zope.formlib.namedtemplate import INamedTemplate
+import zope.interface
 from zope.publisher.browser import TestRequest
 
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.Five import BrowserView
 try:
     from Testing.testbrowser import Browser  # Zope >= 2.13
     Browser  # pyflakes
 except ImportError:
     from Products.Five.testbrowser import Browser  # Zope < 2.13
-
-from plone.app.form._named import named_template_adapter
-from plone.app.layout.navigation.interfaces import INavigationRoot
-
-from Products.Archetypes.tests.utils import makeContent
-from Products.CMFCore.permissions import AccessContentsInformation
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import _checkPermission
-from Products.CMFCore.utils import getToolByName
-from Products.PloneTestCase.PloneTestCase import default_password
-from Products.PloneTestCase.PloneTestCase import portal_owner
 try:
     import plone.uuid
     plone.uuid  # pyflakes
@@ -38,18 +47,6 @@
 except ImportError:
     HAS_DASH_UUID = False
 
-from Products.CMFPlone import Batch
-
-from archetypes.referencebrowserwidget.tests.base import TestCase
-from archetypes.referencebrowserwidget.tests.base import FunctionalTestCase
-from archetypes.referencebrowserwidget.tests.base import PopupBaseTestCase
-from archetypes.referencebrowserwidget.tests.base import normalize
-from archetypes.referencebrowserwidget.tests.base import DummyObject
-from archetypes.referencebrowserwidget.interfaces import (
-    IFieldRelation, IReferenceBrowserHelperView)
-from archetypes.referencebrowserwidget.browser.view import \
-    ReferenceBrowserHelperView
-
 _marker = []
 
 
@@ -320,8 +317,12 @@ def test_preview_url(self):
         assert popup.preview_url(brain) == brain.getURL()
 
         # now testing what URL is get for content's where "/view" if forced
-        site_properties = self.portal.portal_properties.site_properties
-        site_properties.typesUseViewActionInListings = ('RefBrowserDemo',)
+        try:
+            site_properties = self.portal.portal_properties.site_properties
+            site_properties.typesUseViewActionInListings = ('RefBrowserDemo',)
+        except (AttributeError, KeyError):
+            registry = getUtility(IRegistry)
+            registry['plone.types_use_view_action_in_listings'] = ['RefBrowserDemo']
         assert popup.preview_url(brain) == brain.getURL() + '/view'
 
     def test_at_url(self):
@@ -660,7 +661,7 @@ def test_multivalued(self):
         response = self.publish(context.absolute_url(1) + '/base_edit',
                                 self.basic_auth)
         self.assert_(
-            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'
+            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'  # noqa
             in response.getBody())
 
         # we want to support this as well
@@ -671,7 +672,7 @@ def test_multivalued(self):
                                 self.basic_auth)
         # this should be the same
         self.assert_(
-            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'
+            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'  # noqa
             in response.getBody())
 
     def test_basewidget(self):
@@ -695,7 +696,7 @@ def test_basewidget(self):
         assert ('<input type="hidden" name="singleRef" id="ref_browser_singleRef" /> ') in body
         assert ('<input type="button" class="searchButton addreference" '
                 'value="Add..." src="') in body
-        assert '''<input type="button" class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0" />''' in body
+        assert '''<input type="button" class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0" />''' in body  # noqa
 
     def getNormalizedPopup(self, url=None, field=None, startup_path=None):
         if url is None:
@@ -729,8 +730,8 @@ def test_popup_items(self):
         wanted_insertlinks = 2
 
         body = self.getNormalizedPopup()
-        INSERTLINK = re.compile(r'<input type="checkbox" class="insertreference" id="[0-9a-f]*?" rel="[0-9a-f]*?" />')
-        INSERTLINK_UUID = re.compile(r'<input type="checkbox" class="insertreference" id="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" rel="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" />')
+        INSERTLINK = re.compile(r'<input type="checkbox" class="insertreference" id="[0-9a-f]*?" rel="[0-9a-f]*?" />')  # noqa
+        INSERTLINK_UUID = re.compile(r'<input type="checkbox" class="insertreference" id="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" rel="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" />')  # noqa
 
         ROWS = re.compile(r'<tr.*?>(.*?)</tr>', re.MULTILINE | re.DOTALL)
         self.assertEqual(len(ROWS.findall(body)), wanted_rows)
@@ -742,7 +743,7 @@ def test_popup_items(self):
         # add a news-item, which is not shown in the popup because its not in allowed_types
         makeContent(self.portal, portal_type='News Item', id='newsitem')
         body = self.getNormalizedPopup()
-        self.assertEqual(len(ROWS.findall(body)), wanted_rows, 'not linkable types should not be shown')
+        self.assertEqual(len(ROWS.findall(body)), wanted_rows, 'not linkable types should not be shown')  # noqa
         if HAS_DASH_UUID:
             self.assertEqual(len(INSERTLINK_UUID.findall(body)), wanted_insertlinks)
         else:
@@ -813,4 +814,4 @@ def test_suite():
         unittest.makeSuite(PopupBreadcrumbTestCase),
         unittest.makeSuite(HelperViewTestCase),
         unittest.makeSuite(IntegrationTestCase),
-        ])
+        ])
\ No newline at end of file
diff --git a/src/archetypes/referencebrowserwidget/utils.py b/src/archetypes/referencebrowserwidget/utils.py
index e05c823..9773212 100644
--- a/src/archetypes/referencebrowserwidget/utils.py
+++ b/src/archetypes/referencebrowserwidget/utils.py
@@ -1,5 +1,8 @@
 from Products.CMFCore.utils import getToolByName
 from ZODB.POSException import ConflictError
+from plone.registry.interfaces import IRegistry
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 
 
 def getStartupDirectory(context, directory=''):
@@ -60,7 +63,7 @@ def filterPortalFactory(url):
 
             basePath = '/'.join(pathParts)
         else:
-            basePath = context.absolute_url(relative = 1)
+            basePath = context.absolute_url(relative=1)
 
         # Resolve the URL
         try:
@@ -166,3 +169,15 @@ def getSearchCatalog(context, name=''):
         catalog = portal_catalog
 
     return catalog
+
+
+def getTypesUseViewActionInListings(context, request):
+    try:
+        portal_properties = getMultiAdapter((context, request),
+                                            name=u'plone_tools').properties()
+        site_properties = portal_properties.site_properties
+        return site_properties.typesUseViewActionInListings
+    except (AttributeError, KeyError):
+        # plone 5
+        registry = getUtility(IRegistry)
+        return registry.get('plone.types_use_view_action_in_listings', [])
\ No newline at end of file


Repository: archetypes.referencebrowserwidget


Branch: refs/heads/master
Date: 2016-01-19T11:58:50-05:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/archetypes.referencebrowserwidget/commit/f67e53642444df9c84a9231d7b458b8bb62fa98b

in case jquery tools overlay is not loaded

Files changed:
M src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js

diff --git a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js
index 5c97113..cfea8e4 100644
--- a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js
+++ b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js
@@ -6,30 +6,38 @@ jQuery(function ($) {
     $('[id^=atrb_]').detach().appendTo("body");
 
     // the overlay itself
-    $('.addreference').overlay({
-        onBeforeLoad: function () {
-            ov = $('div#content').data('overlay');
-            // close overlay, if there is one already
-            // we only allow one referencebrowser per time
-            if (ov) {
-                ov.close();
-            }
-            var wrap = this.getOverlay().find('.overlaycontent');
-            var src = this.getTrigger().attr('src');
-            var srcfilter = src + ' >*';
-            wrap.data('srcfilter', srcfilter);
-            $('div#content').data('overlay', this);
-            resetHistory();
-            wrap.load(srcfilter, function () {
-                var fieldname = wrap.find('input[name=fieldName]').attr('value');
-                check_referenced_items(fieldname);
-            });
-        },
-        onLoad: function () {
-            widget_id = this.getTrigger().attr('rel').substring(6);
-            disablecurrentrelations(widget_id);
+    var _loadOverlay = function(){
+        // could be loaded after this...
+        if(!$.fn.overlay){
+            setTimeout(_loadOverlay, 50);
+            return;
         }
-    });
+        $('.addreference').overlay({
+            onBeforeLoad: function () {
+                ov = $('div#content').data('overlay');
+                // close overlay, if there is one already
+                // we only allow one referencebrowser per time
+                if (ov) {
+                    ov.close();
+                }
+                var wrap = this.getOverlay().find('.overlaycontent');
+                var src = this.getTrigger().attr('src');
+                var srcfilter = src + ' >*';
+                wrap.data('srcfilter', srcfilter);
+                $('div#content').data('overlay', this);
+                resetHistory();
+                wrap.load(srcfilter, function () {
+                    var fieldname = wrap.find('input[name=fieldName]').attr('value');
+                    check_referenced_items(fieldname);
+                });
+            },
+            onLoad: function () {
+                widget_id = this.getTrigger().attr('rel').substring(6);
+                disablecurrentrelations(widget_id);
+            }
+        });
+    };
+    _loadOverlay();
 
     // the breadcrumb-links and the links of the 'tree'-navigati        on
     $(document).on('click', '[id^=atrb_] a.browsesite', function (event) {


Repository: archetypes.referencebrowserwidget


Branch: refs/heads/master
Date: 2016-01-19T12:39:27-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/archetypes.referencebrowserwidget/commit/4ebc385cd898ecff67d1d2b01da1e7461f8104ac

Merge pull request #31 from plone/plone5-fixes

fix to work for plone 5

Files changed:
M CHANGES.rst
M src/archetypes/referencebrowserwidget/browser/view.py
M src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js
M src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
M src/archetypes/referencebrowserwidget/tests/test_product.py
M src/archetypes/referencebrowserwidget/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 25813aa..a59cb46 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix to work with Plone 5
 
 
 2.5.6 (2015-11-27)
diff --git a/src/archetypes/referencebrowserwidget/browser/view.py b/src/archetypes/referencebrowserwidget/browser/view.py
index a28426b..782544b 100644
--- a/src/archetypes/referencebrowserwidget/browser/view.py
+++ b/src/archetypes/referencebrowserwidget/browser/view.py
@@ -204,8 +204,8 @@ def __init__(self, context, request):
         base_props = getToolByName(aq_inner(context), 'base_properties', None)
         if base_props is not None:
 
-            self.discreetColor = getattr(base_props, 'discreetColor',
-                    DISCREETCOLOR)
+            self.discreetColor = getattr(
+                base_props, 'discreetColor', DISCREETCOLOR)
         else:
             # XXX This concept has changed in Plone 4.0
             self.discreetColor = DISCREETCOLOR
@@ -286,8 +286,8 @@ def wildcard_help_message(self):
         else:
             return _("wild_card_search_disabled_help",
                      default="Full-text search is disabled: searching for 'budget' will only "
-                     "return elements containing exact term 'budget'. You can enable full-text search "
-                     "by appending a '*' at the end of a word. For example, searching for 'budget*' "
+                     "return elements containing exact term 'budget'. You can enable full-text search "  # noqa
+                     "by appending a '*' at the end of a word. For example, searching for 'budget*' "  # noqa
                      "will also return elements containing 'budgetary'.")
 
     def getResult(self):
@@ -297,7 +297,8 @@ def getResult(self):
         # turn search string into a wildcard search if relevant, so if
         # wild_card_search is True and if current index is a ZCTextIndex
         index = self.search_catalog.Indexes[self.search_index]
-        if self.search_text and self.widget.use_wildcard_search and index.getId() in self.wildcardable_indexes:
+        if (self.search_text and self.widget.use_wildcard_search and
+                index.getId() in self.wildcardable_indexes):
             # only append a '*' if not already ending with a '*' and not surrounded
             # by " ", this is the case if user want to search exact match
             if not self.search_text.endswith('*') and \
@@ -307,7 +308,8 @@ def getResult(self):
         qc = getMultiAdapter((self.context, self.request),
                              name='refbrowser_querycatalog')
         if self.widget.show_results_without_query or self.search_text:
-            result = (self.widget.show_results_without_query or
+            result = (
+                self.widget.show_results_without_query or
                 self.search_text) and \
                 qc(search_catalog=self.widget.search_catalog)
 
@@ -368,8 +370,8 @@ def breadcrumbs(self, startup_directory=None):
         else:
             # display only crumbs into startup directory
             startup_dir_url = startup_directory or \
-                utils.getStartupDirectory(context,
-                        self.widget.getStartupDirectory(context, self.field))
+                utils.getStartupDirectory(
+                    context, self.widget.getStartupDirectory(context, self.field))
             newcrumbs = []
             crumbs = [c for c in crumbs
                       if c['absolute_url'].startswith(startup_dir_url)]
@@ -417,10 +419,6 @@ def title_or_id(self, item):
         return getattr(item, 'Title', '') or getattr(item, 'getId', '')
 
     def preview_url(self, item):
-        portal_properties = getMultiAdapter((self.context, self.request),
-                                            name=u'plone_tools').properties()
-        site_properties = portal_properties.site_properties
-        types_use_view = site_properties.typesUseViewActionInListings
-        if item.portal_type in types_use_view:
+        if item.portal_type in utils.getTypesUseViewActionInListings(self.context, self.request):
             return item.getURL() + '/view'
         return item.getURL()
diff --git a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js
index 5c97113..cfea8e4 100644
--- a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js
+++ b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.js
@@ -6,30 +6,38 @@ jQuery(function ($) {
     $('[id^=atrb_]').detach().appendTo("body");
 
     // the overlay itself
-    $('.addreference').overlay({
-        onBeforeLoad: function () {
-            ov = $('div#content').data('overlay');
-            // close overlay, if there is one already
-            // we only allow one referencebrowser per time
-            if (ov) {
-                ov.close();
-            }
-            var wrap = this.getOverlay().find('.overlaycontent');
-            var src = this.getTrigger().attr('src');
-            var srcfilter = src + ' >*';
-            wrap.data('srcfilter', srcfilter);
-            $('div#content').data('overlay', this);
-            resetHistory();
-            wrap.load(srcfilter, function () {
-                var fieldname = wrap.find('input[name=fieldName]').attr('value');
-                check_referenced_items(fieldname);
-            });
-        },
-        onLoad: function () {
-            widget_id = this.getTrigger().attr('rel').substring(6);
-            disablecurrentrelations(widget_id);
+    var _loadOverlay = function(){
+        // could be loaded after this...
+        if(!$.fn.overlay){
+            setTimeout(_loadOverlay, 50);
+            return;
         }
-    });
+        $('.addreference').overlay({
+            onBeforeLoad: function () {
+                ov = $('div#content').data('overlay');
+                // close overlay, if there is one already
+                // we only allow one referencebrowser per time
+                if (ov) {
+                    ov.close();
+                }
+                var wrap = this.getOverlay().find('.overlaycontent');
+                var src = this.getTrigger().attr('src');
+                var srcfilter = src + ' >*';
+                wrap.data('srcfilter', srcfilter);
+                $('div#content').data('overlay', this);
+                resetHistory();
+                wrap.load(srcfilter, function () {
+                    var fieldname = wrap.find('input[name=fieldName]').attr('value');
+                    check_referenced_items(fieldname);
+                });
+            },
+            onLoad: function () {
+                widget_id = this.getTrigger().attr('rel').substring(6);
+                disablecurrentrelations(widget_id);
+            }
+        });
+    };
+    _loadOverlay();
 
     // the breadcrumb-links and the links of the 'tree'-navigati        on
     $(document).on('click', '[id^=atrb_] a.browsesite', function (event) {
diff --git a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
index 981af18..794595e 100644
--- a/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
+++ b/src/archetypes/referencebrowserwidget/skins/referencebrowser/referencebrowser.pt
@@ -55,7 +55,7 @@
         </tal:item>
         </li>
         <li tal:condition="not:can_view" tal:omit-tag="not:multiValued">
-          <span i18:translate="">Undisclosed</span>
+          <span i18n:translate="">Undisclosed</span>
         </li>
         </tal:check>
         </tal:items>
@@ -162,7 +162,7 @@
                i18n:attributes="value label_add;"
                tal:define="popup_width widget/popup_width|string:500;
                            popup_height widget/popup_height|string:550;"
-               tal:attributes="src string:${startup_directory}/refbrowser_popup?fieldName=${fieldName}&amp;fieldRealName=${field/getName}&amp;at_url=${at_url};
+               tal:attributes="src string:${startup_directory}/refbrowser_popup?fieldName=${fieldName}&amp;fieldRealName=${field/getName}&amp;at_url=${at_url}&amp;_authenticator=${context/@@authenticator/token|nothing};
                            rel string:#${overlay_id}" />
         <input type="button" class="destructive removereference" value="Clear reference"
                i18n:attributes="value label_remove_reference"
diff --git a/src/archetypes/referencebrowserwidget/tests/test_product.py b/src/archetypes/referencebrowserwidget/tests/test_product.py
index 37ee063..b85b7ff 100644
--- a/src/archetypes/referencebrowserwidget/tests/test_product.py
+++ b/src/archetypes/referencebrowserwidget/tests/test_product.py
@@ -1,31 +1,40 @@
-import unittest
 import os.path
 import re
+import unittest
 from urllib import urlencode
 
+from Products.Archetypes.tests.utils import makeContent
+from Products.CMFCore.permissions import AccessContentsInformation
+from Products.CMFCore.permissions import View
+from Products.CMFCore.utils import _checkPermission
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import Batch
+from Products.Five import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.PloneTestCase.PloneTestCase import default_password
+from Products.PloneTestCase.PloneTestCase import portal_owner
+from archetypes.referencebrowserwidget.browser.view import ReferenceBrowserHelperView
+from archetypes.referencebrowserwidget.interfaces import IFieldRelation
+from archetypes.referencebrowserwidget.interfaces import IReferenceBrowserHelperView
+from archetypes.referencebrowserwidget.tests.base import DummyObject
+from archetypes.referencebrowserwidget.tests.base import FunctionalTestCase
+from archetypes.referencebrowserwidget.tests.base import PopupBaseTestCase
+from archetypes.referencebrowserwidget.tests.base import TestCase
+from archetypes.referencebrowserwidget.tests.base import normalize
+from plone.app.form._named import named_template_adapter
+from plone.app.layout.navigation.interfaces import INavigationRoot
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
 import zope.component
-import zope.interface
 from zope.formlib.namedtemplate import INamedTemplate
+import zope.interface
 from zope.publisher.browser import TestRequest
 
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.Five import BrowserView
 try:
     from Testing.testbrowser import Browser  # Zope >= 2.13
     Browser  # pyflakes
 except ImportError:
     from Products.Five.testbrowser import Browser  # Zope < 2.13
-
-from plone.app.form._named import named_template_adapter
-from plone.app.layout.navigation.interfaces import INavigationRoot
-
-from Products.Archetypes.tests.utils import makeContent
-from Products.CMFCore.permissions import AccessContentsInformation
-from Products.CMFCore.permissions import View
-from Products.CMFCore.utils import _checkPermission
-from Products.CMFCore.utils import getToolByName
-from Products.PloneTestCase.PloneTestCase import default_password
-from Products.PloneTestCase.PloneTestCase import portal_owner
 try:
     import plone.uuid
     plone.uuid  # pyflakes
@@ -38,18 +47,6 @@
 except ImportError:
     HAS_DASH_UUID = False
 
-from Products.CMFPlone import Batch
-
-from archetypes.referencebrowserwidget.tests.base import TestCase
-from archetypes.referencebrowserwidget.tests.base import FunctionalTestCase
-from archetypes.referencebrowserwidget.tests.base import PopupBaseTestCase
-from archetypes.referencebrowserwidget.tests.base import normalize
-from archetypes.referencebrowserwidget.tests.base import DummyObject
-from archetypes.referencebrowserwidget.interfaces import (
-    IFieldRelation, IReferenceBrowserHelperView)
-from archetypes.referencebrowserwidget.browser.view import \
-    ReferenceBrowserHelperView
-
 _marker = []
 
 
@@ -320,8 +317,12 @@ def test_preview_url(self):
         assert popup.preview_url(brain) == brain.getURL()
 
         # now testing what URL is get for content's where "/view" if forced
-        site_properties = self.portal.portal_properties.site_properties
-        site_properties.typesUseViewActionInListings = ('RefBrowserDemo',)
+        try:
+            site_properties = self.portal.portal_properties.site_properties
+            site_properties.typesUseViewActionInListings = ('RefBrowserDemo',)
+        except (AttributeError, KeyError):
+            registry = getUtility(IRegistry)
+            registry['plone.types_use_view_action_in_listings'] = ['RefBrowserDemo']
         assert popup.preview_url(brain) == brain.getURL() + '/view'
 
     def test_at_url(self):
@@ -660,7 +661,7 @@ def test_multivalued(self):
         response = self.publish(context.absolute_url(1) + '/base_edit',
                                 self.basic_auth)
         self.assert_(
-            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'
+            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'  # noqa
             in response.getBody())
 
         # we want to support this as well
@@ -671,7 +672,7 @@ def test_multivalued(self):
                                 self.basic_auth)
         # this should be the same
         self.assert_(
-            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'
+            'class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0"'  # noqa
             in response.getBody())
 
     def test_basewidget(self):
@@ -695,7 +696,7 @@ def test_basewidget(self):
         assert ('<input type="hidden" name="singleRef" id="ref_browser_singleRef" /> ') in body
         assert ('<input type="button" class="searchButton addreference" '
                 'value="Add..." src="') in body
-        assert '''<input type="button" class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0" />''' in body
+        assert '''<input type="button" class="destructive removereference" value="Clear reference" data-fieldname="singleRef" data-multivalued="0" />''' in body  # noqa
 
     def getNormalizedPopup(self, url=None, field=None, startup_path=None):
         if url is None:
@@ -729,8 +730,8 @@ def test_popup_items(self):
         wanted_insertlinks = 2
 
         body = self.getNormalizedPopup()
-        INSERTLINK = re.compile(r'<input type="checkbox" class="insertreference" id="[0-9a-f]*?" rel="[0-9a-f]*?" />')
-        INSERTLINK_UUID = re.compile(r'<input type="checkbox" class="insertreference" id="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" rel="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" />')
+        INSERTLINK = re.compile(r'<input type="checkbox" class="insertreference" id="[0-9a-f]*?" rel="[0-9a-f]*?" />')  # noqa
+        INSERTLINK_UUID = re.compile(r'<input type="checkbox" class="insertreference" id="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" rel="[\w]{8}-[\w]{4}-[\w]{4}-[\w]{4}-[\w]{12}" />')  # noqa
 
         ROWS = re.compile(r'<tr.*?>(.*?)</tr>', re.MULTILINE | re.DOTALL)
         self.assertEqual(len(ROWS.findall(body)), wanted_rows)
@@ -742,7 +743,7 @@ def test_popup_items(self):
         # add a news-item, which is not shown in the popup because its not in allowed_types
         makeContent(self.portal, portal_type='News Item', id='newsitem')
         body = self.getNormalizedPopup()
-        self.assertEqual(len(ROWS.findall(body)), wanted_rows, 'not linkable types should not be shown')
+        self.assertEqual(len(ROWS.findall(body)), wanted_rows, 'not linkable types should not be shown')  # noqa
         if HAS_DASH_UUID:
             self.assertEqual(len(INSERTLINK_UUID.findall(body)), wanted_insertlinks)
         else:
@@ -813,4 +814,4 @@ def test_suite():
         unittest.makeSuite(PopupBreadcrumbTestCase),
         unittest.makeSuite(HelperViewTestCase),
         unittest.makeSuite(IntegrationTestCase),
-        ])
+        ])
\ No newline at end of file
diff --git a/src/archetypes/referencebrowserwidget/utils.py b/src/archetypes/referencebrowserwidget/utils.py
index e05c823..9773212 100644
--- a/src/archetypes/referencebrowserwidget/utils.py
+++ b/src/archetypes/referencebrowserwidget/utils.py
@@ -1,5 +1,8 @@
 from Products.CMFCore.utils import getToolByName
 from ZODB.POSException import ConflictError
+from plone.registry.interfaces import IRegistry
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 
 
 def getStartupDirectory(context, directory=''):
@@ -60,7 +63,7 @@ def filterPortalFactory(url):
 
             basePath = '/'.join(pathParts)
         else:
-            basePath = context.absolute_url(relative = 1)
+            basePath = context.absolute_url(relative=1)
 
         # Resolve the URL
         try:
@@ -166,3 +169,15 @@ def getSearchCatalog(context, name=''):
         catalog = portal_catalog
 
     return catalog
+
+
+def getTypesUseViewActionInListings(context, request):
+    try:
+        portal_properties = getMultiAdapter((context, request),
+                                            name=u'plone_tools').properties()
+        site_properties = portal_properties.site_properties
+        return site_properties.typesUseViewActionInListings
+    except (AttributeError, KeyError):
+        # plone 5
+        registry = getUtility(IRegistry)
+        return registry.get('plone.types_use_view_action_in_listings', [])
\ No newline at end of file


