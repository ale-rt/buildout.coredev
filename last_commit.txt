Repository: plone.transformchain


Branch: refs/heads/master
Date: 2016-06-13T09:43:27+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.transformchain/commit/4b52a9d6c4ae24c308820940516983b5d3117755

Added events to notifiy before/after all/single transform(s) are executed

Files changed:
A plone/transformchain/events.py
M CHANGES.rst
M plone/transformchain/interfaces.py
M plone/transformchain/transformer.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 90d6db7..949160e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,13 @@
 Changelog
 =========
 
-1.1.1 (unreleased)
+1.2.0 (unreleased)
 ------------------
 
 New:
 
-- *add item here*
+- Added events to notifiy before/after all/single transform(s) are executed.
+  [jensens]
 
 Fixes:
 
diff --git a/plone/transformchain/events.py b/plone/transformchain/events.py
new file mode 100644
index 0000000..b49267b
--- /dev/null
+++ b/plone/transformchain/events.py
@@ -0,0 +1,40 @@
+# -*- coding: utf-8 -*-
+from plone.transformchain.interfaces import IAfterSingleTransformEvent
+from plone.transformchain.interfaces import IAfterTransformsEvent
+from plone.transformchain.interfaces import IBeforeSingleTransformEvent
+from plone.transformchain.interfaces import IBeforeTransformsEvent
+from zope.interface import implementer
+
+
+class BaseTransformEvent(object):
+
+    def __init__(self, request):
+        self.request = request
+
+
+class BaseSingleTransformEvent(BaseTransformEvent):
+
+    def __init__(self, request, name, handler):
+        super(BaseSingleTransformEvent, self).__init__(request)
+        self.name = name
+        self.handler = handler
+
+
+@implementer(IBeforeTransformsEvent)
+class BeforeTransforms(BaseTransformEvent):
+    pass
+
+
+@implementer(IAfterTransformsEvent)
+class AfterTransforms(BaseTransformEvent):
+    pass
+
+
+@implementer(IBeforeSingleTransformEvent)
+class BeforeSingleTransform(BaseSingleTransformEvent):
+    pass
+
+
+@implementer(IAfterSingleTransformEvent)
+class AfterSingleTransform(BaseSingleTransformEvent):
+    pass
diff --git a/plone/transformchain/interfaces.py b/plone/transformchain/interfaces.py
index ebfad19..37f6b11 100644
--- a/plone/transformchain/interfaces.py
+++ b/plone/transformchain/interfaces.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Attribute
 from zope.interface import Interface
 
 
@@ -79,3 +80,39 @@ def __call__(request, result, encoding):
 
         Do not call `request.response.setBody()`. It will have no effect.
         """
+
+
+class IBaseTransformEvent(Interface):
+    """Base class for transform events.
+
+    Transform events are notified at different points in transformations.
+    """
+    request = Attribute('The request being affected')
+
+
+class IBeforeTransformsEvent(IBaseTransformEvent):
+    """Notified before any transforms are started.
+    """
+
+
+class IAfterTransformsEvent(IBaseTransformEvent):
+    """Notified after all transforms are finished.
+    """
+
+
+class IBaseSingleTransformEvent(IBaseTransformEvent):
+    """Base class for a single transformation notification.
+    """
+
+    name = Attribute('the name of the transformation')
+    handler = Attribute('the transformation handler')
+
+
+class IBeforeSingleTransformEvent(IBaseSingleTransformEvent):
+    """Notified before a single Transformation is executed.
+    """
+
+
+class IAfterSingleTransformEvent(IBaseSingleTransformEvent):
+    """Notified after a single Transformation is executed.
+    """
diff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py
index 19fb069..24dcc41 100644
--- a/plone/transformchain/transformer.py
+++ b/plone/transformchain/transformer.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
-from operator import attrgetter
+from plone.transformchain import events
 from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY
 from plone.transformchain.interfaces import ITransform
 from plone.transformchain.interfaces import ITransformer
 from ZODB.POSException import ConflictError
 from zope.component import getAdapters
+from zope.event import notify
 from zope.interface import implementer
 from ZServer.FTPRequest import FTPRequest
 
@@ -14,6 +15,10 @@
 LOGGER = logging.getLogger('plone.transformchain')
 
 
+def _order_getter(pair):
+    return pair[1].order
+
+
 @implementer(ITransformer)
 class Transformer(object):
     """Delegate the opportunity to transform the response to multiple,
@@ -21,20 +26,21 @@ class Transformer(object):
     """
 
     def __call__(self, request, result, encoding):
-        # Don't transform FTP requests
         if isinstance(request, FTPRequest):
+            # Don't transform FTP requests
             return None
-
-        # Off switch
         if request.environ.get(DISABLE_TRANSFORM_REQUEST_KEY, False):
+            # Off switch
             return None
-
+        notify(events.BeforeTransforms(request))
         try:
             published = request.get('PUBLISHED', None)
-            handlers = (
-                v[1] for v in getAdapters((published, request,), ITransform)
+            handlers = sorted(
+                getAdapters((published, request,), ITransform),
+                key=_order_getter
             )
-            for handler in sorted(handlers, key=attrgetter('order')):
+            for name, handler in handlers:
+                notify(events.BeforeSingleTransform(request, name, handler))
                 if isinstance(result, unicode):
                     newResult = handler.transformUnicode(result, encoding)
                 elif isinstance(result, str):
@@ -44,7 +50,8 @@ def __call__(self, request, result, encoding):
 
                 if newResult is not None:
                     result = newResult
-
+                notify(events.AfterSingleTransform(request, name, handler))
+            notify(events.AfterTransforms(request))
             return result
         except ConflictError:
             raise


Repository: plone.transformchain


Branch: refs/heads/master
Date: 2016-06-13T13:39:29+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.transformchain/commit/2594e4f832b0788469932d461eed1ac083f2dd30

Merge pull request #5 from plone/events

Added events to notifiy before/after all/single transform(s) are executed

Files changed:
A plone/transformchain/events.py
M CHANGES.rst
M plone/transformchain/interfaces.py
M plone/transformchain/transformer.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 90d6db7..949160e 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,13 @@
 Changelog
 =========
 
-1.1.1 (unreleased)
+1.2.0 (unreleased)
 ------------------
 
 New:
 
-- *add item here*
+- Added events to notifiy before/after all/single transform(s) are executed.
+  [jensens]
 
 Fixes:
 
diff --git a/plone/transformchain/events.py b/plone/transformchain/events.py
new file mode 100644
index 0000000..b49267b
--- /dev/null
+++ b/plone/transformchain/events.py
@@ -0,0 +1,40 @@
+# -*- coding: utf-8 -*-
+from plone.transformchain.interfaces import IAfterSingleTransformEvent
+from plone.transformchain.interfaces import IAfterTransformsEvent
+from plone.transformchain.interfaces import IBeforeSingleTransformEvent
+from plone.transformchain.interfaces import IBeforeTransformsEvent
+from zope.interface import implementer
+
+
+class BaseTransformEvent(object):
+
+    def __init__(self, request):
+        self.request = request
+
+
+class BaseSingleTransformEvent(BaseTransformEvent):
+
+    def __init__(self, request, name, handler):
+        super(BaseSingleTransformEvent, self).__init__(request)
+        self.name = name
+        self.handler = handler
+
+
+@implementer(IBeforeTransformsEvent)
+class BeforeTransforms(BaseTransformEvent):
+    pass
+
+
+@implementer(IAfterTransformsEvent)
+class AfterTransforms(BaseTransformEvent):
+    pass
+
+
+@implementer(IBeforeSingleTransformEvent)
+class BeforeSingleTransform(BaseSingleTransformEvent):
+    pass
+
+
+@implementer(IAfterSingleTransformEvent)
+class AfterSingleTransform(BaseSingleTransformEvent):
+    pass
diff --git a/plone/transformchain/interfaces.py b/plone/transformchain/interfaces.py
index ebfad19..37f6b11 100644
--- a/plone/transformchain/interfaces.py
+++ b/plone/transformchain/interfaces.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Attribute
 from zope.interface import Interface
 
 
@@ -79,3 +80,39 @@ def __call__(request, result, encoding):
 
         Do not call `request.response.setBody()`. It will have no effect.
         """
+
+
+class IBaseTransformEvent(Interface):
+    """Base class for transform events.
+
+    Transform events are notified at different points in transformations.
+    """
+    request = Attribute('The request being affected')
+
+
+class IBeforeTransformsEvent(IBaseTransformEvent):
+    """Notified before any transforms are started.
+    """
+
+
+class IAfterTransformsEvent(IBaseTransformEvent):
+    """Notified after all transforms are finished.
+    """
+
+
+class IBaseSingleTransformEvent(IBaseTransformEvent):
+    """Base class for a single transformation notification.
+    """
+
+    name = Attribute('the name of the transformation')
+    handler = Attribute('the transformation handler')
+
+
+class IBeforeSingleTransformEvent(IBaseSingleTransformEvent):
+    """Notified before a single Transformation is executed.
+    """
+
+
+class IAfterSingleTransformEvent(IBaseSingleTransformEvent):
+    """Notified after a single Transformation is executed.
+    """
diff --git a/plone/transformchain/transformer.py b/plone/transformchain/transformer.py
index 19fb069..24dcc41 100644
--- a/plone/transformchain/transformer.py
+++ b/plone/transformchain/transformer.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
-from operator import attrgetter
+from plone.transformchain import events
 from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY
 from plone.transformchain.interfaces import ITransform
 from plone.transformchain.interfaces import ITransformer
 from ZODB.POSException import ConflictError
 from zope.component import getAdapters
+from zope.event import notify
 from zope.interface import implementer
 from ZServer.FTPRequest import FTPRequest
 
@@ -14,6 +15,10 @@
 LOGGER = logging.getLogger('plone.transformchain')
 
 
+def _order_getter(pair):
+    return pair[1].order
+
+
 @implementer(ITransformer)
 class Transformer(object):
     """Delegate the opportunity to transform the response to multiple,
@@ -21,20 +26,21 @@ class Transformer(object):
     """
 
     def __call__(self, request, result, encoding):
-        # Don't transform FTP requests
         if isinstance(request, FTPRequest):
+            # Don't transform FTP requests
             return None
-
-        # Off switch
         if request.environ.get(DISABLE_TRANSFORM_REQUEST_KEY, False):
+            # Off switch
             return None
-
+        notify(events.BeforeTransforms(request))
         try:
             published = request.get('PUBLISHED', None)
-            handlers = (
-                v[1] for v in getAdapters((published, request,), ITransform)
+            handlers = sorted(
+                getAdapters((published, request,), ITransform),
+                key=_order_getter
             )
-            for handler in sorted(handlers, key=attrgetter('order')):
+            for name, handler in handlers:
+                notify(events.BeforeSingleTransform(request, name, handler))
                 if isinstance(result, unicode):
                     newResult = handler.transformUnicode(result, encoding)
                 elif isinstance(result, str):
@@ -44,7 +50,8 @@ def __call__(self, request, result, encoding):
 
                 if newResult is not None:
                     result = newResult
-
+                notify(events.AfterSingleTransform(request, name, handler))
+            notify(events.AfterTransforms(request))
             return result
         except ConflictError:
             raise


