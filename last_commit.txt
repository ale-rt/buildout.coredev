Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-11-03T11:12:51-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/ff28fe56a6d78f423909f9e2c238bfc85cb4c8a6

Move get_top_site_from_url
Move ``get_top_site_from_url`` out from here into ``Products.CMFPlone.utils``.
Deprecate old import.

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py
M plone/app/content/tests/test_contents.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ab29bee..dcfba66 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,6 +1,24 @@
 Changelog
 =========
 
+3.3.3 (unreleased)
+------------------
+
+Breaking changes:
+
+- *add item here*
+
+New features:
+
+- Move ``get_top_site_from_url`` out from here into ``Products.CMFPlone.utils``.
+  Deprecate old import.
+  [thet]
+
+Bug fixes:
+
+- *add item here*
+
+
 3.3.2 (unreleased)
 ------------------
 
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index b78e66a..1004499 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -11,14 +11,12 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone import utils
+from Products.CMFPlone.utils import get_top_site_from_url
 from Products.Five import BrowserView
-from urlparse import urlparse
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.component import getUtility
-from zope.component.hooks import getSite
-from zope.component.interfaces import ISite
 from zope.i18n import translate
 from zope.interface import implementer
 
@@ -37,41 +35,10 @@
     Rearrange='plone.app.content.browser.content.rearrange:RearrangeOrderActionView',  # noqa
 )
 
-
-def get_top_site_from_url(context, request):
-    """Find the top-most site, which is still in the url path.
-
-    If the current context is within a subsite within a PloneSiteRoot and no
-    virtual hosting is in place, the PloneSiteRoot is returned.
-    When at the same context but in a virtual hosting environment with the
-    virtual host root pointing to the subsites, it returns the subsite instead
-    of the PloneSiteRoot.
-
-    For this given content structure:
-
-    /Plone/Subsite
-
-    It should return the following in these cases:
-
-    - Naked Plone without virtual hosting, /Plone: Plone
-    - Naked Plone without virtual hosting, /Plone/Subsite: Plone
-    - Virtual hosting which roots to the subsite: Subsite
-    """
-    url_path = urlparse(context.absolute_url()).path.split('/')
-
-    site = getSite()
-    try:
-        for idx in range(len(url_path)):
-            _path = '/'.join(url_path[:idx + 1]) or '/'
-            site_path = request.physicalPathFromURL(_path)
-            site = context.restrictedTraverse('/'.join(site_path) or '/')
-            if ISite.providedBy(site):
-                break
-    except ValueError:
-        # Refs: https://github.com/plone/plone.app.content/issues/103
-        # On error, just return getSite.
-        return getSite()
-    return site
+zope.deferredimport.deprecated(
+    "Import from Products.CMFPlone.utils instead",
+    get_top_site_from_url='Products.CMFPlone:utils.get_top_site_from_url',
+)
 
 
 class ContentsBaseAction(BrowserView):
diff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py
index 1a1d9ee..ff9e1a2 100644
--- a/plone/app/content/tests/test_contents.py
+++ b/plone/app/content/tests/test_contents.py
@@ -11,82 +11,6 @@
 import unittest
 
 
-class ContentsUnitTests(unittest.TestCase):
-
-    def test_get_top_site_from_url(self):
-        """Unit test for ``get_top_site_from_url`` with context and request
-        mocks.
-
-        Test content structure:
-        /approot/PloneSite/folder/SubSite/folder
-        PloneSite and SubSite implement ISite
-        """
-        from plone.app.content.browser.contents import get_top_site_from_url
-        from zope.component.interfaces import ISite
-        from zope.interface import alsoProvides
-        from urlparse import urlparse
-
-        class MockContext(object):
-            vh_url = 'http://nohost'
-            vh_root = ''
-
-            def __init__(self, physical_path):
-                self.physical_path = physical_path
-                if self.physical_path.split('/')[-1] in ('PloneSite', 'SubSite'):  # noqa
-                    alsoProvides(self, ISite)
-
-            @property
-            def id(self):
-                return self.physical_path.split('/')[-1]
-
-            def absolute_url(self):
-                return self.vh_url + self.physical_path[len(self.vh_root):] or '/'  # noqa
-
-            def restrictedTraverse(self, path):
-                return MockContext(self.vh_root + path)
-
-        class MockRequest(object):
-            vh_url = 'http://nohost'
-            vh_root = ''
-
-            def physicalPathFromURL(self, url):
-                # Return the physical path from a URL.
-                # The outer right '/' is not part of the path.
-                path = self.vh_root + urlparse(url).path.rstrip('/')
-                return path.split('/')
-
-        # NO VIRTUAL HOSTING
-
-        req = MockRequest()
-
-        # Case 1:
-        ctx = MockContext('/approot/PloneSite')
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'PloneSite')
-
-        # Case 2
-        ctx = MockContext('/approot/PloneSite/folder')
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'PloneSite')
-
-        # Case 3:
-        ctx = MockContext('/approot/PloneSite/folder/SubSite/folder')
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'PloneSite')
-
-        # VIRTUAL HOSTING ON SUBSITE
-
-        req = MockRequest()
-        req.vh_root = '/approot/PloneSite/folder/SubSite'
-
-        # Case 4:
-        ctx = MockContext('/approot/PloneSite/folder/SubSite')
-        ctx.vh_root = '/approot/PloneSite/folder/SubSite'
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'SubSite')
-
-        # Case 5:
-        ctx = MockContext('/approot/PloneSite/folder/SubSite/folder')
-        ctx.vh_root = '/approot/PloneSite/folder/SubSite'
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'SubSite')
-
-
 class ContentsPasteTests(unittest.TestCase):
     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
 
diff --git a/setup.py b/setup.py
index cb409b4..ec5e90c 100644
--- a/setup.py
+++ b/setup.py
@@ -38,7 +38,7 @@
     ),
     install_requires=[
         'Acquisition',
-        'plone.app.widgets>=2.0.0.dev0',
+        'plone.app.widgets',
         'plone.batching',
         'plone.i18n',
         'plone.memoize',


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-11-06T20:05:02+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/1619457dca90030a0febe386bfa7014c52448481

Merge pull request #111 from plone/thet-mvgettopsitefromurl

move get_top_site_from_url to p.a.widgets

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py
M plone/app/content/tests/test_contents.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ab29bee..dcfba66 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,6 +1,24 @@
 Changelog
 =========
 
+3.3.3 (unreleased)
+------------------
+
+Breaking changes:
+
+- *add item here*
+
+New features:
+
+- Move ``get_top_site_from_url`` out from here into ``Products.CMFPlone.utils``.
+  Deprecate old import.
+  [thet]
+
+Bug fixes:
+
+- *add item here*
+
+
 3.3.2 (unreleased)
 ------------------
 
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index b78e66a..1004499 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -11,14 +11,12 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone import utils
+from Products.CMFPlone.utils import get_top_site_from_url
 from Products.Five import BrowserView
-from urlparse import urlparse
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.component import getUtility
-from zope.component.hooks import getSite
-from zope.component.interfaces import ISite
 from zope.i18n import translate
 from zope.interface import implementer
 
@@ -37,41 +35,10 @@
     Rearrange='plone.app.content.browser.content.rearrange:RearrangeOrderActionView',  # noqa
 )
 
-
-def get_top_site_from_url(context, request):
-    """Find the top-most site, which is still in the url path.
-
-    If the current context is within a subsite within a PloneSiteRoot and no
-    virtual hosting is in place, the PloneSiteRoot is returned.
-    When at the same context but in a virtual hosting environment with the
-    virtual host root pointing to the subsites, it returns the subsite instead
-    of the PloneSiteRoot.
-
-    For this given content structure:
-
-    /Plone/Subsite
-
-    It should return the following in these cases:
-
-    - Naked Plone without virtual hosting, /Plone: Plone
-    - Naked Plone without virtual hosting, /Plone/Subsite: Plone
-    - Virtual hosting which roots to the subsite: Subsite
-    """
-    url_path = urlparse(context.absolute_url()).path.split('/')
-
-    site = getSite()
-    try:
-        for idx in range(len(url_path)):
-            _path = '/'.join(url_path[:idx + 1]) or '/'
-            site_path = request.physicalPathFromURL(_path)
-            site = context.restrictedTraverse('/'.join(site_path) or '/')
-            if ISite.providedBy(site):
-                break
-    except ValueError:
-        # Refs: https://github.com/plone/plone.app.content/issues/103
-        # On error, just return getSite.
-        return getSite()
-    return site
+zope.deferredimport.deprecated(
+    "Import from Products.CMFPlone.utils instead",
+    get_top_site_from_url='Products.CMFPlone:utils.get_top_site_from_url',
+)
 
 
 class ContentsBaseAction(BrowserView):
diff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py
index 1a1d9ee..ff9e1a2 100644
--- a/plone/app/content/tests/test_contents.py
+++ b/plone/app/content/tests/test_contents.py
@@ -11,82 +11,6 @@
 import unittest
 
 
-class ContentsUnitTests(unittest.TestCase):
-
-    def test_get_top_site_from_url(self):
-        """Unit test for ``get_top_site_from_url`` with context and request
-        mocks.
-
-        Test content structure:
-        /approot/PloneSite/folder/SubSite/folder
-        PloneSite and SubSite implement ISite
-        """
-        from plone.app.content.browser.contents import get_top_site_from_url
-        from zope.component.interfaces import ISite
-        from zope.interface import alsoProvides
-        from urlparse import urlparse
-
-        class MockContext(object):
-            vh_url = 'http://nohost'
-            vh_root = ''
-
-            def __init__(self, physical_path):
-                self.physical_path = physical_path
-                if self.physical_path.split('/')[-1] in ('PloneSite', 'SubSite'):  # noqa
-                    alsoProvides(self, ISite)
-
-            @property
-            def id(self):
-                return self.physical_path.split('/')[-1]
-
-            def absolute_url(self):
-                return self.vh_url + self.physical_path[len(self.vh_root):] or '/'  # noqa
-
-            def restrictedTraverse(self, path):
-                return MockContext(self.vh_root + path)
-
-        class MockRequest(object):
-            vh_url = 'http://nohost'
-            vh_root = ''
-
-            def physicalPathFromURL(self, url):
-                # Return the physical path from a URL.
-                # The outer right '/' is not part of the path.
-                path = self.vh_root + urlparse(url).path.rstrip('/')
-                return path.split('/')
-
-        # NO VIRTUAL HOSTING
-
-        req = MockRequest()
-
-        # Case 1:
-        ctx = MockContext('/approot/PloneSite')
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'PloneSite')
-
-        # Case 2
-        ctx = MockContext('/approot/PloneSite/folder')
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'PloneSite')
-
-        # Case 3:
-        ctx = MockContext('/approot/PloneSite/folder/SubSite/folder')
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'PloneSite')
-
-        # VIRTUAL HOSTING ON SUBSITE
-
-        req = MockRequest()
-        req.vh_root = '/approot/PloneSite/folder/SubSite'
-
-        # Case 4:
-        ctx = MockContext('/approot/PloneSite/folder/SubSite')
-        ctx.vh_root = '/approot/PloneSite/folder/SubSite'
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'SubSite')
-
-        # Case 5:
-        ctx = MockContext('/approot/PloneSite/folder/SubSite/folder')
-        ctx.vh_root = '/approot/PloneSite/folder/SubSite'
-        self.assertEqual(get_top_site_from_url(ctx, req).id, 'SubSite')
-
-
 class ContentsPasteTests(unittest.TestCase):
     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
 
diff --git a/setup.py b/setup.py
index cb409b4..ec5e90c 100644
--- a/setup.py
+++ b/setup.py
@@ -38,7 +38,7 @@
     ),
     install_requires=[
         'Acquisition',
-        'plone.app.widgets>=2.0.0.dev0',
+        'plone.app.widgets',
         'plone.batching',
         'plone.i18n',
         'plone.memoize',


