Repository: plone.namedfile


Branch: refs/heads/4.2.x
Date: 2017-10-21T16:41:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/25f7d4cd8b9ab3b41e0b5c157787b264aea82800

fix tests - cleanup after 5.2 storm

Files changed:
M plone/namedfile/tests/test_scaling.py

diff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py
index a99ff97..fb2491b 100644
--- a/plone/namedfile/tests/test_scaling.py
+++ b/plone/namedfile/tests/test_scaling.py
@@ -152,8 +152,8 @@ def testGetHighPixelDensityScaleByName(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
-    def testGetRetinaScaleByWidthAndHeight(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+    def testGetHPDScaleByWidthAndHeight(self):
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=60, height=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -174,8 +174,8 @@ def testGetRetinaScaleByWidthAndHeight(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
-    def testGetRetinaScaleByWidthOnly(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+    def testGetHPDScaleByWidthOnly(self):
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', width=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')
@@ -196,8 +196,8 @@ def testGetRetinaScaleByWidthOnly(self):
         groups = re.match(expected, tag).groups()
         self.assertTrue(groups, tag)
 
-    def testGetRetinaScaleByHeightOnly(self):
-        self.scaling.getRetinaScales = lambda: [{'scale': 2, 'quality': 66}]
+    def testGetHPDScaleByHeightOnly(self):
+        self.scaling.getHighPixelDensityScales = lambda: [{'scale': 2, 'quality': 66}]
         foo = self.scaling.scale('image', height=60)
         self.assertTrue(foo.srcset)
         self.assertEqual(foo.srcset[0]['mimetype'], 'image/png')


