Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2017-01-20T13:48:35Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/84c48fb4b56bff8a9e860ee0ed6b42622d6f8e77

Fix URL for reordering fields

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/schema/schemaeditor.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 865203e..3fbae1c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix POST AJAX-URL for reordering fields
+  [tomgross]
 
 
 2.0.13 (2017-01-01)
diff --git a/plone/schemaeditor/browser/schema/schemaeditor.js b/plone/schemaeditor/browser/schema/schemaeditor.js
index e8c68af..675ee04 100644
--- a/plone/schemaeditor/browser/schema/schemaeditor.js
+++ b/plone/schemaeditor/browser/schema/schemaeditor.js
@@ -161,14 +161,24 @@
         });
         // reorder fields and change fieldsets
         $('.fieldPreview.orderable').plone_schemaeditor_html5_sortable(function (position, fieldset_index) {
-            var url = window.location.href.replace('/@@fields', '') + '/' + this.attr('data-field_id') + '/@@order';
+            var url = [location.protocol, '//',
+                       location.host,
+                       location.pathname.replace('/@@fields', ''),
+                       '/',
+                       this.attr('data-field_id'),
+                       '/@@order'].join('');
             $.post(url, {
                 _authenticator: $('input[name="_authenticator"]').val(),
                 pos: position,
                 fieldset_index: fieldset_index
             });
         }, function (fieldset_index) {
-            var url = window.location.href.replace('/@@fields', '') + '/' + this.attr('data-field_id') + '/@@changefieldset';
+            var url = [location.protocol, '//',
+                       location.host,
+                       location.pathname.replace('/@@fields', ''),
+                       '/',
+                       this.attr('data-field_id'),
+                       '/@@changefieldset'].join('');
             $.post(url, {
                 _authenticator: $('input[name="_authenticator"]').val(),
                 fieldset_index: fieldset_index


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2017-01-21T07:09:50Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/d972a3cdd83dd8a3a9d03e38729722bfd211e40c

Fix static code-analysis breakages

Files changed:
M plone/schemaeditor/browser/field/edit.py
M plone/schemaeditor/browser/schema/add_field.py
M plone/schemaeditor/fields.py
M plone/schemaeditor/interfaces.py
M plone/schemaeditor/tests/fixtures.py
M plone/schemaeditor/tests/tests.py
M plone/schemaeditor/utils.py

diff --git a/plone/schemaeditor/browser/field/edit.py b/plone/schemaeditor/browser/field/edit.py
index 0627632..b6e5f57 100644
--- a/plone/schemaeditor/browser/field/edit.py
+++ b/plone/schemaeditor/browser/field/edit.py
@@ -16,7 +16,7 @@
 from z3c.form.interfaces import IDataManager
 from zope import schema
 from zope.cachedescriptors.property import Lazy as lazy_property
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import getAdapters
 from zope.event import notify
 from zope.i18nmessageid import Message
@@ -41,8 +41,8 @@ class IFieldTitle(Interface):
 
 
 @implementer(IFieldTitle)
+@adapter(IField)
 class FieldTitleAdapter(object):
-    adapts(IField)
 
     def __init__(self, field):
         self.field = field
@@ -80,8 +80,8 @@ def __init__(self, context):
 
 
 @implementer(IDataManager)
+@adapter(IFieldProxy, IField)
 class FieldDataManager(AttributeField):
-    adapts(IFieldProxy, IField)
 
     def get(self):
         value = super(FieldDataManager, self).get()
diff --git a/plone/schemaeditor/browser/schema/add_field.py b/plone/schemaeditor/browser/schema/add_field.py
index 716f23f..ea58567 100644
--- a/plone/schemaeditor/browser/schema/add_field.py
+++ b/plone/schemaeditor/browser/schema/add_field.py
@@ -90,7 +90,7 @@ def add(self, field):
         notify(ObjectAddedEvent(field, context.schema))
         notify(FieldAddedEvent(context, field))
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Field added successfully."), type='info')
+            _(u'Field added successfully.'), type='info')
 
     def nextURL(self):
         return '@@add-field'
diff --git a/plone/schemaeditor/fields.py b/plone/schemaeditor/fields.py
index 67281c6..b4e8afb 100644
--- a/plone/schemaeditor/fields.py
+++ b/plone/schemaeditor/fields.py
@@ -7,7 +7,6 @@
 from zope import component
 from zope import interface
 from zope import schema
-from zope.component import adapter
 from zope.component import getUtilitiesFor
 from zope.globalrequest import getRequest
 from zope.i18n import translate
@@ -110,8 +109,8 @@ def getChoiceFieldSchema(field):
 
 
 @interface.implementer(se_schema.ITextLineChoice)
+@component.adapter(schema_ifaces.IChoice)
 class TextLineChoiceField(object):
-    component.adapts(schema_ifaces.IChoice)
 
     def __init__(self, field):
         self.__dict__['field'] = field
@@ -156,13 +155,13 @@ def __delattr__(self, name):
         return delattr(self.field, name)
 
 
+@component.adapter(interface.Interface, interface.Interface,
+                   interfaces.IFieldEditForm,
+                   se_schema.ITextLinesField, interface.Interface)
 class VocabularyValuesValidator(validator.SimpleFieldValidator):
 
     """Ensure duplicate vocabulary terms are not submitted
     """
-    component.adapts(interface.Interface, interface.Interface,
-                     interfaces.IFieldEditForm,
-                     se_schema.ITextLinesField, interface.Interface)
 
     def validate(self, values):
         if values is None:
@@ -217,6 +216,7 @@ def validate(self, values):
 
         return super(VocabularyNameValidator, self).validate(values)
 
+
 validator.WidgetValidatorDiscriminators(
     VocabularyNameValidator,
     field=se_schema.ITextLineChoice['vocabularyName'])
@@ -235,8 +235,8 @@ def getMultiChoiceFieldSchema(field):
 
 
 @interface.implementer_only(se_schema.ITextLineChoice)
+@component.adapter(schema_ifaces.ISet)
 class TextLineMultiChoiceField(TextLineChoiceField):
-    component.adapts(schema_ifaces.ISet)
 
     def __init__(self, field):
         self.__dict__['field'] = field
@@ -272,7 +272,7 @@ def __setattr__(self, name, value):
 
 
 # make Bool fields use the radio widget by default
-@adapter(schema_ifaces.IBool, IObjectAddedEvent)
+@component.adapter(schema_ifaces.IBool, IObjectAddedEvent)
 def setBoolWidget(field, event):
     schema = field.interface
     widgets = schema.queryTaggedValue('plone.autoform.widgets', {})
diff --git a/plone/schemaeditor/interfaces.py b/plone/schemaeditor/interfaces.py
index 8ec24ac..8275c6d 100644
--- a/plone/schemaeditor/interfaces.py
+++ b/plone/schemaeditor/interfaces.py
@@ -21,13 +21,11 @@
 
 
 class ISchemaView(IBrowserPage):
-
     """ A publishable view of a zope 3 schema
     """
 
 
 class ISchemaContext(IItem):
-
     """ A publishable wrapper of a zope 3 schema
     """
 
@@ -63,7 +61,6 @@ class ISchemaModifiedEvent(IObjectEvent):
 
 
 class IFieldContext(IItem):
-
     """ A publishable wrapper of a zope 3 schema field
     """
 
@@ -73,7 +70,6 @@ class IFieldContext(IItem):
 
 
 class IFieldEditorExtender(IInterface):
-
     """ An additional schema for use when editing a field."""
 
 
@@ -131,6 +127,7 @@ class IFieldEditFormSchema(Interface):
     """ The schema describing the form fields for a field.
     """
 
+
 RESERVED_NAMES = (
     'subject',
     'format',
diff --git a/plone/schemaeditor/tests/fixtures.py b/plone/schemaeditor/tests/fixtures.py
index 2c75100..5585818 100644
--- a/plone/schemaeditor/tests/fixtures.py
+++ b/plone/schemaeditor/tests/fixtures.py
@@ -32,7 +32,7 @@ def log_event(object, event):
     print('[event: {0} on {1}]'.format(
         event.__class__.__name__,
         object.__class__.__name__,
-    ))
+    ))       # noqa
 
 
 class EditForm(EditForm):
@@ -44,6 +44,7 @@ def update(self):
         self.fields = field.Fields(IDummySchema)
         super(EditForm, self).update()
 
+
 EditView = layout.wrap_form(EditForm)
 
 
diff --git a/plone/schemaeditor/tests/tests.py b/plone/schemaeditor/tests/tests.py
index 9694314..ae3ec9b 100644
--- a/plone/schemaeditor/tests/tests.py
+++ b/plone/schemaeditor/tests/tests.py
@@ -74,8 +74,7 @@ def __call__(self):
         return self.widget.render()
 
 
-path = lambda p: os.path.join(os.path.dirname(__file__), p)
 layout_factory = ZopeTwoFormTemplateFactory(
-    path('layout.pt'),
+    os.path.join(os.path.dirname(__file__), 'layout.pt'),
     form=IFormWrapper, request=ITestLayer,
 )
diff --git a/plone/schemaeditor/utils.py b/plone/schemaeditor/utils.py
index b7a9b98..b013239 100644
--- a/plone/schemaeditor/utils.py
+++ b/plone/schemaeditor/utils.py
@@ -2,7 +2,7 @@
 from plone.schemaeditor.interfaces import IEditableSchema
 from plone.schemaeditor.interfaces import ISchemaModifiedEvent
 from plone.supermodel.interfaces import FIELDSETS_KEY
-from zope.component import adapts
+from zope.component import adapter
 from zope.component.interfaces import ObjectEvent
 from zope.interface import implementer
 from zope.interface.interfaces import IInterface
@@ -45,13 +45,13 @@ def get_field_fieldset(schema, field_name):
 
 
 @implementer(IEditableSchema)
+@adapter(IInterface)
 class EditableSchema(object):
 
     """ Zope 3 schema adapter to allow addition/removal of schema fields
 
         XXX this needs to be made threadsafe
     """
-    adapts(IInterface)
 
     def __init__(self, schema):
         self.schema = schema


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2017-01-26T14:57:35+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.schemaeditor/commit/945b2125b0f6ed1779968b8199265ff0c936c1c7

Merge pull request #46 from plone/fix_reorder_post

Fix URL for reordering fields

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/field/edit.py
M plone/schemaeditor/browser/schema/add_field.py
M plone/schemaeditor/browser/schema/schemaeditor.js
M plone/schemaeditor/fields.py
M plone/schemaeditor/interfaces.py
M plone/schemaeditor/tests/fixtures.py
M plone/schemaeditor/tests/tests.py
M plone/schemaeditor/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 865203e..3fbae1c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix POST AJAX-URL for reordering fields
+  [tomgross]
 
 
 2.0.13 (2017-01-01)
diff --git a/plone/schemaeditor/browser/field/edit.py b/plone/schemaeditor/browser/field/edit.py
index 0627632..b6e5f57 100644
--- a/plone/schemaeditor/browser/field/edit.py
+++ b/plone/schemaeditor/browser/field/edit.py
@@ -16,7 +16,7 @@
 from z3c.form.interfaces import IDataManager
 from zope import schema
 from zope.cachedescriptors.property import Lazy as lazy_property
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import getAdapters
 from zope.event import notify
 from zope.i18nmessageid import Message
@@ -41,8 +41,8 @@ class IFieldTitle(Interface):
 
 
 @implementer(IFieldTitle)
+@adapter(IField)
 class FieldTitleAdapter(object):
-    adapts(IField)
 
     def __init__(self, field):
         self.field = field
@@ -80,8 +80,8 @@ def __init__(self, context):
 
 
 @implementer(IDataManager)
+@adapter(IFieldProxy, IField)
 class FieldDataManager(AttributeField):
-    adapts(IFieldProxy, IField)
 
     def get(self):
         value = super(FieldDataManager, self).get()
diff --git a/plone/schemaeditor/browser/schema/add_field.py b/plone/schemaeditor/browser/schema/add_field.py
index 716f23f..ea58567 100644
--- a/plone/schemaeditor/browser/schema/add_field.py
+++ b/plone/schemaeditor/browser/schema/add_field.py
@@ -90,7 +90,7 @@ def add(self, field):
         notify(ObjectAddedEvent(field, context.schema))
         notify(FieldAddedEvent(context, field))
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Field added successfully."), type='info')
+            _(u'Field added successfully.'), type='info')
 
     def nextURL(self):
         return '@@add-field'
diff --git a/plone/schemaeditor/browser/schema/schemaeditor.js b/plone/schemaeditor/browser/schema/schemaeditor.js
index e8c68af..675ee04 100644
--- a/plone/schemaeditor/browser/schema/schemaeditor.js
+++ b/plone/schemaeditor/browser/schema/schemaeditor.js
@@ -161,14 +161,24 @@
         });
         // reorder fields and change fieldsets
         $('.fieldPreview.orderable').plone_schemaeditor_html5_sortable(function (position, fieldset_index) {
-            var url = window.location.href.replace('/@@fields', '') + '/' + this.attr('data-field_id') + '/@@order';
+            var url = [location.protocol, '//',
+                       location.host,
+                       location.pathname.replace('/@@fields', ''),
+                       '/',
+                       this.attr('data-field_id'),
+                       '/@@order'].join('');
             $.post(url, {
                 _authenticator: $('input[name="_authenticator"]').val(),
                 pos: position,
                 fieldset_index: fieldset_index
             });
         }, function (fieldset_index) {
-            var url = window.location.href.replace('/@@fields', '') + '/' + this.attr('data-field_id') + '/@@changefieldset';
+            var url = [location.protocol, '//',
+                       location.host,
+                       location.pathname.replace('/@@fields', ''),
+                       '/',
+                       this.attr('data-field_id'),
+                       '/@@changefieldset'].join('');
             $.post(url, {
                 _authenticator: $('input[name="_authenticator"]').val(),
                 fieldset_index: fieldset_index
diff --git a/plone/schemaeditor/fields.py b/plone/schemaeditor/fields.py
index 67281c6..b4e8afb 100644
--- a/plone/schemaeditor/fields.py
+++ b/plone/schemaeditor/fields.py
@@ -7,7 +7,6 @@
 from zope import component
 from zope import interface
 from zope import schema
-from zope.component import adapter
 from zope.component import getUtilitiesFor
 from zope.globalrequest import getRequest
 from zope.i18n import translate
@@ -110,8 +109,8 @@ def getChoiceFieldSchema(field):
 
 
 @interface.implementer(se_schema.ITextLineChoice)
+@component.adapter(schema_ifaces.IChoice)
 class TextLineChoiceField(object):
-    component.adapts(schema_ifaces.IChoice)
 
     def __init__(self, field):
         self.__dict__['field'] = field
@@ -156,13 +155,13 @@ def __delattr__(self, name):
         return delattr(self.field, name)
 
 
+@component.adapter(interface.Interface, interface.Interface,
+                   interfaces.IFieldEditForm,
+                   se_schema.ITextLinesField, interface.Interface)
 class VocabularyValuesValidator(validator.SimpleFieldValidator):
 
     """Ensure duplicate vocabulary terms are not submitted
     """
-    component.adapts(interface.Interface, interface.Interface,
-                     interfaces.IFieldEditForm,
-                     se_schema.ITextLinesField, interface.Interface)
 
     def validate(self, values):
         if values is None:
@@ -217,6 +216,7 @@ def validate(self, values):
 
         return super(VocabularyNameValidator, self).validate(values)
 
+
 validator.WidgetValidatorDiscriminators(
     VocabularyNameValidator,
     field=se_schema.ITextLineChoice['vocabularyName'])
@@ -235,8 +235,8 @@ def getMultiChoiceFieldSchema(field):
 
 
 @interface.implementer_only(se_schema.ITextLineChoice)
+@component.adapter(schema_ifaces.ISet)
 class TextLineMultiChoiceField(TextLineChoiceField):
-    component.adapts(schema_ifaces.ISet)
 
     def __init__(self, field):
         self.__dict__['field'] = field
@@ -272,7 +272,7 @@ def __setattr__(self, name, value):
 
 
 # make Bool fields use the radio widget by default
-@adapter(schema_ifaces.IBool, IObjectAddedEvent)
+@component.adapter(schema_ifaces.IBool, IObjectAddedEvent)
 def setBoolWidget(field, event):
     schema = field.interface
     widgets = schema.queryTaggedValue('plone.autoform.widgets', {})
diff --git a/plone/schemaeditor/interfaces.py b/plone/schemaeditor/interfaces.py
index 8ec24ac..8275c6d 100644
--- a/plone/schemaeditor/interfaces.py
+++ b/plone/schemaeditor/interfaces.py
@@ -21,13 +21,11 @@
 
 
 class ISchemaView(IBrowserPage):
-
     """ A publishable view of a zope 3 schema
     """
 
 
 class ISchemaContext(IItem):
-
     """ A publishable wrapper of a zope 3 schema
     """
 
@@ -63,7 +61,6 @@ class ISchemaModifiedEvent(IObjectEvent):
 
 
 class IFieldContext(IItem):
-
     """ A publishable wrapper of a zope 3 schema field
     """
 
@@ -73,7 +70,6 @@ class IFieldContext(IItem):
 
 
 class IFieldEditorExtender(IInterface):
-
     """ An additional schema for use when editing a field."""
 
 
@@ -131,6 +127,7 @@ class IFieldEditFormSchema(Interface):
     """ The schema describing the form fields for a field.
     """
 
+
 RESERVED_NAMES = (
     'subject',
     'format',
diff --git a/plone/schemaeditor/tests/fixtures.py b/plone/schemaeditor/tests/fixtures.py
index 2c75100..5585818 100644
--- a/plone/schemaeditor/tests/fixtures.py
+++ b/plone/schemaeditor/tests/fixtures.py
@@ -32,7 +32,7 @@ def log_event(object, event):
     print('[event: {0} on {1}]'.format(
         event.__class__.__name__,
         object.__class__.__name__,
-    ))
+    ))       # noqa
 
 
 class EditForm(EditForm):
@@ -44,6 +44,7 @@ def update(self):
         self.fields = field.Fields(IDummySchema)
         super(EditForm, self).update()
 
+
 EditView = layout.wrap_form(EditForm)
 
 
diff --git a/plone/schemaeditor/tests/tests.py b/plone/schemaeditor/tests/tests.py
index 9694314..ae3ec9b 100644
--- a/plone/schemaeditor/tests/tests.py
+++ b/plone/schemaeditor/tests/tests.py
@@ -74,8 +74,7 @@ def __call__(self):
         return self.widget.render()
 
 
-path = lambda p: os.path.join(os.path.dirname(__file__), p)
 layout_factory = ZopeTwoFormTemplateFactory(
-    path('layout.pt'),
+    os.path.join(os.path.dirname(__file__), 'layout.pt'),
     form=IFormWrapper, request=ITestLayer,
 )
diff --git a/plone/schemaeditor/utils.py b/plone/schemaeditor/utils.py
index b7a9b98..b013239 100644
--- a/plone/schemaeditor/utils.py
+++ b/plone/schemaeditor/utils.py
@@ -2,7 +2,7 @@
 from plone.schemaeditor.interfaces import IEditableSchema
 from plone.schemaeditor.interfaces import ISchemaModifiedEvent
 from plone.supermodel.interfaces import FIELDSETS_KEY
-from zope.component import adapts
+from zope.component import adapter
 from zope.component.interfaces import ObjectEvent
 from zope.interface import implementer
 from zope.interface.interfaces import IInterface
@@ -45,13 +45,13 @@ def get_field_fieldset(schema, field_name):
 
 
 @implementer(IEditableSchema)
+@adapter(IInterface)
 class EditableSchema(object):
 
     """ Zope 3 schema adapter to allow addition/removal of schema fields
 
         XXX this needs to be made threadsafe
     """
-    adapts(IInterface)
 
     def __init__(self, schema):
         self.schema = schema


