Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2017-11-16T10:02:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.iterate/commit/8f163a250b6273b9374a4085a113239d0e84dd9a

test for problem in #54

Files changed:
A plone/app/iterate/tests/test_iterate_dx.py
M plone/app/iterate/tests/test_iterate.py

diff --git a/plone/app/iterate/tests/test_iterate.py b/plone/app/iterate/tests/test_iterate.py
index b8fccc9..a19a037 100644
--- a/plone/app/iterate/tests/test_iterate.py
+++ b/plone/app/iterate/tests/test_iterate.py
@@ -298,8 +298,7 @@ def test_default_page_is_kept_in_folder(self):
         # the default page.
         folder = self.portal.docs
         doc = folder.doc1
-        from Products.CMFDynamicViewFTI.interfaces import \
-            ISelectableBrowserDefault
+        from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault  # noqa: C901
         ISelectableBrowserDefault(folder).setDefaultPage('doc1')
         self.assertEqual(folder.getProperty('default_page', ''), 'doc1')
         self.assertEqual(folder.getDefaultPage(), 'doc1')
@@ -322,3 +321,19 @@ def test_control_checkout_allowed_with_no_policy(self):
     def test_control_cancel_allowed_with_no_policy(self):
         control = Control(self.portal, self.layer['request'])
         self.assertFalse(control.cancel_allowed())
+
+    def test_control_cancel_on_original_does_not_delete_original(self):
+        # checkout document
+        doc = self.portal.docs.doc1
+        policy = ICheckinCheckoutPolicy(self.portal.docs.doc1, None)
+        policy.checkout(self.portal.workarea)
+
+        # get cancel browser view
+        from plone.app.iterate.browser.cancel import Cancel
+        cancel = Cancel(doc, self.layer['request'])
+        self.layer['request'].form['form.button.Cancel'] = True
+
+        # check if cancel on original raises the correct exception
+        from plone.app.iterate.interfaces import CheckoutException
+        with self.assertRaises(CheckoutException):
+            cancel()
diff --git a/plone/app/iterate/tests/test_iterate_dx.py b/plone/app/iterate/tests/test_iterate_dx.py
new file mode 100644
index 0000000..7d73f74
--- /dev/null
+++ b/plone/app/iterate/tests/test_iterate_dx.py
@@ -0,0 +1,48 @@
+# -*- coding: utf-8 -*-
+from plone.app.iterate.testing import PLONEAPPITERATEDEX_INTEGRATION_TESTING
+from plone.app.iterate.interfaces import ICheckinCheckoutPolicy
+from plone.app.testing import login
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+
+import unittest
+
+
+class TestIterations(unittest.TestCase):
+
+    layer = PLONEAPPITERATEDEX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        login(self.portal, TEST_USER_NAME)
+
+        self.wf = self.portal.portal_workflow
+        self.wf.setChainForPortalTypes(('Document',), 'plone_workflow')
+
+        # add a folder with two documents in it
+        self.portal.invokeFactory('Folder', 'docs')
+        self.portal.docs.invokeFactory('Document', 'doc1')
+        self.portal.docs.invokeFactory('Document', 'doc2')
+
+        # add a working copy folder
+        self.portal.invokeFactory('Folder', 'workarea')
+
+        self.repo = self.portal.portal_repository
+
+    def test_control_cancel_on_original_does_not_delete_original(self):
+        # checkout document
+        doc = self.portal.docs.doc1
+        policy = ICheckinCheckoutPolicy(self.portal.docs.doc1, None)
+        policy.checkout(self.portal.workarea)
+
+        # get cancel browser view
+        from plone.app.iterate.browser.cancel import Cancel
+        cancel = Cancel(doc, self.layer['request'])
+        self.layer['request'].form['form.button.Cancel'] = True
+
+        # check if cancel on original raises the correct exception
+        from plone.app.iterate.interfaces import CheckoutException
+        with self.assertRaises(CheckoutException):
+            cancel()


Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2017-11-16T10:27:39+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.iterate/commit/abfc914ce6e548934e513d4ab9a73654999e5fa0

fixes #54 Cancelling a check out from the original deletes the original

Files changed:
M CHANGES.rst
M plone/app/iterate/dexterity/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e2b6a10..1ffffd8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix #54: Cancelling a check out from the original deletes the original.
+  [jensens]
 
 
 3.3.5 (2017-09-08)
diff --git a/plone/app/iterate/dexterity/utils.py b/plone/app/iterate/dexterity/utils.py
index 2ec7357..dcb1947 100644
--- a/plone/app/iterate/dexterity/utils.py
+++ b/plone/app/iterate/dexterity/utils.py
@@ -20,8 +20,10 @@ def get_relations(context):
     catalog = component.getUtility(ICatalog)
     relations = list(catalog.findRelations({'to_id': id}))
     relations += list(catalog.findRelations({'from_id': id}))
-    relations = filter(lambda r: r.from_attribute ==
-                       ITERATE_RELATION_NAME, relations)
+    relations = filter(
+        lambda r: r.from_attribute == ITERATE_RELATION_NAME,
+        relations
+    )
     return relations
 
 
@@ -37,6 +39,9 @@ def get_baseline(context):
     relation = get_checkout_relation(context)
     if relation and relation.from_id:
         intids = component.getUtility(IIntIds)
+        context_id = intids.queryId(aq_base(context))
+        if context_id == relation.from_id:
+            return None
         return intids.getObject(relation.from_id)
     return None
 


Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2017-11-16T11:59:09+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.iterate/commit/9ff2e7f3dd25394f6f22f8c98c679e595b6e1c6a

Merge pull request #55 from plone/fix-54

Fixes 54: Cancelling a check out from the original deletes the original.

Files changed:
A plone/app/iterate/tests/test_iterate_dx.py
M CHANGES.rst
M plone/app/iterate/dexterity/utils.py
M plone/app/iterate/tests/test_iterate.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e2b6a10..1ffffd8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix #54: Cancelling a check out from the original deletes the original.
+  [jensens]
 
 
 3.3.5 (2017-09-08)
diff --git a/plone/app/iterate/dexterity/utils.py b/plone/app/iterate/dexterity/utils.py
index 2ec7357..dcb1947 100644
--- a/plone/app/iterate/dexterity/utils.py
+++ b/plone/app/iterate/dexterity/utils.py
@@ -20,8 +20,10 @@ def get_relations(context):
     catalog = component.getUtility(ICatalog)
     relations = list(catalog.findRelations({'to_id': id}))
     relations += list(catalog.findRelations({'from_id': id}))
-    relations = filter(lambda r: r.from_attribute ==
-                       ITERATE_RELATION_NAME, relations)
+    relations = filter(
+        lambda r: r.from_attribute == ITERATE_RELATION_NAME,
+        relations
+    )
     return relations
 
 
@@ -37,6 +39,9 @@ def get_baseline(context):
     relation = get_checkout_relation(context)
     if relation and relation.from_id:
         intids = component.getUtility(IIntIds)
+        context_id = intids.queryId(aq_base(context))
+        if context_id == relation.from_id:
+            return None
         return intids.getObject(relation.from_id)
     return None
 
diff --git a/plone/app/iterate/tests/test_iterate.py b/plone/app/iterate/tests/test_iterate.py
index b8fccc9..a19a037 100644
--- a/plone/app/iterate/tests/test_iterate.py
+++ b/plone/app/iterate/tests/test_iterate.py
@@ -298,8 +298,7 @@ def test_default_page_is_kept_in_folder(self):
         # the default page.
         folder = self.portal.docs
         doc = folder.doc1
-        from Products.CMFDynamicViewFTI.interfaces import \
-            ISelectableBrowserDefault
+        from Products.CMFDynamicViewFTI.interfaces import ISelectableBrowserDefault  # noqa: C901
         ISelectableBrowserDefault(folder).setDefaultPage('doc1')
         self.assertEqual(folder.getProperty('default_page', ''), 'doc1')
         self.assertEqual(folder.getDefaultPage(), 'doc1')
@@ -322,3 +321,19 @@ def test_control_checkout_allowed_with_no_policy(self):
     def test_control_cancel_allowed_with_no_policy(self):
         control = Control(self.portal, self.layer['request'])
         self.assertFalse(control.cancel_allowed())
+
+    def test_control_cancel_on_original_does_not_delete_original(self):
+        # checkout document
+        doc = self.portal.docs.doc1
+        policy = ICheckinCheckoutPolicy(self.portal.docs.doc1, None)
+        policy.checkout(self.portal.workarea)
+
+        # get cancel browser view
+        from plone.app.iterate.browser.cancel import Cancel
+        cancel = Cancel(doc, self.layer['request'])
+        self.layer['request'].form['form.button.Cancel'] = True
+
+        # check if cancel on original raises the correct exception
+        from plone.app.iterate.interfaces import CheckoutException
+        with self.assertRaises(CheckoutException):
+            cancel()
diff --git a/plone/app/iterate/tests/test_iterate_dx.py b/plone/app/iterate/tests/test_iterate_dx.py
new file mode 100644
index 0000000..7d73f74
--- /dev/null
+++ b/plone/app/iterate/tests/test_iterate_dx.py
@@ -0,0 +1,48 @@
+# -*- coding: utf-8 -*-
+from plone.app.iterate.testing import PLONEAPPITERATEDEX_INTEGRATION_TESTING
+from plone.app.iterate.interfaces import ICheckinCheckoutPolicy
+from plone.app.testing import login
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+
+import unittest
+
+
+class TestIterations(unittest.TestCase):
+
+    layer = PLONEAPPITERATEDEX_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        login(self.portal, TEST_USER_NAME)
+
+        self.wf = self.portal.portal_workflow
+        self.wf.setChainForPortalTypes(('Document',), 'plone_workflow')
+
+        # add a folder with two documents in it
+        self.portal.invokeFactory('Folder', 'docs')
+        self.portal.docs.invokeFactory('Document', 'doc1')
+        self.portal.docs.invokeFactory('Document', 'doc2')
+
+        # add a working copy folder
+        self.portal.invokeFactory('Folder', 'workarea')
+
+        self.repo = self.portal.portal_repository
+
+    def test_control_cancel_on_original_does_not_delete_original(self):
+        # checkout document
+        doc = self.portal.docs.doc1
+        policy = ICheckinCheckoutPolicy(self.portal.docs.doc1, None)
+        policy.checkout(self.portal.workarea)
+
+        # get cancel browser view
+        from plone.app.iterate.browser.cancel import Cancel
+        cancel = Cancel(doc, self.layer['request'])
+        self.layer['request'].form['form.button.Cancel'] = True
+
+        # check if cancel on original raises the correct exception
+        from plone.app.iterate.interfaces import CheckoutException
+        with self.assertRaises(CheckoutException):
+            cancel()


