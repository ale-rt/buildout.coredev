Repository: plone.app.theming


Branch: refs/heads/master
Date: 2016-12-06T08:42:16+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/111adefc7e87d9c1433f94b44498a5f4bbe27473

Make diazo.debug work with DIAZO_ALWAYS_CACHE_RULES

Files changed:
M CHANGES.rst
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/transform.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d8ffdd4..db4e503 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Make diazo.debug work again when DIAZO_ALWAYS_CACHE_RULES is set.
+  [ale-rt]
 
 
 1.3.3 (2016-12-02)
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 223c60a..356740f 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,24 +1,25 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.Expression import getExprContext
-from Products.CMFCore.utils import getToolByName
 from diazo.compiler import compile_theme
 from lxml import etree
 from os import environ
-from plone.app.testing import TEST_USER_ID
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
 from plone.app.theming.transform import ThemeTransform
-from plone.app.theming.utils import InternalResolver
-from plone.app.theming.utils import PythonResolver
 from plone.app.theming.utils import applyTheme
 from plone.app.theming.utils import getTheme
+from plone.app.theming.utils import InternalResolver
+from plone.app.theming.utils import PythonResolver
 from plone.app.theming.utils import resolvePythonURL
 from plone.registry.interfaces import IRegistry
 from plone.testing.z2 import Browser
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.Expression import getExprContext
+from Products.CMFCore.utils import getToolByName
 from urllib2 import HTTPError
 from zope.component import getUtility
+
 import Globals
 import os.path
 import re
@@ -100,7 +101,7 @@ def test_develop_theme(self):
         # and clean it up
         env_var_backup = environ.pop(var_name, None)
 
-        transform = ThemeTransform(None, None)
+        transform = ThemeTransform(None, {})
         # This evaluates to True because we set
         # Globals.DevelopmentMode to True in the test setup
         self.assertTrue(transform.develop_theme())
@@ -109,6 +110,10 @@ def test_develop_theme(self):
         environ[var_name] = 'true'
         self.assertFalse(transform.develop_theme())
 
+        # If we require to debug.diazo the variable will be ignored
+        transform = ThemeTransform(None, {'diazo.debug': '1'})
+        self.assertTrue(transform.develop_theme())
+
         # Then we reset our env variables before leaving
         if env_had_var:
             environ[var_name] = env_var_backup
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 9b9bfc6..1c96eb3 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from lxml import etree
+from os import environ
 from plone.app.theming.interfaces import IThemingLayer
 from plone.app.theming.utils import compileThemeTransform
 from plone.app.theming.utils import findContext
@@ -8,14 +9,15 @@
 from plone.app.theming.utils import theming_policy
 from plone.app.theming.zmi import patch_zmi
 from plone.transformchain.interfaces import ITransform
-from os import environ
 from repoze.xmliter.utils import getHTMLSerializer
 from zope.component import adapter
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
+
 import Globals
 import logging
 
+
 # Disable theming of ZMI
 patch_zmi()
 
@@ -35,16 +37,27 @@ def __init__(self, published, request):
         self.published = published
         self.request = request
 
+    def debug_theme(self):
+        ''' Check if the theme should be debugged
+        We will debug the theme
+        when we have a truish diazo.debug parameter in the request
+        '''
+        if not Globals.DevelopmentMode:
+            return False
+        diazo_debug = self.request.get('diazo.debug', '').lower()
+        return diazo_debug in ('1', 'y', 'yes', 't', 'true')
+
     def develop_theme(self):
-        ''' Check if the theme should be recompiled every time the
-        transform is applied
+        ''' Check if the theme should be recompiled
+        every time the transform is applied
         '''
-        if Globals.DevelopmentMode:
-            if environ.get('DIAZO_ALWAYS_CACHE_RULES'):
-                return False
-            else:
-                return True
-        return False
+        if not Globals.DevelopmentMode:
+            return False
+        if self.debug_theme():
+            return True
+        if environ.get('DIAZO_ALWAYS_CACHE_RULES'):
+            return False
+        return True
 
     def setupTransform(self, runtrace=False):
         DevelopmentMode = self.develop_theme()
@@ -127,11 +140,7 @@ def transformIterable(self, result, encoding):
             return None
 
         DevelopmentMode = Globals.DevelopmentMode
-        diazo_debug = self.request.get('diazo.debug', '').lower()
-        runtrace = (
-            DevelopmentMode
-            and diazo_debug in ('1', 'y', 'yes', 't', 'true')
-        )
+        runtrace = self.debug_theme()
 
         try:
             etree.clear_error_log()


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2016-12-09T13:49:39+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/59aac1ba0c3209f70df6ad154098e38a32e60e2a

Merge pull request #119 from plone/fix_diazo_debug

Make diazo.debug work with DIAZO_ALWAYS_CACHE_RULES

Files changed:
M CHANGES.rst
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/transform.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d8ffdd4..db4e503 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Make diazo.debug work again when DIAZO_ALWAYS_CACHE_RULES is set.
+  [ale-rt]
 
 
 1.3.3 (2016-12-02)
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 223c60a..356740f 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,24 +1,25 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.Expression import Expression
-from Products.CMFCore.Expression import getExprContext
-from Products.CMFCore.utils import getToolByName
 from diazo.compiler import compile_theme
 from lxml import etree
 from os import environ
-from plone.app.testing import TEST_USER_ID
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.app.theming.interfaces import IThemeSettings
 from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
 from plone.app.theming.transform import ThemeTransform
-from plone.app.theming.utils import InternalResolver
-from plone.app.theming.utils import PythonResolver
 from plone.app.theming.utils import applyTheme
 from plone.app.theming.utils import getTheme
+from plone.app.theming.utils import InternalResolver
+from plone.app.theming.utils import PythonResolver
 from plone.app.theming.utils import resolvePythonURL
 from plone.registry.interfaces import IRegistry
 from plone.testing.z2 import Browser
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.Expression import getExprContext
+from Products.CMFCore.utils import getToolByName
 from urllib2 import HTTPError
 from zope.component import getUtility
+
 import Globals
 import os.path
 import re
@@ -100,7 +101,7 @@ def test_develop_theme(self):
         # and clean it up
         env_var_backup = environ.pop(var_name, None)
 
-        transform = ThemeTransform(None, None)
+        transform = ThemeTransform(None, {})
         # This evaluates to True because we set
         # Globals.DevelopmentMode to True in the test setup
         self.assertTrue(transform.develop_theme())
@@ -109,6 +110,10 @@ def test_develop_theme(self):
         environ[var_name] = 'true'
         self.assertFalse(transform.develop_theme())
 
+        # If we require to debug.diazo the variable will be ignored
+        transform = ThemeTransform(None, {'diazo.debug': '1'})
+        self.assertTrue(transform.develop_theme())
+
         # Then we reset our env variables before leaving
         if env_had_var:
             environ[var_name] = env_var_backup
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 9b9bfc6..1c96eb3 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from lxml import etree
+from os import environ
 from plone.app.theming.interfaces import IThemingLayer
 from plone.app.theming.utils import compileThemeTransform
 from plone.app.theming.utils import findContext
@@ -8,14 +9,15 @@
 from plone.app.theming.utils import theming_policy
 from plone.app.theming.zmi import patch_zmi
 from plone.transformchain.interfaces import ITransform
-from os import environ
 from repoze.xmliter.utils import getHTMLSerializer
 from zope.component import adapter
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
+
 import Globals
 import logging
 
+
 # Disable theming of ZMI
 patch_zmi()
 
@@ -35,16 +37,27 @@ def __init__(self, published, request):
         self.published = published
         self.request = request
 
+    def debug_theme(self):
+        ''' Check if the theme should be debugged
+        We will debug the theme
+        when we have a truish diazo.debug parameter in the request
+        '''
+        if not Globals.DevelopmentMode:
+            return False
+        diazo_debug = self.request.get('diazo.debug', '').lower()
+        return diazo_debug in ('1', 'y', 'yes', 't', 'true')
+
     def develop_theme(self):
-        ''' Check if the theme should be recompiled every time the
-        transform is applied
+        ''' Check if the theme should be recompiled
+        every time the transform is applied
         '''
-        if Globals.DevelopmentMode:
-            if environ.get('DIAZO_ALWAYS_CACHE_RULES'):
-                return False
-            else:
-                return True
-        return False
+        if not Globals.DevelopmentMode:
+            return False
+        if self.debug_theme():
+            return True
+        if environ.get('DIAZO_ALWAYS_CACHE_RULES'):
+            return False
+        return True
 
     def setupTransform(self, runtrace=False):
         DevelopmentMode = self.develop_theme()
@@ -127,11 +140,7 @@ def transformIterable(self, result, encoding):
             return None
 
         DevelopmentMode = Globals.DevelopmentMode
-        diazo_debug = self.request.get('diazo.debug', '').lower()
-        runtrace = (
-            DevelopmentMode
-            and diazo_debug in ('1', 'y', 'yes', 't', 'true')
-        )
+        runtrace = self.debug_theme()
 
         try:
             etree.clear_error_log()


