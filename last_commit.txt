Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2016-08-03T18:42:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/d59166cab3db339f16a971b4cbcf611d6ee63bde

correctly log in if viewlet rendering failed

Files changed:
M CHANGES.rst
M plone/app/viewletmanager/manager.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 585bdbf..0f2d527 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -13,6 +13,8 @@ Fixes:
 
 - Use zope.interface decorator.
   [gforcada]
+- Correctly log exception if viewlet rendering failed.
+  [jensens]
 
 
 2.0.9 (2015-09-07)
diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index 2a0cd13..f55cb07 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -2,15 +2,14 @@
 from AccessControl.ZopeGuards import guarded_hasattr
 from Acquisition import aq_base
 from Acquisition.interfaces import IAcquirer
-from Products.Five import BrowserView
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from ZODB.POSException import ConflictError
-from ZPublisher.Publish import Retry
 from cgi import parse_qs
 from logging import getLogger
 from plone.app.viewletmanager.interfaces import IViewletManagementView
 from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
+from Products.Five import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from urllib import urlencode
+from ZODB.POSException import ConflictError
 from zope.component import getAdapters
 from zope.component import getMultiAdapter
 from zope.component import getUtility
@@ -20,6 +19,7 @@
 from zope.interface import implementer
 from zope.interface import providedBy
 from zope.viewlet.interfaces import IViewlet
+from ZPublisher.Publish import Retry
 
 import traceback
 
@@ -97,12 +97,14 @@ def render(self):
                 return self.template(viewlets=self.viewlets)
             except self._exceptions_handled_elsewhere:
                 raise
-            except Exception, e:
-                trace = traceback.format_exc()
-                name = self.__name__
-                msg = "rendering of %s fails: %s\n%s\n"
-                logger.error(msg % (name, e, trace))
-                return u"error while rendering %s\n" % name
+            except Exception:
+                logger.exception(
+                    'Error while rendering viewlet-manager "{0}" '
+                    'using a template'.format(self.__name__)
+                )
+                return u'error while rendering viewlet-manager {0}\n'.format(
+                    self.__name__
+                )
         else:
             html = []
             for viewlet in self.viewlets:
@@ -110,13 +112,17 @@ def render(self):
                     html.append(viewlet.render())
                 except self._exceptions_handled_elsewhere:
                     raise
-                except Exception, e:
-                    name = self.__name__
-                    trace = traceback.format_exc()
-                    vname = viewlet.__name__
-                    msg = "rendering of %s in %s fails: %s\n%s\n"
-                    logger.error(msg % (name, vname, e, trace))
-                    html.append(u"error while rendering %s\n" % vname)
+                except Exception:
+                    logger.exception(
+                        'Error while rendering viewlet-manager={0}, '
+                        'viewlet={1}'.format(
+                            self.__name__,
+                            viewlet.__name__
+                        )
+                    )
+                    html.append(
+                        u'error while rendering {0}\n'.format(viewlet.__name__)
+                    )
             return u"\n".join(html)
 
 
@@ -171,12 +177,12 @@ def render(self):
                 else:
                     options['content'] = u""
                 if index > 0:
-                    prev_viewlet = viewlets[index-1][0]
+                    prev_viewlet = viewlets[index - 1][0]
                     query = {'move_above': "%s;%s" % (viewlet_id,
                                                       prev_viewlet)}
                     options['up_url'] = query_tmpl % urlencode(query)
                 if index < (len(viewlets) - 1):
-                    next_viewlet = viewlets[index+1][0]
+                    next_viewlet = viewlets[index + 1][0]
                     query = {'move_below': "%s;%s" % (viewlet_id,
                                                       next_viewlet)}
                     options['down_url'] = query_tmpl % urlencode(query)
@@ -254,7 +260,7 @@ def moveBelow(self, manager, viewlet, dest):
         viewlet_index = order.index(viewlet)
         del order[viewlet_index]
         dest_index = order.index(dest)
-        order.insert(dest_index+1, viewlet)
+        order.insert(dest_index + 1, viewlet)
         storage.setOrder(manager, skinname, order)
 
     def __call__(self):


Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2016-08-03T18:44:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/0d93b7ce1ae6ee4578f7ab34bb20ba1bd6c3c458

isort

Files changed:
M CHANGES.rst
M plone/app/viewletmanager/exportimport/storage.py
M plone/app/viewletmanager/testing.py
M plone/app/viewletmanager/tests/test_exportimport.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0f2d527..48e1677 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -13,6 +13,7 @@ Fixes:
 
 - Use zope.interface decorator.
   [gforcada]
+
 - Correctly log exception if viewlet rendering failed.
   [jensens]
 
diff --git a/plone/app/viewletmanager/exportimport/storage.py b/plone/app/viewletmanager/exportimport/storage.py
index 22c1d2f..ff7ab80 100644
--- a/plone/app/viewletmanager/exportimport/storage.py
+++ b/plone/app/viewletmanager/exportimport/storage.py
@@ -51,10 +51,12 @@
 .. original content from http://www.sixfeetup.com/company/technologies/plone-content-management-new/quick-reference-cards/swag/swag-images-files/generic_setup.pdf
 
 """
+from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 from Products.GenericSetup.interfaces import IBody
 from Products.GenericSetup.utils import XMLAdapterBase
-from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
-from zope.component import getUtility, queryUtility, queryMultiAdapter
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
 from zope.schema.interfaces import IVocabularyFactory
 
 import os
diff --git a/plone/app/viewletmanager/testing.py b/plone/app/viewletmanager/testing.py
index 71d6194..4549f82 100644
--- a/plone/app/viewletmanager/testing.py
+++ b/plone/app/viewletmanager/testing.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import IntegrationTesting
+from plone.app.testing import PLONE_FIXTURE
 from plone.testing import Layer
 from zope.configuration import xmlconfig
 
diff --git a/plone/app/viewletmanager/tests/test_exportimport.py b/plone/app/viewletmanager/tests/test_exportimport.py
index d9db226..5336a49 100644
--- a/plone/app/viewletmanager/tests/test_exportimport.py
+++ b/plone/app/viewletmanager/tests/test_exportimport.py
@@ -1,20 +1,16 @@
 # -*- coding: utf-8 -*-
 from OFS.Folder import Folder
+from persistent.dict import PersistentDict
+from plone.app.viewletmanager.exportimport.storage import exportViewletSettingsStorage
+from plone.app.viewletmanager.exportimport.storage import importViewletSettingsStorage
+from plone.app.viewletmanager.exportimport.storage import ViewletSettingsStorageNodeAdapter
+from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
+from plone.app.viewletmanager.storage import ViewletSettingsStorage
+from plone.app.viewletmanager.testing import PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING
 from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase
 from Products.GenericSetup.tests.common import BaseRegistryTests
 from Products.GenericSetup.tests.common import DummyExportContext
 from Products.GenericSetup.tests.common import DummyImportContext
-from persistent.dict import PersistentDict
-from plone.app.viewletmanager.exportimport.storage import \
-    ViewletSettingsStorageNodeAdapter
-from plone.app.viewletmanager.exportimport.storage import \
-    exportViewletSettingsStorage
-from plone.app.viewletmanager.exportimport.storage import \
-    importViewletSettingsStorage
-from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
-from plone.app.viewletmanager.storage import ViewletSettingsStorage
-from plone.app.viewletmanager.testing import \
-    PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING
 from xml.parsers.expat import ExpatError
 from zope.component import getUtility
 


Repository: plone.app.viewletmanager


Branch: refs/heads/master
Date: 2016-08-08T08:37:09+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.viewletmanager/commit/4289d200dc49176a1d90df2221e922320d9664c7

Merge pull request #12 from plone/jensens-fix-viewlet-logging

correctly log in if viewlet rendering failed

Files changed:
M CHANGES.rst
M plone/app/viewletmanager/exportimport/storage.py
M plone/app/viewletmanager/manager.py
M plone/app/viewletmanager/testing.py
M plone/app/viewletmanager/tests/test_exportimport.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 585bdbf..48e1677 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ Fixes:
 - Use zope.interface decorator.
   [gforcada]
 
+- Correctly log exception if viewlet rendering failed.
+  [jensens]
+
 
 2.0.9 (2015-09-07)
 ------------------
diff --git a/plone/app/viewletmanager/exportimport/storage.py b/plone/app/viewletmanager/exportimport/storage.py
index 22c1d2f..ff7ab80 100644
--- a/plone/app/viewletmanager/exportimport/storage.py
+++ b/plone/app/viewletmanager/exportimport/storage.py
@@ -51,10 +51,12 @@
 .. original content from http://www.sixfeetup.com/company/technologies/plone-content-management-new/quick-reference-cards/swag/swag-images-files/generic_setup.pdf
 
 """
+from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
 from Products.GenericSetup.interfaces import IBody
 from Products.GenericSetup.utils import XMLAdapterBase
-from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
-from zope.component import getUtility, queryUtility, queryMultiAdapter
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
 from zope.schema.interfaces import IVocabularyFactory
 
 import os
diff --git a/plone/app/viewletmanager/manager.py b/plone/app/viewletmanager/manager.py
index 2a0cd13..f55cb07 100644
--- a/plone/app/viewletmanager/manager.py
+++ b/plone/app/viewletmanager/manager.py
@@ -2,15 +2,14 @@
 from AccessControl.ZopeGuards import guarded_hasattr
 from Acquisition import aq_base
 from Acquisition.interfaces import IAcquirer
-from Products.Five import BrowserView
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from ZODB.POSException import ConflictError
-from ZPublisher.Publish import Retry
 from cgi import parse_qs
 from logging import getLogger
 from plone.app.viewletmanager.interfaces import IViewletManagementView
 from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
+from Products.Five import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from urllib import urlencode
+from ZODB.POSException import ConflictError
 from zope.component import getAdapters
 from zope.component import getMultiAdapter
 from zope.component import getUtility
@@ -20,6 +19,7 @@
 from zope.interface import implementer
 from zope.interface import providedBy
 from zope.viewlet.interfaces import IViewlet
+from ZPublisher.Publish import Retry
 
 import traceback
 
@@ -97,12 +97,14 @@ def render(self):
                 return self.template(viewlets=self.viewlets)
             except self._exceptions_handled_elsewhere:
                 raise
-            except Exception, e:
-                trace = traceback.format_exc()
-                name = self.__name__
-                msg = "rendering of %s fails: %s\n%s\n"
-                logger.error(msg % (name, e, trace))
-                return u"error while rendering %s\n" % name
+            except Exception:
+                logger.exception(
+                    'Error while rendering viewlet-manager "{0}" '
+                    'using a template'.format(self.__name__)
+                )
+                return u'error while rendering viewlet-manager {0}\n'.format(
+                    self.__name__
+                )
         else:
             html = []
             for viewlet in self.viewlets:
@@ -110,13 +112,17 @@ def render(self):
                     html.append(viewlet.render())
                 except self._exceptions_handled_elsewhere:
                     raise
-                except Exception, e:
-                    name = self.__name__
-                    trace = traceback.format_exc()
-                    vname = viewlet.__name__
-                    msg = "rendering of %s in %s fails: %s\n%s\n"
-                    logger.error(msg % (name, vname, e, trace))
-                    html.append(u"error while rendering %s\n" % vname)
+                except Exception:
+                    logger.exception(
+                        'Error while rendering viewlet-manager={0}, '
+                        'viewlet={1}'.format(
+                            self.__name__,
+                            viewlet.__name__
+                        )
+                    )
+                    html.append(
+                        u'error while rendering {0}\n'.format(viewlet.__name__)
+                    )
             return u"\n".join(html)
 
 
@@ -171,12 +177,12 @@ def render(self):
                 else:
                     options['content'] = u""
                 if index > 0:
-                    prev_viewlet = viewlets[index-1][0]
+                    prev_viewlet = viewlets[index - 1][0]
                     query = {'move_above': "%s;%s" % (viewlet_id,
                                                       prev_viewlet)}
                     options['up_url'] = query_tmpl % urlencode(query)
                 if index < (len(viewlets) - 1):
-                    next_viewlet = viewlets[index+1][0]
+                    next_viewlet = viewlets[index + 1][0]
                     query = {'move_below': "%s;%s" % (viewlet_id,
                                                       next_viewlet)}
                     options['down_url'] = query_tmpl % urlencode(query)
@@ -254,7 +260,7 @@ def moveBelow(self, manager, viewlet, dest):
         viewlet_index = order.index(viewlet)
         del order[viewlet_index]
         dest_index = order.index(dest)
-        order.insert(dest_index+1, viewlet)
+        order.insert(dest_index + 1, viewlet)
         storage.setOrder(manager, skinname, order)
 
     def __call__(self):
diff --git a/plone/app/viewletmanager/testing.py b/plone/app/viewletmanager/testing.py
index 71d6194..4549f82 100644
--- a/plone/app/viewletmanager/testing.py
+++ b/plone/app/viewletmanager/testing.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import IntegrationTesting
+from plone.app.testing import PLONE_FIXTURE
 from plone.testing import Layer
 from zope.configuration import xmlconfig
 
diff --git a/plone/app/viewletmanager/tests/test_exportimport.py b/plone/app/viewletmanager/tests/test_exportimport.py
index d9db226..5336a49 100644
--- a/plone/app/viewletmanager/tests/test_exportimport.py
+++ b/plone/app/viewletmanager/tests/test_exportimport.py
@@ -1,20 +1,16 @@
 # -*- coding: utf-8 -*-
 from OFS.Folder import Folder
+from persistent.dict import PersistentDict
+from plone.app.viewletmanager.exportimport.storage import exportViewletSettingsStorage
+from plone.app.viewletmanager.exportimport.storage import importViewletSettingsStorage
+from plone.app.viewletmanager.exportimport.storage import ViewletSettingsStorageNodeAdapter
+from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
+from plone.app.viewletmanager.storage import ViewletSettingsStorage
+from plone.app.viewletmanager.testing import PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING
 from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase
 from Products.GenericSetup.tests.common import BaseRegistryTests
 from Products.GenericSetup.tests.common import DummyExportContext
 from Products.GenericSetup.tests.common import DummyImportContext
-from persistent.dict import PersistentDict
-from plone.app.viewletmanager.exportimport.storage import \
-    ViewletSettingsStorageNodeAdapter
-from plone.app.viewletmanager.exportimport.storage import \
-    exportViewletSettingsStorage
-from plone.app.viewletmanager.exportimport.storage import \
-    importViewletSettingsStorage
-from plone.app.viewletmanager.interfaces import IViewletSettingsStorage
-from plone.app.viewletmanager.storage import ViewletSettingsStorage
-from plone.app.viewletmanager.testing import \
-    PLONE_APP_VIEWLETMANAGER_INTEGRATION_TESTING
 from xml.parsers.expat import ExpatError
 from zope.component import getUtility
 


