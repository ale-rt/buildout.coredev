Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2016-10-30T13:01:07-05:00
Author: T. Kim Nguyen (tkimnguyen) <tkimnguyen@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/40058492babd5de8db82368c1e4b503ff4ad8abe

fix typos

Files changed:
M docs/behaviors/creating-and-registering-behaviors.rst

diff --git a/docs/behaviors/creating-and-registering-behaviors.rst b/docs/behaviors/creating-and-registering-behaviors.rst
index 3237fc3..9ceec91 100644
--- a/docs/behaviors/creating-and-registering-behaviors.rst
+++ b/docs/behaviors/creating-and-registering-behaviors.rst
@@ -45,7 +45,7 @@ It looks like this:
 We first include the *plone.behavior meta.zcml* file, so that we get access to the *<plone:behavior />* ZCML directive.
 
 The behavior itself is registered with the *<plone:behavior />* directive.
-We set a *title* and a *description*, and then speicfy the **behavior interface** with the *provides* attribute.
+We set a *title* and a *description*, and then specify the **behavior interface** with the *provides* attribute.
 This attribute is required, and is used to construct the unique name for the behavior.
 In this case, the behavior name is *collective.gtags.behaviors.ITags*, the full dotted name to the behavior interface.
 When the behavior is enabled for a type, it will be possible to adapt instances of that type to *ITags*.
@@ -121,7 +121,7 @@ See the `Dexterity Developer Manual`_ for more information about setting form hi
 
 If your behavior does not provide form fields, you can just derive from *zope.interface.Interface* and omit the *alsoProvides()* line.
 
-Next, we write the class that implements the behavior adapter and acts the adapter factory.
+Next, we write the class that implements the behavior adapter and acts as the adapter factory.
 Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDublinCore*).
 The behavior cannot be enabled on types not supporting this interface.
 In many cases, you will omit the *adapter()* line, provided your behavior is generic enough to work on any context.


Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2016-10-30T22:36:02+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/bfec99ca6840be154b6633796ef8948fae91da09

Merge pull request #227 from tkimnguyen/master

fix docs typos

Files changed:
M docs/behaviors/creating-and-registering-behaviors.rst

diff --git a/docs/behaviors/creating-and-registering-behaviors.rst b/docs/behaviors/creating-and-registering-behaviors.rst
index 3237fc3..9ceec91 100644
--- a/docs/behaviors/creating-and-registering-behaviors.rst
+++ b/docs/behaviors/creating-and-registering-behaviors.rst
@@ -45,7 +45,7 @@ It looks like this:
 We first include the *plone.behavior meta.zcml* file, so that we get access to the *<plone:behavior />* ZCML directive.
 
 The behavior itself is registered with the *<plone:behavior />* directive.
-We set a *title* and a *description*, and then speicfy the **behavior interface** with the *provides* attribute.
+We set a *title* and a *description*, and then specify the **behavior interface** with the *provides* attribute.
 This attribute is required, and is used to construct the unique name for the behavior.
 In this case, the behavior name is *collective.gtags.behaviors.ITags*, the full dotted name to the behavior interface.
 When the behavior is enabled for a type, it will be possible to adapt instances of that type to *ITags*.
@@ -121,7 +121,7 @@ See the `Dexterity Developer Manual`_ for more information about setting form hi
 
 If your behavior does not provide form fields, you can just derive from *zope.interface.Interface* and omit the *alsoProvides()* line.
 
-Next, we write the class that implements the behavior adapter and acts the adapter factory.
+Next, we write the class that implements the behavior adapter and acts as the adapter factory.
 Notice how it implements the behavior interface (*ITags*), and adapts a broad interface *(IDublinCore*).
 The behavior cannot be enabled on types not supporting this interface.
 In many cases, you will omit the *adapter()* line, provided your behavior is generic enough to work on any context.


