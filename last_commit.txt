Repository: plone.protect


Branch: refs/heads/master
Date: 2016-11-24T17:59:20+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/71af7cb75afd3dce21939b674f09cb7399c42d99

cleanup auto.py

Files changed:
M plone/protect/auto.py

diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index 7455153..8222426 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -1,15 +1,8 @@
-import itertools
-import logging
-import os
-import pkg_resources
-import traceback
-from urllib import urlencode
-from urlparse import urlparse
+# -*- coding: utf-8 -*-
 
 from AccessControl import getSecurityManager
 from Acquisition import aq_parent
 from BTrees.OOBTree import OOBTree
-from Products.CMFCore.utils import getToolByName
 from lxml import etree
 from lxml import html
 from plone.keyring.interfaces import IKeyManager
@@ -19,21 +12,30 @@
 from plone.protect.authenticator import isAnonymousUser
 from plone.protect.interfaces import IConfirmView
 from plone.protect.interfaces import IDisableCSRFProtection
-from plone.protect.utils import SAFE_WRITE_KEY
 from plone.protect.utils import getRoot
 from plone.protect.utils import getRootKeyManager
+from plone.protect.utils import SAFE_WRITE_KEY
 from plone.protect.utils import safeWrite  # noqa b/w compat import
 from plone.transformchain.interfaces import ITransform
+from Products.CMFCore.utils import getToolByName
 from repoze.xmliter.serializer import XMLSerializer
 from repoze.xmliter.utils import getHTMLSerializer
-import transaction
-import types
+from urllib import urlencode
+from urlparse import urlparse
 from zExceptions import Forbidden
-from zope.component import ComponentLookupError
 from zope.component import adapts
+from zope.component import ComponentLookupError
 from zope.component import getUtility
 from zope.interface import implementer, Interface
 
+import itertools
+import logging
+import os
+import pkg_resources
+import traceback
+import transaction
+import types
+
 try:
     from zope.component.hooks import getSite
 except:
@@ -47,7 +49,7 @@
     from plone.app.blob.content import ATBlob
 
 
-LOGGER = logging.getLogger('plone.protect')
+logger = logging.getLogger('plone.protect')
 
 X_FRAME_OPTIONS = os.environ.get('PLONE_X_FRAME_OPTIONS', 'SAMEORIGIN')
 CSRF_DISABLED = os.environ.get('PLONE_CSRF_DISABLED', 'false').lower() in \
@@ -113,7 +115,7 @@ def parseTree(self, result, encoding):
             return result
         except (TypeError, etree.ParseError):
             # XXX handle something special?
-            LOGGER.warn('error parsing dom, failure to add csrf '
+            logger.warn('error parsing dom, failure to add csrf '
                         'token to response for url %s' % self.request.URL)
             return None
 
@@ -132,7 +134,10 @@ def transformIterable(self, result, encoding):
         """
 
         # before anything, do the clickjacking protection
-        if X_FRAME_OPTIONS and not self.request.response.getHeader('X-Frame-Options'):
+        if (
+            X_FRAME_OPTIONS and
+            not self.request.response.getHeader('X-Frame-Options')
+        ):
             self.request.response.setHeader('X-Frame-Options', X_FRAME_OPTIONS)
 
         if CSRF_DISABLED:
@@ -201,7 +206,7 @@ def check(self):
             return self._check()
         except:
             transaction.abort()
-            LOGGER.error("Error checking for CSRF. "
+            logger.error("Error checking for CSRF. "
                          "Transaction will be aborted since the request "
                          "is now unsafe:\n%s" % (
                              traceback.format_exc()))
@@ -213,7 +218,8 @@ def _registered_objects(self):
             conn._registered_objects
             # skip the 'temporary' connection since it stores session objects
             # which get written all the time
-            for name, conn in app._p_jar.connections.items() if name != 'temporary'
+            for name, conn in app._p_jar.connections.items()
+            if name != 'temporary'
         ]))
 
     def _check(self):
@@ -227,7 +233,7 @@ def _check(self):
                 check(self.request, manager=self.key_manager)
                 return True
             except ComponentLookupError:
-                LOGGER.info('Can not find key manager for CSRF protection. '
+                logger.info('Can not find key manager for CSRF protection. '
                             'This should not happen.')
                 raise
             except Forbidden:
@@ -266,8 +272,13 @@ def _check(self):
                     if self.request.REQUEST_METHOD != 'GET':
                         # only try to be "smart" with GET requests
                         raise
-                    LOGGER.info('%s\naborting transaction due to no CSRF '
-                                'protection on url %s'%(traceback.print_stack(), self.request.URL))
+                    logger.info(
+                        '{0:s}\naborting transaction due to no CSRF '
+                        'protection on url {1:s}'.format(
+                            traceback.print_stack(),
+                            self.request.URL
+                        )
+                    )
                     transaction.abort()
 
                     # conditions for doing the confirm form are:
@@ -311,7 +322,10 @@ def transform(self, result, encoding):
             token = createToken(manager=self.key_manager)
         except ComponentLookupError:
             if self.site is not None:
-                LOGGER.warn('Keyring not found on site. This should not happen', exc_info=True)
+                logger.warn(
+                    'Keyring not found on site. This should not happen',
+                    exc_info=True
+                )
             return result
 
         for form in root.cssselect('form'):


Repository: plone.protect


Branch: refs/heads/master
Date: 2016-11-24T18:17:40+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/fc756f3987f21c3f3313ca037653808f7e17f8f0

cleanup: add utf8 headers

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/protect/__init__.py
M plone/protect/authenticator.py
M plone/protect/interfaces.py
M plone/protect/monkey.py
M plone/protect/postonly.py
M plone/protect/subscribers.py
M plone/protect/testing.py
M plone/protect/tests/__init__.py
M plone/protect/tests/case.py
M plone/protect/tests/testAuthenticator.py
M plone/protect/tests/testAuto.py
M plone/protect/tests/testPatches.py
M plone/protect/tests/testPostOnly.py
M plone/protect/tests/testUtils.py
M plone/protect/tests/test_confirm_view.py
M plone/protect/utils.py
M plone/protect/views.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 36f609e..0bcc73d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Code Style: utf8-headers
+  [jensens]
 
 3.0.22 (2016-11-17)
 -------------------
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..85880ef 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/protect/__init__.py b/plone/protect/__init__.py
index acbf0ff..ba4a880 100644
--- a/plone/protect/__init__.py
+++ b/plone/protect/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.utils import protect
 from plone.protect.authenticator import check as CheckAuthenticator
 from plone.protect.postonly import check as PostOnly
diff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py
index 2883bdb..0a6fa11 100644
--- a/plone/protect/authenticator.py
+++ b/plone/protect/authenticator.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.interfaces import IAuthenticatorView
diff --git a/plone/protect/interfaces.py b/plone/protect/interfaces.py
index 070330c..fdfebed 100644
--- a/plone/protect/interfaces.py
+++ b/plone/protect/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
diff --git a/plone/protect/monkey.py b/plone/protect/monkey.py
index 49629d8..d81e60b 100644
--- a/plone/protect/monkey.py
+++ b/plone/protect/monkey.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.auto import safeWrite
 import inspect
 from Products.PluggableAuthService import utils as pluggable_utils
diff --git a/plone/protect/postonly.py b/plone/protect/postonly.py
index 8b25240..aeb0535 100644
--- a/plone/protect/postonly.py
+++ b/plone/protect/postonly.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zExceptions import Forbidden
 from ZPublisher.HTTPRequest import HTTPRequest
 
diff --git a/plone/protect/subscribers.py b/plone/protect/subscribers.py
index c3e5145..a76d18d 100644
--- a/plone/protect/subscribers.py
+++ b/plone/protect/subscribers.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import logging
 import time
 
diff --git a/plone/protect/testing.py b/plone/protect/testing.py
index 4fce137..45f6cfe 100644
--- a/plone/protect/testing.py
+++ b/plone/protect/testing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Five import BrowserView
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
diff --git a/plone/protect/tests/__init__.py b/plone/protect/tests/__init__.py
index 53f4a90..1fe7b54 100644
--- a/plone/protect/tests/__init__.py
+++ b/plone/protect/tests/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 # Poof
diff --git a/plone/protect/tests/case.py b/plone/protect/tests/case.py
index 48c8b8e..b6a6719 100644
--- a/plone/protect/tests/case.py
+++ b/plone/protect/tests/case.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from unittest import TestCase
 from zope.component import getGlobalSiteManager
 from plone.keyring.interfaces import IKeyManager
diff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py
index dc50011..800f333 100644
--- a/plone/protect/tests/testAuthenticator.py
+++ b/plone/protect/tests/testAuthenticator.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import hmac
 import sys
 from unittest import TestSuite
diff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py
index 33f19e5..fcdc885 100644
--- a/plone/protect/tests/testAuto.py
+++ b/plone/protect/tests/testAuto.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing import SITE_OWNER_NAME
diff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py
index af1778c..2fca5c6 100644
--- a/plone/protect/tests/testPatches.py
+++ b/plone/protect/tests/testPatches.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
diff --git a/plone/protect/tests/testPostOnly.py b/plone/protect/tests/testPostOnly.py
index 3051119..b8a30bc 100644
--- a/plone/protect/tests/testPostOnly.py
+++ b/plone/protect/tests/testPostOnly.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from unittest import TestCase
 from unittest import TestSuite
 from unittest import makeSuite
diff --git a/plone/protect/tests/testUtils.py b/plone/protect/tests/testUtils.py
index a8f0055..135ff78 100644
--- a/plone/protect/tests/testUtils.py
+++ b/plone/protect/tests/testUtils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from unittest import TestCase
 from unittest import TestSuite
 from unittest import makeSuite
diff --git a/plone/protect/tests/test_confirm_view.py b/plone/protect/tests/test_confirm_view.py
index 73f43fe..eff2632 100644
--- a/plone/protect/tests/test_confirm_view.py
+++ b/plone/protect/tests/test_confirm_view.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 from zExceptions import Forbidden
 from zope.component import getMultiAdapter
diff --git a/plone/protect/utils.py b/plone/protect/utils.py
index ff4fdae..b4d1228 100644
--- a/plone/protect/utils.py
+++ b/plone/protect/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import inspect
 import logging
 from Acquisition import aq_parent
diff --git a/plone/protect/views.py b/plone/protect/views.py
index 933caa0..6a3dc87 100644
--- a/plone/protect/views.py
+++ b/plone/protect/views.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.interfaces import IConfirmView
 from Products.CMFCore.utils import getToolByName
 from Products.Five import BrowserView
diff --git a/setup.py b/setup.py
index ea30dab..4d3bd90 100644
--- a/setup.py
+++ b/setup.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from setuptools import setup, find_packages
 
 version = '3.0.23.dev0'


Repository: plone.protect


Branch: refs/heads/master
Date: 2016-11-24T18:21:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/ffa828608cded20339fb2774e2abfa20efce20b5

cleanup: sorted imports (apply isort with plone rules)

Files changed:
M CHANGES.rst
M plone/protect/__init__.py
M plone/protect/authenticator.py
M plone/protect/auto.py
M plone/protect/monkey.py
M plone/protect/subscribers.py
M plone/protect/testing.py
M plone/protect/tests/case.py
M plone/protect/tests/testAuthenticator.py
M plone/protect/tests/testAuto.py
M plone/protect/tests/testPatches.py
M plone/protect/tests/testPostOnly.py
M plone/protect/tests/testUtils.py
M plone/protect/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0bcc73d..ef9891b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Code Style: utf8-headers
+- Code Style: utf8-headers, sorting,
   [jensens]
 
 3.0.22 (2016-11-17)
diff --git a/plone/protect/__init__.py b/plone/protect/__init__.py
index ba4a880..7b621e7 100644
--- a/plone/protect/__init__.py
+++ b/plone/protect/__init__.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.protect.utils import protect
 from plone.protect.authenticator import check as CheckAuthenticator
-from plone.protect.postonly import check as PostOnly
+from plone.protect.authenticator import createToken
 from plone.protect.authenticator import CustomCheckAuthenticator
-from plone.protect.authenticator import createToken
\ No newline at end of file
+from plone.protect.postonly import check as PostOnly
+from plone.protect.utils import protect
diff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py
index 0a6fa11..138981f 100644
--- a/plone/protect/authenticator.py
+++ b/plone/protect/authenticator.py
@@ -9,6 +9,8 @@
 from ZPublisher.HTTPRequest import HTTPRequest
 
 import hmac
+
+
 try:
     from hashlib import sha1 as sha
 except ImportError:
diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index 8222426..3e7cbdf 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-
 from AccessControl import getSecurityManager
 from Acquisition import aq_parent
 from BTrees.OOBTree import OOBTree
@@ -26,7 +25,8 @@
 from zope.component import adapts
 from zope.component import ComponentLookupError
 from zope.component import getUtility
-from zope.interface import implementer, Interface
+from zope.interface import implementer
+from zope.interface import Interface
 
 import itertools
 import logging
@@ -36,6 +36,7 @@
 import transaction
 import types
 
+
 try:
     from zope.component.hooks import getSite
 except:
diff --git a/plone/protect/monkey.py b/plone/protect/monkey.py
index d81e60b..9e2b90a 100644
--- a/plone/protect/monkey.py
+++ b/plone/protect/monkey.py
@@ -1,8 +1,9 @@
 # -*- coding: utf-8 -*-
 from plone.protect.auto import safeWrite
-import inspect
 from Products.PluggableAuthService import utils as pluggable_utils
 
+import inspect
+
 
 def wl_lockmapping(self, killinvalids=0, create=0):
     has_write_locks = hasattr(self, '_dav_writelocks')
diff --git a/plone/protect/subscribers.py b/plone/protect/subscribers.py
index a76d18d..a99ac23 100644
--- a/plone/protect/subscribers.py
+++ b/plone/protect/subscribers.py
@@ -1,21 +1,23 @@
 # -*- coding: utf-8 -*-
-import logging
-import time
-
-from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.interfaces import IDisableCSRFProtection
-from zope.component import ComponentLookupError
+from plone.protect.utils import getRoot
+from plone.protect.utils import getRootKeyManager
+from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent
 from zope.component import adapter
+from zope.component import ComponentLookupError
 from zope.component import getUtility
+from zope.globalrequest import getRequest
+from zope.interface import alsoProvides
+
+import logging
+import time
+
+
 try:
     from zope.component.hooks import getSite
 except ImportError:
     from zope.app.component.hooks import getSite
-from zope.globalrequest import getRequest
-from zope.interface import alsoProvides
-from plone.protect.utils import getRootKeyManager
-from plone.protect.utils import getRoot
 
 
 LOGGER = logging.getLogger('plone.protect')
@@ -62,4 +64,4 @@ def onUserLogsIn(event):
             url = req.URL
         else:
             url = ''
-        LOGGER.warn('cannot find key manager for url %s' % url)
\ No newline at end of file
+        LOGGER.warn('cannot find key manager for url %s' % url)
diff --git a/plone/protect/testing.py b/plone/protect/testing.py
index 45f6cfe..f50d6fc 100644
--- a/plone/protect/testing.py
+++ b/plone/protect/testing.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from Products.Five import BrowserView
+from plone.app.testing import applyProfile
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import applyProfile
 from plone.app.testing.layers import FunctionalTesting
 from plone.protect.auto import safeWrite
+from Products.Five import BrowserView
 from zope.configuration import xmlconfig
 
 
diff --git a/plone/protect/tests/case.py b/plone/protect/tests/case.py
index b6a6719..ed1bbd0 100644
--- a/plone/protect/tests/case.py
+++ b/plone/protect/tests/case.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-from unittest import TestCase
-from zope.component import getGlobalSiteManager
-from plone.keyring.interfaces import IKeyManager
 from AccessControl.SecurityManagement import newSecurityManager
 from AccessControl.SecurityManagement import noSecurityManager
 from AccessControl.User import User
+from plone.keyring.interfaces import IKeyManager
 from plone.keyring.keymanager import KeyManager
+from unittest import TestCase
+from zope.component import getGlobalSiteManager
 
 
 class MockRequest(dict):
diff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py
index 800f333..beb09c6 100644
--- a/plone/protect/tests/testAuthenticator.py
+++ b/plone/protect/tests/testAuthenticator.py
@@ -1,18 +1,20 @@
 # -*- coding: utf-8 -*-
-import hmac
-import sys
-from unittest import TestSuite
-from unittest import makeSuite
 from AccessControl import getSecurityManager
-from zExceptions import Forbidden
-from ZPublisher.HTTPRequest import HTTPRequest
-from plone.protect.tests.case import KeyringTestCase
-from plone.protect.tests.case import MockRequest
+from plone.protect import createToken
+from plone.protect import CustomCheckAuthenticator
+from plone.protect import protect
 from plone.protect.authenticator import AuthenticatorView
 from plone.protect.authenticator import check
-from plone.protect import protect
-from plone.protect import CustomCheckAuthenticator
-from plone.protect import createToken
+from plone.protect.tests.case import KeyringTestCase
+from plone.protect.tests.case import MockRequest
+from unittest import makeSuite
+from unittest import TestSuite
+from zExceptions import Forbidden
+from ZPublisher.HTTPRequest import HTTPRequest
+
+import hmac
+import sys
+
 
 try:
     from hashlib import sha1 as sha
diff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py
index fcdc885..4454b80 100644
--- a/plone/protect/tests/testAuto.py
+++ b/plone/protect/tests/testAuto.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import TEST_USER_PASSWORD
-from plone.app.testing import SITE_OWNER_NAME
-from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.app.testing import login
 from plone.app.testing import logout
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
 from plone.keyring.interfaces import IKeyManager
 from plone.protect import createToken
 from plone.protect.authenticator import AuthenticatorView
@@ -12,11 +12,12 @@
 from plone.protect.auto import safeWrite
 from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
-import transaction
-import unittest2 as unittest
 from zExceptions import Forbidden
 from zope.component import getUtility
 
+import transaction
+import unittest2 as unittest
+
 
 class _BaseAutoTest(object):
     layer = PROTECT_FUNCTIONAL_TESTING
diff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py
index 2fca5c6..480f341 100644
--- a/plone/protect/tests/testPatches.py
+++ b/plone/protect/tests/testPatches.py
@@ -3,6 +3,7 @@
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
+
 import unittest2 as unittest
 
 
@@ -25,4 +26,4 @@ def test_change_password_on_root_does_not_throw_other_csrf_protection(self):
         self.assertEquals(
             self.browser.url,
             '%s/acl_users/users/manage_users?manage_tabs_message=password+updated' % (
-                self.layer['app'].absolute_url()))
\ No newline at end of file
+                self.layer['app'].absolute_url()))
diff --git a/plone/protect/tests/testPostOnly.py b/plone/protect/tests/testPostOnly.py
index b8a30bc..4aeb042 100644
--- a/plone/protect/tests/testPostOnly.py
+++ b/plone/protect/tests/testPostOnly.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
+from plone.protect.postonly import check
+from unittest import makeSuite
 from unittest import TestCase
 from unittest import TestSuite
-from unittest import makeSuite
-from plone.protect.postonly import check
-from ZPublisher.HTTPRequest import HTTPRequest
 from zExceptions import Forbidden
+from ZPublisher.HTTPRequest import HTTPRequest
 
 
 class PostOnlyTests(TestCase):
diff --git a/plone/protect/tests/testUtils.py b/plone/protect/tests/testUtils.py
index 135ff78..e26381d 100644
--- a/plone/protect/tests/testUtils.py
+++ b/plone/protect/tests/testUtils.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
+from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
+from plone.protect.utils import addTokenToUrl
+from plone.protect.utils import protect
+from unittest import makeSuite
 from unittest import TestCase
 from unittest import TestSuite
-from unittest import makeSuite
-from plone.protect.utils import protect, addTokenToUrl
+
 import unittest2 as unittest
-from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 
 
 def funcWithoutRequest():
diff --git a/plone/protect/utils.py b/plone/protect/utils.py
index b4d1228..4f79ed7 100644
--- a/plone/protect/utils.py
+++ b/plone/protect/utils.py
@@ -1,13 +1,14 @@
 # -*- coding: utf-8 -*-
-import inspect
-import logging
-from Acquisition import aq_parent
 from AccessControl.requestmethod import _buildFacade
+from Acquisition import aq_parent
+from OFS.interfaces import IApplication
 from plone.keyring.keymanager import KeyManager
 from plone.protect.authenticator import createToken
 from zope.globalrequest import getRequest
 
-from OFS.interfaces import IApplication
+import inspect
+import logging
+
 
 SAFE_WRITE_KEY = 'plone.protect.safe_oids'
 LOGGER = logging.getLogger('plone.protect')
diff --git a/setup.py b/setup.py
index 4d3bd90..b343f63 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '3.0.23.dev0'
 


Repository: plone.protect


Branch: refs/heads/master
Date: 2016-11-24T18:23:17+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/be7a251f0409f79279b357bd414543492221ab29

new style namespace declaration

Files changed:
M CHANGES.rst
M plone/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ef9891b..4568df0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Code Style: utf8-headers, sorting,
+- Code Style: utf8-headers, sorting, new style namespace delcaration,
   [jensens]
 
 3.0.22 (2016-11-17)
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)


Repository: plone.protect


Branch: refs/heads/master
Date: 2016-11-24T18:34:04+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.protect/commit/70493d8e866b3794691c441711110407a3a0789d

autopep8

Files changed:
M CHANGES.rst
M plone/protect/authenticator.py
M plone/protect/monkey.py
M plone/protect/testing.py
M plone/protect/tests/testPatches.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4568df0..254daed 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,7 @@ New features:
 
 Bug fixes:
 
-- Code Style: utf8-headers, sorting, new style namespace delcaration,
+- Code Style: utf8-headers, import sorting, new style namespace declaration, autopep8
   [jensens]
 
 3.0.22 (2016-11-17)
diff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py
index 138981f..e7e9d9d 100644
--- a/plone/protect/authenticator.py
+++ b/plone/protect/authenticator.py
@@ -112,7 +112,8 @@ def verify(self, extra='', name="_authenticator"):
 
 def check(request, extra='', name="_authenticator", manager=None):
     if isinstance(request, HTTPRequest):
-        if not _verify_request(request, extra=extra, name=name, manager=manager):
+        if not _verify_request(request, extra=extra,
+                               name=name, manager=manager):
             raise Forbidden('Form authenticator is invalid.')
 
 
diff --git a/plone/protect/monkey.py b/plone/protect/monkey.py
index 9e2b90a..5ea96f5 100644
--- a/plone/protect/monkey.py
+++ b/plone/protect/monkey.py
@@ -41,6 +41,7 @@ def marmoset_patch(func, replacement):
 
 # otherwise the patches do not get applied in some cases
 if hasattr(pluggable_utils, 'checkCSRFToken'):
-    marmoset_patch(pluggable_utils.checkCSRFToken, pluggableauth__checkCSRFToken)
+    marmoset_patch(pluggable_utils.checkCSRFToken,
+                   pluggableauth__checkCSRFToken)
 if hasattr(pluggable_utils, 'getCSRFToken'):
     marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)
diff --git a/plone/protect/testing.py b/plone/protect/testing.py
index f50d6fc..34ef2cf 100644
--- a/plone/protect/testing.py
+++ b/plone/protect/testing.py
@@ -66,7 +66,9 @@ def __call__(self):
             self.request.URL,
         )
 
+
 class TestSafeToWriteObject(BrowserView):
+
     def __call__(self):
         self.context.foo = 'bar'
         safeWrite(self)
diff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py
index 480f341..0b01ac2 100644
--- a/plone/protect/tests/testPatches.py
+++ b/plone/protect/tests/testPatches.py
@@ -17,7 +17,8 @@ def setUp(self):
         self.browser.addHeader(
             'Authorization', 'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
 
-    def test_change_password_on_root_does_not_throw_other_csrf_protection(self):
+    def test_change_password_on_root_does_not_throw_other_csrf_protection(
+            self):
         self.browser.open('%s/acl_users/users/manage_users?user_id=%s&passwd=1' % (
             self.layer['app'].absolute_url(), SITE_OWNER_NAME))
         self.browser.getControl(name='password').value = SITE_OWNER_PASSWORD


Repository: plone.protect


Branch: refs/heads/master
Date: 2016-11-24T22:55:04+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.protect/commit/eefc72980802e0e4b0723cde68ba74fed9b49ef5

Merge pull request #58 from plone/cleanup

Cleanup

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/protect/__init__.py
M plone/protect/authenticator.py
M plone/protect/auto.py
M plone/protect/interfaces.py
M plone/protect/monkey.py
M plone/protect/postonly.py
M plone/protect/subscribers.py
M plone/protect/testing.py
M plone/protect/tests/__init__.py
M plone/protect/tests/case.py
M plone/protect/tests/testAuthenticator.py
M plone/protect/tests/testAuto.py
M plone/protect/tests/testPatches.py
M plone/protect/tests/testPostOnly.py
M plone/protect/tests/testUtils.py
M plone/protect/tests/test_confirm_view.py
M plone/protect/utils.py
M plone/protect/views.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 36f609e..254daed 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Code Style: utf8-headers, import sorting, new style namespace declaration, autopep8
+  [jensens]
 
 3.0.22 (2016-11-17)
 -------------------
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/protect/__init__.py b/plone/protect/__init__.py
index acbf0ff..7b621e7 100644
--- a/plone/protect/__init__.py
+++ b/plone/protect/__init__.py
@@ -1,5 +1,6 @@
-from plone.protect.utils import protect
+# -*- coding: utf-8 -*-
 from plone.protect.authenticator import check as CheckAuthenticator
-from plone.protect.postonly import check as PostOnly
+from plone.protect.authenticator import createToken
 from plone.protect.authenticator import CustomCheckAuthenticator
-from plone.protect.authenticator import createToken
\ No newline at end of file
+from plone.protect.postonly import check as PostOnly
+from plone.protect.utils import protect
diff --git a/plone/protect/authenticator.py b/plone/protect/authenticator.py
index 2883bdb..e7e9d9d 100644
--- a/plone/protect/authenticator.py
+++ b/plone/protect/authenticator.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.interfaces import IAuthenticatorView
@@ -8,6 +9,8 @@
 from ZPublisher.HTTPRequest import HTTPRequest
 
 import hmac
+
+
 try:
     from hashlib import sha1 as sha
 except ImportError:
@@ -109,7 +112,8 @@ def verify(self, extra='', name="_authenticator"):
 
 def check(request, extra='', name="_authenticator", manager=None):
     if isinstance(request, HTTPRequest):
-        if not _verify_request(request, extra=extra, name=name, manager=manager):
+        if not _verify_request(request, extra=extra,
+                               name=name, manager=manager):
             raise Forbidden('Form authenticator is invalid.')
 
 
diff --git a/plone/protect/auto.py b/plone/protect/auto.py
index 7455153..3e7cbdf 100644
--- a/plone/protect/auto.py
+++ b/plone/protect/auto.py
@@ -1,15 +1,7 @@
-import itertools
-import logging
-import os
-import pkg_resources
-import traceback
-from urllib import urlencode
-from urlparse import urlparse
-
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
 from Acquisition import aq_parent
 from BTrees.OOBTree import OOBTree
-from Products.CMFCore.utils import getToolByName
 from lxml import etree
 from lxml import html
 from plone.keyring.interfaces import IKeyManager
@@ -19,20 +11,31 @@
 from plone.protect.authenticator import isAnonymousUser
 from plone.protect.interfaces import IConfirmView
 from plone.protect.interfaces import IDisableCSRFProtection
-from plone.protect.utils import SAFE_WRITE_KEY
 from plone.protect.utils import getRoot
 from plone.protect.utils import getRootKeyManager
+from plone.protect.utils import SAFE_WRITE_KEY
 from plone.protect.utils import safeWrite  # noqa b/w compat import
 from plone.transformchain.interfaces import ITransform
+from Products.CMFCore.utils import getToolByName
 from repoze.xmliter.serializer import XMLSerializer
 from repoze.xmliter.utils import getHTMLSerializer
-import transaction
-import types
+from urllib import urlencode
+from urlparse import urlparse
 from zExceptions import Forbidden
-from zope.component import ComponentLookupError
 from zope.component import adapts
+from zope.component import ComponentLookupError
 from zope.component import getUtility
-from zope.interface import implementer, Interface
+from zope.interface import implementer
+from zope.interface import Interface
+
+import itertools
+import logging
+import os
+import pkg_resources
+import traceback
+import transaction
+import types
+
 
 try:
     from zope.component.hooks import getSite
@@ -47,7 +50,7 @@
     from plone.app.blob.content import ATBlob
 
 
-LOGGER = logging.getLogger('plone.protect')
+logger = logging.getLogger('plone.protect')
 
 X_FRAME_OPTIONS = os.environ.get('PLONE_X_FRAME_OPTIONS', 'SAMEORIGIN')
 CSRF_DISABLED = os.environ.get('PLONE_CSRF_DISABLED', 'false').lower() in \
@@ -113,7 +116,7 @@ def parseTree(self, result, encoding):
             return result
         except (TypeError, etree.ParseError):
             # XXX handle something special?
-            LOGGER.warn('error parsing dom, failure to add csrf '
+            logger.warn('error parsing dom, failure to add csrf '
                         'token to response for url %s' % self.request.URL)
             return None
 
@@ -132,7 +135,10 @@ def transformIterable(self, result, encoding):
         """
 
         # before anything, do the clickjacking protection
-        if X_FRAME_OPTIONS and not self.request.response.getHeader('X-Frame-Options'):
+        if (
+            X_FRAME_OPTIONS and
+            not self.request.response.getHeader('X-Frame-Options')
+        ):
             self.request.response.setHeader('X-Frame-Options', X_FRAME_OPTIONS)
 
         if CSRF_DISABLED:
@@ -201,7 +207,7 @@ def check(self):
             return self._check()
         except:
             transaction.abort()
-            LOGGER.error("Error checking for CSRF. "
+            logger.error("Error checking for CSRF. "
                          "Transaction will be aborted since the request "
                          "is now unsafe:\n%s" % (
                              traceback.format_exc()))
@@ -213,7 +219,8 @@ def _registered_objects(self):
             conn._registered_objects
             # skip the 'temporary' connection since it stores session objects
             # which get written all the time
-            for name, conn in app._p_jar.connections.items() if name != 'temporary'
+            for name, conn in app._p_jar.connections.items()
+            if name != 'temporary'
         ]))
 
     def _check(self):
@@ -227,7 +234,7 @@ def _check(self):
                 check(self.request, manager=self.key_manager)
                 return True
             except ComponentLookupError:
-                LOGGER.info('Can not find key manager for CSRF protection. '
+                logger.info('Can not find key manager for CSRF protection. '
                             'This should not happen.')
                 raise
             except Forbidden:
@@ -266,8 +273,13 @@ def _check(self):
                     if self.request.REQUEST_METHOD != 'GET':
                         # only try to be "smart" with GET requests
                         raise
-                    LOGGER.info('%s\naborting transaction due to no CSRF '
-                                'protection on url %s'%(traceback.print_stack(), self.request.URL))
+                    logger.info(
+                        '{0:s}\naborting transaction due to no CSRF '
+                        'protection on url {1:s}'.format(
+                            traceback.print_stack(),
+                            self.request.URL
+                        )
+                    )
                     transaction.abort()
 
                     # conditions for doing the confirm form are:
@@ -311,7 +323,10 @@ def transform(self, result, encoding):
             token = createToken(manager=self.key_manager)
         except ComponentLookupError:
             if self.site is not None:
-                LOGGER.warn('Keyring not found on site. This should not happen', exc_info=True)
+                logger.warn(
+                    'Keyring not found on site. This should not happen',
+                    exc_info=True
+                )
             return result
 
         for form in root.cssselect('form'):
diff --git a/plone/protect/interfaces.py b/plone/protect/interfaces.py
index 070330c..fdfebed 100644
--- a/plone/protect/interfaces.py
+++ b/plone/protect/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
diff --git a/plone/protect/monkey.py b/plone/protect/monkey.py
index 49629d8..5ea96f5 100644
--- a/plone/protect/monkey.py
+++ b/plone/protect/monkey.py
@@ -1,7 +1,9 @@
+# -*- coding: utf-8 -*-
 from plone.protect.auto import safeWrite
-import inspect
 from Products.PluggableAuthService import utils as pluggable_utils
 
+import inspect
+
 
 def wl_lockmapping(self, killinvalids=0, create=0):
     has_write_locks = hasattr(self, '_dav_writelocks')
@@ -39,6 +41,7 @@ def marmoset_patch(func, replacement):
 
 # otherwise the patches do not get applied in some cases
 if hasattr(pluggable_utils, 'checkCSRFToken'):
-    marmoset_patch(pluggable_utils.checkCSRFToken, pluggableauth__checkCSRFToken)
+    marmoset_patch(pluggable_utils.checkCSRFToken,
+                   pluggableauth__checkCSRFToken)
 if hasattr(pluggable_utils, 'getCSRFToken'):
     marmoset_patch(pluggable_utils.getCSRFToken, pluggableauth__getCSRFToken)
diff --git a/plone/protect/postonly.py b/plone/protect/postonly.py
index 8b25240..aeb0535 100644
--- a/plone/protect/postonly.py
+++ b/plone/protect/postonly.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zExceptions import Forbidden
 from ZPublisher.HTTPRequest import HTTPRequest
 
diff --git a/plone/protect/subscribers.py b/plone/protect/subscribers.py
index c3e5145..a99ac23 100644
--- a/plone/protect/subscribers.py
+++ b/plone/protect/subscribers.py
@@ -1,20 +1,23 @@
-import logging
-import time
-
-from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent
+# -*- coding: utf-8 -*-
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.interfaces import IDisableCSRFProtection
-from zope.component import ComponentLookupError
+from plone.protect.utils import getRoot
+from plone.protect.utils import getRootKeyManager
+from Products.PluggableAuthService.interfaces.events import IUserLoggedInEvent
 from zope.component import adapter
+from zope.component import ComponentLookupError
 from zope.component import getUtility
+from zope.globalrequest import getRequest
+from zope.interface import alsoProvides
+
+import logging
+import time
+
+
 try:
     from zope.component.hooks import getSite
 except ImportError:
     from zope.app.component.hooks import getSite
-from zope.globalrequest import getRequest
-from zope.interface import alsoProvides
-from plone.protect.utils import getRootKeyManager
-from plone.protect.utils import getRoot
 
 
 LOGGER = logging.getLogger('plone.protect')
@@ -61,4 +64,4 @@ def onUserLogsIn(event):
             url = req.URL
         else:
             url = ''
-        LOGGER.warn('cannot find key manager for url %s' % url)
\ No newline at end of file
+        LOGGER.warn('cannot find key manager for url %s' % url)
diff --git a/plone/protect/testing.py b/plone/protect/testing.py
index 4fce137..34ef2cf 100644
--- a/plone/protect/testing.py
+++ b/plone/protect/testing.py
@@ -1,9 +1,10 @@
-from Products.Five import BrowserView
+# -*- coding: utf-8 -*-
+from plone.app.testing import applyProfile
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import applyProfile
 from plone.app.testing.layers import FunctionalTesting
 from plone.protect.auto import safeWrite
+from Products.Five import BrowserView
 from zope.configuration import xmlconfig
 
 
@@ -65,7 +66,9 @@ def __call__(self):
             self.request.URL,
         )
 
+
 class TestSafeToWriteObject(BrowserView):
+
     def __call__(self):
         self.context.foo = 'bar'
         safeWrite(self)
diff --git a/plone/protect/tests/__init__.py b/plone/protect/tests/__init__.py
index 53f4a90..1fe7b54 100644
--- a/plone/protect/tests/__init__.py
+++ b/plone/protect/tests/__init__.py
@@ -1 +1,2 @@
+# -*- coding: utf-8 -*-
 # Poof
diff --git a/plone/protect/tests/case.py b/plone/protect/tests/case.py
index 48c8b8e..ed1bbd0 100644
--- a/plone/protect/tests/case.py
+++ b/plone/protect/tests/case.py
@@ -1,10 +1,11 @@
-from unittest import TestCase
-from zope.component import getGlobalSiteManager
-from plone.keyring.interfaces import IKeyManager
+# -*- coding: utf-8 -*-
 from AccessControl.SecurityManagement import newSecurityManager
 from AccessControl.SecurityManagement import noSecurityManager
 from AccessControl.User import User
+from plone.keyring.interfaces import IKeyManager
 from plone.keyring.keymanager import KeyManager
+from unittest import TestCase
+from zope.component import getGlobalSiteManager
 
 
 class MockRequest(dict):
diff --git a/plone/protect/tests/testAuthenticator.py b/plone/protect/tests/testAuthenticator.py
index dc50011..beb09c6 100644
--- a/plone/protect/tests/testAuthenticator.py
+++ b/plone/protect/tests/testAuthenticator.py
@@ -1,17 +1,20 @@
-import hmac
-import sys
-from unittest import TestSuite
-from unittest import makeSuite
+# -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
-from zExceptions import Forbidden
-from ZPublisher.HTTPRequest import HTTPRequest
-from plone.protect.tests.case import KeyringTestCase
-from plone.protect.tests.case import MockRequest
+from plone.protect import createToken
+from plone.protect import CustomCheckAuthenticator
+from plone.protect import protect
 from plone.protect.authenticator import AuthenticatorView
 from plone.protect.authenticator import check
-from plone.protect import protect
-from plone.protect import CustomCheckAuthenticator
-from plone.protect import createToken
+from plone.protect.tests.case import KeyringTestCase
+from plone.protect.tests.case import MockRequest
+from unittest import makeSuite
+from unittest import TestSuite
+from zExceptions import Forbidden
+from ZPublisher.HTTPRequest import HTTPRequest
+
+import hmac
+import sys
+
 
 try:
     from hashlib import sha1 as sha
diff --git a/plone/protect/tests/testAuto.py b/plone/protect/tests/testAuto.py
index 33f19e5..4454b80 100644
--- a/plone/protect/tests/testAuto.py
+++ b/plone/protect/tests/testAuto.py
@@ -1,9 +1,10 @@
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import TEST_USER_PASSWORD
-from plone.app.testing import SITE_OWNER_NAME
-from plone.app.testing import SITE_OWNER_PASSWORD
+# -*- coding: utf-8 -*-
 from plone.app.testing import login
 from plone.app.testing import logout
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
 from plone.keyring.interfaces import IKeyManager
 from plone.protect import createToken
 from plone.protect.authenticator import AuthenticatorView
@@ -11,11 +12,12 @@
 from plone.protect.auto import safeWrite
 from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
-import transaction
-import unittest2 as unittest
 from zExceptions import Forbidden
 from zope.component import getUtility
 
+import transaction
+import unittest2 as unittest
+
 
 class _BaseAutoTest(object):
     layer = PROTECT_FUNCTIONAL_TESTING
diff --git a/plone/protect/tests/testPatches.py b/plone/protect/tests/testPatches.py
index af1778c..0b01ac2 100644
--- a/plone/protect/tests/testPatches.py
+++ b/plone/protect/tests/testPatches.py
@@ -1,7 +1,9 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
+
 import unittest2 as unittest
 
 
@@ -15,7 +17,8 @@ def setUp(self):
         self.browser.addHeader(
             'Authorization', 'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
 
-    def test_change_password_on_root_does_not_throw_other_csrf_protection(self):
+    def test_change_password_on_root_does_not_throw_other_csrf_protection(
+            self):
         self.browser.open('%s/acl_users/users/manage_users?user_id=%s&passwd=1' % (
             self.layer['app'].absolute_url(), SITE_OWNER_NAME))
         self.browser.getControl(name='password').value = SITE_OWNER_PASSWORD
@@ -24,4 +27,4 @@ def test_change_password_on_root_does_not_throw_other_csrf_protection(self):
         self.assertEquals(
             self.browser.url,
             '%s/acl_users/users/manage_users?manage_tabs_message=password+updated' % (
-                self.layer['app'].absolute_url()))
\ No newline at end of file
+                self.layer['app'].absolute_url()))
diff --git a/plone/protect/tests/testPostOnly.py b/plone/protect/tests/testPostOnly.py
index 3051119..4aeb042 100644
--- a/plone/protect/tests/testPostOnly.py
+++ b/plone/protect/tests/testPostOnly.py
@@ -1,9 +1,10 @@
+# -*- coding: utf-8 -*-
+from plone.protect.postonly import check
+from unittest import makeSuite
 from unittest import TestCase
 from unittest import TestSuite
-from unittest import makeSuite
-from plone.protect.postonly import check
-from ZPublisher.HTTPRequest import HTTPRequest
 from zExceptions import Forbidden
+from ZPublisher.HTTPRequest import HTTPRequest
 
 
 class PostOnlyTests(TestCase):
diff --git a/plone/protect/tests/testUtils.py b/plone/protect/tests/testUtils.py
index a8f0055..e26381d 100644
--- a/plone/protect/tests/testUtils.py
+++ b/plone/protect/tests/testUtils.py
@@ -1,9 +1,12 @@
+# -*- coding: utf-8 -*-
+from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
+from plone.protect.utils import addTokenToUrl
+from plone.protect.utils import protect
+from unittest import makeSuite
 from unittest import TestCase
 from unittest import TestSuite
-from unittest import makeSuite
-from plone.protect.utils import protect, addTokenToUrl
+
 import unittest2 as unittest
-from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 
 
 def funcWithoutRequest():
diff --git a/plone/protect/tests/test_confirm_view.py b/plone/protect/tests/test_confirm_view.py
index 73f43fe..eff2632 100644
--- a/plone/protect/tests/test_confirm_view.py
+++ b/plone/protect/tests/test_confirm_view.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.testing import PROTECT_FUNCTIONAL_TESTING
 from zExceptions import Forbidden
 from zope.component import getMultiAdapter
diff --git a/plone/protect/utils.py b/plone/protect/utils.py
index ff4fdae..4f79ed7 100644
--- a/plone/protect/utils.py
+++ b/plone/protect/utils.py
@@ -1,12 +1,14 @@
-import inspect
-import logging
-from Acquisition import aq_parent
+# -*- coding: utf-8 -*-
 from AccessControl.requestmethod import _buildFacade
+from Acquisition import aq_parent
+from OFS.interfaces import IApplication
 from plone.keyring.keymanager import KeyManager
 from plone.protect.authenticator import createToken
 from zope.globalrequest import getRequest
 
-from OFS.interfaces import IApplication
+import inspect
+import logging
+
 
 SAFE_WRITE_KEY = 'plone.protect.safe_oids'
 LOGGER = logging.getLogger('plone.protect')
diff --git a/plone/protect/views.py b/plone/protect/views.py
index 933caa0..6a3dc87 100644
--- a/plone/protect/views.py
+++ b/plone/protect/views.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.protect.interfaces import IConfirmView
 from Products.CMFCore.utils import getToolByName
 from Products.Five import BrowserView
diff --git a/setup.py b/setup.py
index ea30dab..b343f63 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,7 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '3.0.23.dev0'
 


