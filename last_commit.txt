Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2016-09-12T17:44:08+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/b2ade3fe3ea0d5615f2a10c3e5fbb351b9cc5409

Respect 80 chars

Files changed:
M plone/app/versioningbehavior/tests/test_modifiers.py

diff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py
index 1310135..3f8b3e5 100644
--- a/plone/app/versioningbehavior/tests/test_modifiers.py
+++ b/plone/app/versioningbehavior/tests/test_modifiers.py
@@ -54,7 +54,8 @@ def testCloneNamedFileBlobsInSchema(self):
             model_source="""
             <model xmlns="http://namespaces.plone.org/supermodel/schema">
                 <schema>
-                    <field name="file" type="plone.namedfile.field.NamedBlobFile">
+                    <field name="file"
+                           type="plone.namedfile.field.NamedBlobFile">
                         <title>File</title>
                         <required>True</required>
                     </field>
@@ -126,7 +127,8 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):
             model_source="""
             <model xmlns="http://namespaces.plone.org/supermodel/schema">
                 <schema>
-                    <field name="file" type="plone.namedfile.field.NamedBlobFile">
+                    <field name="file"
+                           type="plone.namedfile.field.NamedBlobFile">
                         <title>File</title>
                         <required>True</required>
                     </field>
@@ -138,7 +140,8 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):
         file1 = createContentInContainer(self.portal, 'BlobFile')
         file1.file = NamedBlobFile('dummy test data', filename=u'test.txt')
         modifier = CloneNamedFileBlobs('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(file1)
+        on_clone_modifiers = modifier.getOnCloneModifiers(file1)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(file1.file._blob))
         self.assertTrue(pers_load(file1.file._blob) is None)
         self.assertTrue(empty1 == [])
@@ -150,7 +153,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
             model_source="""
             <model xmlns="http://namespaces.plone.org/supermodel/schema">
                 <schema>
-                    <field name="file" type="plone.namedfile.field.NamedBlobFile">
+                    <field name="file"
+                           type="plone.namedfile.field.NamedBlobFile">
                         <title>File</title>
                         <required>True</required>
                     </field>
@@ -162,7 +166,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
         modifier = CloneNamedFileBlobs('modifier', 'Modifier')
         attrs_dict = modifier.getReferencedAttributes(file1)
         self.assertTrue(attrs_dict == {})
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(file1)
+        on_clone_modifiers = modifier.getOnCloneModifiers(file1)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_load(None) is None)
         self.assertTrue(empty1 == [])
@@ -177,7 +182,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
             in attrs_dict)
         blob = attrs_dict.values()[0]
         self.assertTrue(IBlob.providedBy(blob))
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(file1)
+        on_clone_modifiers = modifier.getOnCloneModifiers(file1)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(file1.file._blob))
         self.assertTrue(pers_load(file1.file._blob) is None)
         self.assertTrue(empty1 == [])
@@ -186,7 +192,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
     def testRelations(self):
         rel_fti = DexterityFTI(
             'RelationsType',
-            schema='plone.app.versioningbehavior.tests.test_modifiers.IRelationsType')
+            schema=IRelationsType.__identifier__
+        )
         self.portal.portal_types._setObject('RelationsType', rel_fti)
 
         # Setup IIntIds utility which is required for relations to work
@@ -200,7 +207,8 @@ def testRelations(self):
 
         # Test modifier when no relations are set
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_load(None) is None)
@@ -223,7 +231,8 @@ def testRelations(self):
         notify(ObjectModifiedEvent(source))
 
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(source.single))
         self.assertTrue(pers_id(source.multiple))
         self.assertTrue(pers_load(source.single) is None)
@@ -270,7 +279,8 @@ def testRelationsInBehaviors(self):
 
         # Test modifier when no relations are set
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_load(None) is None)
@@ -284,8 +294,12 @@ def testRelationsInBehaviors(self):
         self.assertTrue(repo_clone.multiple is None)
 
         # Add some relations
-        IRelationsBehavior(source).single = RelationValue(intids.getId(target))
-        IRelationsBehavior(source).multiple = [RelationValue(intids.getId(target))]
+        IRelationsBehavior(source).single = RelationValue(
+            intids.getId(target)
+        )
+        IRelationsBehavior(source).multiple = [
+            RelationValue(intids.getId(target))
+        ]
 
         # Update relations
         from zope.lifecycleevent import ObjectModifiedEvent
@@ -293,7 +307,8 @@ def testRelationsInBehaviors(self):
         notify(ObjectModifiedEvent(source))
 
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(IRelationsBehavior(source).single))
         self.assertTrue(pers_id(IRelationsBehavior(source).multiple))
         self.assertTrue(pers_load(IRelationsBehavior(source).single) is None)


Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2016-09-12T18:10:38+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/705c0743c77dbb77b655ab6c88df64ac484e21d2

Do not break in case of at -&gt; dx migration

Files changed:
M CHANGES.rst
M plone/app/versioningbehavior/modifiers.py
M plone/app/versioningbehavior/tests/test_modifiers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 59e7846..20e5fd2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Do not break in the case of dexterity objects with relations
+  migrated from something else (usually Archetypes).
+  [ale-rt]
 
 
 1.2.9 (2016-08-18)
diff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py
index 7811f26..1b18fd0 100644
--- a/plone/app/versioningbehavior/modifiers.py
+++ b/plone/app/versioningbehavior/modifiers.py
@@ -214,7 +214,10 @@ def beforeSaveModifier(self, obj, clone):
 
     def afterRetrieveModifier(self, obj, repo_clone, preserve=()):
         """Restore relations from the working copy."""
-        if IDexterityContent.providedBy(obj):
+        if (
+            IDexterityContent.providedBy(obj) and
+            IDexterityContent.providedBy(repo_clone)
+        ):
             for schemata in iterSchemata(obj):
                 for name, field in getFields(schemata).items():
                     if (IRelationChoice.providedBy(field) or
diff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py
index 3f8b3e5..3c25525 100644
--- a/plone/app/versioningbehavior/tests/test_modifiers.py
+++ b/plone/app/versioningbehavior/tests/test_modifiers.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from five.intid import site
 from plone.app.versioningbehavior.modifiers import CloneNamedFileBlobs
 from plone.app.versioningbehavior.modifiers import SkipRelations
 from plone.autoform.interfaces import IFormFieldProvider
@@ -13,6 +14,7 @@
 from z3c.relationfield.relation import RelationValue
 from z3c.relationfield.schema import RelationChoice, RelationList
 from ZODB.interfaces import IBlob
+from zope.app.intid.interfaces import IIntIds
 from zope.component import getUtility
 from zope.configuration import xmlconfig
 from zope.interface import alsoProvides, Interface
@@ -245,33 +247,36 @@ def testRelations(self):
         self.assertTrue(repo_clone.single is source.single)
         self.assertTrue(repo_clone.multiple is source.multiple)
 
-    def testRelationsInBehaviors(self):
-        configuration = """\
-        <configure
-             package="plone.behavior"
-             xmlns="http://namespaces.zope.org/zope"
-             xmlns:plone="http://namespaces.plone.org/plone"
-             i18n_domain="plone.behavior.tests">
-
-             <include package="plone.behavior" file="meta.zcml" />
-
-            <plone:behavior
-                title="Relations behavior"
-                description="A behavior"
-                provides="plone.app.versioningbehavior.tests.test_modifiers.IRelationsBehavior"
-                />
-        </configure>
-        """
-        xmlconfig.xmlconfig(StringIO(configuration))
+    def register_RelationsType(self):
+        xmlconfig.xmlconfig(StringIO(
+            '''
+            <configure
+                 package="plone.behavior"
+                 xmlns="http://namespaces.zope.org/zope"
+                 xmlns:plone="http://namespaces.plone.org/plone"
+                 i18n_domain="plone.behavior.tests">
+
+                 <include package="plone.behavior" file="meta.zcml" />
+
+                <plone:behavior
+                    title="Relations behavior"
+                    description="A behavior"
+                    provides="plone.app.versioningbehavior.tests.test_modifiers.IRelationsBehavior"
+                    />
+            </configure>
+            '''
+        ))
         rel_fti = DexterityFTI(
             'RelationsType',
-            behaviors=[IRelationsBehavior.__identifier__])
+            behaviors=[IRelationsBehavior.__identifier__]
+        )
         self.portal.portal_types._setObject('RelationsType', rel_fti)
 
         # Setup IIntIds utility which is required for relations to work
-        from five.intid import site
-        from zope.app.intid.interfaces import IIntIds
         site.add_intids(self.portal)
+
+    def testRelationsInBehaviors(self):
+        self.register_RelationsType()
         intids = getUtility(IIntIds)
 
         source = createContentInContainer(self.portal, 'RelationsType')
@@ -323,6 +328,26 @@ def testRelationsInBehaviors(self):
         self.assertTrue(IRelationsBehavior(repo_clone).multiple
                         is IRelationsBehavior(source).multiple)
 
+    def testRelationsInBehaviorsForMigratedDXObjects(self):
+        ''' Do not break in the case of
+        dexterity objects with relations migrated from something else
+        (e.g. Archetypes)
+        '''
+        self.register_RelationsType()
+        source = createContentInContainer(self.portal, 'RelationsType')
+
+        # Test modifier when no relations are set
+        class Dummy(object):
+            pass
+
+        repo_clone = Dummy()
+
+        modifier = SkipRelations('modifier', 'Modifier')
+        modifier.afterRetrieveModifier(source, repo_clone)
+
+        self.assertFalse(hasattr(repo_clone, 'single'))
+        self.assertFalse(hasattr(repo_clone, 'multiple'))
+
 
 def test_suite():
     suite = TestSuite()


Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2016-09-13T10:09:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/acab904e04b8c74132c7fc2dd015b046167469d3

Merge pull request #29 from plone/fix-ats-migrated-to-dxs

Fix ats migrated to dxs

Files changed:
M CHANGES.rst
M plone/app/versioningbehavior/modifiers.py
M plone/app/versioningbehavior/tests/test_modifiers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 59e7846..20e5fd2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Do not break in the case of dexterity objects with relations
+  migrated from something else (usually Archetypes).
+  [ale-rt]
 
 
 1.2.9 (2016-08-18)
diff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py
index 7811f26..1b18fd0 100644
--- a/plone/app/versioningbehavior/modifiers.py
+++ b/plone/app/versioningbehavior/modifiers.py
@@ -214,7 +214,10 @@ def beforeSaveModifier(self, obj, clone):
 
     def afterRetrieveModifier(self, obj, repo_clone, preserve=()):
         """Restore relations from the working copy."""
-        if IDexterityContent.providedBy(obj):
+        if (
+            IDexterityContent.providedBy(obj) and
+            IDexterityContent.providedBy(repo_clone)
+        ):
             for schemata in iterSchemata(obj):
                 for name, field in getFields(schemata).items():
                     if (IRelationChoice.providedBy(field) or
diff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py
index 1310135..3c25525 100644
--- a/plone/app/versioningbehavior/tests/test_modifiers.py
+++ b/plone/app/versioningbehavior/tests/test_modifiers.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from five.intid import site
 from plone.app.versioningbehavior.modifiers import CloneNamedFileBlobs
 from plone.app.versioningbehavior.modifiers import SkipRelations
 from plone.autoform.interfaces import IFormFieldProvider
@@ -13,6 +14,7 @@
 from z3c.relationfield.relation import RelationValue
 from z3c.relationfield.schema import RelationChoice, RelationList
 from ZODB.interfaces import IBlob
+from zope.app.intid.interfaces import IIntIds
 from zope.component import getUtility
 from zope.configuration import xmlconfig
 from zope.interface import alsoProvides, Interface
@@ -54,7 +56,8 @@ def testCloneNamedFileBlobsInSchema(self):
             model_source="""
             <model xmlns="http://namespaces.plone.org/supermodel/schema">
                 <schema>
-                    <field name="file" type="plone.namedfile.field.NamedBlobFile">
+                    <field name="file"
+                           type="plone.namedfile.field.NamedBlobFile">
                         <title>File</title>
                         <required>True</required>
                     </field>
@@ -126,7 +129,8 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):
             model_source="""
             <model xmlns="http://namespaces.plone.org/supermodel/schema">
                 <schema>
-                    <field name="file" type="plone.namedfile.field.NamedBlobFile">
+                    <field name="file"
+                           type="plone.namedfile.field.NamedBlobFile">
                         <title>File</title>
                         <required>True</required>
                     </field>
@@ -138,7 +142,8 @@ def testCloneNamedFileBlobsOnCloneModifiers(self):
         file1 = createContentInContainer(self.portal, 'BlobFile')
         file1.file = NamedBlobFile('dummy test data', filename=u'test.txt')
         modifier = CloneNamedFileBlobs('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(file1)
+        on_clone_modifiers = modifier.getOnCloneModifiers(file1)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(file1.file._blob))
         self.assertTrue(pers_load(file1.file._blob) is None)
         self.assertTrue(empty1 == [])
@@ -150,7 +155,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
             model_source="""
             <model xmlns="http://namespaces.plone.org/supermodel/schema">
                 <schema>
-                    <field name="file" type="plone.namedfile.field.NamedBlobFile">
+                    <field name="file"
+                           type="plone.namedfile.field.NamedBlobFile">
                         <title>File</title>
                         <required>True</required>
                     </field>
@@ -162,7 +168,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
         modifier = CloneNamedFileBlobs('modifier', 'Modifier')
         attrs_dict = modifier.getReferencedAttributes(file1)
         self.assertTrue(attrs_dict == {})
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(file1)
+        on_clone_modifiers = modifier.getOnCloneModifiers(file1)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_load(None) is None)
         self.assertTrue(empty1 == [])
@@ -177,7 +184,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
             in attrs_dict)
         blob = attrs_dict.values()[0]
         self.assertTrue(IBlob.providedBy(blob))
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(file1)
+        on_clone_modifiers = modifier.getOnCloneModifiers(file1)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(file1.file._blob))
         self.assertTrue(pers_load(file1.file._blob) is None)
         self.assertTrue(empty1 == [])
@@ -186,7 +194,8 @@ def testCloneNamedFileBlobsWithNoFile(self):
     def testRelations(self):
         rel_fti = DexterityFTI(
             'RelationsType',
-            schema='plone.app.versioningbehavior.tests.test_modifiers.IRelationsType')
+            schema=IRelationsType.__identifier__
+        )
         self.portal.portal_types._setObject('RelationsType', rel_fti)
 
         # Setup IIntIds utility which is required for relations to work
@@ -200,7 +209,8 @@ def testRelations(self):
 
         # Test modifier when no relations are set
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_load(None) is None)
@@ -223,7 +233,8 @@ def testRelations(self):
         notify(ObjectModifiedEvent(source))
 
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(source.single))
         self.assertTrue(pers_id(source.multiple))
         self.assertTrue(pers_load(source.single) is None)
@@ -236,33 +247,36 @@ def testRelations(self):
         self.assertTrue(repo_clone.single is source.single)
         self.assertTrue(repo_clone.multiple is source.multiple)
 
-    def testRelationsInBehaviors(self):
-        configuration = """\
-        <configure
-             package="plone.behavior"
-             xmlns="http://namespaces.zope.org/zope"
-             xmlns:plone="http://namespaces.plone.org/plone"
-             i18n_domain="plone.behavior.tests">
-
-             <include package="plone.behavior" file="meta.zcml" />
-
-            <plone:behavior
-                title="Relations behavior"
-                description="A behavior"
-                provides="plone.app.versioningbehavior.tests.test_modifiers.IRelationsBehavior"
-                />
-        </configure>
-        """
-        xmlconfig.xmlconfig(StringIO(configuration))
+    def register_RelationsType(self):
+        xmlconfig.xmlconfig(StringIO(
+            '''
+            <configure
+                 package="plone.behavior"
+                 xmlns="http://namespaces.zope.org/zope"
+                 xmlns:plone="http://namespaces.plone.org/plone"
+                 i18n_domain="plone.behavior.tests">
+
+                 <include package="plone.behavior" file="meta.zcml" />
+
+                <plone:behavior
+                    title="Relations behavior"
+                    description="A behavior"
+                    provides="plone.app.versioningbehavior.tests.test_modifiers.IRelationsBehavior"
+                    />
+            </configure>
+            '''
+        ))
         rel_fti = DexterityFTI(
             'RelationsType',
-            behaviors=[IRelationsBehavior.__identifier__])
+            behaviors=[IRelationsBehavior.__identifier__]
+        )
         self.portal.portal_types._setObject('RelationsType', rel_fti)
 
         # Setup IIntIds utility which is required for relations to work
-        from five.intid import site
-        from zope.app.intid.interfaces import IIntIds
         site.add_intids(self.portal)
+
+    def testRelationsInBehaviors(self):
+        self.register_RelationsType()
         intids = getUtility(IIntIds)
 
         source = createContentInContainer(self.portal, 'RelationsType')
@@ -270,7 +284,8 @@ def testRelationsInBehaviors(self):
 
         # Test modifier when no relations are set
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_id(None) is None)
         self.assertTrue(pers_load(None) is None)
@@ -284,8 +299,12 @@ def testRelationsInBehaviors(self):
         self.assertTrue(repo_clone.multiple is None)
 
         # Add some relations
-        IRelationsBehavior(source).single = RelationValue(intids.getId(target))
-        IRelationsBehavior(source).multiple = [RelationValue(intids.getId(target))]
+        IRelationsBehavior(source).single = RelationValue(
+            intids.getId(target)
+        )
+        IRelationsBehavior(source).multiple = [
+            RelationValue(intids.getId(target))
+        ]
 
         # Update relations
         from zope.lifecycleevent import ObjectModifiedEvent
@@ -293,7 +312,8 @@ def testRelationsInBehaviors(self):
         notify(ObjectModifiedEvent(source))
 
         modifier = SkipRelations('modifier', 'Modifier')
-        pers_id, pers_load, empty1, empty2 = modifier.getOnCloneModifiers(source)
+        on_clone_modifiers = modifier.getOnCloneModifiers(source)
+        pers_id, pers_load, empty1, empty2 = on_clone_modifiers
         self.assertTrue(pers_id(IRelationsBehavior(source).single))
         self.assertTrue(pers_id(IRelationsBehavior(source).multiple))
         self.assertTrue(pers_load(IRelationsBehavior(source).single) is None)
@@ -308,6 +328,26 @@ def testRelationsInBehaviors(self):
         self.assertTrue(IRelationsBehavior(repo_clone).multiple
                         is IRelationsBehavior(source).multiple)
 
+    def testRelationsInBehaviorsForMigratedDXObjects(self):
+        ''' Do not break in the case of
+        dexterity objects with relations migrated from something else
+        (e.g. Archetypes)
+        '''
+        self.register_RelationsType()
+        source = createContentInContainer(self.portal, 'RelationsType')
+
+        # Test modifier when no relations are set
+        class Dummy(object):
+            pass
+
+        repo_clone = Dummy()
+
+        modifier = SkipRelations('modifier', 'Modifier')
+        modifier.afterRetrieveModifier(source, repo_clone)
+
+        self.assertFalse(hasattr(repo_clone, 'single'))
+        self.assertFalse(hasattr(repo_clone, 'multiple'))
+
 
 def test_suite():
     suite = TestSuite()


