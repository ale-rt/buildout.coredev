Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2017-02-01T11:28:17Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/c654767bca5d33cc56aac26e79dffcb85d2547fb

Fix setting default values in schemaeditor

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/schema/listing.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8025f69..caa7116 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -21,6 +21,9 @@ Bug fixes:
   instead of Products.Five.testbrowser
   [davisagli]
 
+- Cleaner implementation of bypassing required check for setting
+  default values, which actually works
+  [tomgross]
 
 2.0.13 (2017-01-01)
 -------------------
diff --git a/plone/schemaeditor/browser/schema/listing.py b/plone/schemaeditor/browser/schema/listing.py
index 6314ae1..01e89aa 100644
--- a/plone/schemaeditor/browser/schema/listing.py
+++ b/plone/schemaeditor/browser/schema/listing.py
@@ -29,6 +29,7 @@ class SchemaListing(AutoExtensibleForm, form.Form):
     ignoreRequest = True
     showEmptyGroups = True
     template = ViewPageTemplateFile('schema_listing.pt')
+    ignoreRequiredOnExtract = True
 
     @property
     def schema(self):
@@ -109,14 +110,6 @@ def delete_url(self, field):
         condition=lambda form: getattr(form.context, 'showSaveDefaults', True)
     )
     def handleSaveDefaults(self, action):
-        # ignore fields from behaviors by setting their widgets' modes
-        # to the display mode while we extract the form values (hack!)
-        widget_modes = {}
-        for widget in self._iterateOverWidgets():
-            if widget.field.interface is not self.context.schema:
-                widget_modes[widget] = widget.mode
-                widget.mode = DISPLAY_MODE
-
         data, errors = self.extractData()
         if errors:
             self.status = self.formErrorsMessage
@@ -126,10 +119,6 @@ def handleSaveDefaults(self, action):
             self.context.schema[fname].default = value
         notify(SchemaModifiedEvent(self.context))
 
-        # restore the actual widget modes so they render a preview
-        for widget, mode in widget_modes.items():
-            widget.mode = mode
-
         # update widgets to take the new defaults into account
         self.updateWidgets()
 


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2017-02-01T11:28:17Z
Author: Tom Gross (tomgross) <itconsense@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/ff6ccff95c67a6c842966e4dc1677f490690c9c1

Fix static code violations

Files changed:
M plone/schemaeditor/browser/schema/add_fieldset.py
M plone/schemaeditor/browser/schema/listing.py

diff --git a/plone/schemaeditor/browser/schema/add_fieldset.py b/plone/schemaeditor/browser/schema/add_fieldset.py
index 8f92cff..66a3267 100644
--- a/plone/schemaeditor/browser/schema/add_fieldset.py
+++ b/plone/schemaeditor/browser/schema/add_fieldset.py
@@ -43,7 +43,7 @@ def add(self, new_fieldset):
         notifyContainerModified(schema)
         notify(SchemaModifiedEvent(self.context))
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Fieldset added successfully."), type='info')
+            _(u'Fieldset added successfully.'), type='info')
 
     def nextURL(self):
         return '@@add-fieldset'
diff --git a/plone/schemaeditor/browser/schema/listing.py b/plone/schemaeditor/browser/schema/listing.py
index 01e89aa..3030ab1 100644
--- a/plone/schemaeditor/browser/schema/listing.py
+++ b/plone/schemaeditor/browser/schema/listing.py
@@ -8,7 +8,6 @@
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from z3c.form import button
 from z3c.form import form
-from z3c.form.interfaces import DISPLAY_MODE
 from z3c.form.interfaces import IEditForm
 from zope.component import queryUtility
 from zope.event import notify


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2017-02-07T00:04:03+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.schemaeditor/commit/520bd5f99f87a646bb7546ae5c3d71170aa83c33

Merge branch 'master' into set_default_values

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/field/edit.py
M plone/schemaeditor/browser/field/fieldset.py
M plone/schemaeditor/browser/field/order.py
M plone/schemaeditor/tests/browser_testing.zcml
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index caa7116..f933116 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,7 +1,7 @@
 Changelog
 =========
 
-2.0.14 (unreleased)
+2.0.15 (unreleased)
 -------------------
 
 Breaking changes:
@@ -14,6 +14,16 @@ New features:
 
 Bug fixes:
 
+- Cleaner implementation of bypassing required check for setting
+  default values, which actually works
+  [tomgross]
+
+
+2.0.14 (2017-02-05)
+-------------------
+
+Bug fixes:
+
 - Fix POST AJAX-URL for reordering fields
   [tomgross]
 
@@ -21,9 +31,12 @@ Bug fixes:
   instead of Products.Five.testbrowser
   [davisagli]
 
-- Cleaner implementation of bypassing required check for setting
-  default values, which actually works
-  [tomgross]
+- Fix test setup for Zope 4.
+  [davisagli]
+
+- Use __parent__ instead of aq_parent.
+  [davisagli]
+
 
 2.0.13 (2017-01-01)
 -------------------
diff --git a/plone/schemaeditor/browser/field/edit.py b/plone/schemaeditor/browser/field/edit.py
index b6e5f57..c38dffa 100644
--- a/plone/schemaeditor/browser/field/edit.py
+++ b/plone/schemaeditor/browser/field/edit.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_inner
-from Acquisition import aq_parent
 from plone.autoform.form import AutoExtensibleForm
 from plone.schemaeditor import _
 from plone.schemaeditor import interfaces
@@ -123,7 +122,7 @@ def _schema(self):
 
     @lazy_property
     def additionalSchemata(self):
-        schema_context = self.context.aq_parent
+        schema_context = self.context.__parent__
         return [v for k, v in getAdapters((schema_context, self.field),
                                           interfaces.IFieldEditorExtender)]
 
@@ -165,14 +164,14 @@ def handleSave(self, action):
             IStatusMessage(self.request).addStatusMessage(
                 self.noChangesMessage, type='info')
 
-        notify(SchemaModifiedEvent(self.context.aq_parent))
+        notify(SchemaModifiedEvent(self.context.__parent__))
 
     @button.buttonAndHandler(_(u'Cancel'), name='cancel')
     def handleCancel(self, action):
         self.redirectToParent()
 
     def redirectToParent(self):
-        parent = aq_parent(aq_inner(self.context))
+        parent = aq_inner(self.context).__parent__
         url = parent.absolute_url()
         if hasattr(parent, 'schemaEditorView') and parent.schemaEditorView:
             url += '/@@' + parent.schemaEditorView
diff --git a/plone/schemaeditor/browser/field/fieldset.py b/plone/schemaeditor/browser/field/fieldset.py
index cf1a919..d6fd34d 100644
--- a/plone/schemaeditor/browser/field/fieldset.py
+++ b/plone/schemaeditor/browser/field/fieldset.py
@@ -59,4 +59,4 @@ def change(self, fieldset_index):
         schema.moveField(field_name, new_position)
 
         notifyContainerModified(self.schema)
-        notify(SchemaModifiedEvent(self.aq_parent.aq_parent))
+        notify(SchemaModifiedEvent(self.__parent__.__parent__))
diff --git a/plone/schemaeditor/browser/field/order.py b/plone/schemaeditor/browser/field/order.py
index 9053f6c..e42bb80 100644
--- a/plone/schemaeditor/browser/field/order.py
+++ b/plone/schemaeditor/browser/field/order.py
@@ -45,7 +45,7 @@ def move(self, pos, fieldset_index):
         schema.moveField(fieldname, new_absolute_position)
 
         notifyContainerModified(self.schema)
-        notify(SchemaModifiedEvent(self.aq_parent.aq_parent))
+        notify(SchemaModifiedEvent(self.__parent__.__parent__))
 
     def delete(self):
         """
@@ -54,5 +54,5 @@ def delete(self):
         schema = IEditableSchema(self.schema)
         schema.removeField(self.field.getName())
         notify(ObjectRemovedEvent(self.field, self.schema))
-        notify(FieldRemovedEvent(self.aq_parent.aq_parent, self.field))
+        notify(FieldRemovedEvent(self.__parent__.__parent__, self.field))
         self.request.response.setHeader('Content-Type', 'application/json')
diff --git a/plone/schemaeditor/tests/browser_testing.zcml b/plone/schemaeditor/tests/browser_testing.zcml
index 6a8ec7d..bda61df 100644
--- a/plone/schemaeditor/tests/browser_testing.zcml
+++ b/plone/schemaeditor/tests/browser_testing.zcml
@@ -1,6 +1,12 @@
 <configure
     xmlns="http://namespaces.zope.org/zope"
-    xmlns:browser="http://namespaces.zope.org/browser">
+    xmlns:browser="http://namespaces.zope.org/browser"
+    xmlns:zcml="http://namespaces.zope.org/zcml">
+
+    <!-- only load PageTemplates zcml in Zope 4 -->
+    <configure zcml:condition="installed Products.PageTemplates.engine">
+        <include package="Products.PageTemplates" />
+    </configure>
 
     <include package="Products.GenericSetup" file="meta.zcml" />
     <include package="Products.Five" file="meta.zcml" />
diff --git a/setup.py b/setup.py
index 856ec34..08806f6 100644
--- a/setup.py
+++ b/setup.py
@@ -3,7 +3,7 @@
 from setuptools import setup
 
 
-version = '2.0.14.dev0'
+version = '2.0.15.dev0'
 
 setup(
     name='plone.schemaeditor',


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2017-02-07T00:04:15+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.schemaeditor/commit/ddff4eddbe035763b594b9b6d18a543a5de84518

Merge pull request #47 from plone/set_default_values

Fix setting default values in schemaeditor

Files changed:
M CHANGES.rst
M plone/schemaeditor/browser/schema/add_fieldset.py
M plone/schemaeditor/browser/schema/listing.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 69754d1..f933116 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Cleaner implementation of bypassing required check for setting
+  default values, which actually works
+  [tomgross]
 
 
 2.0.14 (2017-02-05)
diff --git a/plone/schemaeditor/browser/schema/add_fieldset.py b/plone/schemaeditor/browser/schema/add_fieldset.py
index 8f92cff..66a3267 100644
--- a/plone/schemaeditor/browser/schema/add_fieldset.py
+++ b/plone/schemaeditor/browser/schema/add_fieldset.py
@@ -43,7 +43,7 @@ def add(self, new_fieldset):
         notifyContainerModified(schema)
         notify(SchemaModifiedEvent(self.context))
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Fieldset added successfully."), type='info')
+            _(u'Fieldset added successfully.'), type='info')
 
     def nextURL(self):
         return '@@add-fieldset'
diff --git a/plone/schemaeditor/browser/schema/listing.py b/plone/schemaeditor/browser/schema/listing.py
index 6314ae1..3030ab1 100644
--- a/plone/schemaeditor/browser/schema/listing.py
+++ b/plone/schemaeditor/browser/schema/listing.py
@@ -8,7 +8,6 @@
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from z3c.form import button
 from z3c.form import form
-from z3c.form.interfaces import DISPLAY_MODE
 from z3c.form.interfaces import IEditForm
 from zope.component import queryUtility
 from zope.event import notify
@@ -29,6 +28,7 @@ class SchemaListing(AutoExtensibleForm, form.Form):
     ignoreRequest = True
     showEmptyGroups = True
     template = ViewPageTemplateFile('schema_listing.pt')
+    ignoreRequiredOnExtract = True
 
     @property
     def schema(self):
@@ -109,14 +109,6 @@ def delete_url(self, field):
         condition=lambda form: getattr(form.context, 'showSaveDefaults', True)
     )
     def handleSaveDefaults(self, action):
-        # ignore fields from behaviors by setting their widgets' modes
-        # to the display mode while we extract the form values (hack!)
-        widget_modes = {}
-        for widget in self._iterateOverWidgets():
-            if widget.field.interface is not self.context.schema:
-                widget_modes[widget] = widget.mode
-                widget.mode = DISPLAY_MODE
-
         data, errors = self.extractData()
         if errors:
             self.status = self.formErrorsMessage
@@ -126,10 +118,6 @@ def handleSaveDefaults(self, action):
             self.context.schema[fname].default = value
         notify(SchemaModifiedEvent(self.context))
 
-        # restore the actual widget modes so they render a preview
-        for widget, mode in widget_modes.items():
-            widget.mode = mode
-
         # update widgets to take the new defaults into account
         self.updateWidgets()
 


