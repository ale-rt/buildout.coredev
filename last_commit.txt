Repository: plone.app.testing


Branch: refs/heads/master
Date: 2016-09-07T01:21:27+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.testing/commit/8dbbe7833b386ca100e57c8b50c857e377a95874

Added test that the upgrade step registry gets rolled back.

Files changed:
M plone/app/testing/helpers.rst

diff --git a/plone/app/testing/helpers.rst b/plone/app/testing/helpers.rst
index 9ce0ca4..a2de491 100644
--- a/plone/app/testing/helpers.rst
+++ b/plone/app/testing/helpers.rst
@@ -254,10 +254,13 @@ layer base class which helps implement this pattern.
     ...         from Products.GenericSetup.registry import _profile_registry
     ...         from Products.GenericSetup.registry import _import_step_registry
     ...         from Products.GenericSetup.registry import _export_step_registry
+    ...         from Products.GenericSetup import upgrade
     ...
     ...         _profile_registry.registerProfile('dummy1', u"My package", u"", ".", 'plone.app.testing')
     ...         _import_step_registry.registerStep('import1', version=1, handler='plone.app.testing.tests.dummy', title=u"Dummy import step", description=u"")
     ...         _export_step_registry.registerStep('export1', handler='plone.app.testing.tests.dummy', title=u"Dummy import step", description=u"")
+    ...         upgrade_step = upgrade.UpgradeStep(u'Dummy upgrade step', 'plone.app.testing:default', '1000', '1001', '', 'plone.app.testing.tests.dummy')
+    ...         upgrade._registerUpgradeStep(upgrade_step)
     ...
     ...         # And then pretend to register a PAS multi-plugin
     ...         from Products.PluggableAuthService import PluggableAuthService
@@ -336,6 +339,7 @@ Again, our state should now be available.
     >>> from Products.GenericSetup.registry import _profile_registry
     >>> from Products.GenericSetup.registry import _import_step_registry
     >>> from Products.GenericSetup.registry import _export_step_registry
+    >>> from Products.GenericSetup.upgrade import _upgrade_registry
 
     >>> numProfiles = len(_profile_registry.listProfiles())
     >>> 'plone.app.testing:dummy1' in _profile_registry.listProfiles()
@@ -353,6 +357,10 @@ Again, our state should now be available.
     >>> 'dummy_plugin1' in PluggableAuthService.MultiPlugins
     True
 
+    >>> numUpgrades = len(_upgrade_registry.keys())
+    >>> len(_upgrade_registry.getUpgradeStepsForProfile('plone.app.testing:default'))
+    1
+
 We'll now tear down just the ``MY_INTEGRATION_TESTING`` layer. At this
 point, we should still have a Plone site, but none of the changes from our
 layer.
@@ -385,6 +393,11 @@ layer.
     >>> 'export1' in _export_step_registry.listSteps()
     False
 
+    >>> len(_upgrade_registry.keys()) == numUpgrades - 1
+    True
+    >>> len(_upgrade_registry.getUpgradeStepsForProfile('plone.app.testing:default'))
+    0
+
     >>> from Products.PluggableAuthService import PluggableAuthService
     >>> 'dummy_plugin1' in PluggableAuthService.MultiPlugins
     False


Repository: plone.app.testing


Branch: refs/heads/master
Date: 2016-09-07T01:21:27+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.testing/commit/63c517716eed885776f6d59bcd3020c12e87ccaf

In PloneSandboxLayer make profile upgrade versions persistent.

This way installed profile versions get reset in teardown.

Initially I added push and pop support for the various GS registries,
but somehow that is handled fine already.

Files changed:
M CHANGES.rst
M plone/app/testing/helpers.py
M plone/app/testing/helpers.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 0f69f1f..1b02a52 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- In PloneSandboxLayer make profile upgrade versions persistent.  This
+  way installed profile versions get reset in teardown.  [maurits]
 
 Bug fixes:
 
diff --git a/plone/app/testing/helpers.py b/plone/app/testing/helpers.py
index 905ed21..7bb57c5 100644
--- a/plone/app/testing/helpers.py
+++ b/plone/app/testing/helpers.py
@@ -204,6 +204,21 @@ def popGlobalRegistry(portal):
     return previous
 
 
+def persist_profile_upgrade_versions(portal):
+    """Persist the profile_upgrade_versions of portal_setup.
+
+    Until at least Products.GenericSetup 1.8.3 this is a standard
+    non-persistent dictionary, which means a transaction rollback does
+    not rollback changes to this dictionary.  So we make it a persistent
+    mapping.  Call this once in layer setup and you have easy rollback.
+    """
+    from persistent.mapping import PersistentMapping
+    puv = portal.portal_setup._profile_upgrade_versions
+    if isinstance(puv, PersistentMapping):
+        return
+    portal.portal_setup._profile_upgrade_versions = PersistentMapping(puv)
+
+
 @contextlib.contextmanager
 def ploneSite(db=None, connection=None, environ=None):
     """Context manager for working with the Plone portal during layer setup::
@@ -325,6 +340,10 @@ def setUp(self):
                 # and other global component registry changes are sandboxed
                 pushGlobalRegistry(portal)
 
+                # Persist GenericSetup profile upgrade versions for easy
+                # rollback.
+                persist_profile_upgrade_versions(portal)
+
                 # Make sure zope.security checkers can be set up and torn down
                 # reliably
 
diff --git a/plone/app/testing/helpers.rst b/plone/app/testing/helpers.rst
index a2de491..58e4ed9 100644
--- a/plone/app/testing/helpers.rst
+++ b/plone/app/testing/helpers.rst
@@ -70,6 +70,9 @@ need to tear that down as well.
     ...
     ...         with helpers.ploneSite() as portal:
     ...
+    ...             # Persist GenericSetup profile upgrade versions for easy rollback.
+    ...             helpers.persist_profile_upgrade_versions(portal)
+    ...
     ...             # Push a new component registry so that ZCML registations
     ...             # and other global component registry changes are sandboxed
     ...             helpers.pushGlobalRegistry(portal)
@@ -133,9 +136,12 @@ having taken effect.
 We should also see our product installation in the quickinstaller tool
 and the results of the profile having been applied.
 
+    >>> from Products.GenericSetup.tool import UNKNOWN
     >>> with helpers.ploneSite() as portal:
     ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
+    ...     portal.portal_setup.getLastVersionForProfile('plone.resource:default') == UNKNOWN
     True
+    False
 
 Let's now simulate a test.
 
@@ -199,9 +205,11 @@ should not.
     ...     print portal.title
     ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
     ...     'folder1' in portal.objectIds()
+    ...     portal.portal_setup.getLastVersionForProfile('plone.resource:default') == UNKNOWN
     New title
     True
     False
+    False
 
 We'll now tear down just the ``HELPER_DEMOS_INTEGRATION_TESTING`` layer. At this
 point, we should still have a Plone site, but none of the persistent or
@@ -217,6 +225,8 @@ component architecture changes from our layer.
     >>> with helpers.ploneSite() as portal:
     ...     print portal.title
     ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
+    ...     # This should be True, but is False:
+    ...     # portal.portal_setup.getLastVersionForProfile('plone.resource:default') == UNKNOWN
     Plone site
     False
 


Repository: plone.app.testing


Branch: refs/heads/master
Date: 2016-09-07T01:21:28+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.testing/commit/773220f54f45dad6bce6efcc9b734cc6263f65f3

Use get_installer instead of portal_quickinstaller when available.

This is needed for Plone 5.1 and higher, plip 1340:
https://github.com/plone/Products.CMFPlone/issues/1340

Files changed:
A plone/app/testing/profile/metadata.xml
M CHANGES.rst
M plone/app/testing/helpers.py
M plone/app/testing/helpers.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 1b02a52..d9cc520 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,9 @@ Breaking changes:
 
 New features:
 
+- Use get_installer instead of portal_quickinstaller when available, for
+  Plone 5.1 and higher.  [maurits]
+
 - In PloneSandboxLayer make profile upgrade versions persistent.  This
   way installed profile versions get reset in teardown.  [maurits]
 
diff --git a/plone/app/testing/helpers.py b/plone/app/testing/helpers.py
index 7bb57c5..1a60080 100644
--- a/plone/app/testing/helpers.py
+++ b/plone/app/testing/helpers.py
@@ -84,13 +84,27 @@ def quickInstallProduct(portal, productName, reinstall=False):
     z2.login(app['acl_users'], SITE_OWNER_NAME)
 
     try:
-        quickinstaller = portal['portal_quickinstaller']
+        from Products.CMFPlone.utils import get_installer
+    except ImportError:
+        # BBB For Plone 5.0 and lower.
+        qi = portal['portal_quickinstaller']
+        old_qi = True
+    else:
+        qi = get_installer(portal)
+        old_qi = False
 
-        if quickinstaller.isProductInstalled(productName):
-            if reinstall:
-                quickinstaller.reinstallProducts([productName])
+    try:
+        if old_qi:
+            if not qi.isProductInstalled(productName):
+                qi.installProduct(productName)
+            elif reinstall:
+                qi.reinstallProducts([productName])
         else:
-            quickinstaller.installProduct(productName)
+            if not qi.is_product_installed(productName):
+                qi.install_product(productName, allow_hidden=True)
+            elif reinstall:
+                qi.uninstall_product(productName)
+                qi.install_product(productName, allow_hidden=True)
 
         portal.clearCurrentSkin()
         portal.setupCurrentSkin(portal.REQUEST)
diff --git a/plone/app/testing/helpers.rst b/plone/app/testing/helpers.rst
index 58e4ed9..a67bd2f 100644
--- a/plone/app/testing/helpers.rst
+++ b/plone/app/testing/helpers.rst
@@ -38,7 +38,7 @@ layer, we will perform the following setup:
 4. Make some persistent changes, to illustrate how these are torn down when
    we pop the ZODB ``DemoStorage``.
 
-5. Install a product using the ``portal_quickinstaller`` tool.
+5. Install a product using the ``get_installer`` view (or the old ``portal_quickinstaller`` tool).
 
 6. Apply a named extension profile.
 
@@ -49,6 +49,17 @@ component registry (to roll back all global component registrations). Of
 course, if our setup had changed any other global or external state, we would
 need to tear that down as well.
 
+    >>> def is_installed(portal, product_name):
+    ...     try:
+    ...         from Products.CMFPlone.utils import get_installer
+    ...     except ImportError:
+    ...         # BBB For Plone 5.0 and lower.
+    ...         qi = portal['portal_quickinstaller']
+    ...         return qi.isProductInstalled(product_name)
+    ...     else:
+    ...         qi = get_installer(portal)
+    ...         return qi.is_product_installed(product_name)
+
     >>> from plone.testing import Layer
     >>> from plone.testing import zca, z2, zodb
 
@@ -73,6 +84,16 @@ need to tear that down as well.
     ...             # Persist GenericSetup profile upgrade versions for easy rollback.
     ...             helpers.persist_profile_upgrade_versions(portal)
     ...
+    ...             # First register dummy default and uninstall profiles for plone.app.testing.
+    ...             # We will use this to test that after teardown the installed profile versions get reset.
+    ...             # We used to test this with plone.resource, but that is already installed by default,
+    ...             # which makes it a pain to test with.
+    ...             from Products.GenericSetup.registry import _profile_registry
+    ...             from Products.GenericSetup.interfaces import EXTENSION
+    ...             # 'profile' points to a path with a metadata.xml so we can have a version.
+    ...             _profile_registry.registerProfile('default', u"Testing", u"", "profile", 'plone.app.testing', EXTENSION)
+    ...             _profile_registry.registerProfile('uninstall', u"Testing uninstall", u"", "profile", 'plone.app.testing', EXTENSION)
+    ...
     ...             # Push a new component registry so that ZCML registations
     ...             # and other global component registry changes are sandboxed
     ...             helpers.pushGlobalRegistry(portal)
@@ -86,7 +107,8 @@ need to tear that down as well.
     ...             portal.title = u"New title"
     ...
     ...             # Install a product using portal_quickinstaller
-    ...             helpers.quickInstallProduct(portal, 'plone.resource')
+    ...             helpers.quickInstallProduct(portal, 'plone.app.testing')
+    ...             assert is_installed(portal, 'plone.app.testing')
     ...
     ...     def tearDown(self):
     ...
@@ -138,8 +160,8 @@ and the results of the profile having been applied.
 
     >>> from Products.GenericSetup.tool import UNKNOWN
     >>> with helpers.ploneSite() as portal:
-    ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
-    ...     portal.portal_setup.getLastVersionForProfile('plone.resource:default') == UNKNOWN
+    ...     print is_installed(portal, 'plone.app.testing')
+    ...     portal.portal_setup.getLastVersionForProfile('plone.app.testing:default') == UNKNOWN
     True
     False
 
@@ -203,9 +225,9 @@ should not.
 
     >>> with helpers.ploneSite() as portal:
     ...     print portal.title
-    ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
+    ...     print is_installed(portal, 'plone.app.testing')
     ...     'folder1' in portal.objectIds()
-    ...     portal.portal_setup.getLastVersionForProfile('plone.resource:default') == UNKNOWN
+    ...     portal.portal_setup.getLastVersionForProfile('plone.app.testing:default') == UNKNOWN
     New title
     True
     False
@@ -224,11 +246,11 @@ component architecture changes from our layer.
 
     >>> with helpers.ploneSite() as portal:
     ...     print portal.title
-    ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
-    ...     # This should be True, but is False:
-    ...     # portal.portal_setup.getLastVersionForProfile('plone.resource:default') == UNKNOWN
+    ...     print is_installed(portal, 'plone.app.testing')
+    ...     portal.portal_setup.getLastVersionForProfile('plone.app.testing:default') == UNKNOWN
     Plone site
     False
+    True
 
 Let's tear down the rest of the layers too.
 
diff --git a/plone/app/testing/profile/metadata.xml b/plone/app/testing/profile/metadata.xml
new file mode 100644
index 0000000..6ce5b66
--- /dev/null
+++ b/plone/app/testing/profile/metadata.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0"?>
+<metadata>
+  <!-- This is used in the helpers.rst tests. -->
+  <version>1000</version>
+</metadata>


Repository: plone.app.testing


Branch: refs/heads/master
Date: 2016-09-21T11:53:53+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.testing/commit/f424bbe7b54d498e1a7f6cc458ba6a34ead3b5b2

Merge pull request #29 from plone/get-rid-of-qi

Use get_installer and make profile upgrade versions persistent

Files changed:
A plone/app/testing/profile/metadata.xml
M CHANGES.rst
M plone/app/testing/helpers.py
M plone/app/testing/helpers.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 5736f5c..399723c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,11 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Use get_installer instead of portal_quickinstaller when available, for
+  Plone 5.1 and higher.  [maurits]
+
+- In PloneSandboxLayer make profile upgrade versions persistent.  This
+  way installed profile versions get reset in teardown.  [maurits]
 
 Bug fixes:
 
diff --git a/plone/app/testing/helpers.py b/plone/app/testing/helpers.py
index 905ed21..1a60080 100644
--- a/plone/app/testing/helpers.py
+++ b/plone/app/testing/helpers.py
@@ -84,13 +84,27 @@ def quickInstallProduct(portal, productName, reinstall=False):
     z2.login(app['acl_users'], SITE_OWNER_NAME)
 
     try:
-        quickinstaller = portal['portal_quickinstaller']
+        from Products.CMFPlone.utils import get_installer
+    except ImportError:
+        # BBB For Plone 5.0 and lower.
+        qi = portal['portal_quickinstaller']
+        old_qi = True
+    else:
+        qi = get_installer(portal)
+        old_qi = False
 
-        if quickinstaller.isProductInstalled(productName):
-            if reinstall:
-                quickinstaller.reinstallProducts([productName])
+    try:
+        if old_qi:
+            if not qi.isProductInstalled(productName):
+                qi.installProduct(productName)
+            elif reinstall:
+                qi.reinstallProducts([productName])
         else:
-            quickinstaller.installProduct(productName)
+            if not qi.is_product_installed(productName):
+                qi.install_product(productName, allow_hidden=True)
+            elif reinstall:
+                qi.uninstall_product(productName)
+                qi.install_product(productName, allow_hidden=True)
 
         portal.clearCurrentSkin()
         portal.setupCurrentSkin(portal.REQUEST)
@@ -204,6 +218,21 @@ def popGlobalRegistry(portal):
     return previous
 
 
+def persist_profile_upgrade_versions(portal):
+    """Persist the profile_upgrade_versions of portal_setup.
+
+    Until at least Products.GenericSetup 1.8.3 this is a standard
+    non-persistent dictionary, which means a transaction rollback does
+    not rollback changes to this dictionary.  So we make it a persistent
+    mapping.  Call this once in layer setup and you have easy rollback.
+    """
+    from persistent.mapping import PersistentMapping
+    puv = portal.portal_setup._profile_upgrade_versions
+    if isinstance(puv, PersistentMapping):
+        return
+    portal.portal_setup._profile_upgrade_versions = PersistentMapping(puv)
+
+
 @contextlib.contextmanager
 def ploneSite(db=None, connection=None, environ=None):
     """Context manager for working with the Plone portal during layer setup::
@@ -325,6 +354,10 @@ def setUp(self):
                 # and other global component registry changes are sandboxed
                 pushGlobalRegistry(portal)
 
+                # Persist GenericSetup profile upgrade versions for easy
+                # rollback.
+                persist_profile_upgrade_versions(portal)
+
                 # Make sure zope.security checkers can be set up and torn down
                 # reliably
 
diff --git a/plone/app/testing/helpers.rst b/plone/app/testing/helpers.rst
index 9ce0ca4..a67bd2f 100644
--- a/plone/app/testing/helpers.rst
+++ b/plone/app/testing/helpers.rst
@@ -38,7 +38,7 @@ layer, we will perform the following setup:
 4. Make some persistent changes, to illustrate how these are torn down when
    we pop the ZODB ``DemoStorage``.
 
-5. Install a product using the ``portal_quickinstaller`` tool.
+5. Install a product using the ``get_installer`` view (or the old ``portal_quickinstaller`` tool).
 
 6. Apply a named extension profile.
 
@@ -49,6 +49,17 @@ component registry (to roll back all global component registrations). Of
 course, if our setup had changed any other global or external state, we would
 need to tear that down as well.
 
+    >>> def is_installed(portal, product_name):
+    ...     try:
+    ...         from Products.CMFPlone.utils import get_installer
+    ...     except ImportError:
+    ...         # BBB For Plone 5.0 and lower.
+    ...         qi = portal['portal_quickinstaller']
+    ...         return qi.isProductInstalled(product_name)
+    ...     else:
+    ...         qi = get_installer(portal)
+    ...         return qi.is_product_installed(product_name)
+
     >>> from plone.testing import Layer
     >>> from plone.testing import zca, z2, zodb
 
@@ -70,6 +81,19 @@ need to tear that down as well.
     ...
     ...         with helpers.ploneSite() as portal:
     ...
+    ...             # Persist GenericSetup profile upgrade versions for easy rollback.
+    ...             helpers.persist_profile_upgrade_versions(portal)
+    ...
+    ...             # First register dummy default and uninstall profiles for plone.app.testing.
+    ...             # We will use this to test that after teardown the installed profile versions get reset.
+    ...             # We used to test this with plone.resource, but that is already installed by default,
+    ...             # which makes it a pain to test with.
+    ...             from Products.GenericSetup.registry import _profile_registry
+    ...             from Products.GenericSetup.interfaces import EXTENSION
+    ...             # 'profile' points to a path with a metadata.xml so we can have a version.
+    ...             _profile_registry.registerProfile('default', u"Testing", u"", "profile", 'plone.app.testing', EXTENSION)
+    ...             _profile_registry.registerProfile('uninstall', u"Testing uninstall", u"", "profile", 'plone.app.testing', EXTENSION)
+    ...
     ...             # Push a new component registry so that ZCML registations
     ...             # and other global component registry changes are sandboxed
     ...             helpers.pushGlobalRegistry(portal)
@@ -83,7 +107,8 @@ need to tear that down as well.
     ...             portal.title = u"New title"
     ...
     ...             # Install a product using portal_quickinstaller
-    ...             helpers.quickInstallProduct(portal, 'plone.resource')
+    ...             helpers.quickInstallProduct(portal, 'plone.app.testing')
+    ...             assert is_installed(portal, 'plone.app.testing')
     ...
     ...     def tearDown(self):
     ...
@@ -133,9 +158,12 @@ having taken effect.
 We should also see our product installation in the quickinstaller tool
 and the results of the profile having been applied.
 
+    >>> from Products.GenericSetup.tool import UNKNOWN
     >>> with helpers.ploneSite() as portal:
-    ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
+    ...     print is_installed(portal, 'plone.app.testing')
+    ...     portal.portal_setup.getLastVersionForProfile('plone.app.testing:default') == UNKNOWN
     True
+    False
 
 Let's now simulate a test.
 
@@ -197,11 +225,13 @@ should not.
 
     >>> with helpers.ploneSite() as portal:
     ...     print portal.title
-    ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
+    ...     print is_installed(portal, 'plone.app.testing')
     ...     'folder1' in portal.objectIds()
+    ...     portal.portal_setup.getLastVersionForProfile('plone.app.testing:default') == UNKNOWN
     New title
     True
     False
+    False
 
 We'll now tear down just the ``HELPER_DEMOS_INTEGRATION_TESTING`` layer. At this
 point, we should still have a Plone site, but none of the persistent or
@@ -216,9 +246,11 @@ component architecture changes from our layer.
 
     >>> with helpers.ploneSite() as portal:
     ...     print portal.title
-    ...     print portal['portal_quickinstaller'].isProductInstalled('plone.resource')
+    ...     print is_installed(portal, 'plone.app.testing')
+    ...     portal.portal_setup.getLastVersionForProfile('plone.app.testing:default') == UNKNOWN
     Plone site
     False
+    True
 
 Let's tear down the rest of the layers too.
 
@@ -254,10 +286,13 @@ layer base class which helps implement this pattern.
     ...         from Products.GenericSetup.registry import _profile_registry
     ...         from Products.GenericSetup.registry import _import_step_registry
     ...         from Products.GenericSetup.registry import _export_step_registry
+    ...         from Products.GenericSetup import upgrade
     ...
     ...         _profile_registry.registerProfile('dummy1', u"My package", u"", ".", 'plone.app.testing')
     ...         _import_step_registry.registerStep('import1', version=1, handler='plone.app.testing.tests.dummy', title=u"Dummy import step", description=u"")
     ...         _export_step_registry.registerStep('export1', handler='plone.app.testing.tests.dummy', title=u"Dummy import step", description=u"")
+    ...         upgrade_step = upgrade.UpgradeStep(u'Dummy upgrade step', 'plone.app.testing:default', '1000', '1001', '', 'plone.app.testing.tests.dummy')
+    ...         upgrade._registerUpgradeStep(upgrade_step)
     ...
     ...         # And then pretend to register a PAS multi-plugin
     ...         from Products.PluggableAuthService import PluggableAuthService
@@ -336,6 +371,7 @@ Again, our state should now be available.
     >>> from Products.GenericSetup.registry import _profile_registry
     >>> from Products.GenericSetup.registry import _import_step_registry
     >>> from Products.GenericSetup.registry import _export_step_registry
+    >>> from Products.GenericSetup.upgrade import _upgrade_registry
 
     >>> numProfiles = len(_profile_registry.listProfiles())
     >>> 'plone.app.testing:dummy1' in _profile_registry.listProfiles()
@@ -353,6 +389,10 @@ Again, our state should now be available.
     >>> 'dummy_plugin1' in PluggableAuthService.MultiPlugins
     True
 
+    >>> numUpgrades = len(_upgrade_registry.keys())
+    >>> len(_upgrade_registry.getUpgradeStepsForProfile('plone.app.testing:default'))
+    1
+
 We'll now tear down just the ``MY_INTEGRATION_TESTING`` layer. At this
 point, we should still have a Plone site, but none of the changes from our
 layer.
@@ -385,6 +425,11 @@ layer.
     >>> 'export1' in _export_step_registry.listSteps()
     False
 
+    >>> len(_upgrade_registry.keys()) == numUpgrades - 1
+    True
+    >>> len(_upgrade_registry.getUpgradeStepsForProfile('plone.app.testing:default'))
+    0
+
     >>> from Products.PluggableAuthService import PluggableAuthService
     >>> 'dummy_plugin1' in PluggableAuthService.MultiPlugins
     False
diff --git a/plone/app/testing/profile/metadata.xml b/plone/app/testing/profile/metadata.xml
new file mode 100644
index 0000000..6ce5b66
--- /dev/null
+++ b/plone/app/testing/profile/metadata.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0"?>
+<metadata>
+  <!-- This is used in the helpers.rst tests. -->
+  <version>1000</version>
+</metadata>


