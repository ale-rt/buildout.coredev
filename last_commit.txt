Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-03-25T13:55:10+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/6092bd83a9d0765e543553dadb7d01036914be23

Fix test isolation problem and remove an unnecessary test dependency on plone.app.widgets.

Files changed:
M CHANGES.rst
M plone/app/content/testing.py
M plone/app/content/tests/test_widgets.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dcfd57c..b4ab3a4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix test isolation problem and remove an unnecessary test dependency on ``plone.app.widgets``.
+  [thet]
 
 
 3.0.20 (2016-02-27)
diff --git a/plone/app/content/testing.py b/plone/app/content/testing.py
index 4e6172c..0362dd1 100644
--- a/plone/app/content/testing.py
+++ b/plone/app/content/testing.py
@@ -1,19 +1,62 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import IntegrationTesting
-from plone.app.testing import FunctionalTesting
-from zope.configuration import xmlconfig
 from plone.testing import z2
+from Products.CMFCore.utils import getToolByName
+from zope.configuration import xmlconfig
+from zope.interface import directlyProvides
+from zope.schema.interfaces import IVocabularyFactory
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
+from zope.interface import implements
+
+
+class ExampleVocabulary(object):
+    implements(IVocabularyFactory)
+
+    def __call__(self, context, query=None):
+        items = [u'One', u'Two', u'Three']
+        tmp = SimpleVocabulary([
+            SimpleTerm(it.lower(), it.lower(), it)
+            for it in items
+            if query is None
+            or query.lower() in it.lower()
+        ])
+        tmp.test = 1
+        return tmp
 
 
-class PloneAppContent(PloneSandboxLayer):
+def ExampleFunctionVocabulary(context, query=None):
+    items = [u'First', u'Second', u'Third']
+    tmp = SimpleVocabulary([
+        SimpleTerm(it.lower(), it.lower(), it)
+        for it in items
+        if query is None
+        or query.lower() in it.lower()
+    ])
+    return tmp
+directlyProvides(ExampleFunctionVocabulary, IVocabularyFactory)
+
+
+class PloneAppContentBase(PloneSandboxLayer):
 
     defaultBases = (PLONE_FIXTURE, )
 
+    def setUpZope(self, app, configurationContext):
+        # Load ZCML
+        import plone.app.content
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.content,
+            context=configurationContext
+        )
+
+
+class PloneAppContent(PloneAppContentBase):
+
     USER_NAME = 'johndoe'
     USER_PASSWORD = 'secret'
     MEMBER_NAME = 'janedoe'
@@ -24,13 +67,6 @@ class PloneAppContent(PloneSandboxLayer):
     MANAGER_USER_NAME = 'manager'
     MANAGER_USER_PASSWORD = 'secret'
 
-    def setUpZope(self, app, configurationContext):
-        # Load ZCML
-        import plone.app.content
-        xmlconfig.file('configure.zcml',
-                       plone.app.content,
-                       context=configurationContext)
-
     def setUpPloneSite(self, portal):
         # Creates some users
         acl_users = getToolByName(portal, 'acl_users')
@@ -80,6 +116,9 @@ def setUpPloneSite(self, portal):
         super(PloneAppContentAT, self).setUpPloneSite(portal)
         self.applyProfile(portal, 'Products.ATContentTypes:default')
 
+
+PLONE_APP_CONTENT_BASE_FIXTURE = PloneAppContentBase()
+
 PLONE_APP_CONTENT_FIXTURE = PloneAppContent()
 PLONE_APP_CONTENT_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENT_FIXTURE, ),
@@ -88,14 +127,16 @@ def setUpPloneSite(self, portal):
     bases=(PLONE_APP_CONTENT_FIXTURE, ),
     name="PloneAppContent:Functional")
 
+
 # Dexterity test layers
 PLONE_APP_CONTENT_DX_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
+    bases=(PLONE_APP_CONTENT_BASE_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE, ),
     name="PloneAppContentDX:Integration")
 PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING = FunctionalTesting(
-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
+    bases=(PLONE_APP_CONTENT_BASE_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE, ),
     name="PloneAppContentDX:Functional")
 
+
 # AT test layers
 PLONE_APP_CONTENT_AT_FIXTURE = PloneAppContentAT()
 PLONE_APP_CONTENT_AT_INTEGRATION_TESTING = IntegrationTesting(
diff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py
index 6f2f236..0462900 100644
--- a/plone/app/content/tests/test_widgets.py
+++ b/plone/app/content/tests/test_widgets.py
@@ -1,32 +1,34 @@
 # -*- coding: utf-8 -*-
-import os
 from mock import Mock
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import login
-from plone.app.testing import logout
-from plone.app.testing import setRoles
 from plone.app.content.browser import vocabulary
 from plone.app.content.browser.file import FileUploadView
 from plone.app.content.browser.query import QueryStringIndexOptions
 from plone.app.content.browser.vocabulary import VocabularyView
+from plone.app.content.testing import ExampleFunctionVocabulary
+from plone.app.content.testing import ExampleVocabulary
+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING
+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
 from plone.app.widgets.interfaces import IFieldPermissionChecker
-from plone.app.widgets.testing import ExampleFunctionVocabulary
-from plone.app.widgets.testing import ExampleVocabulary
-from plone.app.widgets.testing import PLONEAPPWIDGETS_INTEGRATION_TESTING
-from plone.app.widgets.testing import TestRequest
 from zope.component import getMultiAdapter
 from zope.component import provideAdapter
 from zope.component import provideUtility
 from zope.component.globalregistry import base
 from zope.globalrequest import setRequest
-from zope.interface import Interface
 from zope.interface import alsoProvides
+from zope.interface import Interface
 from zope.interface import noLongerProvides
+from zope.publisher.browser import TestRequest
 
 import json
+import os
 import transaction
 
+
 _dir = os.path.dirname(__file__)
 
 try:
@@ -67,7 +69,7 @@ def _disable_permission_checker(context):
 
 class BrowserTest(unittest.TestCase):
 
-    layer = PLONEAPPWIDGETS_INTEGRATION_TESTING
+    layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
 
     def setUp(self):
         self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
@@ -452,6 +454,18 @@ def testQueryStringConfiguration(self):
         # just test one so we know it's working...
         self.assertEqual(data['indexes']['sortable_title']['sortable'], True)
 
+
+class FunctionalBrowserTest(unittest.TestCase):
+
+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.request = TestRequest()
+        setRequest(self.request)
+        self.portal = self.layer['portal']
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
     def testFileUpload(self):
         view = FileUploadView(self.portal, self.request)
         from plone.namedfile.file import FileChunk
@@ -459,6 +473,8 @@ def testFileUpload(self):
         chunk.filename = 'test.xml'
         self.request.form['file'] = chunk
         self.request.REQUEST_METHOD = 'POST'
+        # the next calls plone.app.dexterity.factories and does a
+        # transaction.commit. Needs cleanup and FunctionalTesting layer.
         data = json.loads(view())
         self.assertEqual(data['url'], 'http://nohost/plone/test.xml')
         self.assertTrue(data['UID'] is not None)
@@ -473,6 +489,8 @@ def testFileUploadTxt(self):
         chunk.filename = 'test.txt'
         self.request.form['file'] = chunk
         self.request.REQUEST_METHOD = 'POST'
+        # the next calls plone.app.dexterity.factories and does a
+        # transaction.commit. Needs cleanup and FunctionalTesting layer.
         data = json.loads(view())
         self.assertEqual(data['url'], 'http://nohost/plone/test.txt')
         self.assertTrue(data['UID'] is not None)


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-03-29T12:36:19+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/1c2ec7d859d7dfff599936ffe4b365ed3e3322b4

Merge pull request #79 from plone/thet-testlayerfix

Fix test isolation problem

Files changed:
M CHANGES.rst
M plone/app/content/testing.py
M plone/app/content/tests/test_widgets.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dcfd57c..b4ab3a4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix test isolation problem and remove an unnecessary test dependency on ``plone.app.widgets``.
+  [thet]
 
 
 3.0.20 (2016-02-27)
diff --git a/plone/app/content/testing.py b/plone/app/content/testing.py
index 4e6172c..0362dd1 100644
--- a/plone/app/content/testing.py
+++ b/plone/app/content/testing.py
@@ -1,19 +1,62 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import FunctionalTesting
+from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import IntegrationTesting
-from plone.app.testing import FunctionalTesting
-from zope.configuration import xmlconfig
 from plone.testing import z2
+from Products.CMFCore.utils import getToolByName
+from zope.configuration import xmlconfig
+from zope.interface import directlyProvides
+from zope.schema.interfaces import IVocabularyFactory
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
+from zope.interface import implements
+
+
+class ExampleVocabulary(object):
+    implements(IVocabularyFactory)
+
+    def __call__(self, context, query=None):
+        items = [u'One', u'Two', u'Three']
+        tmp = SimpleVocabulary([
+            SimpleTerm(it.lower(), it.lower(), it)
+            for it in items
+            if query is None
+            or query.lower() in it.lower()
+        ])
+        tmp.test = 1
+        return tmp
 
 
-class PloneAppContent(PloneSandboxLayer):
+def ExampleFunctionVocabulary(context, query=None):
+    items = [u'First', u'Second', u'Third']
+    tmp = SimpleVocabulary([
+        SimpleTerm(it.lower(), it.lower(), it)
+        for it in items
+        if query is None
+        or query.lower() in it.lower()
+    ])
+    return tmp
+directlyProvides(ExampleFunctionVocabulary, IVocabularyFactory)
+
+
+class PloneAppContentBase(PloneSandboxLayer):
 
     defaultBases = (PLONE_FIXTURE, )
 
+    def setUpZope(self, app, configurationContext):
+        # Load ZCML
+        import plone.app.content
+        xmlconfig.file(
+            'configure.zcml',
+            plone.app.content,
+            context=configurationContext
+        )
+
+
+class PloneAppContent(PloneAppContentBase):
+
     USER_NAME = 'johndoe'
     USER_PASSWORD = 'secret'
     MEMBER_NAME = 'janedoe'
@@ -24,13 +67,6 @@ class PloneAppContent(PloneSandboxLayer):
     MANAGER_USER_NAME = 'manager'
     MANAGER_USER_PASSWORD = 'secret'
 
-    def setUpZope(self, app, configurationContext):
-        # Load ZCML
-        import plone.app.content
-        xmlconfig.file('configure.zcml',
-                       plone.app.content,
-                       context=configurationContext)
-
     def setUpPloneSite(self, portal):
         # Creates some users
         acl_users = getToolByName(portal, 'acl_users')
@@ -80,6 +116,9 @@ def setUpPloneSite(self, portal):
         super(PloneAppContentAT, self).setUpPloneSite(portal)
         self.applyProfile(portal, 'Products.ATContentTypes:default')
 
+
+PLONE_APP_CONTENT_BASE_FIXTURE = PloneAppContentBase()
+
 PLONE_APP_CONTENT_FIXTURE = PloneAppContent()
 PLONE_APP_CONTENT_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENT_FIXTURE, ),
@@ -88,14 +127,16 @@ def setUpPloneSite(self, portal):
     bases=(PLONE_APP_CONTENT_FIXTURE, ),
     name="PloneAppContent:Functional")
 
+
 # Dexterity test layers
 PLONE_APP_CONTENT_DX_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
+    bases=(PLONE_APP_CONTENT_BASE_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE, ),
     name="PloneAppContentDX:Integration")
 PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING = FunctionalTesting(
-    bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
+    bases=(PLONE_APP_CONTENT_BASE_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE, ),
     name="PloneAppContentDX:Functional")
 
+
 # AT test layers
 PLONE_APP_CONTENT_AT_FIXTURE = PloneAppContentAT()
 PLONE_APP_CONTENT_AT_INTEGRATION_TESTING = IntegrationTesting(
diff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py
index 6f2f236..0462900 100644
--- a/plone/app/content/tests/test_widgets.py
+++ b/plone/app/content/tests/test_widgets.py
@@ -1,32 +1,34 @@
 # -*- coding: utf-8 -*-
-import os
 from mock import Mock
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import TEST_USER_NAME
-from plone.app.testing import login
-from plone.app.testing import logout
-from plone.app.testing import setRoles
 from plone.app.content.browser import vocabulary
 from plone.app.content.browser.file import FileUploadView
 from plone.app.content.browser.query import QueryStringIndexOptions
 from plone.app.content.browser.vocabulary import VocabularyView
+from plone.app.content.testing import ExampleFunctionVocabulary
+from plone.app.content.testing import ExampleVocabulary
+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING
+from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
 from plone.app.widgets.interfaces import IFieldPermissionChecker
-from plone.app.widgets.testing import ExampleFunctionVocabulary
-from plone.app.widgets.testing import ExampleVocabulary
-from plone.app.widgets.testing import PLONEAPPWIDGETS_INTEGRATION_TESTING
-from plone.app.widgets.testing import TestRequest
 from zope.component import getMultiAdapter
 from zope.component import provideAdapter
 from zope.component import provideUtility
 from zope.component.globalregistry import base
 from zope.globalrequest import setRequest
-from zope.interface import Interface
 from zope.interface import alsoProvides
+from zope.interface import Interface
 from zope.interface import noLongerProvides
+from zope.publisher.browser import TestRequest
 
 import json
+import os
 import transaction
 
+
 _dir = os.path.dirname(__file__)
 
 try:
@@ -67,7 +69,7 @@ def _disable_permission_checker(context):
 
 class BrowserTest(unittest.TestCase):
 
-    layer = PLONEAPPWIDGETS_INTEGRATION_TESTING
+    layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING
 
     def setUp(self):
         self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
@@ -452,6 +454,18 @@ def testQueryStringConfiguration(self):
         # just test one so we know it's working...
         self.assertEqual(data['indexes']['sortable_title']['sortable'], True)
 
+
+class FunctionalBrowserTest(unittest.TestCase):
+
+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        self.request = TestRequest()
+        setRequest(self.request)
+        self.portal = self.layer['portal']
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+
     def testFileUpload(self):
         view = FileUploadView(self.portal, self.request)
         from plone.namedfile.file import FileChunk
@@ -459,6 +473,8 @@ def testFileUpload(self):
         chunk.filename = 'test.xml'
         self.request.form['file'] = chunk
         self.request.REQUEST_METHOD = 'POST'
+        # the next calls plone.app.dexterity.factories and does a
+        # transaction.commit. Needs cleanup and FunctionalTesting layer.
         data = json.loads(view())
         self.assertEqual(data['url'], 'http://nohost/plone/test.xml')
         self.assertTrue(data['UID'] is not None)
@@ -473,6 +489,8 @@ def testFileUploadTxt(self):
         chunk.filename = 'test.txt'
         self.request.form['file'] = chunk
         self.request.REQUEST_METHOD = 'POST'
+        # the next calls plone.app.dexterity.factories and does a
+        # transaction.commit. Needs cleanup and FunctionalTesting layer.
         data = json.loads(view())
         self.assertEqual(data['url'], 'http://nohost/plone/test.txt')
         self.assertTrue(data['UID'] is not None)


