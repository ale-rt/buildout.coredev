Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T21:35:10+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/3489a8c330dfc28b7cc5f9d9b499566fd54393c9

No longer test on python 2.6

Files changed:
M .travis.yml
M setup.py

diff --git a/.travis.yml b/.travis.yml
index 44055e6..fb6b81c 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -11,9 +11,6 @@ env:
 global:
   - secure: "nTXMNU2aYbCtvKD74PndF8Xm2h6IvsxPjr6vj45AxjXmaB7Wf5oGi/4b6ObV\nexBtUQkFnc+M0ThGyUznOCPi3YxcbTzsyhQYhHUtmtw/6QRyYgo4E0GLDItU\n37Ff6wpxl3NMMJTvpi6SOVUvIJUl3+cs+4bkMkS48RSFGg2rGmo="  # Coveralls.io token
 matrix:
-  include:
-    - python: 2.6
-      env: PLONE_VERSION=4.2
   fast_finish: true
 
 install:
diff --git a/setup.py b/setup.py
index 7cee917..f673e6d 100644
--- a/setup.py
+++ b/setup.py
@@ -64,7 +64,6 @@ def read(*rnames):
     classifiers=[
         'Environment :: Web Environment',
         'Framework :: Plone',
-        'Framework :: Plone :: 4.2',
         'Framework :: Plone :: 4.3',
         'Framework :: Plone :: 5.0',
         'Framework :: Plone :: 5.1',
@@ -72,7 +71,6 @@ def read(*rnames):
         'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',
         'Operating System :: OS Independent',
         'Programming Language :: Python',
-        'Programming Language :: Python :: 2.6',
         'Programming Language :: Python :: 2.7',
     ],
     platforms='Any',


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T21:41:23+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/890f64617e56fc78ba00eba38a3747c5b4a5eb6e

Remove unused scripts

Files changed:
M buildout.cfg

diff --git a/buildout.cfg b/buildout.cfg
index 5fb64f6..58df90b 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -7,7 +7,6 @@ package-extras = [test]
 test-eggs = Pillow
 parts +=
     omelette
-    scripts
     code-analysis
 
 # network speedup
@@ -23,12 +22,6 @@ allow-hosts =
 recipe = collective.recipe.omelette
 eggs = ${test:eggs}
 
-[scripts]
-recipe = z3c.recipe.scripts
-dependent-scripts = true
-interpreter = zopepy
-eggs = plone.api [develop]
-
 [code-analysis]
 recipe = plone.recipe.codeanalysis
 directory = ${buildout:directory}/src/plone/api


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T22:01:26+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/e959333daa02353a8855ac3a0d2f33548970102a

Minimal version pin updates

Files changed:
M buildout.cfg

diff --git a/buildout.cfg b/buildout.cfg
index 58df90b..9291d1d 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -34,9 +34,13 @@ debug-statements = True
 return-status-codes = True
 
 [versions]
-Sphinx = 1.1.3
-zc.buildout = 1.7.1
-zc.recipe.egg = 1.3.2
-zope.pagetemplate = 3.6.3
+flake8 = 2.6.2
+mccabe = 0.5.2
 plone.recipe.codeanalysis = 1.0b5
-mock = 1.0.1
+pycodestyle = 2.0.0
+pyflakes = 1.2.3
+zc.buildout = 2.5.3
+
+# Required by:
+# plone.recipe.codeanalysis==1.0b5
+zptlint = 0.2.4


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T22:01:53+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/be9f9377f36601991f39d6f62db6c27911bfe0b1

Run all layers for coverage report

Files changed:
M coverage.cfg

diff --git a/coverage.cfg b/coverage.cfg
index 76126b2..4c74013 100644
--- a/coverage.cfg
+++ b/coverage.cfg
@@ -17,11 +17,14 @@ recipe = zc.recipe.egg
 eggs = coverage
 initialization =
     include = '--source=${buildout:directory}/src'
-    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '--layer=PloneApiLayer:Integration']
+    sys.argv = sys.argv[:] + ['run', include, 'bin/test', ]
 
 [report]
 recipe = zc.recipe.egg
 eggs = coverage
 scripts = coverage=report
 initialization =
-    sys.argv = sys.argv[:] + ['html', '-i']    
+    sys.argv = sys.argv[:] + ['html', '-i']
+
+[versions]
+coverage = 4.2


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T22:02:30+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/dcbc8b11aadb46f33ae2f244ce20b1471263da52

Split testing and coverage

Do not use Make to run tests and coverage and run first the tests and later the coverage.

Files changed:
M .travis.yml

diff --git a/.travis.yml b/.travis.yml
index fb6b81c..a2ee573 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -17,18 +17,19 @@ install:
   - mkdir -p buildout-cache/eggs
   - mkdir -p buildout-cache/downloads
   - sed -ie "s#-4.3.x#-$PLONE_VERSION.x#" buildout.cfg
-  - make "bin/python"
-  - bin/python bootstrap.py
-  - bin/buildout annotate
-  - make version=$TRAVIS_PYTHON_VERSION .installed.cfg
+  - pip install -U zc.buildout setuptools==20.1.1
+  - buildout annotate
+  - buildout
 
 script:
   - bin/code-analysis
-  - make coverage
+  - bin/test
 
 after_success:
-- pip install -q coverage==3.6 coveralls
-- coveralls
+  - buildout -c coverage.cfg
+  - bin/coverage
+  - pip install -q coveralls
+  - coveralls
 
 notifications:
   irc:


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T22:03:35+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/71378475bb069dc7479ced92f2216316f60befcb

Update CHANGES

Files changed:
M docs/CHANGES.rst

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 2821a2f..2a9c5d8 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -9,6 +9,9 @@ Fixes:
 - Typo in the documentation.
   [ale-rt]
 
+- Fix travis and coveralls.
+  [gforcada]
+
 1.5 (2016-02-20)
 ----------------
 


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T22:07:26+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/c5208cafa3d0c940aad6a2777811e2e1d399930b

Cleanup, remove unused files

Files changed:
M setup.cfg
D Makefile
D bootstrap.py
D plone-4.2.x.cfg

diff --git a/Makefile b/Makefile
deleted file mode 100644
index 33445b2..0000000
--- a/Makefile
+++ /dev/null
@@ -1,48 +0,0 @@
-# convenience makefile to boostrap & run buildout
-# use `make options=-v` to run buildout with extra options
-
-version = 2.7
-python = bin/python
-options =
-
-all: docs tests
-
-coverage: htmlcov/index.html
-
-htmlcov/index.html: src/plone/api/*.py bin/coverage
-	@bin/coverage run --source=./src/plone/api/ --branch bin/test
-	@bin/coverage html -i
-	@touch $@
-	@echo "Coverage report was generated at '$@'."
-
-docs: docs/html/index.html
-
-docs/html/index.html: README.rst docs/*.rst docs/contribute/*.rst docs/api/*.rst src/plone/api/*.py bin/sphinx-build
-	bin/sphinx-build -W docs docs/html
-	@touch $@
-	@echo "Documentation was generated at '$@'."
-
-bin/sphinx-build: .installed.cfg
-	@touch $@
-
-.installed.cfg: bin/buildout buildout.cfg setup.py
-	bin/buildout $(options)
-
-bin/buildout: $(python) buildout.cfg bootstrap.py
-	$(python) bootstrap.py
-	@touch $@
-
-$(python):
-	virtualenv -p python$(version) --no-site-packages .
-	@touch $@
-
-tests: .installed.cfg
-	@bin/test
-	@bin/code-analysis
-
-clean:
-	@rm -rf .coverage .installed.cfg .mr.developer.cfg bin docs/html htmlcov \
-		parts develop-eggs src/plone.api.egg-info lib include .Python
-
-.PHONY: all coverage docs tests clean
-
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index 1cce2ce..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,277 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os, shutil, sys, tempfile, urllib, urllib2, subprocess
-from optparse import OptionParser
-
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c  # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    quote = str
-
-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
-stdout, stderr = subprocess.Popen(
-    [sys.executable, '-Sc',
-     'try:\n'
-     '    import ConfigParser\n'
-     'except ImportError:\n'
-     '    print 1\n'
-     'else:\n'
-     '    print 0\n'],
-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
-has_broken_dash_S = bool(int(stdout.strip()))
-
-# In order to be more robust in the face of system Pythons, we want to
-# run without site-packages loaded.  This is somewhat tricky, in
-# particular because Python 2.6's distutils imports site, so starting
-# with the -S flag is not sufficient.  However, we'll start with that:
-if not has_broken_dash_S and 'site' in sys.modules:
-    # We will restart with python -S.
-    args = sys.argv[:]
-    args[0:0] = [sys.executable, '-S']
-    args = map(quote, args)
-    os.execv(sys.executable, args)
-# Now we are running with -S.  We'll get the clean sys.path, import site
-# because distutils will do it later, and then reset the path and clean
-# out any namespace packages from site-packages that might have been
-# loaded by .pth files.
-clean_path = sys.path[:]
-import site  # imported because of its side effects
-sys.path[:] = clean_path
-for k, v in sys.modules.items():
-    if k in ('setuptools', 'pkg_resources') or (
-        hasattr(v, '__path__') and
-        len(v.__path__) == 1 and
-        not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
-        # This is a namespace package.  Remove it.
-        sys.modules.pop(k)
-
-is_jython = sys.platform.startswith('java')
-
-setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
-distribute_source = 'http://python-distribute.org/distribute_setup.py'
-
-
-# parsing arguments
-def normalize_to_url(option, opt_str, value, parser):
-    if value:
-        if '://' not in value:  # It doesn't smell like a URL.
-            value = 'file://%s' % (
-                urllib.pathname2url(
-                    os.path.abspath(os.path.expanduser(value))),)
-        if opt_str == '--download-base' and not value.endswith('/'):
-            # Download base needs a trailing slash to make the world happy.
-            value += '/'
-    else:
-        value = None
-    name = opt_str[2:].replace('-', '_')
-    setattr(parser.values, name, value)
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --setup-source and --download-base to point to
-local resources, you can keep this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="use_distribute", default=False,
-                   help="Use Distribute rather than Setuptools.")
-parser.add_option("--setup-source", action="callback", dest="setup_source",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or file location for the setup file. "
-                        "If you use Setuptools, this will default to " +
-                        setuptools_source + "; if you use Distribute, this "
-                        "will default to " + distribute_source + "."))
-parser.add_option("--download-base", action="callback", dest="download_base",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or directory for downloading "
-                        "zc.buildout and either Setuptools or Distribute. "
-                        "Defaults to PyPI."))
-parser.add_option("--eggs",
-                  help=("Specify a directory for storing eggs.  Defaults to "
-                        "a temporary directory that is deleted when the "
-                        "bootstrap script completes."))
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
-
-options, args = parser.parse_args()
-
-if options.eggs:
-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
-else:
-    eggs_dir = tempfile.mkdtemp()
-
-if options.setup_source is None:
-    if options.use_distribute:
-        options.setup_source = distribute_source
-    else:
-        options.setup_source = setuptools_source
-
-if options.accept_buildout_test_releases:
-    args.insert(0, 'buildout:accept-buildout-test-releases=true')
-
-try:
-    import pkg_resources
-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
-    if not hasattr(pkg_resources, '_distribute'):
-        raise ImportError
-except ImportError:
-    ez_code = urllib2.urlopen(
-        options.setup_source).read().replace('\r\n', '\n')
-    ez = {}
-    exec ez_code in ez
-    setup_args = dict(to_dir=eggs_dir, download_delay=0)
-    if options.download_base:
-        setup_args['download_base'] = options.download_base
-    if options.use_distribute:
-        setup_args['no_fake'] = True
-        if sys.version_info[:2] == (2, 4):
-            setup_args['version'] = '0.6.32'
-    ez['use_setuptools'](**setup_args)
-    if 'pkg_resources' in sys.modules:
-        reload(sys.modules['pkg_resources'])
-    import pkg_resources
-    # This does not (always?) update the default working set.  We will
-    # do it.
-    for path in sys.path:
-        if path not in pkg_resources.working_set.entries:
-            pkg_resources.working_set.add_entry(path)
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(eggs_dir)]
-
-if not has_broken_dash_S:
-    cmd.insert(1, '-S')
-
-find_links = options.download_base
-if not find_links:
-    find_links = os.environ.get('bootstrap-testing-find-links')
-if not find_links and options.accept_buildout_test_releases:
-    find_links = 'http://downloads.buildout.org/'
-if find_links:
-    cmd.extend(['-f', quote(find_links)])
-
-if options.use_distribute:
-    setup_requirement = 'distribute'
-else:
-    setup_requirement = 'setuptools'
-ws = pkg_resources.working_set
-setup_requirement_path = ws.find(
-    pkg_resources.Requirement.parse(setup_requirement)).location
-env = dict(
-    os.environ,
-    PYTHONPATH=setup_requirement_path)
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setup_requirement_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if distv >= pkg_resources.parse_version('2dev'):
-                continue
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-
-if version:
-    requirement += '=='+version
-else:
-    requirement += '<2dev'
-
-cmd.append(requirement)
-
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-if exitcode != 0:
-    sys.stdout.flush()
-    sys.stderr.flush()
-    print ("An error occurred when trying to install zc.buildout. "
-           "Look above this message for any errors that "
-           "were output by easy_install.")
-    sys.exit(exitcode)
-
-ws.add_entry(eggs_dir)
-ws.require(requirement)
-import zc.buildout.buildout
-
-# If there isn't already a command in the args, add bootstrap
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-
-# if -c was provided, we push it back into args for buildout's main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-if not options.eggs:  # clean up temporary egg directory
-    shutil.rmtree(eggs_dir)
diff --git a/plone-4.2.x.cfg b/plone-4.2.x.cfg
deleted file mode 100644
index 5853df5..0000000
--- a/plone-4.2.x.cfg
+++ /dev/null
@@ -1,5 +0,0 @@
-[versions]
-# Avoid getting a newer setuptools due to twine>=1.6.0, which would
-# lead to a Bad constraint when running buildout.
-twine = 1.5.0
-zest.releaser = 5.7
diff --git a/setup.cfg b/setup.cfg
index 4266360..927666e 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -2,5 +2,3 @@
 ignore =
     *.cfg
     .travis.yml
-    Makefile
-    bootstrap.py


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T22:12:18+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.api/commit/35a154e67eaba48baed88392e663df37d0b39a04

Pin setuptools

Files changed:
M .travis.yml
M buildout.cfg

diff --git a/.travis.yml b/.travis.yml
index a2ee573..717a83e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -17,7 +17,7 @@ install:
   - mkdir -p buildout-cache/eggs
   - mkdir -p buildout-cache/downloads
   - sed -ie "s#-4.3.x#-$PLONE_VERSION.x#" buildout.cfg
-  - pip install -U zc.buildout setuptools==20.1.1
+  - pip install -U zc.buildout setuptools==21.0.0
   - buildout annotate
   - buildout
 
diff --git a/buildout.cfg b/buildout.cfg
index 9291d1d..02bdfa7 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -39,6 +39,7 @@ mccabe = 0.5.2
 plone.recipe.codeanalysis = 1.0b5
 pycodestyle = 2.0.0
 pyflakes = 1.2.3
+setuptools = 21.0.0
 zc.buildout = 2.5.3
 
 # Required by:


Repository: plone.api


Branch: refs/heads/master
Date: 2016-10-29T22:33:40+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/0e30a49fd08f4a4a9423fa686cf0b87136d8a64b

Merge pull request #325 from plone/gforcada-patch-1

Fix travis and coveralls

Files changed:
M .travis.yml
M buildout.cfg
M coverage.cfg
M docs/CHANGES.rst
M setup.cfg
M setup.py
D Makefile
D bootstrap.py
D plone-4.2.x.cfg

diff --git a/.travis.yml b/.travis.yml
index 44055e6..717a83e 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -11,27 +11,25 @@ env:
 global:
   - secure: "nTXMNU2aYbCtvKD74PndF8Xm2h6IvsxPjr6vj45AxjXmaB7Wf5oGi/4b6ObV\nexBtUQkFnc+M0ThGyUznOCPi3YxcbTzsyhQYhHUtmtw/6QRyYgo4E0GLDItU\n37Ff6wpxl3NMMJTvpi6SOVUvIJUl3+cs+4bkMkS48RSFGg2rGmo="  # Coveralls.io token
 matrix:
-  include:
-    - python: 2.6
-      env: PLONE_VERSION=4.2
   fast_finish: true
 
 install:
   - mkdir -p buildout-cache/eggs
   - mkdir -p buildout-cache/downloads
   - sed -ie "s#-4.3.x#-$PLONE_VERSION.x#" buildout.cfg
-  - make "bin/python"
-  - bin/python bootstrap.py
-  - bin/buildout annotate
-  - make version=$TRAVIS_PYTHON_VERSION .installed.cfg
+  - pip install -U zc.buildout setuptools==21.0.0
+  - buildout annotate
+  - buildout
 
 script:
   - bin/code-analysis
-  - make coverage
+  - bin/test
 
 after_success:
-- pip install -q coverage==3.6 coveralls
-- coveralls
+  - buildout -c coverage.cfg
+  - bin/coverage
+  - pip install -q coveralls
+  - coveralls
 
 notifications:
   irc:
diff --git a/Makefile b/Makefile
deleted file mode 100644
index 33445b2..0000000
--- a/Makefile
+++ /dev/null
@@ -1,48 +0,0 @@
-# convenience makefile to boostrap & run buildout
-# use `make options=-v` to run buildout with extra options
-
-version = 2.7
-python = bin/python
-options =
-
-all: docs tests
-
-coverage: htmlcov/index.html
-
-htmlcov/index.html: src/plone/api/*.py bin/coverage
-	@bin/coverage run --source=./src/plone/api/ --branch bin/test
-	@bin/coverage html -i
-	@touch $@
-	@echo "Coverage report was generated at '$@'."
-
-docs: docs/html/index.html
-
-docs/html/index.html: README.rst docs/*.rst docs/contribute/*.rst docs/api/*.rst src/plone/api/*.py bin/sphinx-build
-	bin/sphinx-build -W docs docs/html
-	@touch $@
-	@echo "Documentation was generated at '$@'."
-
-bin/sphinx-build: .installed.cfg
-	@touch $@
-
-.installed.cfg: bin/buildout buildout.cfg setup.py
-	bin/buildout $(options)
-
-bin/buildout: $(python) buildout.cfg bootstrap.py
-	$(python) bootstrap.py
-	@touch $@
-
-$(python):
-	virtualenv -p python$(version) --no-site-packages .
-	@touch $@
-
-tests: .installed.cfg
-	@bin/test
-	@bin/code-analysis
-
-clean:
-	@rm -rf .coverage .installed.cfg .mr.developer.cfg bin docs/html htmlcov \
-		parts develop-eggs src/plone.api.egg-info lib include .Python
-
-.PHONY: all coverage docs tests clean
-
diff --git a/bootstrap.py b/bootstrap.py
deleted file mode 100644
index 1cce2ce..0000000
--- a/bootstrap.py
+++ /dev/null
@@ -1,277 +0,0 @@
-##############################################################################
-#
-# Copyright (c) 2006 Zope Foundation and Contributors.
-# All Rights Reserved.
-#
-# This software is subject to the provisions of the Zope Public License,
-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
-# FOR A PARTICULAR PURPOSE.
-#
-##############################################################################
-"""Bootstrap a buildout-based project
-
-Simply run this script in a directory containing a buildout.cfg.
-The script accepts buildout command-line options, so you can
-use the -c option to specify an alternate configuration file.
-"""
-
-import os, shutil, sys, tempfile, urllib, urllib2, subprocess
-from optparse import OptionParser
-
-if sys.platform == 'win32':
-    def quote(c):
-        if ' ' in c:
-            return '"%s"' % c  # work around spawn lamosity on windows
-        else:
-            return c
-else:
-    quote = str
-
-# See zc.buildout.easy_install._has_broken_dash_S for motivation and comments.
-stdout, stderr = subprocess.Popen(
-    [sys.executable, '-Sc',
-     'try:\n'
-     '    import ConfigParser\n'
-     'except ImportError:\n'
-     '    print 1\n'
-     'else:\n'
-     '    print 0\n'],
-    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
-has_broken_dash_S = bool(int(stdout.strip()))
-
-# In order to be more robust in the face of system Pythons, we want to
-# run without site-packages loaded.  This is somewhat tricky, in
-# particular because Python 2.6's distutils imports site, so starting
-# with the -S flag is not sufficient.  However, we'll start with that:
-if not has_broken_dash_S and 'site' in sys.modules:
-    # We will restart with python -S.
-    args = sys.argv[:]
-    args[0:0] = [sys.executable, '-S']
-    args = map(quote, args)
-    os.execv(sys.executable, args)
-# Now we are running with -S.  We'll get the clean sys.path, import site
-# because distutils will do it later, and then reset the path and clean
-# out any namespace packages from site-packages that might have been
-# loaded by .pth files.
-clean_path = sys.path[:]
-import site  # imported because of its side effects
-sys.path[:] = clean_path
-for k, v in sys.modules.items():
-    if k in ('setuptools', 'pkg_resources') or (
-        hasattr(v, '__path__') and
-        len(v.__path__) == 1 and
-        not os.path.exists(os.path.join(v.__path__[0], '__init__.py'))):
-        # This is a namespace package.  Remove it.
-        sys.modules.pop(k)
-
-is_jython = sys.platform.startswith('java')
-
-setuptools_source = 'http://peak.telecommunity.com/dist/ez_setup.py'
-distribute_source = 'http://python-distribute.org/distribute_setup.py'
-
-
-# parsing arguments
-def normalize_to_url(option, opt_str, value, parser):
-    if value:
-        if '://' not in value:  # It doesn't smell like a URL.
-            value = 'file://%s' % (
-                urllib.pathname2url(
-                    os.path.abspath(os.path.expanduser(value))),)
-        if opt_str == '--download-base' and not value.endswith('/'):
-            # Download base needs a trailing slash to make the world happy.
-            value += '/'
-    else:
-        value = None
-    name = opt_str[2:].replace('-', '_')
-    setattr(parser.values, name, value)
-
-usage = '''\
-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
-
-Bootstraps a buildout-based project.
-
-Simply run this script in a directory containing a buildout.cfg, using the
-Python that you want bin/buildout to use.
-
-Note that by using --setup-source and --download-base to point to
-local resources, you can keep this script from going over the network.
-'''
-
-parser = OptionParser(usage=usage)
-parser.add_option("-v", "--version", dest="version",
-                          help="use a specific zc.buildout version")
-parser.add_option("-d", "--distribute",
-                   action="store_true", dest="use_distribute", default=False,
-                   help="Use Distribute rather than Setuptools.")
-parser.add_option("--setup-source", action="callback", dest="setup_source",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or file location for the setup file. "
-                        "If you use Setuptools, this will default to " +
-                        setuptools_source + "; if you use Distribute, this "
-                        "will default to " + distribute_source + "."))
-parser.add_option("--download-base", action="callback", dest="download_base",
-                  callback=normalize_to_url, nargs=1, type="string",
-                  help=("Specify a URL or directory for downloading "
-                        "zc.buildout and either Setuptools or Distribute. "
-                        "Defaults to PyPI."))
-parser.add_option("--eggs",
-                  help=("Specify a directory for storing eggs.  Defaults to "
-                        "a temporary directory that is deleted when the "
-                        "bootstrap script completes."))
-parser.add_option("-t", "--accept-buildout-test-releases",
-                  dest='accept_buildout_test_releases',
-                  action="store_true", default=False,
-                  help=("Normally, if you do not specify a --version, the "
-                        "bootstrap script and buildout gets the newest "
-                        "*final* versions of zc.buildout and its recipes and "
-                        "extensions for you.  If you use this flag, "
-                        "bootstrap and buildout will get the newest releases "
-                        "even if they are alphas or betas."))
-parser.add_option("-c", None, action="store", dest="config_file",
-                   help=("Specify the path to the buildout configuration "
-                         "file to be used."))
-
-options, args = parser.parse_args()
-
-if options.eggs:
-    eggs_dir = os.path.abspath(os.path.expanduser(options.eggs))
-else:
-    eggs_dir = tempfile.mkdtemp()
-
-if options.setup_source is None:
-    if options.use_distribute:
-        options.setup_source = distribute_source
-    else:
-        options.setup_source = setuptools_source
-
-if options.accept_buildout_test_releases:
-    args.insert(0, 'buildout:accept-buildout-test-releases=true')
-
-try:
-    import pkg_resources
-    import setuptools  # A flag.  Sometimes pkg_resources is installed alone.
-    if not hasattr(pkg_resources, '_distribute'):
-        raise ImportError
-except ImportError:
-    ez_code = urllib2.urlopen(
-        options.setup_source).read().replace('\r\n', '\n')
-    ez = {}
-    exec ez_code in ez
-    setup_args = dict(to_dir=eggs_dir, download_delay=0)
-    if options.download_base:
-        setup_args['download_base'] = options.download_base
-    if options.use_distribute:
-        setup_args['no_fake'] = True
-        if sys.version_info[:2] == (2, 4):
-            setup_args['version'] = '0.6.32'
-    ez['use_setuptools'](**setup_args)
-    if 'pkg_resources' in sys.modules:
-        reload(sys.modules['pkg_resources'])
-    import pkg_resources
-    # This does not (always?) update the default working set.  We will
-    # do it.
-    for path in sys.path:
-        if path not in pkg_resources.working_set.entries:
-            pkg_resources.working_set.add_entry(path)
-
-cmd = [quote(sys.executable),
-       '-c',
-       quote('from setuptools.command.easy_install import main; main()'),
-       '-mqNxd',
-       quote(eggs_dir)]
-
-if not has_broken_dash_S:
-    cmd.insert(1, '-S')
-
-find_links = options.download_base
-if not find_links:
-    find_links = os.environ.get('bootstrap-testing-find-links')
-if not find_links and options.accept_buildout_test_releases:
-    find_links = 'http://downloads.buildout.org/'
-if find_links:
-    cmd.extend(['-f', quote(find_links)])
-
-if options.use_distribute:
-    setup_requirement = 'distribute'
-else:
-    setup_requirement = 'setuptools'
-ws = pkg_resources.working_set
-setup_requirement_path = ws.find(
-    pkg_resources.Requirement.parse(setup_requirement)).location
-env = dict(
-    os.environ,
-    PYTHONPATH=setup_requirement_path)
-
-requirement = 'zc.buildout'
-version = options.version
-if version is None and not options.accept_buildout_test_releases:
-    # Figure out the most recent final version of zc.buildout.
-    import setuptools.package_index
-    _final_parts = '*final-', '*final'
-
-    def _final_version(parsed_version):
-        for part in parsed_version:
-            if (part[:1] == '*') and (part not in _final_parts):
-                return False
-        return True
-    index = setuptools.package_index.PackageIndex(
-        search_path=[setup_requirement_path])
-    if find_links:
-        index.add_find_links((find_links,))
-    req = pkg_resources.Requirement.parse(requirement)
-    if index.obtain(req) is not None:
-        best = []
-        bestv = None
-        for dist in index[req.project_name]:
-            distv = dist.parsed_version
-            if distv >= pkg_resources.parse_version('2dev'):
-                continue
-            if _final_version(distv):
-                if bestv is None or distv > bestv:
-                    best = [dist]
-                    bestv = distv
-                elif distv == bestv:
-                    best.append(dist)
-        if best:
-            best.sort()
-            version = best[-1].version
-
-if version:
-    requirement += '=='+version
-else:
-    requirement += '<2dev'
-
-cmd.append(requirement)
-
-if is_jython:
-    import subprocess
-    exitcode = subprocess.Popen(cmd, env=env).wait()
-else:  # Windows prefers this, apparently; otherwise we would prefer subprocess
-    exitcode = os.spawnle(*([os.P_WAIT, sys.executable] + cmd + [env]))
-if exitcode != 0:
-    sys.stdout.flush()
-    sys.stderr.flush()
-    print ("An error occurred when trying to install zc.buildout. "
-           "Look above this message for any errors that "
-           "were output by easy_install.")
-    sys.exit(exitcode)
-
-ws.add_entry(eggs_dir)
-ws.require(requirement)
-import zc.buildout.buildout
-
-# If there isn't already a command in the args, add bootstrap
-if not [a for a in args if '=' not in a]:
-    args.append('bootstrap')
-
-
-# if -c was provided, we push it back into args for buildout's main function
-if options.config_file is not None:
-    args[0:0] = ['-c', options.config_file]
-
-zc.buildout.buildout.main(args)
-if not options.eggs:  # clean up temporary egg directory
-    shutil.rmtree(eggs_dir)
diff --git a/buildout.cfg b/buildout.cfg
index 5fb64f6..02bdfa7 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -7,7 +7,6 @@ package-extras = [test]
 test-eggs = Pillow
 parts +=
     omelette
-    scripts
     code-analysis
 
 # network speedup
@@ -23,12 +22,6 @@ allow-hosts =
 recipe = collective.recipe.omelette
 eggs = ${test:eggs}
 
-[scripts]
-recipe = z3c.recipe.scripts
-dependent-scripts = true
-interpreter = zopepy
-eggs = plone.api [develop]
-
 [code-analysis]
 recipe = plone.recipe.codeanalysis
 directory = ${buildout:directory}/src/plone/api
@@ -41,9 +34,14 @@ debug-statements = True
 return-status-codes = True
 
 [versions]
-Sphinx = 1.1.3
-zc.buildout = 1.7.1
-zc.recipe.egg = 1.3.2
-zope.pagetemplate = 3.6.3
+flake8 = 2.6.2
+mccabe = 0.5.2
 plone.recipe.codeanalysis = 1.0b5
-mock = 1.0.1
+pycodestyle = 2.0.0
+pyflakes = 1.2.3
+setuptools = 21.0.0
+zc.buildout = 2.5.3
+
+# Required by:
+# plone.recipe.codeanalysis==1.0b5
+zptlint = 0.2.4
diff --git a/coverage.cfg b/coverage.cfg
index 76126b2..4c74013 100644
--- a/coverage.cfg
+++ b/coverage.cfg
@@ -17,11 +17,14 @@ recipe = zc.recipe.egg
 eggs = coverage
 initialization =
     include = '--source=${buildout:directory}/src'
-    sys.argv = sys.argv[:] + ['run', include, 'bin/test', '--layer=PloneApiLayer:Integration']
+    sys.argv = sys.argv[:] + ['run', include, 'bin/test', ]
 
 [report]
 recipe = zc.recipe.egg
 eggs = coverage
 scripts = coverage=report
 initialization =
-    sys.argv = sys.argv[:] + ['html', '-i']    
+    sys.argv = sys.argv[:] + ['html', '-i']
+
+[versions]
+coverage = 4.2
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 2821a2f..2a9c5d8 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -9,6 +9,9 @@ Fixes:
 - Typo in the documentation.
   [ale-rt]
 
+- Fix travis and coveralls.
+  [gforcada]
+
 1.5 (2016-02-20)
 ----------------
 
diff --git a/plone-4.2.x.cfg b/plone-4.2.x.cfg
deleted file mode 100644
index 5853df5..0000000
--- a/plone-4.2.x.cfg
+++ /dev/null
@@ -1,5 +0,0 @@
-[versions]
-# Avoid getting a newer setuptools due to twine>=1.6.0, which would
-# lead to a Bad constraint when running buildout.
-twine = 1.5.0
-zest.releaser = 5.7
diff --git a/setup.cfg b/setup.cfg
index 4266360..927666e 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -2,5 +2,3 @@
 ignore =
     *.cfg
     .travis.yml
-    Makefile
-    bootstrap.py
diff --git a/setup.py b/setup.py
index 7cee917..f673e6d 100644
--- a/setup.py
+++ b/setup.py
@@ -64,7 +64,6 @@ def read(*rnames):
     classifiers=[
         'Environment :: Web Environment',
         'Framework :: Plone',
-        'Framework :: Plone :: 4.2',
         'Framework :: Plone :: 4.3',
         'Framework :: Plone :: 5.0',
         'Framework :: Plone :: 5.1',
@@ -72,7 +71,6 @@ def read(*rnames):
         'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',
         'Operating System :: OS Independent',
         'Programming Language :: Python',
-        'Programming Language :: Python :: 2.6',
         'Programming Language :: Python :: 2.7',
     ],
     platforms='Any',


