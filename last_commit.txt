Repository: plone.subrequest


Branch: refs/heads/master
Date: 2016-04-19T22:22:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/d737b45332072e99bcaba3bda897099b26882b19

isort imports

Files changed:
A setup.cfg
M plone/subrequest/__init__.py
M plone/subrequest/interfaces.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.py

diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index 26e4ea7..36840fd 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -2,21 +2,25 @@
 from AccessControl import getSecurityManager
 from AccessControl.SecurityManagement import setSecurityManager
 from Acquisition import aq_base
-from ZPublisher.BaseRequest import RequestContainer
-from ZPublisher.Publish import dont_publish_class
-from ZPublisher.Publish import missing_name
-from ZPublisher.mapply import mapply
 from cStringIO import StringIO
 from logging import getLogger
 from plone.subrequest.interfaces import ISubRequest
 from plone.subrequest.subresponse import SubResponse
 from posixpath import normpath
 from urllib import unquote  # Python2.4 does not have urlparse.unquote
-from urlparse import urlsplit, urljoin
-from zope.globalrequest import getRequest, setRequest
+from urlparse import urljoin
+from urlparse import urlsplit
+from zope.globalrequest import getRequest
+from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
+from ZPublisher.BaseRequest import RequestContainer
+from ZPublisher.mapply import mapply
+from ZPublisher.Publish import dont_publish_class
+from ZPublisher.Publish import missing_name
+
 import re
 
+
 try:
     from zope.site.hooks import getSite, setSite
 except ImportError:
diff --git a/plone/subrequest/interfaces.py b/plone/subrequest/interfaces.py
index 827ce8c..4bd8f0c 100644
--- a/plone/subrequest/interfaces.py
+++ b/plone/subrequest/interfaces.py
@@ -1,5 +1,6 @@
 from zope.publisher.interfaces.browser import IBrowserRequest
 
+
 class ISubRequest(IBrowserRequest):
     """Marker for sub-requests.
     """
diff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py
index d8c84a9..83b2daa 100644
--- a/plone/subrequest/subresponse.py
+++ b/plone/subrequest/subresponse.py
@@ -1,6 +1,8 @@
 # -*- coding: utf-8 -*-
 from ZPublisher.HTTPResponse import HTTPResponse
 from ZPublisher.Iterators import IStreamIterator
+
+
 try:
     from plone.app.blob.iterators import BlobStreamIterator
 except ImportError:
diff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py
index 6a3ba0d..ad70420 100644
--- a/plone/subrequest/testing.py
+++ b/plone/subrequest/testing.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser import BrowserView
 from five.localsitemanager import make_site
 from plone.subrequest import subrequest
 from plone.testing import Layer
 from plone.testing import z2
 from plone.testing import zca
 from plone.testing import zodb
+from Products.Five.browser import BrowserView
 from zope.globalrequest import setRequest
 
 
@@ -166,4 +166,3 @@ def testTearDown(self):
     bases=(PLONE_SUBREQEST_FIXTURE,),
     name="PloneSubrequest:Functional"
 )
-
diff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py
index 5ee13aa..544dea6 100644
--- a/plone/subrequest/tests.py
+++ b/plone/subrequest/tests.py
@@ -5,6 +5,7 @@
 from plone.testing import z2
 from zope.globalrequest import getRequest
 from zope.site.hooks import getSite
+
 import manuel.doctest
 import manuel.testcase
 import manuel.testing
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..2bcb643
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,6 @@
+[isort]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
diff --git a/setup.py b/setup.py
index bce6db4..b6a614f 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,9 @@
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 import os.path
-from setuptools import setup, find_packages
+
 
 version = '1.6.12.dev0'
 
@@ -56,4 +60,4 @@
     [z3c.autoinclude.plugin]
     target = plone
     """,
-    )
+)


Repository: plone.subrequest


Branch: refs/heads/master
Date: 2016-04-19T22:22:02+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/23d67099e7cb6aa0a6c5e5f1d696441ec020cd5d

autopep8 -ir *

Files changed:
M plone/subrequest/__init__.py
M plone/subrequest/testing.py

diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index 36840fd..453b41c 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -32,6 +32,7 @@
 except ImportError:
     SAFE_WRITE_KEY = 'plone.protect.safe_oids'
     from zope.interface import Interface
+
     class IDisableCSRFProtection(Interface):
         pass
 
@@ -46,7 +47,7 @@ class IDisableCSRFProtection(Interface):
     'HTTP_IF_NONE_MATCH',
     'HTTP_IF_RANGE',
     'HTTP_RANGE',  # Not strictly a conditional header, but scrub it anyway
-    ]
+]
 
 OTHER_IGNORE = set([
     'ACTUAL_URL',
@@ -63,7 +64,7 @@ class IDisableCSRFProtection(Interface):
     'VirtualRootPhysicalPath',
     'method',
     'traverse_subpath',
-    ])
+])
 
 OTHER_IGNORE_RE = re.compile(r'^(?:BASE|URL)\d+$')
 
diff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py
index ad70420..bbe3ca6 100644
--- a/plone/subrequest/testing.py
+++ b/plone/subrequest/testing.py
@@ -27,6 +27,7 @@ def __call__(self):
 
 
 class URLView(BrowserView):
+
     def __call__(self):
         url = self.context.absolute_url()
         # The absolute url is expected to be an encoded string, not unicode.
@@ -35,6 +36,7 @@ def __call__(self):
 
 
 class ResponseWriteView(BrowserView):
+
     def __call__(self):
         response = self.request.response
         response.write('Some data.\n')
@@ -42,16 +44,19 @@ def __call__(self):
 
 
 class ErrorView(BrowserView):
+
     def __call__(self):
         raise Exception('An error')
 
 
 class RootView(BrowserView):
+
     def __call__(self):
         return 'Root: %s' % self.context.absolute_url()
 
 
 class SubrequestView(BrowserView):
+
     def __call__(self):
         url = self.request.form.get('url')
         if url is None:
@@ -147,6 +152,7 @@ def tearDown(self):
 
 
 class PloneSubrequestLifecycle(z2.IntegrationTesting):
+
     def testSetUp(self):
         super(PloneSubrequestLifecycle, self).testSetUp()
         request = self['request']


Repository: plone.subrequest


Branch: refs/heads/master
Date: 2016-04-19T22:26:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/b061c1df6e91d4ed7e9bdbe72aa0828c966dc732

manual cleanup

Files changed:
M CHANGES.rst
M plone/subrequest/__init__.py
M plone/subrequest/interfaces.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6e24336..34cf5f6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Fixes:
   Fixed by only adding new oids, not already known by parent request.
   [jensens]
 
+- Housekeeping: isort imports, autopep8, minor manual cleanup (no zope.app. imports). 
+  [jensens]
+
 
 1.6.11 (2015-09-07)
 -------------------
diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index 453b41c..ec37844 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -13,6 +13,8 @@
 from zope.globalrequest import getRequest
 from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
+from zope.site.hooks import getSite
+from zope.site.hooks import setSite
 from ZPublisher.BaseRequest import RequestContainer
 from ZPublisher.mapply import mapply
 from ZPublisher.Publish import dont_publish_class
@@ -22,11 +24,6 @@
 
 
 try:
-    from zope.site.hooks import getSite, setSite
-except ImportError:
-    from zope.app.component.hooks import getSite, setSite
-
-try:
     from plone.protect.auto import SAFE_WRITE_KEY
     from plone.protect.interfaces import IDisableCSRFProtection
 except ImportError:
@@ -68,17 +65,17 @@ class IDisableCSRFProtection(Interface):
 
 OTHER_IGNORE_RE = re.compile(r'^(?:BASE|URL)\d+$')
 
-logger = getLogger("plone.subrequest")
+logger = getLogger('plone.subrequest')
 
 
 def subrequest(url, root=None, stdout=None):
-    assert url is not None, "You must pass a url"
+    assert url is not None, 'You must pass a url'
     if isinstance(url, unicode):
         url = url.encode('utf-8')
     _, _, path, query, _ = urlsplit(url)
     parent_request = getRequest()
     assert parent_request is not None, \
-        "Unable to get request, perhaps zope.globalrequest is not configured."
+        'Unable to get request, perhaps zope.globalrequest is not configured.'
     parent_site = getSite()
     security_manager = getSecurityManager()
     parent_app = parent_request.PARENTS[-1]
@@ -94,9 +91,13 @@ def subrequest(url, root=None, stdout=None):
             if root is None:
                 path = root_path + path
             else:
-                path = '%s/%s%s' % (root_path, root.virtual_url_path(), path)
+                path = '{0}/{1}{2}'.format(
+                    root_path,
+                    root.virtual_url_path(),
+                    path
+                )
         elif root is not None:
-            path = '/%s%s' % (root.virtual_url_path(), path)
+            path = '/{0}{1}'.format(root.virtual_url_path(), path)
     else:
         try:
             parent_url = parent_request['URL']
@@ -140,20 +141,23 @@ def subrequest(url, root=None, stdout=None):
         try:
             request.processInputs()
             traversed = request.traverse(path)
-            result = mapply(traversed, positional=request.args,
-                            keyword=request,
-                            debug=None,
-                            maybe=1,
-                            missing_name=missing_name,
-                            handle_class=dont_publish_class,
-                            context=request,
-                            bind=1)
+            result = mapply(
+                traversed,
+                positional=request.args,
+                keyword=request,
+                debug=None,
+                maybe=1,
+                missing_name=missing_name,
+                handle_class=dont_publish_class,
+                context=request,
+                bind=1
+            )
             if result is not response:
                 response.setBody(result)
             for key, value in request.response.cookies.items():
                 parent_request.response.cookies[key] = value
-        except:
-            logger.exception("Error handling subrequest to %s" % url)
+        except Exception:
+            logger.exception('Error handling subrequest to {0}'.format(url))
             response.exception()
         return response
     finally:
diff --git a/plone/subrequest/interfaces.py b/plone/subrequest/interfaces.py
index 4bd8f0c..7eccbfb 100644
--- a/plone/subrequest/interfaces.py
+++ b/plone/subrequest/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.publisher.interfaces.browser import IBrowserRequest
 
 
diff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py
index bbe3ca6..72baaaa 100644
--- a/plone/subrequest/testing.py
+++ b/plone/subrequest/testing.py
@@ -52,7 +52,7 @@ def __call__(self):
 class RootView(BrowserView):
 
     def __call__(self):
-        return 'Root: %s' % self.context.absolute_url()
+        return 'Root: {0}'.format(self.context.absolute_url())
 
 
 class SubrequestView(BrowserView):
@@ -89,9 +89,8 @@ def __call__(self):
         from ZODB.blob import Blob
         from plone.app.blob.iterators import BlobStreamIterator
         myblob = Blob()
-        f = myblob.open("w")
-        f.write("Hi, Blob!")
-        f.close()
+        with myblob.open('w') as fd:
+            fd.write('Hi, Blob!')
         return BlobStreamIterator(myblob)
 
 
@@ -166,9 +165,9 @@ def testTearDown(self):
 
 INTEGRATION_TESTING = PloneSubrequestLifecycle(
     bases=(PLONE_SUBREQEST_FIXTURE,),
-    name="PloneSubrequest:Integration"
+    name='PloneSubrequest:Integration'
 )
 FUNCTIONAL_TESTING = z2.FunctionalTesting(
     bases=(PLONE_SUBREQEST_FIXTURE,),
-    name="PloneSubrequest:Functional"
+    name='PloneSubrequest:Functional'
 )
diff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py
index 544dea6..ac1d45d 100644
--- a/plone/subrequest/tests.py
+++ b/plone/subrequest/tests.py
@@ -20,8 +20,8 @@ def traverse(url):
     return request
 
 VH_TPL = (
-    "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot"
-    "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/%s"
+    '/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot'
+    '/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}'
 )
 NOHOST_VH_TPL = 'http://nohost' + VH_TPL
 
@@ -39,24 +39,24 @@ def test_absolute(self):
     def test_virtual_hosting(self):
         parts = ('folder1', 'folder1A/@@url')
         expect = 'folder1A'
-        url = NOHOST_VH_TPL % parts
-        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/%s' % expect
+        url = NOHOST_VH_TPL.format(*parts)
+        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/{0}'.format(expect)
         self.browser.open(url)
         self.assertEqual(self.browser.contents, expect_url)
 
     def test_virtual_hosting_relative(self):
         parts = ('folder1', 'folder1A?url=folder1Ai/@@url')
         expect = 'folder1A/folder1Ai'
-        url = NOHOST_VH_TPL % parts
-        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/%s' % expect
+        url = NOHOST_VH_TPL.format(*parts)
+        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/{0}'.format(expect)
         self.browser.open(url)
         self.assertEqual(self.browser.contents, expect_url)
 
     def test_virtual_hosting_absolute(self):
         parts = ('folder1', 'folder1A?url=/folder1B/@@url')
         expect = 'folder1B'
-        url = NOHOST_VH_TPL % parts
-        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/%s' % expect
+        url = NOHOST_VH_TPL.format(*parts)
+        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/{0}'.format(expect)
         self.browser.open(url)
         self.assertEqual(self.browser.contents, expect_url)
 
@@ -94,7 +94,7 @@ def test_root(self):
         )
 
     def test_virtual_hosting(self):
-        url = VH_TPL % ('folder1', 'folder1A/@@url')
+        url = VH_TPL.format('folder1', 'folder1A/@@url')
         response = subrequest(url)
         self.assertEqual(
             response.body,
@@ -102,7 +102,7 @@ def test_virtual_hosting(self):
         )
 
     def test_virtual_hosting_unicode(self):
-        url = VH_TPL % ('folder1', 'folder1A/@@url')
+        url = VH_TPL.format('folder1', 'folder1A/@@url')
         response = subrequest(url)
         self.assertEqual(
             response.body,
@@ -110,7 +110,7 @@ def test_virtual_hosting_unicode(self):
         )
 
     def test_virtual_hosting_relative(self):
-        url = VH_TPL % ('folder1', 'folder1A?url=folder1B/@@url')
+        url = VH_TPL.format('folder1', 'folder1A?url=folder1B/@@url')
         response = subrequest(url)
         self.assertEqual(
             response.body,
@@ -123,7 +123,7 @@ def test_not_found(self):
 
     def test_virtual_host_root(self):
         parts = ('folder1', 'folder1A/@@url')
-        url = VH_TPL % parts
+        url = VH_TPL.format(*parts)
         traverse(url)
         response = subrequest('/folder1B/@@url')
         self.assertEqual(
@@ -133,7 +133,7 @@ def test_virtual_host_root(self):
 
     def test_virtual_host_root_with_root(self):
         parts = ('folder1', 'folder1A/@@url')
-        url = VH_TPL % parts
+        url = VH_TPL.format(*parts)
         traverse(url)
         app = self.layer['app']
         response = subrequest('/folder1Ai/@@url', root=app.folder1.folder1A)
@@ -145,8 +145,8 @@ def test_virtual_host_root_with_root(self):
     def test_virtual_host_space(self):
         parts = ('folder2', 'folder2A/folder2Ai space/@@url')
         url = (
-            "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/%s" %
-            parts
+            '/VirtualHostBase/http/example.org:80/'
+            '{0}/VirtualHostRoot/{1}'.format(*parts)
         )
         traverse(url)
         app = self.layer['app']
@@ -158,8 +158,8 @@ def test_virtual_host_space(self):
 
     def test_virtual_host_root_at_root(self):
         url = (
-            "/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/"
-            "_vh_fizz/_vh_buzz/_vh_fizzbuzz"
+            '/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/'
+            '_vh_fizz/_vh_buzz/_vh_fizzbuzz'
         )
         traverse(url)
         response = subrequest('/folder1B/@@url')
@@ -170,8 +170,8 @@ def test_virtual_host_root_at_root(self):
 
     def test_virtual_host_root_at_root_trailing(self):
         url = (
-            "/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/"
-            "_vh_fizz/_vh_buzz/_vh_fizzbuzz/"
+            '/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/'
+            '_vh_fizz/_vh_buzz/_vh_fizzbuzz/'
         )
         traverse(url)
         response = subrequest('/folder1B/@@url')
@@ -182,8 +182,8 @@ def test_virtual_host_root_at_root_trailing(self):
 
     def test_virtual_host_with_root_double_slash(self):
         url = (
-            "/VirtualHostBase/http/example.org:80/VirtualHostRoot/"
-            "_vh_fizz/folder1/folder2//folder2A"
+            '/VirtualHostBase/http/example.org:80/VirtualHostRoot/'
+            '_vh_fizz/folder1/folder2//folder2A'
         )
         traverse(url)
         root = self.layer['app'].folder1
@@ -229,7 +229,7 @@ def test_stream_iterator(self):
         request = getRequest()
         request.response.__class__ = ZServerHTTPResponse
         response = subrequest('/@@stream')
-        self.assertEqual(response.getBody(), "hello")
+        self.assertEqual(response.getBody(), 'hello')
 
     def test_filestream_iterator(self):
         # Only a ZServerHTTPResponse is IStreamIterator Aware
@@ -239,7 +239,7 @@ def test_filestream_iterator(self):
         response = subrequest('/@@filestream')
         from ZPublisher.Iterators import filestream_iterator
         self.assertTrue(isinstance(response.stdout, filestream_iterator))
-        self.assertEqual(response.getBody(), "Test")
+        self.assertEqual(response.getBody(), 'Test')
 
     def test_blobstream_iterator(self):
         # Only a ZServerHTTPResponse is IStreamIterator Aware
@@ -249,7 +249,7 @@ def test_blobstream_iterator(self):
         response = subrequest('/@@blobstream')
         from ZODB.blob import BlobFile
         self.assertTrue(isinstance(response.stdout, BlobFile))
-        self.assertEqual(response.getBody(), "Hi, Blob!")
+        self.assertEqual(response.getBody(), 'Hi, Blob!')
 
     def test_other_variables(self):
         request = getRequest()


Repository: plone.subrequest


Branch: refs/heads/master
Date: 2016-04-20T10:44:16+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.subrequest/commit/1b6f9578651a54477fe06088de9b520e02b3d255

Merge pull request #7 from plone/jensens-housekeeping

Housekeeping

Files changed:
A setup.cfg
M CHANGES.rst
M plone/subrequest/__init__.py
M plone/subrequest/interfaces.py
M plone/subrequest/subresponse.py
M plone/subrequest/testing.py
M plone/subrequest/tests.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6e24336..34cf5f6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Fixes:
   Fixed by only adding new oids, not already known by parent request.
   [jensens]
 
+- Housekeeping: isort imports, autopep8, minor manual cleanup (no zope.app. imports). 
+  [jensens]
+
 
 1.6.11 (2015-09-07)
 -------------------
diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index 26e4ea7..ec37844 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -2,25 +2,26 @@
 from AccessControl import getSecurityManager
 from AccessControl.SecurityManagement import setSecurityManager
 from Acquisition import aq_base
-from ZPublisher.BaseRequest import RequestContainer
-from ZPublisher.Publish import dont_publish_class
-from ZPublisher.Publish import missing_name
-from ZPublisher.mapply import mapply
 from cStringIO import StringIO
 from logging import getLogger
 from plone.subrequest.interfaces import ISubRequest
 from plone.subrequest.subresponse import SubResponse
 from posixpath import normpath
 from urllib import unquote  # Python2.4 does not have urlparse.unquote
-from urlparse import urlsplit, urljoin
-from zope.globalrequest import getRequest, setRequest
+from urlparse import urljoin
+from urlparse import urlsplit
+from zope.globalrequest import getRequest
+from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
+from zope.site.hooks import getSite
+from zope.site.hooks import setSite
+from ZPublisher.BaseRequest import RequestContainer
+from ZPublisher.mapply import mapply
+from ZPublisher.Publish import dont_publish_class
+from ZPublisher.Publish import missing_name
+
 import re
 
-try:
-    from zope.site.hooks import getSite, setSite
-except ImportError:
-    from zope.app.component.hooks import getSite, setSite
 
 try:
     from plone.protect.auto import SAFE_WRITE_KEY
@@ -28,6 +29,7 @@
 except ImportError:
     SAFE_WRITE_KEY = 'plone.protect.safe_oids'
     from zope.interface import Interface
+
     class IDisableCSRFProtection(Interface):
         pass
 
@@ -42,7 +44,7 @@ class IDisableCSRFProtection(Interface):
     'HTTP_IF_NONE_MATCH',
     'HTTP_IF_RANGE',
     'HTTP_RANGE',  # Not strictly a conditional header, but scrub it anyway
-    ]
+]
 
 OTHER_IGNORE = set([
     'ACTUAL_URL',
@@ -59,21 +61,21 @@ class IDisableCSRFProtection(Interface):
     'VirtualRootPhysicalPath',
     'method',
     'traverse_subpath',
-    ])
+])
 
 OTHER_IGNORE_RE = re.compile(r'^(?:BASE|URL)\d+$')
 
-logger = getLogger("plone.subrequest")
+logger = getLogger('plone.subrequest')
 
 
 def subrequest(url, root=None, stdout=None):
-    assert url is not None, "You must pass a url"
+    assert url is not None, 'You must pass a url'
     if isinstance(url, unicode):
         url = url.encode('utf-8')
     _, _, path, query, _ = urlsplit(url)
     parent_request = getRequest()
     assert parent_request is not None, \
-        "Unable to get request, perhaps zope.globalrequest is not configured."
+        'Unable to get request, perhaps zope.globalrequest is not configured.'
     parent_site = getSite()
     security_manager = getSecurityManager()
     parent_app = parent_request.PARENTS[-1]
@@ -89,9 +91,13 @@ def subrequest(url, root=None, stdout=None):
             if root is None:
                 path = root_path + path
             else:
-                path = '%s/%s%s' % (root_path, root.virtual_url_path(), path)
+                path = '{0}/{1}{2}'.format(
+                    root_path,
+                    root.virtual_url_path(),
+                    path
+                )
         elif root is not None:
-            path = '/%s%s' % (root.virtual_url_path(), path)
+            path = '/{0}{1}'.format(root.virtual_url_path(), path)
     else:
         try:
             parent_url = parent_request['URL']
@@ -135,20 +141,23 @@ def subrequest(url, root=None, stdout=None):
         try:
             request.processInputs()
             traversed = request.traverse(path)
-            result = mapply(traversed, positional=request.args,
-                            keyword=request,
-                            debug=None,
-                            maybe=1,
-                            missing_name=missing_name,
-                            handle_class=dont_publish_class,
-                            context=request,
-                            bind=1)
+            result = mapply(
+                traversed,
+                positional=request.args,
+                keyword=request,
+                debug=None,
+                maybe=1,
+                missing_name=missing_name,
+                handle_class=dont_publish_class,
+                context=request,
+                bind=1
+            )
             if result is not response:
                 response.setBody(result)
             for key, value in request.response.cookies.items():
                 parent_request.response.cookies[key] = value
-        except:
-            logger.exception("Error handling subrequest to %s" % url)
+        except Exception:
+            logger.exception('Error handling subrequest to {0}'.format(url))
             response.exception()
         return response
     finally:
diff --git a/plone/subrequest/interfaces.py b/plone/subrequest/interfaces.py
index 827ce8c..7eccbfb 100644
--- a/plone/subrequest/interfaces.py
+++ b/plone/subrequest/interfaces.py
@@ -1,5 +1,7 @@
+# -*- coding: utf-8 -*-
 from zope.publisher.interfaces.browser import IBrowserRequest
 
+
 class ISubRequest(IBrowserRequest):
     """Marker for sub-requests.
     """
diff --git a/plone/subrequest/subresponse.py b/plone/subrequest/subresponse.py
index d8c84a9..83b2daa 100644
--- a/plone/subrequest/subresponse.py
+++ b/plone/subrequest/subresponse.py
@@ -1,6 +1,8 @@
 # -*- coding: utf-8 -*-
 from ZPublisher.HTTPResponse import HTTPResponse
 from ZPublisher.Iterators import IStreamIterator
+
+
 try:
     from plone.app.blob.iterators import BlobStreamIterator
 except ImportError:
diff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py
index 6a3ba0d..72baaaa 100644
--- a/plone/subrequest/testing.py
+++ b/plone/subrequest/testing.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser import BrowserView
 from five.localsitemanager import make_site
 from plone.subrequest import subrequest
 from plone.testing import Layer
 from plone.testing import z2
 from plone.testing import zca
 from plone.testing import zodb
+from Products.Five.browser import BrowserView
 from zope.globalrequest import setRequest
 
 
@@ -27,6 +27,7 @@ def __call__(self):
 
 
 class URLView(BrowserView):
+
     def __call__(self):
         url = self.context.absolute_url()
         # The absolute url is expected to be an encoded string, not unicode.
@@ -35,6 +36,7 @@ def __call__(self):
 
 
 class ResponseWriteView(BrowserView):
+
     def __call__(self):
         response = self.request.response
         response.write('Some data.\n')
@@ -42,16 +44,19 @@ def __call__(self):
 
 
 class ErrorView(BrowserView):
+
     def __call__(self):
         raise Exception('An error')
 
 
 class RootView(BrowserView):
+
     def __call__(self):
-        return 'Root: %s' % self.context.absolute_url()
+        return 'Root: {0}'.format(self.context.absolute_url())
 
 
 class SubrequestView(BrowserView):
+
     def __call__(self):
         url = self.request.form.get('url')
         if url is None:
@@ -84,9 +89,8 @@ def __call__(self):
         from ZODB.blob import Blob
         from plone.app.blob.iterators import BlobStreamIterator
         myblob = Blob()
-        f = myblob.open("w")
-        f.write("Hi, Blob!")
-        f.close()
+        with myblob.open('w') as fd:
+            fd.write('Hi, Blob!')
         return BlobStreamIterator(myblob)
 
 
@@ -147,6 +151,7 @@ def tearDown(self):
 
 
 class PloneSubrequestLifecycle(z2.IntegrationTesting):
+
     def testSetUp(self):
         super(PloneSubrequestLifecycle, self).testSetUp()
         request = self['request']
@@ -160,10 +165,9 @@ def testTearDown(self):
 
 INTEGRATION_TESTING = PloneSubrequestLifecycle(
     bases=(PLONE_SUBREQEST_FIXTURE,),
-    name="PloneSubrequest:Integration"
+    name='PloneSubrequest:Integration'
 )
 FUNCTIONAL_TESTING = z2.FunctionalTesting(
     bases=(PLONE_SUBREQEST_FIXTURE,),
-    name="PloneSubrequest:Functional"
+    name='PloneSubrequest:Functional'
 )
-
diff --git a/plone/subrequest/tests.py b/plone/subrequest/tests.py
index 5ee13aa..ac1d45d 100644
--- a/plone/subrequest/tests.py
+++ b/plone/subrequest/tests.py
@@ -5,6 +5,7 @@
 from plone.testing import z2
 from zope.globalrequest import getRequest
 from zope.site.hooks import getSite
+
 import manuel.doctest
 import manuel.testcase
 import manuel.testing
@@ -19,8 +20,8 @@ def traverse(url):
     return request
 
 VH_TPL = (
-    "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot"
-    "/_vh_fizz/_vh_buzz/_vh_fizzbuzz/%s"
+    '/VirtualHostBase/http/example.org:80/{0}/VirtualHostRoot'
+    '/_vh_fizz/_vh_buzz/_vh_fizzbuzz/{1}'
 )
 NOHOST_VH_TPL = 'http://nohost' + VH_TPL
 
@@ -38,24 +39,24 @@ def test_absolute(self):
     def test_virtual_hosting(self):
         parts = ('folder1', 'folder1A/@@url')
         expect = 'folder1A'
-        url = NOHOST_VH_TPL % parts
-        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/%s' % expect
+        url = NOHOST_VH_TPL.format(*parts)
+        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/{0}'.format(expect)
         self.browser.open(url)
         self.assertEqual(self.browser.contents, expect_url)
 
     def test_virtual_hosting_relative(self):
         parts = ('folder1', 'folder1A?url=folder1Ai/@@url')
         expect = 'folder1A/folder1Ai'
-        url = NOHOST_VH_TPL % parts
-        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/%s' % expect
+        url = NOHOST_VH_TPL.format(*parts)
+        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/{0}'.format(expect)
         self.browser.open(url)
         self.assertEqual(self.browser.contents, expect_url)
 
     def test_virtual_hosting_absolute(self):
         parts = ('folder1', 'folder1A?url=/folder1B/@@url')
         expect = 'folder1B'
-        url = NOHOST_VH_TPL % parts
-        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/%s' % expect
+        url = NOHOST_VH_TPL.format(*parts)
+        expect_url = 'http://example.org/fizz/buzz/fizzbuzz/{0}'.format(expect)
         self.browser.open(url)
         self.assertEqual(self.browser.contents, expect_url)
 
@@ -93,7 +94,7 @@ def test_root(self):
         )
 
     def test_virtual_hosting(self):
-        url = VH_TPL % ('folder1', 'folder1A/@@url')
+        url = VH_TPL.format('folder1', 'folder1A/@@url')
         response = subrequest(url)
         self.assertEqual(
             response.body,
@@ -101,7 +102,7 @@ def test_virtual_hosting(self):
         )
 
     def test_virtual_hosting_unicode(self):
-        url = VH_TPL % ('folder1', 'folder1A/@@url')
+        url = VH_TPL.format('folder1', 'folder1A/@@url')
         response = subrequest(url)
         self.assertEqual(
             response.body,
@@ -109,7 +110,7 @@ def test_virtual_hosting_unicode(self):
         )
 
     def test_virtual_hosting_relative(self):
-        url = VH_TPL % ('folder1', 'folder1A?url=folder1B/@@url')
+        url = VH_TPL.format('folder1', 'folder1A?url=folder1B/@@url')
         response = subrequest(url)
         self.assertEqual(
             response.body,
@@ -122,7 +123,7 @@ def test_not_found(self):
 
     def test_virtual_host_root(self):
         parts = ('folder1', 'folder1A/@@url')
-        url = VH_TPL % parts
+        url = VH_TPL.format(*parts)
         traverse(url)
         response = subrequest('/folder1B/@@url')
         self.assertEqual(
@@ -132,7 +133,7 @@ def test_virtual_host_root(self):
 
     def test_virtual_host_root_with_root(self):
         parts = ('folder1', 'folder1A/@@url')
-        url = VH_TPL % parts
+        url = VH_TPL.format(*parts)
         traverse(url)
         app = self.layer['app']
         response = subrequest('/folder1Ai/@@url', root=app.folder1.folder1A)
@@ -144,8 +145,8 @@ def test_virtual_host_root_with_root(self):
     def test_virtual_host_space(self):
         parts = ('folder2', 'folder2A/folder2Ai space/@@url')
         url = (
-            "/VirtualHostBase/http/example.org:80/%s/VirtualHostRoot/%s" %
-            parts
+            '/VirtualHostBase/http/example.org:80/'
+            '{0}/VirtualHostRoot/{1}'.format(*parts)
         )
         traverse(url)
         app = self.layer['app']
@@ -157,8 +158,8 @@ def test_virtual_host_space(self):
 
     def test_virtual_host_root_at_root(self):
         url = (
-            "/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/"
-            "_vh_fizz/_vh_buzz/_vh_fizzbuzz"
+            '/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/'
+            '_vh_fizz/_vh_buzz/_vh_fizzbuzz'
         )
         traverse(url)
         response = subrequest('/folder1B/@@url')
@@ -169,8 +170,8 @@ def test_virtual_host_root_at_root(self):
 
     def test_virtual_host_root_at_root_trailing(self):
         url = (
-            "/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/"
-            "_vh_fizz/_vh_buzz/_vh_fizzbuzz/"
+            '/VirtualHostBase/http/example.org:80/folder1/VirtualHostRoot/'
+            '_vh_fizz/_vh_buzz/_vh_fizzbuzz/'
         )
         traverse(url)
         response = subrequest('/folder1B/@@url')
@@ -181,8 +182,8 @@ def test_virtual_host_root_at_root_trailing(self):
 
     def test_virtual_host_with_root_double_slash(self):
         url = (
-            "/VirtualHostBase/http/example.org:80/VirtualHostRoot/"
-            "_vh_fizz/folder1/folder2//folder2A"
+            '/VirtualHostBase/http/example.org:80/VirtualHostRoot/'
+            '_vh_fizz/folder1/folder2//folder2A'
         )
         traverse(url)
         root = self.layer['app'].folder1
@@ -228,7 +229,7 @@ def test_stream_iterator(self):
         request = getRequest()
         request.response.__class__ = ZServerHTTPResponse
         response = subrequest('/@@stream')
-        self.assertEqual(response.getBody(), "hello")
+        self.assertEqual(response.getBody(), 'hello')
 
     def test_filestream_iterator(self):
         # Only a ZServerHTTPResponse is IStreamIterator Aware
@@ -238,7 +239,7 @@ def test_filestream_iterator(self):
         response = subrequest('/@@filestream')
         from ZPublisher.Iterators import filestream_iterator
         self.assertTrue(isinstance(response.stdout, filestream_iterator))
-        self.assertEqual(response.getBody(), "Test")
+        self.assertEqual(response.getBody(), 'Test')
 
     def test_blobstream_iterator(self):
         # Only a ZServerHTTPResponse is IStreamIterator Aware
@@ -248,7 +249,7 @@ def test_blobstream_iterator(self):
         response = subrequest('/@@blobstream')
         from ZODB.blob import BlobFile
         self.assertTrue(isinstance(response.stdout, BlobFile))
-        self.assertEqual(response.getBody(), "Hi, Blob!")
+        self.assertEqual(response.getBody(), 'Hi, Blob!')
 
     def test_other_variables(self):
         request = getRequest()
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..2bcb643
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,6 @@
+[isort]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
diff --git a/setup.py b/setup.py
index bce6db4..b6a614f 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,9 @@
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 import os.path
-from setuptools import setup, find_packages
+
 
 version = '1.6.12.dev0'
 
@@ -56,4 +60,4 @@
     [z3c.autoinclude.plugin]
     target = plone
     """,
-    )
+)


