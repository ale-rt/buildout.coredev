Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2016-07-08T23:45:37+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/archetypes.schemaextender/commit/46a431c5dbdde8b32737393cd5f4a08e892227d0

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.txt
M archetypes/schemaextender/field.py
M archetypes/schemaextender/tests/base.py
M archetypes/schemaextender/tests/mocks.py
M archetypes/schemaextender/tests/testAccessor.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 25fc1b7..0fe39a0 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 2.1.6 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.1.5 (2015-03-11)
diff --git a/archetypes/schemaextender/field.py b/archetypes/schemaextender/field.py
index ad40892..59bd38e 100644
--- a/archetypes/schemaextender/field.py
+++ b/archetypes/schemaextender/field.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from Products.Archetypes import atapi
 
 from archetypes.schemaextender.interfaces import IExtensionField
@@ -12,6 +12,7 @@
     HAS_LP = False
 
 
+@implementer(IExtensionField)
 class BaseExtensionField(object):
     """Mix-in class to make Archetypes fields not depend on generated
     accessors and mutators, and use AnnotationStorage by default.
@@ -19,8 +20,6 @@ class BaseExtensionField(object):
     See README.txt for more information.
     """
 
-    implements(IExtensionField)
-
     storage = atapi.AnnotationStorage()
 
     def getAccessor(self, instance):
@@ -52,12 +51,12 @@ def getIndexAccessor(self, instance):
             return getattr(instance, name)
 
 
+@implementer(ITranslatableExtensionField)
 class TranslatableExtensionField(BaseExtensionField):
     """Extension field for a translatable content item.
 
     Needs to copy the language-independant values across translations.
     """
-    implements(ITranslatableExtensionField)
 
     def getMutator(self, instance):
         name = self.getName()
diff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py
index 37d1789..48f7344 100644
--- a/archetypes/schemaextender/tests/base.py
+++ b/archetypes/schemaextender/tests/base.py
@@ -1,5 +1,5 @@
 import unittest
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import provideAdapter
 from zope.component import getGlobalSiteManager
 from archetypes.schemaextender.extender import instanceSchemaFactory
@@ -12,9 +12,9 @@ class ASTestCase(PloneTestCase):
     """ Base class for testing archetypes.schemaextender """
 
 
+@implementer(IExtensible)
 class ExtensibleType(BaseObject):
     """A very simple extensible type."""
-    implements(IExtensible)
 
 
 class TestCase(unittest.TestCase):
diff --git a/archetypes/schemaextender/tests/mocks.py b/archetypes/schemaextender/tests/mocks.py
index a9120ae..2dd206a 100644
--- a/archetypes/schemaextender/tests/mocks.py
+++ b/archetypes/schemaextender/tests/mocks.py
@@ -1,6 +1,7 @@
 from zope.interface import Interface
+from zope.interface import implementer
+from zope.interface import implementer_only
 from zope.interface import implements
-from zope.interface import implementsOnly
 from zope.interface.interfaces import IInterface
 from zope.component import adapts
 from archetypes.schemaextender.tests.base import ExtensibleType
@@ -15,8 +16,8 @@ class IHighlighted(Interface):
     """
 
 
+@implementer(ISchemaExtender)
 class Extender(object):
-    implements(ISchemaExtender)
     adapts(ExtensibleType)
 
     fields = []
@@ -28,8 +29,8 @@ def getFields(self):
         return self.fields
 
 
+@implementer_only(IOrderableSchemaExtender)
 class OrderableExtender(Extender):
-    implementsOnly(IOrderableSchemaExtender)
     adapts(ExtensibleType)
 
     def getOrder(self, original):
@@ -50,8 +51,8 @@ def getOrder(self, original):
         return original
 
 
+@implementer(ISchemaModifier)
 class SchemaModifier(object):
-    implements(ISchemaModifier)
     adapts(ExtensibleType)
 
     def __init__(self, context):
diff --git a/archetypes/schemaextender/tests/testAccessor.py b/archetypes/schemaextender/tests/testAccessor.py
index 8304298..afaa756 100644
--- a/archetypes/schemaextender/tests/testAccessor.py
+++ b/archetypes/schemaextender/tests/testAccessor.py
@@ -1,4 +1,4 @@
-from zope.interface import Interface, implements, classImplements
+from zope.interface import Interface, implementer, classImplements
 from zope.component import adapts, provideAdapter
 from Products.Archetypes.atapi import ComputedField, StringField, StringWidget
 from Products.ATContentTypes.content.document import ATDocument
@@ -19,8 +19,8 @@ class ExtendedComputedField(ExtensionField, ComputedField):
     """ computed extension field """
 
 
+@implementer(ISchemaExtender)
 class Extender(object):
-    implements(ISchemaExtender)
     adapts(IFoo)
 
     fields = [


Repository: archetypes.schemaextender


Branch: refs/heads/master
Date: 2016-07-31T00:54:58+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/archetypes.schemaextender/commit/b9dddf942127c9cfe42d1cd4711a5afd867e8d47

Merge pull request #2 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.txt
M archetypes/schemaextender/field.py
M archetypes/schemaextender/tests/base.py
M archetypes/schemaextender/tests/mocks.py
M archetypes/schemaextender/tests/testAccessor.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 25fc1b7..0fe39a0 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 2.1.6 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.1.5 (2015-03-11)
diff --git a/archetypes/schemaextender/field.py b/archetypes/schemaextender/field.py
index ad40892..59bd38e 100644
--- a/archetypes/schemaextender/field.py
+++ b/archetypes/schemaextender/field.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from Products.Archetypes import atapi
 
 from archetypes.schemaextender.interfaces import IExtensionField
@@ -12,6 +12,7 @@
     HAS_LP = False
 
 
+@implementer(IExtensionField)
 class BaseExtensionField(object):
     """Mix-in class to make Archetypes fields not depend on generated
     accessors and mutators, and use AnnotationStorage by default.
@@ -19,8 +20,6 @@ class BaseExtensionField(object):
     See README.txt for more information.
     """
 
-    implements(IExtensionField)
-
     storage = atapi.AnnotationStorage()
 
     def getAccessor(self, instance):
@@ -52,12 +51,12 @@ def getIndexAccessor(self, instance):
             return getattr(instance, name)
 
 
+@implementer(ITranslatableExtensionField)
 class TranslatableExtensionField(BaseExtensionField):
     """Extension field for a translatable content item.
 
     Needs to copy the language-independant values across translations.
     """
-    implements(ITranslatableExtensionField)
 
     def getMutator(self, instance):
         name = self.getName()
diff --git a/archetypes/schemaextender/tests/base.py b/archetypes/schemaextender/tests/base.py
index 37d1789..48f7344 100644
--- a/archetypes/schemaextender/tests/base.py
+++ b/archetypes/schemaextender/tests/base.py
@@ -1,5 +1,5 @@
 import unittest
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import provideAdapter
 from zope.component import getGlobalSiteManager
 from archetypes.schemaextender.extender import instanceSchemaFactory
@@ -12,9 +12,9 @@ class ASTestCase(PloneTestCase):
     """ Base class for testing archetypes.schemaextender """
 
 
+@implementer(IExtensible)
 class ExtensibleType(BaseObject):
     """A very simple extensible type."""
-    implements(IExtensible)
 
 
 class TestCase(unittest.TestCase):
diff --git a/archetypes/schemaextender/tests/mocks.py b/archetypes/schemaextender/tests/mocks.py
index a9120ae..2dd206a 100644
--- a/archetypes/schemaextender/tests/mocks.py
+++ b/archetypes/schemaextender/tests/mocks.py
@@ -1,6 +1,7 @@
 from zope.interface import Interface
+from zope.interface import implementer
+from zope.interface import implementer_only
 from zope.interface import implements
-from zope.interface import implementsOnly
 from zope.interface.interfaces import IInterface
 from zope.component import adapts
 from archetypes.schemaextender.tests.base import ExtensibleType
@@ -15,8 +16,8 @@ class IHighlighted(Interface):
     """
 
 
+@implementer(ISchemaExtender)
 class Extender(object):
-    implements(ISchemaExtender)
     adapts(ExtensibleType)
 
     fields = []
@@ -28,8 +29,8 @@ def getFields(self):
         return self.fields
 
 
+@implementer_only(IOrderableSchemaExtender)
 class OrderableExtender(Extender):
-    implementsOnly(IOrderableSchemaExtender)
     adapts(ExtensibleType)
 
     def getOrder(self, original):
@@ -50,8 +51,8 @@ def getOrder(self, original):
         return original
 
 
+@implementer(ISchemaModifier)
 class SchemaModifier(object):
-    implements(ISchemaModifier)
     adapts(ExtensibleType)
 
     def __init__(self, context):
diff --git a/archetypes/schemaextender/tests/testAccessor.py b/archetypes/schemaextender/tests/testAccessor.py
index 8304298..afaa756 100644
--- a/archetypes/schemaextender/tests/testAccessor.py
+++ b/archetypes/schemaextender/tests/testAccessor.py
@@ -1,4 +1,4 @@
-from zope.interface import Interface, implements, classImplements
+from zope.interface import Interface, implementer, classImplements
 from zope.component import adapts, provideAdapter
 from Products.Archetypes.atapi import ComputedField, StringField, StringWidget
 from Products.ATContentTypes.content.document import ATDocument
@@ -19,8 +19,8 @@ class ExtendedComputedField(ExtensionField, ComputedField):
     """ computed extension field """
 
 
+@implementer(ISchemaExtender)
 class Extender(object):
-    implements(ISchemaExtender)
     adapts(IFoo)
 
     fields = [


