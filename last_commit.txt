Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2016-05-18T02:03:41+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/plone.app.querystring/commit/73d142f397e49e0c145218d620472341b04ae848

Add missing _referenceIs query parser

Files changed:
M CHANGES.rst
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/queryparser.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dc7eb2c..fc1d292 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Add missing _referenceIs query parser
+  [vangheem]
 
 
 1.3.14 (2016-02-19)
diff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py
index c35635a..bc03efb 100644
--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py
+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py
@@ -59,7 +59,7 @@ def __call__(self, value):
         if isinstance(query, basestring):
             try:
                 query = parse(query)
-            except ValueError:
+            except (ValueError, AttributeError):
                 query = query.encode("utf-8")
         elif isinstance(query, list):
             aux = list()
@@ -68,7 +68,7 @@ def __call__(self, value):
                     item = item.encode("utf-8")
                 try:
                     val = parse(item)
-                except ValueError:
+                except (ValueError, AttributeError):
                     val = item
                 aux.append(val)
 
diff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py
index a77841c..774f8cc 100644
--- a/plone/app/querystring/queryparser.py
+++ b/plone/app/querystring/queryparser.py
@@ -1,14 +1,16 @@
 from Acquisition import aq_parent
+from collections import namedtuple
 from DateTime import DateTime
+from plone.app.layout.navigation.root import getNavigationRoot
+from plone.registry.interfaces import IRegistry
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.utils import base_hasattr
-from collections import namedtuple
-from plone.app.layout.navigation.root import getNavigationRoot
-from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.dottedname.resolve import resolve
 
+
 Row = namedtuple('Row', ['index', 'operator', 'values'])
 
 
@@ -334,6 +336,39 @@ def _relativePath(context, row):
     return _absolutePath(context, row)
 
 
+def _referenceIs(context, row):
+    # could come in as UID or path
+
+    values = row.values
+
+    if not values:
+        return {}
+
+    # clear possible depth string
+    values = values.split('::')[0]
+
+    if '/' not in values:
+        return {row.index: values}
+
+    pquery = _absolutePath(context, row)
+    if not pquery:
+        return {}
+    # use resolved path here...
+    path = pquery[row.index]['query']
+
+    portal_url = getToolByName(context, 'portal_url')
+    portal = portal_url.getPortalObject()
+
+    if type(path) == list:
+        path = path[0]
+
+    obj = portal.restrictedTraverse(str(path), None)
+    if obj is None:
+        return {}
+
+    return {row.index: IUUID(obj)}
+
+
 # Helper functions
 
 def getPathByUID(context, uid):


Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2016-05-21T15:11:13+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.querystring/commit/de66ea1845364b44f538a00f5a7d1b7197337ad5

Merge pull request #62 from plone/missing-reference-is

Add missing _referenceIs query parser

Files changed:
M CHANGES.rst
M plone/app/querystring/indexmodifiers/query_index_modifiers.py
M plone/app/querystring/queryparser.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dc7eb2c..fc1d292 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Add missing _referenceIs query parser
+  [vangheem]
 
 
 1.3.14 (2016-02-19)
diff --git a/plone/app/querystring/indexmodifiers/query_index_modifiers.py b/plone/app/querystring/indexmodifiers/query_index_modifiers.py
index c35635a..bc03efb 100644
--- a/plone/app/querystring/indexmodifiers/query_index_modifiers.py
+++ b/plone/app/querystring/indexmodifiers/query_index_modifiers.py
@@ -59,7 +59,7 @@ def __call__(self, value):
         if isinstance(query, basestring):
             try:
                 query = parse(query)
-            except ValueError:
+            except (ValueError, AttributeError):
                 query = query.encode("utf-8")
         elif isinstance(query, list):
             aux = list()
@@ -68,7 +68,7 @@ def __call__(self, value):
                     item = item.encode("utf-8")
                 try:
                     val = parse(item)
-                except ValueError:
+                except (ValueError, AttributeError):
                     val = item
                 aux.append(val)
 
diff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py
index a77841c..774f8cc 100644
--- a/plone/app/querystring/queryparser.py
+++ b/plone/app/querystring/queryparser.py
@@ -1,14 +1,16 @@
 from Acquisition import aq_parent
+from collections import namedtuple
 from DateTime import DateTime
+from plone.app.layout.navigation.root import getNavigationRoot
+from plone.registry.interfaces import IRegistry
+from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.utils import base_hasattr
-from collections import namedtuple
-from plone.app.layout.navigation.root import getNavigationRoot
-from plone.registry.interfaces import IRegistry
 from zope.component import getUtility
 from zope.dottedname.resolve import resolve
 
+
 Row = namedtuple('Row', ['index', 'operator', 'values'])
 
 
@@ -334,6 +336,39 @@ def _relativePath(context, row):
     return _absolutePath(context, row)
 
 
+def _referenceIs(context, row):
+    # could come in as UID or path
+
+    values = row.values
+
+    if not values:
+        return {}
+
+    # clear possible depth string
+    values = values.split('::')[0]
+
+    if '/' not in values:
+        return {row.index: values}
+
+    pquery = _absolutePath(context, row)
+    if not pquery:
+        return {}
+    # use resolved path here...
+    path = pquery[row.index]['query']
+
+    portal_url = getToolByName(context, 'portal_url')
+    portal = portal_url.getPortalObject()
+
+    if type(path) == list:
+        path = path[0]
+
+    obj = portal.restrictedTraverse(str(path), None)
+    if obj is None:
+        return {}
+
+    return {row.index: IUUID(obj)}
+
+
 # Helper functions
 
 def getPathByUID(context, uid):


