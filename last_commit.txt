Repository: plone.app.caching


Branch: refs/heads/master
Date: 2016-10-31T21:28:52+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.caching/commit/eb804c16b4f7df393ee1d0adcbf0f4990eec0df1

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/app/caching/browser/controlpanel.py
M plone/app/caching/browser/edit.py
M plone/app/caching/operations/default.py
M plone/app/caching/operations/etags.py
M plone/app/caching/operations/utils.py
M plone/app/caching/purge.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_lastmodified.py
M plone/app/caching/tests/test_lookup.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 583bef3..248d126 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Update code to follow Plone styleguide.
+  [gforcada]
 
 1.2.13 (2016-10-05)
 -------------------
diff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py
index b53d70d..1a22ee9 100644
--- a/plone/app/caching/browser/controlpanel.py
+++ b/plone/app/caching/browser/controlpanel.py
@@ -33,8 +33,8 @@
 
 # Borrowed from zope.schema to avoid an import of a private name
 _isuri = re.compile(
-    r"[a-zA-z0-9+.-]+:"   # scheme
-    r"\S*$"               # non space (should be pickier)
+    r'[a-zA-z0-9+.-]+:'   # scheme
+    r'\S*$'               # non space (should be pickier)
 ).match
 
 
@@ -162,7 +162,10 @@ def update(self):
                 self.processSave()
             elif 'form.button.Cancel' in self.request.form:
                 self.request.response.redirect(
-                    "%s/@@overview-controlpanel" % self.context.absolute_url())
+                    '{0}/@@overview-controlpanel'.format(
+                        self.context.absolute_url()
+                    )
+                )
 
     def processSave(self):
 
@@ -273,7 +276,7 @@ def processSave(self):
         # Validate purging settings
         for cachingProxy in cachingProxies:
             if not _isuri(cachingProxy):
-                self.errors['cachingProxies'] = _(u"Invalid URL: ${url}", mapping={'url': cachingProxy})  # noqa
+                self.errors['cachingProxies'] = _(u'Invalid URL: ${url}', mapping={'url': cachingProxy})  # noqa
 
         for domain in domains:
             if not _isuri(domain):
@@ -286,16 +289,16 @@ def processSave(self):
         try:
             ramCacheMaxEntries = int(ramCacheMaxEntries)
         except (ValueError, TypeError,):
-            self.errors['ramCacheMaxEntries'] = _(u"An integer is required.")
+            self.errors['ramCacheMaxEntries'] = _(u'An integer is required.')
         else:
             if ramCacheMaxEntries < 0:
                 self.errors['ramCacheMaxEntries'] = _(
-                    u"A positive number is required."
+                    u'A positive number is required.'
                 )
         try:
             ramCacheMaxAge = int(ramCacheMaxAge)
         except (ValueError, TypeError,):
-            self.errors['ramCacheMaxAge'] = _(u"An integer is required.")
+            self.errors['ramCacheMaxAge'] = _(u'An integer is required.')
         else:
             if ramCacheMaxAge < 0:
                 self.errors['ramCacheMaxAge'] = _(
@@ -317,7 +320,7 @@ def processSave(self):
         # Check for errors
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         # Save settings
@@ -476,7 +479,7 @@ def hasGlobalOptions(self, operationType):
             return False
 
         for option in options:
-            if '%s.%s' % (prefix, option,) in self.registry:
+            if '{0}.{1}'.format(prefix, option,) in self.registry:
                 return True
 
         return False
@@ -489,7 +492,7 @@ def hasRulesetOptions(self, operationType, ruleset):
             return False
 
         for option in options:
-            if '%s.%s.%s' % (prefix, ruleset, option,) in self.registry:
+            if '{0}.{1}.{2}'.format(prefix, ruleset, option,) in self.registry:
                 return True
 
         return False
@@ -509,26 +512,28 @@ def processImport(self):
         snapshot = self.request.form.get('snapshot', True)
 
         if not profile:
-            self.errors['profile'] = _(u"You must select a profile to import.")
+            self.errors['profile'] = _(u'You must select a profile to import.')
 
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         portal_setup = getToolByName(self.context, 'portal_setup')
 
         # Create a snapshot
         if snapshot:
-            snapshotId = "plone.app.caching.beforeimport.%s" % (
+            snapshotId = 'plone.app.caching.beforeimport.{0}'.format(
                 datetime.datetime.now().isoformat().replace(':', '.'))
             portal_setup.createSnapshot(snapshotId)
 
         # Import the new profile
-        portal_setup.runAllImportStepsFromProfile("profile-%s" % profile)
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-{0}'.format(profile)
+        )
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Import complete."), "info")
+            _(u'Import complete.'), 'info')
 
     @property
     @memoize
@@ -558,11 +563,11 @@ def processPurge(self):
         sync = self.request.form.get('synchronous', True)
 
         if not urls:
-            self.errors['urls'] = _(u"No URLs or paths entered.")
+            self.errors['urls'] = _(u'No URLs or paths entered.')
 
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         purger = getUtility(IPurger)
@@ -574,11 +579,11 @@ def purge(url):
 
                 log = url
                 if xcache:
-                    log += " (X-Cache header: " + xcache + ")"
+                    log += ' (X-Cache header: ' + xcache + ')'
                 if xerror:
-                    log += " -- " + xerror
+                    log += ' -- ' + xerror
                 if not str(status).startswith('2'):
-                    log += " -- WARNING status " + str(status)
+                    log += ' -- WARNING status ' + str(status)
                 self.purgeLog.append(log)
             else:
                 purger.purgeAsync(url)
@@ -638,13 +643,13 @@ def processPurge(self):
 
         if self.ramCache is None:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"RAM cache not installed."), "error")
+                _(u'RAM cache not installed.'), 'error')
 
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         self.ramCache.invalidateAll()
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Cache purged."), "info")
+            _(u'Cache purged.'), 'info')
diff --git a/plone/app/caching/browser/edit.py b/plone/app/caching/browser/edit.py
index 3522a86..fb67701 100644
--- a/plone/app/caching/browser/edit.py
+++ b/plone/app/caching/browser/edit.py
@@ -95,11 +95,14 @@ def update(self):
 
         for option in self.operation.options:
             newField = None
-            fieldName = "%s.%s" % (prefix, option)
+            fieldName = '{0}.{1}'.format(prefix, option)
 
             if self.rulesetName:
-                rulesetFieldName = "%s.%s.%s" % (
-                    prefix, self.rulesetName, option)
+                rulesetFieldName = '{0}.{1}.{2}'.format(
+                    prefix,
+                    self.rulesetName,
+                    option,
+                )
 
                 if rulesetFieldName in self.registry.records:
                     newField = self.cloneField(self.registry.records[
@@ -149,14 +152,14 @@ def getContent(self):
         options = self.operation.options
 
         for option in options:
-            recordName = "%s.%s" % (prefix, option,)
+            recordName = '{0}.{1}'.format(prefix, option,)
 
             # If a ruleset-specific record does not exist, we can fall back on
             # a global record, since the per-ruleset records will be created
             # as necessary in applyChanges()
 
             if self.rulesetName:
-                rulesetRecordName = "%s.%s.%s" % (
+                rulesetRecordName = '{0}{1}{2}'.format(
                     prefix, self.rulesetName, option,)
 
                 if rulesetRecordName in self.registry.records:
@@ -255,7 +258,7 @@ def save(self, action):
     @button.buttonAndHandler(_(u'Cancel'), name='cancel')
     def cancel(self, action):
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Edit cancelled."), type="info")
+            _(u"Edit cancelled."), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
                 self.context.absolute_url()
@@ -269,14 +272,17 @@ def cancel(self, action):
     )
     def clear(self, action):
         for key in self.getContent().keys():
-            assert key.startswith("%s.%s." % (
-                self.operation.prefix, self.rulesetName,))
+            key_suffix = '{0}.{1}.'.format(
+                self.operation.prefix,
+                self.rulesetName,
+            )
+            assert key.startswith(key_suffix)
 
             if key in self.registry.records:
                 del self.registry.records[key]
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Ruleset-specific settings removed."), type="info")
+            _(u"Ruleset-specific settings removed."), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
                 self.context.absolute_url()
diff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py
index a265f1c..b5c6c1a 100644
--- a/plone/app/caching/operations/default.py
+++ b/plone/app/caching/operations/default.py
@@ -165,7 +165,7 @@ def modifyResponse(self, rulename, response, class_=None):
         if cacheStop(self.request, rulename):
             # only stop with etags if configured
             if etags:
-                etag = "%s%d" % (time.time(), random.randint(0, 1000))
+                etag = '{0}{1}'.format(time.time(), random.randint(0, 1000))
                 return setCacheHeaders(
                     self.published,
                     self.request,
diff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py
index 1e285d4..b7cc2a9 100644
--- a/plone/app/caching/operations/etags.py
+++ b/plone/app/caching/operations/etags.py
@@ -235,7 +235,7 @@ def __call__(self):
             return None
         if portal_state.anonymous():
             return None
-        return "%s%d" % (time.time(), random.randint(0, 1000))
+        return '{0}{1}'.format(time.time(), random.randint(0, 1000))
 
 
 @implementer(IETagValue)
diff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py
index e7bc0b1..7fc8f23 100644
--- a/plone/app/caching/operations/utils.py
+++ b/plone/app/caching/operations/utils.py
@@ -132,7 +132,7 @@ def cacheInBrowser(published, request, response, etag=None, lastModified=None):
     """
 
     if etag is not None:
-        response.setHeader('ETag', '"%s"' % etag, literal=1)
+        response.setHeader('ETag', '"{0}"'.format(etag), literal=1)
 
     if lastModified is not None:
         response.setHeader('Last-Modified', formatDateTime(lastModified))
@@ -169,14 +169,16 @@ def cacheInProxy(
         del response.headers['last-modified']
 
     if etag is not None:
-        response.setHeader('ETag', '"%s"' % etag, literal=1)
+        response.setHeader('ETag', '"{0}"'.format(etag), literal=1)
 
     if vary is not None:
         response.setHeader('Vary', vary)
 
     response.setHeader('Expires', formatDateTime(getExpiration(0)))
     response.setHeader(
-        'Cache-Control', 'max-age=0, s-maxage=%d, must-revalidate' % smaxage)
+        'Cache-Control',
+        'max-age=0, s-maxage={0}, must-revalidate'.format(smaxage),
+    )
 
 
 def cacheInBrowserAndProxy(
@@ -205,7 +207,7 @@ def cacheInBrowserAndProxy(
         del response.headers['last-modified']
 
     if etag is not None:
-        response.setHeader('ETag', '"%s"' % etag, literal=1)
+        response.setHeader('ETag', '"{0}"'.format(etag), literal=1)
 
     if vary is not None:
         response.setHeader('Vary', vary)
@@ -213,14 +215,14 @@ def cacheInBrowserAndProxy(
     response.setHeader('Expires', formatDateTime(getExpiration(maxage)))
 
     if smaxage is not None:
-        maxage = '%s, s-maxage=%s' % (maxage, smaxage)
+        maxage = '{0}, s-maxage={1}'.format(maxage, smaxage)
 
     # Substituting proxy-validate in place of must=revalidate here because of
     # Safari bug
     # https://bugs.webkit.org/show_bug.cgi?id=13128
     response.setHeader(
         'Cache-Control',
-        'max-age=%s, proxy-revalidate, public' % maxage
+        'max-age={0}, proxy-revalidate, public'.format(maxage)
     )
 
 
@@ -328,7 +330,7 @@ def notModified(published, request, response, etag=None, lastModified=None):
         del response.headers['cache-control']
 
     response.setStatus(304)
-    return u""
+    return u''
 
 
 #
@@ -422,7 +424,7 @@ def isModified(request, etag=None, lastModified=None):
             if (lastModified - ifModifiedSince) > delta_sec:
                 return True
         except TypeError:
-            logger.exception("Could not compare dates")
+            logger.exception('Could not compare dates')
 
         # If we expected an ETag and the client didn't give us one, consider
         # that an error. This may be more conservative than the spec requires.
@@ -468,7 +470,7 @@ def checkType(context):
     while (
         published is not None and
         not checkType(published) and
-        hasattr(published, '__parent__',)
+        getattr(published, '__parent__')
     ):
         published = published.__parent__
 
@@ -622,7 +624,7 @@ def getETag(published, request, keys=(), extraTokens=()):
             (published, request), IETagValue, name=key)
         if component is None:
             logger.warning(
-                "Could not find value adapter for ETag component %s", key)
+                'Could not find value adapter for ETag component %s', key)
             tokens.append('')
         else:
             value = component()
@@ -729,7 +731,7 @@ def getRAMCacheKey(request, etag=None, lastModified=None):
     is needed to ensure the key changes when the resource view changes.
     """
 
-    resourceKey = "%s%s?%s" % (
+    resourceKey = '{0}{1}?{2}'.format(
         request.get('SERVER_URL', ''),
         request.get('PATH_INFO', ''),
         request.get('QUERY_STRING', ''),
diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py
index 3b87cec..2952984 100644
--- a/plone/app/caching/purge.py
+++ b/plone/app/caching/purge.py
@@ -187,12 +187,12 @@ def fieldFilter(field):
 
                 yield prefix + '/at_download/' + field.getName()
 
-                fieldURL = "%s/%s" % (prefix, field.getName(),)
+                fieldURL = '{0}/{1}'.format(prefix, field.getName(),)
                 yield fieldURL
 
                 if IImageField.providedBy(field):
                     for size in field.getAvailableSizes(self.context).keys():
-                        yield "%s_%s" % (fieldURL, size,)
+                        yield '{0}_{1}'.format(fieldURL, size,)
 
         def getAbsolutePaths(self):
             return []
diff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py
index 77cc985..cef39c2 100644
--- a/plone/app/caching/tests/test_integration.py
+++ b/plone/app/caching/tests/test_integration.py
@@ -125,7 +125,10 @@ def test_disabled(self):
 
         # OFS image (custom folder)
         OFS.Image.manage_addImage(
-            self.portal['portal_skins']['custom'], 'test.gif', open(TEST_IMAGE, 'rb'))
+            self.portal['portal_skins']['custom'],
+            'test.gif',
+            open(TEST_IMAGE, 'rb')
+        )
 
         setRoles(self.portal, TEST_USER_ID, ('Member',))
 
@@ -182,9 +185,10 @@ def test_auto_purge_content_types(self):
         self.cachePurgingSettings.cachingProxies = ()
         self.ploneCacheSettings.purgedContentTypes = ()
 
-        editURL = '%s/edit?_authenticator=%s' % (
+        editURL = '{0}/edit?_authenticator={1}'.format(
             self.portal['d1'].absolute_url(),
-            getToken(TEST_USER_NAME))
+            getToken(TEST_USER_NAME)
+        )
 
         import transaction
         transaction.commit()
@@ -193,7 +197,8 @@ def test_auto_purge_content_types(self):
         browser.handleErrors = False
         browser.addHeader(
             'Authorization',
-            'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
 
         browser.open(editURL)
 
diff --git a/plone/app/caching/tests/test_lastmodified.py b/plone/app/caching/tests/test_lastmodified.py
index 975566a..8a8738d 100644
--- a/plone/app/caching/tests/test_lastmodified.py
+++ b/plone/app/caching/tests/test_lastmodified.py
@@ -126,7 +126,8 @@ def test_FSObjectLastModified_FSFile(self):
         modtime = float(os.path.getmtime(__file__))
         mod = datetime.datetime.fromtimestamp(modtime, tzlocal())
 
-        format = "%y%m%d%H%M%s"  # see note in test_FSObjectLastModified_FSImage
+        # see note in test_FSObjectLastModified_FSImage
+        format = '%y%m%d%H%M%s'
         self.assertEqual(mod.strftime(format),
                          ILastModified(dummy)().strftime(format))
 
@@ -136,10 +137,10 @@ def test_FSObjectLastModified_FSImage(self):
         dummy = FSImage('dummy', __file__)  # not really an image, but anyway
         modtime = float(os.path.getmtime(__file__))
         mod = datetime.datetime.fromtimestamp(modtime, tzlocal())
-        # different filesystems seem to handle datetime differently. some use microseconds
-        # and others don't so to make jenkins happy lets omit the microseconds
-        # factor
-        format = "%y%m%d%H%M%s"
+        # different filesystems seem to handle datetime differently.
+        # Some use microseconds and others don't so to make jenkins happy,
+        # lets omit the microseconds factor
+        format = '%y%m%d%H%M%s'
         self.assertEqual(mod.strftime(format),
                          ILastModified(dummy)().strftime(format))
 
diff --git a/plone/app/caching/tests/test_lookup.py b/plone/app/caching/tests/test_lookup.py
index de0d1f6..282d967 100644
--- a/plone/app/caching/tests/test_lookup.py
+++ b/plone/app/caching/tests/test_lookup.py
@@ -254,7 +254,11 @@ def test_parent_not_IBrowserDefault_actiononly(self):
         ploneSettings.contentTypeRulesetMapping = {'testtype': 'rule1'}
 
         published = ZopePageTemplate('defaultView').__of__(
-            DummyNotBrowserDefault('testtype', 'string:${object_url}/defaultView'))
+            DummyNotBrowserDefault(
+                'testtype',
+                'string:${object_url}/defaultView'
+            )
+        )
         request = DummyRequest(published, DummyResponse())
 
         self.assertEqual('rule1', ContentItemLookup(published, request)())
diff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py
index f2fe0ca..b098994 100644
--- a/plone/app/caching/tests/test_operation_default.py
+++ b/plone/app/caching/tests/test_operation_default.py
@@ -57,23 +57,28 @@ def test_last_modified_no_etags(self):
 
         # log in and create a content type
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' % (
-            TEST_USER_NAME, TEST_USER_PASSWORD,))
-        browser.open("%s/++add++Document" % self.portal['f1'].absolute_url())
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
+        browser.open('{0}/++add++Document'.format(
+            self.portal['f1'].absolute_url())
+        )
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = "dummy content"
+            name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
         self.assertFalse('Etag' in browser.headers)
 
         # now set up etags and make sure that a header is added
         self.registry['plone.app.caching.weakCaching.etags'] = (
-            'lastModified',)
+            'lastModified',
+        )
         import transaction
         transaction.commit()
-        browser.open("%s/dummy-content/edit?_authenticator=%s" % (
+        browser.open('{0}/dummy-content/edit?_authenticator={1}'.format(
             self.portal['f1'].absolute_url(),
             getToken(TEST_USER_NAME)))
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = "dummy content"
+            name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
         self.assertTrue('Etag' in browser.headers)
diff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py
index c49f2e2..5bded43 100644
--- a/plone/app/caching/tests/test_operation_parameters.py
+++ b/plone/app/caching/tests/test_operation_parameters.py
@@ -48,7 +48,7 @@ def test_anon_only(self):
         self.portal['f1'].invokeFactory('Document', 'd1')
         self.portal['f1']['d1'].title = u"Document one"
         self.portal['f1']['d1'].description = u"Document one description"
-        testText = "Testing... body one"
+        testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
@@ -104,8 +104,10 @@ def test_anon_only(self):
 
         # View the page as logged-in
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
@@ -140,8 +142,10 @@ def test_anon_only(self):
 
         # View the page as logged-in
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
diff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py
index 4a61d12..1115f2b 100644
--- a/plone/app/caching/tests/test_operation_utils.py
+++ b/plone/app/caching/tests/test_operation_utils.py
@@ -126,7 +126,7 @@ def test_cacheInBrowser_etag(self):
         published = DummyPublished()
 
         now = datetime.datetime.now(dateutil.tz.tzlocal())
-        etag = "|foo|bar|"
+        etag = '|foo|bar|'
 
         cacheInBrowser(published, request, response, etag=etag)
 
@@ -171,7 +171,7 @@ def test_cacheInBrowser_lastModified_and_etag(self):
         published = DummyPublished()
 
         now = datetime.datetime.now(dateutil.tz.tzlocal())
-        etag = "|foo|bar|"
+        etag = '|foo|bar|'
 
         nowFormatted = wsgiref.handlers.format_date_time(
             time.mktime(now.timetuple()))
@@ -298,13 +298,15 @@ def test_cacheInBrowserAndProxy_full(self):
         self.assertEqual('Accept-Language', response.getHeader('Vary'))
 
         timedelta = dateutil.parser.parse(response.getHeader('Expires')) - now
+        delta = datetime.timedelta(seconds=58)
         self.assertFalse(
-            timedelta < datetime.timedelta(seconds=58),
-            "%s is not < %s" % (timedelta, datetime.timedelta(seconds=58))
+            timedelta < delta,
+            '{0} is not < {1}'.format(timedelta, delta)
         )
+        delta = datetime.timedelta(seconds=61)
         self.assertFalse(
-            timedelta > datetime.timedelta(seconds=61),
-            "%s is not > %s" % (timedelta, datetime.timedelta(seconds=61))
+            timedelta > delta,
+            '{0} is not > {1}'.format(timedelta, delta)
         )
 
     # cacheInRAM()
@@ -327,7 +329,7 @@ def test_cacheInRAM_no_etag(self):
         cacheInRAM(published, request, response)
 
         annotations = IAnnotations(request)
-        self.assertEqual("http://example.com/foo?",
+        self.assertEqual('http://example.com/foo?',
                          annotations[PAGE_CACHE_ANNOTATION_KEY])
         self.assertTrue(IRAMCached.providedBy(request))
 
@@ -350,7 +352,7 @@ def test_cacheInRAM_etag(self):
         cacheInRAM(published, request, response, etag=etag)
 
         annotations = IAnnotations(request)
-        self.assertEqual("||foo|bar|||http://example.com/foo?",
+        self.assertEqual('||foo|bar|||http://example.com/foo?',
                          annotations[PAGE_CACHE_ANNOTATION_KEY])
         self.assertTrue(IRAMCached.providedBy(request))
 
@@ -370,11 +372,11 @@ def test_cacheInRAM_etag_alternate_key(self):
         assert not IRAMCached.providedBy(response)
 
         cacheInRAM(published, request, response,
-                   etag=etag, annotationsKey="alt.key")
+                   etag=etag, annotationsKey='alt.key')
 
         annotations = IAnnotations(request)
-        self.assertEqual("||foo|bar|||http://example.com/foo?",
-                         annotations["alt.key"])
+        self.assertEqual('||foo|bar|||http://example.com/foo?',
+                         annotations['alt.key'])
         self.assertTrue(IRAMCached.providedBy(request))
 
 
@@ -514,7 +516,7 @@ def test_notModified_full(self):
         response.setStatus(200)
 
         now = datetime.datetime.now(dateutil.tz.tzlocal())
-        etag = "|foo|bar|"
+        etag = '|foo|bar|'
 
         body = notModified(published, request, response,
                            etag=etag, lastModified=now)
@@ -924,7 +926,7 @@ def test_formatDateTime_naive(self):
     def test_parseDateTime_invalid(self):
         from plone.app.caching.operations.utils import parseDateTime
 
-        self.assertEqual(None, parseDateTime("foo"))
+        self.assertEqual(None, parseDateTime('foo'))
 
     def test_parseDateTime_rfc1123(self):
         from plone.app.caching.operations.utils import parseDateTime
@@ -1306,7 +1308,7 @@ def test_getRAMCacheKey_etag(self):
         request.environ['QUERY_STRING'] = 'x=1&y=2'
 
         self.assertEqual('||foo|bar||http://example.com/foo/bar?x=1&y=2',
-                         getRAMCacheKey(request, etag="|foo|bar"))
+                         getRAMCacheKey(request, etag='|foo|bar'))
 
     # storeResponseInRAMCache()
 
@@ -1527,7 +1529,7 @@ def __call__(self, key):
         )
 
         cached = normalize_response_cache(
-            fetchFromRAMCache(request, etag="|a|b"))
+            fetchFromRAMCache(request, etag='|a|b'))
         self.assertEqual((200, {'x-foo': 'bar'}, u'Body'), cached)
 
     def test_fetchFromRAMCache_custom_key(self):
diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py
index ec4ca9f..8098527 100644
--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py
@@ -99,7 +99,7 @@ def test_composite_views(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = "one"
+        self.portal['f1'].title = 'one'
         self.portal['f1'].description = u"Folder one description"
         self.portal['f1'].reindexObject()
 
@@ -107,7 +107,7 @@ def test_composite_views(self):
         self.portal['f1'].invokeFactory('Document', 'd1')
         self.portal['f1']['d1'].title = u"Document one"
         self.portal['f1']['d1'].description = u"Document one description"
-        testText = "Testing... body one"
+        testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
@@ -135,8 +135,10 @@ def test_composite_views(self):
         # Request the authenticated folder
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1'].absolute_url())
         self.assertEqual('plone.content.folderView',
                          browser.headers['X-Cache-Rule'])
@@ -166,8 +168,10 @@ def test_composite_views(self):
         # Request the authenticated page
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertTrue(testText in browser.contents)
         self.assertEqual('plone.content.itemView',
@@ -184,8 +188,10 @@ def test_composite_views(self):
 
         # Request the authenticated page again -- to test RAM cache.
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
@@ -199,8 +205,10 @@ def test_composite_views(self):
         etag = browser.headers['ETag']
         browser = Browser(self.app)
         browser.raiseHttpErrors = False  # we really do want to see the 304
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.addHeader('If-None-Match', etag)
         browser.open(self.portal['f1']['d1'].absolute_url())
         # This should be a 304 response
@@ -275,7 +283,7 @@ def test_composite_views(self):
         self.assertEqual('', browser.contents)
 
         # Edit the page to update the etag
-        testText2 = "Testing... body two"
+        testText2 = 'Testing... body two'
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
@@ -324,8 +332,11 @@ def test_content_feeds(self):
         # This should use cacheInProxy
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           skins_tool.default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(
+            catalog.getCounter(),
+            skins_tool.default_skin,
+        )
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -343,8 +354,11 @@ def test_content_feeds(self):
         self.assertEqual(rssText, browser.contents)
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           skins_tool.default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(
+            catalog.getCounter(),
+            skins_tool.default_skin,
+        )
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -364,8 +378,10 @@ def test_content_feeds(self):
         # Request the authenticated rss feed
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
@@ -373,15 +389,20 @@ def test_content_feeds(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s"' % (
-            catalog.getCounter(), skins_tool.default_skin), browser.headers['ETag'])
+        tag = '"|test_user_1_|{0}|en|{1}"'.format(
+            catalog.getCounter(),
+            skins_tool.default_skin,
+        )
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
@@ -411,8 +432,10 @@ def test_content_files(self):
         # Request the image with Manager role
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['i1'].absolute_url())
         self.assertEqual('plone.content.file', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
@@ -422,8 +445,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -431,8 +453,10 @@ def test_content_files(self):
         now = stable_now()
         browser = Browser(self.app)
         browser.handleErrors = False
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),
+        )
         browser.open(self.portal['f1'][
                      'i1'].absolute_url() + '/@@images/image/preview')
         self.assertEqual('plone.content.file', browser.headers['X-Cache-Rule'])
@@ -443,8 +467,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -465,8 +488,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -495,8 +517,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -518,8 +539,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
@@ -542,7 +562,7 @@ def test_resources(self):
         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and
         # large Resource Registry cooked files, which all use the same
         # method to initiate a streamed response.
-        s = "a" * (1 << 16) * 3
+        s = 'a' * (1 << 16) * 3
         self.portal.manage_addFile('bigfile', file=StringIO(
             s), content_type='application/octet-stream')
 
@@ -558,8 +578,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
diff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py
index 8c2d764..bf0d2b9 100644
--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py
@@ -99,7 +99,7 @@ def test_composite_views(self):
         self.portal['f1'].invokeFactory('Document', 'd1')
         self.portal['f1']['d1'].title = u"Document one"
         self.portal['f1']['d1'].description = u"Document one description"
-        testText = "Testing... body one"
+        testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
@@ -127,8 +127,10 @@ def test_composite_views(self):
         # Request the quthenticated folder
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1'].absolute_url())
         self.assertEqual('plone.content.folderView',
                          browser.headers['X-Cache-Rule'])
@@ -137,8 +139,11 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s|0|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"|test_user_1_|{0}|en|{1}|0|0'.format(
+            catalog.getCounter(),
+            default_skin,
+        )
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -152,14 +157,19 @@ def test_composite_views(self):
                          browser.headers['X-Cache-Operation'])
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s|0|1' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"|test_user_1_|{0}|en|{1}|0|1'.format(
+            catalog.getCounter(),
+            default_skin,
+        )
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
 
         # Request the authenticated page
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertTrue(testText in browser.contents)
         self.assertEqual('plone.content.itemView',
@@ -169,15 +179,20 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"|test_user_1_|{0}|en|{1}|0'.format(
+            catalog.getCounter(),
+            default_skin,
+        )
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated page again -- to test RAM cache.
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
@@ -191,8 +206,10 @@ def test_composite_views(self):
         etag = browser.headers['ETag']
         browser = Browser(self.app)
         browser.raiseHttpErrors = False  # we really do want to see the 304
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.addHeader('If-None-Match', etag)
         browser.open(self.portal['f1']['d1'].absolute_url())
         # This should be a 304 response
@@ -210,8 +227,8 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s|0|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"||{0}|en|{1}|0|0'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -227,8 +244,8 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -247,8 +264,8 @@ def test_composite_views(self):
         self.assertTrue(testText in browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -267,7 +284,7 @@ def test_composite_views(self):
         self.assertEqual('', browser.contents)
 
         # Edit the page to update the etag
-        testText2 = "Testing... body two"
+        testText2 = 'Testing... body two'
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
@@ -315,8 +332,8 @@ def test_content_feeds(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -334,8 +351,8 @@ def test_content_feeds(self):
         self.assertEqual(rssText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -355,8 +372,12 @@ def test_content_feeds(self):
         # Request the authenticated rss feed
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization', 'Basic {0}:{1}'.format(
+                TEST_USER_NAME,
+                TEST_USER_PASSWORD,
+            )
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -364,15 +385,19 @@ def test_content_feeds(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s"' % (
+        self.assertEqual('"|test_user_1_|{0}|en|{1}"'.format(
             catalog.getCounter(), default_skin), browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization', 'Basic {0}:{1}'.format(
+                TEST_USER_NAME,
+                TEST_USER_PASSWORD,
+            )
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -413,8 +438,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -443,8 +467,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -464,8 +487,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
@@ -488,7 +510,7 @@ def test_resources(self):
         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and
         # large Resource Registry cooked files, which all use the same
         # method to initiate a streamed response.
-        s = "a" * (1 << 16) * 3
+        s = 'a' * (1 << 16) * 3
         self.portal.manage_addFile('bigfile', file=StringIO(
             s), content_type='application/octet-stream')
 
@@ -504,8 +526,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py
index 3435d5b..cea2089 100644
--- a/plone/app/caching/tests/test_purge.py
+++ b/plone/app/caching/tests/test_purge.py
@@ -222,7 +222,7 @@ def getRelativePaths(self):
             def getAbsolutePaths(self):
                 return ['/purgeme']
 
-        provideAdapter(FauxContentPurgePaths, name="testpurge")
+        provideAdapter(FauxContentPurgePaths, name='testpurge')
 
     def test_no_tool(self):
         root = FauxContent('')
diff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py
index 6d0c3ec..ef64189 100644
--- a/plone/app/caching/tests/test_utils.py
+++ b/plone/app/caching/tests/test_utils.py
@@ -139,7 +139,7 @@ def test_browserdefault(self):
         self.assertEqual('defaultView', getObjectDefaultView(context))
 
     def test_browserviewdefault(self):
-        context = DummyContent(defaultView="@@defaultView")
+        context = DummyContent(defaultView='@@defaultView')
         self.assertEqual('defaultView', getObjectDefaultView(context))
 
     def test_not_IBrowserDefault_methodid(self):
diff --git a/setup.py b/setup.py
index 35f073f..ebec01c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,7 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.2.14.dev0'
 


Repository: plone.app.caching


Branch: refs/heads/master
Date: 2016-11-01T20:46:44+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/d8c5ae4115a4b06872a3d7092141c540338b398e

Merge pull request #30 from plone/gforcada-cleanup

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/app/caching/browser/controlpanel.py
M plone/app/caching/browser/edit.py
M plone/app/caching/operations/default.py
M plone/app/caching/operations/etags.py
M plone/app/caching/operations/utils.py
M plone/app/caching/purge.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_lastmodified.py
M plone/app/caching/tests/test_lookup.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 583bef3..248d126 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Update code to follow Plone styleguide.
+  [gforcada]
 
 1.2.13 (2016-10-05)
 -------------------
diff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py
index b53d70d..1a22ee9 100644
--- a/plone/app/caching/browser/controlpanel.py
+++ b/plone/app/caching/browser/controlpanel.py
@@ -33,8 +33,8 @@
 
 # Borrowed from zope.schema to avoid an import of a private name
 _isuri = re.compile(
-    r"[a-zA-z0-9+.-]+:"   # scheme
-    r"\S*$"               # non space (should be pickier)
+    r'[a-zA-z0-9+.-]+:'   # scheme
+    r'\S*$'               # non space (should be pickier)
 ).match
 
 
@@ -162,7 +162,10 @@ def update(self):
                 self.processSave()
             elif 'form.button.Cancel' in self.request.form:
                 self.request.response.redirect(
-                    "%s/@@overview-controlpanel" % self.context.absolute_url())
+                    '{0}/@@overview-controlpanel'.format(
+                        self.context.absolute_url()
+                    )
+                )
 
     def processSave(self):
 
@@ -273,7 +276,7 @@ def processSave(self):
         # Validate purging settings
         for cachingProxy in cachingProxies:
             if not _isuri(cachingProxy):
-                self.errors['cachingProxies'] = _(u"Invalid URL: ${url}", mapping={'url': cachingProxy})  # noqa
+                self.errors['cachingProxies'] = _(u'Invalid URL: ${url}', mapping={'url': cachingProxy})  # noqa
 
         for domain in domains:
             if not _isuri(domain):
@@ -286,16 +289,16 @@ def processSave(self):
         try:
             ramCacheMaxEntries = int(ramCacheMaxEntries)
         except (ValueError, TypeError,):
-            self.errors['ramCacheMaxEntries'] = _(u"An integer is required.")
+            self.errors['ramCacheMaxEntries'] = _(u'An integer is required.')
         else:
             if ramCacheMaxEntries < 0:
                 self.errors['ramCacheMaxEntries'] = _(
-                    u"A positive number is required."
+                    u'A positive number is required.'
                 )
         try:
             ramCacheMaxAge = int(ramCacheMaxAge)
         except (ValueError, TypeError,):
-            self.errors['ramCacheMaxAge'] = _(u"An integer is required.")
+            self.errors['ramCacheMaxAge'] = _(u'An integer is required.')
         else:
             if ramCacheMaxAge < 0:
                 self.errors['ramCacheMaxAge'] = _(
@@ -317,7 +320,7 @@ def processSave(self):
         # Check for errors
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         # Save settings
@@ -476,7 +479,7 @@ def hasGlobalOptions(self, operationType):
             return False
 
         for option in options:
-            if '%s.%s' % (prefix, option,) in self.registry:
+            if '{0}.{1}'.format(prefix, option,) in self.registry:
                 return True
 
         return False
@@ -489,7 +492,7 @@ def hasRulesetOptions(self, operationType, ruleset):
             return False
 
         for option in options:
-            if '%s.%s.%s' % (prefix, ruleset, option,) in self.registry:
+            if '{0}.{1}.{2}'.format(prefix, ruleset, option,) in self.registry:
                 return True
 
         return False
@@ -509,26 +512,28 @@ def processImport(self):
         snapshot = self.request.form.get('snapshot', True)
 
         if not profile:
-            self.errors['profile'] = _(u"You must select a profile to import.")
+            self.errors['profile'] = _(u'You must select a profile to import.')
 
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         portal_setup = getToolByName(self.context, 'portal_setup')
 
         # Create a snapshot
         if snapshot:
-            snapshotId = "plone.app.caching.beforeimport.%s" % (
+            snapshotId = 'plone.app.caching.beforeimport.{0}'.format(
                 datetime.datetime.now().isoformat().replace(':', '.'))
             portal_setup.createSnapshot(snapshotId)
 
         # Import the new profile
-        portal_setup.runAllImportStepsFromProfile("profile-%s" % profile)
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-{0}'.format(profile)
+        )
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Import complete."), "info")
+            _(u'Import complete.'), 'info')
 
     @property
     @memoize
@@ -558,11 +563,11 @@ def processPurge(self):
         sync = self.request.form.get('synchronous', True)
 
         if not urls:
-            self.errors['urls'] = _(u"No URLs or paths entered.")
+            self.errors['urls'] = _(u'No URLs or paths entered.')
 
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         purger = getUtility(IPurger)
@@ -574,11 +579,11 @@ def purge(url):
 
                 log = url
                 if xcache:
-                    log += " (X-Cache header: " + xcache + ")"
+                    log += ' (X-Cache header: ' + xcache + ')'
                 if xerror:
-                    log += " -- " + xerror
+                    log += ' -- ' + xerror
                 if not str(status).startswith('2'):
-                    log += " -- WARNING status " + str(status)
+                    log += ' -- WARNING status ' + str(status)
                 self.purgeLog.append(log)
             else:
                 purger.purgeAsync(url)
@@ -638,13 +643,13 @@ def processPurge(self):
 
         if self.ramCache is None:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"RAM cache not installed."), "error")
+                _(u'RAM cache not installed.'), 'error')
 
         if self.errors:
             IStatusMessage(self.request).addStatusMessage(
-                _(u"There were errors."), "error")
+                _(u'There were errors.'), 'error')
             return
 
         self.ramCache.invalidateAll()
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Cache purged."), "info")
+            _(u'Cache purged.'), 'info')
diff --git a/plone/app/caching/browser/edit.py b/plone/app/caching/browser/edit.py
index 3522a86..fb67701 100644
--- a/plone/app/caching/browser/edit.py
+++ b/plone/app/caching/browser/edit.py
@@ -95,11 +95,14 @@ def update(self):
 
         for option in self.operation.options:
             newField = None
-            fieldName = "%s.%s" % (prefix, option)
+            fieldName = '{0}.{1}'.format(prefix, option)
 
             if self.rulesetName:
-                rulesetFieldName = "%s.%s.%s" % (
-                    prefix, self.rulesetName, option)
+                rulesetFieldName = '{0}.{1}.{2}'.format(
+                    prefix,
+                    self.rulesetName,
+                    option,
+                )
 
                 if rulesetFieldName in self.registry.records:
                     newField = self.cloneField(self.registry.records[
@@ -149,14 +152,14 @@ def getContent(self):
         options = self.operation.options
 
         for option in options:
-            recordName = "%s.%s" % (prefix, option,)
+            recordName = '{0}.{1}'.format(prefix, option,)
 
             # If a ruleset-specific record does not exist, we can fall back on
             # a global record, since the per-ruleset records will be created
             # as necessary in applyChanges()
 
             if self.rulesetName:
-                rulesetRecordName = "%s.%s.%s" % (
+                rulesetRecordName = '{0}{1}{2}'.format(
                     prefix, self.rulesetName, option,)
 
                 if rulesetRecordName in self.registry.records:
@@ -255,7 +258,7 @@ def save(self, action):
     @button.buttonAndHandler(_(u'Cancel'), name='cancel')
     def cancel(self, action):
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Edit cancelled."), type="info")
+            _(u"Edit cancelled."), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
                 self.context.absolute_url()
@@ -269,14 +272,17 @@ def cancel(self, action):
     )
     def clear(self, action):
         for key in self.getContent().keys():
-            assert key.startswith("%s.%s." % (
-                self.operation.prefix, self.rulesetName,))
+            key_suffix = '{0}.{1}.'.format(
+                self.operation.prefix,
+                self.rulesetName,
+            )
+            assert key.startswith(key_suffix)
 
             if key in self.registry.records:
                 del self.registry.records[key]
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Ruleset-specific settings removed."), type="info")
+            _(u"Ruleset-specific settings removed."), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
                 self.context.absolute_url()
diff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py
index a265f1c..b5c6c1a 100644
--- a/plone/app/caching/operations/default.py
+++ b/plone/app/caching/operations/default.py
@@ -165,7 +165,7 @@ def modifyResponse(self, rulename, response, class_=None):
         if cacheStop(self.request, rulename):
             # only stop with etags if configured
             if etags:
-                etag = "%s%d" % (time.time(), random.randint(0, 1000))
+                etag = '{0}{1}'.format(time.time(), random.randint(0, 1000))
                 return setCacheHeaders(
                     self.published,
                     self.request,
diff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py
index 1e285d4..b7cc2a9 100644
--- a/plone/app/caching/operations/etags.py
+++ b/plone/app/caching/operations/etags.py
@@ -235,7 +235,7 @@ def __call__(self):
             return None
         if portal_state.anonymous():
             return None
-        return "%s%d" % (time.time(), random.randint(0, 1000))
+        return '{0}{1}'.format(time.time(), random.randint(0, 1000))
 
 
 @implementer(IETagValue)
diff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py
index e7bc0b1..7fc8f23 100644
--- a/plone/app/caching/operations/utils.py
+++ b/plone/app/caching/operations/utils.py
@@ -132,7 +132,7 @@ def cacheInBrowser(published, request, response, etag=None, lastModified=None):
     """
 
     if etag is not None:
-        response.setHeader('ETag', '"%s"' % etag, literal=1)
+        response.setHeader('ETag', '"{0}"'.format(etag), literal=1)
 
     if lastModified is not None:
         response.setHeader('Last-Modified', formatDateTime(lastModified))
@@ -169,14 +169,16 @@ def cacheInProxy(
         del response.headers['last-modified']
 
     if etag is not None:
-        response.setHeader('ETag', '"%s"' % etag, literal=1)
+        response.setHeader('ETag', '"{0}"'.format(etag), literal=1)
 
     if vary is not None:
         response.setHeader('Vary', vary)
 
     response.setHeader('Expires', formatDateTime(getExpiration(0)))
     response.setHeader(
-        'Cache-Control', 'max-age=0, s-maxage=%d, must-revalidate' % smaxage)
+        'Cache-Control',
+        'max-age=0, s-maxage={0}, must-revalidate'.format(smaxage),
+    )
 
 
 def cacheInBrowserAndProxy(
@@ -205,7 +207,7 @@ def cacheInBrowserAndProxy(
         del response.headers['last-modified']
 
     if etag is not None:
-        response.setHeader('ETag', '"%s"' % etag, literal=1)
+        response.setHeader('ETag', '"{0}"'.format(etag), literal=1)
 
     if vary is not None:
         response.setHeader('Vary', vary)
@@ -213,14 +215,14 @@ def cacheInBrowserAndProxy(
     response.setHeader('Expires', formatDateTime(getExpiration(maxage)))
 
     if smaxage is not None:
-        maxage = '%s, s-maxage=%s' % (maxage, smaxage)
+        maxage = '{0}, s-maxage={1}'.format(maxage, smaxage)
 
     # Substituting proxy-validate in place of must=revalidate here because of
     # Safari bug
     # https://bugs.webkit.org/show_bug.cgi?id=13128
     response.setHeader(
         'Cache-Control',
-        'max-age=%s, proxy-revalidate, public' % maxage
+        'max-age={0}, proxy-revalidate, public'.format(maxage)
     )
 
 
@@ -328,7 +330,7 @@ def notModified(published, request, response, etag=None, lastModified=None):
         del response.headers['cache-control']
 
     response.setStatus(304)
-    return u""
+    return u''
 
 
 #
@@ -422,7 +424,7 @@ def isModified(request, etag=None, lastModified=None):
             if (lastModified - ifModifiedSince) > delta_sec:
                 return True
         except TypeError:
-            logger.exception("Could not compare dates")
+            logger.exception('Could not compare dates')
 
         # If we expected an ETag and the client didn't give us one, consider
         # that an error. This may be more conservative than the spec requires.
@@ -468,7 +470,7 @@ def checkType(context):
     while (
         published is not None and
         not checkType(published) and
-        hasattr(published, '__parent__',)
+        getattr(published, '__parent__')
     ):
         published = published.__parent__
 
@@ -622,7 +624,7 @@ def getETag(published, request, keys=(), extraTokens=()):
             (published, request), IETagValue, name=key)
         if component is None:
             logger.warning(
-                "Could not find value adapter for ETag component %s", key)
+                'Could not find value adapter for ETag component %s', key)
             tokens.append('')
         else:
             value = component()
@@ -729,7 +731,7 @@ def getRAMCacheKey(request, etag=None, lastModified=None):
     is needed to ensure the key changes when the resource view changes.
     """
 
-    resourceKey = "%s%s?%s" % (
+    resourceKey = '{0}{1}?{2}'.format(
         request.get('SERVER_URL', ''),
         request.get('PATH_INFO', ''),
         request.get('QUERY_STRING', ''),
diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py
index 3b87cec..2952984 100644
--- a/plone/app/caching/purge.py
+++ b/plone/app/caching/purge.py
@@ -187,12 +187,12 @@ def fieldFilter(field):
 
                 yield prefix + '/at_download/' + field.getName()
 
-                fieldURL = "%s/%s" % (prefix, field.getName(),)
+                fieldURL = '{0}/{1}'.format(prefix, field.getName(),)
                 yield fieldURL
 
                 if IImageField.providedBy(field):
                     for size in field.getAvailableSizes(self.context).keys():
-                        yield "%s_%s" % (fieldURL, size,)
+                        yield '{0}_{1}'.format(fieldURL, size,)
 
         def getAbsolutePaths(self):
             return []
diff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py
index 77cc985..cef39c2 100644
--- a/plone/app/caching/tests/test_integration.py
+++ b/plone/app/caching/tests/test_integration.py
@@ -125,7 +125,10 @@ def test_disabled(self):
 
         # OFS image (custom folder)
         OFS.Image.manage_addImage(
-            self.portal['portal_skins']['custom'], 'test.gif', open(TEST_IMAGE, 'rb'))
+            self.portal['portal_skins']['custom'],
+            'test.gif',
+            open(TEST_IMAGE, 'rb')
+        )
 
         setRoles(self.portal, TEST_USER_ID, ('Member',))
 
@@ -182,9 +185,10 @@ def test_auto_purge_content_types(self):
         self.cachePurgingSettings.cachingProxies = ()
         self.ploneCacheSettings.purgedContentTypes = ()
 
-        editURL = '%s/edit?_authenticator=%s' % (
+        editURL = '{0}/edit?_authenticator={1}'.format(
             self.portal['d1'].absolute_url(),
-            getToken(TEST_USER_NAME))
+            getToken(TEST_USER_NAME)
+        )
 
         import transaction
         transaction.commit()
@@ -193,7 +197,8 @@ def test_auto_purge_content_types(self):
         browser.handleErrors = False
         browser.addHeader(
             'Authorization',
-            'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
 
         browser.open(editURL)
 
diff --git a/plone/app/caching/tests/test_lastmodified.py b/plone/app/caching/tests/test_lastmodified.py
index 975566a..8a8738d 100644
--- a/plone/app/caching/tests/test_lastmodified.py
+++ b/plone/app/caching/tests/test_lastmodified.py
@@ -126,7 +126,8 @@ def test_FSObjectLastModified_FSFile(self):
         modtime = float(os.path.getmtime(__file__))
         mod = datetime.datetime.fromtimestamp(modtime, tzlocal())
 
-        format = "%y%m%d%H%M%s"  # see note in test_FSObjectLastModified_FSImage
+        # see note in test_FSObjectLastModified_FSImage
+        format = '%y%m%d%H%M%s'
         self.assertEqual(mod.strftime(format),
                          ILastModified(dummy)().strftime(format))
 
@@ -136,10 +137,10 @@ def test_FSObjectLastModified_FSImage(self):
         dummy = FSImage('dummy', __file__)  # not really an image, but anyway
         modtime = float(os.path.getmtime(__file__))
         mod = datetime.datetime.fromtimestamp(modtime, tzlocal())
-        # different filesystems seem to handle datetime differently. some use microseconds
-        # and others don't so to make jenkins happy lets omit the microseconds
-        # factor
-        format = "%y%m%d%H%M%s"
+        # different filesystems seem to handle datetime differently.
+        # Some use microseconds and others don't so to make jenkins happy,
+        # lets omit the microseconds factor
+        format = '%y%m%d%H%M%s'
         self.assertEqual(mod.strftime(format),
                          ILastModified(dummy)().strftime(format))
 
diff --git a/plone/app/caching/tests/test_lookup.py b/plone/app/caching/tests/test_lookup.py
index de0d1f6..282d967 100644
--- a/plone/app/caching/tests/test_lookup.py
+++ b/plone/app/caching/tests/test_lookup.py
@@ -254,7 +254,11 @@ def test_parent_not_IBrowserDefault_actiononly(self):
         ploneSettings.contentTypeRulesetMapping = {'testtype': 'rule1'}
 
         published = ZopePageTemplate('defaultView').__of__(
-            DummyNotBrowserDefault('testtype', 'string:${object_url}/defaultView'))
+            DummyNotBrowserDefault(
+                'testtype',
+                'string:${object_url}/defaultView'
+            )
+        )
         request = DummyRequest(published, DummyResponse())
 
         self.assertEqual('rule1', ContentItemLookup(published, request)())
diff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py
index f2fe0ca..b098994 100644
--- a/plone/app/caching/tests/test_operation_default.py
+++ b/plone/app/caching/tests/test_operation_default.py
@@ -57,23 +57,28 @@ def test_last_modified_no_etags(self):
 
         # log in and create a content type
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' % (
-            TEST_USER_NAME, TEST_USER_PASSWORD,))
-        browser.open("%s/++add++Document" % self.portal['f1'].absolute_url())
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
+        browser.open('{0}/++add++Document'.format(
+            self.portal['f1'].absolute_url())
+        )
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = "dummy content"
+            name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
         self.assertFalse('Etag' in browser.headers)
 
         # now set up etags and make sure that a header is added
         self.registry['plone.app.caching.weakCaching.etags'] = (
-            'lastModified',)
+            'lastModified',
+        )
         import transaction
         transaction.commit()
-        browser.open("%s/dummy-content/edit?_authenticator=%s" % (
+        browser.open('{0}/dummy-content/edit?_authenticator={1}'.format(
             self.portal['f1'].absolute_url(),
             getToken(TEST_USER_NAME)))
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = "dummy content"
+            name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
         self.assertTrue('Etag' in browser.headers)
diff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py
index c49f2e2..5bded43 100644
--- a/plone/app/caching/tests/test_operation_parameters.py
+++ b/plone/app/caching/tests/test_operation_parameters.py
@@ -48,7 +48,7 @@ def test_anon_only(self):
         self.portal['f1'].invokeFactory('Document', 'd1')
         self.portal['f1']['d1'].title = u"Document one"
         self.portal['f1']['d1'].description = u"Document one description"
-        testText = "Testing... body one"
+        testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
@@ -104,8 +104,10 @@ def test_anon_only(self):
 
         # View the page as logged-in
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
@@ -140,8 +142,10 @@ def test_anon_only(self):
 
         # View the page as logged-in
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
diff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py
index 4a61d12..1115f2b 100644
--- a/plone/app/caching/tests/test_operation_utils.py
+++ b/plone/app/caching/tests/test_operation_utils.py
@@ -126,7 +126,7 @@ def test_cacheInBrowser_etag(self):
         published = DummyPublished()
 
         now = datetime.datetime.now(dateutil.tz.tzlocal())
-        etag = "|foo|bar|"
+        etag = '|foo|bar|'
 
         cacheInBrowser(published, request, response, etag=etag)
 
@@ -171,7 +171,7 @@ def test_cacheInBrowser_lastModified_and_etag(self):
         published = DummyPublished()
 
         now = datetime.datetime.now(dateutil.tz.tzlocal())
-        etag = "|foo|bar|"
+        etag = '|foo|bar|'
 
         nowFormatted = wsgiref.handlers.format_date_time(
             time.mktime(now.timetuple()))
@@ -298,13 +298,15 @@ def test_cacheInBrowserAndProxy_full(self):
         self.assertEqual('Accept-Language', response.getHeader('Vary'))
 
         timedelta = dateutil.parser.parse(response.getHeader('Expires')) - now
+        delta = datetime.timedelta(seconds=58)
         self.assertFalse(
-            timedelta < datetime.timedelta(seconds=58),
-            "%s is not < %s" % (timedelta, datetime.timedelta(seconds=58))
+            timedelta < delta,
+            '{0} is not < {1}'.format(timedelta, delta)
         )
+        delta = datetime.timedelta(seconds=61)
         self.assertFalse(
-            timedelta > datetime.timedelta(seconds=61),
-            "%s is not > %s" % (timedelta, datetime.timedelta(seconds=61))
+            timedelta > delta,
+            '{0} is not > {1}'.format(timedelta, delta)
         )
 
     # cacheInRAM()
@@ -327,7 +329,7 @@ def test_cacheInRAM_no_etag(self):
         cacheInRAM(published, request, response)
 
         annotations = IAnnotations(request)
-        self.assertEqual("http://example.com/foo?",
+        self.assertEqual('http://example.com/foo?',
                          annotations[PAGE_CACHE_ANNOTATION_KEY])
         self.assertTrue(IRAMCached.providedBy(request))
 
@@ -350,7 +352,7 @@ def test_cacheInRAM_etag(self):
         cacheInRAM(published, request, response, etag=etag)
 
         annotations = IAnnotations(request)
-        self.assertEqual("||foo|bar|||http://example.com/foo?",
+        self.assertEqual('||foo|bar|||http://example.com/foo?',
                          annotations[PAGE_CACHE_ANNOTATION_KEY])
         self.assertTrue(IRAMCached.providedBy(request))
 
@@ -370,11 +372,11 @@ def test_cacheInRAM_etag_alternate_key(self):
         assert not IRAMCached.providedBy(response)
 
         cacheInRAM(published, request, response,
-                   etag=etag, annotationsKey="alt.key")
+                   etag=etag, annotationsKey='alt.key')
 
         annotations = IAnnotations(request)
-        self.assertEqual("||foo|bar|||http://example.com/foo?",
-                         annotations["alt.key"])
+        self.assertEqual('||foo|bar|||http://example.com/foo?',
+                         annotations['alt.key'])
         self.assertTrue(IRAMCached.providedBy(request))
 
 
@@ -514,7 +516,7 @@ def test_notModified_full(self):
         response.setStatus(200)
 
         now = datetime.datetime.now(dateutil.tz.tzlocal())
-        etag = "|foo|bar|"
+        etag = '|foo|bar|'
 
         body = notModified(published, request, response,
                            etag=etag, lastModified=now)
@@ -924,7 +926,7 @@ def test_formatDateTime_naive(self):
     def test_parseDateTime_invalid(self):
         from plone.app.caching.operations.utils import parseDateTime
 
-        self.assertEqual(None, parseDateTime("foo"))
+        self.assertEqual(None, parseDateTime('foo'))
 
     def test_parseDateTime_rfc1123(self):
         from plone.app.caching.operations.utils import parseDateTime
@@ -1306,7 +1308,7 @@ def test_getRAMCacheKey_etag(self):
         request.environ['QUERY_STRING'] = 'x=1&y=2'
 
         self.assertEqual('||foo|bar||http://example.com/foo/bar?x=1&y=2',
-                         getRAMCacheKey(request, etag="|foo|bar"))
+                         getRAMCacheKey(request, etag='|foo|bar'))
 
     # storeResponseInRAMCache()
 
@@ -1527,7 +1529,7 @@ def __call__(self, key):
         )
 
         cached = normalize_response_cache(
-            fetchFromRAMCache(request, etag="|a|b"))
+            fetchFromRAMCache(request, etag='|a|b'))
         self.assertEqual((200, {'x-foo': 'bar'}, u'Body'), cached)
 
     def test_fetchFromRAMCache_custom_key(self):
diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py
index ec4ca9f..8098527 100644
--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py
@@ -99,7 +99,7 @@ def test_composite_views(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = "one"
+        self.portal['f1'].title = 'one'
         self.portal['f1'].description = u"Folder one description"
         self.portal['f1'].reindexObject()
 
@@ -107,7 +107,7 @@ def test_composite_views(self):
         self.portal['f1'].invokeFactory('Document', 'd1')
         self.portal['f1']['d1'].title = u"Document one"
         self.portal['f1']['d1'].description = u"Document one description"
-        testText = "Testing... body one"
+        testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
@@ -135,8 +135,10 @@ def test_composite_views(self):
         # Request the authenticated folder
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1'].absolute_url())
         self.assertEqual('plone.content.folderView',
                          browser.headers['X-Cache-Rule'])
@@ -166,8 +168,10 @@ def test_composite_views(self):
         # Request the authenticated page
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertTrue(testText in browser.contents)
         self.assertEqual('plone.content.itemView',
@@ -184,8 +188,10 @@ def test_composite_views(self):
 
         # Request the authenticated page again -- to test RAM cache.
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
@@ -199,8 +205,10 @@ def test_composite_views(self):
         etag = browser.headers['ETag']
         browser = Browser(self.app)
         browser.raiseHttpErrors = False  # we really do want to see the 304
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.addHeader('If-None-Match', etag)
         browser.open(self.portal['f1']['d1'].absolute_url())
         # This should be a 304 response
@@ -275,7 +283,7 @@ def test_composite_views(self):
         self.assertEqual('', browser.contents)
 
         # Edit the page to update the etag
-        testText2 = "Testing... body two"
+        testText2 = 'Testing... body two'
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
@@ -324,8 +332,11 @@ def test_content_feeds(self):
         # This should use cacheInProxy
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           skins_tool.default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(
+            catalog.getCounter(),
+            skins_tool.default_skin,
+        )
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -343,8 +354,11 @@ def test_content_feeds(self):
         self.assertEqual(rssText, browser.contents)
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           skins_tool.default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(
+            catalog.getCounter(),
+            skins_tool.default_skin,
+        )
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -364,8 +378,10 @@ def test_content_feeds(self):
         # Request the authenticated rss feed
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
@@ -373,15 +389,20 @@ def test_content_feeds(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s"' % (
-            catalog.getCounter(), skins_tool.default_skin), browser.headers['ETag'])
+        tag = '"|test_user_1_|{0}|en|{1}"'.format(
+            catalog.getCounter(),
+            skins_tool.default_skin,
+        )
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
@@ -411,8 +432,10 @@ def test_content_files(self):
         # Request the image with Manager role
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['i1'].absolute_url())
         self.assertEqual('plone.content.file', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
@@ -422,8 +445,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -431,8 +453,10 @@ def test_content_files(self):
         now = stable_now()
         browser = Browser(self.app)
         browser.handleErrors = False
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),
+        )
         browser.open(self.portal['f1'][
                      'i1'].absolute_url() + '/@@images/image/preview')
         self.assertEqual('plone.content.file', browser.headers['X-Cache-Rule'])
@@ -443,8 +467,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -465,8 +488,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -495,8 +517,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, s-maxage=86400, must-revalidate',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -518,8 +539,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
@@ -542,7 +562,7 @@ def test_resources(self):
         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and
         # large Resource Registry cooked files, which all use the same
         # method to initiate a streamed response.
-        s = "a" * (1 << 16) * 3
+        s = 'a' * (1 << 16) * 3
         self.portal.manage_addFile('bigfile', file=StringIO(
             s), content_type='application/octet-stream')
 
@@ -558,8 +578,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
diff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py
index 8c2d764..bf0d2b9 100644
--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py
@@ -99,7 +99,7 @@ def test_composite_views(self):
         self.portal['f1'].invokeFactory('Document', 'd1')
         self.portal['f1']['d1'].title = u"Document one"
         self.portal['f1']['d1'].description = u"Document one description"
-        testText = "Testing... body one"
+        testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
@@ -127,8 +127,10 @@ def test_composite_views(self):
         # Request the quthenticated folder
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1'].absolute_url())
         self.assertEqual('plone.content.folderView',
                          browser.headers['X-Cache-Rule'])
@@ -137,8 +139,11 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s|0|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"|test_user_1_|{0}|en|{1}|0|0'.format(
+            catalog.getCounter(),
+            default_skin,
+        )
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -152,14 +157,19 @@ def test_composite_views(self):
                          browser.headers['X-Cache-Operation'])
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s|0|1' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"|test_user_1_|{0}|en|{1}|0|1'.format(
+            catalog.getCounter(),
+            default_skin,
+        )
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
 
         # Request the authenticated page
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertTrue(testText in browser.contents)
         self.assertEqual('plone.content.itemView',
@@ -169,15 +179,20 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"|test_user_1_|{0}|en|{1}|0'.format(
+            catalog.getCounter(),
+            default_skin,
+        )
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated page again -- to test RAM cache.
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.open(self.portal['f1']['d1'].absolute_url())
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
@@ -191,8 +206,10 @@ def test_composite_views(self):
         etag = browser.headers['ETag']
         browser = Browser(self.app)
         browser.raiseHttpErrors = False  # we really do want to see the 304
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization',
+            'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
+        )
         browser.addHeader('If-None-Match', etag)
         browser.open(self.portal['f1']['d1'].absolute_url())
         # This should be a 304 response
@@ -210,8 +227,8 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s|0|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"||{0}|en|{1}|0|0'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -227,8 +244,8 @@ def test_composite_views(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -247,8 +264,8 @@ def test_composite_views(self):
         self.assertTrue(testText in browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s|0' % (
-            catalog.getCounter(), default_skin), _normalize_etag(browser.headers['ETag']))
+        tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -267,7 +284,7 @@ def test_composite_views(self):
         self.assertEqual('', browser.contents)
 
         # Edit the page to update the etag
-        testText2 = "Testing... body two"
+        testText2 = 'Testing... body two'
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
@@ -315,8 +332,8 @@ def test_content_feeds(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -334,8 +351,8 @@ def test_content_feeds(self):
         self.assertEqual(rssText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"||%d|en|%s"' % (catalog.getCounter(),
-                                           default_skin), browser.headers['ETag'])
+        tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
+        self.assertEqual(tag, browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -355,8 +372,12 @@ def test_content_feeds(self):
         # Request the authenticated rss feed
         now = stable_now()
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization', 'Basic {0}:{1}'.format(
+                TEST_USER_NAME,
+                TEST_USER_PASSWORD,
+            )
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -364,15 +385,19 @@ def test_content_feeds(self):
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertEqual('"|test_user_1_|%d|en|%s"' % (
+        self.assertEqual('"|test_user_1_|{0}|en|{1}"'.format(
             catalog.getCounter(), default_skin), browser.headers['ETag'])
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
         browser = Browser(self.app)
-        browser.addHeader('Authorization', 'Basic %s:%s' %
-                          (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        browser.addHeader(
+            'Authorization', 'Basic {0}:{1}'.format(
+                TEST_USER_NAME,
+                TEST_USER_PASSWORD,
+            )
+        )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -413,8 +438,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -443,8 +467,7 @@ def test_content_files(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         self.assertTrue(now > dateutil.parser.parse(
             browser.headers['Expires']))
 
@@ -464,8 +487,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
@@ -488,7 +510,7 @@ def test_resources(self):
         # large OFS.Image.Image, large non-blog ATImages/ATFiles, and
         # large Resource Registry cooked files, which all use the same
         # method to initiate a streamed response.
-        s = "a" * (1 << 16) * 3
+        s = 'a' * (1 << 16) * 3
         self.portal.manage_addFile('bigfile', file=StringIO(
             s), content_type='application/octet-stream')
 
@@ -504,8 +526,7 @@ def test_resources(self):
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         # remove this when the next line works
-        self.assertFalse(None == browser.headers.get('Last-Modified'))
-        #self.assertEqual('---lastmodified---', browser.headers['Last-Modified'])
+        self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
         self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
 
diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py
index 3435d5b..cea2089 100644
--- a/plone/app/caching/tests/test_purge.py
+++ b/plone/app/caching/tests/test_purge.py
@@ -222,7 +222,7 @@ def getRelativePaths(self):
             def getAbsolutePaths(self):
                 return ['/purgeme']
 
-        provideAdapter(FauxContentPurgePaths, name="testpurge")
+        provideAdapter(FauxContentPurgePaths, name='testpurge')
 
     def test_no_tool(self):
         root = FauxContent('')
diff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py
index 6d0c3ec..ef64189 100644
--- a/plone/app/caching/tests/test_utils.py
+++ b/plone/app/caching/tests/test_utils.py
@@ -139,7 +139,7 @@ def test_browserdefault(self):
         self.assertEqual('defaultView', getObjectDefaultView(context))
 
     def test_browserviewdefault(self):
-        context = DummyContent(defaultView="@@defaultView")
+        context = DummyContent(defaultView='@@defaultView')
         self.assertEqual('defaultView', getObjectDefaultView(context))
 
     def test_not_IBrowserDefault_methodid(self):
diff --git a/setup.py b/setup.py
index 35f073f..ebec01c 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,7 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.2.14.dev0'
 


