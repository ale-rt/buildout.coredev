Repository: plone.app.workflow


Branch: refs/heads/2.2.x
Date: 2017-04-18T14:56:11+02:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.workflow/commit/d74d98972d7f55a4cf0c14184a4b785a5d37dd5a

Remove usage of 'Change portal events' permission

Files changed:
M CHANGES.rst
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_simple_publication_workflow.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f2e7211..c590aff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Remove usage of 'Change portal events' permission.
+  [gforcada]
 
 
 2.2.7 (2017-02-12)
diff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py
index e278d55..15a9340 100644
--- a/plone/app/workflow/tests/test_one_state_workflow.py
+++ b/plone/app/workflow/tests/test_one_state_workflow.py
@@ -4,7 +4,6 @@
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
-ChangeEvents = 'Change portal events'
 
 
 class TestOneStateWorkflow(WorkflowTestCase):
@@ -104,31 +103,6 @@ def testModifyPublishedDocument(self):
         self.login('reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
-    # Check change events permission
-
-    def testChangeEventsIsNotAcquiredInPublishedState(self):
-        # since r104169 event content doesn't use `ChangeEvents` anymore...
-        self.assertEqual(self.ni.acquiredRolesAreUsedBy(ModifyPortalContent), '')
-
-    def testModifyPublishEvent(self):
-        # Owner is allowed
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Editor is allowed
-        self.login('editor')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Reader is denied
-        self.login('reader')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
 
 def test_suite():
     from unittest import TestSuite, makeSuite
diff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py
index 068b372..e0acf8e 100644
--- a/plone/app/workflow/tests/test_plone_workflow.py
+++ b/plone/app/workflow/tests/test_plone_workflow.py
@@ -5,7 +5,6 @@
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
-ChangeEvents = 'Change portal events'
 
 
 class TestDefaultWorkflow(WorkflowTestCase):
@@ -338,65 +337,6 @@ def testModifyPortalContentIsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
 
-    # Check change events permission
-
-    def testModifyVisibleEvent(self):
-        # Owner is allowed
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPrivateEvent(self):
-        self.workflow.doActionFor(self.ni, 'hide')
-        # Owner is allowed
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPendingEvent(self):
-        self.workflow.doActionFor(self.ni, 'submit')
-        # Owner is denied
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is allowed
-        self.login('reviewer')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPublishedEvent(self):
-        self.login('reviewer')
-        self.workflow.doActionFor(self.ni, 'publish')
-        # Owner is denied
-        self.login(TEST_USER_NAME)
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
     # Check catalog search
 
     def testFindVisibleDocument(self):
diff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py
index 38a8163..9039992 100644
--- a/plone/app/workflow/tests/test_simple_publication_workflow.py
+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py
@@ -5,7 +5,6 @@
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
-ChangeEvents = 'Change portal events'
 
 
 class TestSimplePublicationWorkflow(WorkflowTestCase):
@@ -208,53 +207,6 @@ def testModifyPublishedDocument(self):
         self.login('reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
-    # Check change events permission
-
-    def testModifyPrivateEvent(self):
-        self.assertEqual(self.workflow.getInfoFor(self.ni, 'review_state'), 'private')
-        # Owner is allowed
-        self.login(TEST_USER_NAME)
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Editor is allowed
-        self.login('editor')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Reader is denied
-        self.login('reader')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPublishEvent(self):
-        # transition requires Review portal content
-        self.login('manager')
-        self.workflow.doActionFor(self.ni, 'publish')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Owner is allowed
-        self.login(TEST_USER_NAME)
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Editor is allowed
-        self.login('editor')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Reader is denied
-        self.login('reader')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
 
 def test_suite():
     from unittest import TestSuite, makeSuite


Repository: plone.app.workflow


Branch: refs/heads/2.2.x
Date: 2017-04-18T21:55:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.workflow/commit/35a958a1d4f4c0a237aa75babcbc03ca1cece0aa

Merge pull request #13 from plone/cleanup-change-events

Remove usage of 'Change portal events' permission

Files changed:
M CHANGES.rst
M plone/app/workflow/tests/test_one_state_workflow.py
M plone/app/workflow/tests/test_plone_workflow.py
M plone/app/workflow/tests/test_simple_publication_workflow.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f2e7211..c590aff 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Remove usage of 'Change portal events' permission.
+  [gforcada]
 
 
 2.2.7 (2017-02-12)
diff --git a/plone/app/workflow/tests/test_one_state_workflow.py b/plone/app/workflow/tests/test_one_state_workflow.py
index e278d55..15a9340 100644
--- a/plone/app/workflow/tests/test_one_state_workflow.py
+++ b/plone/app/workflow/tests/test_one_state_workflow.py
@@ -4,7 +4,6 @@
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
-ChangeEvents = 'Change portal events'
 
 
 class TestOneStateWorkflow(WorkflowTestCase):
@@ -104,31 +103,6 @@ def testModifyPublishedDocument(self):
         self.login('reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
-    # Check change events permission
-
-    def testChangeEventsIsNotAcquiredInPublishedState(self):
-        # since r104169 event content doesn't use `ChangeEvents` anymore...
-        self.assertEqual(self.ni.acquiredRolesAreUsedBy(ModifyPortalContent), '')
-
-    def testModifyPublishEvent(self):
-        # Owner is allowed
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Editor is allowed
-        self.login('editor')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Reader is denied
-        self.login('reader')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
 
 def test_suite():
     from unittest import TestSuite, makeSuite
diff --git a/plone/app/workflow/tests/test_plone_workflow.py b/plone/app/workflow/tests/test_plone_workflow.py
index 068b372..e0acf8e 100644
--- a/plone/app/workflow/tests/test_plone_workflow.py
+++ b/plone/app/workflow/tests/test_plone_workflow.py
@@ -5,7 +5,6 @@
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
-ChangeEvents = 'Change portal events'
 
 
 class TestDefaultWorkflow(WorkflowTestCase):
@@ -338,65 +337,6 @@ def testModifyPortalContentIsNotAcquiredInPublishedState(self):
         self.workflow.doActionFor(self.doc, 'publish')
         self.assertEqual(self.doc.acquiredRolesAreUsedBy(ModifyPortalContent), '')
 
-    # Check change events permission
-
-    def testModifyVisibleEvent(self):
-        # Owner is allowed
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPrivateEvent(self):
-        self.workflow.doActionFor(self.ni, 'hide')
-        # Owner is allowed
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPendingEvent(self):
-        self.workflow.doActionFor(self.ni, 'submit')
-        # Owner is denied
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is allowed
-        self.login('reviewer')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPublishedEvent(self):
-        self.login('reviewer')
-        self.workflow.doActionFor(self.ni, 'publish')
-        # Owner is denied
-        self.login(TEST_USER_NAME)
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
     # Check catalog search
 
     def testFindVisibleDocument(self):
diff --git a/plone/app/workflow/tests/test_simple_publication_workflow.py b/plone/app/workflow/tests/test_simple_publication_workflow.py
index 38a8163..9039992 100644
--- a/plone/app/workflow/tests/test_simple_publication_workflow.py
+++ b/plone/app/workflow/tests/test_simple_publication_workflow.py
@@ -5,7 +5,6 @@
 from Products.CMFCore.permissions import AccessContentsInformation
 from Products.CMFCore.permissions import View
 from Products.CMFCore.permissions import ModifyPortalContent
-ChangeEvents = 'Change portal events'
 
 
 class TestSimplePublicationWorkflow(WorkflowTestCase):
@@ -208,53 +207,6 @@ def testModifyPublishedDocument(self):
         self.login('reader')
         self.assertFalse(checkPerm(ModifyPortalContent, self.doc))
 
-    # Check change events permission
-
-    def testModifyPrivateEvent(self):
-        self.assertEqual(self.workflow.getInfoFor(self.ni, 'review_state'), 'private')
-        # Owner is allowed
-        self.login(TEST_USER_NAME)
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Editor is allowed
-        self.login('editor')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Reader is denied
-        self.login('reader')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
-    def testModifyPublishEvent(self):
-        # transition requires Review portal content
-        self.login('manager')
-        self.workflow.doActionFor(self.ni, 'publish')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Owner is allowed
-        self.login(TEST_USER_NAME)
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Member is denied
-        self.login('member')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Reviewer is denied
-        self.login('reviewer')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Anonymous is denied
-        self.logout()
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-        # Editor is allowed
-        self.login('editor')
-        self.assertTrue(checkPerm(ChangeEvents, self.ni))
-        # Reader is denied
-        self.login('reader')
-        self.assertFalse(checkPerm(ChangeEvents, self.ni))
-
 
 def test_suite():
     from unittest import TestSuite, makeSuite


