Repository: plone.releaser


Branch: refs/heads/master
Date: 2016-04-13T20:16:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/1f56aee7f8d565754b2d926b5746e62407ce7a7b

Changed new headings to 'Breaking changes', 'New features', 'Bug fixes'.

Old headers are still accepted, but in the postrelease we generate the
new ones.  In the unified changelog, we combine the old and new names.

See https://github.com/plone/Products.CMFPlone/issues/1323

Files changed:
M CHANGES.rst
M plone/releaser/changelog.py
M plone/releaser/release.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d7dded1..c45af31 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,15 +4,20 @@ Changelog
 1.5.1 (unreleased)
 ------------------
 
-Incompatibilities:
+Breaking changes:
 
 - *add item here*
 
-New:
+New features:
 
-- *add item here*
+- Changed new headings to 'Breaking changes', 'New features', 'Bug
+  fixes'.  Old headers are still accepted, but in the postrelease we
+  generate the new ones.  In the unified changelog, we combine the old
+  and new names.
+  See https://github.com/plone/Products.CMFPlone/issues/1323
+  [maurits]
 
-Fixes:
+Bug fixes:
 
 - When compiling changelog, treat Incompatibilities header as special
   too.  [maurits]
diff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py
index 6675d13..14005f3 100644
--- a/plone/releaser/changelog.py
+++ b/plone/releaser/changelog.py
@@ -6,6 +6,7 @@
 from itertools import product
 from plone.releaser.buildout import Buildout
 from plone.releaser.release import HEADINGS
+from plone.releaser.release import OLD_HEADING_MAPPING
 
 import urllib
 
@@ -144,8 +145,13 @@ def is_valid_version_section(x):
                     return True
             return False
 
-        def is_heading(x):
-            return x.tagname == 'paragraph' and x.rawsource in HEADINGS
+        def heading(x):
+            if x.tagname != 'paragraph':
+                return ''
+            if x.rawsource in HEADINGS:
+                return x.rawsource
+            # Might be an old heading or unknown.
+            return OLD_HEADING_MAPPING.get(x.rawsource, '')
 
         def is_list_item(x):
             return x.tagname == 'list_item'
@@ -161,8 +167,9 @@ def is_list_item(x):
             entries = defaultdict(list)
             current = 'other'
             for child in section.children:
-                if is_heading(child):
-                    current = child.rawsource
+                child_heading = heading(child)
+                if child_heading:
+                    current = child_heading
                     continue
                 list_items = child.traverse(condition=is_list_item)
                 entries[current] = [a.rawsource.strip() for a in list_items]
diff --git a/plone/releaser/release.py b/plone/releaser/release.py
index de2628a..bb9f689 100644
--- a/plone/releaser/release.py
+++ b/plone/releaser/release.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from copy import copy
 from plone.releaser.buildout import CheckoutsFile
 from plone.releaser.buildout import VersionsFile
 from plone.releaser.pypi import can_user_release_package_to_pypi
@@ -14,6 +15,33 @@
 
 # Define texts to check for during prereleaser or add during postrelease.
 NOTHING_CHANGED_YET = '*add item here*'
+BREAKING_TEXT = """
+Breaking changes:
+
+- {}
+""".format(NOTHING_CHANGED_YET)
+FEATURE_TEXT = """
+New features:
+
+- {}
+""".format(NOTHING_CHANGED_YET)
+BUGFIXES_TEXT = """
+Bug fixes:
+
+- {}
+""".format(NOTHING_CHANGED_YET)
+HEADERS = [
+    BREAKING_TEXT,
+    FEATURE_TEXT,
+    BUGFIXES_TEXT,
+]
+# Used by changelog.py:
+HEADINGS = [
+    'Breaking changes:',
+    'New features:',
+    'Bug fixes:',
+]
+# For compatibility with previous names of the headers.
 INCOMPATIBILITIES_TEXT = """
 Incompatibilities:
 
@@ -29,17 +57,20 @@
 
 - {}
 """.format(NOTHING_CHANGED_YET)
-HEADERS = [
+OLD_HEADERS = [
     INCOMPATIBILITIES_TEXT,
     NEW_TEXT,
     FIXES_TEXT,
 ]
-# Used by changelog.py:
-HEADINGS = [
-    'Incompatibilities:',
-    'New:',
-    'Fixes:',
-]
+ALL_HEADERS = copy(HEADERS)
+ALL_HEADERS.extend(OLD_HEADERS)
+OLD_HEADING_MAPPING = {
+    'Incompatibilities:': 'Breaking changes:',
+    'New:': 'New features:',
+    'Fixes:': 'Bug fixes:',
+}
+KNOWN_HEADINGS = copy(HEADINGS)
+KNOWN_HEADINGS.extend(OLD_HEADING_MAPPING.keys())
 
 
 def set_nothing_changed_yet(data):
@@ -59,7 +90,7 @@ def set_required_changelog(data):
 
     This is during the prerelease phase.
     """
-    data['required_changelog_text'] = ['New:', 'Fixes:', 'Incompatibilities:']
+    data['required_changelog_text'] = KNOWN_HEADINGS
 
 
 def set_new_changelog(data):
@@ -104,7 +135,7 @@ def cleanup_changelog(data):
         contents, encoding = read_text_file(history_file)
     orig_contents = contents
     changed = False
-    for header in HEADERS:
+    for header in ALL_HEADERS:
         if header in contents:
             contents = contents.replace(header, '')
             changed = True


Repository: plone.releaser


Branch: refs/heads/master
Date: 2016-04-14T13:20:12+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.releaser/commit/f44cdb2121f6d5be7a2ef201f2d731696f386ef8

Merge pull request #6 from plone/new-headers

Changed new headings to 'Breaking changes', 'New features', 'Bug fixes'.

Files changed:
M CHANGES.rst
M plone/releaser/changelog.py
M plone/releaser/release.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d7dded1..c45af31 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,15 +4,20 @@ Changelog
 1.5.1 (unreleased)
 ------------------
 
-Incompatibilities:
+Breaking changes:
 
 - *add item here*
 
-New:
+New features:
 
-- *add item here*
+- Changed new headings to 'Breaking changes', 'New features', 'Bug
+  fixes'.  Old headers are still accepted, but in the postrelease we
+  generate the new ones.  In the unified changelog, we combine the old
+  and new names.
+  See https://github.com/plone/Products.CMFPlone/issues/1323
+  [maurits]
 
-Fixes:
+Bug fixes:
 
 - When compiling changelog, treat Incompatibilities header as special
   too.  [maurits]
diff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py
index 6675d13..14005f3 100644
--- a/plone/releaser/changelog.py
+++ b/plone/releaser/changelog.py
@@ -6,6 +6,7 @@
 from itertools import product
 from plone.releaser.buildout import Buildout
 from plone.releaser.release import HEADINGS
+from plone.releaser.release import OLD_HEADING_MAPPING
 
 import urllib
 
@@ -144,8 +145,13 @@ def is_valid_version_section(x):
                     return True
             return False
 
-        def is_heading(x):
-            return x.tagname == 'paragraph' and x.rawsource in HEADINGS
+        def heading(x):
+            if x.tagname != 'paragraph':
+                return ''
+            if x.rawsource in HEADINGS:
+                return x.rawsource
+            # Might be an old heading or unknown.
+            return OLD_HEADING_MAPPING.get(x.rawsource, '')
 
         def is_list_item(x):
             return x.tagname == 'list_item'
@@ -161,8 +167,9 @@ def is_list_item(x):
             entries = defaultdict(list)
             current = 'other'
             for child in section.children:
-                if is_heading(child):
-                    current = child.rawsource
+                child_heading = heading(child)
+                if child_heading:
+                    current = child_heading
                     continue
                 list_items = child.traverse(condition=is_list_item)
                 entries[current] = [a.rawsource.strip() for a in list_items]
diff --git a/plone/releaser/release.py b/plone/releaser/release.py
index de2628a..bb9f689 100644
--- a/plone/releaser/release.py
+++ b/plone/releaser/release.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from copy import copy
 from plone.releaser.buildout import CheckoutsFile
 from plone.releaser.buildout import VersionsFile
 from plone.releaser.pypi import can_user_release_package_to_pypi
@@ -14,6 +15,33 @@
 
 # Define texts to check for during prereleaser or add during postrelease.
 NOTHING_CHANGED_YET = '*add item here*'
+BREAKING_TEXT = """
+Breaking changes:
+
+- {}
+""".format(NOTHING_CHANGED_YET)
+FEATURE_TEXT = """
+New features:
+
+- {}
+""".format(NOTHING_CHANGED_YET)
+BUGFIXES_TEXT = """
+Bug fixes:
+
+- {}
+""".format(NOTHING_CHANGED_YET)
+HEADERS = [
+    BREAKING_TEXT,
+    FEATURE_TEXT,
+    BUGFIXES_TEXT,
+]
+# Used by changelog.py:
+HEADINGS = [
+    'Breaking changes:',
+    'New features:',
+    'Bug fixes:',
+]
+# For compatibility with previous names of the headers.
 INCOMPATIBILITIES_TEXT = """
 Incompatibilities:
 
@@ -29,17 +57,20 @@
 
 - {}
 """.format(NOTHING_CHANGED_YET)
-HEADERS = [
+OLD_HEADERS = [
     INCOMPATIBILITIES_TEXT,
     NEW_TEXT,
     FIXES_TEXT,
 ]
-# Used by changelog.py:
-HEADINGS = [
-    'Incompatibilities:',
-    'New:',
-    'Fixes:',
-]
+ALL_HEADERS = copy(HEADERS)
+ALL_HEADERS.extend(OLD_HEADERS)
+OLD_HEADING_MAPPING = {
+    'Incompatibilities:': 'Breaking changes:',
+    'New:': 'New features:',
+    'Fixes:': 'Bug fixes:',
+}
+KNOWN_HEADINGS = copy(HEADINGS)
+KNOWN_HEADINGS.extend(OLD_HEADING_MAPPING.keys())
 
 
 def set_nothing_changed_yet(data):
@@ -59,7 +90,7 @@ def set_required_changelog(data):
 
     This is during the prerelease phase.
     """
-    data['required_changelog_text'] = ['New:', 'Fixes:', 'Incompatibilities:']
+    data['required_changelog_text'] = KNOWN_HEADINGS
 
 
 def set_new_changelog(data):
@@ -104,7 +135,7 @@ def cleanup_changelog(data):
         contents, encoding = read_text_file(history_file)
     orig_contents = contents
     changed = False
-    for header in HEADERS:
+    for header in ALL_HEADERS:
         if header in contents:
             contents = contents.replace(header, '')
             changed = True


