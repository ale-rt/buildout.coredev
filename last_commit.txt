Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2017-08-14T11:09:25+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.multilingual/commit/90517c5bcbd7050741af55e20717d053782ad01c

Revert "Language selector should only show translated languages if always_show_selector is set to false"

This reverts commit ed9307392c83e3552bb9df5465fe069f7d005b9b.
Tests are failing in `test_selector.py`.

Files changed:
M CHANGES.rst
M src/plone/app/multilingual/browser/selector.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ba335e08..3af7d99f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -68,9 +68,6 @@ New features:
 
 Bug fixes:
 
-- Language selector should only show translated languages if always_show_selector is set to false
-  [agitator]
-
 - Add missing i18n:translate tags
   [erral]
 
diff --git a/src/plone/app/multilingual/browser/selector.py b/src/plone/app/multilingual/browser/selector.py
index f3bc236a..e3236dab 100644
--- a/src/plone/app/multilingual/browser/selector.py
+++ b/src/plone/app/multilingual/browser/selector.py
@@ -1,14 +1,10 @@
 # -*- coding: utf-8 -*-
+from ZTUtils import make_query
 from plone.app.i18n.locales.browser.selector import LanguageSelector
-from plone.app.multilingual import logger
-from plone.app.multilingual.api import get_translation_manager
 from plone.app.multilingual.interfaces import ITG
 from plone.app.multilingual.interfaces import NOTG
-from plone.registry.interfaces import IRegistry
-from zope.component import getUtility
 from zope.component import queryAdapter
 from zope.component.hooks import getSite
-from ZTUtils import make_query
 
 
 def addQuery(request, url, exclude=tuple(), **extras):
@@ -76,34 +72,14 @@ class LanguageSelectorViewlet(LanguageSelector):
 
     def languages(self):
         languages_info = super(LanguageSelectorViewlet, self).languages()
-        registry = getUtility(IRegistry)
-        always_show_selector = registry['plone.always_show_selector']
         results = []
-        translations = []
         translation_group = queryAdapter(self.context, ITG)
-
         if translation_group is None:
             translation_group = NOTG
-
-        # there is no translation_manager on site root
-        # using try/except to prevent failing for now
-        try:
-            translation_manager = get_translation_manager(self.context)
-            translations = translation_manager.get_translated_languages()
-        except TypeError as e:
-            logger.debug(e)
-
         for lang_info in languages_info:
-
-            if not (always_show_selector or
-                    lang_info['code'] in translations or
-                    translation_group == 'notg'
-                    ):
-                continue
-
             # Avoid to modify the original language dict
             data = lang_info.copy()
-            data['translated'] = lang_info['code'] in translations
+            data['translated'] = True
             query_extras = {
                 'set_language': data['code'],
             }
@@ -111,19 +87,12 @@ def languages(self):
             if post_path:
                 query_extras['post_path'] = post_path
             site = getSite()
-            # if there is no translationgroup,
-            # we still want to switch language in the same context
-            if translation_group == 'notg':
-                data['url'] = self.context.absolute_url() + \
-                    '/?set_language=' + lang_info['code']
-            else:
-                data['url'] = addQuery(self.request,
-                                       site.absolute_url().rstrip("/") +
-                                       "/@@multilingual-selector/%s/%s" % (
-                                           translation_group,
-                                           lang_info['code']
-                                       ),
-                                       **query_extras)
+            data['url'] = addQuery(self.request,
+                                   site.absolute_url().rstrip("/") +
+                                   "/@@multilingual-selector/%s/%s" % (
+                                       translation_group,
+                                       lang_info['code']
+                                   ),
+                                   **query_extras)
             results.append(data)
-
         return results


