Repository: plone.app.theming


Branch: refs/heads/master
Date: 2017-01-31T08:01:02+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.theming/commit/8bd07d7af1588b9285a93470752bc827df4b5dcc

Fix imports from Globals that was removed in Zope4

Files changed:
M CHANGES.rst
M src/plone/app/theming/policy.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/transform.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ced9ac4..072345d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix imports from Globals that was removed in Zope4
+  [pbauer]
 
 
 1.3.4 (2016-12-30)
diff --git a/src/plone/app/theming/policy.py b/src/plone/app/theming/policy.py
index 76060f2..4744779 100644
--- a/src/plone/app/theming/policy.py
+++ b/src/plone/app/theming/policy.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-import Globals
+from App.config import getConfiguration
 from logging import getLogger
 import threading
 import time
@@ -71,9 +71,9 @@ def getCurrentTheme(self):
     def isThemeEnabled(self, settings=None):
         """Whether theming is enabled."""
 
-        # Resolve DevelopmentMode late (i.e. not on import time) since it may
+        # Resolve debug_mode late (i.e. not on import time) since it may
         # be set during import or test setup time
-        DevelopmentMode = Globals.DevelopmentMode
+        debug_mode = getConfiguration().debug_mode
 
         # Disable theming if the response sets a header
         if self.request.response.getHeader('X-Theme-Disabled'):
@@ -81,7 +81,7 @@ def isThemeEnabled(self, settings=None):
 
         # Check for diazo.off request parameter
         true_vals = ('1', 'y', 'yes', 't', 'true')
-        if (DevelopmentMode and self.request.get(
+        if (debug_mode and self.request.get(
                 'diazo.off', '').lower() in true_vals):
             return False
 
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 356740f..5277862 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from App.config import getConfiguration
 from diazo.compiler import compile_theme
 from lxml import etree
 from os import environ
@@ -20,7 +21,6 @@
 from urllib2 import HTTPError
 from zope.component import getUtility
 
-import Globals
 import os.path
 import re
 import unittest2 as unittest
@@ -32,7 +32,7 @@ class TestCase(unittest.TestCase):
 
     def setUp(self):
         # Enable debug mode always to ensure cache is disabled by default
-        Globals.DevelopmentMode = True
+        getConfiguration().debug_mode = True
 
         self.settings = getUtility(IRegistry).forInterface(IThemeSettings)
 
@@ -49,7 +49,7 @@ def setUp(self):
         transaction.commit()
 
     def tearDown(self):
-        Globals.DevelopmentMode = False
+        getConfiguration().debug_mode = False
 
     def evaluate(self, context, expression):
         ec = getExprContext(context, context)
@@ -103,7 +103,7 @@ def test_develop_theme(self):
 
         transform = ThemeTransform(None, {})
         # This evaluates to True because we set
-        # Globals.DevelopmentMode to True in the test setup
+        # getConfiguration().debug_mode to True in the test setup
         self.assertTrue(transform.develop_theme())
 
         # But we can anyway force the cache
@@ -182,7 +182,7 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):
         app = self.layer['app']
         portal = self.layer['portal']
 
-        Globals.DevelopmentMode = False
+        getConfiguration().debug_mode = False
 
         self.settings.enabled = True
         import transaction
@@ -441,7 +441,7 @@ def test_non_html_content(self):
     #     app = self.layer['app']
     #     portal = self.layer['portal']
     #
-    #     Globals.DevelopmentMode = False
+    #     getConfiguration().debug_mode = False
     #     self.settings.enabled = True
     #
     #     # Sneakily seed the cache with dodgy data
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 1c96eb3..4b83a63 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from App.config import getConfiguration
 from lxml import etree
 from os import environ
 from plone.app.theming.interfaces import IThemingLayer
@@ -14,7 +15,6 @@
 from zope.interface import implementer
 from zope.interface import Interface
 
-import Globals
 import logging
 
 
@@ -42,7 +42,7 @@ def debug_theme(self):
         We will debug the theme
         when we have a truish diazo.debug parameter in the request
         '''
-        if not Globals.DevelopmentMode:
+        if not getConfiguration().debug_mode:
             return False
         diazo_debug = self.request.get('diazo.debug', '').lower()
         return diazo_debug in ('1', 'y', 'yes', 't', 'true')
@@ -51,7 +51,7 @@ def develop_theme(self):
         ''' Check if the theme should be recompiled
         every time the transform is applied
         '''
-        if not Globals.DevelopmentMode:
+        if not getConfiguration().debug_mode:
             return False
         if self.debug_theme():
             return True
@@ -60,7 +60,7 @@ def develop_theme(self):
         return True
 
     def setupTransform(self, runtrace=False):
-        DevelopmentMode = self.develop_theme()
+        debug_mode = self.develop_theme()
         policy = theming_policy(self.request)
 
         # Obtain settings. Do nothing if not found
@@ -77,7 +77,7 @@ def setupTransform(self, runtrace=False):
         # Apply theme
         transform = None
 
-        if not DevelopmentMode:
+        if not debug_mode:
             transform = cache.transform
 
         if transform is None:
@@ -96,7 +96,7 @@ def setupTransform(self, runtrace=False):
             if transform is None:
                 return None
 
-            if not DevelopmentMode:
+            if not debug_mode:
                 cache.updateTransform(transform)
 
         return transform
@@ -139,7 +139,7 @@ def transformIterable(self, result, encoding):
         if result is None:
             return None
 
-        DevelopmentMode = Globals.DevelopmentMode
+        debug_mode = getConfiguration().debug_mode
         runtrace = self.debug_theme()
 
         try:
@@ -155,7 +155,7 @@ def transformIterable(self, result, encoding):
                 return None
 
             cache = None
-            if not DevelopmentMode:
+            if not debug_mode:
                 cache = policy.getCache()
 
             parameterExpressions = settings.parameterExpressions or {}
@@ -172,7 +172,7 @@ def transformIterable(self, result, encoding):
                 # Transformed worked, swap content with result
                 result.tree = transformed
         except etree.LxmlError as e:
-            if not(DevelopmentMode):
+            if not(debug_mode):
                 raise
             error_log = e.error_log
             runtrace = True


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2017-02-03T11:18:05+01:00
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.app.theming/commit/1eebaf360dc9630a1c84c71c67ab6ce0c592dff9

Don't patch Control Panel internals

Files changed:
M CHANGES.rst
M src/plone/app/theming/zmi.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 072345d..f065dad 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Bug fixes:
 - Fix imports from Globals that was removed in Zope4
   [pbauer]
 
+- No longer patch Control Panel internals, as it was removed in Zope4
+  [MatthewWilkes]
+
 
 1.3.4 (2016-12-30)
 ------------------
diff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py
index 6510c02..cea4c6a 100644
--- a/src/plone/app/theming/zmi.py
+++ b/src/plone/app/theming/zmi.py
@@ -39,9 +39,4 @@ def patch_zmi():
         if dtml:
             dtml.__class__ = NoThemeDTMLFile
 
-    from App.ApplicationManager import ApplicationManager
-    if getattr(ApplicationManager, 'manage_shutdown', False):
-        ApplicationManager.manage_shutdown = disable_theming(
-            ApplicationManager.manage_shutdown)
-
     LOGGER.debug('Patched Zope Management Interface to disable theming.')


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2017-02-05T23:06:09+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/45342712757461ad7506d8145dfd33393bfde340

Merge pull request #121 from plone/plonezope4

Fix imports from Globals that was removed in Zope4

Files changed:
M CHANGES.rst
M src/plone/app/theming/policy.py
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/transform.py
M src/plone/app/theming/zmi.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ced9ac4..f065dad 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,11 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Fix imports from Globals that was removed in Zope4
+  [pbauer]
+
+- No longer patch Control Panel internals, as it was removed in Zope4
+  [MatthewWilkes]
 
 
 1.3.4 (2016-12-30)
diff --git a/src/plone/app/theming/policy.py b/src/plone/app/theming/policy.py
index 76060f2..4744779 100644
--- a/src/plone/app/theming/policy.py
+++ b/src/plone/app/theming/policy.py
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-import Globals
+from App.config import getConfiguration
 from logging import getLogger
 import threading
 import time
@@ -71,9 +71,9 @@ def getCurrentTheme(self):
     def isThemeEnabled(self, settings=None):
         """Whether theming is enabled."""
 
-        # Resolve DevelopmentMode late (i.e. not on import time) since it may
+        # Resolve debug_mode late (i.e. not on import time) since it may
         # be set during import or test setup time
-        DevelopmentMode = Globals.DevelopmentMode
+        debug_mode = getConfiguration().debug_mode
 
         # Disable theming if the response sets a header
         if self.request.response.getHeader('X-Theme-Disabled'):
@@ -81,7 +81,7 @@ def isThemeEnabled(self, settings=None):
 
         # Check for diazo.off request parameter
         true_vals = ('1', 'y', 'yes', 't', 'true')
-        if (DevelopmentMode and self.request.get(
+        if (debug_mode and self.request.get(
                 'diazo.off', '').lower() in true_vals):
             return False
 
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 356740f..5277862 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from App.config import getConfiguration
 from diazo.compiler import compile_theme
 from lxml import etree
 from os import environ
@@ -20,7 +21,6 @@
 from urllib2 import HTTPError
 from zope.component import getUtility
 
-import Globals
 import os.path
 import re
 import unittest2 as unittest
@@ -32,7 +32,7 @@ class TestCase(unittest.TestCase):
 
     def setUp(self):
         # Enable debug mode always to ensure cache is disabled by default
-        Globals.DevelopmentMode = True
+        getConfiguration().debug_mode = True
 
         self.settings = getUtility(IRegistry).forInterface(IThemeSettings)
 
@@ -49,7 +49,7 @@ def setUp(self):
         transaction.commit()
 
     def tearDown(self):
-        Globals.DevelopmentMode = False
+        getConfiguration().debug_mode = False
 
     def evaluate(self, context, expression):
         ec = getExprContext(context, context)
@@ -103,7 +103,7 @@ def test_develop_theme(self):
 
         transform = ThemeTransform(None, {})
         # This evaluates to True because we set
-        # Globals.DevelopmentMode to True in the test setup
+        # getConfiguration().debug_mode to True in the test setup
         self.assertTrue(transform.develop_theme())
 
         # But we can anyway force the cache
@@ -182,7 +182,7 @@ def test_theme_enabled_query_string_off_switch_production_mode(self):
         app = self.layer['app']
         portal = self.layer['portal']
 
-        Globals.DevelopmentMode = False
+        getConfiguration().debug_mode = False
 
         self.settings.enabled = True
         import transaction
@@ -441,7 +441,7 @@ def test_non_html_content(self):
     #     app = self.layer['app']
     #     portal = self.layer['portal']
     #
-    #     Globals.DevelopmentMode = False
+    #     getConfiguration().debug_mode = False
     #     self.settings.enabled = True
     #
     #     # Sneakily seed the cache with dodgy data
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 1c96eb3..4b83a63 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from App.config import getConfiguration
 from lxml import etree
 from os import environ
 from plone.app.theming.interfaces import IThemingLayer
@@ -14,7 +15,6 @@
 from zope.interface import implementer
 from zope.interface import Interface
 
-import Globals
 import logging
 
 
@@ -42,7 +42,7 @@ def debug_theme(self):
         We will debug the theme
         when we have a truish diazo.debug parameter in the request
         '''
-        if not Globals.DevelopmentMode:
+        if not getConfiguration().debug_mode:
             return False
         diazo_debug = self.request.get('diazo.debug', '').lower()
         return diazo_debug in ('1', 'y', 'yes', 't', 'true')
@@ -51,7 +51,7 @@ def develop_theme(self):
         ''' Check if the theme should be recompiled
         every time the transform is applied
         '''
-        if not Globals.DevelopmentMode:
+        if not getConfiguration().debug_mode:
             return False
         if self.debug_theme():
             return True
@@ -60,7 +60,7 @@ def develop_theme(self):
         return True
 
     def setupTransform(self, runtrace=False):
-        DevelopmentMode = self.develop_theme()
+        debug_mode = self.develop_theme()
         policy = theming_policy(self.request)
 
         # Obtain settings. Do nothing if not found
@@ -77,7 +77,7 @@ def setupTransform(self, runtrace=False):
         # Apply theme
         transform = None
 
-        if not DevelopmentMode:
+        if not debug_mode:
             transform = cache.transform
 
         if transform is None:
@@ -96,7 +96,7 @@ def setupTransform(self, runtrace=False):
             if transform is None:
                 return None
 
-            if not DevelopmentMode:
+            if not debug_mode:
                 cache.updateTransform(transform)
 
         return transform
@@ -139,7 +139,7 @@ def transformIterable(self, result, encoding):
         if result is None:
             return None
 
-        DevelopmentMode = Globals.DevelopmentMode
+        debug_mode = getConfiguration().debug_mode
         runtrace = self.debug_theme()
 
         try:
@@ -155,7 +155,7 @@ def transformIterable(self, result, encoding):
                 return None
 
             cache = None
-            if not DevelopmentMode:
+            if not debug_mode:
                 cache = policy.getCache()
 
             parameterExpressions = settings.parameterExpressions or {}
@@ -172,7 +172,7 @@ def transformIterable(self, result, encoding):
                 # Transformed worked, swap content with result
                 result.tree = transformed
         except etree.LxmlError as e:
-            if not(DevelopmentMode):
+            if not(debug_mode):
                 raise
             error_log = e.error_log
             runtrace = True
diff --git a/src/plone/app/theming/zmi.py b/src/plone/app/theming/zmi.py
index 6510c02..cea4c6a 100644
--- a/src/plone/app/theming/zmi.py
+++ b/src/plone/app/theming/zmi.py
@@ -39,9 +39,4 @@ def patch_zmi():
         if dtml:
             dtml.__class__ = NoThemeDTMLFile
 
-    from App.ApplicationManager import ApplicationManager
-    if getattr(ApplicationManager, 'manage_shutdown', False):
-        ApplicationManager.manage_shutdown = disable_theming(
-            ApplicationManager.manage_shutdown)
-
     LOGGER.debug('Patched Zope Management Interface to disable theming.')


