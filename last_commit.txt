Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-07-03T14:33:37+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/f7c2055a4ab868e7e9d2c0e786433e47eb40d845

Select all types in migration-form by default. Fixes #193

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/browser.py
M plone/app/contenttypes/tests/test_migration.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e1a2981..37bface 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Select all migratable types in migration-form by default. Fixes #193.
+  [pbauer]
 
 
 1.2.16 (2016-06-12)
diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index a87aa5b..9cc8db6 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -394,8 +394,19 @@ def updateActions(self):
         self.actions['migrate'].addClass("btn-danger")
 
     def updateWidgets(self):
-        """ Overload this to hide empty widget """
+        """ Overload to set defaults and hide empty widgets. """
         form.Form.updateWidgets(self)
+        # 1. Select all items in the checkboxwidget
+        ct_widget = self.widgets['content_types']
+        # Only override when rendering the form. When you unselect
+        # everything the value will be [], not ())
+        if ct_widget.value == ():
+            ct_widget.value = ATCT_LIST.keys()
+            # Call update again since the list-items checked-states are
+            # assigned in z3c.form.browser.checkbox.CheckBoxWidget.update
+            # using the widget.value.
+            ct_widget.update()
+        # 2. Hide empty widget
         for title, widget in self.widgets.items():
             if title not in ('content_types', 'extended_content'):
                 continue
diff --git a/plone/app/contenttypes/tests/test_migration.py b/plone/app/contenttypes/tests/test_migration.py
index 5285bec..6336d2f 100644
--- a/plone/app/contenttypes/tests/test_migration.py
+++ b/plone/app/contenttypes/tests/test_migration.py
@@ -2108,16 +2108,28 @@ def test_atct_migration_form(self):
 
         # add some at content:
         self.portal.invokeFactory('Document', 'doc1')
+        self.portal.invokeFactory('News Item', 'news1')
+        self.portal.invokeFactory('News Item', 'news2')
         transaction.commit()
         from zExceptions import NotFound
         self.assertRaises(NotFound, self.browser.open, '%s/@@atct_migrator' % self.portal_url)  # noqa
         self.browser.open('%s/@@pac_installer' % self.portal_url)
         self.browser.getControl('Install').click()
-        self.assertIn('You currently have <span class="strong">1</span> archetypes objects to be migrated.', self.browser.contents)  # noqa
-
+        # check statistics before
+        self.assertIn('You currently have <span class="strong">3</span> archetypes objects to be migrated.', self.browser.contents)  # noqa
+        ct_widget = self.browser.getControl(name='form.widgets.content_types:list')  # noqa
+        self.assertEqual(ct_widget.options, ['Document', 'News Item'])
+        # all types are auto-selected
+        self.assertEqual(ct_widget.value, ['Document', 'News Item'])
         self.browser.getControl(name='form.widgets.content_types:list').value = ['Document']  # noqa
         self.assertEqual(self.browser.getControl(name='form.widgets.migrate_references:list').value, ['selected'])  # noqa
         self.browser.getControl(name='form.buttons.migrate').click()
+        from plone.app.contenttypes.interfaces import IDocument
+        from plone.app.contenttypes.interfaces import INewsItem
+        self.assertTrue(IDocument.providedBy(self.portal['doc1']))
+        self.assertFalse(INewsItem.providedBy(self.portal['news1']))
         self.assertIn('Congratulations! You migrated from Archetypes to Dexterity.', self.browser.contents)  # noqa
         msg = "<td>ATDocument</td>\n      <td>Document</td>\n      <td>1</td>"
         self.assertIn(msg, self.browser.contents)
+        msg = "<tr>\n      <td>ATNewsItem</td>\n      <td>2</td>\n    </tr>"
+        self.assertIn(msg, self.browser.contents)


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-07-04T10:29:32+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/6d47ca0454189cbfcc8b98aa5b2948811589853a

Merge pull request #355 from plone/select_all_migratable_types

Select all types in migration-form by default

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/browser.py
M plone/app/contenttypes/tests/test_migration.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e1a2981..37bface 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Select all migratable types in migration-form by default. Fixes #193.
+  [pbauer]
 
 
 1.2.16 (2016-06-12)
diff --git a/plone/app/contenttypes/migration/browser.py b/plone/app/contenttypes/migration/browser.py
index a87aa5b..9cc8db6 100644
--- a/plone/app/contenttypes/migration/browser.py
+++ b/plone/app/contenttypes/migration/browser.py
@@ -394,8 +394,19 @@ def updateActions(self):
         self.actions['migrate'].addClass("btn-danger")
 
     def updateWidgets(self):
-        """ Overload this to hide empty widget """
+        """ Overload to set defaults and hide empty widgets. """
         form.Form.updateWidgets(self)
+        # 1. Select all items in the checkboxwidget
+        ct_widget = self.widgets['content_types']
+        # Only override when rendering the form. When you unselect
+        # everything the value will be [], not ())
+        if ct_widget.value == ():
+            ct_widget.value = ATCT_LIST.keys()
+            # Call update again since the list-items checked-states are
+            # assigned in z3c.form.browser.checkbox.CheckBoxWidget.update
+            # using the widget.value.
+            ct_widget.update()
+        # 2. Hide empty widget
         for title, widget in self.widgets.items():
             if title not in ('content_types', 'extended_content'):
                 continue
diff --git a/plone/app/contenttypes/tests/test_migration.py b/plone/app/contenttypes/tests/test_migration.py
index 5285bec..6336d2f 100644
--- a/plone/app/contenttypes/tests/test_migration.py
+++ b/plone/app/contenttypes/tests/test_migration.py
@@ -2108,16 +2108,28 @@ def test_atct_migration_form(self):
 
         # add some at content:
         self.portal.invokeFactory('Document', 'doc1')
+        self.portal.invokeFactory('News Item', 'news1')
+        self.portal.invokeFactory('News Item', 'news2')
         transaction.commit()
         from zExceptions import NotFound
         self.assertRaises(NotFound, self.browser.open, '%s/@@atct_migrator' % self.portal_url)  # noqa
         self.browser.open('%s/@@pac_installer' % self.portal_url)
         self.browser.getControl('Install').click()
-        self.assertIn('You currently have <span class="strong">1</span> archetypes objects to be migrated.', self.browser.contents)  # noqa
-
+        # check statistics before
+        self.assertIn('You currently have <span class="strong">3</span> archetypes objects to be migrated.', self.browser.contents)  # noqa
+        ct_widget = self.browser.getControl(name='form.widgets.content_types:list')  # noqa
+        self.assertEqual(ct_widget.options, ['Document', 'News Item'])
+        # all types are auto-selected
+        self.assertEqual(ct_widget.value, ['Document', 'News Item'])
         self.browser.getControl(name='form.widgets.content_types:list').value = ['Document']  # noqa
         self.assertEqual(self.browser.getControl(name='form.widgets.migrate_references:list').value, ['selected'])  # noqa
         self.browser.getControl(name='form.buttons.migrate').click()
+        from plone.app.contenttypes.interfaces import IDocument
+        from plone.app.contenttypes.interfaces import INewsItem
+        self.assertTrue(IDocument.providedBy(self.portal['doc1']))
+        self.assertFalse(INewsItem.providedBy(self.portal['news1']))
         self.assertIn('Congratulations! You migrated from Archetypes to Dexterity.', self.browser.contents)  # noqa
         msg = "<td>ATDocument</td>\n      <td>Document</td>\n      <td>1</td>"
         self.assertIn(msg, self.browser.contents)
+        msg = "<tr>\n      <td>ATNewsItem</td>\n      <td>2</td>\n    </tr>"
+        self.assertIn(msg, self.browser.contents)


