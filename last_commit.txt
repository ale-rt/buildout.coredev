Repository: plone.app.search


Branch: refs/heads/1.1.x
Date: 2016-09-29T22:03:37-03:00
Author: Rodrigo Ferreira de Souza (rodfersou) <rodfersou@gmail.com>
Commit: https://github.com/plone/plone.app.search/commit/60b2e49b6dd03b64cd8db37ea6fbfad41db69c35

Use controlpanel sort_on option to select default search sorting

Files changed:
M CHANGES.rst
M plone/app/search/browser.py
M plone/app/search/search.pt
M plone/app/search/tests/test_integration.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6951cb4..93ca986 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,8 @@ Changelog
 1.1.9 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Added options to change default search order.
+  [rodfersou]
 
 
 1.1.8 (2014-09-07)
@@ -15,6 +16,7 @@ Changelog
   are used
   [anthonygerrard]
 
+
 1.1.7 (2014-03-11)
 ------------------
 
diff --git a/plone/app/search/browser.py b/plone/app/search/browser.py
index 71eb1b9..60e0a0a 100644
--- a/plone/app/search/browser.py
+++ b/plone/app/search/browser.py
@@ -60,7 +60,7 @@ def results(self, query=None, batch=True, b_size=10, b_start=0):
             results = Batch(results, b_size, b_start)
         return results
 
-    def filter_query(self, query):
+    def _filter_query(self, query):
         request = self.request
 
         catalog = getToolByName(self.context, 'portal_catalog')
@@ -106,6 +106,27 @@ def filter_query(self, query):
 
         return query
 
+    def filter_query(self, query):
+        query = self._filter_query(query)
+        if query is None:
+            query = {}
+        # explicitly set a sort; if no `sort_on` is present, the catalog sorts
+        # by relevance
+        if 'sort_on' not in query:
+            site_properties = getToolByName(self.context, 'portal_properties').site_properties
+            sort_on = site_properties.getProperty('sort_on', 'relevance')
+            if sort_on != 'relevance':
+                query['sort_on'] = sort_on
+        elif query['sort_on'] == 'relevance':
+            del query['sort_on']
+        if query.get('sort_on', '') == 'Date':
+            query['sort_order'] = 'reverse'
+        elif 'sort_order' in query:
+            del query['sort_order']
+        if not query:
+            return None
+        return query
+
     def filter_types(self, types):
         plone_utils = getToolByName(self.context, 'plone_utils')
         if not isinstance(types, list):
@@ -120,11 +141,14 @@ def types_list(self):
 
     def sort_options(self):
         """ Sorting options for search results view. """
+        if 'sort_on' not in self.request.form:
+            site_properties = getToolByName(self.context, "portal_properties").site_properties
+            sort_on = site_properties.getProperty('sort_on', 'relevance')
+            self.request.form['sort_on'] = sort_on
         return (
-            SortOption(self.request, _(u'relevance'), ''),
+            SortOption(self.request, _(u'relevance'), 'relevance'),
             SortOption(
-                self.request, _(u'date (newest first)'),
-                'Date', reverse=True
+                self.request, _(u'date (newest first)'), 'Date', reverse=True
             ),
             SortOption(self.request, _(u'alphabetically'), 'sortable_title'),
         )
diff --git a/plone/app/search/search.pt b/plone/app/search/search.pt
index 818f2c2..9d02438 100644
--- a/plone/app/search/search.pt
+++ b/plone/app/search/search.pt
@@ -259,7 +259,8 @@
 
                 <metal:searchresults define-macro="search_results">
                     <div id="search-results"
-                         tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;">
+                         tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;"
+                         tal:attributes="data-default-sort request/sort_on">
 
                         <metal:noresults tal:condition="not: batch">
                           <p i18n:domain="plone"><strong i18n:translate="description_no_results_found">No results were found.</strong></p>
diff --git a/plone/app/search/tests/test_integration.py b/plone/app/search/tests/test_integration.py
index 123f696..b6d88a6 100644
--- a/plone/app/search/tests/test_integration.py
+++ b/plone/app/search/tests/test_integration.py
@@ -66,6 +66,56 @@ def crumbs(item):
         title = crumbs(second_level_folder.third_level_document)[0]['Title']
         self.assertEquals(title, 'First Level Folder')
 
+    def test_default_search_order_relevance(self):
+        """Test default order as relevance."""
+        portal = self.layer['portal']
+        sp = getToolByName(portal, 'portal_properties').site_properties
+        self.assertEqual(sp.sort_on, 'relevance')
+
+        q = {'SearchableText': 'spam'}
+        res = portal.restrictedTraverse('@@search').results(query=q)
+        ids = [r.getId() for r in res]
+        expected = [
+            'my-page99', 'my-page98', 'my-page97', 'my-page96', 'my-page95',
+            'my-page94', 'my-page93', 'my-page92', 'my-page91', 'my-page90'
+        ]
+        self.assertEqual(ids, expected)
+
+    def test_default_search_order_date(self):
+        """Test default order as date."""
+        portal = self.layer['portal']
+
+        # Change one object date to see if order change works
+        mp5 = portal['my-page5']
+        mp5.setEffectiveDate(DateTime() + 1)
+        mp5.reindexObject()
+
+        sp = getToolByName(portal, 'portal_properties').site_properties
+        sp.sort_on = 'Date'
+        q = {'SearchableText': 'spam'}
+        res = portal.restrictedTraverse('@@search').results(query=q)
+        ids = [r.getId() for r in res]
+        expected = [
+            'my-page10', 'my-page9', 'my-page8', 'my-page7', 'my-page6',
+            'my-page4', 'my-page3', 'my-page2', 'my-page1', 'my-page0'
+        ]
+        self.assertEqual(ids, expected)
+
+    def test_default_search_order_alphabetic(self):
+        """Test default order as alphabetic."""
+        portal = self.layer['portal']
+
+        sp = getToolByName(portal, 'portal_properties').site_properties
+        sp.sort_on = 'sortable_title'
+        q = {'SearchableText': 'spam'}
+        res = portal.restrictedTraverse('@@search').results(query=q)
+        ids = [r.getId() for r in res]
+        expected = [
+            'my-page0', 'my-page1', 'my-page2', 'my-page3', 'my-page4',
+            'my-page5', 'my-page6', 'my-page7', 'my-page8', 'my-page9'
+        ]
+        self.assertEqual(ids, expected)
+
     def test_blacklisted_types_in_results(self):
         """Make sure we don't break types' blacklisting in the new search
         results view.


Repository: plone.app.search


Branch: refs/heads/1.1.x
Date: 2016-10-07T15:36:11+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.app.search/commit/0d513f8e0c69839b171a01892de8aedf573e902b

Merge pull request #18 from plone/issue_1600

Issue 1600 - Plone 4.3.x - Use controlpanel sort_on option to select default search sorting

Files changed:
M CHANGES.rst
M plone/app/search/browser.py
M plone/app/search/search.pt
M plone/app/search/tests/test_integration.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6951cb4..93ca986 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -5,7 +5,8 @@ Changelog
 1.1.9 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Added options to change default search order.
+  [rodfersou]
 
 
 1.1.8 (2014-09-07)
@@ -15,6 +16,7 @@ Changelog
   are used
   [anthonygerrard]
 
+
 1.1.7 (2014-03-11)
 ------------------
 
diff --git a/plone/app/search/browser.py b/plone/app/search/browser.py
index 71eb1b9..60e0a0a 100644
--- a/plone/app/search/browser.py
+++ b/plone/app/search/browser.py
@@ -60,7 +60,7 @@ def results(self, query=None, batch=True, b_size=10, b_start=0):
             results = Batch(results, b_size, b_start)
         return results
 
-    def filter_query(self, query):
+    def _filter_query(self, query):
         request = self.request
 
         catalog = getToolByName(self.context, 'portal_catalog')
@@ -106,6 +106,27 @@ def filter_query(self, query):
 
         return query
 
+    def filter_query(self, query):
+        query = self._filter_query(query)
+        if query is None:
+            query = {}
+        # explicitly set a sort; if no `sort_on` is present, the catalog sorts
+        # by relevance
+        if 'sort_on' not in query:
+            site_properties = getToolByName(self.context, 'portal_properties').site_properties
+            sort_on = site_properties.getProperty('sort_on', 'relevance')
+            if sort_on != 'relevance':
+                query['sort_on'] = sort_on
+        elif query['sort_on'] == 'relevance':
+            del query['sort_on']
+        if query.get('sort_on', '') == 'Date':
+            query['sort_order'] = 'reverse'
+        elif 'sort_order' in query:
+            del query['sort_order']
+        if not query:
+            return None
+        return query
+
     def filter_types(self, types):
         plone_utils = getToolByName(self.context, 'plone_utils')
         if not isinstance(types, list):
@@ -120,11 +141,14 @@ def types_list(self):
 
     def sort_options(self):
         """ Sorting options for search results view. """
+        if 'sort_on' not in self.request.form:
+            site_properties = getToolByName(self.context, "portal_properties").site_properties
+            sort_on = site_properties.getProperty('sort_on', 'relevance')
+            self.request.form['sort_on'] = sort_on
         return (
-            SortOption(self.request, _(u'relevance'), ''),
+            SortOption(self.request, _(u'relevance'), 'relevance'),
             SortOption(
-                self.request, _(u'date (newest first)'),
-                'Date', reverse=True
+                self.request, _(u'date (newest first)'), 'Date', reverse=True
             ),
             SortOption(self.request, _(u'alphabetically'), 'sortable_title'),
         )
diff --git a/plone/app/search/search.pt b/plone/app/search/search.pt
index 818f2c2..9d02438 100644
--- a/plone/app/search/search.pt
+++ b/plone/app/search/search.pt
@@ -259,7 +259,8 @@
 
                 <metal:searchresults define-macro="search_results">
                     <div id="search-results"
-                         tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;">
+                         tal:define="navigation_root_url context/@@plone_portal_state/navigation_root_url;"
+                         tal:attributes="data-default-sort request/sort_on">
 
                         <metal:noresults tal:condition="not: batch">
                           <p i18n:domain="plone"><strong i18n:translate="description_no_results_found">No results were found.</strong></p>
diff --git a/plone/app/search/tests/test_integration.py b/plone/app/search/tests/test_integration.py
index 123f696..b6d88a6 100644
--- a/plone/app/search/tests/test_integration.py
+++ b/plone/app/search/tests/test_integration.py
@@ -66,6 +66,56 @@ def crumbs(item):
         title = crumbs(second_level_folder.third_level_document)[0]['Title']
         self.assertEquals(title, 'First Level Folder')
 
+    def test_default_search_order_relevance(self):
+        """Test default order as relevance."""
+        portal = self.layer['portal']
+        sp = getToolByName(portal, 'portal_properties').site_properties
+        self.assertEqual(sp.sort_on, 'relevance')
+
+        q = {'SearchableText': 'spam'}
+        res = portal.restrictedTraverse('@@search').results(query=q)
+        ids = [r.getId() for r in res]
+        expected = [
+            'my-page99', 'my-page98', 'my-page97', 'my-page96', 'my-page95',
+            'my-page94', 'my-page93', 'my-page92', 'my-page91', 'my-page90'
+        ]
+        self.assertEqual(ids, expected)
+
+    def test_default_search_order_date(self):
+        """Test default order as date."""
+        portal = self.layer['portal']
+
+        # Change one object date to see if order change works
+        mp5 = portal['my-page5']
+        mp5.setEffectiveDate(DateTime() + 1)
+        mp5.reindexObject()
+
+        sp = getToolByName(portal, 'portal_properties').site_properties
+        sp.sort_on = 'Date'
+        q = {'SearchableText': 'spam'}
+        res = portal.restrictedTraverse('@@search').results(query=q)
+        ids = [r.getId() for r in res]
+        expected = [
+            'my-page10', 'my-page9', 'my-page8', 'my-page7', 'my-page6',
+            'my-page4', 'my-page3', 'my-page2', 'my-page1', 'my-page0'
+        ]
+        self.assertEqual(ids, expected)
+
+    def test_default_search_order_alphabetic(self):
+        """Test default order as alphabetic."""
+        portal = self.layer['portal']
+
+        sp = getToolByName(portal, 'portal_properties').site_properties
+        sp.sort_on = 'sortable_title'
+        q = {'SearchableText': 'spam'}
+        res = portal.restrictedTraverse('@@search').results(query=q)
+        ids = [r.getId() for r in res]
+        expected = [
+            'my-page0', 'my-page1', 'my-page2', 'my-page3', 'my-page4',
+            'my-page5', 'my-page6', 'my-page7', 'my-page8', 'my-page9'
+        ]
+        self.assertEqual(ids, expected)
+
     def test_blacklisted_types_in_results(self):
         """Make sure we don't break types' blacklisting in the new search
         results view.


