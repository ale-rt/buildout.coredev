Repository: plone.alterego


Branch: refs/heads/master
Date: 2016-10-30T19:21:11+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.alterego/commit/113c28b93fdc72abceace05164d19c0c69d1ce2e

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/alterego/dynamic.py
M plone/alterego/interfaces.py
M plone/alterego/tests.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e4f6ccc..946d9e8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Update code to follow Plone styleguide.
+  [gforcada]
 
 1.0.1 (2016-08-11)
 ------------------
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py
index 960a873..fb08f0d 100644
--- a/plone/alterego/dynamic.py
+++ b/plone/alterego/dynamic.py
@@ -1,8 +1,10 @@
+# -*- coding: utf-8 -*-
 from plone.alterego.interfaces import IDynamicModule
 from plone.alterego.interfaces import IDynamicObjectFactory
 from types import ModuleType
 from zope.component import queryUtility
 from zope.interface import implementer
+
 import sys
 
 
@@ -14,19 +16,22 @@ class DynamicModule(ModuleType):
     def __getattr__(self, name):
 
         if name == '__path__':
-            raise AttributeError("Dynamic modules do not have __path__'s")
+            raise AttributeError('Dynamic modules do not have __path__')
 
         factory = queryUtility(IDynamicObjectFactory, name=self.__name__)
         if factory is None:
             raise AttributeError(
-                "Cannot find dynamic object factory for module %s" %
-                self.__name__)
+                'Cannot find dynamic object factory for module {0}'.format(
+                self.__name__
+                )
+            )
 
         obj = factory(name, self)
         if obj is None:
             raise AttributeError(
-                "Dynamic module factory did not want to create %s in %s" %
-                (name, self.__name__))
+                'Dynamic module factory did not want to create '
+                '{0} in {1}'.format(name, self.__name__)
+            )
 
         return obj
 
diff --git a/plone/alterego/interfaces.py b/plone/alterego/interfaces.py
index 7625fb4..485778f 100644
--- a/plone/alterego/interfaces.py
+++ b/plone/alterego/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
@@ -20,7 +21,7 @@ def __call__(name, module):
         This will only be called once for each name. __module__ is the module
         that the object will live in, and name is the name of the object
         itself. That is,  the full dotted name of the generated object will be
-        "%s.%s" % (module.__name__, name).
+        "{0}.{1}".format(module.__name__, name).
 
         This function should return a new object, or return None, in which
         case the dynamic module will generate an AttributeError. There is
diff --git a/plone/alterego/tests.py b/plone/alterego/tests.py
index 8a58888..18cef43 100644
--- a/plone/alterego/tests.py
+++ b/plone/alterego/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import doctest
 import sys
 import unittest
diff --git a/setup.py b/setup.py
index 7478afd..12304b7 100644
--- a/setup.py
+++ b/setup.py
@@ -1,24 +1,27 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.0.2.dev0'
 
 setup(
     name='plone.alterego',
     version=version,
-    description="Low level support for dynamic modules",
-    long_description=(open("README.rst").read() + "\n" +
-                      open("CHANGES.rst").read()),
+    description='Low level support for dynamic modules',
+    long_description=(open('README.rst').read() + '\n' +
+                      open('CHANGES.rst').read()),
     # Get more strings from
     # https://pypi.python.org/pypi?%3Aaction=list_classifiers
     classifiers=[
-        "Framework :: Plone",
-        "Framework :: Plone :: 4.3",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Plone :: 5.1",
-        "Programming Language :: Python",
+        'Framework :: Plone',
+        'Framework :: Plone :: 4.3',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Programming Language :: Python',
         'Programming Language :: Python :: 2.6',
-        "Programming Language :: Python :: 2.7",
-        "Topic :: Software Development :: Libraries :: Python Modules",
+        'Programming Language :: Python :: 2.7',
+        'Topic :: Software Development :: Libraries :: Python Modules',
     ],
     keywords='Plone schema interface',
     author='Laurence Rowe',


Repository: plone.alterego


Branch: refs/heads/master
Date: 2016-11-01T20:46:27+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/e2b0e88a7a8049280cd3214d155d486a45b17e18

Merge pull request #5 from plone/gforcada-cleanup

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/alterego/dynamic.py
M plone/alterego/interfaces.py
M plone/alterego/tests.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1c5f142..40ae1ec 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Update code to follow Plone styleguide.
+  [gforcada]
 
 1.1 (2016-11-01)
 ----------------
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py
index 960a873..fb08f0d 100644
--- a/plone/alterego/dynamic.py
+++ b/plone/alterego/dynamic.py
@@ -1,8 +1,10 @@
+# -*- coding: utf-8 -*-
 from plone.alterego.interfaces import IDynamicModule
 from plone.alterego.interfaces import IDynamicObjectFactory
 from types import ModuleType
 from zope.component import queryUtility
 from zope.interface import implementer
+
 import sys
 
 
@@ -14,19 +16,22 @@ class DynamicModule(ModuleType):
     def __getattr__(self, name):
 
         if name == '__path__':
-            raise AttributeError("Dynamic modules do not have __path__'s")
+            raise AttributeError('Dynamic modules do not have __path__')
 
         factory = queryUtility(IDynamicObjectFactory, name=self.__name__)
         if factory is None:
             raise AttributeError(
-                "Cannot find dynamic object factory for module %s" %
-                self.__name__)
+                'Cannot find dynamic object factory for module {0}'.format(
+                self.__name__
+                )
+            )
 
         obj = factory(name, self)
         if obj is None:
             raise AttributeError(
-                "Dynamic module factory did not want to create %s in %s" %
-                (name, self.__name__))
+                'Dynamic module factory did not want to create '
+                '{0} in {1}'.format(name, self.__name__)
+            )
 
         return obj
 
diff --git a/plone/alterego/interfaces.py b/plone/alterego/interfaces.py
index 7625fb4..485778f 100644
--- a/plone/alterego/interfaces.py
+++ b/plone/alterego/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
@@ -20,7 +21,7 @@ def __call__(name, module):
         This will only be called once for each name. __module__ is the module
         that the object will live in, and name is the name of the object
         itself. That is,  the full dotted name of the generated object will be
-        "%s.%s" % (module.__name__, name).
+        "{0}.{1}".format(module.__name__, name).
 
         This function should return a new object, or return None, in which
         case the dynamic module will generate an AttributeError. There is
diff --git a/plone/alterego/tests.py b/plone/alterego/tests.py
index 8a58888..18cef43 100644
--- a/plone/alterego/tests.py
+++ b/plone/alterego/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import doctest
 import sys
 import unittest
diff --git a/setup.py b/setup.py
index d037fc9..69edcab 100644
--- a/setup.py
+++ b/setup.py
@@ -1,24 +1,27 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.1.1.dev0'
 
 setup(
     name='plone.alterego',
     version=version,
-    description="Low level support for dynamic modules",
-    long_description=(open("README.rst").read() + "\n" +
-                      open("CHANGES.rst").read()),
+    description='Low level support for dynamic modules',
+    long_description=(open('README.rst').read() + '\n' +
+                      open('CHANGES.rst').read()),
     # Get more strings from
     # https://pypi.python.org/pypi?%3Aaction=list_classifiers
     classifiers=[
-        "Framework :: Plone",
-        "Framework :: Plone :: 4.3",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Plone :: 5.1",
-        "Programming Language :: Python",
+        'Framework :: Plone',
+        'Framework :: Plone :: 4.3',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Programming Language :: Python',
         'Programming Language :: Python :: 2.6',
-        "Programming Language :: Python :: 2.7",
-        "Topic :: Software Development :: Libraries :: Python Modules",
+        'Programming Language :: Python :: 2.7',
+        'Topic :: Software Development :: Libraries :: Python Modules',
     ],
     keywords='Plone schema interface',
     author='Laurence Rowe',


