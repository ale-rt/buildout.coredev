Repository: Products.TinyMCE


Branch: refs/heads/1.3.x
Date: 2016-05-11T18:51:43+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.TinyMCE/commit/62c4d9abafd2166a189009c3f5d1d55a0b70a3f8

Export and import selections.

This is for plugins, link_shortcuts, and image_shortcuts.
These were completely ignored during export and import until now.
Issue https://github.com/plone/Products.TinyMCE/issues/141

Files changed:
M HISTORY.rst
M Products/TinyMCE/exportimport.py
M Products/TinyMCE/tests/test_exportimport.py

diff --git a/HISTORY.rst b/HISTORY.rst
index e1ec2df..0b94db5 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -15,8 +15,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Export and import plugins, link_shortcuts, and image_shortcuts.
+  Issue https://github.com/plone/Products.TinyMCE/issues/141
+  [maurits]
 
 1.3.20 (2016-04-25)
 -------------------
diff --git a/Products/TinyMCE/exportimport.py b/Products/TinyMCE/exportimport.py
index 3f95bba..832c488 100644
--- a/Products/TinyMCE/exportimport.py
+++ b/Products/TinyMCE/exportimport.py
@@ -84,12 +84,15 @@ class TinyMCESettingsXMLAdapter(XMLAdapterBase):
             'containsanchors': {'type': 'List', 'default': u'ATEvent\nATNewsItem\nATDocument\nATRelativePathCriterion'},
             'linkable': {'type': 'List', 'default': u'ATTopic\nATEvent\nATFile\nATFolder\nATImage\nATBTreeFolder\nATNewsItem\nATDocument'},
             'imageobjects': {'type': 'List', 'default': u'ATImage'},
+            'plugins': {'type': 'Selection', 'default': []},
             'customplugins': {'type': 'List', 'default': u''},
             'entity_encoding': {'type': 'Text', 'default': u'raw'},
             'rooted': {'type': 'Bool', 'default': False},
         },
         'contentbrowser': {
             'anchor_selector': {'type': 'Text', 'default': u'h2,h3'},
+            'link_shortcuts': {'type': 'Selection', 'default': []},
+            'image_shortcuts': {'type': 'Selection', 'default': []},
         }
     }
 
@@ -126,6 +129,15 @@ def _exportNode(self):
                                 child = self._doc.createElement('element')
                                 child.setAttribute('value', value)
                                 fieldnode.appendChild(child)
+                elif category[field]['type'] == 'Selection':
+                    if not fieldvalue:
+                        fieldnode.setAttribute('value', '')
+                    else:
+                        for value in fieldvalue:
+                            if value:
+                                child = self._doc.createElement('element')
+                                child.setAttribute('value', value)
+                                fieldnode.appendChild(child)
                 categorynode.appendChild(fieldnode)
             object.appendChild(categorynode)
         return object
@@ -169,6 +181,30 @@ def _importNode(self, node):
                                 string = string.decode("utf-8", "ignore")
 
                             setattr(self.context, fieldnode.nodeName, string)
+                        elif self.attributes[categorynode.nodeName][fieldnode.nodeName]['type'] == 'Selection':
+                            field = getattr(self.context, fieldnode.nodeName)
+                            if field is None or fieldnode.getAttribute("purge").lower() == 'true':
+                                items = []
+                            else:
+                                items = field
+                            for element in fieldnode.childNodes:
+                                if element.nodeName != '#text' and element.nodeName != '#comment':
+                                    remove = element.getAttribute('remove').lower() == 'true'
+                                    value = element.getAttribute('value')
+                                    if remove and value in items:
+                                        items.remove(value)
+                                    if not remove and value not in items:
+                                        items.append(value)
+
+                            for index, key in enumerate(items):
+                                # Don't break on international characters or otherwise
+                                # funky data -
+                                if isinstance(key, str):
+                                    # On Plone 4.1 this should not be reached
+                                    # as string is unicode in any case
+                                    items[index] = key.decode("utf-8", "ignore")
+
+                            setattr(self.context, fieldnode.nodeName, items)
 
         self._logger.info('TinyMCE Settings imported.')
 
diff --git a/Products/TinyMCE/tests/test_exportimport.py b/Products/TinyMCE/tests/test_exportimport.py
index 1893ea1..abbedb2 100644
--- a/Products/TinyMCE/tests/test_exportimport.py
+++ b/Products/TinyMCE/tests/test_exportimport.py
@@ -27,7 +27,15 @@ def test_import_export(self):
             <customplugins purge="True">
               <element value="testplugin"/>
             </customplugins>
+            <plugins>
+              <element value="ploneinlinestyles"/>
+              <element value="plonebrowser"/>
+            </plugins>
           </resourcetypes>
+          <contentbrowser>
+            <anchor_selector value="h2,h3"/>
+            <link_shortcuts />
+          </contentbrowser>
         </object>
         """
 
@@ -41,6 +49,11 @@ def test_import_export(self):
 
         tinymce_utility = getUtility(ITinyMCE)
         self.assertIn('testplugin', tinymce_utility.customplugins)
+        self.assertIn('ploneinlinestyles', tinymce_utility.plugins)
+        self.assertIn('plonebrowser', tinymce_utility.plugins)
+        self.assertTrue(isinstance(tinymce_utility.plugins, (list, tuple)))
+        self.assertFalse(tinymce_utility.link_shortcuts)
+        self.assertTrue(isinstance(tinymce_utility.link_shortcuts, (list, tuple)))
 
         # Let's create a dummy export context.
         context = DummyExportContext(self.portal)


Repository: Products.TinyMCE


Branch: refs/heads/1.3.x
Date: 2016-05-12T23:38:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.TinyMCE/commit/d316de4e342c3075ce575e50c7e5fc62bf30a04b

Merge pull request #142 from plone/maurits-export-import-selections-13

Export and import selections.

Files changed:
M HISTORY.rst
M Products/TinyMCE/exportimport.py
M Products/TinyMCE/tests/test_exportimport.py

diff --git a/HISTORY.rst b/HISTORY.rst
index e1ec2df..0b94db5 100644
--- a/HISTORY.rst
+++ b/HISTORY.rst
@@ -15,8 +15,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Export and import plugins, link_shortcuts, and image_shortcuts.
+  Issue https://github.com/plone/Products.TinyMCE/issues/141
+  [maurits]
 
 1.3.20 (2016-04-25)
 -------------------
diff --git a/Products/TinyMCE/exportimport.py b/Products/TinyMCE/exportimport.py
index 3f95bba..832c488 100644
--- a/Products/TinyMCE/exportimport.py
+++ b/Products/TinyMCE/exportimport.py
@@ -84,12 +84,15 @@ class TinyMCESettingsXMLAdapter(XMLAdapterBase):
             'containsanchors': {'type': 'List', 'default': u'ATEvent\nATNewsItem\nATDocument\nATRelativePathCriterion'},
             'linkable': {'type': 'List', 'default': u'ATTopic\nATEvent\nATFile\nATFolder\nATImage\nATBTreeFolder\nATNewsItem\nATDocument'},
             'imageobjects': {'type': 'List', 'default': u'ATImage'},
+            'plugins': {'type': 'Selection', 'default': []},
             'customplugins': {'type': 'List', 'default': u''},
             'entity_encoding': {'type': 'Text', 'default': u'raw'},
             'rooted': {'type': 'Bool', 'default': False},
         },
         'contentbrowser': {
             'anchor_selector': {'type': 'Text', 'default': u'h2,h3'},
+            'link_shortcuts': {'type': 'Selection', 'default': []},
+            'image_shortcuts': {'type': 'Selection', 'default': []},
         }
     }
 
@@ -126,6 +129,15 @@ def _exportNode(self):
                                 child = self._doc.createElement('element')
                                 child.setAttribute('value', value)
                                 fieldnode.appendChild(child)
+                elif category[field]['type'] == 'Selection':
+                    if not fieldvalue:
+                        fieldnode.setAttribute('value', '')
+                    else:
+                        for value in fieldvalue:
+                            if value:
+                                child = self._doc.createElement('element')
+                                child.setAttribute('value', value)
+                                fieldnode.appendChild(child)
                 categorynode.appendChild(fieldnode)
             object.appendChild(categorynode)
         return object
@@ -169,6 +181,30 @@ def _importNode(self, node):
                                 string = string.decode("utf-8", "ignore")
 
                             setattr(self.context, fieldnode.nodeName, string)
+                        elif self.attributes[categorynode.nodeName][fieldnode.nodeName]['type'] == 'Selection':
+                            field = getattr(self.context, fieldnode.nodeName)
+                            if field is None or fieldnode.getAttribute("purge").lower() == 'true':
+                                items = []
+                            else:
+                                items = field
+                            for element in fieldnode.childNodes:
+                                if element.nodeName != '#text' and element.nodeName != '#comment':
+                                    remove = element.getAttribute('remove').lower() == 'true'
+                                    value = element.getAttribute('value')
+                                    if remove and value in items:
+                                        items.remove(value)
+                                    if not remove and value not in items:
+                                        items.append(value)
+
+                            for index, key in enumerate(items):
+                                # Don't break on international characters or otherwise
+                                # funky data -
+                                if isinstance(key, str):
+                                    # On Plone 4.1 this should not be reached
+                                    # as string is unicode in any case
+                                    items[index] = key.decode("utf-8", "ignore")
+
+                            setattr(self.context, fieldnode.nodeName, items)
 
         self._logger.info('TinyMCE Settings imported.')
 
diff --git a/Products/TinyMCE/tests/test_exportimport.py b/Products/TinyMCE/tests/test_exportimport.py
index 1893ea1..abbedb2 100644
--- a/Products/TinyMCE/tests/test_exportimport.py
+++ b/Products/TinyMCE/tests/test_exportimport.py
@@ -27,7 +27,15 @@ def test_import_export(self):
             <customplugins purge="True">
               <element value="testplugin"/>
             </customplugins>
+            <plugins>
+              <element value="ploneinlinestyles"/>
+              <element value="plonebrowser"/>
+            </plugins>
           </resourcetypes>
+          <contentbrowser>
+            <anchor_selector value="h2,h3"/>
+            <link_shortcuts />
+          </contentbrowser>
         </object>
         """
 
@@ -41,6 +49,11 @@ def test_import_export(self):
 
         tinymce_utility = getUtility(ITinyMCE)
         self.assertIn('testplugin', tinymce_utility.customplugins)
+        self.assertIn('ploneinlinestyles', tinymce_utility.plugins)
+        self.assertIn('plonebrowser', tinymce_utility.plugins)
+        self.assertTrue(isinstance(tinymce_utility.plugins, (list, tuple)))
+        self.assertFalse(tinymce_utility.link_shortcuts)
+        self.assertTrue(isinstance(tinymce_utility.link_shortcuts, (list, tuple)))
 
         # Let's create a dummy export context.
         context = DummyExportContext(self.portal)


