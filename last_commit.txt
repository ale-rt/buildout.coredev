Repository: Products.CMFQuickInstallerTool


Branch: refs/heads/master
Date: 2016-09-19T14:24:58+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFQuickInstallerTool/commit/1cd430b74353ac023493e2dd19613a2e390c451d

Apply security hotfix 20160830 for installProducts redirection.

On top of that: require POST request for installProducts.

Files changed:
A Products/CMFQuickInstallerTool/tests/test_browser.py
M CHANGES.rst
M Products/CMFQuickInstallerTool/QuickInstallerTool.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e8b35b3..8336d33 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for ``installProducts`` redirection.
+  On top of that, we require a POST request.  [maurits]
 
 
 3.0.13 (2016-01-08)
diff --git a/Products/CMFQuickInstallerTool/QuickInstallerTool.py b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
index 7ce20bd..d304db7 100644
--- a/Products/CMFQuickInstallerTool/QuickInstallerTool.py
+++ b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
@@ -661,6 +661,7 @@ def installProduct(
                 res = res + '\n' + str(afterRes)
         return res
 
+    @postonly
     @security.protected(ManagePortal)
     def installProducts(
         self,
@@ -689,8 +690,17 @@ def installProducts(
             if step_result:
                 res += str(step_result) + '\n'
         if REQUEST:
-            REQUEST.RESPONSE.redirect(REQUEST['HTTP_REFERER'])
-
+            url = REQUEST['HTTP_REFERER']
+            if url:
+                # The url should be in the portal, otherwise this could be a
+                # hacking attempt.
+                urltool = getToolByName(self, 'portal_url')
+                # In tests, the referer can be 'localhost', which would be
+                # treated as a relative url to the not existing
+                # http://nohost/plone/portal_quickinstaller/localhost
+                if url == 'localhost' or not urltool.isURLInPortal(url):
+                    url = self.absolute_url()
+            REQUEST.RESPONSE.redirect(url)
         return res
 
     @security.protected(ManagePortal)
diff --git a/Products/CMFQuickInstallerTool/tests/test_browser.py b/Products/CMFQuickInstallerTool/tests/test_browser.py
new file mode 100644
index 0000000..e3cc1bc
--- /dev/null
+++ b/Products/CMFQuickInstallerTool/tests/test_browser.py
@@ -0,0 +1,116 @@
+# -*- coding: utf-8 -*-
+from Products.CMFQuickInstallerTool.tests.test_install import CQI_FUNCTIONAL_TESTING  # noqa
+from plone.app.testing import login
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
+from plone.protect import createToken
+from plone.testing import z2
+from zExceptions import Forbidden
+
+import unittest
+
+
+class QIBrowserTest(unittest.TestCase):
+    layer = CQI_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        app = self.layer['app']
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        import transaction; transaction.commit()
+        self.browser = z2.Browser(app)
+        self.browser.addHeader(
+            'Authorization',
+            'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        self.browser.handleErrors = False
+
+    def _get_product_for_install(self, qi):
+        installable_ids = [
+            product['id'] for product in qi.listInstallableProducts()
+            if product['status'] == 'new' and product['hasError'] is False]
+        if not installable_ids:
+            raise ValueError('Cannot find any product to install.')
+        # Take a known one that should be available in all Plone versions.
+        # Some give problems in some version, because they may need to be made
+        # available to Zope first, or their zcml loaded, or they are not
+        # installable in some versions, or an Install.py works in one version
+        # and is gone in another, or whatever..
+        known_ids = ('Marshall', 'plone.session', 'plone.app.iterate')
+        for known in known_ids:
+            if known in installable_ids:
+                return known
+        # Fall back to the first one.
+        return installable_ids[0]
+
+    def test_installProducts_call(self):
+        # It should work fine without a REQUEST argument.
+        qi = self.portal.portal_quickinstaller
+        product = self._get_product_for_install(qi)
+        qi.installProducts(products=[product])
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product))
+
+    def test_installProducts_good_referrer(self):
+        qi = self.portal.portal_quickinstaller
+        self.request.environ['HTTP_REFERER'] = self.portal.absolute_url()
+        self.request.method = 'POST'
+        product = self._get_product_for_install(qi)
+        qi.installProducts(products=[product], REQUEST=self.request)
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product))
+        # We should have been redirected to the good referrer.
+        self.assertEqual(self.request.response.headers.get('location'),
+                         self.portal.absolute_url())
+
+    def test_installProducts_attacker(self):
+        qi = self.portal.portal_quickinstaller
+        self.request.environ['HTTP_REFERER'] = 'http://www.attacker.com'
+        self.request.method = 'POST'
+        product = self._get_product_for_install(qi)
+        qi.installProducts(products=[product], REQUEST=self.request)
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product))
+        # We should NOT have been redirected to the attacker.
+        self.assertEqual(self.request.response.headers.get('location'),
+                         qi.absolute_url())
+
+    def test_installProducts_post(self):
+        # Access with a browser should remain working.  In manual testing I got
+        # a 404 (missing docstring) and somehow the selected product for
+        # install was not passed along, so nothing happened.  In this test we
+        # are not checking for any attacker as referer, which is tricky to do
+        # here.  We just check that the normal stuff works.
+        qi = self.portal.portal_quickinstaller
+        product = self._get_product_for_install(qi)
+        url = '%s/installProducts' % qi.absolute_url()
+        csrf_token = createToken()
+        self.browser.post(url, 'products:list=%s&_authenticator=%s' % (
+            product, csrf_token))
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product),
+                        'Failed to install %s' % product)
+        self.assertEqual(
+            self.browser.url,
+            'http://nohost/plone/portal_quickinstaller')
+
+    def test_installProducts_get(self):
+        # Now with a GET request.
+        qi = self.portal.portal_quickinstaller
+        product = self._get_product_for_install(qi)
+        url = '%s/installProducts' % qi.absolute_url()
+        csrf_token = createToken()
+        # Note: if we use 'browser.open' and pass the same url and data as in
+        # 'test_installProducts_post', automatically a POST request is used.
+        # We want to test a GET request here, so we need to include the data in
+        # the url.
+        url += '?products:list=%s&_authenticator=%s' % (
+            product, csrf_token)
+        self.assertRaises(Forbidden, self.browser.open, url)
+        # The product must NOT have successfully been installed.
+        self.failIf(
+            qi.isProductInstalled(product),
+            'Should not have installed %s using GET request.' % product)
diff --git a/setup.py b/setup.py
index e1352d1..ce26cd9 100644
--- a/setup.py
+++ b/setup.py
@@ -39,6 +39,7 @@
       test=[
           'zope.testing',
           'plone.app.testing',
+          'plone.protect>=2.0.2',
       ]
     ),
     install_requires=[


Repository: Products.CMFQuickInstallerTool


Branch: refs/heads/master
Date: 2016-09-20T22:21:45+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFQuickInstallerTool/commit/218c92155522c9a03552fbe8e13b98794898cb57

Merge pull request #14 from plone/apply-hotfix-20160830

Apply security hotfix 20160830 for installProducts redirection.

Files changed:
A Products/CMFQuickInstallerTool/tests/test_browser.py
M CHANGES.rst
M Products/CMFQuickInstallerTool/QuickInstallerTool.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e8b35b3..8336d33 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for ``installProducts`` redirection.
+  On top of that, we require a POST request.  [maurits]
 
 
 3.0.13 (2016-01-08)
diff --git a/Products/CMFQuickInstallerTool/QuickInstallerTool.py b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
index 7ce20bd..d304db7 100644
--- a/Products/CMFQuickInstallerTool/QuickInstallerTool.py
+++ b/Products/CMFQuickInstallerTool/QuickInstallerTool.py
@@ -661,6 +661,7 @@ def installProduct(
                 res = res + '\n' + str(afterRes)
         return res
 
+    @postonly
     @security.protected(ManagePortal)
     def installProducts(
         self,
@@ -689,8 +690,17 @@ def installProducts(
             if step_result:
                 res += str(step_result) + '\n'
         if REQUEST:
-            REQUEST.RESPONSE.redirect(REQUEST['HTTP_REFERER'])
-
+            url = REQUEST['HTTP_REFERER']
+            if url:
+                # The url should be in the portal, otherwise this could be a
+                # hacking attempt.
+                urltool = getToolByName(self, 'portal_url')
+                # In tests, the referer can be 'localhost', which would be
+                # treated as a relative url to the not existing
+                # http://nohost/plone/portal_quickinstaller/localhost
+                if url == 'localhost' or not urltool.isURLInPortal(url):
+                    url = self.absolute_url()
+            REQUEST.RESPONSE.redirect(url)
         return res
 
     @security.protected(ManagePortal)
diff --git a/Products/CMFQuickInstallerTool/tests/test_browser.py b/Products/CMFQuickInstallerTool/tests/test_browser.py
new file mode 100644
index 0000000..e3cc1bc
--- /dev/null
+++ b/Products/CMFQuickInstallerTool/tests/test_browser.py
@@ -0,0 +1,116 @@
+# -*- coding: utf-8 -*-
+from Products.CMFQuickInstallerTool.tests.test_install import CQI_FUNCTIONAL_TESTING  # noqa
+from plone.app.testing import login
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
+from plone.protect import createToken
+from plone.testing import z2
+from zExceptions import Forbidden
+
+import unittest
+
+
+class QIBrowserTest(unittest.TestCase):
+    layer = CQI_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        app = self.layer['app']
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        login(self.portal, TEST_USER_NAME)
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        import transaction; transaction.commit()
+        self.browser = z2.Browser(app)
+        self.browser.addHeader(
+            'Authorization',
+            'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
+        self.browser.handleErrors = False
+
+    def _get_product_for_install(self, qi):
+        installable_ids = [
+            product['id'] for product in qi.listInstallableProducts()
+            if product['status'] == 'new' and product['hasError'] is False]
+        if not installable_ids:
+            raise ValueError('Cannot find any product to install.')
+        # Take a known one that should be available in all Plone versions.
+        # Some give problems in some version, because they may need to be made
+        # available to Zope first, or their zcml loaded, or they are not
+        # installable in some versions, or an Install.py works in one version
+        # and is gone in another, or whatever..
+        known_ids = ('Marshall', 'plone.session', 'plone.app.iterate')
+        for known in known_ids:
+            if known in installable_ids:
+                return known
+        # Fall back to the first one.
+        return installable_ids[0]
+
+    def test_installProducts_call(self):
+        # It should work fine without a REQUEST argument.
+        qi = self.portal.portal_quickinstaller
+        product = self._get_product_for_install(qi)
+        qi.installProducts(products=[product])
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product))
+
+    def test_installProducts_good_referrer(self):
+        qi = self.portal.portal_quickinstaller
+        self.request.environ['HTTP_REFERER'] = self.portal.absolute_url()
+        self.request.method = 'POST'
+        product = self._get_product_for_install(qi)
+        qi.installProducts(products=[product], REQUEST=self.request)
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product))
+        # We should have been redirected to the good referrer.
+        self.assertEqual(self.request.response.headers.get('location'),
+                         self.portal.absolute_url())
+
+    def test_installProducts_attacker(self):
+        qi = self.portal.portal_quickinstaller
+        self.request.environ['HTTP_REFERER'] = 'http://www.attacker.com'
+        self.request.method = 'POST'
+        product = self._get_product_for_install(qi)
+        qi.installProducts(products=[product], REQUEST=self.request)
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product))
+        # We should NOT have been redirected to the attacker.
+        self.assertEqual(self.request.response.headers.get('location'),
+                         qi.absolute_url())
+
+    def test_installProducts_post(self):
+        # Access with a browser should remain working.  In manual testing I got
+        # a 404 (missing docstring) and somehow the selected product for
+        # install was not passed along, so nothing happened.  In this test we
+        # are not checking for any attacker as referer, which is tricky to do
+        # here.  We just check that the normal stuff works.
+        qi = self.portal.portal_quickinstaller
+        product = self._get_product_for_install(qi)
+        url = '%s/installProducts' % qi.absolute_url()
+        csrf_token = createToken()
+        self.browser.post(url, 'products:list=%s&_authenticator=%s' % (
+            product, csrf_token))
+        # The product must have successfully been installed.
+        self.assertTrue(qi.isProductInstalled(product),
+                        'Failed to install %s' % product)
+        self.assertEqual(
+            self.browser.url,
+            'http://nohost/plone/portal_quickinstaller')
+
+    def test_installProducts_get(self):
+        # Now with a GET request.
+        qi = self.portal.portal_quickinstaller
+        product = self._get_product_for_install(qi)
+        url = '%s/installProducts' % qi.absolute_url()
+        csrf_token = createToken()
+        # Note: if we use 'browser.open' and pass the same url and data as in
+        # 'test_installProducts_post', automatically a POST request is used.
+        # We want to test a GET request here, so we need to include the data in
+        # the url.
+        url += '?products:list=%s&_authenticator=%s' % (
+            product, csrf_token)
+        self.assertRaises(Forbidden, self.browser.open, url)
+        # The product must NOT have successfully been installed.
+        self.failIf(
+            qi.isProductInstalled(product),
+            'Should not have installed %s using GET request.' % product)
diff --git a/setup.py b/setup.py
index e1352d1..ce26cd9 100644
--- a/setup.py
+++ b/setup.py
@@ -39,6 +39,7 @@
       test=[
           'zope.testing',
           'plone.app.testing',
+          'plone.protect>=2.0.2',
       ]
     ),
     install_requires=[


