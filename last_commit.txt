Repository: plone.app.openid


Branch: refs/heads/master
Date: 2016-05-23T09:07:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.openid/commit/456b348693287babddbe0f3d767ddad8f6ca7e03

autopep8safe

Files changed:
M plone/app/openid/portlets/login.py
M plone/app/openid/setuphandlers.py
M plone/app/openid/tests/__init__.py
M setup.py

diff --git a/plone/app/openid/portlets/login.py b/plone/app/openid/portlets/login.py
index 4eb22c3..e905404 100644
--- a/plone/app/openid/portlets/login.py
+++ b/plone/app/openid/portlets/login.py
@@ -23,7 +23,8 @@ class Renderer(base.Renderer):
     def __init__(self, context, request, view, manager, data):
         base.Renderer.__init__(self, context, request, view, manager, data)
 
-        self.portal_state = getMultiAdapter((context, request), name=u'plone_portal_state')
+        self.portal_state = getMultiAdapter(
+            (context, request), name=u'plone_portal_state')
         self.pas_info = getMultiAdapter((context, request), name=u'pas_info')
 
     @property
@@ -38,7 +39,6 @@ def available(self):
     def login_form(self):
         return '%s/login_form' % self.portal_state.portal_url()
 
-
     render = ViewPageTemplateFile('login.pt')
 
 
diff --git a/plone/app/openid/setuphandlers.py b/plone/app/openid/setuphandlers.py
index 2f13e8c..fd499ba 100644
--- a/plone/app/openid/setuphandlers.py
+++ b/plone/app/openid/setuphandlers.py
@@ -10,7 +10,7 @@
 
 
 def hasOpenIdPlugin(portal):
-    pas_info=PASInfoView(portal, None)
+    pas_info = PASInfoView(portal, None)
     return pas_info.hasOpenIDExtractor()
 
 
@@ -21,27 +21,29 @@ def createOpenIdPlugin(portal, out):
 
 
 def activatePlugin(portal, out, plugin):
-    acl=getToolByName(portal, "acl_users")
-    plugin=getattr(acl, plugin)
-    interfaces=plugin.listInterfaces()
+    acl = getToolByName(portal, "acl_users")
+    plugin = getattr(acl, plugin)
+    interfaces = plugin.listInterfaces()
 
-    activate=[]
+    activate = []
 
     for info in acl.plugins.listPluginTypeInfo():
-        interface=info["interface"]
-        interface_name=info["id"]
+        interface = info["interface"]
+        interface_name = info["id"]
         if plugin.testImplements(interface):
             activate.append(interface_name)
             print >>out, "Activating interface %s for plugin %s" % \
-                    (interface_name, info["title"])
+                (interface_name, info["title"])
 
     plugin.manage_activateInterfaces(activate)
 
 
 def addLoginPortlet(portal, out):
-    leftColumn = queryUtility(IPortletManager, name=u'plone.leftcolumn', context=portal)
+    leftColumn = queryUtility(
+        IPortletManager, name=u'plone.leftcolumn', context=portal)
     if leftColumn is not None:
-        left = getMultiAdapter((portal, leftColumn,), IPortletAssignmentMapping, context=portal)
+        left = getMultiAdapter((portal, leftColumn,),
+                               IPortletAssignmentMapping, context=portal)
         if u'openid-login' not in left:
             print >>out, "Adding OpenID login portlet to the left column"
             left[u'openid-login'] = LoginAssignment()
@@ -59,4 +61,3 @@ def importVarious(context):
         activatePlugin(site, out, "openid")
 
     addLoginPortlet(site, out)
-
diff --git a/plone/app/openid/tests/__init__.py b/plone/app/openid/tests/__init__.py
index 8b13789..e69de29 100644
--- a/plone/app/openid/tests/__init__.py
+++ b/plone/app/openid/tests/__init__.py
@@ -1 +0,0 @@
-
diff --git a/setup.py b/setup.py
index 40567bc..1f2076b 100644
--- a/setup.py
+++ b/setup.py
@@ -47,4 +47,4 @@
     [z3c.autoinclude.plugin]
     target = plone
     """,
-    )
+)


Repository: plone.app.openid


Branch: refs/heads/master
Date: 2016-05-23T09:12:38+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.openid/commit/bc4d83c8103a89b40b8595fbb4fef49dad7e47f3

pep8/pyflakes

Files changed:
M CHANGES.rst
M plone/app/openid/__init__.py
M plone/app/openid/setuphandlers.py
M plone/app/openid/tests/test_view.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0737027..6e3f0c8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,7 @@ New:
 
 Fixes:
 
-- *add item here*
+- pep8/pyflakes.  [maurits]
 
 
 2.1.0 (2015-03-12)
diff --git a/plone/app/openid/__init__.py b/plone/app/openid/__init__.py
index 157d0bc..3817977 100644
--- a/plone/app/openid/__init__.py
+++ b/plone/app/openid/__init__.py
@@ -1,5 +1,6 @@
+from AccessControl import ModuleSecurityInfo
 from zope.i18nmessageid import MessageFactory
-PloneMessageFactory = MessageFactory('plone')
 
-from AccessControl import ModuleSecurityInfo
+
+PloneMessageFactory = MessageFactory('plone')
 ModuleSecurityInfo('plone.app.openid').declarePublic('PloneMessageFactory')
diff --git a/plone/app/openid/setuphandlers.py b/plone/app/openid/setuphandlers.py
index fd499ba..5a248db 100644
--- a/plone/app/openid/setuphandlers.py
+++ b/plone/app/openid/setuphandlers.py
@@ -23,7 +23,6 @@ def createOpenIdPlugin(portal, out):
 def activatePlugin(portal, out, plugin):
     acl = getToolByName(portal, "acl_users")
     plugin = getattr(acl, plugin)
-    interfaces = plugin.listInterfaces()
 
     activate = []
 
diff --git a/plone/app/openid/tests/test_view.py b/plone/app/openid/tests/test_view.py
index c7c63b4..d301ce8 100644
--- a/plone/app/openid/tests/test_view.py
+++ b/plone/app/openid/tests/test_view.py
@@ -1,7 +1,5 @@
-from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin
-from Products.PluggableAuthService.interfaces.plugins import ILoginPasswordExtractionPlugin
-
 from plone.app.openid.testing import PLONEAPPOPENID_INTEGRATION_TESTING
+from Products.PluggableAuthService.interfaces import plugins as plugin_ifaces
 
 import unittest2 as unittest
 
@@ -34,9 +32,9 @@ def test_OpenIdInstalled(self):
         self.assertEquals(pas_info.hasLoginPasswordExtractor(), True)
 
     def testOnlyOpenIdInstalled(self):
-        plugins = self.pas.plugins.listPlugins(IExtractionPlugin)
+        plugins = self.pas.plugins.listPlugins(plugin_ifaces.IExtractionPlugin)
         for (id, plugin) in plugins:
-            if ILoginPasswordExtractionPlugin.providedBy(plugin):
+            if plugin_ifaces.ILoginPasswordExtractionPlugin.providedBy(plugin):
                 plugin.manage_activateInterfaces(interfaces=())
         self.portal.portal_setup.runAllImportStepsFromProfile(
             'profile-plone.app.openid:default')


Repository: plone.app.openid


Branch: refs/heads/master
Date: 2016-05-23T12:05:15+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.openid/commit/825cc4542b2f16d32c8f48cdacdc59324453b538

Fixed more code problems from QA testing.

I added a few `noqa` codes:

- Using a print statement to write to a StringIO is fine I think.

- Using the `@public` decorator instead of `declarePublic` is not
  possible with the PloneMessageFactory, which is not a function.
  So you get an AttributeError: 'MessageFactory' object has no attribute '__name__'

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/openid/__init__.py
M plone/app/openid/config.py
M plone/app/openid/portlets/login.py
M plone/app/openid/setuphandlers.py
M plone/app/openid/testing.py
M plone/app/openid/tests/test_view.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6e3f0c8..e328bb0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,7 @@ New:
 
 Fixes:
 
-- pep8/pyflakes.  [maurits]
+- Code quality package cleanup.  [maurits]
 
 
 2.1.0 (2015-03-12)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..85880ef 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..85880ef 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/openid/__init__.py b/plone/app/openid/__init__.py
index 3817977..5ee900a 100644
--- a/plone/app/openid/__init__.py
+++ b/plone/app/openid/__init__.py
@@ -1,6 +1,7 @@
+# -*- coding: utf-8 -*-
 from AccessControl import ModuleSecurityInfo
 from zope.i18nmessageid import MessageFactory
 
 
 PloneMessageFactory = MessageFactory('plone')
-ModuleSecurityInfo('plone.app.openid').declarePublic('PloneMessageFactory')
+ModuleSecurityInfo('plone.app.openid').declarePublic('PloneMessageFactory')  # noqa
diff --git a/plone/app/openid/config.py b/plone/app/openid/config.py
index ec55b5b..ddf2dd5 100644
--- a/plone/app/openid/config.py
+++ b/plone/app/openid/config.py
@@ -1,2 +1,2 @@
-
+# -*- coding: utf-8 -*-
 GLOBALS = globals()
diff --git a/plone/app/openid/portlets/login.py b/plone/app/openid/portlets/login.py
index e905404..def1b32 100644
--- a/plone/app/openid/portlets/login.py
+++ b/plone/app/openid/portlets/login.py
@@ -1,10 +1,10 @@
-from zope.interface import implements
-from zope.component import getMultiAdapter
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.portlets.interfaces import IPortletDataProvider
-from plone.app.portlets.portlets import base
-
+# -*- coding: utf-8 -*-
 from plone.app.openid import PloneMessageFactory as _
+from plone.app.portlets.portlets import base
+from plone.portlets.interfaces import IPortletDataProvider
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from zope.component import getMultiAdapter
+from zope.interface import implements
 
 
 class ILoginPortlet(IPortletDataProvider):
@@ -37,7 +37,7 @@ def available(self):
         return page not in ('login_form', '@@register')
 
     def login_form(self):
-        return '%s/login_form' % self.portal_state.portal_url()
+        return '{0}/login_form'.format(self.portal_state.portal_url())
 
     render = ViewPageTemplateFile('login.pt')
 
diff --git a/plone/app/openid/setuphandlers.py b/plone/app/openid/setuphandlers.py
index 5a248db..04be090 100644
--- a/plone/app/openid/setuphandlers.py
+++ b/plone/app/openid/setuphandlers.py
@@ -1,12 +1,13 @@
-from zope.component import queryUtility
-from zope.component import getMultiAdapter
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
+from plone.app.openid.portlets.login import Assignment as LoginAssignment
+from plone.openid.plugins.oid import addOpenIdPlugin
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
-from plone.openid.plugins.oid import addOpenIdPlugin
-from plone.app.openid.portlets.login import Assignment as LoginAssignment
 from Products.CMFCore.utils import getToolByName
 from Products.PlonePAS.browser.info import PASInfoView
+from StringIO import StringIO
+from zope.component import getMultiAdapter
+from zope.component import queryUtility
 
 
 def hasOpenIdPlugin(portal):
@@ -15,24 +16,24 @@ def hasOpenIdPlugin(portal):
 
 
 def createOpenIdPlugin(portal, out):
-    print >>out, "Adding an OpenId plugin"
-    acl = getToolByName(portal, "acl_users")
-    addOpenIdPlugin(acl, id="openid", title="OpenId authentication plugin")
+    print >>out, 'Adding an OpenId plugin'  # noqa
+    acl = getToolByName(portal, 'acl_users')
+    addOpenIdPlugin(acl, id='openid', title='OpenId authentication plugin')
 
 
 def activatePlugin(portal, out, plugin):
-    acl = getToolByName(portal, "acl_users")
+    acl = getToolByName(portal, 'acl_users')
     plugin = getattr(acl, plugin)
 
     activate = []
 
     for info in acl.plugins.listPluginTypeInfo():
-        interface = info["interface"]
-        interface_name = info["id"]
+        interface = info['interface']
+        interface_name = info['id']
         if plugin.testImplements(interface):
             activate.append(interface_name)
-            print >>out, "Activating interface %s for plugin %s" % \
-                (interface_name, info["title"])
+            print >>out, 'Activating interface {0} for plugin {1}'.format(
+                interface_name, info['title'])  # noqa
 
     plugin.manage_activateInterfaces(activate)
 
@@ -44,7 +45,7 @@ def addLoginPortlet(portal, out):
         left = getMultiAdapter((portal, leftColumn,),
                                IPortletAssignmentMapping, context=portal)
         if u'openid-login' not in left:
-            print >>out, "Adding OpenID login portlet to the left column"
+            print >>out, 'Adding OpenID login portlet to the left column'  # noqa
             left[u'openid-login'] = LoginAssignment()
 
 
@@ -57,6 +58,6 @@ def importVarious(context):
     out = StringIO()
     if not hasOpenIdPlugin(site):
         createOpenIdPlugin(site, out)
-        activatePlugin(site, out, "openid")
+        activatePlugin(site, out, 'openid')
 
     addLoginPortlet(site, out)
diff --git a/plone/app/openid/testing.py b/plone/app/openid/testing.py
index 9e89ba9..8d6cbdd 100644
--- a/plone/app/openid/testing.py
+++ b/plone/app/openid/testing.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
-from zope.configuration import xmlconfig
 from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.layers import IntegrationTesting
+from zope.configuration import xmlconfig
 
 
 class PloneAppOpenidLayer(PloneSandboxLayer):
@@ -21,4 +21,4 @@ def setUpZope(self, app, configurationContext):
 
 PLONEAPPOPENID_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONEAPPOPENID_FIXTURE,),
-    name="PloneAppCollectionLayer:Integration")
+    name='PloneAppCollectionLayer:Integration')
diff --git a/plone/app/openid/tests/test_view.py b/plone/app/openid/tests/test_view.py
index d301ce8..e5b4cbd 100644
--- a/plone/app/openid/tests/test_view.py
+++ b/plone/app/openid/tests/test_view.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.openid.testing import PLONEAPPOPENID_INTEGRATION_TESTING
 from Products.PluggableAuthService.interfaces import plugins as plugin_ifaces
 
@@ -17,19 +18,19 @@ def pas(self):
 
     @property
     def pas_info(self):
-        return self.pas.restrictedTraverse("@@pas_info")
+        return self.pas.restrictedTraverse('@@pas_info')
 
     def test_DefaultConfig(self):
         pas_info = self.pas_info
-        self.assertEquals(pas_info.hasOpenIDExtractor(), False)
-        self.assertEquals(pas_info.hasLoginPasswordExtractor(), True)
+        self.assertEqual(pas_info.hasOpenIDExtractor(), False)
+        self.assertEqual(pas_info.hasLoginPasswordExtractor(), True)
 
     def test_OpenIdInstalled(self):
         self.portal.portal_setup.runAllImportStepsFromProfile(
             'profile-plone.app.openid:default')
         pas_info = self.pas_info
-        self.assertEquals(pas_info.hasOpenIDExtractor(), True)
-        self.assertEquals(pas_info.hasLoginPasswordExtractor(), True)
+        self.assertEqual(pas_info.hasOpenIDExtractor(), True)
+        self.assertEqual(pas_info.hasLoginPasswordExtractor(), True)
 
     def testOnlyOpenIdInstalled(self):
         plugins = self.pas.plugins.listPlugins(plugin_ifaces.IExtractionPlugin)
@@ -40,8 +41,8 @@ def testOnlyOpenIdInstalled(self):
             'profile-plone.app.openid:default')
 
         pas_info = self.pas_info
-        self.assertEquals(pas_info.hasOpenIDExtractor(), True)
-        self.assertEquals(pas_info.hasLoginPasswordExtractor(), False)
+        self.assertEqual(pas_info.hasOpenIDExtractor(), True)
+        self.assertEqual(pas_info.hasLoginPasswordExtractor(), False)
 
 
 def test_suite():


Repository: plone.app.openid


Branch: refs/heads/master
Date: 2016-05-23T13:50:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.openid/commit/f9519884e9f5e6f70a57523b05fe41d7efc05c98

Merge pull request #6 from plone/package-cleanup

Package cleanup (pep8/pyflakes)

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/openid/__init__.py
M plone/app/openid/config.py
M plone/app/openid/portlets/login.py
M plone/app/openid/setuphandlers.py
M plone/app/openid/testing.py
M plone/app/openid/tests/__init__.py
M plone/app/openid/tests/test_view.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0737027..e328bb0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,7 @@ New:
 
 Fixes:
 
-- *add item here*
+- Code quality package cleanup.  [maurits]
 
 
 2.1.0 (2015-03-12)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..85880ef 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..85880ef 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/openid/__init__.py b/plone/app/openid/__init__.py
index 157d0bc..5ee900a 100644
--- a/plone/app/openid/__init__.py
+++ b/plone/app/openid/__init__.py
@@ -1,5 +1,7 @@
+# -*- coding: utf-8 -*-
+from AccessControl import ModuleSecurityInfo
 from zope.i18nmessageid import MessageFactory
-PloneMessageFactory = MessageFactory('plone')
 
-from AccessControl import ModuleSecurityInfo
-ModuleSecurityInfo('plone.app.openid').declarePublic('PloneMessageFactory')
+
+PloneMessageFactory = MessageFactory('plone')
+ModuleSecurityInfo('plone.app.openid').declarePublic('PloneMessageFactory')  # noqa
diff --git a/plone/app/openid/config.py b/plone/app/openid/config.py
index ec55b5b..ddf2dd5 100644
--- a/plone/app/openid/config.py
+++ b/plone/app/openid/config.py
@@ -1,2 +1,2 @@
-
+# -*- coding: utf-8 -*-
 GLOBALS = globals()
diff --git a/plone/app/openid/portlets/login.py b/plone/app/openid/portlets/login.py
index 4eb22c3..def1b32 100644
--- a/plone/app/openid/portlets/login.py
+++ b/plone/app/openid/portlets/login.py
@@ -1,10 +1,10 @@
-from zope.interface import implements
-from zope.component import getMultiAdapter
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.portlets.interfaces import IPortletDataProvider
-from plone.app.portlets.portlets import base
-
+# -*- coding: utf-8 -*-
 from plone.app.openid import PloneMessageFactory as _
+from plone.app.portlets.portlets import base
+from plone.portlets.interfaces import IPortletDataProvider
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from zope.component import getMultiAdapter
+from zope.interface import implements
 
 
 class ILoginPortlet(IPortletDataProvider):
@@ -23,7 +23,8 @@ class Renderer(base.Renderer):
     def __init__(self, context, request, view, manager, data):
         base.Renderer.__init__(self, context, request, view, manager, data)
 
-        self.portal_state = getMultiAdapter((context, request), name=u'plone_portal_state')
+        self.portal_state = getMultiAdapter(
+            (context, request), name=u'plone_portal_state')
         self.pas_info = getMultiAdapter((context, request), name=u'pas_info')
 
     @property
@@ -36,8 +37,7 @@ def available(self):
         return page not in ('login_form', '@@register')
 
     def login_form(self):
-        return '%s/login_form' % self.portal_state.portal_url()
-
+        return '{0}/login_form'.format(self.portal_state.portal_url())
 
     render = ViewPageTemplateFile('login.pt')
 
diff --git a/plone/app/openid/setuphandlers.py b/plone/app/openid/setuphandlers.py
index 2f13e8c..04be090 100644
--- a/plone/app/openid/setuphandlers.py
+++ b/plone/app/openid/setuphandlers.py
@@ -1,49 +1,51 @@
-from zope.component import queryUtility
-from zope.component import getMultiAdapter
-from StringIO import StringIO
+# -*- coding: utf-8 -*-
+from plone.app.openid.portlets.login import Assignment as LoginAssignment
+from plone.openid.plugins.oid import addOpenIdPlugin
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
-from plone.openid.plugins.oid import addOpenIdPlugin
-from plone.app.openid.portlets.login import Assignment as LoginAssignment
 from Products.CMFCore.utils import getToolByName
 from Products.PlonePAS.browser.info import PASInfoView
+from StringIO import StringIO
+from zope.component import getMultiAdapter
+from zope.component import queryUtility
 
 
 def hasOpenIdPlugin(portal):
-    pas_info=PASInfoView(portal, None)
+    pas_info = PASInfoView(portal, None)
     return pas_info.hasOpenIDExtractor()
 
 
 def createOpenIdPlugin(portal, out):
-    print >>out, "Adding an OpenId plugin"
-    acl = getToolByName(portal, "acl_users")
-    addOpenIdPlugin(acl, id="openid", title="OpenId authentication plugin")
+    print >>out, 'Adding an OpenId plugin'  # noqa
+    acl = getToolByName(portal, 'acl_users')
+    addOpenIdPlugin(acl, id='openid', title='OpenId authentication plugin')
 
 
 def activatePlugin(portal, out, plugin):
-    acl=getToolByName(portal, "acl_users")
-    plugin=getattr(acl, plugin)
-    interfaces=plugin.listInterfaces()
+    acl = getToolByName(portal, 'acl_users')
+    plugin = getattr(acl, plugin)
 
-    activate=[]
+    activate = []
 
     for info in acl.plugins.listPluginTypeInfo():
-        interface=info["interface"]
-        interface_name=info["id"]
+        interface = info['interface']
+        interface_name = info['id']
         if plugin.testImplements(interface):
             activate.append(interface_name)
-            print >>out, "Activating interface %s for plugin %s" % \
-                    (interface_name, info["title"])
+            print >>out, 'Activating interface {0} for plugin {1}'.format(
+                interface_name, info['title'])  # noqa
 
     plugin.manage_activateInterfaces(activate)
 
 
 def addLoginPortlet(portal, out):
-    leftColumn = queryUtility(IPortletManager, name=u'plone.leftcolumn', context=portal)
+    leftColumn = queryUtility(
+        IPortletManager, name=u'plone.leftcolumn', context=portal)
     if leftColumn is not None:
-        left = getMultiAdapter((portal, leftColumn,), IPortletAssignmentMapping, context=portal)
+        left = getMultiAdapter((portal, leftColumn,),
+                               IPortletAssignmentMapping, context=portal)
         if u'openid-login' not in left:
-            print >>out, "Adding OpenID login portlet to the left column"
+            print >>out, 'Adding OpenID login portlet to the left column'  # noqa
             left[u'openid-login'] = LoginAssignment()
 
 
@@ -56,7 +58,6 @@ def importVarious(context):
     out = StringIO()
     if not hasOpenIdPlugin(site):
         createOpenIdPlugin(site, out)
-        activatePlugin(site, out, "openid")
+        activatePlugin(site, out, 'openid')
 
     addLoginPortlet(site, out)
-
diff --git a/plone/app/openid/testing.py b/plone/app/openid/testing.py
index 9e89ba9..8d6cbdd 100644
--- a/plone/app/openid/testing.py
+++ b/plone/app/openid/testing.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
-from zope.configuration import xmlconfig
 from plone.app.testing import PloneSandboxLayer
 from plone.app.testing.layers import IntegrationTesting
+from zope.configuration import xmlconfig
 
 
 class PloneAppOpenidLayer(PloneSandboxLayer):
@@ -21,4 +21,4 @@ def setUpZope(self, app, configurationContext):
 
 PLONEAPPOPENID_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONEAPPOPENID_FIXTURE,),
-    name="PloneAppCollectionLayer:Integration")
+    name='PloneAppCollectionLayer:Integration')
diff --git a/plone/app/openid/tests/__init__.py b/plone/app/openid/tests/__init__.py
index 8b13789..e69de29 100644
--- a/plone/app/openid/tests/__init__.py
+++ b/plone/app/openid/tests/__init__.py
@@ -1 +0,0 @@
-
diff --git a/plone/app/openid/tests/test_view.py b/plone/app/openid/tests/test_view.py
index c7c63b4..e5b4cbd 100644
--- a/plone/app/openid/tests/test_view.py
+++ b/plone/app/openid/tests/test_view.py
@@ -1,7 +1,6 @@
-from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin
-from Products.PluggableAuthService.interfaces.plugins import ILoginPasswordExtractionPlugin
-
+# -*- coding: utf-8 -*-
 from plone.app.openid.testing import PLONEAPPOPENID_INTEGRATION_TESTING
+from Products.PluggableAuthService.interfaces import plugins as plugin_ifaces
 
 import unittest2 as unittest
 
@@ -19,31 +18,31 @@ def pas(self):
 
     @property
     def pas_info(self):
-        return self.pas.restrictedTraverse("@@pas_info")
+        return self.pas.restrictedTraverse('@@pas_info')
 
     def test_DefaultConfig(self):
         pas_info = self.pas_info
-        self.assertEquals(pas_info.hasOpenIDExtractor(), False)
-        self.assertEquals(pas_info.hasLoginPasswordExtractor(), True)
+        self.assertEqual(pas_info.hasOpenIDExtractor(), False)
+        self.assertEqual(pas_info.hasLoginPasswordExtractor(), True)
 
     def test_OpenIdInstalled(self):
         self.portal.portal_setup.runAllImportStepsFromProfile(
             'profile-plone.app.openid:default')
         pas_info = self.pas_info
-        self.assertEquals(pas_info.hasOpenIDExtractor(), True)
-        self.assertEquals(pas_info.hasLoginPasswordExtractor(), True)
+        self.assertEqual(pas_info.hasOpenIDExtractor(), True)
+        self.assertEqual(pas_info.hasLoginPasswordExtractor(), True)
 
     def testOnlyOpenIdInstalled(self):
-        plugins = self.pas.plugins.listPlugins(IExtractionPlugin)
+        plugins = self.pas.plugins.listPlugins(plugin_ifaces.IExtractionPlugin)
         for (id, plugin) in plugins:
-            if ILoginPasswordExtractionPlugin.providedBy(plugin):
+            if plugin_ifaces.ILoginPasswordExtractionPlugin.providedBy(plugin):
                 plugin.manage_activateInterfaces(interfaces=())
         self.portal.portal_setup.runAllImportStepsFromProfile(
             'profile-plone.app.openid:default')
 
         pas_info = self.pas_info
-        self.assertEquals(pas_info.hasOpenIDExtractor(), True)
-        self.assertEquals(pas_info.hasLoginPasswordExtractor(), False)
+        self.assertEqual(pas_info.hasOpenIDExtractor(), True)
+        self.assertEqual(pas_info.hasLoginPasswordExtractor(), False)
 
 
 def test_suite():
diff --git a/setup.py b/setup.py
index 40567bc..1f2076b 100644
--- a/setup.py
+++ b/setup.py
@@ -47,4 +47,4 @@
     [z3c.autoinclude.plugin]
     target = plone
     """,
-    )
+)


