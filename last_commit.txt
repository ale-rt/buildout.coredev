Repository: plone.api


Branch: refs/heads/master
Date: 2017-01-04T11:15:31+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.api/commit/04010d4e202b8a65b4b448db5b350a089aaac4fc

Add failing test

Files changed:
M src/plone/api/tests/test_user.py

diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 8c0e2a7..2b917c6 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -328,6 +328,15 @@ def test_get_roles_nonexistant_user(self):
         with self.assertRaises(UserNotFoundError):
             api.user.get_roles(username='theurbanspaceman')
 
+    def test_get_roles_anonymous(self):
+        """Test get_roles for an anonymous user."""
+        from AccessControl.users import nobody
+        with api.env.adopt_user(user=nobody):
+            self.assertEqual(
+                api.user.get_roles(),
+                ('Anonymous', )
+            )
+
     def test_get_roles_in_context(self):
         """Test get local and inherited roles for a user on an object"""
         api.user.create(


Repository: plone.api


Branch: refs/heads/master
Date: 2017-01-04T12:49:32+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.api/commit/cd4cea101d7681b88120ddf3d0ce2ff04fa2b0a5

Add support for anonymous users in get_roles. Refs #339

Files changed:
M docs/CHANGES.rst
M src/plone/api/user.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 3ff70f3..c12bad2 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Support user.get_roles for anonymous users. Refs #339
+  [jaroel]
 
 
 1.5.1 (2016-12-06)
diff --git a/src/plone/api/user.py b/src/plone/api/user.py
index f3f7b91..d47c75d 100644
--- a/src/plone/api/user.py
+++ b/src/plone/api/user.py
@@ -232,7 +232,11 @@ def get_roles(username=None, user=None, obj=None, inherit=True):
         else:
             username = user.getId()
 
-    user = portal_membership.getMemberById(username)
+    if username is None and user is None:
+        user = portal_membership.getAuthenticatedMember()
+    else:
+        user = portal_membership.getMemberById(username)
+
     if user is None:
         raise UserNotFoundError
 


Repository: plone.api


Branch: refs/heads/master
Date: 2017-01-16T12:25:21+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.api/commit/f25a2f3821a9917aa267066e8f1bf9cd393e977d

Merge pull request #341 from plone/339-get_roles-anonymous

339 get roles anonymous

Files changed:
M docs/CHANGES.rst
M src/plone/api/tests/test_user.py
M src/plone/api/user.py

diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 3ff70f3..c12bad2 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Support user.get_roles for anonymous users. Refs #339
+  [jaroel]
 
 
 1.5.1 (2016-12-06)
diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 8c0e2a7..2b917c6 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -328,6 +328,15 @@ def test_get_roles_nonexistant_user(self):
         with self.assertRaises(UserNotFoundError):
             api.user.get_roles(username='theurbanspaceman')
 
+    def test_get_roles_anonymous(self):
+        """Test get_roles for an anonymous user."""
+        from AccessControl.users import nobody
+        with api.env.adopt_user(user=nobody):
+            self.assertEqual(
+                api.user.get_roles(),
+                ('Anonymous', )
+            )
+
     def test_get_roles_in_context(self):
         """Test get local and inherited roles for a user on an object"""
         api.user.create(
diff --git a/src/plone/api/user.py b/src/plone/api/user.py
index f3f7b91..d47c75d 100644
--- a/src/plone/api/user.py
+++ b/src/plone/api/user.py
@@ -232,7 +232,11 @@ def get_roles(username=None, user=None, obj=None, inherit=True):
         else:
             username = user.getId()
 
-    user = portal_membership.getMemberById(username)
+    if username is None and user is None:
+        user = portal_membership.getAuthenticatedMember()
+    else:
+        user = portal_membership.getMemberById(username)
+
     if user is None:
         raise UserNotFoundError
 


