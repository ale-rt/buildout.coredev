Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:19:20+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.outputfilters/commit/2a5fde824c6a58cfb71057886ab49557862e06fc

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/testing.py
M plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ceccceb..b967dca 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -16,6 +16,8 @@ Bug fixes:
 
 - Handle unicode errors in img attributes
   [vangheem]
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.1.5 (2016-06-07)
diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py
index 34903f3..cb9056b 100644
--- a/plone/outputfilters/browser/resolveuid.py
+++ b/plone/outputfilters/browser/resolveuid.py
@@ -1,6 +1,6 @@
 from Acquisition import aq_base
 from zExceptions import NotFound
-from zope.interface import implements
+from zope.interface import implementer
 from zope.publisher.interfaces import IPublishTraverse
 from zope.publisher.browser import BrowserView
 try:
@@ -41,10 +41,10 @@ def uuidFor(obj):
         return uuid
 
 
+@implementer(IPublishTraverse)
 class ResolveUIDView(BrowserView):
     """Resolve a URL like /resolveuid/<uuid> to a normalized URL.
     """
-    implements(IPublishTraverse)
 
     subpath = None
 
diff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py
index 96d7017..8a3030c 100644
--- a/plone/outputfilters/filters/example.py
+++ b/plone/outputfilters/filters/example.py
@@ -1,10 +1,10 @@
 import re
-from zope.interface import implements
+from zope.interface import implementer
 from plone.outputfilters.interfaces import IFilter
 
 
+@implementer(IFilter)
 class EmDashAdder(object):
-    implements(IFilter)
     order = 1000
 
     def __init__(self, context, request):
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index ff5bed7..4c3cf90 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.interfaces import IContentish
 from zope.cachedescriptors.property import Lazy as lazy_property
 from zope.component import getAllUtilitiesRegisteredFor
-from zope.interface import implements, Interface, Attribute
+from zope.interface import implementer, Interface, Attribute
 from plone.outputfilters.browser.resolveuid import uuidToObject
 
 import re
@@ -42,8 +42,8 @@ class IResolveUidsEnabler(Interface):
         "Boolean indicating whether UID links should be resolved.")
 
 
+@implementer(IResolveUidsEnabler)
 class ResolveUidsAlwaysEnabled(object):
-    implements(IResolveUidsEnabler)
 
     available = True
 
@@ -53,9 +53,9 @@ def tag(img, **attributes):
         return img.tag(**attributes)
 
 
+@implementer(IFilter)
 class ResolveUIDAndCaptionFilter(SGMLParser):
     """ Parser to convert UUID links and captioned images """
-    implements(IFilter)
 
     singleton_tags = set([
       'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame',
diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
index b7c6f58..c12cb23 100644
--- a/plone/outputfilters/testing.py
+++ b/plone/outputfilters/testing.py
@@ -5,12 +5,12 @@
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
 
 from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler  # noqa
-from zope.interface import implements
+from zope.interface import implementer
 import zope.component
 
 
+@implementer(IImageCaptioningEnabler)
 class DummyImageCaptioningEnabler(object):
-    implements(IImageCaptioningEnabler)
 
     available = True
 
diff --git a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
index 6bb2529..defa38a 100644
--- a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
+++ b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
@@ -1,5 +1,5 @@
 from zope.component import getAdapters
-from zope.interface import implements
+from zope.interface import implementer
 try:
     from zope.component.hooks import getSite
 except ImportError:
diff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
index fc50021..c3508fd 100644
--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 
 try:
     try:


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:19:20+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/0b3e91a085b408f57736bf28043f4a8cf293e582

modernize ITransforms usage

Files changed:
M plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py

diff --git a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
index defa38a..0cb3426 100644
--- a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
+++ b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
@@ -1,29 +1,15 @@
+# -*- coding: utf-8 -*-
+from plone.outputfilters import apply_filters
+from plone.outputfilters.interfaces import IFilter
+from Products.PortalTransforms.interfaces import ITransform
 from zope.component import getAdapters
+from zope.component.hooks import getSite
 from zope.interface import implementer
-try:
-    from zope.component.hooks import getSite
-except ImportError:
-    from zope.app.component.hooks import getSite
-
-try:
-    try:
-        from Products.PortalTransforms.interfaces import ITransform
-    except ImportError:
-        from Products.PortalTransforms.z3.interfaces import ITransform
-except ImportError:
-    ITransform = None
-from Products.PortalTransforms.interfaces import itransform
-
-
-from plone.outputfilters.interfaces import IFilter
-from plone.outputfilters import apply_filters
 
 
+@implementer(ITransform)
 class html_to_plone_outputfilters_html:
     """ transform which applies output filters"""
-    if ITransform is not None:
-        implements(ITransform)
-    __implements__ = itransform
     __name__ = "html_to_plone_outputfilters_html"
     inputs = ('text/html',)
     output = "text/x-plone-outputfilters-html"
diff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
index c3508fd..61aea90 100644
--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
@@ -1,19 +1,10 @@
+# -*- coding: utf-8 -*-
 from zope.interface import implementer
+from Products.PortalTransforms.interfaces import ITransform
 
-try:
-    try:
-        from Products.PortalTransforms.interfaces import ITransform
-    except ImportError:
-        from Products.PortalTransforms.z3.interfaces import ITransform
-except ImportError:
-    ITransform = None
-from Products.PortalTransforms.interfaces import itransform
-
-
-class plone_outputfilters_html_to_html:
-    if ITransform is not None:
-        implements(ITransform)
-    __implements__ = itransform
+@implementer(ITransform)
+class plone_outputfilters_html_to_html(object):
+    
     __name__ = "plone_outputfilters_html_to_html"
     inputs = ('text/x-plone-outputfilters-html',)
     output = "text/html"


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:22:06+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/f6ec5c744590e9a30a43b9b5e677442ebd26247b

isort

Files changed:
M plone/outputfilters/browser/captioned_image.py
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/interfaces.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
M setup.py

diff --git a/plone/outputfilters/browser/captioned_image.py b/plone/outputfilters/browser/captioned_image.py
index 2cfecb4..2eb77fa 100644
--- a/plone/outputfilters/browser/captioned_image.py
+++ b/plone/outputfilters/browser/captioned_image.py
@@ -1,5 +1,5 @@
-from zope.cachedescriptors.property import Lazy as lazy_property
 from Products.Five import BrowserView
+from zope.cachedescriptors.property import Lazy as lazy_property
 
 
 class CaptionedImageView(BrowserView):
diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py
index cb9056b..af9019a 100644
--- a/plone/outputfilters/browser/resolveuid.py
+++ b/plone/outputfilters/browser/resolveuid.py
@@ -1,13 +1,15 @@
 from Acquisition import aq_base
+from Products.CMFCore.utils import getToolByName
 from zExceptions import NotFound
 from zope.interface import implementer
-from zope.publisher.interfaces import IPublishTraverse
 from zope.publisher.browser import BrowserView
+from zope.publisher.interfaces import IPublishTraverse
+
+
 try:
     from zope.component.hooks import getSite
 except ImportError:
     from zope.app.component.hooks import getSite
-from Products.CMFCore.utils import getToolByName
 
 
 def uuidToURL(uuid):
diff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py
index 8a3030c..524f847 100644
--- a/plone/outputfilters/filters/example.py
+++ b/plone/outputfilters/filters/example.py
@@ -1,6 +1,7 @@
-import re
-from zope.interface import implementer
 from plone.outputfilters.interfaces import IFilter
+from zope.interface import implementer
+
+import re
 
 
 @implementer(IFilter)
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 4c3cf90..5f0bd43 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -1,22 +1,29 @@
-from unidecode import unidecode
-from ZODB.POSException import ConflictError
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base, aq_acquire, aq_parent
-from zExceptions import NotFound
-from zope.publisher.interfaces import NotFound as ztkNotFound
+from cgi import escape
 from DocumentTemplate.DT_Util import html_quote
 from DocumentTemplate.DT_Var import newline_to_br
-from zope.component.hooks import getSite
+from plone.outputfilters.browser.resolveuid import uuidToObject
+from plone.outputfilters.interfaces import IFilter
 from Products.CMFCore.interfaces import IContentish
+from sgmllib import SGMLParseError
+from sgmllib import SGMLParser
+from unidecode import unidecode
+from urllib import unquote
+from urlparse import urljoin
+from urlparse import urlsplit
+from zExceptions import NotFound
+from ZODB.POSException import ConflictError
 from zope.cachedescriptors.property import Lazy as lazy_property
 from zope.component import getAllUtilitiesRegisteredFor
-from zope.interface import implementer, Interface, Attribute
-from plone.outputfilters.browser.resolveuid import uuidToObject
+from zope.component.hooks import getSite
+from zope.interface import Attribute
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.publisher.interfaces import NotFound as ztkNotFound
 
 import re
-from urllib import unquote
-from urlparse import urljoin
-from urlparse import urlsplit
-from sgmllib import SGMLParser, SGMLParseError
+
 
 HAS_LINGUAPLONE = True
 try:
@@ -24,13 +31,10 @@
 except ImportError:
     HAS_LINGUAPLONE = False
 
-from plone.outputfilters.interfaces import IFilter
 
 appendix_re = re.compile('^(.*)([\?#].*)$')
 resolveuid_re = re.compile('^[./]*resolve[Uu]id/([^/]*)/?(.*)$')
 
-from cgi import escape
-
 
 class IImageCaptioningEnabler(Interface):
     available = Attribute(
@@ -58,9 +62,9 @@ class ResolveUIDAndCaptionFilter(SGMLParser):
     """ Parser to convert UUID links and captioned images """
 
     singleton_tags = set([
-      'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame',
-      'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
-      'source', 'track', 'wbr'])
+        'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame',
+        'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
+        'source', 'track', 'wbr'])
 
     def __init__(self, context=None, request=None):
         SGMLParser.__init__(self)
@@ -76,7 +80,7 @@ def __init__(self, context=None, request=None):
     @lazy_property
     def captioned_image_template(self):
         return self.context.restrictedTraverse(
-                    'plone.outputfilters_captioned_image')
+            'plone.outputfilters_captioned_image')
 
     @lazy_property
     def captioned_images(self):
@@ -295,10 +299,10 @@ def handle_captioned_image(self, attributes, image, fullimage, caption):
             'fullimage': fullimage,
             'tag': tag(**attributes),
             'isfullsize': image is fullimage or (
-                          image.width == original_width and
-                          image.height == original_height),
+                image.width == original_width and
+                image.height == original_height),
             'width': attributes.get('width', width),
-            }
+        }
         if self.in_link:
             # Must preserve original link, don't overwrite
             # with a link to the image
@@ -339,7 +343,7 @@ def unknown_starttag(self, tag, attrs):
                         # being rendered in the context where it was stored
                         relative_root = self.context
                         if not getattr(
-                            self.context, 'isPrincipiaFolderish', False):
+                                self.context, 'isPrincipiaFolderish', False):
                             relative_root = aq_parent(self.context)
                         actual_url = relative_root.absolute_url()
                         href = urljoin(actual_url + '/', subpath) + appendix
@@ -351,8 +355,12 @@ def unknown_starttag(self, tag, attrs):
                 attributes["src"] = src
                 caption = description
                 # Check if the image needs to be captioned
-                if (self.captioned_images and image is not None and caption
-                    and 'captioned' in attributes.get('class', '').split(' ')):
+                if (
+                    self.captioned_images and
+                    image is not None and
+                    caption and
+                    'captioned' in attributes.get('class', '').split(' ')
+                ):
                     self.handle_captioned_image(attributes, image, fullimage,
                                                 caption)
                     return True
@@ -371,7 +379,8 @@ def unknown_starttag(self, tag, attrs):
             try:
                 strattrs += ' %s="%s"' % (key, escape(value, quote=True))
             except UnicodeDecodeError:
-                strattrs += ' %s="%s"' % (unidecode(key), escape(unidecode(value), quote=True))
+                strattrs += ' %s="%s"' % (unidecode(key),
+                                          escape(unidecode(value), quote=True))
 
         if tag in self.singleton_tags:
             self.append_data("<%s%s />" % (tag, strattrs))
diff --git a/plone/outputfilters/interfaces.py b/plone/outputfilters/interfaces.py
index aa43c4c..4ebbbb5 100644
--- a/plone/outputfilters/interfaces.py
+++ b/plone/outputfilters/interfaces.py
@@ -1,5 +1,5 @@
-from zope.interface import Interface
 from zope import schema
+from zope.interface import Interface
 
 
 class IFilter(Interface):
diff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py
index 59a149e..6f92b25 100644
--- a/plone/outputfilters/setuphandlers.py
+++ b/plone/outputfilters/setuphandlers.py
@@ -1,12 +1,9 @@
-from zope.component import getUtility
-from Products.PortalTransforms.interfaces import IPortalTransformsTool
-from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
-
 from plone.outputfilters.mimetype import text_plone_outputfilters_html
-from plone.outputfilters.transforms.plone_outputfilters_html_to_html import \
-    plone_outputfilters_html_to_html
-from plone.outputfilters.transforms.html_to_plone_outputfilters_html import \
-    html_to_plone_outputfilters_html
+from plone.outputfilters.transforms.html_to_plone_outputfilters_html import html_to_plone_outputfilters_html
+from plone.outputfilters.transforms.plone_outputfilters_html_to_html import plone_outputfilters_html_to_html
+from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
+from Products.PortalTransforms.interfaces import IPortalTransformsTool
+from zope.component import getUtility
 
 
 def register_mimetype(context, mimetype):
diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
index c12cb23..6dd79da 100644
--- a/plone/outputfilters/testing.py
+++ b/plone/outputfilters/testing.py
@@ -1,11 +1,11 @@
-from plone.app.testing import IntegrationTesting
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import applyProfile
 from plone.app.testing import FunctionalTesting
+from plone.app.testing import IntegrationTesting
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import applyProfile
-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
-
 from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler  # noqa
 from zope.interface import implementer
+
 import zope.component
 
 
diff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py
index 6f4b1da..c5b9872 100644
--- a/plone/outputfilters/tests/test_apply_filters.py
+++ b/plone/outputfilters/tests/test_apply_filters.py
@@ -1,7 +1,7 @@
-import unittest
-
 from plone.outputfilters import apply_filters
 
+import unittest
+
 
 class DummyFilter(object):
     order = 500
diff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py
index 5a9eecf..51c6830 100644
--- a/plone/outputfilters/tests/test_docs.py
+++ b/plone/outputfilters/tests/test_docs.py
@@ -1,12 +1,10 @@
 # -*- coding: utf-8 -*-
-import doctest
-
-import unittest2 as unittest
-import pprint
-
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
 from plone.testing import layered
 
-from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
+import doctest
+import pprint
+import unittest2 as unittest
 
 
 optionflags = (
diff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py
index d3601ec..2cf8651 100644
--- a/plone/outputfilters/tests/test_transforms.py
+++ b/plone/outputfilters/tests/test_transforms.py
@@ -1,7 +1,8 @@
-import unittest
-from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+
+import unittest
 
 
 class TransformsTestCase(unittest.TestCase):
diff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
index 61aea90..b1a10e9 100644
--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
@@ -1,19 +1,23 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
 from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implementer
+
 
 @implementer(ITransform)
 class plone_outputfilters_html_to_html(object):
-    
+
     __name__ = "plone_outputfilters_html_to_html"
     inputs = ('text/x-plone-outputfilters-html',)
     output = "text/html"
 
     def __init__(self, name=None):
         self.config_metadata = {
-            'inputs': ('list', 'Inputs',
-                       'Input(s) MIME type. Change with care.'),
-            }
+            'inputs': (
+                'list',
+                'Inputs',
+                'Input(s) MIME type. Change with care.'
+            ),
+        }
         if name:
             self.__name__ = name
 
diff --git a/setup.py b/setup.py
index 91482c9..b9e9543 100644
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,9 @@
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 import os
 
+
 version = '2.1.6.dev0'
 
 setup(name='plone.outputfilters',


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:22:40+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/1defcd14490b012877adc6a4a9bc18b275bace85

utf8 headers

Files changed:
M plone/__init__.py
M plone/outputfilters/__init__.py
M plone/outputfilters/browser/captioned_image.py
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/interfaces.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M setup.py

diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..85880ef 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/outputfilters/__init__.py b/plone/outputfilters/__init__.py
index aa75185..5dda827 100644
--- a/plone/outputfilters/__init__.py
+++ b/plone/outputfilters/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 def apply_filters(filters, data):
     by_order = lambda x: x.order
     filters = sorted(filters, key=by_order)
diff --git a/plone/outputfilters/browser/captioned_image.py b/plone/outputfilters/browser/captioned_image.py
index 2eb77fa..2e08478 100644
--- a/plone/outputfilters/browser/captioned_image.py
+++ b/plone/outputfilters/browser/captioned_image.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.Five import BrowserView
 from zope.cachedescriptors.property import Lazy as lazy_property
 
diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py
index af9019a..e774de2 100644
--- a/plone/outputfilters/browser/resolveuid.py
+++ b/plone/outputfilters/browser/resolveuid.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from Products.CMFCore.utils import getToolByName
 from zExceptions import NotFound
diff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py
index 524f847..e119fd8 100644
--- a/plone/outputfilters/filters/example.py
+++ b/plone/outputfilters/filters/example.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.outputfilters.interfaces import IFilter
 from zope.interface import implementer
 
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index 5f0bd43..2972073 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
-from Acquisition import aq_base, aq_acquire, aq_parent
+from Acquisition import aq_acquire
+from Acquisition import aq_base
+from Acquisition import aq_parent
 from cgi import escape
 from DocumentTemplate.DT_Util import html_quote
 from DocumentTemplate.DT_Var import newline_to_br
diff --git a/plone/outputfilters/interfaces.py b/plone/outputfilters/interfaces.py
index 4ebbbb5..2b109bc 100644
--- a/plone/outputfilters/interfaces.py
+++ b/plone/outputfilters/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope import schema
 from zope.interface import Interface
 
diff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py
index 6395b34..8298444 100644
--- a/plone/outputfilters/mimetype.py
+++ b/plone/outputfilters/mimetype.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem
 
 
diff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py
index 6f92b25..1582428 100644
--- a/plone/outputfilters/setuphandlers.py
+++ b/plone/outputfilters/setuphandlers.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.outputfilters.mimetype import text_plone_outputfilters_html
 from plone.outputfilters.transforms.html_to_plone_outputfilters_html import html_to_plone_outputfilters_html
 from plone.outputfilters.transforms.plone_outputfilters_html_to_html import plone_outputfilters_html_to_html
diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
index 6dd79da..05b945b 100644
--- a/plone/outputfilters/testing.py
+++ b/plone/outputfilters/testing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
 from plone.app.testing import applyProfile
 from plone.app.testing import FunctionalTesting
diff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py
index c5b9872..ac3c993 100644
--- a/plone/outputfilters/tests/test_apply_filters.py
+++ b/plone/outputfilters/tests/test_apply_filters.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.outputfilters import apply_filters
 
 import unittest
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 3499a32..668f111 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from doctest import _ellipsis_match
 from doctest import OutputChecker
 from doctest import REPORT_NDIFF
diff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py
index 2cf8651..8bdfe77 100644
--- a/plone/outputfilters/tests/test_transforms.py
+++ b/plone/outputfilters/tests/test_transforms.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
diff --git a/setup.py b/setup.py
index b9e9543..62fff61 100644
--- a/setup.py
+++ b/setup.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from setuptools import find_packages
 from setuptools import setup
 


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:22:40+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/1d5cc61a08344c08b8473c534a72a27a672ee6a4

modernize declare_namespace

Files changed:
M plone/__init__.py

diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:22:40+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/6e0349d98024d3596adeb49158a315cd32a67fb3

internal README to ReST

Files changed:
A plone/outputfilters/README.rst
M plone/outputfilters/tests/test_docs.py
M setup.py
D plone/outputfilters/README.txt

diff --git a/plone/outputfilters/README.rst b/plone/outputfilters/README.rst
new file mode 100644
index 0000000..bca160d
--- /dev/null
+++ b/plone/outputfilters/README.rst
@@ -0,0 +1,85 @@
+Adding a custom filter
+======================
+
+As an example, the following filter replaces all doubled hyphens ("--") with em
+dashes ("-"). (Don't use the example verbatim, because it doesn't parse HTML to
+apply itself only to text nodes, so will mangle HTML comments.)
+
+A filter is a callable which accepts a UTF-8-encoded HTML string as input, and
+returns a modified UTF-8-encoded HTML string. A return value of ``None`` may be
+used to indicate that the input should not be modified.
+
+Example::
+
+    import re
+    from zope.interface import implements
+    from plone.outputfilters.interfaces import IFilter
+
+    class EmDashAdder(object):
+        implements(IFilter)
+        order = 1000
+
+        def __init__(self, context, request):
+            pass
+
+        def is_enabled(self):
+            return True
+
+        pattern = re.compile(r'--')
+
+        def __call__(self, data):
+            return self.pattern.sub('\xe2\x80\x94', data)
+
+The ``order`` attribute may be used to affect the order in which filters are
+applied (higher values run later). The is_enabled method should return a boolean
+indicating whether the filter should be applied.
+
+Filters are registered in ZCML as a named multi-adapter of the context and
+request to IFilter::
+
+    >>> from Zope2.App import zcml
+    >>> import Products.Five
+    >>> configure = """
+    ... <configure
+    ...     xmlns="http://namespaces.zope.org/zope">
+    ...
+    ...   <adapter
+    ...     name="em_dash_adder"
+    ...     provides="plone.outputfilters.interfaces.IFilter"
+    ...     for="* *"
+    ...     factory="plone.outputfilters.filters.example.EmDashAdder"
+    ...     />
+    ...
+    ... </configure>
+    ... """
+    >>> zcml.load_config("configure.zcml", Products.Five)
+    >>> zcml.load_string(configure)
+
+Now when text is transformed from text/html to text/x-html-safe, the filter will
+be applied::
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> str(portal.portal_transforms.convertTo('text/x-html-safe',
+    ...     'test--test', mimetype='text/html', context=portal))
+    'test\xe2\x80\x94test'
+
+
+How it works
+============
+
+``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:
+
+1. a new mimetype ("text/x-plone-outputfilters-html")
+2. a transform from text/html to text/x-plone-outputfilters-html
+3. a null transform from text/x-plone-outputfilters-html back to text/html
+4. a "transform policy" for the text/x-html-safe mimetype, which says that text
+   being transformed to text/x-html-safe must first be transformed to
+   text/x-plone-outputfilters-html
+
+The filter adapters are looked up and applied during the execution of the
+transform from step #2.
+
+This should be considered an implementation detail and may change at some point
+in the future.
+
diff --git a/plone/outputfilters/README.txt b/plone/outputfilters/README.txt
deleted file mode 100644
index 5ce7a28..0000000
--- a/plone/outputfilters/README.txt
+++ /dev/null
@@ -1,85 +0,0 @@
-Adding a custom filter
-======================
-
-As an example, the following filter replaces all doubled hyphens ("--") with em
-dashes ("-"). (Don't use the example verbatim, because it doesn't parse HTML to
-apply itself only to text nodes, so will mangle HTML comments.)
-
-A filter is a callable which accepts a UTF-8-encoded HTML string as input, and
-returns a modified UTF-8-encoded HTML string. A return value of ``None`` may be
-used to indicate that the input should not be modified.
-
-Example::
-
-    import re
-    from zope.interface import implements
-    from plone.outputfilters.interfaces import IFilter
-
-    class EmDashAdder(object):
-        implements(IFilter)
-        order = 1000
-
-        def __init__(self, context, request):
-            pass
-
-        def is_enabled(self):
-            return True
-
-        pattern = re.compile(r'--')
-
-        def __call__(self, data):
-            return self.pattern.sub('\xe2\x80\x94', data)
-
-The ``order`` attribute may be used to affect the order in which filters are
-applied (higher values run later). The is_enabled method should return a boolean
-indicating whether the filter should be applied.
-
-Filters are registered in ZCML as a named multi-adapter of the context and
-request to IFilter.
-
- >>> from Zope2.App import zcml
- >>> import Products.Five
- >>> configure = """
- ... <configure
- ...     xmlns="http://namespaces.zope.org/zope">
- ...
- ...   <adapter
- ...     name="em_dash_adder"
- ...     provides="plone.outputfilters.interfaces.IFilter"
- ...     for="* *"
- ...     factory="plone.outputfilters.filters.example.EmDashAdder"
- ...     />
- ...
- ... </configure>
- ... """
- >>> zcml.load_config("configure.zcml", Products.Five)
- >>> zcml.load_string(configure)
-
-Now when text is transformed from text/html to text/x-html-safe, the filter will
-be applied.
-
- >>> app = layer['app']
- >>> portal = layer['portal']
- >>> str(portal.portal_transforms.convertTo('text/x-html-safe',
- ...     'test--test', mimetype='text/html', context=portal))
- 'test\xe2\x80\x94test'
-
-
-How it works
-============
-
-``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:
-
-1. a new mimetype ("text/x-plone-outputfilters-html")
-2. a transform from text/html to text/x-plone-outputfilters-html
-3. a null transform from text/x-plone-outputfilters-html back to text/html
-4. a "transform policy" for the text/x-html-safe mimetype, which says that text
-   being transformed to text/x-html-safe must first be transformed to
-   text/x-plone-outputfilters-html
-
-The filter adapters are looked up and applied during the execution of the
-transform from step #2.
-
-This should be considered an implementation detail and may change at some point
-in the future.
-
diff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py
index 51c6830..d7b7ccb 100644
--- a/plone/outputfilters/tests/test_docs.py
+++ b/plone/outputfilters/tests/test_docs.py
@@ -13,7 +13,7 @@
     doctest.REPORT_ONLY_FIRST_FAILURE
 )
 normal_testfiles = [
-    '../README.txt'
+    '../README.rst'
 ]
 
 
diff --git a/setup.py b/setup.py
index 62fff61..2ccc407 100644
--- a/setup.py
+++ b/setup.py
@@ -14,13 +14,14 @@
       long_description=(
           open("README.rst").read() + "\n" +
           open(os.path.join("plone", "outputfilters",
-                            "README.txt")).read() + "\n" +
+                            "README.rst")).read() + "\n" +
           open("CHANGES.rst").read()),
       # Get more strings from
       # https://pypi.python.org/pypi?%3Aaction=list_classifiers
       classifiers=[
           "Framework :: Plone",
           "Framework :: Plone :: 5.0",
+          "Framework :: Plone :: 5.1",
           "Programming Language :: Python",
           "Programming Language :: Python :: 2.7",
       ],


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:24:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/247e487e9d4390118351996935d0f4512da69ea0

autopep8 -ir

Files changed:
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py

diff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py
index ac3c993..f6800a7 100644
--- a/plone/outputfilters/tests/test_apply_filters.py
+++ b/plone/outputfilters/tests/test_apply_filters.py
@@ -47,6 +47,7 @@ def test_apply_filters_checks_is_enabled(self):
 
     def test_apply_filters_handles_return_none(self):
         class DummyFilterReturningNone(DummyFilter):
+
             def __call__(self, data):
                 return None
         filter = DummyFilterReturningNone()
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 668f111..d817424 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -301,9 +301,9 @@ def test_image_captioning_relative_path_private_folder(self):
         # traversal to them must not raise an error!
         self.loginAsPortalOwner()
         self.portal.invokeFactory('Folder', id='private',
-            title='Private Folder')
+                                  title='Private Folder')
         self.portal.private.invokeFactory('Image', id='image.jpg',
-            title='Image')
+                                          title='Image')
         image = getattr(self.portal.private, 'image.jpg')
         image.setDescription('My private image caption')
         image.image = dummy_image()
@@ -416,7 +416,8 @@ def test_image_captioning_preserves_existing_links(self):
 
     def test_image_captioning_handles_non_ascii(self):
         self.portal['image.jpg'].setTitle(u'Kupu Test Image \xe5\xe4\xf6')
-        self.portal['image.jpg'].setDescription(u'Kupu Test Image \xe5\xe4\xf6')
+        self.portal['image.jpg'].setDescription(
+            u'Kupu Test Image \xe5\xe4\xf6')
         text_in = """<img class="captioned" src="image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
 <dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" title="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" height="331" width="500" /></dt>
@@ -430,4 +431,5 @@ def test_resolve_uids_with_bigU(self):
         self.assertTrue('href="http://nohost/plone/image.jpg"' in str(res))
 
     def test_singleton_elements(self):
-        self._assertTransformsTo('<hr/>\r\n<p>foo</p><br/>', '<hr />\r\n<p>foo</p><br />')
+        self._assertTransformsTo(
+            '<hr/>\r\n<p>foo</p><br/>', '<hr />\r\n<p>foo</p><br />')


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T13:25:04+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/c2c47a1a4c34332698873c867369367b346d560b

bump version and document changes

Files changed:
M CHANGES.rst
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b967dca..43bbc07 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,13 @@
 Changelog
 =========
 
-2.1.6 (unreleased)
+3.0.0 (unreleased)
 ------------------
 
 Breaking changes:
 
-- *add item here*
+- Give up support of PortalTransforms 1.x with old style interfaces.
+  [jensens]
 
 New features:
 
@@ -16,6 +17,9 @@ Bug fixes:
 
 - Handle unicode errors in img attributes
   [vangheem]
+- Cleanup: utf8-headers, isort, pep8
+  [jensens]
+
 - Use zope.interface decorator.
   [gforcada]
 
diff --git a/setup.py b/setup.py
index 2ccc407..f9528bd 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@
 import os
 
 
-version = '2.1.6.dev0'
+version = '3.0.0.dev0'
 
 setup(name='plone.outputfilters',
       version=version,
@@ -35,12 +35,12 @@
       include_package_data=True,
       zip_safe=False,
       install_requires=[
-          'setuptools',
           'Products.CMFCore',
           'Products.GenericSetup',
           'Products.MimetypesRegistry',
-          'Products.PortalTransforms',
-          'unidecode'
+          'Products.PortalTransforms>=2.0a1',
+          'setuptools',
+          'unidecode',
       ],
       extras_require={
           'test': [


Repository: plone.outputfilters


Branch: refs/heads/master
Date: 2016-08-01T14:47:09+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.outputfilters/commit/ae7d157b20a220a8f3cc166d36ef01716af68c20

Merge pull request #21 from plone/gforcada-use-zope-decorators

Use zope.interface decorator + code conventions

Files changed:
A plone/outputfilters/README.rst
M CHANGES.rst
M plone/__init__.py
M plone/outputfilters/__init__.py
M plone/outputfilters/browser/captioned_image.py
M plone/outputfilters/browser/resolveuid.py
M plone/outputfilters/filters/example.py
M plone/outputfilters/filters/resolveuid_and_caption.py
M plone/outputfilters/interfaces.py
M plone/outputfilters/mimetype.py
M plone/outputfilters/setuphandlers.py
M plone/outputfilters/testing.py
M plone/outputfilters/tests/test_apply_filters.py
M plone/outputfilters/tests/test_docs.py
M plone/outputfilters/tests/test_resolveuid_and_caption.py
M plone/outputfilters/tests/test_transforms.py
M plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
M plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
M setup.py
D plone/outputfilters/README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index ceccceb..43bbc07 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,12 +1,13 @@
 Changelog
 =========
 
-2.1.6 (unreleased)
+3.0.0 (unreleased)
 ------------------
 
 Breaking changes:
 
-- *add item here*
+- Give up support of PortalTransforms 1.x with old style interfaces.
+  [jensens]
 
 New features:
 
@@ -16,6 +17,11 @@ Bug fixes:
 
 - Handle unicode errors in img attributes
   [vangheem]
+- Cleanup: utf8-headers, isort, pep8
+  [jensens]
+
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.1.5 (2016-06-07)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/outputfilters/README.rst b/plone/outputfilters/README.rst
new file mode 100644
index 0000000..bca160d
--- /dev/null
+++ b/plone/outputfilters/README.rst
@@ -0,0 +1,85 @@
+Adding a custom filter
+======================
+
+As an example, the following filter replaces all doubled hyphens ("--") with em
+dashes ("-"). (Don't use the example verbatim, because it doesn't parse HTML to
+apply itself only to text nodes, so will mangle HTML comments.)
+
+A filter is a callable which accepts a UTF-8-encoded HTML string as input, and
+returns a modified UTF-8-encoded HTML string. A return value of ``None`` may be
+used to indicate that the input should not be modified.
+
+Example::
+
+    import re
+    from zope.interface import implements
+    from plone.outputfilters.interfaces import IFilter
+
+    class EmDashAdder(object):
+        implements(IFilter)
+        order = 1000
+
+        def __init__(self, context, request):
+            pass
+
+        def is_enabled(self):
+            return True
+
+        pattern = re.compile(r'--')
+
+        def __call__(self, data):
+            return self.pattern.sub('\xe2\x80\x94', data)
+
+The ``order`` attribute may be used to affect the order in which filters are
+applied (higher values run later). The is_enabled method should return a boolean
+indicating whether the filter should be applied.
+
+Filters are registered in ZCML as a named multi-adapter of the context and
+request to IFilter::
+
+    >>> from Zope2.App import zcml
+    >>> import Products.Five
+    >>> configure = """
+    ... <configure
+    ...     xmlns="http://namespaces.zope.org/zope">
+    ...
+    ...   <adapter
+    ...     name="em_dash_adder"
+    ...     provides="plone.outputfilters.interfaces.IFilter"
+    ...     for="* *"
+    ...     factory="plone.outputfilters.filters.example.EmDashAdder"
+    ...     />
+    ...
+    ... </configure>
+    ... """
+    >>> zcml.load_config("configure.zcml", Products.Five)
+    >>> zcml.load_string(configure)
+
+Now when text is transformed from text/html to text/x-html-safe, the filter will
+be applied::
+
+    >>> app = layer['app']
+    >>> portal = layer['portal']
+    >>> str(portal.portal_transforms.convertTo('text/x-html-safe',
+    ...     'test--test', mimetype='text/html', context=portal))
+    'test\xe2\x80\x94test'
+
+
+How it works
+============
+
+``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:
+
+1. a new mimetype ("text/x-plone-outputfilters-html")
+2. a transform from text/html to text/x-plone-outputfilters-html
+3. a null transform from text/x-plone-outputfilters-html back to text/html
+4. a "transform policy" for the text/x-html-safe mimetype, which says that text
+   being transformed to text/x-html-safe must first be transformed to
+   text/x-plone-outputfilters-html
+
+The filter adapters are looked up and applied during the execution of the
+transform from step #2.
+
+This should be considered an implementation detail and may change at some point
+in the future.
+
diff --git a/plone/outputfilters/README.txt b/plone/outputfilters/README.txt
deleted file mode 100644
index 5ce7a28..0000000
--- a/plone/outputfilters/README.txt
+++ /dev/null
@@ -1,85 +0,0 @@
-Adding a custom filter
-======================
-
-As an example, the following filter replaces all doubled hyphens ("--") with em
-dashes ("-"). (Don't use the example verbatim, because it doesn't parse HTML to
-apply itself only to text nodes, so will mangle HTML comments.)
-
-A filter is a callable which accepts a UTF-8-encoded HTML string as input, and
-returns a modified UTF-8-encoded HTML string. A return value of ``None`` may be
-used to indicate that the input should not be modified.
-
-Example::
-
-    import re
-    from zope.interface import implements
-    from plone.outputfilters.interfaces import IFilter
-
-    class EmDashAdder(object):
-        implements(IFilter)
-        order = 1000
-
-        def __init__(self, context, request):
-            pass
-
-        def is_enabled(self):
-            return True
-
-        pattern = re.compile(r'--')
-
-        def __call__(self, data):
-            return self.pattern.sub('\xe2\x80\x94', data)
-
-The ``order`` attribute may be used to affect the order in which filters are
-applied (higher values run later). The is_enabled method should return a boolean
-indicating whether the filter should be applied.
-
-Filters are registered in ZCML as a named multi-adapter of the context and
-request to IFilter.
-
- >>> from Zope2.App import zcml
- >>> import Products.Five
- >>> configure = """
- ... <configure
- ...     xmlns="http://namespaces.zope.org/zope">
- ...
- ...   <adapter
- ...     name="em_dash_adder"
- ...     provides="plone.outputfilters.interfaces.IFilter"
- ...     for="* *"
- ...     factory="plone.outputfilters.filters.example.EmDashAdder"
- ...     />
- ...
- ... </configure>
- ... """
- >>> zcml.load_config("configure.zcml", Products.Five)
- >>> zcml.load_string(configure)
-
-Now when text is transformed from text/html to text/x-html-safe, the filter will
-be applied.
-
- >>> app = layer['app']
- >>> portal = layer['portal']
- >>> str(portal.portal_transforms.convertTo('text/x-html-safe',
- ...     'test--test', mimetype='text/html', context=portal))
- 'test\xe2\x80\x94test'
-
-
-How it works
-============
-
-``plone.outputfilters`` hooks into the PortalTransforms machinery by installing:
-
-1. a new mimetype ("text/x-plone-outputfilters-html")
-2. a transform from text/html to text/x-plone-outputfilters-html
-3. a null transform from text/x-plone-outputfilters-html back to text/html
-4. a "transform policy" for the text/x-html-safe mimetype, which says that text
-   being transformed to text/x-html-safe must first be transformed to
-   text/x-plone-outputfilters-html
-
-The filter adapters are looked up and applied during the execution of the
-transform from step #2.
-
-This should be considered an implementation detail and may change at some point
-in the future.
-
diff --git a/plone/outputfilters/__init__.py b/plone/outputfilters/__init__.py
index aa75185..5dda827 100644
--- a/plone/outputfilters/__init__.py
+++ b/plone/outputfilters/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 def apply_filters(filters, data):
     by_order = lambda x: x.order
     filters = sorted(filters, key=by_order)
diff --git a/plone/outputfilters/browser/captioned_image.py b/plone/outputfilters/browser/captioned_image.py
index 2cfecb4..2e08478 100644
--- a/plone/outputfilters/browser/captioned_image.py
+++ b/plone/outputfilters/browser/captioned_image.py
@@ -1,5 +1,6 @@
-from zope.cachedescriptors.property import Lazy as lazy_property
+# -*- coding: utf-8 -*-
 from Products.Five import BrowserView
+from zope.cachedescriptors.property import Lazy as lazy_property
 
 
 class CaptionedImageView(BrowserView):
diff --git a/plone/outputfilters/browser/resolveuid.py b/plone/outputfilters/browser/resolveuid.py
index 34903f3..e774de2 100644
--- a/plone/outputfilters/browser/resolveuid.py
+++ b/plone/outputfilters/browser/resolveuid.py
@@ -1,13 +1,16 @@
+# -*- coding: utf-8 -*-
 from Acquisition import aq_base
+from Products.CMFCore.utils import getToolByName
 from zExceptions import NotFound
-from zope.interface import implements
-from zope.publisher.interfaces import IPublishTraverse
+from zope.interface import implementer
 from zope.publisher.browser import BrowserView
+from zope.publisher.interfaces import IPublishTraverse
+
+
 try:
     from zope.component.hooks import getSite
 except ImportError:
     from zope.app.component.hooks import getSite
-from Products.CMFCore.utils import getToolByName
 
 
 def uuidToURL(uuid):
@@ -41,10 +44,10 @@ def uuidFor(obj):
         return uuid
 
 
+@implementer(IPublishTraverse)
 class ResolveUIDView(BrowserView):
     """Resolve a URL like /resolveuid/<uuid> to a normalized URL.
     """
-    implements(IPublishTraverse)
 
     subpath = None
 
diff --git a/plone/outputfilters/filters/example.py b/plone/outputfilters/filters/example.py
index 96d7017..e119fd8 100644
--- a/plone/outputfilters/filters/example.py
+++ b/plone/outputfilters/filters/example.py
@@ -1,10 +1,12 @@
-import re
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from plone.outputfilters.interfaces import IFilter
+from zope.interface import implementer
+
+import re
 
 
+@implementer(IFilter)
 class EmDashAdder(object):
-    implements(IFilter)
     order = 1000
 
     def __init__(self, context, request):
diff --git a/plone/outputfilters/filters/resolveuid_and_caption.py b/plone/outputfilters/filters/resolveuid_and_caption.py
index ff5bed7..2972073 100644
--- a/plone/outputfilters/filters/resolveuid_and_caption.py
+++ b/plone/outputfilters/filters/resolveuid_and_caption.py
@@ -1,22 +1,31 @@
-from unidecode import unidecode
-from ZODB.POSException import ConflictError
-from Acquisition import aq_base, aq_acquire, aq_parent
-from zExceptions import NotFound
-from zope.publisher.interfaces import NotFound as ztkNotFound
+# -*- coding: utf-8 -*-
+from Acquisition import aq_acquire
+from Acquisition import aq_base
+from Acquisition import aq_parent
+from cgi import escape
 from DocumentTemplate.DT_Util import html_quote
 from DocumentTemplate.DT_Var import newline_to_br
-from zope.component.hooks import getSite
+from plone.outputfilters.browser.resolveuid import uuidToObject
+from plone.outputfilters.interfaces import IFilter
 from Products.CMFCore.interfaces import IContentish
+from sgmllib import SGMLParseError
+from sgmllib import SGMLParser
+from unidecode import unidecode
+from urllib import unquote
+from urlparse import urljoin
+from urlparse import urlsplit
+from zExceptions import NotFound
+from ZODB.POSException import ConflictError
 from zope.cachedescriptors.property import Lazy as lazy_property
 from zope.component import getAllUtilitiesRegisteredFor
-from zope.interface import implements, Interface, Attribute
-from plone.outputfilters.browser.resolveuid import uuidToObject
+from zope.component.hooks import getSite
+from zope.interface import Attribute
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.publisher.interfaces import NotFound as ztkNotFound
 
 import re
-from urllib import unquote
-from urlparse import urljoin
-from urlparse import urlsplit
-from sgmllib import SGMLParser, SGMLParseError
+
 
 HAS_LINGUAPLONE = True
 try:
@@ -24,13 +33,10 @@
 except ImportError:
     HAS_LINGUAPLONE = False
 
-from plone.outputfilters.interfaces import IFilter
 
 appendix_re = re.compile('^(.*)([\?#].*)$')
 resolveuid_re = re.compile('^[./]*resolve[Uu]id/([^/]*)/?(.*)$')
 
-from cgi import escape
-
 
 class IImageCaptioningEnabler(Interface):
     available = Attribute(
@@ -42,8 +48,8 @@ class IResolveUidsEnabler(Interface):
         "Boolean indicating whether UID links should be resolved.")
 
 
+@implementer(IResolveUidsEnabler)
 class ResolveUidsAlwaysEnabled(object):
-    implements(IResolveUidsEnabler)
 
     available = True
 
@@ -53,14 +59,14 @@ def tag(img, **attributes):
         return img.tag(**attributes)
 
 
+@implementer(IFilter)
 class ResolveUIDAndCaptionFilter(SGMLParser):
     """ Parser to convert UUID links and captioned images """
-    implements(IFilter)
 
     singleton_tags = set([
-      'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame',
-      'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
-      'source', 'track', 'wbr'])
+        'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame',
+        'hr', 'img', 'input', 'isindex', 'keygen', 'link', 'meta', 'param',
+        'source', 'track', 'wbr'])
 
     def __init__(self, context=None, request=None):
         SGMLParser.__init__(self)
@@ -76,7 +82,7 @@ def __init__(self, context=None, request=None):
     @lazy_property
     def captioned_image_template(self):
         return self.context.restrictedTraverse(
-                    'plone.outputfilters_captioned_image')
+            'plone.outputfilters_captioned_image')
 
     @lazy_property
     def captioned_images(self):
@@ -295,10 +301,10 @@ def handle_captioned_image(self, attributes, image, fullimage, caption):
             'fullimage': fullimage,
             'tag': tag(**attributes),
             'isfullsize': image is fullimage or (
-                          image.width == original_width and
-                          image.height == original_height),
+                image.width == original_width and
+                image.height == original_height),
             'width': attributes.get('width', width),
-            }
+        }
         if self.in_link:
             # Must preserve original link, don't overwrite
             # with a link to the image
@@ -339,7 +345,7 @@ def unknown_starttag(self, tag, attrs):
                         # being rendered in the context where it was stored
                         relative_root = self.context
                         if not getattr(
-                            self.context, 'isPrincipiaFolderish', False):
+                                self.context, 'isPrincipiaFolderish', False):
                             relative_root = aq_parent(self.context)
                         actual_url = relative_root.absolute_url()
                         href = urljoin(actual_url + '/', subpath) + appendix
@@ -351,8 +357,12 @@ def unknown_starttag(self, tag, attrs):
                 attributes["src"] = src
                 caption = description
                 # Check if the image needs to be captioned
-                if (self.captioned_images and image is not None and caption
-                    and 'captioned' in attributes.get('class', '').split(' ')):
+                if (
+                    self.captioned_images and
+                    image is not None and
+                    caption and
+                    'captioned' in attributes.get('class', '').split(' ')
+                ):
                     self.handle_captioned_image(attributes, image, fullimage,
                                                 caption)
                     return True
@@ -371,7 +381,8 @@ def unknown_starttag(self, tag, attrs):
             try:
                 strattrs += ' %s="%s"' % (key, escape(value, quote=True))
             except UnicodeDecodeError:
-                strattrs += ' %s="%s"' % (unidecode(key), escape(unidecode(value), quote=True))
+                strattrs += ' %s="%s"' % (unidecode(key),
+                                          escape(unidecode(value), quote=True))
 
         if tag in self.singleton_tags:
             self.append_data("<%s%s />" % (tag, strattrs))
diff --git a/plone/outputfilters/interfaces.py b/plone/outputfilters/interfaces.py
index aa43c4c..2b109bc 100644
--- a/plone/outputfilters/interfaces.py
+++ b/plone/outputfilters/interfaces.py
@@ -1,5 +1,6 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
 from zope import schema
+from zope.interface import Interface
 
 
 class IFilter(Interface):
diff --git a/plone/outputfilters/mimetype.py b/plone/outputfilters/mimetype.py
index 6395b34..8298444 100644
--- a/plone/outputfilters/mimetype.py
+++ b/plone/outputfilters/mimetype.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from Products.MimetypesRegistry.MimeTypeItem import MimeTypeItem
 
 
diff --git a/plone/outputfilters/setuphandlers.py b/plone/outputfilters/setuphandlers.py
index 59a149e..1582428 100644
--- a/plone/outputfilters/setuphandlers.py
+++ b/plone/outputfilters/setuphandlers.py
@@ -1,12 +1,10 @@
-from zope.component import getUtility
-from Products.PortalTransforms.interfaces import IPortalTransformsTool
-from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
-
+# -*- coding: utf-8 -*-
 from plone.outputfilters.mimetype import text_plone_outputfilters_html
-from plone.outputfilters.transforms.plone_outputfilters_html_to_html import \
-    plone_outputfilters_html_to_html
-from plone.outputfilters.transforms.html_to_plone_outputfilters_html import \
-    html_to_plone_outputfilters_html
+from plone.outputfilters.transforms.html_to_plone_outputfilters_html import html_to_plone_outputfilters_html
+from plone.outputfilters.transforms.plone_outputfilters_html_to_html import plone_outputfilters_html_to_html
+from Products.MimetypesRegistry.interfaces import IMimetypesRegistryTool
+from Products.PortalTransforms.interfaces import IPortalTransformsTool
+from zope.component import getUtility
 
 
 def register_mimetype(context, mimetype):
diff --git a/plone/outputfilters/testing.py b/plone/outputfilters/testing.py
index b7c6f58..05b945b 100644
--- a/plone/outputfilters/testing.py
+++ b/plone/outputfilters/testing.py
@@ -1,16 +1,17 @@
-from plone.app.testing import IntegrationTesting
+# -*- coding: utf-8 -*-
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
+from plone.app.testing import applyProfile
 from plone.app.testing import FunctionalTesting
+from plone.app.testing import IntegrationTesting
 from plone.app.testing import PloneSandboxLayer
-from plone.app.testing import applyProfile
-from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE
-
 from plone.outputfilters.filters.resolveuid_and_caption import IImageCaptioningEnabler  # noqa
-from zope.interface import implements
+from zope.interface import implementer
+
 import zope.component
 
 
+@implementer(IImageCaptioningEnabler)
 class DummyImageCaptioningEnabler(object):
-    implements(IImageCaptioningEnabler)
 
     available = True
 
diff --git a/plone/outputfilters/tests/test_apply_filters.py b/plone/outputfilters/tests/test_apply_filters.py
index 6f4b1da..f6800a7 100644
--- a/plone/outputfilters/tests/test_apply_filters.py
+++ b/plone/outputfilters/tests/test_apply_filters.py
@@ -1,7 +1,8 @@
-import unittest
-
+# -*- coding: utf-8 -*-
 from plone.outputfilters import apply_filters
 
+import unittest
+
 
 class DummyFilter(object):
     order = 500
@@ -46,6 +47,7 @@ def test_apply_filters_checks_is_enabled(self):
 
     def test_apply_filters_handles_return_none(self):
         class DummyFilterReturningNone(DummyFilter):
+
             def __call__(self, data):
                 return None
         filter = DummyFilterReturningNone()
diff --git a/plone/outputfilters/tests/test_docs.py b/plone/outputfilters/tests/test_docs.py
index 5a9eecf..d7b7ccb 100644
--- a/plone/outputfilters/tests/test_docs.py
+++ b/plone/outputfilters/tests/test_docs.py
@@ -1,12 +1,10 @@
 # -*- coding: utf-8 -*-
-import doctest
-
-import unittest2 as unittest
-import pprint
-
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
 from plone.testing import layered
 
-from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_FUNCTIONAL_TESTING
+import doctest
+import pprint
+import unittest2 as unittest
 
 
 optionflags = (
@@ -15,7 +13,7 @@
     doctest.REPORT_ONLY_FIRST_FAILURE
 )
 normal_testfiles = [
-    '../README.txt'
+    '../README.rst'
 ]
 
 
diff --git a/plone/outputfilters/tests/test_resolveuid_and_caption.py b/plone/outputfilters/tests/test_resolveuid_and_caption.py
index 3499a32..d817424 100644
--- a/plone/outputfilters/tests/test_resolveuid_and_caption.py
+++ b/plone/outputfilters/tests/test_resolveuid_and_caption.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from doctest import _ellipsis_match
 from doctest import OutputChecker
 from doctest import REPORT_NDIFF
@@ -300,9 +301,9 @@ def test_image_captioning_relative_path_private_folder(self):
         # traversal to them must not raise an error!
         self.loginAsPortalOwner()
         self.portal.invokeFactory('Folder', id='private',
-            title='Private Folder')
+                                  title='Private Folder')
         self.portal.private.invokeFactory('Image', id='image.jpg',
-            title='Image')
+                                          title='Image')
         image = getattr(self.portal.private, 'image.jpg')
         image.setDescription('My private image caption')
         image.image = dummy_image()
@@ -415,7 +416,8 @@ def test_image_captioning_preserves_existing_links(self):
 
     def test_image_captioning_handles_non_ascii(self):
         self.portal['image.jpg'].setTitle(u'Kupu Test Image \xe5\xe4\xf6')
-        self.portal['image.jpg'].setDescription(u'Kupu Test Image \xe5\xe4\xf6')
+        self.portal['image.jpg'].setDescription(
+            u'Kupu Test Image \xe5\xe4\xf6')
         text_in = """<img class="captioned" src="image.jpg"/>"""
         text_out = """<dl style="width:500px;" class="captioned">
 <dt><img src="http://nohost/plone/image.jpg/@@images/...jpeg" alt="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" title="Kupu Test Image \xc3\xa5\xc3\xa4\xc3\xb6" height="331" width="500" /></dt>
@@ -429,4 +431,5 @@ def test_resolve_uids_with_bigU(self):
         self.assertTrue('href="http://nohost/plone/image.jpg"' in str(res))
 
     def test_singleton_elements(self):
-        self._assertTransformsTo('<hr/>\r\n<p>foo</p><br/>', '<hr />\r\n<p>foo</p><br />')
+        self._assertTransformsTo(
+            '<hr/>\r\n<p>foo</p><br/>', '<hr />\r\n<p>foo</p><br />')
diff --git a/plone/outputfilters/tests/test_transforms.py b/plone/outputfilters/tests/test_transforms.py
index d3601ec..8bdfe77 100644
--- a/plone/outputfilters/tests/test_transforms.py
+++ b/plone/outputfilters/tests/test_transforms.py
@@ -1,7 +1,9 @@
-import unittest
-from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+# -*- coding: utf-8 -*-
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
+from plone.outputfilters.testing import PLONE_OUTPUTFILTERS_INTEGRATION_TESTING
+
+import unittest
 
 
 class TransformsTestCase(unittest.TestCase):
diff --git a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
index 6bb2529..0cb3426 100644
--- a/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
+++ b/plone/outputfilters/transforms/html_to_plone_outputfilters_html.py
@@ -1,29 +1,15 @@
-from zope.component import getAdapters
-from zope.interface import implements
-try:
-    from zope.component.hooks import getSite
-except ImportError:
-    from zope.app.component.hooks import getSite
-
-try:
-    try:
-        from Products.PortalTransforms.interfaces import ITransform
-    except ImportError:
-        from Products.PortalTransforms.z3.interfaces import ITransform
-except ImportError:
-    ITransform = None
-from Products.PortalTransforms.interfaces import itransform
-
-
-from plone.outputfilters.interfaces import IFilter
+# -*- coding: utf-8 -*-
 from plone.outputfilters import apply_filters
+from plone.outputfilters.interfaces import IFilter
+from Products.PortalTransforms.interfaces import ITransform
+from zope.component import getAdapters
+from zope.component.hooks import getSite
+from zope.interface import implementer
 
 
+@implementer(ITransform)
 class html_to_plone_outputfilters_html:
     """ transform which applies output filters"""
-    if ITransform is not None:
-        implements(ITransform)
-    __implements__ = itransform
     __name__ = "html_to_plone_outputfilters_html"
     inputs = ('text/html',)
     output = "text/x-plone-outputfilters-html"
diff --git a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
index fc50021..b1a10e9 100644
--- a/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
+++ b/plone/outputfilters/transforms/plone_outputfilters_html_to_html.py
@@ -1,28 +1,23 @@
-from zope.interface import implements
-
-try:
-    try:
-        from Products.PortalTransforms.interfaces import ITransform
-    except ImportError:
-        from Products.PortalTransforms.z3.interfaces import ITransform
-except ImportError:
-    ITransform = None
-from Products.PortalTransforms.interfaces import itransform
-
-
-class plone_outputfilters_html_to_html:
-    if ITransform is not None:
-        implements(ITransform)
-    __implements__ = itransform
+# -*- coding: utf-8 -*-
+from Products.PortalTransforms.interfaces import ITransform
+from zope.interface import implementer
+
+
+@implementer(ITransform)
+class plone_outputfilters_html_to_html(object):
+
     __name__ = "plone_outputfilters_html_to_html"
     inputs = ('text/x-plone-outputfilters-html',)
     output = "text/html"
 
     def __init__(self, name=None):
         self.config_metadata = {
-            'inputs': ('list', 'Inputs',
-                       'Input(s) MIME type. Change with care.'),
-            }
+            'inputs': (
+                'list',
+                'Inputs',
+                'Input(s) MIME type. Change with care.'
+            ),
+        }
         if name:
             self.__name__ = name
 
diff --git a/setup.py b/setup.py
index 91482c9..f9528bd 100644
--- a/setup.py
+++ b/setup.py
@@ -1,7 +1,11 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 import os
 
-version = '2.1.6.dev0'
+
+version = '3.0.0.dev0'
 
 setup(name='plone.outputfilters',
       version=version,
@@ -10,13 +14,14 @@
       long_description=(
           open("README.rst").read() + "\n" +
           open(os.path.join("plone", "outputfilters",
-                            "README.txt")).read() + "\n" +
+                            "README.rst")).read() + "\n" +
           open("CHANGES.rst").read()),
       # Get more strings from
       # https://pypi.python.org/pypi?%3Aaction=list_classifiers
       classifiers=[
           "Framework :: Plone",
           "Framework :: Plone :: 5.0",
+          "Framework :: Plone :: 5.1",
           "Programming Language :: Python",
           "Programming Language :: Python :: 2.7",
       ],
@@ -30,12 +35,12 @@
       include_package_data=True,
       zip_safe=False,
       install_requires=[
-          'setuptools',
           'Products.CMFCore',
           'Products.GenericSetup',
           'Products.MimetypesRegistry',
-          'Products.PortalTransforms',
-          'unidecode'
+          'Products.PortalTransforms>=2.0a1',
+          'setuptools',
+          'unidecode',
       ],
       extras_require={
           'test': [


