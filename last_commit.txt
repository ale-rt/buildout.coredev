Repository: plone.scale


Branch: refs/heads/master
Date: 2016-04-30T01:43:48+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.scale/commit/250406e46a0a291d1049a631d5b365869b4c0334

adapter based scale factory lookup.

Files changed:
A CHANGES.rst
M docs/index.rst
M plone/scale/__init__.py
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/__init__.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M setup.cfg
M setup.py
D docs/changes.rst

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..7bf1937
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,168 @@
+Changelog
+=========
+
+
+1.5 (unreleased)
+----------------
+
+New:
+
+- Use an adapter to lookup the actual factory for scaling.
+  Deprecated passing the factory as named parameter along,
+  because this had not enough flexibility:
+  If addons want to provide alterative methods to scale (i.e. cropping),
+  now a specific adapter can perform the work.
+  [jensens]
+
+Fixes:
+
+- Minor housekeeping.
+  [jensens]
+
+
+1.4.1 (2016-02-12)
+------------------
+
+Fixes:
+
+- Fix KeyError in storage.AnnotationStorage._cleanup when attempting
+  to delete the storage for the same key twice.
+  [fulv]
+
+
+1.4 (2015-12-07)
+----------------
+
+New:
+
+- Resolve conflicts raised when accessing multiple scales concurrently.
+  [gotcha]
+
+- Refactored scale storage.
+  [gotcha]
+
+
+1.3.5 (2015-03-10)
+------------------
+
+- PIL thumbnail does not work for magnifying images (when scaling up).
+  Use resize instead. [sureshvv]
+
+
+1.3.4 (2014-09-07)
+------------------
+
+- When a scale is outdated, discard all image scales that are more
+  than a day older than the context.
+  Refs https://dev.plone.org/ticket/13791
+  [maurits]
+
+- Make sure deleting items or clearing a complete storage works.
+  Deleting one item would often delete a linked second item, which
+  made it hard to remove several items at once.
+  [maurits]
+
+
+1.3.3 (2014-01-27)
+------------------
+
+- Discard old image scales if item was modified.
+  Refs https://dev.plone.org/ticket/13791
+  [gforcada]
+
+- Generate Progressive JPEG.
+  [kroman0]
+
+
+1.3.2 (2013-05-23)
+------------------
+
+- Added a marker interface for scaled image quality.
+  Refs http://dev.plone.org/plone/ticket/13337
+  [khink]
+
+
+1.3.1 (2013-04-06)
+------------------
+
+- Cropped images are now centralised vertically as well as horizontally [mattss]
+
+
+1.3 (2013-01-17)
+----------------
+
+- Add MANIFEST.in.
+  [WouterVH]
+
+- Break up `scaleImage`, so that its scaling-related parts can be applied
+  to instances of `PIL.Image` for further processing.
+  [witsch]
+
+
+1.2.2 - 2010-09-28
+------------------
+
+- Re-release to fix bad egg created for 1.2.1.
+  Refs http://dev.plone.org/plone/ticket/11154
+  [witsch]
+
+
+1.2.1 - 2010-08-18
+------------------
+
+- Convert CMYK to RGB, allowing for web previews of print images.
+  [tomster]
+
+
+1.2 - 2010-07-18
+----------------
+
+- Update package metadata.
+  [hannosch]
+
+
+1.1 - 2010-04-20
+----------------
+
+- Abort if thumbnail behaviour is requested but either width or height is
+  missing. This is nicer than confronting the caller with a PIL exception.
+  [wichert]
+
+- Rename the `keep` direction to `thumbnail` to make its behaviour more
+  intuitive, but accept `keep` for now.
+  [wichert]
+
+
+1.0 - 2010-04-12
+----------------
+
+- Only pull in the uuid distribution in Python versions before 2.5.
+  [hannosch]
+
+- Don't declare dependency on PIL.
+  [davisagli]
+
+
+1.0a2 - 2010-04-10
+------------------
+
+- Add BSD license text following board decision:
+  http://lists.plone.org/pipermail/membership/2009-August/001038.html
+  [elro]
+
+- Allow to use PIL's thumbnail algorithm to keep the present aspect ratio.
+  [spamsch, witsch]
+
+- Allow to set the quality of the resulting image scales.
+  [witsch]
+
+- Refactor storage adapter for image scales to be less dependent on the
+  underlying content type.
+  [witsch]
+
+
+1.0a1 - 2009-11-10
+------------------
+
+- Initial release
+  [wichert]
diff --git a/docs/changes.rst b/docs/changes.rst
deleted file mode 100644
index f8ec588..0000000
--- a/docs/changes.rst
+++ /dev/null
@@ -1,162 +0,0 @@
-Changelog
-=========
-
-
-1.4.2 (unreleased)
-------------------
-
-New:
-
-- *add item here*
-
-Fixes:
-
-- *add item here*
-
-
-1.4.1 (2016-02-12)
-------------------
-
-Fixes:
-
-- Fix KeyError in storage.AnnotationStorage._cleanup when attempting
-  to delete the storage for the same key twice.
-  [fulv]
-
-
-1.4 (2015-12-07)
-----------------
-
-New:
-
-- Resolve conflicts raised when accessing multiple scales concurrently.
-  [gotcha]
-
-- Refactored scale storage.
-  [gotcha]
-
-
-1.3.5 (2015-03-10)
-------------------
-
-- PIL thumbnail does not work for magnifying images (when scaling up).
-  Use resize instead. [sureshvv]
-
-
-1.3.4 (2014-09-07)
-------------------
-
-- When a scale is outdated, discard all image scales that are more
-  than a day older than the context.
-  Refs https://dev.plone.org/ticket/13791
-  [maurits]
-
-- Make sure deleting items or clearing a complete storage works.
-  Deleting one item would often delete a linked second item, which
-  made it hard to remove several items at once.
-  [maurits]
-
-
-1.3.3 (2014-01-27)
-------------------
-
-- Discard old image scales if item was modified.
-  Refs https://dev.plone.org/ticket/13791
-  [gforcada]
-
-- Generate Progressive JPEG.
-  [kroman0]
-
-
-1.3.2 (2013-05-23)
-------------------
-
-- Added a marker interface for scaled image quality.
-  Refs http://dev.plone.org/plone/ticket/13337
-  [khink]
-
-
-1.3.1 (2013-04-06)
-------------------
-
-- Cropped images are now centralised vertically as well as horizontally [mattss]
-
-
-1.3 (2013-01-17)
-----------------
-
-- Add MANIFEST.in.
-  [WouterVH]
-
-- Break up `scaleImage`, so that its scaling-related parts can be applied
-  to instances of `PIL.Image` for further processing.
-  [witsch]
-
-
-1.2.2 - 2010-09-28
-------------------
-
-- Re-release to fix bad egg created for 1.2.1.
-  Refs http://dev.plone.org/plone/ticket/11154
-  [witsch]
-
-
-1.2.1 - 2010-08-18
-------------------
-
-- Convert CMYK to RGB, allowing for web previews of print images.
-  [tomster]
-
-
-1.2 - 2010-07-18
-----------------
-
-- Update package metadata.
-  [hannosch]
-
-
-1.1 - 2010-04-20
-----------------
-
-- Abort if thumbnail behaviour is requested but either width or height is
-  missing. This is nicer than confronting the caller with a PIL exception.
-  [wichert]
-
-- Rename the `keep` direction to `thumbnail` to make its behaviour more
-  intuitive, but accept `keep` for now.
-  [wichert]
-
-
-1.0 - 2010-04-12
-----------------
-
-- Only pull in the uuid distribution in Python versions before 2.5.
-  [hannosch]
-
-- Don't declare dependency on PIL.
-  [davisagli]
-
-
-1.0a2 - 2010-04-10
-------------------
-
-- Add BSD license text following board decision:
-  http://lists.plone.org/pipermail/membership/2009-August/001038.html
-  [elro]
-
-- Allow to use PIL's thumbnail algorithm to keep the present aspect ratio.
-  [spamsch, witsch]
-
-- Allow to set the quality of the resulting image scales.
-  [witsch]
-
-- Refactor storage adapter for image scales to be less dependent on the
-  underlying content type.
-  [witsch]
-
-
-1.0a1 - 2009-11-10
-------------------
-
-- Initial release
-  [wichert]
diff --git a/docs/index.rst b/docs/index.rst
index 149888b..a9ce821 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -63,6 +63,8 @@ In addition several implementation goals were defined:
 Usage
 =====
 
+ATTENTION: Long time outdated information follows.
+
 The most common way to use :mod:`plone.scale` is from a HTML template.
 In TAL syntax a typical usage looks like this::
 
diff --git a/plone/scale/__init__.py b/plone/scale/__init__.py
index e69de29..40a96af 100644
--- a/plone/scale/__init__.py
+++ b/plone/scale/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py
index 8e196be..e99eadd 100644
--- a/plone/scale/interfaces.py
+++ b/plone/scale/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-s
 from zope.interface import Interface
 
 
@@ -11,3 +12,47 @@ class IScaledImageQuality(Interface):
     Products.Archetypes and Products.ATContentTypes (the latter two currently
     by a patch in plone.app.imaging.monkey).
     """
+
+
+class IImageScaleFactory(Interface):
+    """Creates a scale
+    """
+
+    def _call__(
+        fieldname=None,
+        direction='thumbnail',
+        height=None,
+        width=None,
+        **parameters
+    ):
+        """Interface defining an actual scaling operation.
+
+        Arguments are:
+
+        ``context``
+            some object with images on
+
+        ``fieldname``
+            name of the field to scale
+
+        ``direction``
+            is same as PIL direction on scale
+
+        ``width`` and ``height``
+            target size
+
+        ``**parameters``
+            is a dict with optional additional expected keyword arguments
+
+        Expected to return a triple of ``value, format, dimensions``
+        or ``None`` on failure.
+
+        ``value``
+            is expected to be an storeable value
+
+        ``format``
+            is the minor part of the ``image`` mimetype
+
+        ``dimensions``
+            is a tuple (width, height)
+        """
diff --git a/plone/scale/scale.py b/plone/scale/scale.py
index 9094657..f076477 100644
--- a/plone/scale/scale.py
+++ b/plone/scale/scale.py
@@ -1,7 +1,10 @@
+# -*- coding: utf-8 -*-
 from cStringIO import StringIO
+
 import PIL.Image
 import PIL.ImageFile
 
+
 # Set a larger buffer size. This fixes problems with jpeg decoding.
 # See http://mail.python.org/pipermail/image-sig/1999-August/000816.html for
 # details.
diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 2135f6f..36e112c 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -1,12 +1,17 @@
-from uuid import uuid4
+# -*- coding: utf-8 -*-
 from persistent.dict import PersistentDict
-from zope.interface import Interface
-from zope.interface import implements
-from zope.annotation import IAnnotations
+from plone.scale.interfaces import IImageScaleFactory
 from UserDict import DictMixin
+from uuid import uuid4
 from ZODB.POSException import ConflictError
+from zope.annotation import IAnnotations
+from zope.interface import implementer
+from zope.interface import Interface
+
 import logging
 import pprint
+import warnings
+
 
 logger = logging.getLogger('plone.scale')
 # Keep old scales around for this amount of milliseconds.
@@ -96,12 +101,12 @@ def _p_resolveConflict(self, oldState, savedState, newState):
         return dict(data=saved)
 
 
+@implementer(IImageScaleStorage)
 class AnnotationStorage(DictMixin):
     """ An abstract storage for image scale data using annotations and
         implementing :class:`IImageScaleStorage`. Image data is stored as an
         annotation on the object container, i.e. the image. This is needed
         since not all images are themselves annotatable. """
-    implements(IImageScaleStorage)
 
     def __init__(self, context, modified=None):
         self.context = context
@@ -158,19 +163,57 @@ def scale(self, factory=None, **parameters):
             del storage[info['uid']]
             # invalidate when the image was updated
             info = None
-        if info is None and factory:
-            result = factory(**parameters)
-            if result is not None:
-                # storage will be modified:
-                # good time to also cleanup
-                self._cleanup()
-                data, format, dimensions = result
-                width, height = dimensions
-                uid = str(uuid4())
-                info = dict(uid=uid, data=data, width=width, height=height,
-                            mimetype='image/%s' % format.lower(), key=key,
-                            modified=self.modified_time)
-                storage[uid] = info
+        elif info is not None:
+            return info
+
+        scaling_factory = IImageScaleFactory(self.context, None)
+
+        # BBB/Deprecation handling
+        if factory is not None:
+            if scaling_factory is not None:
+                raise ValueError(
+                    'Factory is passed to plone.scale but also an adapter '
+                    'was found. No way to decide which one to execute.'
+                )
+            else:
+                warnings.warn(
+                    'Deprecated usage of factory in plone.scale. Provide an '
+                    'adapter for the factory instead. The kwarg will be '
+                    'dropped with plone.scale 3.0',
+                    DeprecationWarning
+                )
+                result = factory(**parameters)
+        elif scaling_factory is not None:
+            # this is what we want, keep this after deprecaton phase
+            result = scaling_factory(**parameters)
+        else:
+            # adaption error, nor a factory was passed.
+            # BBB behavior here is to return None
+            # nevertheless we warn!
+            warnings.warn(
+                'Could not adapt context to IImageScaleFactory nor a '
+                'deprecated BBB factory callable was provided.'
+                'Assume None return value as it was before.'
+            )
+            return None
+
+        if result is not None:
+            # storage will be modified:
+            # good time to also cleanup
+            self._cleanup()
+            data, format_, dimensions = result
+            width, height = dimensions
+            uid = str(uuid4())
+            info = dict(
+                uid=uid,
+                data=data,
+                width=width,
+                height=height,
+                mimetype='image/{0}'.format(format_.lower()),
+                key=key,
+                modified=self.modified_time,
+            )
+            storage[uid] = info
         return info
 
     def _cleanup(self):
diff --git a/plone/scale/tests/__init__.py b/plone/scale/tests/__init__.py
index d2fbd0e..7d132ed 100644
--- a/plone/scale/tests/__init__.py
+++ b/plone/scale/tests/__init__.py
@@ -1,3 +1,4 @@
 import os.path
 
+
 TEST_DATA_LOCATION = os.path.join(os.path.dirname(__file__), "data")
diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py
index 19dd3ba..519b6ea 100644
--- a/plone/scale/tests/test_scale.py
+++ b/plone/scale/tests/test_scale.py
@@ -2,8 +2,10 @@
 from plone.scale.scale import scaleImage
 from plone.scale.tests import TEST_DATA_LOCATION
 from unittest import TestCase
-import PIL.Image
+
 import os.path
+import PIL.Image
+
 
 PNG = open(os.path.join(TEST_DATA_LOCATION, "logo.png")).read()
 GIF = open(os.path.join(TEST_DATA_LOCATION, "logo.gif")).read()
diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py
index 1e05d7f..650f21a 100644
--- a/plone/scale/tests/test_storage.py
+++ b/plone/scale/tests/test_storage.py
@@ -1,13 +1,45 @@
-from operator import itemgetter, setitem, delitem
+# -*- coding: utf-8 -*-
+from operator import delitem
+from operator import itemgetter
+from operator import setitem
+from plone.testing import zca
 from unittest import TestCase
 
 
+class _DummyContext(object):
+    pass
+
+
 class AnnotationStorageTests(TestCase):
 
+    layer = zca.UNIT_TESTING
+
+    def _provide_dummy_scale_adapter(self, result=True):
+        from zope.component import adapter
+        from zope.component import provideAdapter
+        from zope.interface import implementer
+        from plone.scale.interfaces import IImageScaleFactory
+
+        factory = self.factory
+
+        @implementer(IImageScaleFactory)
+        @adapter(_DummyContext)
+        class DummyISF(object):
+
+            def __init__(self, context):
+                self.context = context
+
+            def __call__(self, **parameters):
+                if result:
+                    return factory()
+                return None
+
+        provideAdapter(DummyISF)
+
     @property
     def storage(self):
         from plone.scale.storage import AnnotationStorage
-        storage = AnnotationStorage(None)
+        storage = AnnotationStorage(_DummyContext())
         storage.modified = lambda: 42
         storage.storage = {}
         return storage
@@ -20,7 +52,7 @@ def testInterface(self):
         storage = self.storage
         self.failUnless(IImageScaleStorage.providedBy(storage))
 
-    def testScaleForNonExistingScaleWithCreation(self):
+    def testScaleForNonExistingScaleWithCreationBBB(self):
         storage = self.storage
         scale = storage.scale(factory=self.factory, foo=23, bar=42)
         self.failUnless('uid' in scale)
@@ -30,24 +62,56 @@ def testScaleForNonExistingScaleWithCreation(self):
         self.assertEqual(scale['height'], 23)
         self.assertEqual(scale['mimetype'], 'image/png')
 
+    def testScaleForNonExistingScaleWithCreation(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        self.failUnless('uid' in scale)
+        self.failUnless('key' in scale)
+        self.assertEqual(scale['data'], 'some data')
+        self.assertEqual(scale['width'], 42)
+
+        self.assertEqual(scale['height'], 23)
+        self.assertEqual(scale['mimetype'], 'image/png')
+
+    def testScaleForNonExistingScaleWithoutCreationBBB(self):
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        self.assertEqual(scale, None)
+
     def testScaleForNonExistingScaleWithoutCreation(self):
+        self._provide_dummy_scale_adapter(result=None)
         storage = self.storage
         scale = storage.scale(foo=23, bar=42)
         self.assertEqual(scale, None)
 
-    def testScaleForExistingScale(self):
+    def testScaleForExistingScaleBBB(self):
         storage = self.storage
         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)
         scale2 = storage.scale(factory=self.factory, bar=42, foo=23)
         self.failUnless(scale1 is scale2)
 
-    def testScaleForSimilarScales(self):
+    def testScaleForExistingScale(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale1 = storage.scale(foo=23, bar=42)
+        scale2 = storage.scale(bar=42, foo=23)
+        self.failUnless(scale1 is scale2)
+
+    def testScaleForSimilarScalesBBB(self):
         storage = self.storage
         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)
         scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz='!')
         self.failIf(scale1 is scale2)
 
-    def testGetItem(self):
+    def testScaleForSimilarScales(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale1 = storage.scale(foo=23, bar=42)
+        scale2 = storage.scale(bar=42, foo=23, hurz='!')
+        self.failIf(scale1 is scale2)
+
+    def testGetItemBBB(self):
         storage = self.storage
         scale = storage.scale(factory=self.factory, foo=23, bar=42)
         uid = scale['uid']
@@ -59,6 +123,19 @@ def testGetItem(self):
         self.assertEqual(scale['height'], 23)
         self.assertEqual(scale['mimetype'], 'image/png')
 
+    def testGetItem(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        uid = scale['uid']
+        scale = storage[uid]
+        self.failUnless('uid' in scale)
+        self.failUnless('key' in scale)
+        self.assertEqual(scale['data'], 'some data')
+        self.assertEqual(scale['width'], 42)
+        self.assertEqual(scale['height'], 23)
+        self.assertEqual(scale['mimetype'], 'image/png')
+
     def testGetUnknownItem(self):
         storage = self.storage
         self.assertRaises(KeyError, itemgetter('foo'), storage)
@@ -96,14 +173,22 @@ def testDeleteNonExistingItem(self):
         storage = self.storage
         self.assertRaises(KeyError, delitem, storage, 'foo')
 
-    def testDeleteRemovesItemAndIndex(self):
+    def testDeleteRemovesItemAndIndexBBB(self):
         storage = self.storage
         scale = storage.scale(factory=self.factory, foo=23, bar=42)
         self.assertEqual(len(storage), 1)
         del storage[scale['uid']]
         self.assertEqual(len(storage), 0)
 
-    def testCleanUpOldItems(self):
+    def testDeleteRemovesItemAndIndex(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        self.assertEqual(len(storage), 1)
+        del storage[scale['uid']]
+        self.assertEqual(len(storage), 0)
+
+    def testCleanUpOldItemsBBB(self):
         storage = self.storage
         scale_old = storage.scale(factory=self.factory, foo=23, bar=42)
         next_modified = storage.modified() + 1
@@ -125,13 +210,44 @@ def testCleanUpOldItems(self):
         del storage[scale_newer['uid']]
         self.assertEqual(len(storage), 0)
 
-    def testClear(self):
+    def testCleanUpOldItems(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale_old = storage.scale(foo=23, bar=42)
+        next_modified = storage.modified() + 1
+        storage.modified = lambda: next_modified
+        scale_new = storage.scale(foo=23, bar=42)
+        self.assertEqual(len(storage), 1)
+        self.assertEqual(scale_new['uid'] in storage, True)
+        self.assertEqual(scale_old['uid'] in storage, False)
+
+        # When modification time is older than a day, too old scales
+        # get purged.
+        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1
+        storage.modified = lambda: next_modified
+        scale_newer = storage.scale(foo=23, bar=42)
+
+        self.assertEqual(scale_newer['uid'] in storage, True)
+        self.assertEqual(scale_new['uid'] in storage, False)
+        self.assertEqual(scale_old['uid'] in storage, False)
+        del storage[scale_newer['uid']]
+        self.assertEqual(len(storage), 0)
+
+    def testClearBBB(self):
         storage = self.storage
         storage.scale(factory=self.factory, foo=23, bar=42)
         self.assertEqual(len(storage), 1)
         storage.clear()
         self.assertEqual(len(storage), 0)
 
+    def testClear(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        storage.scale(foo=23, bar=42)
+        self.assertEqual(len(storage), 1)
+        storage.clear()
+        self.assertEqual(len(storage), 0)
+
 
 def test_suite():
     from unittest import defaultTestLoader
diff --git a/setup.cfg b/setup.cfg
index 8263512..9cf6718 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -2,3 +2,11 @@
 ignore =
     *.cfg
     bootstrap.py
+
+[isort]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
+
diff --git a/setup.py b/setup.py
index f19b545..8798f44 100644
--- a/setup.py
+++ b/setup.py
@@ -1,61 +1,63 @@
-from os.path import join
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
-version = '1.4.2.dev0'
-readme = open("README.rst").read().replace(':class:', '').replace(':mod:', '')
-changes = open(join("docs", "changes.rst")).read()
+version = '1.5.0.dev0'
+readme = open('README.rst').read().replace(':class:', '').replace(':mod:', '')
+changes = open('CHANGES.rst').read()
 
 STORAGE_REQUIREMENTS = [
-    "zope.annotation",
-    "zope.component",
-    "zope.interface",
-    "Persistence",
+    'zope.annotation',
+    'zope.component',
+    'zope.interface',
+    'Persistence',
 ]
 
 TESTS_REQUIREMENTS = [
-    "Pillow",
+    'Pillow',
+    'plone.testing'
 ]
 
 SPHINX_REQUIREMENTS = [
-    "Sphinx",
-    "repoze.sphinx.autointerface",
+    'Sphinx',
+    'repoze.sphinx.autointerface',
 ]
 
 setup(
-    name="plone.scale",
+    name='plone.scale',
     version=version,
-    description="Image scaling",
-    long_description=readme + "\n" + changes,
+    description='Image scaling',
+    long_description=readme + '\n' + changes,
     classifiers=[
-        "Development Status :: 5 - Production/Stable",
-        "Environment :: Web Environment",
-        "Framework :: Plone",
-        "Framework :: Plone :: 4.3",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Zope2",
-        "License :: OSI Approved :: BSD License",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.6",
-        "Programming Language :: Python :: 2.7",
+        'Development Status :: 5 - Production/Stable',
+        'Environment :: Web Environment',
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Zope2',
+        'License :: OSI Approved :: BSD License',
+        'Operating System :: OS Independent',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
     ],
-    keywords="image scaling",
+    keywords='image scaling',
     author='Plone Foundation',
     author_email='plone-developers@lists.sourceforge.net',
     url='https://pypi.python.org/pypi/plone.scale',
-    license="BSD",
-    packages=find_packages(exclude=["ez_setup"]),
-    namespace_packages=["plone"],
+    license='BSD',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
     include_package_data=True,
     zip_safe=True,
-    test_suite="plone.scale",
+    test_suite='plone.scale',
     install_requires=[
         # We can't actually depend on PIL because not everyone can install it
         # as an egg.
-        # "PIL",
-        "setuptools",
+        # 'PIL',
+        # 'Pillow'
+        'setuptools',
     ],
     extras_require=dict(
+        test=TESTS_REQUIREMENTS,
         storage=STORAGE_REQUIREMENTS,
         sphinx=STORAGE_REQUIREMENTS + SPHINX_REQUIREMENTS,
         tests=STORAGE_REQUIREMENTS + TESTS_REQUIREMENTS,


Repository: plone.scale


Branch: refs/heads/master
Date: 2016-05-01T14:11:18+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/46608d9e27da775a9eba2774659a228e999523fd

Merge pull request #9 from plone/scale-factories

Scale factories

Files changed:
A CHANGES.rst
M docs/index.rst
M plone/scale/__init__.py
M plone/scale/interfaces.py
M plone/scale/scale.py
M plone/scale/storage.py
M plone/scale/tests/__init__.py
M plone/scale/tests/test_scale.py
M plone/scale/tests/test_storage.py
M setup.cfg
M setup.py
D docs/changes.rst

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..7bf1937
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,168 @@
+Changelog
+=========
+
+
+1.5 (unreleased)
+----------------
+
+New:
+
+- Use an adapter to lookup the actual factory for scaling.
+  Deprecated passing the factory as named parameter along,
+  because this had not enough flexibility:
+  If addons want to provide alterative methods to scale (i.e. cropping),
+  now a specific adapter can perform the work.
+  [jensens]
+
+Fixes:
+
+- Minor housekeeping.
+  [jensens]
+
+
+1.4.1 (2016-02-12)
+------------------
+
+Fixes:
+
+- Fix KeyError in storage.AnnotationStorage._cleanup when attempting
+  to delete the storage for the same key twice.
+  [fulv]
+
+
+1.4 (2015-12-07)
+----------------
+
+New:
+
+- Resolve conflicts raised when accessing multiple scales concurrently.
+  [gotcha]
+
+- Refactored scale storage.
+  [gotcha]
+
+
+1.3.5 (2015-03-10)
+------------------
+
+- PIL thumbnail does not work for magnifying images (when scaling up).
+  Use resize instead. [sureshvv]
+
+
+1.3.4 (2014-09-07)
+------------------
+
+- When a scale is outdated, discard all image scales that are more
+  than a day older than the context.
+  Refs https://dev.plone.org/ticket/13791
+  [maurits]
+
+- Make sure deleting items or clearing a complete storage works.
+  Deleting one item would often delete a linked second item, which
+  made it hard to remove several items at once.
+  [maurits]
+
+
+1.3.3 (2014-01-27)
+------------------
+
+- Discard old image scales if item was modified.
+  Refs https://dev.plone.org/ticket/13791
+  [gforcada]
+
+- Generate Progressive JPEG.
+  [kroman0]
+
+
+1.3.2 (2013-05-23)
+------------------
+
+- Added a marker interface for scaled image quality.
+  Refs http://dev.plone.org/plone/ticket/13337
+  [khink]
+
+
+1.3.1 (2013-04-06)
+------------------
+
+- Cropped images are now centralised vertically as well as horizontally [mattss]
+
+
+1.3 (2013-01-17)
+----------------
+
+- Add MANIFEST.in.
+  [WouterVH]
+
+- Break up `scaleImage`, so that its scaling-related parts can be applied
+  to instances of `PIL.Image` for further processing.
+  [witsch]
+
+
+1.2.2 - 2010-09-28
+------------------
+
+- Re-release to fix bad egg created for 1.2.1.
+  Refs http://dev.plone.org/plone/ticket/11154
+  [witsch]
+
+
+1.2.1 - 2010-08-18
+------------------
+
+- Convert CMYK to RGB, allowing for web previews of print images.
+  [tomster]
+
+
+1.2 - 2010-07-18
+----------------
+
+- Update package metadata.
+  [hannosch]
+
+
+1.1 - 2010-04-20
+----------------
+
+- Abort if thumbnail behaviour is requested but either width or height is
+  missing. This is nicer than confronting the caller with a PIL exception.
+  [wichert]
+
+- Rename the `keep` direction to `thumbnail` to make its behaviour more
+  intuitive, but accept `keep` for now.
+  [wichert]
+
+
+1.0 - 2010-04-12
+----------------
+
+- Only pull in the uuid distribution in Python versions before 2.5.
+  [hannosch]
+
+- Don't declare dependency on PIL.
+  [davisagli]
+
+
+1.0a2 - 2010-04-10
+------------------
+
+- Add BSD license text following board decision:
+  http://lists.plone.org/pipermail/membership/2009-August/001038.html
+  [elro]
+
+- Allow to use PIL's thumbnail algorithm to keep the present aspect ratio.
+  [spamsch, witsch]
+
+- Allow to set the quality of the resulting image scales.
+  [witsch]
+
+- Refactor storage adapter for image scales to be less dependent on the
+  underlying content type.
+  [witsch]
+
+
+1.0a1 - 2009-11-10
+------------------
+
+- Initial release
+  [wichert]
diff --git a/docs/changes.rst b/docs/changes.rst
deleted file mode 100644
index f8ec588..0000000
--- a/docs/changes.rst
+++ /dev/null
@@ -1,162 +0,0 @@
-Changelog
-=========
-
-
-1.4.2 (unreleased)
-------------------
-
-New:
-
-- *add item here*
-
-Fixes:
-
-- *add item here*
-
-
-1.4.1 (2016-02-12)
-------------------
-
-Fixes:
-
-- Fix KeyError in storage.AnnotationStorage._cleanup when attempting
-  to delete the storage for the same key twice.
-  [fulv]
-
-
-1.4 (2015-12-07)
-----------------
-
-New:
-
-- Resolve conflicts raised when accessing multiple scales concurrently.
-  [gotcha]
-
-- Refactored scale storage.
-  [gotcha]
-
-
-1.3.5 (2015-03-10)
-------------------
-
-- PIL thumbnail does not work for magnifying images (when scaling up).
-  Use resize instead. [sureshvv]
-
-
-1.3.4 (2014-09-07)
-------------------
-
-- When a scale is outdated, discard all image scales that are more
-  than a day older than the context.
-  Refs https://dev.plone.org/ticket/13791
-  [maurits]
-
-- Make sure deleting items or clearing a complete storage works.
-  Deleting one item would often delete a linked second item, which
-  made it hard to remove several items at once.
-  [maurits]
-
-
-1.3.3 (2014-01-27)
-------------------
-
-- Discard old image scales if item was modified.
-  Refs https://dev.plone.org/ticket/13791
-  [gforcada]
-
-- Generate Progressive JPEG.
-  [kroman0]
-
-
-1.3.2 (2013-05-23)
-------------------
-
-- Added a marker interface for scaled image quality.
-  Refs http://dev.plone.org/plone/ticket/13337
-  [khink]
-
-
-1.3.1 (2013-04-06)
-------------------
-
-- Cropped images are now centralised vertically as well as horizontally [mattss]
-
-
-1.3 (2013-01-17)
-----------------
-
-- Add MANIFEST.in.
-  [WouterVH]
-
-- Break up `scaleImage`, so that its scaling-related parts can be applied
-  to instances of `PIL.Image` for further processing.
-  [witsch]
-
-
-1.2.2 - 2010-09-28
-------------------
-
-- Re-release to fix bad egg created for 1.2.1.
-  Refs http://dev.plone.org/plone/ticket/11154
-  [witsch]
-
-
-1.2.1 - 2010-08-18
-------------------
-
-- Convert CMYK to RGB, allowing for web previews of print images.
-  [tomster]
-
-
-1.2 - 2010-07-18
-----------------
-
-- Update package metadata.
-  [hannosch]
-
-
-1.1 - 2010-04-20
-----------------
-
-- Abort if thumbnail behaviour is requested but either width or height is
-  missing. This is nicer than confronting the caller with a PIL exception.
-  [wichert]
-
-- Rename the `keep` direction to `thumbnail` to make its behaviour more
-  intuitive, but accept `keep` for now.
-  [wichert]
-
-
-1.0 - 2010-04-12
-----------------
-
-- Only pull in the uuid distribution in Python versions before 2.5.
-  [hannosch]
-
-- Don't declare dependency on PIL.
-  [davisagli]
-
-
-1.0a2 - 2010-04-10
-------------------
-
-- Add BSD license text following board decision:
-  http://lists.plone.org/pipermail/membership/2009-August/001038.html
-  [elro]
-
-- Allow to use PIL's thumbnail algorithm to keep the present aspect ratio.
-  [spamsch, witsch]
-
-- Allow to set the quality of the resulting image scales.
-  [witsch]
-
-- Refactor storage adapter for image scales to be less dependent on the
-  underlying content type.
-  [witsch]
-
-
-1.0a1 - 2009-11-10
-------------------
-
-- Initial release
-  [wichert]
diff --git a/docs/index.rst b/docs/index.rst
index 149888b..a9ce821 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -63,6 +63,8 @@ In addition several implementation goals were defined:
 Usage
 =====
 
+ATTENTION: Long time outdated information follows.
+
 The most common way to use :mod:`plone.scale` is from a HTML template.
 In TAL syntax a typical usage looks like this::
 
diff --git a/plone/scale/__init__.py b/plone/scale/__init__.py
index e69de29..40a96af 100644
--- a/plone/scale/__init__.py
+++ b/plone/scale/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/scale/interfaces.py b/plone/scale/interfaces.py
index 8e196be..e99eadd 100644
--- a/plone/scale/interfaces.py
+++ b/plone/scale/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-s
 from zope.interface import Interface
 
 
@@ -11,3 +12,47 @@ class IScaledImageQuality(Interface):
     Products.Archetypes and Products.ATContentTypes (the latter two currently
     by a patch in plone.app.imaging.monkey).
     """
+
+
+class IImageScaleFactory(Interface):
+    """Creates a scale
+    """
+
+    def _call__(
+        fieldname=None,
+        direction='thumbnail',
+        height=None,
+        width=None,
+        **parameters
+    ):
+        """Interface defining an actual scaling operation.
+
+        Arguments are:
+
+        ``context``
+            some object with images on
+
+        ``fieldname``
+            name of the field to scale
+
+        ``direction``
+            is same as PIL direction on scale
+
+        ``width`` and ``height``
+            target size
+
+        ``**parameters``
+            is a dict with optional additional expected keyword arguments
+
+        Expected to return a triple of ``value, format, dimensions``
+        or ``None`` on failure.
+
+        ``value``
+            is expected to be an storeable value
+
+        ``format``
+            is the minor part of the ``image`` mimetype
+
+        ``dimensions``
+            is a tuple (width, height)
+        """
diff --git a/plone/scale/scale.py b/plone/scale/scale.py
index 9094657..f076477 100644
--- a/plone/scale/scale.py
+++ b/plone/scale/scale.py
@@ -1,7 +1,10 @@
+# -*- coding: utf-8 -*-
 from cStringIO import StringIO
+
 import PIL.Image
 import PIL.ImageFile
 
+
 # Set a larger buffer size. This fixes problems with jpeg decoding.
 # See http://mail.python.org/pipermail/image-sig/1999-August/000816.html for
 # details.
diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 2135f6f..36e112c 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -1,12 +1,17 @@
-from uuid import uuid4
+# -*- coding: utf-8 -*-
 from persistent.dict import PersistentDict
-from zope.interface import Interface
-from zope.interface import implements
-from zope.annotation import IAnnotations
+from plone.scale.interfaces import IImageScaleFactory
 from UserDict import DictMixin
+from uuid import uuid4
 from ZODB.POSException import ConflictError
+from zope.annotation import IAnnotations
+from zope.interface import implementer
+from zope.interface import Interface
+
 import logging
 import pprint
+import warnings
+
 
 logger = logging.getLogger('plone.scale')
 # Keep old scales around for this amount of milliseconds.
@@ -96,12 +101,12 @@ def _p_resolveConflict(self, oldState, savedState, newState):
         return dict(data=saved)
 
 
+@implementer(IImageScaleStorage)
 class AnnotationStorage(DictMixin):
     """ An abstract storage for image scale data using annotations and
         implementing :class:`IImageScaleStorage`. Image data is stored as an
         annotation on the object container, i.e. the image. This is needed
         since not all images are themselves annotatable. """
-    implements(IImageScaleStorage)
 
     def __init__(self, context, modified=None):
         self.context = context
@@ -158,19 +163,57 @@ def scale(self, factory=None, **parameters):
             del storage[info['uid']]
             # invalidate when the image was updated
             info = None
-        if info is None and factory:
-            result = factory(**parameters)
-            if result is not None:
-                # storage will be modified:
-                # good time to also cleanup
-                self._cleanup()
-                data, format, dimensions = result
-                width, height = dimensions
-                uid = str(uuid4())
-                info = dict(uid=uid, data=data, width=width, height=height,
-                            mimetype='image/%s' % format.lower(), key=key,
-                            modified=self.modified_time)
-                storage[uid] = info
+        elif info is not None:
+            return info
+
+        scaling_factory = IImageScaleFactory(self.context, None)
+
+        # BBB/Deprecation handling
+        if factory is not None:
+            if scaling_factory is not None:
+                raise ValueError(
+                    'Factory is passed to plone.scale but also an adapter '
+                    'was found. No way to decide which one to execute.'
+                )
+            else:
+                warnings.warn(
+                    'Deprecated usage of factory in plone.scale. Provide an '
+                    'adapter for the factory instead. The kwarg will be '
+                    'dropped with plone.scale 3.0',
+                    DeprecationWarning
+                )
+                result = factory(**parameters)
+        elif scaling_factory is not None:
+            # this is what we want, keep this after deprecaton phase
+            result = scaling_factory(**parameters)
+        else:
+            # adaption error, nor a factory was passed.
+            # BBB behavior here is to return None
+            # nevertheless we warn!
+            warnings.warn(
+                'Could not adapt context to IImageScaleFactory nor a '
+                'deprecated BBB factory callable was provided.'
+                'Assume None return value as it was before.'
+            )
+            return None
+
+        if result is not None:
+            # storage will be modified:
+            # good time to also cleanup
+            self._cleanup()
+            data, format_, dimensions = result
+            width, height = dimensions
+            uid = str(uuid4())
+            info = dict(
+                uid=uid,
+                data=data,
+                width=width,
+                height=height,
+                mimetype='image/{0}'.format(format_.lower()),
+                key=key,
+                modified=self.modified_time,
+            )
+            storage[uid] = info
         return info
 
     def _cleanup(self):
diff --git a/plone/scale/tests/__init__.py b/plone/scale/tests/__init__.py
index d2fbd0e..7d132ed 100644
--- a/plone/scale/tests/__init__.py
+++ b/plone/scale/tests/__init__.py
@@ -1,3 +1,4 @@
 import os.path
 
+
 TEST_DATA_LOCATION = os.path.join(os.path.dirname(__file__), "data")
diff --git a/plone/scale/tests/test_scale.py b/plone/scale/tests/test_scale.py
index 19dd3ba..519b6ea 100644
--- a/plone/scale/tests/test_scale.py
+++ b/plone/scale/tests/test_scale.py
@@ -2,8 +2,10 @@
 from plone.scale.scale import scaleImage
 from plone.scale.tests import TEST_DATA_LOCATION
 from unittest import TestCase
-import PIL.Image
+
 import os.path
+import PIL.Image
+
 
 PNG = open(os.path.join(TEST_DATA_LOCATION, "logo.png")).read()
 GIF = open(os.path.join(TEST_DATA_LOCATION, "logo.gif")).read()
diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py
index 1e05d7f..650f21a 100644
--- a/plone/scale/tests/test_storage.py
+++ b/plone/scale/tests/test_storage.py
@@ -1,13 +1,45 @@
-from operator import itemgetter, setitem, delitem
+# -*- coding: utf-8 -*-
+from operator import delitem
+from operator import itemgetter
+from operator import setitem
+from plone.testing import zca
 from unittest import TestCase
 
 
+class _DummyContext(object):
+    pass
+
+
 class AnnotationStorageTests(TestCase):
 
+    layer = zca.UNIT_TESTING
+
+    def _provide_dummy_scale_adapter(self, result=True):
+        from zope.component import adapter
+        from zope.component import provideAdapter
+        from zope.interface import implementer
+        from plone.scale.interfaces import IImageScaleFactory
+
+        factory = self.factory
+
+        @implementer(IImageScaleFactory)
+        @adapter(_DummyContext)
+        class DummyISF(object):
+
+            def __init__(self, context):
+                self.context = context
+
+            def __call__(self, **parameters):
+                if result:
+                    return factory()
+                return None
+
+        provideAdapter(DummyISF)
+
     @property
     def storage(self):
         from plone.scale.storage import AnnotationStorage
-        storage = AnnotationStorage(None)
+        storage = AnnotationStorage(_DummyContext())
         storage.modified = lambda: 42
         storage.storage = {}
         return storage
@@ -20,7 +52,7 @@ def testInterface(self):
         storage = self.storage
         self.failUnless(IImageScaleStorage.providedBy(storage))
 
-    def testScaleForNonExistingScaleWithCreation(self):
+    def testScaleForNonExistingScaleWithCreationBBB(self):
         storage = self.storage
         scale = storage.scale(factory=self.factory, foo=23, bar=42)
         self.failUnless('uid' in scale)
@@ -30,24 +62,56 @@ def testScaleForNonExistingScaleWithCreation(self):
         self.assertEqual(scale['height'], 23)
         self.assertEqual(scale['mimetype'], 'image/png')
 
+    def testScaleForNonExistingScaleWithCreation(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        self.failUnless('uid' in scale)
+        self.failUnless('key' in scale)
+        self.assertEqual(scale['data'], 'some data')
+        self.assertEqual(scale['width'], 42)
+
+        self.assertEqual(scale['height'], 23)
+        self.assertEqual(scale['mimetype'], 'image/png')
+
+    def testScaleForNonExistingScaleWithoutCreationBBB(self):
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        self.assertEqual(scale, None)
+
     def testScaleForNonExistingScaleWithoutCreation(self):
+        self._provide_dummy_scale_adapter(result=None)
         storage = self.storage
         scale = storage.scale(foo=23, bar=42)
         self.assertEqual(scale, None)
 
-    def testScaleForExistingScale(self):
+    def testScaleForExistingScaleBBB(self):
         storage = self.storage
         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)
         scale2 = storage.scale(factory=self.factory, bar=42, foo=23)
         self.failUnless(scale1 is scale2)
 
-    def testScaleForSimilarScales(self):
+    def testScaleForExistingScale(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale1 = storage.scale(foo=23, bar=42)
+        scale2 = storage.scale(bar=42, foo=23)
+        self.failUnless(scale1 is scale2)
+
+    def testScaleForSimilarScalesBBB(self):
         storage = self.storage
         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)
         scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz='!')
         self.failIf(scale1 is scale2)
 
-    def testGetItem(self):
+    def testScaleForSimilarScales(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale1 = storage.scale(foo=23, bar=42)
+        scale2 = storage.scale(bar=42, foo=23, hurz='!')
+        self.failIf(scale1 is scale2)
+
+    def testGetItemBBB(self):
         storage = self.storage
         scale = storage.scale(factory=self.factory, foo=23, bar=42)
         uid = scale['uid']
@@ -59,6 +123,19 @@ def testGetItem(self):
         self.assertEqual(scale['height'], 23)
         self.assertEqual(scale['mimetype'], 'image/png')
 
+    def testGetItem(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        uid = scale['uid']
+        scale = storage[uid]
+        self.failUnless('uid' in scale)
+        self.failUnless('key' in scale)
+        self.assertEqual(scale['data'], 'some data')
+        self.assertEqual(scale['width'], 42)
+        self.assertEqual(scale['height'], 23)
+        self.assertEqual(scale['mimetype'], 'image/png')
+
     def testGetUnknownItem(self):
         storage = self.storage
         self.assertRaises(KeyError, itemgetter('foo'), storage)
@@ -96,14 +173,22 @@ def testDeleteNonExistingItem(self):
         storage = self.storage
         self.assertRaises(KeyError, delitem, storage, 'foo')
 
-    def testDeleteRemovesItemAndIndex(self):
+    def testDeleteRemovesItemAndIndexBBB(self):
         storage = self.storage
         scale = storage.scale(factory=self.factory, foo=23, bar=42)
         self.assertEqual(len(storage), 1)
         del storage[scale['uid']]
         self.assertEqual(len(storage), 0)
 
-    def testCleanUpOldItems(self):
+    def testDeleteRemovesItemAndIndex(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale = storage.scale(foo=23, bar=42)
+        self.assertEqual(len(storage), 1)
+        del storage[scale['uid']]
+        self.assertEqual(len(storage), 0)
+
+    def testCleanUpOldItemsBBB(self):
         storage = self.storage
         scale_old = storage.scale(factory=self.factory, foo=23, bar=42)
         next_modified = storage.modified() + 1
@@ -125,13 +210,44 @@ def testCleanUpOldItems(self):
         del storage[scale_newer['uid']]
         self.assertEqual(len(storage), 0)
 
-    def testClear(self):
+    def testCleanUpOldItems(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        scale_old = storage.scale(foo=23, bar=42)
+        next_modified = storage.modified() + 1
+        storage.modified = lambda: next_modified
+        scale_new = storage.scale(foo=23, bar=42)
+        self.assertEqual(len(storage), 1)
+        self.assertEqual(scale_new['uid'] in storage, True)
+        self.assertEqual(scale_old['uid'] in storage, False)
+
+        # When modification time is older than a day, too old scales
+        # get purged.
+        next_modified = storage.modified() + 24 * 60 * 60 * 1000 + 1
+        storage.modified = lambda: next_modified
+        scale_newer = storage.scale(foo=23, bar=42)
+
+        self.assertEqual(scale_newer['uid'] in storage, True)
+        self.assertEqual(scale_new['uid'] in storage, False)
+        self.assertEqual(scale_old['uid'] in storage, False)
+        del storage[scale_newer['uid']]
+        self.assertEqual(len(storage), 0)
+
+    def testClearBBB(self):
         storage = self.storage
         storage.scale(factory=self.factory, foo=23, bar=42)
         self.assertEqual(len(storage), 1)
         storage.clear()
         self.assertEqual(len(storage), 0)
 
+    def testClear(self):
+        self._provide_dummy_scale_adapter()
+        storage = self.storage
+        storage.scale(foo=23, bar=42)
+        self.assertEqual(len(storage), 1)
+        storage.clear()
+        self.assertEqual(len(storage), 0)
+
 
 def test_suite():
     from unittest import defaultTestLoader
diff --git a/setup.cfg b/setup.cfg
index 8263512..9cf6718 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -2,3 +2,11 @@
 ignore =
     *.cfg
     bootstrap.py
+
+[isort]
+force_alphabetical_sort = True
+force_single_line = True
+lines_after_imports = 2
+line_length = 200
+not_skip = __init__.py
+
diff --git a/setup.py b/setup.py
index f19b545..8798f44 100644
--- a/setup.py
+++ b/setup.py
@@ -1,61 +1,63 @@
-from os.path import join
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
-version = '1.4.2.dev0'
-readme = open("README.rst").read().replace(':class:', '').replace(':mod:', '')
-changes = open(join("docs", "changes.rst")).read()
+version = '1.5.0.dev0'
+readme = open('README.rst').read().replace(':class:', '').replace(':mod:', '')
+changes = open('CHANGES.rst').read()
 
 STORAGE_REQUIREMENTS = [
-    "zope.annotation",
-    "zope.component",
-    "zope.interface",
-    "Persistence",
+    'zope.annotation',
+    'zope.component',
+    'zope.interface',
+    'Persistence',
 ]
 
 TESTS_REQUIREMENTS = [
-    "Pillow",
+    'Pillow',
+    'plone.testing'
 ]
 
 SPHINX_REQUIREMENTS = [
-    "Sphinx",
-    "repoze.sphinx.autointerface",
+    'Sphinx',
+    'repoze.sphinx.autointerface',
 ]
 
 setup(
-    name="plone.scale",
+    name='plone.scale',
     version=version,
-    description="Image scaling",
-    long_description=readme + "\n" + changes,
+    description='Image scaling',
+    long_description=readme + '\n' + changes,
     classifiers=[
-        "Development Status :: 5 - Production/Stable",
-        "Environment :: Web Environment",
-        "Framework :: Plone",
-        "Framework :: Plone :: 4.3",
-        "Framework :: Plone :: 5.0",
-        "Framework :: Zope2",
-        "License :: OSI Approved :: BSD License",
-        "Operating System :: OS Independent",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.6",
-        "Programming Language :: Python :: 2.7",
+        'Development Status :: 5 - Production/Stable',
+        'Environment :: Web Environment',
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Zope2',
+        'License :: OSI Approved :: BSD License',
+        'Operating System :: OS Independent',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
     ],
-    keywords="image scaling",
+    keywords='image scaling',
     author='Plone Foundation',
     author_email='plone-developers@lists.sourceforge.net',
     url='https://pypi.python.org/pypi/plone.scale',
-    license="BSD",
-    packages=find_packages(exclude=["ez_setup"]),
-    namespace_packages=["plone"],
+    license='BSD',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
     include_package_data=True,
     zip_safe=True,
-    test_suite="plone.scale",
+    test_suite='plone.scale',
     install_requires=[
         # We can't actually depend on PIL because not everyone can install it
         # as an egg.
-        # "PIL",
-        "setuptools",
+        # 'PIL',
+        # 'Pillow'
+        'setuptools',
     ],
     extras_require=dict(
+        test=TESTS_REQUIREMENTS,
         storage=STORAGE_REQUIREMENTS,
         sphinx=STORAGE_REQUIREMENTS + SPHINX_REQUIREMENTS,
         tests=STORAGE_REQUIREMENTS + TESTS_REQUIREMENTS,


