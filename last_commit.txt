Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2015-12-13T23:49:20+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c03383964366fd2367439c600e08d8bdf344b5da

Backport CSRF fix from @ebrehault

Original commit: https://github.com/plone/Products.ATContentTypes/commit/2eb817c5791540c5cf19b8dac7323c5c351fc431

Files changed:
M Products/CMFPlone/skins/plone_scripts/createObject.cpy
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/skins/plone_scripts/createObject.cpy b/Products/CMFPlone/skins/plone_scripts/createObject.cpy
index beabdf4..8de0040 100644
--- a/Products/CMFPlone/skins/plone_scripts/createObject.cpy
+++ b/Products/CMFPlone/skins/plone_scripts/createObject.cpy
@@ -17,6 +17,8 @@ response = REQUEST.response
 response.setHeader('Expires', 'Sat, 01 Jan 2000 00:00:00 GMT')
 response.setHeader('Cache-Control', 'no-cache')
 
+authenticator = context.restrictedTraverse("@@authenticator")
+
 if id is None:
     id = context.generateUniqueId(type_name)
 else:
@@ -37,7 +39,7 @@ if not fti.queryMethodID('edit'):
 if type_name in context.portal_factory.getFactoryTypes():
     new_url = 'portal_factory/' + type_name + '/' + id
     if state.getStatus() != 'success_no_edit':
-        new_url = new_url + '/edit'
+        new_url = new_url + '/edit?_authenticator='  + authenticator.token()
     state.set(status='factory', next_action='redirect_to:string:%s' % new_url)
     # If there's an issue with object creation, let the factory handle it
     return state
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index a3bc00d..8422052 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -28,6 +28,8 @@ Changelog
 - Add syndication for plone.app.contenttypes collections.
   [do3cc]
 
+- Add CSRF authenticator in createObject script
+  [ebrehault]
 
 4.3.7 (2015-09-27)
 ------------------


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2015-12-13T23:49:20+01:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/694eaeb682dc9c6189108217ed3d9c557b3a8976

fix browser default tests: disable CSRF transform rather than try to normalize output

Files changed:
M Products/CMFPlone/tests/testBrowserDefault.py

diff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py
index 5874eed..5afbe9f 100644
--- a/Products/CMFPlone/tests/testBrowserDefault.py
+++ b/Products/CMFPlone/tests/testBrowserDefault.py
@@ -32,12 +32,20 @@ def afterSetUp(self):
         # make sure the test request gets marked with the default theme layer
         notify(BeforeTraverseEvent(self.portal, self.app.REQUEST))
 
+        # disable auto-CSRF
+        from plone.protect import auto
+        auto.CSRF_DISABLED = True
+
         _createObjectByType('Folder',       self.portal, 'atctfolder')
         _createObjectByType('Document',     self.portal, 'atctdocument')
         _createObjectByType('File',         self.portal, 'atctfile')
 
         self.putils = getToolByName(self.portal, "plone_utils")
 
+    def tearDown(self):
+        from plone.protect import auto
+        auto.CSRF_DISABLED = False
+
     def compareLayoutVsView(self, obj, path="", viewaction=None):
         if viewaction is None:
             if hasattr(aq_base(obj), 'getLayout'):


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2015-12-13T23:49:20+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/168a79420251e792615294fe1896fa69eed0e402

Let set_own_login_name use the update(Own)LoginName method from PAS.

Part of PLIP 13419.

Files changed:
M Products/CMFPlone/utils.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index dcbe753..3e608b6 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -24,11 +24,9 @@
 from App.ImageFile import ImageFile
 from DateTime import DateTime
 from DateTime.interfaces import DateTimeError
-from Products.CMFCore.permissions import SetOwnProperties
 from Products.CMFCore.permissions import ManageUsers
 from Products.CMFCore.utils import ToolInit as CMFCoreToolInit
 from Products.CMFCore.utils import getToolByName
-from Products.PlonePAS.interfaces.plugins import IUserManagement
 
 import transaction
 
@@ -654,38 +652,16 @@ def isLinked(obj):
 def set_own_login_name(member, loginname):
     """Allow the user to set his/her own login name.
 
-    PLIP9214 Does someone know a better spot to put this function?  It
-    could be added to Products.CMFCore.MemberDataTool.MemberData.
+    If you have the Manage Users permission, you can update the login
+    name of another member too, though the name of this function is a
+    bit weird then.  Historical accident.
     """
-    if member.getUserName() == loginname:
-        # Bail out early as there is nothing to do.  Also this avoids
-        # an Unauthorized error when this is a member that has just
-        # been registered.
+    pas = getToolByName(member, 'acl_users')
+    mt = getToolByName(member, 'portal_membership')
+    if member.getId() == mt.getAuthenticatedMember().getId():
+        pas.updateOwnLoginName(loginname)
         return
     secman = getSecurityManager()
-    if not secman.checkPermission(SetOwnProperties, member):
-        raise Unauthorized('You are not allowed to update this login name')
-    membership = getToolByName(member, 'portal_membership')
-    if member != membership.getAuthenticatedMember() \
-        and not secman.checkPermission(ManageUsers, member):
+    if not secman.checkPermission(ManageUsers, member):
         raise Unauthorized('You can only change your OWN login name.')
-    acl_users = getToolByName(member, 'acl_users')
-    for plugin_id, userfolder in acl_users.plugins.listPlugins(IUserManagement):
-        if not hasattr(userfolder, 'updateUser'):
-            continue
-        try:
-            userfolder.updateUser(member.id, loginname)
-        except KeyError:
-            continue
-        else:
-            return
-    # PLIP9214: For a user in the zope root we could do something like this:
-    # userfolder = member.getUser().__parent__.users
-    # userfolder.updateUser(member.id, loginname)
-    # But it is probably best not to touch root zope users.
-    message = ('You are not a Plone member. You are probably '
-               'registered on the root user folder. Please '
-               'notify an administrator if this is unexpected.')
-    log(message,
-        summary='Could not update login name of user %s.' % member.id)
-    raise KeyError(message)
+    pas.updateLoginName(member.getId(), loginname)
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index 8422052..e05740d 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -31,6 +31,10 @@ Changelog
 - Add CSRF authenticator in createObject script
   [ebrehault]
 
+- Let set_own_login_name use the update(Own)LoginName method from PAS.
+  Part of PLIP 13419.
+  [maurits]
+
 4.3.7 (2015-09-27)
 ------------------
 


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2015-12-13T23:49:20+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/a112d2e0f0e6d2ae1de21eeed31f07ee44128217

crsf fixes

Cherry pick changes from 3a48ae16a108b358eb62cc193e61dace4c9e168e

Files changed:
M Products/CMFPlone/tests/testEmailLogin.py

diff --git a/Products/CMFPlone/tests/testEmailLogin.py b/Products/CMFPlone/tests/testEmailLogin.py
index 89f974e..d8e95e6 100644
--- a/Products/CMFPlone/tests/testEmailLogin.py
+++ b/Products/CMFPlone/tests/testEmailLogin.py
@@ -90,19 +90,19 @@ def test_get_member_by_login_name(self):
 
         # Login name and user name start out the same
         found = get_member_by_login_name(context, PloneTestCase.default_user)
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)
 
         # Change the login name:
         set_own_login_name(member, 'vanrees')
         # A member with this user name is still returned:
         found = get_member_by_login_name(context, PloneTestCase.default_user)
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)
         # With the changed login name we can find the member:
         found = get_member_by_login_name(context, 'vanrees')
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)
 
         # Demonstrate that we can find other members than just the
         # default user:
         found = get_member_by_login_name(context, 'portal_owner')
         member = memship.getMemberById('portal_owner')
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2015-12-13T23:49:20+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/ab54d19bcd63c2a7d19a75a5c665b97ad9bdcbe8

Depend on plone4.csrffixes

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index f67ecb1..eeed865 100644
--- a/setup.py
+++ b/setup.py
@@ -121,6 +121,7 @@
           'plone.registry',
           'plone.session',
           'plone.theme',
+          'plone4.csrffixes',
           'plonetheme.classic',
           'plonetheme.sunburst',
           'transaction',


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-02-13T00:36:07+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/8cff2007947d82d5081af1b178c7467c7d33f3f8

Fixed failing test that needed an authenticator.

Files changed:
M Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt

diff --git a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
index df547f9..51103d9 100644
--- a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
+++ b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
@@ -40,7 +40,7 @@ browser.
     >>> browser.getControl('Add').click()
     >>> #'Edit Page' in browser.contents # ouch, Plone has <span> around 'Page'
     >>> browser.url
-    'http://nohost/plone/Members/test_user_1_/portal_factory/Document/.../edit'
+    'http://nohost/plone/Members/test_user_1_/portal_factory/Document/.../edit?_authenticator=...'
 
 Now that the document has been added, we can edit it, but we pretend
 we don't know better and forget to type in a Title:


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-02-13T00:36:07+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/9aa509b48f4b4e2fa3bec0ee74124ca4d0d1204c

Fixed set_own_login_name for newly registered users.

This function was changed to use the same code as Plone 5,
but for some reason this old check is still needed in Plone 4.

Files changed:
M Products/CMFPlone/utils.py

diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index 3e608b6..fa66328 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -656,6 +656,11 @@ def set_own_login_name(member, loginname):
     name of another member too, though the name of this function is a
     bit weird then.  Historical accident.
     """
+    if member.getUserName() == loginname:
+        # Bail out early as there is nothing to do.  Also this avoids
+        # an Unauthorized error when this is a member that has just
+        # been registered.
+        return
     pas = getToolByName(member, 'acl_users')
     mt = getToolByName(member, 'portal_membership')
     if member.getId() == mt.getAuthenticatedMember().getId():


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-02-13T00:36:07+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/3f92b9bfad6ed611f9328ea6efba03bb52655ff2

Fixed a few tests that now get an authenticator.

Files changed:
M Products/CMFPlone/tests/testPortalFactory.py
M Products/CMFPlone/tests/testSecurity.py

diff --git a/Products/CMFPlone/tests/testPortalFactory.py b/Products/CMFPlone/tests/testPortalFactory.py
index 7ac33b4..d9e19ec 100644
--- a/Products/CMFPlone/tests/testPortalFactory.py
+++ b/Products/CMFPlone/tests/testPortalFactory.py
@@ -237,8 +237,10 @@ def testCreateObject(self):
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(
                                 self.folder_url + '/portal_factory/Document/'))
-        # CMFFormController redirects should not do alias translation
-        self.assertTrue(location.endswith('/edit'))
+        # CMFFormController redirects should not do alias translation.
+        # Check the path instead of the entire location, to avoid getting the
+        # csrf _authenticator query parameter.
+        self.assertTrue(urlparse.urlsplit(location).path.endswith('/edit'))
 
         # Perform the redirect
         edit_form_path = location[len(self.app.REQUEST.SERVER_URL):]
@@ -260,7 +262,7 @@ def testCreateNonGloballyAllowedObject(self):
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(
                                 self.folder_url + '/portal_factory/Document/'))
-        self.assertTrue(location.endswith('/edit'))
+        self.assertTrue(urlparse.urlsplit(location).path.endswith('/edit'))
 
         # Perform the redirect
         edit_form_path = location[len(self.app.REQUEST.SERVER_URL):]
diff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py
index a548f96..ad14575a 100644
--- a/Products/CMFPlone/tests/testSecurity.py
+++ b/Products/CMFPlone/tests/testSecurity.py
@@ -1,5 +1,6 @@
 import re
 import unittest
+import urlparse
 from urllib import urlencode
 from Testing.makerequest import makerequest
 from Products.PloneTestCase import PloneTestCase as ptc
@@ -10,7 +11,7 @@
 
 
 class TestAttackVectorsUnit(unittest.TestCase):
-    
+
     def test_gtbn_funcglobals(self):
         from Products.CMFPlone.utils import getToolByName
         try:
@@ -42,7 +43,7 @@ def test_PT_allow_module_not_available_in_RestrictedPython_1(self):
         script._filepath = 'script'
         script.write(src)
         self.assertRaises((ImportError, Unauthorized), script)
-    
+
     def test_PT_allow_module_not_available_in_RestrictedPython_2(self):
         src = '''
 from Products.PlacelessTranslationService import allow_module
@@ -60,7 +61,7 @@ def test_get_request_var_or_attr_disallowed(self):
 
 
 class TestAttackVectorsFunctional(ptc.FunctionalTestCase):
-    
+
     def test_widget_traversal_1(self):
         res = self.publish('/plone/@@discussion-settings/++widget++moderator_email')
         self.assertEqual(302, res.status)
@@ -70,12 +71,12 @@ def test_widget_traversal_2(self):
         res = self.publish('/plone/@@discussion-settings/++widget++captcha/terms/field/interface/setTaggedValue?tag=cake&value=lovely')
         self.assertEqual(302, res.status)
         self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
-    
+
     def test_registerConfiglet_1(self):
         VECTOR = "/plone/portal_controlpanel/registerConfiglet?id=cake&name=Cakey&action=woo&permission=View&icon_expr="
         res = self.publish(VECTOR)
         self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
-    
+
     def test_registerConfiglet_2(self):
         VECTOR = "/plone/portal_controlpanel/registerConfiglet?id=cake&name=Cakey&action=woo&permission=View&icon_expr="
         self.publish(VECTOR)
@@ -89,7 +90,7 @@ def _get_authenticator(self, basic=None):
         if m:
             return m.group(1)
         return ''
-    
+
     def test_renameObjectsByPaths(self):
         PAYLOAD = {
             'paths:list': '/plone/news',
@@ -135,7 +136,7 @@ def test_renameObjectByPaths_postonly(self):
         self.portal.plone_utils.renameObjectsByPaths(paths=['/plone/news'], new_ids=['news'], new_titles=['EVIL'])
         self.assertEqual('EVIL', self.portal.news.Title())
         self.portal.news.setTitle('News')
-        
+
         self.setRoles(['Member'])
         self.portal.plone_utils.renameObjectsByPaths(paths=['/plone/news'], new_ids=['news'], new_titles=['EVIL'])
         self.assertEqual('News', self.portal.news.Title())
@@ -158,7 +159,7 @@ def test_getMemberInfo(self):
     def test_queryCatalog(self):
         res = self.publish('/plone/news/aggregator/queryCatalog')
         self.assertEqual(404, res.status)
-    
+
     def test_resolve_url(self):
         res = self.publish("/plone/uid_catalog/resolve_url?path=/evil")
         self.assertEqual(404, res.status)
@@ -212,7 +213,13 @@ def test_utranslate(self):
     def test_createObject(self):
         res = self.publish('/plone/createObject?type_name=File&id=${foo}')
         self.assertEqual(302, res.status)
-        self.assertEqual('http://nohost/plone/portal_factory/File/${foo}/edit', res.headers['location'])
+        loc = urlparse.urlsplit(res.headers['location'])
+        # http://nohost/plone/portal_factory/File/${foo}/edit?_authenticator=..
+        self.assertEqual(loc.scheme, 'http')
+        self.assertEqual(loc.netloc, 'nohost')
+        self.assertEqual(loc.path, '/plone/portal_factory/File/${foo}/edit')
+        self.assertTrue(loc.query.startswith('_authenticator'))
+        self.assertEqual(loc.fragment, '')
 
     def test_formatColumns(self):
         res = self.publish('/plone/formatColumns?items:list=')


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-02-13T00:40:42+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c60f1b664d85c74a5f5e4845db28fa3bf1086b2b

Catch ImportError for plone.protect.auto in tests.

Files changed:
M Products/CMFPlone/tests/testBrowserDefault.py

diff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py
index 5afbe9f..0206212 100644
--- a/Products/CMFPlone/tests/testBrowserDefault.py
+++ b/Products/CMFPlone/tests/testBrowserDefault.py
@@ -32,9 +32,13 @@ def afterSetUp(self):
         # make sure the test request gets marked with the default theme layer
         notify(BeforeTraverseEvent(self.portal, self.app.REQUEST))
 
-        # disable auto-CSRF
-        from plone.protect import auto
-        auto.CSRF_DISABLED = True
+        # disable auto-CSRF if it was enabled
+        try:
+            from plone.protect import auto
+            self._original_csrf_disabled = auto.CSRF_DISABLED
+            auto.CSRF_DISABLED = True
+        except ImportError:
+            pass
 
         _createObjectByType('Folder',       self.portal, 'atctfolder')
         _createObjectByType('Document',     self.portal, 'atctdocument')
@@ -43,8 +47,12 @@ def afterSetUp(self):
         self.putils = getToolByName(self.portal, "plone_utils")
 
     def tearDown(self):
-        from plone.protect import auto
-        auto.CSRF_DISABLED = False
+        # restore original csrf protection setting
+        try:
+            from plone.protect import auto
+            auto.CSRF_DISABLED = self._original_csrf_disabled
+        except ImportError:
+            pass
 
     def compareLayoutVsView(self, obj, path="", viewaction=None):
         if viewaction is None:


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-02-13T00:40:42+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/07ec9bc7aa06bbb8adb11d7d69e24b1f3a080d08

Do not depend on plone4.csrffixes.

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index eeed865..9d707f8 100644
--- a/setup.py
+++ b/setup.py
@@ -121,7 +121,7 @@
           'plone.registry',
           'plone.session',
           'plone.theme',
-          'plone4.csrffixes',
+          # 'plone4.csrffixes',
           'plonetheme.classic',
           'plonetheme.sunburst',
           'transaction',


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-02-13T01:26:29+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/79ccd420a1dad28e2a7cc3cf97f2cf496390fe22

Disabled CSRF protection on site creation form and upgrade form.

Files changed:
M Products/CMFPlone/browser/admin.py
M docs/CHANGES.rst

diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index aa7a13f..cee2250 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -1,12 +1,14 @@
 from operator import itemgetter
 
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
+from plone.protect.interfaces import IDisableCSRFProtection
 from zope.component import adapts
 from zope.component import getAllUtilitiesRegisteredFor
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.i18n.interfaces import IUserPreferredLanguages
 from zope.i18n.locales import locales, LoadLocaleError
+from zope.interface import alsoProvides
 from zope.interface import Interface
 from zope.publisher.interfaces import IRequest
 from zope.publisher.browser import BrowserView
@@ -198,6 +200,7 @@ def __call__(self):
         form = self.request.form
         submitted = form.get('form.submitted', False)
         if submitted:
+            alsoProvides(self.request, IDisableCSRFProtection)
             site_id = form.get('site_id', 'Plone')
             site = addPloneSite(
                 context, site_id,
@@ -235,6 +238,7 @@ def __call__(self):
         form = self.request.form
         submitted = form.get('form.submitted', False)
         if submitted:
+            alsoProvides(self.request, IDisableCSRFProtection)
             pm = getattr(self.context, 'portal_migration')
             report = pm.upgrade(
                 REQUEST=self.request,
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index e05740d..a2eb392 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -8,6 +8,8 @@ Changelog
 4.3.8 (unreleased)
 ------------------
 
+- Disabled CSRF protection on site creation form and upgrade form.  [maurits]
+
 - When migration fails, do not upgrade addons or recatalog or
   update roles.
   [maurits]


Repository: Products.CMFPlone


Branch: refs/heads/4.3.x
Date: 2016-02-23T13:44:37-05:00
Author: esteele (esteele) <eric@esteele.net>
Commit: https://github.com/plone/Products.CMFPlone/commit/d2582e3a1913076dd3b44f28aab815fa743fd778

Merge branch '4.3-write-on-read-orig-protect' into 4.3.x

Files changed:
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/skins/plone_scripts/createObject.cpy
M Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
M Products/CMFPlone/tests/testBrowserDefault.py
M Products/CMFPlone/tests/testEmailLogin.py
M Products/CMFPlone/tests/testPortalFactory.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/utils.py
M docs/CHANGES.rst
M setup.py

diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index bca72d6..789b5a5 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -1,12 +1,14 @@
 from operator import itemgetter
 
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
+from plone.protect.interfaces import IDisableCSRFProtection
 from zope.component import adapts
 from zope.component import getAllUtilitiesRegisteredFor
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.i18n.interfaces import IUserPreferredLanguages
 from zope.i18n.locales import locales, LoadLocaleError
+from zope.interface import alsoProvides
 from zope.interface import Interface
 from zope.publisher.interfaces import IRequest
 from zope.publisher.browser import BrowserView
@@ -198,6 +200,7 @@ def __call__(self):
         form = self.request.form
         submitted = form.get('form.submitted', False)
         if submitted:
+            alsoProvides(self.request, IDisableCSRFProtection)
             site_id = form.get('site_id', 'Plone')
             site = addPloneSite(
                 context, site_id,
@@ -235,6 +238,7 @@ def __call__(self):
         form = self.request.form
         submitted = form.get('form.submitted', False)
         if submitted:
+            alsoProvides(self.request, IDisableCSRFProtection)
             pm = getattr(self.context, 'portal_migration')
             report = pm.upgrade(
                 REQUEST=self.request,
diff --git a/Products/CMFPlone/skins/plone_scripts/createObject.cpy b/Products/CMFPlone/skins/plone_scripts/createObject.cpy
index beabdf4..8de0040 100644
--- a/Products/CMFPlone/skins/plone_scripts/createObject.cpy
+++ b/Products/CMFPlone/skins/plone_scripts/createObject.cpy
@@ -17,6 +17,8 @@ response = REQUEST.response
 response.setHeader('Expires', 'Sat, 01 Jan 2000 00:00:00 GMT')
 response.setHeader('Cache-Control', 'no-cache')
 
+authenticator = context.restrictedTraverse("@@authenticator")
+
 if id is None:
     id = context.generateUniqueId(type_name)
 else:
@@ -37,7 +39,7 @@ if not fti.queryMethodID('edit'):
 if type_name in context.portal_factory.getFactoryTypes():
     new_url = 'portal_factory/' + type_name + '/' + id
     if state.getStatus() != 'success_no_edit':
-        new_url = new_url + '/edit'
+        new_url = new_url + '/edit?_authenticator='  + authenticator.token()
     state.set(status='factory', next_action='redirect_to:string:%s' % new_url)
     # If there's an issue with object creation, let the factory handle it
     return state
diff --git a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
index df547f9..51103d9 100644
--- a/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
+++ b/Products/CMFPlone/tests/AddMoveAndDeleteDocument.txt
@@ -40,7 +40,7 @@ browser.
     >>> browser.getControl('Add').click()
     >>> #'Edit Page' in browser.contents # ouch, Plone has <span> around 'Page'
     >>> browser.url
-    'http://nohost/plone/Members/test_user_1_/portal_factory/Document/.../edit'
+    'http://nohost/plone/Members/test_user_1_/portal_factory/Document/.../edit?_authenticator=...'
 
 Now that the document has been added, we can edit it, but we pretend
 we don't know better and forget to type in a Title:
diff --git a/Products/CMFPlone/tests/testBrowserDefault.py b/Products/CMFPlone/tests/testBrowserDefault.py
index 5874eed..0206212 100644
--- a/Products/CMFPlone/tests/testBrowserDefault.py
+++ b/Products/CMFPlone/tests/testBrowserDefault.py
@@ -32,12 +32,28 @@ def afterSetUp(self):
         # make sure the test request gets marked with the default theme layer
         notify(BeforeTraverseEvent(self.portal, self.app.REQUEST))
 
+        # disable auto-CSRF if it was enabled
+        try:
+            from plone.protect import auto
+            self._original_csrf_disabled = auto.CSRF_DISABLED
+            auto.CSRF_DISABLED = True
+        except ImportError:
+            pass
+
         _createObjectByType('Folder',       self.portal, 'atctfolder')
         _createObjectByType('Document',     self.portal, 'atctdocument')
         _createObjectByType('File',         self.portal, 'atctfile')
 
         self.putils = getToolByName(self.portal, "plone_utils")
 
+    def tearDown(self):
+        # restore original csrf protection setting
+        try:
+            from plone.protect import auto
+            auto.CSRF_DISABLED = self._original_csrf_disabled
+        except ImportError:
+            pass
+
     def compareLayoutVsView(self, obj, path="", viewaction=None):
         if viewaction is None:
             if hasattr(aq_base(obj), 'getLayout'):
diff --git a/Products/CMFPlone/tests/testEmailLogin.py b/Products/CMFPlone/tests/testEmailLogin.py
index 89f974e..d8e95e6 100644
--- a/Products/CMFPlone/tests/testEmailLogin.py
+++ b/Products/CMFPlone/tests/testEmailLogin.py
@@ -90,19 +90,19 @@ def test_get_member_by_login_name(self):
 
         # Login name and user name start out the same
         found = get_member_by_login_name(context, PloneTestCase.default_user)
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)
 
         # Change the login name:
         set_own_login_name(member, 'vanrees')
         # A member with this user name is still returned:
         found = get_member_by_login_name(context, PloneTestCase.default_user)
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)
         # With the changed login name we can find the member:
         found = get_member_by_login_name(context, 'vanrees')
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)
 
         # Demonstrate that we can find other members than just the
         # default user:
         found = get_member_by_login_name(context, 'portal_owner')
         member = memship.getMemberById('portal_owner')
-        self.assertEqual(member, found)
+        self.assertEqual(member.id, found.id)
diff --git a/Products/CMFPlone/tests/testPortalFactory.py b/Products/CMFPlone/tests/testPortalFactory.py
index 7ac33b4..d9e19ec 100644
--- a/Products/CMFPlone/tests/testPortalFactory.py
+++ b/Products/CMFPlone/tests/testPortalFactory.py
@@ -237,8 +237,10 @@ def testCreateObject(self):
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(
                                 self.folder_url + '/portal_factory/Document/'))
-        # CMFFormController redirects should not do alias translation
-        self.assertTrue(location.endswith('/edit'))
+        # CMFFormController redirects should not do alias translation.
+        # Check the path instead of the entire location, to avoid getting the
+        # csrf _authenticator query parameter.
+        self.assertTrue(urlparse.urlsplit(location).path.endswith('/edit'))
 
         # Perform the redirect
         edit_form_path = location[len(self.app.REQUEST.SERVER_URL):]
@@ -260,7 +262,7 @@ def testCreateNonGloballyAllowedObject(self):
         location = response.getHeader('Location')
         self.assertTrue(location.startswith(
                                 self.folder_url + '/portal_factory/Document/'))
-        self.assertTrue(location.endswith('/edit'))
+        self.assertTrue(urlparse.urlsplit(location).path.endswith('/edit'))
 
         # Perform the redirect
         edit_form_path = location[len(self.app.REQUEST.SERVER_URL):]
diff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py
index a548f96..ad14575a 100644
--- a/Products/CMFPlone/tests/testSecurity.py
+++ b/Products/CMFPlone/tests/testSecurity.py
@@ -1,5 +1,6 @@
 import re
 import unittest
+import urlparse
 from urllib import urlencode
 from Testing.makerequest import makerequest
 from Products.PloneTestCase import PloneTestCase as ptc
@@ -10,7 +11,7 @@
 
 
 class TestAttackVectorsUnit(unittest.TestCase):
-    
+
     def test_gtbn_funcglobals(self):
         from Products.CMFPlone.utils import getToolByName
         try:
@@ -42,7 +43,7 @@ def test_PT_allow_module_not_available_in_RestrictedPython_1(self):
         script._filepath = 'script'
         script.write(src)
         self.assertRaises((ImportError, Unauthorized), script)
-    
+
     def test_PT_allow_module_not_available_in_RestrictedPython_2(self):
         src = '''
 from Products.PlacelessTranslationService import allow_module
@@ -60,7 +61,7 @@ def test_get_request_var_or_attr_disallowed(self):
 
 
 class TestAttackVectorsFunctional(ptc.FunctionalTestCase):
-    
+
     def test_widget_traversal_1(self):
         res = self.publish('/plone/@@discussion-settings/++widget++moderator_email')
         self.assertEqual(302, res.status)
@@ -70,12 +71,12 @@ def test_widget_traversal_2(self):
         res = self.publish('/plone/@@discussion-settings/++widget++captcha/terms/field/interface/setTaggedValue?tag=cake&value=lovely')
         self.assertEqual(302, res.status)
         self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
-    
+
     def test_registerConfiglet_1(self):
         VECTOR = "/plone/portal_controlpanel/registerConfiglet?id=cake&name=Cakey&action=woo&permission=View&icon_expr="
         res = self.publish(VECTOR)
         self.assertTrue(res.headers['location'].startswith('http://nohost/plone/acl_users/credentials_cookie_auth/require_login'))
-    
+
     def test_registerConfiglet_2(self):
         VECTOR = "/plone/portal_controlpanel/registerConfiglet?id=cake&name=Cakey&action=woo&permission=View&icon_expr="
         self.publish(VECTOR)
@@ -89,7 +90,7 @@ def _get_authenticator(self, basic=None):
         if m:
             return m.group(1)
         return ''
-    
+
     def test_renameObjectsByPaths(self):
         PAYLOAD = {
             'paths:list': '/plone/news',
@@ -135,7 +136,7 @@ def test_renameObjectByPaths_postonly(self):
         self.portal.plone_utils.renameObjectsByPaths(paths=['/plone/news'], new_ids=['news'], new_titles=['EVIL'])
         self.assertEqual('EVIL', self.portal.news.Title())
         self.portal.news.setTitle('News')
-        
+
         self.setRoles(['Member'])
         self.portal.plone_utils.renameObjectsByPaths(paths=['/plone/news'], new_ids=['news'], new_titles=['EVIL'])
         self.assertEqual('News', self.portal.news.Title())
@@ -158,7 +159,7 @@ def test_getMemberInfo(self):
     def test_queryCatalog(self):
         res = self.publish('/plone/news/aggregator/queryCatalog')
         self.assertEqual(404, res.status)
-    
+
     def test_resolve_url(self):
         res = self.publish("/plone/uid_catalog/resolve_url?path=/evil")
         self.assertEqual(404, res.status)
@@ -212,7 +213,13 @@ def test_utranslate(self):
     def test_createObject(self):
         res = self.publish('/plone/createObject?type_name=File&id=${foo}')
         self.assertEqual(302, res.status)
-        self.assertEqual('http://nohost/plone/portal_factory/File/${foo}/edit', res.headers['location'])
+        loc = urlparse.urlsplit(res.headers['location'])
+        # http://nohost/plone/portal_factory/File/${foo}/edit?_authenticator=..
+        self.assertEqual(loc.scheme, 'http')
+        self.assertEqual(loc.netloc, 'nohost')
+        self.assertEqual(loc.path, '/plone/portal_factory/File/${foo}/edit')
+        self.assertTrue(loc.query.startswith('_authenticator'))
+        self.assertEqual(loc.fragment, '')
 
     def test_formatColumns(self):
         res = self.publish('/plone/formatColumns?items:list=')
diff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py
index dcbe753..fa66328 100644
--- a/Products/CMFPlone/utils.py
+++ b/Products/CMFPlone/utils.py
@@ -24,11 +24,9 @@
 from App.ImageFile import ImageFile
 from DateTime import DateTime
 from DateTime.interfaces import DateTimeError
-from Products.CMFCore.permissions import SetOwnProperties
 from Products.CMFCore.permissions import ManageUsers
 from Products.CMFCore.utils import ToolInit as CMFCoreToolInit
 from Products.CMFCore.utils import getToolByName
-from Products.PlonePAS.interfaces.plugins import IUserManagement
 
 import transaction
 
@@ -654,38 +652,21 @@ def isLinked(obj):
 def set_own_login_name(member, loginname):
     """Allow the user to set his/her own login name.
 
-    PLIP9214 Does someone know a better spot to put this function?  It
-    could be added to Products.CMFCore.MemberDataTool.MemberData.
+    If you have the Manage Users permission, you can update the login
+    name of another member too, though the name of this function is a
+    bit weird then.  Historical accident.
     """
     if member.getUserName() == loginname:
         # Bail out early as there is nothing to do.  Also this avoids
         # an Unauthorized error when this is a member that has just
         # been registered.
         return
+    pas = getToolByName(member, 'acl_users')
+    mt = getToolByName(member, 'portal_membership')
+    if member.getId() == mt.getAuthenticatedMember().getId():
+        pas.updateOwnLoginName(loginname)
+        return
     secman = getSecurityManager()
-    if not secman.checkPermission(SetOwnProperties, member):
-        raise Unauthorized('You are not allowed to update this login name')
-    membership = getToolByName(member, 'portal_membership')
-    if member != membership.getAuthenticatedMember() \
-        and not secman.checkPermission(ManageUsers, member):
+    if not secman.checkPermission(ManageUsers, member):
         raise Unauthorized('You can only change your OWN login name.')
-    acl_users = getToolByName(member, 'acl_users')
-    for plugin_id, userfolder in acl_users.plugins.listPlugins(IUserManagement):
-        if not hasattr(userfolder, 'updateUser'):
-            continue
-        try:
-            userfolder.updateUser(member.id, loginname)
-        except KeyError:
-            continue
-        else:
-            return
-    # PLIP9214: For a user in the zope root we could do something like this:
-    # userfolder = member.getUser().__parent__.users
-    # userfolder.updateUser(member.id, loginname)
-    # But it is probably best not to touch root zope users.
-    message = ('You are not a Plone member. You are probably '
-               'registered on the root user folder. Please '
-               'notify an administrator if this is unexpected.')
-    log(message,
-        summary='Could not update login name of user %s.' % member.id)
-    raise KeyError(message)
+    pas.updateLoginName(member.getId(), loginname)
diff --git a/docs/CHANGES.rst b/docs/CHANGES.rst
index a3bc00d..a2eb392 100644
--- a/docs/CHANGES.rst
+++ b/docs/CHANGES.rst
@@ -8,6 +8,8 @@ Changelog
 4.3.8 (unreleased)
 ------------------
 
+- Disabled CSRF protection on site creation form and upgrade form.  [maurits]
+
 - When migration fails, do not upgrade addons or recatalog or
   update roles.
   [maurits]
@@ -28,6 +30,12 @@ Changelog
 - Add syndication for plone.app.contenttypes collections.
   [do3cc]
 
+- Add CSRF authenticator in createObject script
+  [ebrehault]
+
+- Let set_own_login_name use the update(Own)LoginName method from PAS.
+  Part of PLIP 13419.
+  [maurits]
 
 4.3.7 (2015-09-27)
 ------------------
diff --git a/setup.py b/setup.py
index f67ecb1..9d707f8 100644
--- a/setup.py
+++ b/setup.py
@@ -121,6 +121,7 @@
           'plone.registry',
           'plone.session',
           'plone.theme',
+          # 'plone4.csrffixes',
           'plonetheme.classic',
           'plonetheme.sunburst',
           'transaction',


