Repository: Products.LinguaPlone


Branch: refs/heads/master
Date: 2016-07-05T23:19:29+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/Products.LinguaPlone/commit/955057e8bc66ae93d868150fba426229307be0ab

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.txt
M Products/LinguaPlone/I18NBaseObject.py
M Products/LinguaPlone/LanguageIndex.py
M Products/LinguaPlone/browser/controlpanel.py
M Products/LinguaPlone/browser/menu.py
M Products/LinguaPlone/browser/vocabularies.py
M Products/LinguaPlone/criteria/syncer.py
M Products/LinguaPlone/events.py
M Products/LinguaPlone/tests/test_languageindex.py
M Products/LinguaPlone/tests/test_selector.py
M Products/LinguaPlone/utils.py
M Products/LinguaPlone/vocabulary.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 5defa8f..71af223 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 4.1.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Use zope.interface decorator.
+  [gforcada]
 
 
 4.1.4 (2016-02-17)
@@ -20,7 +21,7 @@ Changelog
 - Add uninstall profile.
   [thet]
 
-- Fixed permission for manage_translations_form, anonymous can't access the page 
+- Fixed permission for manage_translations_form, anonymous can't access the page
   anymore.
   [prospchr]
 
diff --git a/Products/LinguaPlone/I18NBaseObject.py b/Products/LinguaPlone/I18NBaseObject.py
index 931b147..95c8037 100644
--- a/Products/LinguaPlone/I18NBaseObject.py
+++ b/Products/LinguaPlone/I18NBaseObject.py
@@ -1,5 +1,5 @@
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.site.hooks import getSite
 
 from AccessControl import ClassSecurityInfo
@@ -79,9 +79,9 @@ def __getattr__(self, value):
         return getattr(self.__typeinfo, value)
 
 
+@implementer(ITranslatable)
 class I18NBaseObject(Implicit):
     """Base class for translatable objects."""
-    implements(ITranslatable)
 
     security = ClassSecurityInfo()
 
diff --git a/Products/LinguaPlone/LanguageIndex.py b/Products/LinguaPlone/LanguageIndex.py
index c0f4548..5b1f9b8 100644
--- a/Products/LinguaPlone/LanguageIndex.py
+++ b/Products/LinguaPlone/LanguageIndex.py
@@ -1,7 +1,7 @@
 from logging import getLogger
 
 from plone.indexer.interfaces import IIndexableObjectWrapper
-from zope.interface import implements
+from zope.interface import implementer
 
 from AccessControl import ClassSecurityInfo
 from AccessControl import Permissions
@@ -59,8 +59,8 @@ def __cmp__(self, other):
         return cmp(self.cid, other.cid)
 
 
+@implementer(ILanguageIndex, IUniqueValueIndex, ISortIndex)
 class LanguageIndex(SimpleItem, PropertyManager):
-    implements(ILanguageIndex, IUniqueValueIndex, ISortIndex)
 
     _properties = (
         dict(id='fallback', type='boolean', mode='w'),
diff --git a/Products/LinguaPlone/browser/controlpanel.py b/Products/LinguaPlone/browser/controlpanel.py
index 555c790..881deeb 100644
--- a/Products/LinguaPlone/browser/controlpanel.py
+++ b/Products/LinguaPlone/browser/controlpanel.py
@@ -1,5 +1,5 @@
 from zope.interface import Interface
-from zope.interface import implementsOnly
+from zope.interface import implementer_only
 from zope.schema import Choice
 from zope.schema import Tuple
 from zope.formlib.form import FormFields
@@ -31,8 +31,8 @@ class IMultiLanguageSelectionSchema(Interface):
             vocabulary="LinguaPlone.vocabularies.AllContentLanguageVocabulary"))
 
 
+@implementer_only(IMultiLanguageSelectionSchema)
 class MultiLanguageControlPanelAdapter(LanguageControlPanelAdapter):
-    implementsOnly(IMultiLanguageSelectionSchema)
 
     def __init__(self, context):
         super(MultiLanguageControlPanelAdapter, self).__init__(context)
diff --git a/Products/LinguaPlone/browser/menu.py b/Products/LinguaPlone/browser/menu.py
index d7cadae..a49b23a 100644
--- a/Products/LinguaPlone/browser/menu.py
+++ b/Products/LinguaPlone/browser/menu.py
@@ -1,5 +1,5 @@
 from plone.browserlayer.utils import registered_layers
-from zope.interface import implements
+from zope.interface import implementer
 from Products.CMFCore.permissions import AddPortalContent, ModifyPortalContent,\
     DeleteObjects
 
@@ -19,8 +19,8 @@
 from Products.LinguaPlone.interfaces import ILinguaPloneProductLayer
 
 
+@implementer(ITranslateMenu)
 class TranslateMenu(BrowserMenu):
-    implements(ITranslateMenu)
 
     def getUntranslatedLanguages(self, context):
         if not context.Language():
@@ -87,8 +87,8 @@ def getMenuItems(self, context, request):
         return menu
 
 
+@implementer(ITranslateSubMenuItem)
 class TranslateSubMenuItem(BrowserSubMenuItem):
-    implements(ITranslateSubMenuItem)
 
     title = _(u"label_translate_menu", default=u"Translate into...")
     description = _(u"title_translate_menu",
diff --git a/Products/LinguaPlone/browser/vocabularies.py b/Products/LinguaPlone/browser/vocabularies.py
index e2e264b..ec6b555 100644
--- a/Products/LinguaPlone/browser/vocabularies.py
+++ b/Products/LinguaPlone/browser/vocabularies.py
@@ -1,7 +1,7 @@
 from plone.i18n.locales.interfaces import ILanguageAvailability
 from zope.component import getGlobalSiteManager
 from zope.i18nmessageid import Message, MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary
 
@@ -14,10 +14,10 @@ def sort_key(language):
     return language[1]
 
 
+@implementer(IVocabularyFactory)
 class AllContentLanguageVocabulary(object):
     """Vocabulary factory for all content languages in the portal.
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         context = getattr(context, 'context', context)
@@ -37,10 +37,10 @@ def __call__(self, context):
 AllContentLanguageVocabularyFactory = AllContentLanguageVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class UntranslatedLanguagesVocabulary(object):
     """Vocabulary factory returning untranslated languages for the context.
     """
-    implements(IVocabularyFactory)
 
     def __init__(self, incl_neutral=False, incl_nochange=False):
         self.incl_neutral = incl_neutral
@@ -85,10 +85,10 @@ def __call__(self, context):
     UntranslatedLanguagesVocabulary(incl_neutral=True, incl_nochange=True)
 
 
+@implementer(IVocabularyFactory)
 class DeletableLanguagesVocabulary(object):
     """Vocabulary factory returning deletable languages for the context.
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         context = getattr(context, 'context', context)
diff --git a/Products/LinguaPlone/criteria/syncer.py b/Products/LinguaPlone/criteria/syncer.py
index b2cbb65..da106cf 100644
--- a/Products/LinguaPlone/criteria/syncer.py
+++ b/Products/LinguaPlone/criteria/syncer.py
@@ -1,6 +1,6 @@
 from zope.component import adapts
 from zope.component import queryAdapter
-from zope.interface import implements
+from zope.interface import implementer
 
 from Acquisition import aq_parent
 from Products.ATContentTypes.interface import IATTopicCriterion
@@ -29,10 +29,10 @@ def sync_collections(context):
                 syncer.sync()
 
 
+@implementer(ICollectionSyncer)
 class CollectionSyncer(object):
 
     adapts(IATTopic)
-    implements(ICollectionSyncer)
 
     def __init__(self, context):
         self.context = context
@@ -84,10 +84,10 @@ def sync_criterion(self, translation, source, target):
                 syncer.sync(translation, target)
 
 
+@implementer(ICriterionSyncer)
 class CriterionSyncer(object):
 
     adapts(IATTopicCriterion)
-    implements(ICriterionSyncer)
 
     def __init__(self, context):
         self.context = context
diff --git a/Products/LinguaPlone/events.py b/Products/LinguaPlone/events.py
index 65bf3ef..d889121 100644
--- a/Products/LinguaPlone/events.py
+++ b/Products/LinguaPlone/events.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Attribute
 from zope.component.interfaces import IObjectEvent
 
@@ -18,18 +18,18 @@ class IObjectTranslatedEvent(IObjectEvent):
     language = Attribute("Target language.")
 
 
+@implementer(IObjectWillBeTranslatedEvent)
 class ObjectWillBeTranslatedEvent(object):
     """Sent before an object is translated."""
-    implements(IObjectWillBeTranslatedEvent)
 
     def __init__(self, context, language):
         self.object = context
         self.language = language
 
 
+@implementer(IObjectTranslatedEvent)
 class ObjectTranslatedEvent(object):
     """Sent after an object was translated."""
-    implements(IObjectTranslatedEvent)
 
     def __init__(self, context, target, language):
         self.object = context
diff --git a/Products/LinguaPlone/tests/test_languageindex.py b/Products/LinguaPlone/tests/test_languageindex.py
index 3bf383b..cad28ce 100644
--- a/Products/LinguaPlone/tests/test_languageindex.py
+++ b/Products/LinguaPlone/tests/test_languageindex.py
@@ -1,7 +1,7 @@
 from unittest import TestCase
 
 from plone.indexer.interfaces import IIndexableObjectWrapper
-from zope.interface import implements
+from zope.interface import implementer
 from Products.CMFCore.utils import getToolByName
 
 from Products.LinguaPlone.LanguageIndex import IndexEntry
@@ -16,10 +16,9 @@ class Extra(object):
     fallback = False
 
 
+@implementer(ITranslatable)
 class Dummy(object):
 
-    implements(ITranslatable)
-
     def __init__(self, cid, lang):
         self._cid = cid
         self._lang = lang
@@ -36,10 +35,9 @@ def UID(self):
         return self._cid
 
 
+@implementer(IIndexableObjectWrapper)
 class DummyIndexableObjectWrapper:
 
-    implements(IIndexableObjectWrapper)
-
     def __init__(self, wrapped):
         self._IndexableObjectWrapper__ob = wrapped
         self._obj = wrapped
diff --git a/Products/LinguaPlone/tests/test_selector.py b/Products/LinguaPlone/tests/test_selector.py
index 87fcab9..9faf9fd 100644
--- a/Products/LinguaPlone/tests/test_selector.py
+++ b/Products/LinguaPlone/tests/test_selector.py
@@ -5,7 +5,7 @@
 from plone.app.layout.navigation.interfaces import INavigationRoot
 from zope.component import provideAdapter
 from zope.interface import directlyProvides
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.testing import cleanup
 
@@ -23,10 +23,9 @@
 from zope.publisher.browser import TestRequest
 
 
+@implementer(ITranslatable)
 class Dummy(Explicit):
 
-    implements(ITranslatable)
-
     # This avoids issues with tests that run without a
     # full-fledged securityManager
     _View_Permission = ('Anonymous', )
diff --git a/Products/LinguaPlone/utils.py b/Products/LinguaPlone/utils.py
index 781306a..5278819 100644
--- a/Products/LinguaPlone/utils.py
+++ b/Products/LinguaPlone/utils.py
@@ -4,7 +4,7 @@
 from plone.app.layout.navigation.defaultpage import isDefaultPage
 from plone.locking.interfaces import ILockable
 from zope.component import adapts
-from zope.interface import implements
+from zope.interface import implementer
 
 from Acquisition import aq_base
 from Acquisition import aq_inner
@@ -447,6 +447,7 @@ def linkTranslations(context, todo):
             canonical.setCanonical()
 
 
+@implementer(ILocateTranslation)
 class LocateTranslation(object):
     """Default ILocateTranslation adapter.
 
@@ -455,7 +456,6 @@ class LocateTranslation(object):
     location. In all other cases the new translation will be put in
     the same location as the current object.
     """
-    implements(ILocateTranslation)
     adapts(ITranslatable)
 
     def __init__(self, context):
@@ -470,11 +470,10 @@ def findLocationForTranslation(self, language):
         return trans_parent.getTranslation(language) or parent
 
 
+@implementer(ITranslationFactory)
 class TranslationFactory(object):
     """Default translation factory.
     """
-
-    implements(ITranslationFactory)
     adapts(ITranslatable)
 
     def __init__(self, context):
@@ -529,11 +528,10 @@ def createTranslation(self, container, language, *args, **kwargs):
         return translation
 
 
+@implementer(ILanguageIndependentFields)
 class LanguageIndependentFields(object):
     """Default language independent fields manager.
     """
-
-    implements(ILanguageIndependentFields)
     adapts(ITranslatable)
 
     def __init__(self, context):
diff --git a/Products/LinguaPlone/vocabulary.py b/Products/LinguaPlone/vocabulary.py
index 505a498..24d0873 100644
--- a/Products/LinguaPlone/vocabulary.py
+++ b/Products/LinguaPlone/vocabulary.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.site.hooks import getSite
 
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
@@ -6,10 +6,9 @@
 from plone.i18n.locales.languages import LanguageAvailability
 
 
+@implementer(IContentLanguageAvailability, IMetadataLanguageAvailability)
 class SyncedLanguages(LanguageAvailability):
 
-    implements(IContentLanguageAvailability, IMetadataLanguageAvailability)
-
     def getAvailableLanguages(self, combined=False):
         """Return a sequence of language tags for available languages.
         """


Repository: Products.LinguaPlone


Branch: refs/heads/master
Date: 2016-07-10T20:30:43+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.LinguaPlone/commit/d8a8059260c434011d40d72252bbc7bbe107b3f1

Merge pull request #17 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.txt
M Products/LinguaPlone/I18NBaseObject.py
M Products/LinguaPlone/LanguageIndex.py
M Products/LinguaPlone/browser/controlpanel.py
M Products/LinguaPlone/browser/menu.py
M Products/LinguaPlone/browser/vocabularies.py
M Products/LinguaPlone/criteria/syncer.py
M Products/LinguaPlone/events.py
M Products/LinguaPlone/tests/test_languageindex.py
M Products/LinguaPlone/tests/test_selector.py
M Products/LinguaPlone/utils.py
M Products/LinguaPlone/vocabulary.py

diff --git a/CHANGES.txt b/CHANGES.txt
index 5defa8f..71af223 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,7 +4,8 @@ Changelog
 4.1.5 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Use zope.interface decorator.
+  [gforcada]
 
 
 4.1.4 (2016-02-17)
@@ -20,7 +21,7 @@ Changelog
 - Add uninstall profile.
   [thet]
 
-- Fixed permission for manage_translations_form, anonymous can't access the page 
+- Fixed permission for manage_translations_form, anonymous can't access the page
   anymore.
   [prospchr]
 
diff --git a/Products/LinguaPlone/I18NBaseObject.py b/Products/LinguaPlone/I18NBaseObject.py
index 931b147..95c8037 100644
--- a/Products/LinguaPlone/I18NBaseObject.py
+++ b/Products/LinguaPlone/I18NBaseObject.py
@@ -1,5 +1,5 @@
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.site.hooks import getSite
 
 from AccessControl import ClassSecurityInfo
@@ -79,9 +79,9 @@ def __getattr__(self, value):
         return getattr(self.__typeinfo, value)
 
 
+@implementer(ITranslatable)
 class I18NBaseObject(Implicit):
     """Base class for translatable objects."""
-    implements(ITranslatable)
 
     security = ClassSecurityInfo()
 
diff --git a/Products/LinguaPlone/LanguageIndex.py b/Products/LinguaPlone/LanguageIndex.py
index c0f4548..5b1f9b8 100644
--- a/Products/LinguaPlone/LanguageIndex.py
+++ b/Products/LinguaPlone/LanguageIndex.py
@@ -1,7 +1,7 @@
 from logging import getLogger
 
 from plone.indexer.interfaces import IIndexableObjectWrapper
-from zope.interface import implements
+from zope.interface import implementer
 
 from AccessControl import ClassSecurityInfo
 from AccessControl import Permissions
@@ -59,8 +59,8 @@ def __cmp__(self, other):
         return cmp(self.cid, other.cid)
 
 
+@implementer(ILanguageIndex, IUniqueValueIndex, ISortIndex)
 class LanguageIndex(SimpleItem, PropertyManager):
-    implements(ILanguageIndex, IUniqueValueIndex, ISortIndex)
 
     _properties = (
         dict(id='fallback', type='boolean', mode='w'),
diff --git a/Products/LinguaPlone/browser/controlpanel.py b/Products/LinguaPlone/browser/controlpanel.py
index 555c790..881deeb 100644
--- a/Products/LinguaPlone/browser/controlpanel.py
+++ b/Products/LinguaPlone/browser/controlpanel.py
@@ -1,5 +1,5 @@
 from zope.interface import Interface
-from zope.interface import implementsOnly
+from zope.interface import implementer_only
 from zope.schema import Choice
 from zope.schema import Tuple
 from zope.formlib.form import FormFields
@@ -31,8 +31,8 @@ class IMultiLanguageSelectionSchema(Interface):
             vocabulary="LinguaPlone.vocabularies.AllContentLanguageVocabulary"))
 
 
+@implementer_only(IMultiLanguageSelectionSchema)
 class MultiLanguageControlPanelAdapter(LanguageControlPanelAdapter):
-    implementsOnly(IMultiLanguageSelectionSchema)
 
     def __init__(self, context):
         super(MultiLanguageControlPanelAdapter, self).__init__(context)
diff --git a/Products/LinguaPlone/browser/menu.py b/Products/LinguaPlone/browser/menu.py
index d7cadae..a49b23a 100644
--- a/Products/LinguaPlone/browser/menu.py
+++ b/Products/LinguaPlone/browser/menu.py
@@ -1,5 +1,5 @@
 from plone.browserlayer.utils import registered_layers
-from zope.interface import implements
+from zope.interface import implementer
 from Products.CMFCore.permissions import AddPortalContent, ModifyPortalContent,\
     DeleteObjects
 
@@ -19,8 +19,8 @@
 from Products.LinguaPlone.interfaces import ILinguaPloneProductLayer
 
 
+@implementer(ITranslateMenu)
 class TranslateMenu(BrowserMenu):
-    implements(ITranslateMenu)
 
     def getUntranslatedLanguages(self, context):
         if not context.Language():
@@ -87,8 +87,8 @@ def getMenuItems(self, context, request):
         return menu
 
 
+@implementer(ITranslateSubMenuItem)
 class TranslateSubMenuItem(BrowserSubMenuItem):
-    implements(ITranslateSubMenuItem)
 
     title = _(u"label_translate_menu", default=u"Translate into...")
     description = _(u"title_translate_menu",
diff --git a/Products/LinguaPlone/browser/vocabularies.py b/Products/LinguaPlone/browser/vocabularies.py
index e2e264b..ec6b555 100644
--- a/Products/LinguaPlone/browser/vocabularies.py
+++ b/Products/LinguaPlone/browser/vocabularies.py
@@ -1,7 +1,7 @@
 from plone.i18n.locales.interfaces import ILanguageAvailability
 from zope.component import getGlobalSiteManager
 from zope.i18nmessageid import Message, MessageFactory
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm, SimpleVocabulary
 
@@ -14,10 +14,10 @@ def sort_key(language):
     return language[1]
 
 
+@implementer(IVocabularyFactory)
 class AllContentLanguageVocabulary(object):
     """Vocabulary factory for all content languages in the portal.
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         context = getattr(context, 'context', context)
@@ -37,10 +37,10 @@ def __call__(self, context):
 AllContentLanguageVocabularyFactory = AllContentLanguageVocabulary()
 
 
+@implementer(IVocabularyFactory)
 class UntranslatedLanguagesVocabulary(object):
     """Vocabulary factory returning untranslated languages for the context.
     """
-    implements(IVocabularyFactory)
 
     def __init__(self, incl_neutral=False, incl_nochange=False):
         self.incl_neutral = incl_neutral
@@ -85,10 +85,10 @@ def __call__(self, context):
     UntranslatedLanguagesVocabulary(incl_neutral=True, incl_nochange=True)
 
 
+@implementer(IVocabularyFactory)
 class DeletableLanguagesVocabulary(object):
     """Vocabulary factory returning deletable languages for the context.
     """
-    implements(IVocabularyFactory)
 
     def __call__(self, context):
         context = getattr(context, 'context', context)
diff --git a/Products/LinguaPlone/criteria/syncer.py b/Products/LinguaPlone/criteria/syncer.py
index b2cbb65..da106cf 100644
--- a/Products/LinguaPlone/criteria/syncer.py
+++ b/Products/LinguaPlone/criteria/syncer.py
@@ -1,6 +1,6 @@
 from zope.component import adapts
 from zope.component import queryAdapter
-from zope.interface import implements
+from zope.interface import implementer
 
 from Acquisition import aq_parent
 from Products.ATContentTypes.interface import IATTopicCriterion
@@ -29,10 +29,10 @@ def sync_collections(context):
                 syncer.sync()
 
 
+@implementer(ICollectionSyncer)
 class CollectionSyncer(object):
 
     adapts(IATTopic)
-    implements(ICollectionSyncer)
 
     def __init__(self, context):
         self.context = context
@@ -84,10 +84,10 @@ def sync_criterion(self, translation, source, target):
                 syncer.sync(translation, target)
 
 
+@implementer(ICriterionSyncer)
 class CriterionSyncer(object):
 
     adapts(IATTopicCriterion)
-    implements(ICriterionSyncer)
 
     def __init__(self, context):
         self.context = context
diff --git a/Products/LinguaPlone/events.py b/Products/LinguaPlone/events.py
index 65bf3ef..d889121 100644
--- a/Products/LinguaPlone/events.py
+++ b/Products/LinguaPlone/events.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Attribute
 from zope.component.interfaces import IObjectEvent
 
@@ -18,18 +18,18 @@ class IObjectTranslatedEvent(IObjectEvent):
     language = Attribute("Target language.")
 
 
+@implementer(IObjectWillBeTranslatedEvent)
 class ObjectWillBeTranslatedEvent(object):
     """Sent before an object is translated."""
-    implements(IObjectWillBeTranslatedEvent)
 
     def __init__(self, context, language):
         self.object = context
         self.language = language
 
 
+@implementer(IObjectTranslatedEvent)
 class ObjectTranslatedEvent(object):
     """Sent after an object was translated."""
-    implements(IObjectTranslatedEvent)
 
     def __init__(self, context, target, language):
         self.object = context
diff --git a/Products/LinguaPlone/tests/test_languageindex.py b/Products/LinguaPlone/tests/test_languageindex.py
index 3bf383b..cad28ce 100644
--- a/Products/LinguaPlone/tests/test_languageindex.py
+++ b/Products/LinguaPlone/tests/test_languageindex.py
@@ -1,7 +1,7 @@
 from unittest import TestCase
 
 from plone.indexer.interfaces import IIndexableObjectWrapper
-from zope.interface import implements
+from zope.interface import implementer
 from Products.CMFCore.utils import getToolByName
 
 from Products.LinguaPlone.LanguageIndex import IndexEntry
@@ -16,10 +16,9 @@ class Extra(object):
     fallback = False
 
 
+@implementer(ITranslatable)
 class Dummy(object):
 
-    implements(ITranslatable)
-
     def __init__(self, cid, lang):
         self._cid = cid
         self._lang = lang
@@ -36,10 +35,9 @@ def UID(self):
         return self._cid
 
 
+@implementer(IIndexableObjectWrapper)
 class DummyIndexableObjectWrapper:
 
-    implements(IIndexableObjectWrapper)
-
     def __init__(self, wrapped):
         self._IndexableObjectWrapper__ob = wrapped
         self._obj = wrapped
diff --git a/Products/LinguaPlone/tests/test_selector.py b/Products/LinguaPlone/tests/test_selector.py
index 87fcab9..9faf9fd 100644
--- a/Products/LinguaPlone/tests/test_selector.py
+++ b/Products/LinguaPlone/tests/test_selector.py
@@ -5,7 +5,7 @@
 from plone.app.layout.navigation.interfaces import INavigationRoot
 from zope.component import provideAdapter
 from zope.interface import directlyProvides
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.testing import cleanup
 
@@ -23,10 +23,9 @@
 from zope.publisher.browser import TestRequest
 
 
+@implementer(ITranslatable)
 class Dummy(Explicit):
 
-    implements(ITranslatable)
-
     # This avoids issues with tests that run without a
     # full-fledged securityManager
     _View_Permission = ('Anonymous', )
diff --git a/Products/LinguaPlone/utils.py b/Products/LinguaPlone/utils.py
index 781306a..5278819 100644
--- a/Products/LinguaPlone/utils.py
+++ b/Products/LinguaPlone/utils.py
@@ -4,7 +4,7 @@
 from plone.app.layout.navigation.defaultpage import isDefaultPage
 from plone.locking.interfaces import ILockable
 from zope.component import adapts
-from zope.interface import implements
+from zope.interface import implementer
 
 from Acquisition import aq_base
 from Acquisition import aq_inner
@@ -447,6 +447,7 @@ def linkTranslations(context, todo):
             canonical.setCanonical()
 
 
+@implementer(ILocateTranslation)
 class LocateTranslation(object):
     """Default ILocateTranslation adapter.
 
@@ -455,7 +456,6 @@ class LocateTranslation(object):
     location. In all other cases the new translation will be put in
     the same location as the current object.
     """
-    implements(ILocateTranslation)
     adapts(ITranslatable)
 
     def __init__(self, context):
@@ -470,11 +470,10 @@ def findLocationForTranslation(self, language):
         return trans_parent.getTranslation(language) or parent
 
 
+@implementer(ITranslationFactory)
 class TranslationFactory(object):
     """Default translation factory.
     """
-
-    implements(ITranslationFactory)
     adapts(ITranslatable)
 
     def __init__(self, context):
@@ -529,11 +528,10 @@ def createTranslation(self, container, language, *args, **kwargs):
         return translation
 
 
+@implementer(ILanguageIndependentFields)
 class LanguageIndependentFields(object):
     """Default language independent fields manager.
     """
-
-    implements(ILanguageIndependentFields)
     adapts(ITranslatable)
 
     def __init__(self, context):
diff --git a/Products/LinguaPlone/vocabulary.py b/Products/LinguaPlone/vocabulary.py
index 505a498..24d0873 100644
--- a/Products/LinguaPlone/vocabulary.py
+++ b/Products/LinguaPlone/vocabulary.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.site.hooks import getSite
 
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
@@ -6,10 +6,9 @@
 from plone.i18n.locales.languages import LanguageAvailability
 
 
+@implementer(IContentLanguageAvailability, IMetadataLanguageAvailability)
 class SyncedLanguages(LanguageAvailability):
 
-    implements(IContentLanguageAvailability, IMetadataLanguageAvailability)
-
     def getAvailableLanguages(self, combined=False):
         """Return a sequence of language tags for available languages.
         """


