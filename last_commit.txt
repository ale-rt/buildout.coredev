Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2016-10-22T13:20:00-04:00
Author: Ivan Teoh (ivanteoh) <ivan.teoh@gmail.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/cc4ef62d9c8f6de16bee5aa59bbc8d7ff7ac0fad

Remove ZopeTestCase.

Files changed:
M CHANGES.rst
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/integration.rst
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f2d8edc..4842145 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Remove ZopeTestCase.
+  [ivanteoh, maurits]
 
 
 1.2.7 (2016-08-19)
diff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py
index b8aa5f2..bc2e41b 100644
--- a/plone/app/contentlisting/tests/base.py
+++ b/plone/app/contentlisting/tests/base.py
@@ -8,8 +8,6 @@
 from Products.CMFCore.utils import getToolByName
 from zope.configuration import xmlconfig
 
-import unittest2 as unittest
-
 
 class ContentListingLayer(PloneSandboxLayer):
 
@@ -23,37 +21,31 @@ def setUpZope(self, app, configurationContext):
         xmlconfig.file('configure.zcml',
                        plone.app.contentlisting, context=configurationContext)
 
-
 CONTENTLISTING_FIXTURE = ContentListingLayer()
-CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(CONTENTLISTING_FIXTURE, ),
-    name='ContentListing:Integration'
-)
-CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(
-    bases=(CONTENTLISTING_FIXTURE, ),
-    name='ContentListing:Functional'
-)
 
 
-class ContentlistingTestCase(unittest.TestCase):
-    layer = CONTENTLISTING_INTEGRATION_TESTING
+class ContentListingIntegrationLayer(PloneSandboxLayer):
 
-    def setUp(self):
-        self.portal = self.layer['portal']
+    defaultBases = (CONTENTLISTING_FIXTURE, )
 
-        setRoles(self.portal, TEST_USER_ID, ['Manager'])
-        wftool = getToolByName(self.portal, 'portal_workflow')
+    def setUpPloneSite(self, portal):
+        setRoles(portal, TEST_USER_ID, ['Manager'])
+        wftool = getToolByName(portal, 'portal_workflow')
         wftool.setDefaultChain('simple_publication_workflow')
 
-        self.portal.invokeFactory('Folder', 'test-folder')
-        self.portal.invokeFactory('Document', 'front-page')
-        self.portal.invokeFactory('Folder', 'news')
-        wftool.doActionFor(self.portal.news, 'publish')
-        self.portal.news.invokeFactory('News Item', 'news1')
-        setRoles(self.portal, TEST_USER_ID, ['Member'])
+        portal.invokeFactory('Folder', 'test-folder')
+        portal.invokeFactory('Document', 'front-page')
+        portal.invokeFactory('Folder', 'news')
+        wftool.doActionFor(portal.news, 'publish')
+        portal.news.invokeFactory('News Item', 'news1')
+        setRoles(portal, TEST_USER_ID, ['Member'])
 
-        self.folder = self.portal['test-folder']
-
-
-class ContentlistingFunctionalTestCase(ContentlistingTestCase):
-    layer = CONTENTLISTING_FUNCTIONAL_TESTING
+CONTENTLISTING_INTEGRATION_FIXTURE = ContentListingIntegrationLayer()
+CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),
+    name='ContentListing:Integration'
+)
+CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),
+    name='ContentListing:Functional'
+)
diff --git a/plone/app/contentlisting/tests/integration.rst b/plone/app/contentlisting/tests/integration.rst
index 678b12a..a5c8f6e 100644
--- a/plone/app/contentlisting/tests/integration.rst
+++ b/plone/app/contentlisting/tests/integration.rst
@@ -16,7 +16,8 @@ into an IContentListing so that the user always knows what to expect.
 We simply adapt a sequence of something content-like. In this case (and most
 common cases) the sequence will be a catalog search result set.
 
-    >>> catalog = getToolByName(self.portal, 'portal_catalog')
+    >>> portal = layer['portal']
+    >>> catalog = getToolByName(portal, 'portal_catalog')
     >>> results = catalog.searchResults(dict(is_default_page=False))
     >>> contentlist = IContentListing(results)
     >>> print(contentlist)
@@ -64,7 +65,7 @@ This item's origin is no longer a Brain, but the real object
 For user and integrator convenience we also include a couple of handy
 browser views to get to these listings.
 
-    >>> contentlisting = self.portal.restrictedTraverse('@@contentlisting')()
+    >>> contentlisting = portal.restrictedTraverse('@@contentlisting')()
     >>> print(contentlisting)
     <plone.app.contentlisting.contentlisting.ContentListing object ...
 
@@ -76,24 +77,24 @@ We can even slice the new contentlisting
     >>> len (contentlisting[2:4])
     1
 
-    >>> len(self.portal.restrictedTraverse('news/@@contentlisting')())
+    >>> len(portal.restrictedTraverse('news/@@contentlisting')())
     1
 
 And we can use batching in it:
 
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')()]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')()]
     ['http://nohost/plone/test-folder', 'http://nohost/plone/front-page', 'http://nohost/plone/news']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_size=1)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_size=1)]
     ['http://nohost/plone/test-folder']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=1)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=1)]
     ['http://nohost/plone/front-page']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=2, b_size=1)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=2, b_size=1)]
     ['http://nohost/plone/news']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=2)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=2)]
     ['http://nohost/plone/front-page', 'http://nohost/plone/news']
 
 We can use filtering by catalog indexes:
-    >>> len(self.portal.restrictedTraverse('@@contentlisting')(portal_type='Document'))
+    >>> len(portal.restrictedTraverse('@@contentlisting')(portal_type='Document'))
     1
 
 
@@ -102,19 +103,19 @@ Append View Action
 
 Some types may require '/view' appended to their URLs. Currently these don't
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.appendViewAction()
     ''
-    >>> news = self.portal.restrictedTraverse('@@contentlisting')(id='news')[0]
+    >>> news = portal.restrictedTraverse('@@contentlisting')(id='news')[0]
     >>> news.appendViewAction()
     ''
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.appendViewAction()
     ''
 
 By altering portal_properties, we can make this true for Documents
 
-    >>> registry = self.portal.portal_registry
+    >>> registry = portal.portal_registry
     >>> registry['plone.types_use_view_action_in_listings'] = [unicode(frontpage.portal_type)]
 
     >>> frontpage.appendViewAction()
@@ -140,11 +141,11 @@ Visibility in Navigation
 
 Items by default are visible in navigation
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.isVisibleInNav()
     True
 
-    >>> news = self.portal.restrictedTraverse('@@contentlisting')(id='news')[0]
+    >>> news = portal.restrictedTraverse('@@contentlisting')(id='news')[0]
     >>> news.isVisibleInNav()
     True
 
@@ -167,7 +168,7 @@ A catalog object with a real object works
 
 Getting a realobject-based listing also works
 
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.__class__
     <class 'plone.app.contentlisting.realobject.RealContentListingObject'>
     >>> realfrontpage.isVisibleInNav()
@@ -182,7 +183,7 @@ way is the exclude_from_nav property being true
 
 This will be indexed, so an object isn't necessary to check this
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.isVisibleInNav()
     False
     >>> print(frontpage.getDataOrigin())
@@ -190,7 +191,7 @@ This will be indexed, so an object isn't necessary to check this
 
 But a real object still works.
 
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.__class__
     <class 'plone.app.contentlisting.realobject.RealContentListingObject'>
     >>> realfrontpage.isVisibleInNav()
@@ -201,11 +202,11 @@ We can also turn it off again.
     >>> frontpage_object.exclude_from_nav = False
     >>> frontpage_object.reindexObject()
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.isVisibleInNav()
     True
 
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.isVisibleInNav()
     True
 
diff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py
index d73e0c1..77ddaab 100644
--- a/plone/app/contentlisting/tests/test_integration_doctest.py
+++ b/plone/app/contentlisting/tests/test_integration_doctest.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
-from Testing import ZopeTestCase as ztc
+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # noqa
+from plone.testing import layered
 
 import doctest
 import unittest
@@ -8,8 +8,10 @@
 
 def test_suite():
     return unittest.TestSuite([
-        ztc.ZopeDocFileSuite(
-            'tests/integration.rst', package='plone.app.contentlisting',
-            test_class=ContentlistingFunctionalTestCase,
+        layered(doctest.DocFileSuite(
+            'tests/integration.rst',
+            package='plone.app.contentlisting',
             optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS),
+            layer=CONTENTLISTING_FUNCTIONAL_TESTING,
+        ),
     ])
diff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py
index 8f31ae0..2fa9994 100644
--- a/plone/app/contentlisting/tests/test_integration_unit.py
+++ b/plone/app/contentlisting/tests/test_integration_unit.py
@@ -1,18 +1,23 @@
 # -*- coding: utf-8 -*-
 from plone.app.contentlisting.interfaces import IContentListing
 from plone.app.contentlisting.interfaces import IContentListingObject
-from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # noqa
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.batching.interfaces import IBatch
 from Products.CMFCore.utils import getToolByName
 from zope.interface.verify import verifyObject
 
+import unittest
 
-class TestSetup(ContentlistingFunctionalTestCase):
+
+class TestSetup(unittest.TestCase):
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestSetup, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         self.workflow = getToolByName(self.portal, 'portal_workflow')
         self.catalog = getToolByName(self.portal, 'portal_catalog')
 
@@ -49,10 +54,13 @@ def test_listing_object_interface(self):
                                      IContentListing(self.catalog())[0]))
 
 
-class TestIndividualCatalogContentItems(ContentlistingFunctionalTestCase):
+class TestIndividualCatalogContentItems(unittest.TestCase):
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestIndividualCatalogContentItems, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         self.folder.invokeFactory(
             'Document', 'mypage', title='My Page', description='blah')
         self.item = self.folder.restrictedTraverse('@@folderListing')()[0]
@@ -145,10 +153,13 @@ def test_containment(self):
                         self.folder.restrictedTraverse('@@contentlisting')())
 
 
-class TestIndividualRealContentItems(ContentlistingFunctionalTestCase):
+class TestIndividualRealContentItems(unittest.TestCase):
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestIndividualRealContentItems, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         self.folder.invokeFactory(
             'Document', 'mypage', title='My Page', description='blah')
         self.item = IContentListingObject(self.folder.mypage)
@@ -213,10 +224,16 @@ def test_item_uuid(self):
         assert uuid != self.item.getPath()
 
 
-class TestFolderContents(ContentlistingFunctionalTestCase):
+class TestFolderContents(unittest.TestCase):
     """Testing that the folder contents browserview works and behaves
     as it should.
     """
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        super(TestFolderContents, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
 
     def test_empty_folder_contents(self):
         contentlisting = self.folder.restrictedTraverse('@@contentlisting')()
@@ -264,12 +281,15 @@ def test_batching_folder_contents_2(self):
         self.assertEqual(contentlisting.actual_result_count, 2)
 
 
-class TestCollectionResults(ContentlistingFunctionalTestCase):
+class TestCollectionResults(unittest.TestCase):
     """Test, if the @@contentlisting view also works for Collections.
     """
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestCollectionResults, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         self.portal.invokeFactory('Collection', 'collection', title=u'Col')
         collection = self.portal.collection


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2016-11-05T11:58:48+11:00
Author: Ivan Teoh (ivanteoh) <ivan.teoh@gmail.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/010cee13e048e842910344e5d076e694d4768da6

Replace "hasattr"

Files changed:
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py

diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index 1c8adcf..9f9a91c 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -39,12 +39,13 @@ def __getattr__(self, name):
 
         if name.startswith('_'):
             raise AttributeError(name)
-        if hasattr(aq_base(self._brain), name):
-            return getattr(self._brain, name)
-        elif hasattr(aq_base(self.getObject()), name):
-            return getattr(aq_base(self.getObject()), name)
-        else:
-            raise AttributeError(name)
+        brain_name = getattr(aq_base(self._brain), name, None)
+        if brain_name is not None:
+            return brain_name
+        object_name = getattr(aq_base(self.getObject()), name, None)
+        if object_name is not None:
+            return object_name
+        raise AttributeError(name)
 
     def getDataOrigin(self):
         # The origin of the data for the object.
@@ -78,7 +79,8 @@ def getURL(self, relative=False):
 
     def uuid(self):
         # content objects might have UID and might not.
-        if hasattr(aq_base(self._brain), 'UID'):
+        brain_uid = getattr(aq_base(self._brain), 'UID', None)
+        if brain_uid is not None:
             return self._brain.UID
         uuid = IUUID(self.getObject(), None)
         if uuid is not None:
@@ -179,7 +181,8 @@ def Identifier(self):
 
     def Language(self):
         # The language of the content.
-        if hasattr(aq_base(self._brain), 'Language'):
+        brain_language = getattr(aq_base(self._brain), 'Language', None)
+        if brain_language is not None:
             return self._brain.Language
         else:
             return self.getObject().Language()
diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py
index 9a1acb1..cccee03 100644
--- a/plone/app/contentlisting/contentlisting.py
+++ b/plone/app/contentlisting/contentlisting.py
@@ -124,7 +124,8 @@ def appendViewAction(self):
 
     def isVisibleInNav(self):
         # True, if this item should be visible in navigation trees.
-        if hasattr(self, 'exclude_from_nav') and (
+        exclude_from_nav_attr = getattr(self, 'exclude_from_nav', None)
+        if exclude_from_nav_attr is not None and (
                 self.exclude_from_nav()
                 if callable(self.exclude_from_nav)
                 else self.exclude_from_nav
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index b8b7739..c05a15d 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -34,8 +34,9 @@ def __getattr__(self, name):
         if name.startswith('_'):
             raise AttributeError(name)
         obj = self.getObject()
-        if hasattr(aq_base(obj), name):
-            return getattr(aq_base(obj), name)
+        obj_name = getattr(aq_base(obj), name, None)
+        if obj_name is not None:
+            return obj_name
         else:
             raise AttributeError(name)
 


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2016-11-07T09:43:40+11:00
Author: Ivan Teoh (ivanteoh) <ivan.teoh@gmail.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/774d4293f70fde5df4a91fe62df78e818791956f

Revert catalog getattr changes.

Files changed:
M plone/app/contentlisting/catalog.py

diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index 9f9a91c..e9ac53c 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -39,13 +39,12 @@ def __getattr__(self, name):
 
         if name.startswith('_'):
             raise AttributeError(name)
-        brain_name = getattr(aq_base(self._brain), name, None)
-        if brain_name is not None:
-            return brain_name
-        object_name = getattr(aq_base(self.getObject()), name, None)
-        if object_name is not None:
-            return object_name
-        raise AttributeError(name)
+        if hasattr(aq_base(self._brain), name):
+            return getattr(self._brain, name)
+        elif hasattr(aq_base(self.getObject()), name):
+            return getattr(aq_base(self.getObject()), name)
+        else:
+            raise AttributeError(name)
 
     def getDataOrigin(self):
         # The origin of the data for the object.


Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2016-11-07T09:57:19+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.contentlisting/commit/a67ede35d588b0d9c1446c0b1ace24c47b5f8845

Merge pull request #20 from plone/remove-zopetestcase

Remove ZopeTestCase.

Files changed:
M CHANGES.rst
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py
M plone/app/contentlisting/tests/base.py
M plone/app/contentlisting/tests/integration.rst
M plone/app/contentlisting/tests/test_integration_doctest.py
M plone/app/contentlisting/tests/test_integration_unit.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f2d8edc..4842145 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Remove ZopeTestCase.
+  [ivanteoh, maurits]
 
 
 1.2.7 (2016-08-19)
diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index 1c8adcf..e9ac53c 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -78,7 +78,8 @@ def getURL(self, relative=False):
 
     def uuid(self):
         # content objects might have UID and might not.
-        if hasattr(aq_base(self._brain), 'UID'):
+        brain_uid = getattr(aq_base(self._brain), 'UID', None)
+        if brain_uid is not None:
             return self._brain.UID
         uuid = IUUID(self.getObject(), None)
         if uuid is not None:
@@ -179,7 +180,8 @@ def Identifier(self):
 
     def Language(self):
         # The language of the content.
-        if hasattr(aq_base(self._brain), 'Language'):
+        brain_language = getattr(aq_base(self._brain), 'Language', None)
+        if brain_language is not None:
             return self._brain.Language
         else:
             return self.getObject().Language()
diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py
index 9a1acb1..cccee03 100644
--- a/plone/app/contentlisting/contentlisting.py
+++ b/plone/app/contentlisting/contentlisting.py
@@ -124,7 +124,8 @@ def appendViewAction(self):
 
     def isVisibleInNav(self):
         # True, if this item should be visible in navigation trees.
-        if hasattr(self, 'exclude_from_nav') and (
+        exclude_from_nav_attr = getattr(self, 'exclude_from_nav', None)
+        if exclude_from_nav_attr is not None and (
                 self.exclude_from_nav()
                 if callable(self.exclude_from_nav)
                 else self.exclude_from_nav
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index b8b7739..c05a15d 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -34,8 +34,9 @@ def __getattr__(self, name):
         if name.startswith('_'):
             raise AttributeError(name)
         obj = self.getObject()
-        if hasattr(aq_base(obj), name):
-            return getattr(aq_base(obj), name)
+        obj_name = getattr(aq_base(obj), name, None)
+        if obj_name is not None:
+            return obj_name
         else:
             raise AttributeError(name)
 
diff --git a/plone/app/contentlisting/tests/base.py b/plone/app/contentlisting/tests/base.py
index b8aa5f2..bc2e41b 100644
--- a/plone/app/contentlisting/tests/base.py
+++ b/plone/app/contentlisting/tests/base.py
@@ -8,8 +8,6 @@
 from Products.CMFCore.utils import getToolByName
 from zope.configuration import xmlconfig
 
-import unittest2 as unittest
-
 
 class ContentListingLayer(PloneSandboxLayer):
 
@@ -23,37 +21,31 @@ def setUpZope(self, app, configurationContext):
         xmlconfig.file('configure.zcml',
                        plone.app.contentlisting, context=configurationContext)
 
-
 CONTENTLISTING_FIXTURE = ContentListingLayer()
-CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(
-    bases=(CONTENTLISTING_FIXTURE, ),
-    name='ContentListing:Integration'
-)
-CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(
-    bases=(CONTENTLISTING_FIXTURE, ),
-    name='ContentListing:Functional'
-)
 
 
-class ContentlistingTestCase(unittest.TestCase):
-    layer = CONTENTLISTING_INTEGRATION_TESTING
+class ContentListingIntegrationLayer(PloneSandboxLayer):
 
-    def setUp(self):
-        self.portal = self.layer['portal']
+    defaultBases = (CONTENTLISTING_FIXTURE, )
 
-        setRoles(self.portal, TEST_USER_ID, ['Manager'])
-        wftool = getToolByName(self.portal, 'portal_workflow')
+    def setUpPloneSite(self, portal):
+        setRoles(portal, TEST_USER_ID, ['Manager'])
+        wftool = getToolByName(portal, 'portal_workflow')
         wftool.setDefaultChain('simple_publication_workflow')
 
-        self.portal.invokeFactory('Folder', 'test-folder')
-        self.portal.invokeFactory('Document', 'front-page')
-        self.portal.invokeFactory('Folder', 'news')
-        wftool.doActionFor(self.portal.news, 'publish')
-        self.portal.news.invokeFactory('News Item', 'news1')
-        setRoles(self.portal, TEST_USER_ID, ['Member'])
+        portal.invokeFactory('Folder', 'test-folder')
+        portal.invokeFactory('Document', 'front-page')
+        portal.invokeFactory('Folder', 'news')
+        wftool.doActionFor(portal.news, 'publish')
+        portal.news.invokeFactory('News Item', 'news1')
+        setRoles(portal, TEST_USER_ID, ['Member'])
 
-        self.folder = self.portal['test-folder']
-
-
-class ContentlistingFunctionalTestCase(ContentlistingTestCase):
-    layer = CONTENTLISTING_FUNCTIONAL_TESTING
+CONTENTLISTING_INTEGRATION_FIXTURE = ContentListingIntegrationLayer()
+CONTENTLISTING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),
+    name='ContentListing:Integration'
+)
+CONTENTLISTING_FUNCTIONAL_TESTING = FunctionalTesting(
+    bases=(CONTENTLISTING_INTEGRATION_FIXTURE, ),
+    name='ContentListing:Functional'
+)
diff --git a/plone/app/contentlisting/tests/integration.rst b/plone/app/contentlisting/tests/integration.rst
index 678b12a..a5c8f6e 100644
--- a/plone/app/contentlisting/tests/integration.rst
+++ b/plone/app/contentlisting/tests/integration.rst
@@ -16,7 +16,8 @@ into an IContentListing so that the user always knows what to expect.
 We simply adapt a sequence of something content-like. In this case (and most
 common cases) the sequence will be a catalog search result set.
 
-    >>> catalog = getToolByName(self.portal, 'portal_catalog')
+    >>> portal = layer['portal']
+    >>> catalog = getToolByName(portal, 'portal_catalog')
     >>> results = catalog.searchResults(dict(is_default_page=False))
     >>> contentlist = IContentListing(results)
     >>> print(contentlist)
@@ -64,7 +65,7 @@ This item's origin is no longer a Brain, but the real object
 For user and integrator convenience we also include a couple of handy
 browser views to get to these listings.
 
-    >>> contentlisting = self.portal.restrictedTraverse('@@contentlisting')()
+    >>> contentlisting = portal.restrictedTraverse('@@contentlisting')()
     >>> print(contentlisting)
     <plone.app.contentlisting.contentlisting.ContentListing object ...
 
@@ -76,24 +77,24 @@ We can even slice the new contentlisting
     >>> len (contentlisting[2:4])
     1
 
-    >>> len(self.portal.restrictedTraverse('news/@@contentlisting')())
+    >>> len(portal.restrictedTraverse('news/@@contentlisting')())
     1
 
 And we can use batching in it:
 
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')()]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')()]
     ['http://nohost/plone/test-folder', 'http://nohost/plone/front-page', 'http://nohost/plone/news']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_size=1)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_size=1)]
     ['http://nohost/plone/test-folder']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=1)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=1)]
     ['http://nohost/plone/front-page']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=2, b_size=1)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=2, b_size=1)]
     ['http://nohost/plone/news']
-    >>> [i.getURL() for i in self.portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=2)]
+    >>> [i.getURL() for i in portal.restrictedTraverse('@@contentlisting')(batch=True, b_start=1, b_size=2)]
     ['http://nohost/plone/front-page', 'http://nohost/plone/news']
 
 We can use filtering by catalog indexes:
-    >>> len(self.portal.restrictedTraverse('@@contentlisting')(portal_type='Document'))
+    >>> len(portal.restrictedTraverse('@@contentlisting')(portal_type='Document'))
     1
 
 
@@ -102,19 +103,19 @@ Append View Action
 
 Some types may require '/view' appended to their URLs. Currently these don't
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.appendViewAction()
     ''
-    >>> news = self.portal.restrictedTraverse('@@contentlisting')(id='news')[0]
+    >>> news = portal.restrictedTraverse('@@contentlisting')(id='news')[0]
     >>> news.appendViewAction()
     ''
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.appendViewAction()
     ''
 
 By altering portal_properties, we can make this true for Documents
 
-    >>> registry = self.portal.portal_registry
+    >>> registry = portal.portal_registry
     >>> registry['plone.types_use_view_action_in_listings'] = [unicode(frontpage.portal_type)]
 
     >>> frontpage.appendViewAction()
@@ -140,11 +141,11 @@ Visibility in Navigation
 
 Items by default are visible in navigation
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.isVisibleInNav()
     True
 
-    >>> news = self.portal.restrictedTraverse('@@contentlisting')(id='news')[0]
+    >>> news = portal.restrictedTraverse('@@contentlisting')(id='news')[0]
     >>> news.isVisibleInNav()
     True
 
@@ -167,7 +168,7 @@ A catalog object with a real object works
 
 Getting a realobject-based listing also works
 
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.__class__
     <class 'plone.app.contentlisting.realobject.RealContentListingObject'>
     >>> realfrontpage.isVisibleInNav()
@@ -182,7 +183,7 @@ way is the exclude_from_nav property being true
 
 This will be indexed, so an object isn't necessary to check this
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.isVisibleInNav()
     False
     >>> print(frontpage.getDataOrigin())
@@ -190,7 +191,7 @@ This will be indexed, so an object isn't necessary to check this
 
 But a real object still works.
 
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.__class__
     <class 'plone.app.contentlisting.realobject.RealContentListingObject'>
     >>> realfrontpage.isVisibleInNav()
@@ -201,11 +202,11 @@ We can also turn it off again.
     >>> frontpage_object.exclude_from_nav = False
     >>> frontpage_object.reindexObject()
 
-    >>> frontpage = self.portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
+    >>> frontpage = portal.restrictedTraverse('@@contentlisting')(id='front-page')[0]
     >>> frontpage.isVisibleInNav()
     True
 
-    >>> realfrontpage = IContentListingObject(self.portal['front-page'])
+    >>> realfrontpage = IContentListingObject(portal['front-page'])
     >>> realfrontpage.isVisibleInNav()
     True
 
diff --git a/plone/app/contentlisting/tests/test_integration_doctest.py b/plone/app/contentlisting/tests/test_integration_doctest.py
index d73e0c1..77ddaab 100644
--- a/plone/app/contentlisting/tests/test_integration_doctest.py
+++ b/plone/app/contentlisting/tests/test_integration_doctest.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
-from Testing import ZopeTestCase as ztc
+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # noqa
+from plone.testing import layered
 
 import doctest
 import unittest
@@ -8,8 +8,10 @@
 
 def test_suite():
     return unittest.TestSuite([
-        ztc.ZopeDocFileSuite(
-            'tests/integration.rst', package='plone.app.contentlisting',
-            test_class=ContentlistingFunctionalTestCase,
+        layered(doctest.DocFileSuite(
+            'tests/integration.rst',
+            package='plone.app.contentlisting',
             optionflags=doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS),
+            layer=CONTENTLISTING_FUNCTIONAL_TESTING,
+        ),
     ])
diff --git a/plone/app/contentlisting/tests/test_integration_unit.py b/plone/app/contentlisting/tests/test_integration_unit.py
index 8f31ae0..2fa9994 100644
--- a/plone/app/contentlisting/tests/test_integration_unit.py
+++ b/plone/app/contentlisting/tests/test_integration_unit.py
@@ -1,18 +1,23 @@
 # -*- coding: utf-8 -*-
 from plone.app.contentlisting.interfaces import IContentListing
 from plone.app.contentlisting.interfaces import IContentListingObject
-from plone.app.contentlisting.tests.base import ContentlistingFunctionalTestCase  # noqa
+from plone.app.contentlisting.tests.base import CONTENTLISTING_FUNCTIONAL_TESTING  # noqa
 from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.batching.interfaces import IBatch
 from Products.CMFCore.utils import getToolByName
 from zope.interface.verify import verifyObject
 
+import unittest
 
-class TestSetup(ContentlistingFunctionalTestCase):
+
+class TestSetup(unittest.TestCase):
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestSetup, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         self.workflow = getToolByName(self.portal, 'portal_workflow')
         self.catalog = getToolByName(self.portal, 'portal_catalog')
 
@@ -49,10 +54,13 @@ def test_listing_object_interface(self):
                                      IContentListing(self.catalog())[0]))
 
 
-class TestIndividualCatalogContentItems(ContentlistingFunctionalTestCase):
+class TestIndividualCatalogContentItems(unittest.TestCase):
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestIndividualCatalogContentItems, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         self.folder.invokeFactory(
             'Document', 'mypage', title='My Page', description='blah')
         self.item = self.folder.restrictedTraverse('@@folderListing')()[0]
@@ -145,10 +153,13 @@ def test_containment(self):
                         self.folder.restrictedTraverse('@@contentlisting')())
 
 
-class TestIndividualRealContentItems(ContentlistingFunctionalTestCase):
+class TestIndividualRealContentItems(unittest.TestCase):
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestIndividualRealContentItems, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         self.folder.invokeFactory(
             'Document', 'mypage', title='My Page', description='blah')
         self.item = IContentListingObject(self.folder.mypage)
@@ -213,10 +224,16 @@ def test_item_uuid(self):
         assert uuid != self.item.getPath()
 
 
-class TestFolderContents(ContentlistingFunctionalTestCase):
+class TestFolderContents(unittest.TestCase):
     """Testing that the folder contents browserview works and behaves
     as it should.
     """
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
+
+    def setUp(self):
+        super(TestFolderContents, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
 
     def test_empty_folder_contents(self):
         contentlisting = self.folder.restrictedTraverse('@@contentlisting')()
@@ -264,12 +281,15 @@ def test_batching_folder_contents_2(self):
         self.assertEqual(contentlisting.actual_result_count, 2)
 
 
-class TestCollectionResults(ContentlistingFunctionalTestCase):
+class TestCollectionResults(unittest.TestCase):
     """Test, if the @@contentlisting view also works for Collections.
     """
+    layer = CONTENTLISTING_FUNCTIONAL_TESTING
 
     def setUp(self):
         super(TestCollectionResults, self).setUp()
+        self.portal = self.layer['portal']
+        self.folder = self.portal['test-folder']
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         self.portal.invokeFactory('Collection', 'collection', title=u'Col')
         collection = self.portal.collection


