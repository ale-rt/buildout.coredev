Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2016-07-05T23:11:31+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.contentrules/commit/d63bc9865c33fd389b9c2e0aa28a890e612f08ce

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/traversal.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/namechooser.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c540052..6204377 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 4.0.10 (2015-11-26)
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index c753e62..a173920 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -2,7 +2,7 @@
 from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
 from zope.event import notify
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.lifecycleevent import ObjectCopiedEvent
 from zope import schema
 
@@ -32,10 +32,10 @@ class ICopyAction(Interface):
                                   source=CatalogSource(is_folderish=True))
 
 
+@implementer(ICopyAction, IRuleElementData)
 class CopyAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(ICopyAction, IRuleElementData)
 
     target_folder = ''
     element = 'plone.actions.Copy'
@@ -46,10 +46,10 @@ def summary(self):
                  mapping=dict(folder=self.target_folder))
 
 
+@implementer(IExecutable)
 class CopyActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, ICopyAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index febeffe..9a14caa 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 import transaction
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts
 
 from Acquisition import aq_inner, aq_parent
@@ -18,19 +18,19 @@ class IDeleteAction(Interface):
     """
 
 
+@implementer(IDeleteAction, IRuleElementData)
 class DeleteAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(IDeleteAction, IRuleElementData)
 
     element = 'plone.actions.Delete'
     summary = _(u"Delete object")
 
 
+@implementer(IExecutable)
 class DeleteActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IDeleteAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index f023365..e7ffea5 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -2,7 +2,7 @@
 
 from zope.component import adapts
 from zope.component.interfaces import IObjectEvent
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -41,12 +41,12 @@ class ILoggerAction(Interface):
                   default=u"Caught &e at &c by &u"))
 
 
+@implementer(ILoggerAction, IRuleElementData)
 class LoggerAction(SimpleItem):
     """The actual persistent implementation of the logger action element.
 
     Note that we must mix in Explicit to keep Zope 2 security happy.
     """
-    implements(ILoggerAction, IRuleElementData)
 
     targetLogger = ''
     loggingLevel = ''
@@ -59,12 +59,12 @@ def summary(self):
         return _(u"Log message ${message}", mapping=dict(message=self.message))
 
 
+@implementer(IExecutable)
 class LoggerActionExecutor(object):
     """The executor for this action.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, ILoggerAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index 53a7764..94d4208 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -8,7 +8,7 @@
 from zope.component import adapts
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 from zope import schema
 from zope.globalrequest import getRequest
 
@@ -53,11 +53,11 @@ class IMailAction(Interface):
                           required=True)
 
 
+@implementer(IMailAction, IRuleElementData)
 class MailAction(SimpleItem):
     """
     The implementation of the action defined before
     """
-    implements(IMailAction, IRuleElementData)
 
     subject = u''
     source = u''
@@ -73,10 +73,10 @@ def summary(self):
                  mapping=dict(recipients=self.recipients))
 
 
+@implementer(IExecutable)
 class MailActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IMailAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index e9e1f89..e5ffb16 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -3,7 +3,7 @@
 from zope.component import adapts
 from zope.container.contained import notifyContainerModified
 from zope.event import notify
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.lifecycleevent import ObjectMovedEvent
 from zope import schema
 
@@ -33,10 +33,10 @@ class IMoveAction(Interface):
                                   source=CatalogSource(is_folderish=True))
 
 
+@implementer(IMoveAction, IRuleElementData)
 class MoveAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(IMoveAction, IRuleElementData)
 
     target_folder = ''
     element = 'plone.actions.Move'
@@ -46,10 +46,10 @@ def summary(self):
         return _(u"Move to folder ${folder}", mapping=dict(folder=self.target_folder))
 
 
+@implementer(IExecutable)
 class MoveActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IMoveAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index aafb41b..0a43443 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -29,10 +29,10 @@ class INotifyAction(Interface):
                                  default="info")
 
 
+@implementer(INotifyAction, IRuleElementData)
 class NotifyAction(SimpleItem):
     """The actual persistent implementation of the notify action element.
     """
-    implements(INotifyAction, IRuleElementData)
 
     message = ''
     message_type = ''
@@ -44,12 +44,12 @@ def summary(self):
         return _(u"Notify with message ${message}", mapping=dict(message=self.message))
 
 
+@implementer(IExecutable)
 class NotifyActionExecutor(object):
     """The executor for this action.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, INotifyAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 163243e..9a42ccc 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -1,5 +1,5 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts
 from zope import schema
 
@@ -26,10 +26,10 @@ class IWorkflowAction(Interface):
                                vocabulary='plone.app.vocabularies.WorkflowTransitions')
 
 
+@implementer(IWorkflowAction, IRuleElementData)
 class WorkflowAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(IWorkflowAction, IRuleElementData)
 
     transition = ''
     element = "plone.actions.Workflow"
@@ -39,10 +39,10 @@ def summary(self):
         return _(u"Execute transition ${transition}", mapping=dict(transition=self.transition))
 
 
+@implementer(IExecutable)
 class WorkflowActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IWorkflowAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py
index cde7f5d..ea61a35 100644
--- a/plone/app/contentrules/browser/adding.py
+++ b/plone/app/contentrules/browser/adding.py
@@ -1,6 +1,6 @@
 from warnings import warn
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getMultiAdapter, getUtility
 from zope.container.interfaces import INameChooser
 
@@ -17,10 +17,9 @@
 from plone.app.contentrules.browser.interfaces import IRuleActionAdding
 
 
+@implementer(IRuleAdding)
 class RuleAdding(SimpleItem, BrowserView):
 
-    implements(IRuleAdding)
-
     context = None
     request = None
     contentName = None
@@ -103,10 +102,9 @@ def hasCustomAddView(self):
         return None
 
 
+@implementer(IRuleConditionAdding)
 class RuleConditionAdding(RuleElementAdding):
 
-    implements(IRuleConditionAdding)
-
     # This is necessary so that context.absolute_url() works properly on the
     # add form, which in turn fixes the <base /> URL
     id = '+condition'
@@ -118,10 +116,9 @@ def add(self, content):
         rule.conditions.append(content)
 
 
+@implementer(IRuleActionAdding)
 class RuleActionAdding(RuleElementAdding):
 
-    implements(IRuleActionAdding)
-
     # This is necessary so that context.absolute_url() works properly on the
     # add form, which in turn fixes the <base /> URL
     id = '+action'
diff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py
index a248d81..2cfc3a2 100644
--- a/plone/app/contentrules/browser/controlpanel.py
+++ b/plone/app/contentrules/browser/controlpanel.py
@@ -1,6 +1,6 @@
 from zope.component import getMultiAdapter
 from AccessControl import Unauthorized
-from zope.interface import implements
+from zope.interface import implementer
 from zope.i18n import translate
 from zope.component import getUtility
 from zope.schema.interfaces import IVocabularyFactory
@@ -20,10 +20,10 @@ def get_trigger_class(trigger):
     return "trigger-%s" % trigger.__identifier__.split('.')[-1].lower()
 
 
+@implementer(IContentRulesControlPanel)
 class ContentRulesControlPanel(BrowserView):
     """Manage rules in a the global rules container
     """
-    implements(IContentRulesControlPanel)
     template = ViewPageTemplateFile('templates/controlpanel.pt')
 
     def __call__(self):
diff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py
index 2030854..2c6f38c 100644
--- a/plone/app/contentrules/browser/formhelper.py
+++ b/plone/app/contentrules/browser/formhelper.py
@@ -2,7 +2,7 @@
 from plone.z3cform import layout
 from zope.component import getMultiAdapter
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 import zope.lifecycleevent
 
 from Acquisition import aq_parent, aq_inner
@@ -15,6 +15,7 @@
 from plone.autoform.form import AutoExtensibleForm
 
 
+@implementer(IContentRulesForm)
 class AddForm(AutoExtensibleForm, form.AddForm):
     """A base add form for content rule.
 
@@ -34,8 +35,6 @@ def create(self, data):
         def create(self):
             return MyAssignment()
     """
-
-    implements(IContentRulesForm)
     ignoreContext = True
 
     def updateActions(self):
@@ -101,12 +100,11 @@ def create(self):
         raise NotImplementedError("concrete classes must implement create()")
 
 
+@implementer(IContentRulesForm)
 class EditForm(AutoExtensibleForm, form.EditForm):
     """An edit form for rule elements.
     """
 
-    implements(IContentRulesForm)
-
     def updateActions(self):
         super(EditForm, self).updateActions()
         self.actions['save'].addClass("context")
diff --git a/plone/app/contentrules/browser/traversal.py b/plone/app/contentrules/browser/traversal.py
index 6ac5f9a..c62c92c 100644
--- a/plone/app/contentrules/browser/traversal.py
+++ b/plone/app/contentrules/browser/traversal.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts, getUtility
 
 from zope.traversing.interfaces import ITraversable
@@ -10,13 +10,13 @@
 from Products.CMFCore.interfaces import ISiteRoot
 
 
+@implementer(ITraversable)
 class RuleNamespace(object):
     """Used to traverse to a rule.
 
     Traversing to portal/++rule++foo will retrieve the rule with id 'foo'
     stored in context, acquisition-wrapped.
     """
-    implements(ITraversable)
     adapts(ISiteRoot, IBrowserRequest)
 
     def __init__(self, context, request=None):
@@ -28,13 +28,13 @@ def traverse(self, name, ignore):
         return manager[name]
 
 
+@implementer(ITraversable)
 class RuleConditionNamespace(object):
     """Used to traverse to a rule condition
 
     Traversing to portal/++rule++foo/++condition++1 will retrieve the second
     condition of the rule rule with id 'foo', acquisition-wrapped.
     """
-    implements(ITraversable)
     adapts(IRule, IBrowserRequest)
 
     def __init__(self, context, request=None):
@@ -49,13 +49,13 @@ def traverse(self, name, ignore):
         return condition
 
 
+@implementer(ITraversable)
 class RuleActionNamespace(object):
     """Used to traverse to a rule condition
 
     Traversing to portal/++rule++foo/++action++1 will retrieve the second
     condition of the rule rule with id 'foo', acquisition-wrapped.
     """
-    implements(ITraversable)
     adapts(IRule, IBrowserRequest)
 
     def __init__(self, context, request=None):
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index 29e4856..d49dc7a 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from z3c.form import form
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -26,12 +26,12 @@ class IFileExtensionCondition(Interface):
                                      required=True)
 
 
+@implementer(IFileExtensionCondition, IRuleElementData)
 class FileExtensionCondition(SimpleItem):
     """The actual persistent implementation of the file extension condition.
 
     Note that we must mix in Explicit to keep Zope 2 security happy.
     """
-    implements(IFileExtensionCondition, IRuleElementData)
 
     file_extension = u''
     element = "plone.conditions.FileExtension"
@@ -41,12 +41,12 @@ def summary(self):
         return _(u"File extension is ${ext}", mapping=dict(ext=self.file_extension))
 
 
+@implementer(IExecutable)
 class FileExtensionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IFileExtensionCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index 310a56c..df4e41d 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from z3c.form import form
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -24,12 +24,12 @@ class IGroupCondition(Interface):
                              value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups"))
 
 
+@implementer(IGroupCondition, IRuleElementData)
 class GroupCondition(SimpleItem):
     """The actual persistent implementation of the group condition element.
 
     Note that we must mix in SimpleItem to keep Zope 2 security happy.
     """
-    implements(IGroupCondition, IRuleElementData)
 
     group_names = []
     element = "plone.conditions.Group"
@@ -39,12 +39,12 @@ def summary(self):
         return _(u"Groups are: ${names}", mapping=dict(names=", ".join(self.group_names)))
 
 
+@implementer(IExecutable)
 class GroupConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IGroupCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index 48e388a..2ce9dbb 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 from zope.site.hooks import getSite
@@ -29,12 +29,12 @@ class IPortalTypeCondition(Interface):
         value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
 
 
+@implementer(IPortalTypeCondition, IRuleElementData)
 class PortalTypeCondition(SimpleItem):
     """The actual persistent implementation of the portal type condition element.
 
     Note that we must mix in SimpleItem to keep Zope 2 security happy.
     """
-    implements(IPortalTypeCondition, IRuleElementData)
 
     check_types = []
     element = "plone.conditions.PortalType"
@@ -52,12 +52,12 @@ def summary(self):
         return _(u"Content types are: ${names}", mapping=dict(names=", ".join(titles)))
 
 
+@implementer(IExecutable)
 class PortalTypeConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IPortalTypeCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index 8fbaca4..8ef8d80 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 
@@ -25,12 +25,12 @@ class IRoleCondition(Interface):
                             value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"))
 
 
+@implementer(IRoleCondition, IRuleElementData)
 class RoleCondition(SimpleItem):
     """The actual persistent implementation of the role condition element.
 
     Note that we must mix in SimpleItem to keep Zope 2 security happy.
     """
-    implements(IRoleCondition, IRuleElementData)
 
     role_names = []
     element = "plone.conditions.Role"
@@ -40,12 +40,12 @@ def summary(self):
         return _(u"Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))
 
 
+@implementer(IExecutable)
 class RoleConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IRoleCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index e46ac04..a031bfc 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 
@@ -26,10 +26,10 @@ class ITalesExpressionCondition(Interface):
         required=True)
 
 
+@implementer(ITalesExpressionCondition, IRuleElementData)
 class TalesExpressionCondition(SimpleItem):
     """The actual persistent implementation of the TALES expression condition element.
     """
-    implements(ITalesExpressionCondition, IRuleElementData)
 
     tales_expression = ''
     element = "plone.conditions.TalesExpression"
@@ -40,12 +40,12 @@ def summary(self):
                  mapping={'tales_expression': self.tales_expression})
 
 
+@implementer(IExecutable)
 class TalesExpressionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, ITalesExpressionCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index 1538d8a..3f71c8c 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 
@@ -25,10 +25,10 @@ class IWorkflowStateCondition(Interface):
         value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
 
 
+@implementer(IWorkflowStateCondition, IRuleElementData)
 class WorkflowStateCondition(SimpleItem):
     """The actual persistent implementation of the workflow state condition element.py.
     """
-    implements(IWorkflowStateCondition, IRuleElementData)
 
     wf_states = []
     element = "plone.conditions.WorkflowState"
@@ -38,10 +38,10 @@ def summary(self):
         return _(u"Workflow states are: ${states}", mapping=dict(states=", ".join(self.wf_states)))
 
 
+@implementer(IExecutable)
 class WorkflowStateConditionExecutor(object):
     """The executor for this condition.
     """
-    implements(IExecutable)
     adapts(Interface, IWorkflowStateCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index a0b95d7..ceb026d 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from z3c.form import form
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -25,10 +25,10 @@ class IWorkflowTransitionCondition(Interface):
         value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
 
 
+@implementer(IWorkflowTransitionCondition, IRuleElementData)
 class WorkflowTransitionCondition(SimpleItem):
     """The actual persistent implementation of the workflow transition condition element.
     """
-    implements(IWorkflowTransitionCondition, IRuleElementData)
 
     wf_transitions = []
     element = "plone.conditions.WorkflowTransition"
@@ -39,10 +39,10 @@ def summary(self):
                  mapping=dict(transitions=", ".join(self.wf_transitions)))
 
 
+@implementer(IExecutable)
 class WorkflowTransitionConditionExecutor(object):
     """The executor for this condition.
     """
-    implements(IExecutable)
     adapts(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index c08592b..a67c8a6 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -5,7 +5,7 @@
 from zope.component import queryUtility
 from zope.container.interfaces import INameChooser
 from zope.interface import Interface
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import IFromUnicode
@@ -36,11 +36,10 @@ def as_bool(string, default=False):
     return string.lower() == 'true'
 
 
+@implementer(IRuleElementExportImportHandler)
 class PropertyRuleElementExportImportHandler(object):
     """Import portlet assignment settings based on zope.schema properties
     """
-
-    implements(IRuleElementExportImportHandler)
     adapts(Interface)
 
     def __init__(self, element):
@@ -159,10 +158,10 @@ def field_typecast(self, field, value):
         return value
 
 
+@implementer(IBody)
 class RulesXMLAdapter(XMLAdapterBase):
     """In- and exporter for a local portlet configuration
     """
-    implements(IBody)
     adapts(ISiteRoot, ISetupEnviron)
 
     name = 'contentrules'
diff --git a/plone/app/contentrules/namechooser.py b/plone/app/contentrules/namechooser.py
index fc2978b..1fe0ddf 100644
--- a/plone/app/contentrules/namechooser.py
+++ b/plone/app/contentrules/namechooser.py
@@ -1,16 +1,15 @@
 from zope.container.contained import NameChooser
 from zope.container.interfaces import INameChooser
-from zope.interface import implements
+from zope.interface import implementer
 
 ATTEMPTS = 100
 
 
+@implementer(INameChooser)
 class RuleNameChooser(NameChooser):
     """A name chooser for content rules.
     """
 
-    implements(INameChooser)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py
index 2e00291..57e41e3 100644
--- a/plone/app/contentrules/tests/dummy.py
+++ b/plone/app/contentrules/tests/dummy.py
@@ -1,24 +1,24 @@
 from OFS.SimpleItem import SimpleItem
-from zope.interface import implements
+from zope.interface import implementer
 from plone.contentrules.rule.interfaces import IRuleElementData
 from zope.component.interfaces import IObjectEvent
 from plone.uuid.interfaces import IAttributeUUID
 
 
+@implementer(IRuleElementData)
 class DummyCondition(SimpleItem):
-    implements(IRuleElementData)
     element = "dummy.condition"
     summary = "Dummy condition"
 
 
+@implementer(IRuleElementData)
 class DummyAction(SimpleItem):
-    implements(IRuleElementData)
     element = "dummy.action"
     summary = "Dummy action"
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
@@ -30,5 +30,6 @@ def __init__(self, name='dummy'):
         self.__name__ = name
 
 
+@implementer(IAttributeUUID)
 class DummyNonArchetypesContext(object):
-    implements(IAttributeUUID)
+    pass
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index 38c0c74..e1d4708 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -16,8 +16,8 @@
 from zope.component.interfaces import IObjectEvent
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py
index 6d2f608..1dcc82e 100644
--- a/plone/app/contentrules/tests/test_action_delete.py
+++ b/plone/app/contentrules/tests/test_action_delete.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -14,8 +14,8 @@
 from zope.component.interfaces import IObjectEvent
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 8695df7..61682c3 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import getUtility, getMultiAdapter
 from zope.component.interfaces import IObjectEvent
 
@@ -16,12 +16,13 @@
 from plone.app.testing import TEST_USER_NAME
 
 
+@implementer(Interface)
 class DummyEvent(object):
-    implements(Interface)
+    pass
 
 
+@implementer(IObjectEvent)
 class DummyObjectEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index 520aadc..d652129 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -2,7 +2,7 @@
 from email import message_from_string
 from zope.component import getUtility, getMultiAdapter, getSiteManager
 from zope.component.interfaces import IObjectEvent
-from zope.interface import implements
+from zope.interface import implementer
 
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
@@ -20,8 +20,8 @@
 import unittest
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index 1543a85..d3c786f 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -17,8 +17,8 @@
 from plone.app.testing import TEST_USER_ID as default_user
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py
index d92ed54..33b83eb 100644
--- a/plone/app/contentrules/tests/test_action_notify.py
+++ b/plone/app/contentrules/tests/test_action_notify.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -16,8 +16,9 @@
 from Products.statusmessages.adapter import _decodeCookieValue
 
 
+@implementer(Interface)
 class DummyEvent(object):
-    implements(Interface)
+    pass
 
 
 class TestNotifyAction(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index c3d4b37..bd32a9a 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -15,8 +15,8 @@
 from zope.component.interfaces import IObjectEvent
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index dab6c7c..97f8329 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index 8c89d19..8322713 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index 22b4f98..0e83c95 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index 8e08141..7cb0c1c 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index 1e9e26c..07047aa 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj


Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2016-07-09T08:51:04+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/866e17f9cd9a57ea148e7f483263f8041f6b99f5

Merge pull request #20 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/traversal.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/namechooser.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c540052..6204377 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 4.0.10 (2015-11-26)
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index c753e62..a173920 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -2,7 +2,7 @@
 from plone.app.vocabularies.catalog import CatalogSource
 from zope.component import adapts
 from zope.event import notify
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.lifecycleevent import ObjectCopiedEvent
 from zope import schema
 
@@ -32,10 +32,10 @@ class ICopyAction(Interface):
                                   source=CatalogSource(is_folderish=True))
 
 
+@implementer(ICopyAction, IRuleElementData)
 class CopyAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(ICopyAction, IRuleElementData)
 
     target_folder = ''
     element = 'plone.actions.Copy'
@@ -46,10 +46,10 @@ def summary(self):
                  mapping=dict(folder=self.target_folder))
 
 
+@implementer(IExecutable)
 class CopyActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, ICopyAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index febeffe..9a14caa 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 import transaction
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts
 
 from Acquisition import aq_inner, aq_parent
@@ -18,19 +18,19 @@ class IDeleteAction(Interface):
     """
 
 
+@implementer(IDeleteAction, IRuleElementData)
 class DeleteAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(IDeleteAction, IRuleElementData)
 
     element = 'plone.actions.Delete'
     summary = _(u"Delete object")
 
 
+@implementer(IExecutable)
 class DeleteActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IDeleteAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index f023365..e7ffea5 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -2,7 +2,7 @@
 
 from zope.component import adapts
 from zope.component.interfaces import IObjectEvent
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -41,12 +41,12 @@ class ILoggerAction(Interface):
                   default=u"Caught &e at &c by &u"))
 
 
+@implementer(ILoggerAction, IRuleElementData)
 class LoggerAction(SimpleItem):
     """The actual persistent implementation of the logger action element.
 
     Note that we must mix in Explicit to keep Zope 2 security happy.
     """
-    implements(ILoggerAction, IRuleElementData)
 
     targetLogger = ''
     loggingLevel = ''
@@ -59,12 +59,12 @@ def summary(self):
         return _(u"Log message ${message}", mapping=dict(message=self.message))
 
 
+@implementer(IExecutable)
 class LoggerActionExecutor(object):
     """The executor for this action.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, ILoggerAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index 53a7764..94d4208 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -8,7 +8,7 @@
 from zope.component import adapts
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 from zope import schema
 from zope.globalrequest import getRequest
 
@@ -53,11 +53,11 @@ class IMailAction(Interface):
                           required=True)
 
 
+@implementer(IMailAction, IRuleElementData)
 class MailAction(SimpleItem):
     """
     The implementation of the action defined before
     """
-    implements(IMailAction, IRuleElementData)
 
     subject = u''
     source = u''
@@ -73,10 +73,10 @@ def summary(self):
                  mapping=dict(recipients=self.recipients))
 
 
+@implementer(IExecutable)
 class MailActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IMailAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index e9e1f89..e5ffb16 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -3,7 +3,7 @@
 from zope.component import adapts
 from zope.container.contained import notifyContainerModified
 from zope.event import notify
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.lifecycleevent import ObjectMovedEvent
 from zope import schema
 
@@ -33,10 +33,10 @@ class IMoveAction(Interface):
                                   source=CatalogSource(is_folderish=True))
 
 
+@implementer(IMoveAction, IRuleElementData)
 class MoveAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(IMoveAction, IRuleElementData)
 
     target_folder = ''
     element = 'plone.actions.Move'
@@ -46,10 +46,10 @@ def summary(self):
         return _(u"Move to folder ${folder}", mapping=dict(folder=self.target_folder))
 
 
+@implementer(IExecutable)
 class MoveActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IMoveAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index aafb41b..0a43443 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -29,10 +29,10 @@ class INotifyAction(Interface):
                                  default="info")
 
 
+@implementer(INotifyAction, IRuleElementData)
 class NotifyAction(SimpleItem):
     """The actual persistent implementation of the notify action element.
     """
-    implements(INotifyAction, IRuleElementData)
 
     message = ''
     message_type = ''
@@ -44,12 +44,12 @@ def summary(self):
         return _(u"Notify with message ${message}", mapping=dict(message=self.message))
 
 
+@implementer(IExecutable)
 class NotifyActionExecutor(object):
     """The executor for this action.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, INotifyAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 163243e..9a42ccc 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -1,5 +1,5 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts
 from zope import schema
 
@@ -26,10 +26,10 @@ class IWorkflowAction(Interface):
                                vocabulary='plone.app.vocabularies.WorkflowTransitions')
 
 
+@implementer(IWorkflowAction, IRuleElementData)
 class WorkflowAction(SimpleItem):
     """The actual persistent implementation of the action element.
     """
-    implements(IWorkflowAction, IRuleElementData)
 
     transition = ''
     element = "plone.actions.Workflow"
@@ -39,10 +39,10 @@ def summary(self):
         return _(u"Execute transition ${transition}", mapping=dict(transition=self.transition))
 
 
+@implementer(IExecutable)
 class WorkflowActionExecutor(object):
     """The executor for this action.
     """
-    implements(IExecutable)
     adapts(Interface, IWorkflowAction, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py
index cde7f5d..ea61a35 100644
--- a/plone/app/contentrules/browser/adding.py
+++ b/plone/app/contentrules/browser/adding.py
@@ -1,6 +1,6 @@
 from warnings import warn
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getMultiAdapter, getUtility
 from zope.container.interfaces import INameChooser
 
@@ -17,10 +17,9 @@
 from plone.app.contentrules.browser.interfaces import IRuleActionAdding
 
 
+@implementer(IRuleAdding)
 class RuleAdding(SimpleItem, BrowserView):
 
-    implements(IRuleAdding)
-
     context = None
     request = None
     contentName = None
@@ -103,10 +102,9 @@ def hasCustomAddView(self):
         return None
 
 
+@implementer(IRuleConditionAdding)
 class RuleConditionAdding(RuleElementAdding):
 
-    implements(IRuleConditionAdding)
-
     # This is necessary so that context.absolute_url() works properly on the
     # add form, which in turn fixes the <base /> URL
     id = '+condition'
@@ -118,10 +116,9 @@ def add(self, content):
         rule.conditions.append(content)
 
 
+@implementer(IRuleActionAdding)
 class RuleActionAdding(RuleElementAdding):
 
-    implements(IRuleActionAdding)
-
     # This is necessary so that context.absolute_url() works properly on the
     # add form, which in turn fixes the <base /> URL
     id = '+action'
diff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py
index a248d81..2cfc3a2 100644
--- a/plone/app/contentrules/browser/controlpanel.py
+++ b/plone/app/contentrules/browser/controlpanel.py
@@ -1,6 +1,6 @@
 from zope.component import getMultiAdapter
 from AccessControl import Unauthorized
-from zope.interface import implements
+from zope.interface import implementer
 from zope.i18n import translate
 from zope.component import getUtility
 from zope.schema.interfaces import IVocabularyFactory
@@ -20,10 +20,10 @@ def get_trigger_class(trigger):
     return "trigger-%s" % trigger.__identifier__.split('.')[-1].lower()
 
 
+@implementer(IContentRulesControlPanel)
 class ContentRulesControlPanel(BrowserView):
     """Manage rules in a the global rules container
     """
-    implements(IContentRulesControlPanel)
     template = ViewPageTemplateFile('templates/controlpanel.pt')
 
     def __call__(self):
diff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py
index 2030854..2c6f38c 100644
--- a/plone/app/contentrules/browser/formhelper.py
+++ b/plone/app/contentrules/browser/formhelper.py
@@ -2,7 +2,7 @@
 from plone.z3cform import layout
 from zope.component import getMultiAdapter
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 import zope.lifecycleevent
 
 from Acquisition import aq_parent, aq_inner
@@ -15,6 +15,7 @@
 from plone.autoform.form import AutoExtensibleForm
 
 
+@implementer(IContentRulesForm)
 class AddForm(AutoExtensibleForm, form.AddForm):
     """A base add form for content rule.
 
@@ -34,8 +35,6 @@ def create(self, data):
         def create(self):
             return MyAssignment()
     """
-
-    implements(IContentRulesForm)
     ignoreContext = True
 
     def updateActions(self):
@@ -101,12 +100,11 @@ def create(self):
         raise NotImplementedError("concrete classes must implement create()")
 
 
+@implementer(IContentRulesForm)
 class EditForm(AutoExtensibleForm, form.EditForm):
     """An edit form for rule elements.
     """
 
-    implements(IContentRulesForm)
-
     def updateActions(self):
         super(EditForm, self).updateActions()
         self.actions['save'].addClass("context")
diff --git a/plone/app/contentrules/browser/traversal.py b/plone/app/contentrules/browser/traversal.py
index 6ac5f9a..c62c92c 100644
--- a/plone/app/contentrules/browser/traversal.py
+++ b/plone/app/contentrules/browser/traversal.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts, getUtility
 
 from zope.traversing.interfaces import ITraversable
@@ -10,13 +10,13 @@
 from Products.CMFCore.interfaces import ISiteRoot
 
 
+@implementer(ITraversable)
 class RuleNamespace(object):
     """Used to traverse to a rule.
 
     Traversing to portal/++rule++foo will retrieve the rule with id 'foo'
     stored in context, acquisition-wrapped.
     """
-    implements(ITraversable)
     adapts(ISiteRoot, IBrowserRequest)
 
     def __init__(self, context, request=None):
@@ -28,13 +28,13 @@ def traverse(self, name, ignore):
         return manager[name]
 
 
+@implementer(ITraversable)
 class RuleConditionNamespace(object):
     """Used to traverse to a rule condition
 
     Traversing to portal/++rule++foo/++condition++1 will retrieve the second
     condition of the rule rule with id 'foo', acquisition-wrapped.
     """
-    implements(ITraversable)
     adapts(IRule, IBrowserRequest)
 
     def __init__(self, context, request=None):
@@ -49,13 +49,13 @@ def traverse(self, name, ignore):
         return condition
 
 
+@implementer(ITraversable)
 class RuleActionNamespace(object):
     """Used to traverse to a rule condition
 
     Traversing to portal/++rule++foo/++action++1 will retrieve the second
     condition of the rule rule with id 'foo', acquisition-wrapped.
     """
-    implements(ITraversable)
     adapts(IRule, IBrowserRequest)
 
     def __init__(self, context, request=None):
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index 29e4856..d49dc7a 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from z3c.form import form
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -26,12 +26,12 @@ class IFileExtensionCondition(Interface):
                                      required=True)
 
 
+@implementer(IFileExtensionCondition, IRuleElementData)
 class FileExtensionCondition(SimpleItem):
     """The actual persistent implementation of the file extension condition.
 
     Note that we must mix in Explicit to keep Zope 2 security happy.
     """
-    implements(IFileExtensionCondition, IRuleElementData)
 
     file_extension = u''
     element = "plone.conditions.FileExtension"
@@ -41,12 +41,12 @@ def summary(self):
         return _(u"File extension is ${ext}", mapping=dict(ext=self.file_extension))
 
 
+@implementer(IExecutable)
 class FileExtensionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IFileExtensionCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index 310a56c..df4e41d 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from z3c.form import form
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -24,12 +24,12 @@ class IGroupCondition(Interface):
                              value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups"))
 
 
+@implementer(IGroupCondition, IRuleElementData)
 class GroupCondition(SimpleItem):
     """The actual persistent implementation of the group condition element.
 
     Note that we must mix in SimpleItem to keep Zope 2 security happy.
     """
-    implements(IGroupCondition, IRuleElementData)
 
     group_names = []
     element = "plone.conditions.Group"
@@ -39,12 +39,12 @@ def summary(self):
         return _(u"Groups are: ${names}", mapping=dict(names=", ".join(self.group_names)))
 
 
+@implementer(IExecutable)
 class GroupConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IGroupCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index 48e388a..2ce9dbb 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 from zope.site.hooks import getSite
@@ -29,12 +29,12 @@ class IPortalTypeCondition(Interface):
         value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
 
 
+@implementer(IPortalTypeCondition, IRuleElementData)
 class PortalTypeCondition(SimpleItem):
     """The actual persistent implementation of the portal type condition element.
 
     Note that we must mix in SimpleItem to keep Zope 2 security happy.
     """
-    implements(IPortalTypeCondition, IRuleElementData)
 
     check_types = []
     element = "plone.conditions.PortalType"
@@ -52,12 +52,12 @@ def summary(self):
         return _(u"Content types are: ${names}", mapping=dict(names=", ".join(titles)))
 
 
+@implementer(IExecutable)
 class PortalTypeConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IPortalTypeCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index 8fbaca4..8ef8d80 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 
@@ -25,12 +25,12 @@ class IRoleCondition(Interface):
                             value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"))
 
 
+@implementer(IRoleCondition, IRuleElementData)
 class RoleCondition(SimpleItem):
     """The actual persistent implementation of the role condition element.
 
     Note that we must mix in SimpleItem to keep Zope 2 security happy.
     """
-    implements(IRoleCondition, IRuleElementData)
 
     role_names = []
     element = "plone.conditions.Role"
@@ -40,12 +40,12 @@ def summary(self):
         return _(u"Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))
 
 
+@implementer(IExecutable)
 class RoleConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, IRoleCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index e46ac04..a031bfc 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 
@@ -26,10 +26,10 @@ class ITalesExpressionCondition(Interface):
         required=True)
 
 
+@implementer(ITalesExpressionCondition, IRuleElementData)
 class TalesExpressionCondition(SimpleItem):
     """The actual persistent implementation of the TALES expression condition element.
     """
-    implements(ITalesExpressionCondition, IRuleElementData)
 
     tales_expression = ''
     element = "plone.conditions.TalesExpression"
@@ -40,12 +40,12 @@ def summary(self):
                  mapping={'tales_expression': self.tales_expression})
 
 
+@implementer(IExecutable)
 class TalesExpressionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    implements(IExecutable)
     adapts(Interface, ITalesExpressionCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index 1538d8a..3f71c8c 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -1,6 +1,6 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from z3c.form import form
 from zope import schema
 
@@ -25,10 +25,10 @@ class IWorkflowStateCondition(Interface):
         value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
 
 
+@implementer(IWorkflowStateCondition, IRuleElementData)
 class WorkflowStateCondition(SimpleItem):
     """The actual persistent implementation of the workflow state condition element.py.
     """
-    implements(IWorkflowStateCondition, IRuleElementData)
 
     wf_states = []
     element = "plone.conditions.WorkflowState"
@@ -38,10 +38,10 @@ def summary(self):
         return _(u"Workflow states are: ${states}", mapping=dict(states=", ".join(self.wf_states)))
 
 
+@implementer(IExecutable)
 class WorkflowStateConditionExecutor(object):
     """The executor for this condition.
     """
-    implements(IExecutable)
     adapts(Interface, IWorkflowStateCondition, Interface)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index a0b95d7..ceb026d 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -1,7 +1,7 @@
 from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
 from zope.component import adapts
 from z3c.form import form
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope import schema
 
 from OFS.SimpleItem import SimpleItem
@@ -25,10 +25,10 @@ class IWorkflowTransitionCondition(Interface):
         value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
 
 
+@implementer(IWorkflowTransitionCondition, IRuleElementData)
 class WorkflowTransitionCondition(SimpleItem):
     """The actual persistent implementation of the workflow transition condition element.
     """
-    implements(IWorkflowTransitionCondition, IRuleElementData)
 
     wf_transitions = []
     element = "plone.conditions.WorkflowTransition"
@@ -39,10 +39,10 @@ def summary(self):
                  mapping=dict(transitions=", ".join(self.wf_transitions)))
 
 
+@implementer(IExecutable)
 class WorkflowTransitionConditionExecutor(object):
     """The executor for this condition.
     """
-    implements(IExecutable)
     adapts(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)
 
     def __init__(self, context, element, event):
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index c08592b..a67c8a6 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -5,7 +5,7 @@
 from zope.component import queryUtility
 from zope.container.interfaces import INameChooser
 from zope.interface import Interface
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema.interfaces import IField
 from zope.schema.interfaces import ICollection
 from zope.schema.interfaces import IFromUnicode
@@ -36,11 +36,10 @@ def as_bool(string, default=False):
     return string.lower() == 'true'
 
 
+@implementer(IRuleElementExportImportHandler)
 class PropertyRuleElementExportImportHandler(object):
     """Import portlet assignment settings based on zope.schema properties
     """
-
-    implements(IRuleElementExportImportHandler)
     adapts(Interface)
 
     def __init__(self, element):
@@ -159,10 +158,10 @@ def field_typecast(self, field, value):
         return value
 
 
+@implementer(IBody)
 class RulesXMLAdapter(XMLAdapterBase):
     """In- and exporter for a local portlet configuration
     """
-    implements(IBody)
     adapts(ISiteRoot, ISetupEnviron)
 
     name = 'contentrules'
diff --git a/plone/app/contentrules/namechooser.py b/plone/app/contentrules/namechooser.py
index fc2978b..1fe0ddf 100644
--- a/plone/app/contentrules/namechooser.py
+++ b/plone/app/contentrules/namechooser.py
@@ -1,16 +1,15 @@
 from zope.container.contained import NameChooser
 from zope.container.interfaces import INameChooser
-from zope.interface import implements
+from zope.interface import implementer
 
 ATTEMPTS = 100
 
 
+@implementer(INameChooser)
 class RuleNameChooser(NameChooser):
     """A name chooser for content rules.
     """
 
-    implements(INameChooser)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py
index 2e00291..57e41e3 100644
--- a/plone/app/contentrules/tests/dummy.py
+++ b/plone/app/contentrules/tests/dummy.py
@@ -1,24 +1,24 @@
 from OFS.SimpleItem import SimpleItem
-from zope.interface import implements
+from zope.interface import implementer
 from plone.contentrules.rule.interfaces import IRuleElementData
 from zope.component.interfaces import IObjectEvent
 from plone.uuid.interfaces import IAttributeUUID
 
 
+@implementer(IRuleElementData)
 class DummyCondition(SimpleItem):
-    implements(IRuleElementData)
     element = "dummy.condition"
     summary = "Dummy condition"
 
 
+@implementer(IRuleElementData)
 class DummyAction(SimpleItem):
-    implements(IRuleElementData)
     element = "dummy.action"
     summary = "Dummy action"
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
@@ -30,5 +30,6 @@ def __init__(self, name='dummy'):
         self.__name__ = name
 
 
+@implementer(IAttributeUUID)
 class DummyNonArchetypesContext(object):
-    implements(IAttributeUUID)
+    pass
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index 38c0c74..e1d4708 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -16,8 +16,8 @@
 from zope.component.interfaces import IObjectEvent
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py
index 6d2f608..1dcc82e 100644
--- a/plone/app/contentrules/tests/test_action_delete.py
+++ b/plone/app/contentrules/tests/test_action_delete.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -14,8 +14,8 @@
 from zope.component.interfaces import IObjectEvent
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 8695df7..61682c3 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import getUtility, getMultiAdapter
 from zope.component.interfaces import IObjectEvent
 
@@ -16,12 +16,13 @@
 from plone.app.testing import TEST_USER_NAME
 
 
+@implementer(Interface)
 class DummyEvent(object):
-    implements(Interface)
+    pass
 
 
+@implementer(IObjectEvent)
 class DummyObjectEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index 520aadc..d652129 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -2,7 +2,7 @@
 from email import message_from_string
 from zope.component import getUtility, getMultiAdapter, getSiteManager
 from zope.component.interfaces import IObjectEvent
-from zope.interface import implements
+from zope.interface import implementer
 
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
@@ -20,8 +20,8 @@
 import unittest
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index 1543a85..d3c786f 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -17,8 +17,8 @@
 from plone.app.testing import TEST_USER_ID as default_user
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py
index d92ed54..33b83eb 100644
--- a/plone/app/contentrules/tests/test_action_notify.py
+++ b/plone/app/contentrules/tests/test_action_notify.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -16,8 +16,9 @@
 from Products.statusmessages.adapter import _decodeCookieValue
 
 
+@implementer(Interface)
 class DummyEvent(object):
-    implements(Interface)
+    pass
 
 
 class TestNotifyAction(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index c3d4b37..bd32a9a 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleStorage
@@ -15,8 +15,8 @@
 from zope.component.interfaces import IObjectEvent
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, object):
         self.object = object
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index dab6c7c..97f8329 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index 8c89d19..8322713 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index 22b4f98..0e83c95 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index 8e08141..7cb0c1c 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index 1e9e26c..07047aa 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import getUtility, getMultiAdapter
 
 from zope.component.interfaces import IObjectEvent
@@ -15,8 +15,8 @@
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 
 
+@implementer(IObjectEvent)
 class DummyEvent(object):
-    implements(IObjectEvent)
 
     def __init__(self, obj):
         self.object = obj


