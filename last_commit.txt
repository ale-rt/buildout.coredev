Repository: plone.behavior


Branch: refs/heads/master
Date: 2016-10-23T12:22:02-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.behavior/commit/49be4cd15534f356ead88ac15a441bc787047039

make tests pass on python 3

Files changed:
A .travis.yml
A tox.ini
M .gitignore
M plone/behavior/annotation.rst
M plone/behavior/behaviors.rst
M plone/behavior/directives.rst
M plone/behavior/registration.py
M plone/behavior/tests.py
M setup.py

diff --git a/.gitignore b/.gitignore
index c2ea8a9..6e4a200 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
 *.egg-info
 *.pyc
 *.pyo
+.tox
 build
 dist
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..55bc622
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.3
+    - 3.4
+    - 3.5
+install:
+    - pip install tox-travis
+script:
+    - tox
+notifications:
+    email: false
diff --git a/plone/behavior/annotation.rst b/plone/behavior/annotation.rst
index c195205..b6a40c7 100644
--- a/plone/behavior/annotation.rst
+++ b/plone/behavior/annotation.rst
@@ -11,7 +11,7 @@ We have created such an interface in ``plone.behavior.tests``, called
 
 Let's show how this may be registered in ZCML::
 
-    >>> configuration = """\
+    >>> configuration = u"""\
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      xmlns:plone="http://namespaces.plone.org/plone"
@@ -30,7 +30,10 @@ Let's show how this may be registered in ZCML::
     ... </configure>
     ... """
 
-    >>> from StringIO import StringIO
+    >>> try:
+    ...     from io import StringIO
+    ... except ImportError:
+    ...     from StringIO import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
diff --git a/plone/behavior/behaviors.rst b/plone/behavior/behaviors.rst
index cddfa6f..34b0542 100644
--- a/plone/behavior/behaviors.rst
+++ b/plone/behavior/behaviors.rst
@@ -52,7 +52,7 @@ Example
 As an example, let's create a basic behavior that's described by the
 interface ILockingSupport::
 
-    >>> from zope.interface import implements
+    >>> from zope.interface import implementer
     >>> from zope.interface import Interface
 
     >>> class ILockingSupport(Interface):
@@ -62,16 +62,16 @@ interface ILockingSupport::
     ...     def unlock():
     ...         "Unlock the context"
 
-    >>> class LockingSupport(object):
-    ...     implements(ILockingSupport)
+    >>> @implementer(ILockingSupport)
+    ... class LockingSupport(object):
     ...     def __init__(self, context):
     ...         self.context = context
     ...
     ...     def lock(self):
-    ...         print 'Locked', repr(self.context)
+    ...         print('Locked', repr(self.context))
     ...
     ...     def unlock(self):
-    ...         print 'Unlocked', repr(self.context)
+    ...         print('Unlocked', repr(self.context))
 
 The availability of this new behavior is indicated by registering a named
 utility providing IBehavior. There is a default implementation of this
@@ -107,7 +107,6 @@ class.
     >>> from plone.behavior.factory import BehaviorAdapterFactory
     >>> factory = BehaviorAdapterFactory(registration)
 
-    >>> from zope.interface import implements
     >>> from zope.component import provideAdapter
     >>> provideAdapter(factory=factory, adapts=(Interface,), provides=ILockingSupport)
 
@@ -126,8 +125,8 @@ trying to adapt::
 
     >>> class IContextType(Interface): pass
 
-    >>> class SomeContext(object):
-    ...     implements(IContextType)
+    >>> @implementer(IContextType)
+    ... class SomeContext(object):
     ...     def __repr__(self):
     ...         return "<sample context>"
 
@@ -156,8 +155,8 @@ The adapter can thus be registered like this::
     >>> from plone.behavior.interfaces import IBehavior, IBehaviorAssignable
     >>> from zope.component import adapts, getUtility
 
-    >>> class TestingBehaviorAssignable(object):
-    ...     implements(IBehaviorAssignable)
+    >>> @implementer(IBehaviorAssignable)
+    ... class TestingBehaviorAssignable(object):
     ...     adapts(Interface)
     ...
     ...     def __init__(self, context):
@@ -257,8 +256,8 @@ as well.
     ...     tags = schema.List(title=u"Tags on this object",
     ...                        value_type=schema.TextLine(title=u"Tag"))
 
-    >>> class Tagging(object):
-    ...     implements(ITagging)
+    >>> @implementer(ITagging)
+    ... class Tagging(object):
     ...     def __init__(self, context):
     ...         self.context = context
     ...
diff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst
index 98276bc..c818174 100644
--- a/plone/behavior/directives.rst
+++ b/plone/behavior/directives.rst
@@ -25,7 +25,7 @@ plone.behavior.tests:
 
 ::
 
-    >>> configuration = """\
+    >>> configuration = u"""\
     ... <configure
     ...      package="plone.behavior"
     ...      xmlns="http://namespaces.zope.org/zope"
@@ -104,7 +104,10 @@ Let's first verify that we don't have the dummy data registered already:
 We should now be able to load the sample configuration, which also includes the
 meta.zcml file from plone.behavior:
 
-    >>> from StringIO import StringIO
+    >>> try:
+    ...     from io import StringIO
+    ... except ImportError:
+    ...     from StringIO import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
@@ -287,7 +290,7 @@ declaration on the factory.
     >>> failed = False
     >>> try:
     ...     dummy = getUtility(IBehavior, name=u"plone.behavior.tests.INameOnlyBehavior")
-    ... except ComponentLookupError, e:
+    ... except ComponentLookupError as e:
     ...     failed = True
     >>> failed
     True
diff --git a/plone/behavior/registration.py b/plone/behavior/registration.py
index 67cb517..df24ab3 100644
--- a/plone/behavior/registration.py
+++ b/plone/behavior/registration.py
@@ -4,8 +4,14 @@
 from zope.component import getUtility
 from zope.interface import implementer
 
+import sys
 import textwrap
 
+if sys.version_info[0] >= 3:
+    text_type = str
+else:
+    text_type = unicode
+
 
 REGISTRATION_REPR = """\
 <{class} {name} at {id}
@@ -42,7 +48,7 @@ def __repr__(self):
             'name': self.name or '(unique name not set)',
             'identifier': self.interface.__identifier__,
             'marker': marker_info,
-            'factory': unicode(self.factory),
+            'factory': text_type(self.factory),
             'title': self.title or '(no title)',
             'description': textwrap.fill(
                 self.description or '(no description)',
diff --git a/plone/behavior/tests.py b/plone/behavior/tests.py
index a114146..c01961b 100644
--- a/plone/behavior/tests.py
+++ b/plone/behavior/tests.py
@@ -1,10 +1,13 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from zope import schema
 from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
 import doctest
+import re
+import sys
 import unittest
 import zope.component.testing
 
@@ -76,21 +79,38 @@ class IMarkerAndAdapterMarker(Interface):
     pass
 
 
+class Py23DocChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if sys.version_info[0] > 2:
+            want = re.sub("u'(.*?)'", "'\\1'", want)
+            want = re.sub('u"(.*?)"', '"\\1"', want)
+            got = re.sub(
+                'plone.behavior.registration.BehaviorRegistrationNotFound',
+                'BehaviorRegistrationNotFound', got)
+        return doctest.OutputChecker.check_output(self, want, got, optionflags)
+
+
 def test_suite():
     return unittest.TestSuite((
 
         doctest.DocFileSuite(
             'behaviors.rst',
-            tearDown=zope.component.testing.tearDown
+            tearDown=zope.component.testing.tearDown,
+            globs={
+                'print_function': print_function,
+            },
+            checker=Py23DocChecker(),
         ),
         doctest.DocFileSuite(
             'directives.rst',
             setUp=zope.component.testing.setUp,
-            tearDown=zope.component.testing.tearDown
+            tearDown=zope.component.testing.tearDown,
+            checker=Py23DocChecker(),
         ),
         doctest.DocFileSuite(
             'annotation.rst',
             setUp=zope.component.testing.setUp,
-            tearDown=zope.component.testing.tearDown
+            tearDown=zope.component.testing.tearDown,
+            checker=Py23DocChecker(),
         ),
     ))
diff --git a/setup.py b/setup.py
index 92553c5..f8d2745 100644
--- a/setup.py
+++ b/setup.py
@@ -46,7 +46,9 @@
         'zope.schema',
     ],
     extras_require={
-        'test': [],
+        'test': [
+            'zope.lifecycleevent',
+        ],
     },
     entry_points="""
     """,
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..58a7f52
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,10 @@
+[tox]
+envlist =
+    py27,py33,py34,py35
+
+[testenv]
+deps =
+    zope.testrunner
+    .[test]
+commands =
+    zope-testrunner --test-path=. {posargs:-pvc}


Repository: plone.behavior


Branch: refs/heads/master
Date: 2016-10-23T12:24:30-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.behavior/commit/a98dbfee3508920678fc6befe3a9b9c0dee9fef6

declare support

Files changed:
M CHANGES.rst
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e6008f7..fd30e64 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,7 @@ Breaking changes:
 New features:
 
 - *add item here*
+- Support Python 3. [davisagli]
 
 Bug fixes:
 
diff --git a/setup.py b/setup.py
index f8d2745..b86fbd8 100644
--- a/setup.py
+++ b/setup.py
@@ -25,6 +25,7 @@
         "Programming Language :: Python",
         "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.5",
         "Topic :: Software Development :: Libraries :: Python Modules",
         "License :: OSI Approved :: BSD License",
     ],


Repository: plone.behavior


Branch: refs/heads/master
Date: 2016-10-23T22:08:58-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.behavior/commit/002f6360894666e8b47b33c7e41891394b107104

Merge pull request #12 from plone/py3

Support Python 3

Files changed:
A .travis.yml
A tox.ini
M .gitignore
M CHANGES.rst
M plone/behavior/annotation.rst
M plone/behavior/behaviors.rst
M plone/behavior/directives.rst
M plone/behavior/registration.py
M plone/behavior/tests.py
M setup.py

diff --git a/.gitignore b/.gitignore
index c2ea8a9..6e4a200 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
 *.egg-info
 *.pyc
 *.pyo
+.tox
 build
 dist
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..55bc622
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+sudo: false
+python:
+    - 2.7
+    - 3.3
+    - 3.4
+    - 3.5
+install:
+    - pip install tox-travis
+script:
+    - tox
+notifications:
+    email: false
diff --git a/CHANGES.rst b/CHANGES.rst
index e6008f7..fd30e64 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,6 +11,7 @@ Breaking changes:
 New features:
 
 - *add item here*
+- Support Python 3. [davisagli]
 
 Bug fixes:
 
diff --git a/plone/behavior/annotation.rst b/plone/behavior/annotation.rst
index c195205..b6a40c7 100644
--- a/plone/behavior/annotation.rst
+++ b/plone/behavior/annotation.rst
@@ -11,7 +11,7 @@ We have created such an interface in ``plone.behavior.tests``, called
 
 Let's show how this may be registered in ZCML::
 
-    >>> configuration = """\
+    >>> configuration = u"""\
     ... <configure
     ...      xmlns="http://namespaces.zope.org/zope"
     ...      xmlns:plone="http://namespaces.plone.org/plone"
@@ -30,7 +30,10 @@ Let's show how this may be registered in ZCML::
     ... </configure>
     ... """
 
-    >>> from StringIO import StringIO
+    >>> try:
+    ...     from io import StringIO
+    ... except ImportError:
+    ...     from StringIO import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
diff --git a/plone/behavior/behaviors.rst b/plone/behavior/behaviors.rst
index cddfa6f..34b0542 100644
--- a/plone/behavior/behaviors.rst
+++ b/plone/behavior/behaviors.rst
@@ -52,7 +52,7 @@ Example
 As an example, let's create a basic behavior that's described by the
 interface ILockingSupport::
 
-    >>> from zope.interface import implements
+    >>> from zope.interface import implementer
     >>> from zope.interface import Interface
 
     >>> class ILockingSupport(Interface):
@@ -62,16 +62,16 @@ interface ILockingSupport::
     ...     def unlock():
     ...         "Unlock the context"
 
-    >>> class LockingSupport(object):
-    ...     implements(ILockingSupport)
+    >>> @implementer(ILockingSupport)
+    ... class LockingSupport(object):
     ...     def __init__(self, context):
     ...         self.context = context
     ...
     ...     def lock(self):
-    ...         print 'Locked', repr(self.context)
+    ...         print('Locked', repr(self.context))
     ...
     ...     def unlock(self):
-    ...         print 'Unlocked', repr(self.context)
+    ...         print('Unlocked', repr(self.context))
 
 The availability of this new behavior is indicated by registering a named
 utility providing IBehavior. There is a default implementation of this
@@ -107,7 +107,6 @@ class.
     >>> from plone.behavior.factory import BehaviorAdapterFactory
     >>> factory = BehaviorAdapterFactory(registration)
 
-    >>> from zope.interface import implements
     >>> from zope.component import provideAdapter
     >>> provideAdapter(factory=factory, adapts=(Interface,), provides=ILockingSupport)
 
@@ -126,8 +125,8 @@ trying to adapt::
 
     >>> class IContextType(Interface): pass
 
-    >>> class SomeContext(object):
-    ...     implements(IContextType)
+    >>> @implementer(IContextType)
+    ... class SomeContext(object):
     ...     def __repr__(self):
     ...         return "<sample context>"
 
@@ -156,8 +155,8 @@ The adapter can thus be registered like this::
     >>> from plone.behavior.interfaces import IBehavior, IBehaviorAssignable
     >>> from zope.component import adapts, getUtility
 
-    >>> class TestingBehaviorAssignable(object):
-    ...     implements(IBehaviorAssignable)
+    >>> @implementer(IBehaviorAssignable)
+    ... class TestingBehaviorAssignable(object):
     ...     adapts(Interface)
     ...
     ...     def __init__(self, context):
@@ -257,8 +256,8 @@ as well.
     ...     tags = schema.List(title=u"Tags on this object",
     ...                        value_type=schema.TextLine(title=u"Tag"))
 
-    >>> class Tagging(object):
-    ...     implements(ITagging)
+    >>> @implementer(ITagging)
+    ... class Tagging(object):
     ...     def __init__(self, context):
     ...         self.context = context
     ...
diff --git a/plone/behavior/directives.rst b/plone/behavior/directives.rst
index 98276bc..c818174 100644
--- a/plone/behavior/directives.rst
+++ b/plone/behavior/directives.rst
@@ -25,7 +25,7 @@ plone.behavior.tests:
 
 ::
 
-    >>> configuration = """\
+    >>> configuration = u"""\
     ... <configure
     ...      package="plone.behavior"
     ...      xmlns="http://namespaces.zope.org/zope"
@@ -104,7 +104,10 @@ Let's first verify that we don't have the dummy data registered already:
 We should now be able to load the sample configuration, which also includes the
 meta.zcml file from plone.behavior:
 
-    >>> from StringIO import StringIO
+    >>> try:
+    ...     from io import StringIO
+    ... except ImportError:
+    ...     from StringIO import StringIO
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
@@ -287,7 +290,7 @@ declaration on the factory.
     >>> failed = False
     >>> try:
     ...     dummy = getUtility(IBehavior, name=u"plone.behavior.tests.INameOnlyBehavior")
-    ... except ComponentLookupError, e:
+    ... except ComponentLookupError as e:
     ...     failed = True
     >>> failed
     True
diff --git a/plone/behavior/registration.py b/plone/behavior/registration.py
index 67cb517..df24ab3 100644
--- a/plone/behavior/registration.py
+++ b/plone/behavior/registration.py
@@ -4,8 +4,14 @@
 from zope.component import getUtility
 from zope.interface import implementer
 
+import sys
 import textwrap
 
+if sys.version_info[0] >= 3:
+    text_type = str
+else:
+    text_type = unicode
+
 
 REGISTRATION_REPR = """\
 <{class} {name} at {id}
@@ -42,7 +48,7 @@ def __repr__(self):
             'name': self.name or '(unique name not set)',
             'identifier': self.interface.__identifier__,
             'marker': marker_info,
-            'factory': unicode(self.factory),
+            'factory': text_type(self.factory),
             'title': self.title or '(no title)',
             'description': textwrap.fill(
                 self.description or '(no description)',
diff --git a/plone/behavior/tests.py b/plone/behavior/tests.py
index a114146..c01961b 100644
--- a/plone/behavior/tests.py
+++ b/plone/behavior/tests.py
@@ -1,10 +1,13 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 from zope import schema
 from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
 import doctest
+import re
+import sys
 import unittest
 import zope.component.testing
 
@@ -76,21 +79,38 @@ class IMarkerAndAdapterMarker(Interface):
     pass
 
 
+class Py23DocChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if sys.version_info[0] > 2:
+            want = re.sub("u'(.*?)'", "'\\1'", want)
+            want = re.sub('u"(.*?)"', '"\\1"', want)
+            got = re.sub(
+                'plone.behavior.registration.BehaviorRegistrationNotFound',
+                'BehaviorRegistrationNotFound', got)
+        return doctest.OutputChecker.check_output(self, want, got, optionflags)
+
+
 def test_suite():
     return unittest.TestSuite((
 
         doctest.DocFileSuite(
             'behaviors.rst',
-            tearDown=zope.component.testing.tearDown
+            tearDown=zope.component.testing.tearDown,
+            globs={
+                'print_function': print_function,
+            },
+            checker=Py23DocChecker(),
         ),
         doctest.DocFileSuite(
             'directives.rst',
             setUp=zope.component.testing.setUp,
-            tearDown=zope.component.testing.tearDown
+            tearDown=zope.component.testing.tearDown,
+            checker=Py23DocChecker(),
         ),
         doctest.DocFileSuite(
             'annotation.rst',
             setUp=zope.component.testing.setUp,
-            tearDown=zope.component.testing.tearDown
+            tearDown=zope.component.testing.tearDown,
+            checker=Py23DocChecker(),
         ),
     ))
diff --git a/setup.py b/setup.py
index 92553c5..b86fbd8 100644
--- a/setup.py
+++ b/setup.py
@@ -25,6 +25,7 @@
         "Programming Language :: Python",
         "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.5",
         "Topic :: Software Development :: Libraries :: Python Modules",
         "License :: OSI Approved :: BSD License",
     ],
@@ -46,7 +47,9 @@
         'zope.schema',
     ],
     extras_require={
-        'test': [],
+        'test': [
+            'zope.lifecycleevent',
+        ],
     },
     entry_points="""
     """,
diff --git a/tox.ini b/tox.ini
new file mode 100644
index 0000000..58a7f52
--- /dev/null
+++ b/tox.ini
@@ -0,0 +1,10 @@
+[tox]
+envlist =
+    py27,py33,py34,py35
+
+[testenv]
+deps =
+    zope.testrunner
+    .[test]
+commands =
+    zope-testrunner --test-path=. {posargs:-pvc}


