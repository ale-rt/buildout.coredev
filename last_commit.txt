Repository: Products.Archetypes


Branch: refs/heads/1.10.x
Date: 2016-05-04T13:19:36+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.Archetypes/commit/b9827164238dcdd3545d2a923f52bc37c4d35215

Removed docstrings from some methods to avoid publishing them.

From Products.PloneHotfix20160419.

Files changed:
M CHANGES.rst
M Products/Archetypes/BaseObject.py
M Products/Archetypes/ExtensibleMetadata.py
M Products/Archetypes/TemplateMixin.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4b63373..4c53b80 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Removed docstrings from some methods to avoid publishing them.  From
+  Products.PloneHotfix20160419.  [maurits]
 
 
 1.10.14 (2016-05-02)
diff --git a/Products/Archetypes/BaseObject.py b/Products/Archetypes/BaseObject.py
index fb27ea6..795852f 100644
--- a/Products/Archetypes/BaseObject.py
+++ b/Products/Archetypes/BaseObject.py
@@ -232,12 +232,11 @@ def setId(self, value):
     security.declareProtected(permissions.View, 'Type')
 
     def Type(self):
-        """Dublin Core element - Object type.
-
-        this method is redefined in ExtensibleMetadata but we need this
-        at the object level (i.e. with or without metadata) to interact
-        with the uid catalog.
-        """
+        # Dublin Core element - Object type.
+        #
+        # This method is redefined in ExtensibleMetadata but we need this
+        # at the object level (i.e. with or without metadata) to interact
+        # with the uid catalog.
         if shasattr(self, 'getTypeInfo'):
             ti = self.getTypeInfo()
             if ti is not None:
diff --git a/Products/Archetypes/ExtensibleMetadata.py b/Products/Archetypes/ExtensibleMetadata.py
index 748cf8d..7657064 100644
--- a/Products/Archetypes/ExtensibleMetadata.py
+++ b/Products/Archetypes/ExtensibleMetadata.py
@@ -369,8 +369,7 @@ def CreationDate(self, zone=None):
     security.declareProtected(permissions.View, 'EffectiveDate')
 
     def EffectiveDate(self, zone=None):
-        """ Dublin Core element - date resource becomes effective.
-        """
+        # Dublin Core element - date resource becomes effective.
         if zone is None:
             zone = _zone
         effective = self.getField('effectiveDate').get(self)
@@ -387,8 +386,7 @@ def _effective_date(self):
     security.declareProtected(permissions.View, 'ExpirationDate')
 
     def ExpirationDate(self, zone=None):
-        """Dublin Core element - date resource expires.
-        """
+        # Dublin Core element - date resource expires.
         if zone is None:
             zone = _zone
         expires = self.getField('expirationDate').get(self)
@@ -598,7 +596,7 @@ def ModificationDate(self, zone=None):
     security.declareProtected(permissions.View, 'Type')
 
     def Type(self):
-        """Dublin Core element - Object type"""
+        # Dublin Core element - Object type.
         if hasattr(aq_base(self), 'getTypeInfo'):
             ti = self.getTypeInfo()
             if ti is not None:
diff --git a/Products/Archetypes/TemplateMixin.py b/Products/Archetypes/TemplateMixin.py
index 5b566a3..00e336f 100644
--- a/Products/Archetypes/TemplateMixin.py
+++ b/Products/Archetypes/TemplateMixin.py
@@ -77,8 +77,8 @@ def _voc_templates(self):
     security.declareProtected(permissions.View, 'getLayout')
 
     def getLayout(self, **kw):
-        """Get the current layout or the default layout if the current one is None
-        """
+        # Get the current layout or the default layout if the current one is
+        # None.
         if 'schema' in kw:
             schema = kw['schema']
         else:


Repository: Products.Archetypes


Branch: refs/heads/1.10.x
Date: 2016-05-04T13:19:50+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.Archetypes/commit/70485ac20c3d1c8ae6b0eaa45208256b05851eab

Removed more docstrings.

Files changed:
M Products/Archetypes/ArchetypeTool.py
M Products/Archetypes/BaseContent.py
M Products/Archetypes/BaseFolder.py
M Products/Archetypes/BaseObject.py
M Products/Archetypes/BaseUnit.py
M Products/Archetypes/CatalogMultiplex.py
M Products/Archetypes/ClassGen.py
M Products/Archetypes/ExtensibleMetadata.py
M Products/Archetypes/OrderedBaseFolder.py
M Products/Archetypes/ReferenceEngine.py
M Products/Archetypes/TemplateMixin.py
M Products/Archetypes/UIDCatalog.py
M Products/Archetypes/VariableSchemaSupport.py
M Products/Archetypes/annotations.py
M Products/Archetypes/athistoryaware.py

diff --git a/Products/Archetypes/ArchetypeTool.py b/Products/Archetypes/ArchetypeTool.py
index f76c9f8..90656f1 100644
--- a/Products/Archetypes/ArchetypeTool.py
+++ b/Products/Archetypes/ArchetypeTool.py
@@ -557,10 +557,8 @@ def registerTemplate(self, template, name=None):
     security.declareProtected(permissions.View, 'lookupTemplates')
 
     def lookupTemplates(self, instance_or_portaltype=None):
-        """Lookup templates by giving an instance or a portal_type.
-
-        Returns a DisplayList.
-        """
+        # Lookup templates by giving an instance or a portal_type.
+        # Returns a DisplayList.
         results = []
         if not isinstance(instance_or_portaltype, basestring):
             portal_type = instance_or_portaltype.getTypeInfo().getId()
@@ -581,15 +579,13 @@ def lookupTemplates(self, instance_or_portaltype=None):
     security.declareProtected(permissions.View, 'listTemplates')
 
     def listTemplates(self):
-        """Lists all the templates.
-        """
+        # Lists all the templates.
         return DisplayList(self._registeredTemplates.items()).sortedByValue()
 
     security.declareProtected(permissions.ManagePortal, 'bindTemplate')
 
     def bindTemplate(self, portal_type, templateList):
-        """Creates binding between a type and its associated views.
-        """
+        # Creates binding between a type and its associated views.
         self._templates[portal_type] = templateList
 
     security.declareProtected(permissions.ManagePortal,
@@ -615,8 +611,7 @@ def manage_templates(self, REQUEST=None):
     security.declareProtected(permissions.View, 'typeImplementsInterfaces')
 
     def typeImplementsInterfaces(self, type, interfaces):
-        """Checks if an type uses one of the given interfaces.
-        """
+        # Checks if an type uses one of the given interfaces.
         if isinstance(type, dict) and 'klass' in type:
             type = type['klass']
         for iface in interfaces:
@@ -628,16 +623,14 @@ def typeImplementsInterfaces(self, type, interfaces):
     security.declareProtected(permissions.View, 'isTemplateEnabled')
 
     def isTemplateEnabled(self, type):
-        """Checks if an type uses ITemplateMixin.
-        """
+        # Checks if an type uses ITemplateMixin.
         return self.typeImplementsInterfaces(type, [ITemplateMixin])
 
     security.declareProtected(
         permissions.View, 'listTemplateEnabledPortalTypes')
 
     def listTemplateEnabledPortalTypes(self):
-        """Return a list of portal_types with ITemplateMixin
-        """
+        # Return a list of portal_types with ITemplateMixin
         return self.listPortalTypesWithInterfaces([ITemplateMixin])
 
     security.declareProtected(
@@ -674,8 +667,7 @@ def listPortalTypesWithInterfaces(self, ifaces):
     security.declareProtected(permissions.View, 'listRegisteredTypes')
 
     def listRegisteredTypes(self, inProject=False, portalTypes=False):
-        """Return the list of sorted types.
-        """
+        # Return the list of sorted types.
 
         def type_sort(a, b):
             v = cmp(a['package'], b['package'])
@@ -715,8 +707,7 @@ def getTypeSpec(self, package, type):
     security.declareProtected(permissions.View, 'listTypes')
 
     def listTypes(self, package=None, type=None):
-        """Just the class.
-        """
+        # Just the class.
         if type is None:
             return [t['klass'] for t in listTypes(package)]
         else:
@@ -791,8 +782,7 @@ def manage_installType(self, typeName, package=None,
 
     def getSearchWidgets(self, package=None, type=None,
                          context=None, nosort=None):
-        """Empty widgets for searching.
-        """
+        # Empty widgets for searching.
         return self.getWidgets(package=package, type=type,
                                context=context, mode='search', nosort=nosort)
 
@@ -802,8 +792,7 @@ def getWidgets(self, instance=None,
                    package=None, type=None,
                    context=None, mode='edit',
                    fields=None, schemata=None, nosort=None):
-        """Empty widgets for standalone rendering.
-        """
+        # Empty widgets for standalone rendering.
         widgets = []
         w_keys = {}
         context = context is not None and context or self
@@ -868,8 +857,7 @@ def getWidgets(self, instance=None,
     security.declarePrivate('_rawEnum')
 
     def _rawEnum(self, callback, *args, **kwargs):
-        """Finds all object to check if they are 'referenceable'.
-        """
+        # Finds all object to check if they are 'referenceable'.
         catalog = getToolByName(self, 'portal_catalog')
         brains = catalog(dict(id=[]))
         for b in brains:
@@ -895,8 +883,7 @@ def enum(self, callback, *args, **kwargs):
     security.declareProtected(permissions.View, 'Content')
 
     def Content(self):
-        """Return a list of all the content ids.
-        """
+        # Return a list of all the content ids.
         catalog = getToolByName(self, UID_CATALOG)
         keys = catalog.uniqueValuesFor('UID')
         results = catalog(dict(UID=keys))
@@ -951,8 +938,7 @@ def _index(object, archetype_tool):
     index = manage_reindex
 
     def _listAllTypes(self):
-        """List all types -- either currently known or known to us.
-        """
+        # List all types -- either currently known or known to us.
         allTypes = _types.copy()
         allTypes.update(self._types)
         return allTypes.keys()
@@ -961,10 +947,8 @@ def _listAllTypes(self):
                               'getChangedSchema')
 
     def getChangedSchema(self):
-        """Returns a list of tuples indicating which schema have changed.
-
-        Tuples have the form (schema, changed).
-        """
+        # Returns a list of tuples indicating which schema have changed.
+        # Tuples have the form (schema, changed).
         list = []
         currentTypes = _types
         ourTypes = self._types
@@ -1082,8 +1066,7 @@ def manage_migrate(self, REQUEST=None):
                               'listCatalogs')
 
     def listCatalogs(self):
-        """Show the catalog mapping.
-        """
+        # Show the catalog mapping.
         return self.catalog_map
 
     security.declareProtected(permissions.ManagePortal,
@@ -1107,18 +1090,15 @@ def manage_updateCatalogs(self, REQUEST=None):
                               'setCatalogsByType')
 
     def setCatalogsByType(self, portal_type, catalogList):
-        """ associate catalogList with meta_type. (unfortunally not portal_type).
-
-            catalogList is a list of strings with the ids of the catalogs.
-            Each catalog is has to be a tool, means unique in site root.
-        """
+        # Associate catalogList with meta_type. (unfortunately not portal_type).
+        # catalogList is a list of strings with the ids of the catalogs.
+        # Each catalog is has to be a tool, means unique in site root.
         self.catalog_map[portal_type] = catalogList
 
     security.declareProtected(permissions.View, 'getCatalogsByType')
 
     def getCatalogsByType(self, portal_type):
-        """Return the catalog objects assoicated with a given type.
-        """
+        # Return the catalog objects assoicated with a given type.
         catalogs = []
         catalog_map = getattr(self, 'catalog_map', None)
         if catalog_map is not None:
@@ -1139,8 +1119,7 @@ def getCatalogsByType(self, portal_type):
     security.declareProtected(permissions.View, 'getCatalogsInSite')
 
     def getCatalogsInSite(self):
-        """Return a list of ids for objects implementing ZCatalog.
-        """
+        # Return a list of ids for objects implementing ZCatalog.
         portal = getToolByName(self, 'portal_url').getPortalObject()
         res = []
         for object in portal.objectValues():
@@ -1158,12 +1137,10 @@ def getCatalogsInSite(self):
     security.declareProtected(permissions.View, 'visibleLookup')
 
     def visibleLookup(self, field, vis_key, vis_value='visible'):
-        """Checks the value of a specific key in the field widget's
-        'visible' dictionary.
-
-        Returns True or False so it can be used within a lambda as
-        the predicate for a filterFields call.
-        """
+        # Checks the value of a specific key in the field widget's
+        # 'visible' dictionary.
+        # Returns True or False so it can be used within a lambda as
+        # the predicate for a filterFields call.
         vis_dict = field.widget.visible
         value = ''
         if vis_key in vis_dict:
@@ -1174,8 +1151,7 @@ def visibleLookup(self, field, vis_key, vis_value='visible'):
             return False
 
     def has_graphviz(self):
-        """Runtime check for graphviz, used in condition on tab.
-        """
+        # Runtime check for graphviz, used in condition on tab.
         return HAS_GRAPHVIZ
 
 InitializeClass(ArchetypeTool)
diff --git a/Products/Archetypes/BaseContent.py b/Products/Archetypes/BaseContent.py
index 5fbbaf7..633bfb0 100644
--- a/Products/Archetypes/BaseContent.py
+++ b/Products/Archetypes/BaseContent.py
@@ -56,8 +56,7 @@ def manage_beforeDelete(self, item, container):
         self._v_cp_refs = None
 
     def _notifyOfCopyTo(self, container, op=0):
-        """OFS.CopySupport notify
-        """
+        # OFS.CopySupport notify
         BaseObject._notifyOfCopyTo(self, container, op=op)
         # keep reference info internally when op == 1 (move)
         # because in those cases we need to keep refs
diff --git a/Products/Archetypes/BaseFolder.py b/Products/Archetypes/BaseFolder.py
index 7a31fdd..3195b33 100644
--- a/Products/Archetypes/BaseFolder.py
+++ b/Products/Archetypes/BaseFolder.py
@@ -126,9 +126,8 @@ def manage_delObjects(self, ids=None, REQUEST=None):
                               'listFolderContents')
 
     def listFolderContents(self, contentFilter=None, suppressHiddenFiles=0):
-        """Optionally you can suppress "hidden" files, or files that begin
-        with a dot.
-        """
+        # Optionally you can suppress "hidden" files, or files that begin
+        # with a dot.
         contents = PortalFolder.listFolderContents(
             self, contentFilter=contentFilter)
         if suppressHiddenFiles:
@@ -141,25 +140,24 @@ def listFolderContents(self, contentFilter=None, suppressHiddenFiles=0):
 
     def folderlistingFolderContents(self, contentFilter=None,
                                     suppressHiddenFiles=0):
-        """Calls listFolderContents in protected only by ACI so that
-        folder_listing can work without the List folder contents permission.
-        """
+        # Calls listFolderContents in protected only by ACI so that
+        # folder_listing can work without the List folder contents permission.
         return self.listFolderContents(contentFilter=contentFilter,
                                        suppressHiddenFiles=suppressHiddenFiles)
 
     security.declareProtected(permissions.View, 'Title')
 
     def Title(self, **kwargs):
-        """We have to override Title here to handle arbitrary arguments since
-        PortalFolder defines it."""
+        # We have to override Title here to handle arbitrary arguments since
+        # PortalFolder defines it.
         return self.getField('title').get(self, **kwargs)
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'setTitle')
 
     def setTitle(self, value, **kwargs):
-        """We have to override setTitle here to handle arbitrary
-        arguments since PortalFolder defines it."""
+        # We have to override setTitle here to handle arbitrary
+        # arguments since PortalFolder defines it.
         self.getField('title').set(self, value, **kwargs)
 
     def __getitem__(self, key):
@@ -232,8 +230,7 @@ def MKCOL_handler(self, id, REQUEST=None, RESPONSE=None):
     security.declarePrivate('manage_afterMKCOL')
 
     def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
-        """After MKCOL handler.
-        """
+        # After MKCOL handler.
         pass
 
     security.declareProtected(permissions.ModifyPortalContent, 'PUT')
@@ -269,16 +266,16 @@ def __init__(self, oid, **kwargs):
                               'Description')
 
     def Description(self, **kwargs):
-        """We have to override Description here to handle arbitrary
-        arguments since PortalFolder defines it."""
+        # We have to override Description here to handle arbitrary
+        # arguments since PortalFolder defines it.
         return self.getField('description').get(self, **kwargs)
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'setDescription')
 
     def setDescription(self, value, **kwargs):
-        """We have to override setDescription here to handle arbitrary
-        arguments since PortalFolder defines it."""
+        # We have to override setDescription here to handle arbitrary
+        # arguments since PortalFolder defines it.
         self.getField('description').set(self, value, **kwargs)
 
 InitializeClass(BaseFolder)
diff --git a/Products/Archetypes/BaseObject.py b/Products/Archetypes/BaseObject.py
index 795852f..20d4f0f 100644
--- a/Products/Archetypes/BaseObject.py
+++ b/Products/Archetypes/BaseObject.py
@@ -139,8 +139,7 @@ def __init__(self, oid, **kwargs):
                               'initializeArchetype')
 
     def initializeArchetype(self, **kwargs):
-        """Called by the generated add* factory in types tool.
-        """
+        # Called by the generated add* factory in types tool.
         try:
             self.initializeLayers()
             self.markCreationFlag()
@@ -198,15 +197,13 @@ def title_or_id(self):
     security.declareProtected(permissions.View, 'getId')
 
     def getId(self):
-        """Gets the object id.
-        """
+        # Gets the object id.
         return self.id
 
     security.declareProtected(permissions.ModifyPortalContent, 'setId')
 
     def setId(self, value):
-        """Sets the object id.
-        """
+        # Sets the object id.
         # avoid CopyError in OFS.CopySupport.manage_renameObject(),
         # see http://dev.plone.org/ticket/8338
         value = value.strip()
@@ -246,32 +243,27 @@ def Type(self):
     security.declareProtected(permissions.View, 'getField')
 
     def getField(self, key, wrapped=False):
-        """Returns a field object.
-        """
+        # Returns a field object.
         return self.Schema().get(key)
 
     security.declareProtected(permissions.View, 'getWrappedField')
 
     def getWrappedField(self, key):
-        """Gets a field by id which is explicitly wrapped.
-
-        XXX Maybe we should subclass field from Acquisition.Explicit?
-        """
+        # Gets a field by id which is explicitly wrapped.
+        # XXX Maybe we should subclass field from Acquisition.Explicit?
         return ExplicitAcquisitionWrapper(self.getField(key), self)
 
     security.declareProtected(permissions.View, 'getDefault')
 
     def getDefault(self, field):
-        """Return the default value of a field.
-        """
+        # Return the default value of a field.
         field = self.getField(field)
         return field.getDefault(self)
 
     security.declareProtected(permissions.View, 'isBinary')
 
     def isBinary(self, key):
-        """Return wether a field contains binary data.
-        """
+        # Return wether a field contains binary data.
         field = self.getField(key)
         if IFileField.providedBy(field):
             value = field.getBaseUnit(self)
@@ -286,16 +278,14 @@ def isBinary(self, key):
     security.declareProtected(permissions.View, 'isTransformable')
 
     def isTransformable(self, name):
-        """Returns wether a field is transformable.
-        """
+        # Returns wether a field is transformable.
         field = self.getField(name)
         return isinstance(field, TextField) or not self.isBinary(name)
 
     security.declareProtected(permissions.View, 'widget')
 
     def widget(self, field_name, mode="view", field=None, **kwargs):
-        """Returns the rendered widget.
-        """
+        # Returns the rendered widget.
         if field is None:
             field = self.Schema()[field_name]
         widget = field.widget
@@ -305,8 +295,7 @@ def widget(self, field_name, mode="view", field=None, **kwargs):
     security.declareProtected(permissions.View, 'getFilename')
 
     def getFilename(self, key=None):
-        """Returns the filename from a field.
-        """
+        # Returns the filename from a field.
         value = None
 
         if key is None:
@@ -322,8 +311,7 @@ def getFilename(self, key=None):
     security.declareProtected(permissions.View, 'getContentType')
 
     def getContentType(self, key=None):
-        """Returns the content type from a field.
-        """
+        # Returns the content type from a field.
         value = 'text/plain'
 
         if key is None:
@@ -350,8 +338,7 @@ def getContentType(self, key=None):
                               'setContentType')
 
     def setContentType(self, value, key=None):
-        """Sets the content type of a field.
-        """
+        # Sets the content type of a field.
         if key is None:
             field = self.getPrimaryField()
         else:
@@ -363,8 +350,7 @@ def setContentType(self, value, key=None):
     security.declareProtected(permissions.ModifyPortalContent, 'setFilename')
 
     def setFilename(self, value, key=None):
-        """Sets the filename of a field.
-        """
+        # Sets the filename of a field.
         if key is None:
             field = self.getPrimaryField()
         else:
@@ -376,9 +362,8 @@ def setFilename(self, value, key=None):
     security.declareProtected(permissions.View, 'getPrimaryField')
 
     def getPrimaryField(self):
-        """The primary field is some object that responds to
-        PUT/manage_FTPget events.
-        """
+        # The primary field is some object that responds to
+        # PUT/manage_FTPget events.
         fields = self.Schema().filterFields(primary=1)
         if fields:
             return fields[0]
@@ -387,8 +372,7 @@ def getPrimaryField(self):
     security.declareProtected(permissions.View, 'get_portal_metadata')
 
     def get_portal_metadata(self, field):
-        """Returns the portal_metadata for a field.
-        """
+        # Returns the portal_metadata for a field.
         pmt = getToolByName(self, 'portal_metadata')
         policy = None
         try:
@@ -410,8 +394,7 @@ def get_portal_metadata(self, field):
     security.declareProtected(permissions.View, 'Vocabulary')
 
     def Vocabulary(self, key):
-        """Returns the vocabulary for a specified field.
-        """
+        # Returns the vocabulary for a specified field.
         vocab, enforce = None, 0
         field = self.getField(key)
         if field:
@@ -458,15 +441,13 @@ def __getitem__(self, key):
     security.declarePrivate('setDefaults')
 
     def setDefaults(self):
-        """Sets the field values to the default values.
-        """
+        # Sets the field values to the default values.
         self.Schema().setDefaults(self)
 
     security.declareProtected(permissions.ModifyPortalContent, 'update')
 
     def update(self, **kwargs):
-        """Changes the values of the field and reindex the object.
-        """
+        # Changes the values of the field and reindex the object.
         initializing = kwargs.get('_initializing_', False)
         if initializing:
             del kwargs['_initializing_']
@@ -483,15 +464,14 @@ def update(self, **kwargs):
                               'validate_field')
 
     def validate_field(self, name, value, errors):
-        """Field's validate hook.
-
-        Write a method: validate_foo(new_value) -> "error" or None
-        If there is a validate method defined for a given field invoke
-        it by name
-        name -- the name to register errors under
-        value -- the proposed new value
-        errors -- dict to record errors in
-        """
+        # Field's validate hook.
+        #
+        # Write a method: validate_foo(new_value) -> "error" or None
+        # If there is a validate method defined for a given field invoke
+        # it by name
+        # name -- the name to register errors under
+        # value -- the proposed new value
+        # errors -- dict to record errors in
         methodName = "validate_%s" % name
         result = None
         if shasattr(self, methodName):
@@ -516,8 +496,7 @@ def post_validate(self, REQUEST=None, errors=None):
     security.declareProtected(permissions.View, 'validate')
 
     def validate(self, REQUEST=None, errors=None, data=None, metadata=None):
-        """Validates the form data from the request.
-        """
+        # Validates the form data from the request.
         if errors is None:
             errors = {}
 
@@ -553,9 +532,8 @@ def validate(self, REQUEST=None, errors=None, data=None, metadata=None):
     security.declareProtected(permissions.View, 'SearchableText')
 
     def SearchableText(self):
-        """All fields marked as 'searchable' are concatenated together
-        here for indexing purpose.
-        """
+        # All fields marked as 'searchable' are concatenated together
+        # here for indexing purpose.
         data = []
         for field in self.Schema().fields():
             if not field.searchable:
@@ -610,15 +588,13 @@ def SearchableText(self):
     security.declareProtected(permissions.View, 'getCharset')
 
     def getCharset(self):
-        """Returns the site default charset, or utf-8.
-        """
+        # Returns the site default charset, or utf-8.
         return 'utf-8'
 
     security.declareProtected(permissions.View, 'get_size')
 
     def get_size(self):
-        """Used for FTP and apparently the ZMI now too.
-        """
+        # Used for FTP and apparently the ZMI now too.
         size = 0
         for field in self.Schema().fields():
             size += field.get_size(self)
@@ -694,8 +670,7 @@ def _processForm(self, data=1, metadata=None, REQUEST=None, values=None):
     security.declareProtected(permissions.ModifyPortalContent, 'processForm')
 
     def processForm(self, data=1, metadata=0, REQUEST=None, values=None):
-        """Processes the schema looking for data in the form.
-        """
+        # Processes the schema looking for data in the form.
         is_new_object = self.checkCreationFlag()
         self._processForm(data=data, metadata=metadata,
                           REQUEST=REQUEST, values=values)
@@ -729,12 +704,11 @@ def at_post_edit_script(self):
                               'markCreationFlag')
 
     def markCreationFlag(self):
-        """Sets flag on the instance to indicate that the object hasn't been
-        saved properly (unset in content_edit).
-
-        This will only be done if a REQUEST is present to ensure that objects
-        created programmatically are considered fully created.
-        """
+        # Sets flag on the instance to indicate that the object hasn't been
+        # saved properly (unset in content_edit).
+        #
+        # This will only be done if a REQUEST is present to ensure that objects
+        # created programmatically are considered fully created.
         req = getattr(self, 'REQUEST', None)
         if shasattr(req, 'get'):
             if req.get('SCHEMA_UPDATE', None) is not None:
@@ -750,8 +724,7 @@ def markCreationFlag(self):
                               'unmarkCreationFlag')
 
     def unmarkCreationFlag(self):
-        """Removes the creation flag.
-        """
+        # Removes the creation flag.
         if shasattr(aq_inner(self), '_at_creation_flag'):
             self._at_creation_flag = False
 
@@ -759,14 +732,12 @@ def unmarkCreationFlag(self):
                               'checkCreationFlag')
 
     def checkCreationFlag(self):
-        """Returns True if the object has not been fully saved, False otherwise.
-        """
+        # Returns True if the object has not been fully saved, False otherwise.
         return getattr(aq_base(self), '_at_creation_flag', False)
 
     def generateNewId(self):
-        """Suggest an id for this object.
-        This id is used when automatically renaming an object after creation.
-        """
+        # Suggest an id for this object.
+        # This id is used when automatically renaming an object after creation.
         title = self.Title()
         # Can't work w/o a title
         if not title:
@@ -788,8 +759,7 @@ def generateNewId(self):
     security.declarePrivate('_renameAfterCreation')
 
     def _renameAfterCreation(self, check_auto_id=False):
-        """Renames an object like its normalized title.
-        """
+        # Renames an object like its normalized title.
         old_id = self.getId()
         if check_auto_id and not self._isIDAutoGenerated(old_id):
             # No auto generated id
@@ -825,11 +795,10 @@ def _renameAfterCreation(self, check_auto_id=False):
     security.declarePrivate('_findUniqueId')
 
     def _findUniqueId(self, id):
-        """Find a unique id in the parent folder, based on the given id, by
-        appending -n, where n is a number between 1 and the constant
-        RENAME_AFTER_CREATION_ATTEMPTS, set in config.py. If no id can be
-        found, return None.
-        """
+        # Find a unique id in the parent folder, based on the given id, by
+        # appending -n, where n is a number between 1 and the constant
+        # RENAME_AFTER_CREATION_ATTEMPTS, set in config.py. If no id can be
+        # found, return None.
         check_id = getattr(self, 'check_id', None)
         if check_id is None:
             parent = aq_parent(aq_inner(self))
@@ -852,9 +821,8 @@ def _findUniqueId(self, id):
     security.declarePrivate('_isIDAutoGenerated')
 
     def _isIDAutoGenerated(self, id):
-        """Avoid busting setDefaults if we don't have a proper acquisition
-        context.
-        """
+        # Avoid busting setDefaults if we don't have a proper acquisition
+        # context.
         plone_tool = getToolByName(self, 'plone_utils', None)
         if plone_tool is not None and \
            shasattr(plone_tool, 'isIDAutoGenerated'):
@@ -864,20 +832,17 @@ def _isIDAutoGenerated(self, id):
     security.declareProtected(permissions.View, 'Schemata')
 
     def Schemata(self):
-        """Returns the Schemata for the Object.
-        """
+        # Returns the Schemata for the Object.
         return getSchemata(self)
 
     def Schema(self):
-        """Return a (wrapped) schema instance for this object instance.
-        """
+        # Return a (wrapped) schema instance for this object instance.
         return ImplicitAcquisitionWrapper(ISchema(self), self)
 
     security.declarePrivate('_isSchemaCurrent')
 
     def _isSchemaCurrent(self):
-        """Determines whether the current object's schema is up to date.
-        """
+        # Determines whether the current object's schema is up to date.
         return self._signature == self.Schema().signature()
 
     security.declarePrivate('_updateSchema')
@@ -965,7 +930,7 @@ def _updateSchema(self, excluded_fields=None, out=None,
     security.declarePrivate('_migrateGetValue')
 
     def _migrateGetValue(self, name, new_schema=None):
-        """Try to get a value from an object using a variety of methods."""
+        # Try to get a value from an object using a variety of methods.
         schema = self.Schema()
         # Migrate pre-AT 1.3 schemas.
         schema = fixSchema(schema)
@@ -1060,7 +1025,7 @@ def _migrateGetValue(self, name, new_schema=None):
     security.declarePrivate('_migrateSetValue')
 
     def _migrateSetValue(self, name, value, old_schema=None, **kw):
-        """Try to set an object value using a variety of methods."""
+        # Try to set an object value using a variety of methods.
         schema = self.Schema()
         # Migrate pre-AT 1.3 schemas.
         schema = fixSchema(schema)
@@ -1087,9 +1052,8 @@ def _migrateSetValue(self, name, value, old_schema=None, **kw):
     security.declareProtected(permissions.View, 'isTemporary')
 
     def isTemporary(self):
-        """Checks to see if we are created as temporary object by
-        portal factory.
-        """
+        # Checks to see if we are created as temporary object by
+        # portal factory.
         parent = aq_parent(aq_inner(self))
         return shasattr(parent, 'meta_type') and \
             parent.meta_type == 'TempFolder'
@@ -1097,8 +1061,7 @@ def isTemporary(self):
     security.declareProtected(permissions.View, 'getFolderWhenPortalFactory')
 
     def getFolderWhenPortalFactory(self):
-        """Returns the folder where this object was created temporarily.
-        """
+        # Returns the folder where this object was created temporarily.
         ctx = aq_inner(self)
         if not ctx.isTemporary():
             # Not a temporary object!
@@ -1129,8 +1092,7 @@ def getFolderWhenPortalFactory(self):
                               'addSubObjects')
 
     def addSubObjects(self, objects, REQUEST=None):
-        """Adds a dictionary of objects to a volatile attribute.
-        """
+        # Adds a dictionary of objects to a volatile attribute.
         if objects:
             storage = getattr(aq_base(self), '_v_at_subobjects', None)
             if storage is None:
@@ -1142,8 +1104,7 @@ def addSubObjects(self, objects, REQUEST=None):
     security.declareProtected(permissions.View, 'getSubObject')
 
     def getSubObject(self, name, REQUEST, RESPONSE=None):
-        """Gets a dictionary of objects from a volatile attribute.
-        """
+        # Gets a dictionary of objects from a volatile attribute.
         storage = getattr(aq_base(self), '_v_at_subobjects', None)
         if storage is None:
             return None
@@ -1157,9 +1118,9 @@ def getSubObject(self, name, REQUEST, RESPONSE=None):
         return Wrapper(data, name, str(mt) or 'application/octet-stream').__of__(self)
 
     def __bobo_traverse__(self, REQUEST, name):
-        """Allows transparent access to session subobjects.
-        """
-        # sometimes, the request doesn't have a response, e.g. when
+        # Allows transparent access to session subobjects.
+        #
+        # Sometimes, the request doesn't have a response, e.g. when
         # PageTemplates traverse through the object path, they pass in
         # a phony request (a dict).
         RESPONSE = getattr(REQUEST, 'RESPONSE', None)
diff --git a/Products/Archetypes/BaseUnit.py b/Products/Archetypes/BaseUnit.py
index 2ca1568..f656f40 100644
--- a/Products/Archetypes/BaseUnit.py
+++ b/Products/Archetypes/BaseUnit.py
@@ -76,12 +76,11 @@ def update(self, data, instance, **kw):
         self._cacheExpire()
 
     def transform(self, instance, mt, **kwargs):
-        """Takes a mimetype so object.foo.transform('text/plain') should return
-        a plain text version of the raw content
-
-        return None if no data or if data is untranformable to desired output
-        mime type
-        """
+        # Takes a mimetype so object.foo.transform('text/plain') should return
+        # a plain text version of the raw content.
+        #
+        # Return None if no data or if data is untranformable to desired output
+        # mime type.
         encoding = self.original_encoding
         orig = self.getRaw(encoding, instance)
         if not orig:
@@ -134,8 +133,7 @@ def __len__(self):
         return self.get_size()
 
     def isBinary(self):
-        """Return true if this contains a binary value, else false.
-        """
+        # Return true if this contains a binary value, else false.
         try:
             return self.binary
         except AttributeError:
@@ -150,13 +148,11 @@ def isBinary(self):
 
     # File handling
     def get_size(self):
-        """Return the file size.
-        """
+        # Return the file size.
         return self.size
 
     def getRaw(self, encoding=None, instance=None):
-        """Return the file encoded raw value.
-        """
+        # Return the file encoded raw value.
         if self.isBinary() or not isinstance(self.raw, unicode):
             return self.raw
         if encoding is None:
@@ -168,10 +164,8 @@ def getRaw(self, encoding=None, instance=None):
         return self.raw.encode(encoding)
 
     def portalEncoding(self, instance):
-        """Return the default portal encoding, using an external python script.
-
-        Look the archetypes skin directory for the default implementation.
-        """
+        # Return the default portal encoding, using an external python script.
+        # Look the archetypes skin directory for the default implementation.
         try:
             return instance.getCharset()
         except AttributeError:
@@ -180,16 +174,14 @@ def portalEncoding(self, instance):
             return 'utf-8'
 
     def getContentType(self):
-        """Return the file mimetype string.
-        """
+        # Return the file mimetype string.
         return self.mimetype
 
     # Backward compatibility
     content_type = getContentType
 
     def setContentType(self, instance, value):
-        """Set the file mimetype string.
-        """
+        # Set the file mimetype string.
         mtr = getToolByName(instance, 'mimetypes_registry')
         result = mtr.lookup(value)
         if not result:
@@ -202,13 +194,11 @@ def setContentType(self, instance, value):
         self._cacheExpire()
 
     def getFilename(self):
-        """Return the file name.
-        """
+        # Return the file name.
         return self.filename
 
     def setFilename(self, filename):
-        """Set the file name.
-        """
+        # Set the file name.
         if isinstance(filename, str):
             filename = os.path.basename(filename)
             filename = filename.split("\\")[-1]
diff --git a/Products/Archetypes/CatalogMultiplex.py b/Products/Archetypes/CatalogMultiplex.py
index 04ab251..51e267e 100644
--- a/Products/Archetypes/CatalogMultiplex.py
+++ b/Products/Archetypes/CatalogMultiplex.py
@@ -53,8 +53,7 @@ def unindexObject(self):
     security.declareProtected(ModifyPortalContent, 'reindexObjectSecurity')
 
     def reindexObjectSecurity(self, skip_self=False):
-        """update security information in all registered catalogs.
-        """
+        # Update security information in all registered catalogs.
         if isFactoryContained(self):
             return
         at = getToolByName(self, TOOL_NAME, None)
@@ -88,14 +87,13 @@ def reindexObjectSecurity(self, skip_self=False):
     security.declareProtected(ModifyPortalContent, 'reindexObject')
 
     def reindexObject(self, idxs=None):
-        """update indexes of this object in all registered catalogs.
-
-        Catalogs are registered per 'meta_type' in archetypes tool.
-
-        'idxs' are a list of index names. If this list is given only the given
-        indexes are refreshed. If a index does not exist in catalog its
-        silently ignored.
-        """
+        # Update indexes of this object in all registered catalogs.
+        #
+        # Catalogs are registered per 'meta_type' in archetypes tool.
+        #
+        # 'idxs' are a list of index names. If this list is given only the given
+        # indexes are refreshed. If a index does not exist in catalog its
+        # silently ignored.
         if idxs is None:
             idxs = []
         if isFactoryContained(self):
diff --git a/Products/Archetypes/ClassGen.py b/Products/Archetypes/ClassGen.py
index f61a66c..faa0b6f 100644
--- a/Products/Archetypes/ClassGen.py
+++ b/Products/Archetypes/ClassGen.py
@@ -48,7 +48,7 @@ def makeMethod(self, klass, field, mode, methodName):
         method = None
         if mode == "r":
             def generatedAccessor(self, **kw):
-                """Default Accessor."""
+                # Default Accessor.
                 if 'schema' in kw:
                     schema = kw['schema']
                 else:
@@ -58,7 +58,7 @@ def generatedAccessor(self, **kw):
             method = generatedAccessor
         elif mode == "m":
             def generatedEditAccessor(self, **kw):
-                """Default Edit Accessor."""
+                # Default Edit Accessor.
                 if 'schema' in kw:
                     schema = kw['schema']
                 else:
@@ -68,7 +68,7 @@ def generatedEditAccessor(self, **kw):
             method = generatedEditAccessor
         elif mode == "w":
             def generatedMutator(self, value, **kw):
-                """Default Mutator."""
+                # Default Mutator.
                 if 'schema' in kw:
                     schema = kw['schema']
                 else:
diff --git a/Products/Archetypes/ExtensibleMetadata.py b/Products/Archetypes/ExtensibleMetadata.py
index 7657064..b3e9cf2 100644
--- a/Products/Archetypes/ExtensibleMetadata.py
+++ b/Products/Archetypes/ExtensibleMetadata.py
@@ -217,7 +217,7 @@ def __init__(self):
     security.declarePrivate('defaultLanguage')
 
     def defaultLanguage(self):
-        """Retrieve the default language"""
+        # Retrieve the default language
         tool = getToolByName(self, 'portal_languages', None)
         if tool is not None:
             return tool.getDefaultLanguage()
@@ -226,7 +226,7 @@ def defaultLanguage(self):
     security.declarePrivate('defaultRights')
 
     def defaultRights(self):
-        """Retrieve the default rights"""
+        # Retrieve the default rights.
         mdtool = getToolByName(self, 'portal_metadata', None)
         if mdtool is None:
             return ''
@@ -323,8 +323,7 @@ def allowDiscussion(self, allowDiscussion=None, **kw):
     security.declareProtected(permissions.View, 'languages')
 
     def languages(self):
-        """Vocabulary method for the language field
-        """
+        # Vocabulary method for the language field.
         util = None
 
         use_combined = False
@@ -358,8 +357,7 @@ def languages(self):
     security.declareProtected(permissions.View, 'CreationDate')
 
     def CreationDate(self, zone=None):
-        """ Dublin Core element - date resource created.
-        """
+        # Dublin Core element - date resource created.
         if zone is None:
             zone = _zone
         creation = self.getField('creation_date').get(self)
@@ -376,8 +374,7 @@ def EffectiveDate(self, zone=None):
         return effective is None and 'None' or effective.toZone(zone).ISO8601()
 
     def _effective_date(self):
-        """Computed attribute accessor
-        """
+        # Computed attribute accessor.
         return self.getField('effectiveDate').get(self)
 
     security.declareProtected(permissions.View, 'effective_date')
@@ -393,8 +390,7 @@ def ExpirationDate(self, zone=None):
         return expires is None and 'None' or expires.toZone(zone).ISO8601()
 
     def _expiration_date(self):
-        """Computed attribute accessor
-        """
+        # Computed attribute accessor.
         return self.getField('expirationDate').get(self)
 
     security.declareProtected(permissions.View, 'expiration_date')
@@ -403,9 +399,7 @@ def _expiration_date(self):
     security.declareProtected(permissions.View, 'Date')
 
     def Date(self, zone=None):
-        """
-        Dublin Core element - default date
-        """
+        # Dublin Core element - default date
         # Return effective_date if specifically set, modification date
         # otherwise
         if zone is None:
@@ -419,9 +413,8 @@ def Date(self, zone=None):
     security.declareProtected(permissions.View, 'Format')
 
     def Format(self):
-        """cmf/backward compat
-        Dublin Core element - resource format
-        """
+        # cmf/backward compat
+        # Dublin Core element - resource format
         # FIXME: get content type from marshaller
         return self.getContentType()
 
@@ -429,11 +422,11 @@ def Format(self):
                               'setFormat')
 
     def setFormat(self, value):
-        """cmf/backward compat: ignore setFormat"""
+        # cmf/backward compat: ignore setFormat.
         self.setContentType(value)
 
     def Identifer(self):
-        """ dublin core getId method"""
+        # dublin core getId method.
         return self.getId()
 
     #  DublinCore utility methods #############################################
@@ -441,8 +434,7 @@ def Identifer(self):
     security.declareProtected(permissions.View, 'contentEffective')
 
     def contentEffective(self, date):
-        """Is the date within the resource's effective range?
-        """
+        # Is the date within the resource's effective range?
         effective = self.getField('effectiveDate').get(self)
         expires = self.getField('expirationDate').get(self)
         pastEffective = (effective is None or effective <= date)
@@ -452,7 +444,7 @@ def contentEffective(self, date):
     security.declareProtected(permissions.View, 'contentExpired')
 
     def contentExpired(self, date=None):
-        """ Is the date after resource's expiration """
+        # Is the date after resource's expiration.
         if not date:
             date = DateTime()
         expires = self.getField('expirationDate').get(self)
@@ -465,9 +457,8 @@ def contentExpired(self, date=None):
     security.declareProtected(permissions.View, 'created')
 
     def created(self):
-        """Dublin Core element - date resource created,
-        returned as DateTime.
-        """
+        # Dublin Core element - date resource created,
+        # returned as DateTime.
         # allow for non-existent creation_date, existed always
         created = self.getField('creation_date').get(self)
         return created is None and FLOOR_DATE or created
@@ -475,9 +466,8 @@ def created(self):
     security.declareProtected(permissions.View, 'modified')
 
     def modified(self):
-        """Dublin Core element - date resource last modified,
-        returned as DateTime.
-        """
+        # Dublin Core element - date resource last modified,
+        # returned as DateTime.
         modified = self.getField('modification_date').get(self)
         # TODO may return None
         return modified
@@ -485,18 +475,16 @@ def modified(self):
     security.declareProtected(permissions.View, 'effective')
 
     def effective(self):
-        """Dublin Core element - date resource becomes effective,
-        returned as DateTime.
-        """
+        # Dublin Core element - date resource becomes effective,
+        # returned as DateTime.
         effective = self.getField('effectiveDate').get(self)
         return effective is None and FLOOR_DATE or effective
 
     security.declareProtected(permissions.View, 'expires')
 
     def expires(self):
-        """Dublin Core element - date resource expires,
-        returned as DateTime.
-        """
+        # Dublin Core element - date resource expires,
+        # returned as DateTime.
         expires = self.getField('expirationDate').get(self)
         return expires is None and CEILING_DATE or expires
 
@@ -524,10 +512,8 @@ def expires(self):
                               'notifyModified')
 
     def notifyModified(self):
-        """
-        Take appropriate action after the resource has been modified.
-        For now, change the modification_date.
-        """
+        # Take appropriate action after the resource has been modified.
+        # For now, change the modification_date.
         self.setModificationDate(DateTime())
         if shasattr(self, 'http__refreshEtag'):
             self.http__refreshEtag()
@@ -536,9 +522,8 @@ def notifyModified(self):
                               'setModificationDate')
 
     def setModificationDate(self, modification_date=None):
-        """Set the date when the resource was last modified.
-        When called without an argument, sets the date to now.
-        """
+        # Set the date when the resource was last modified.
+        # When called without an argument, sets the date to now.
         if modification_date is None:
             modified = DateTime()
         else:
@@ -549,9 +534,8 @@ def setModificationDate(self, modification_date=None):
                               'setCreationDate')
 
     def setCreationDate(self, creation_date=None):
-        """Set the date when the resource was created.
-        When called without an argument, sets the date to now.
-        """
+        # Set the date when the resource was created.
+        # When called without an argument, sets the date to now.
         if creation_date is None:
             created = DateTime()
         else:
@@ -561,8 +545,7 @@ def setCreationDate(self, creation_date=None):
     security.declarePrivate('_datify')
 
     def _datify(self, date):
-        """Try to convert something into a DateTime instance or None
-        """
+        # Try to convert something into a DateTime instance or None.
         # stupid web
         if date == 'None':
             date = None
@@ -577,16 +560,14 @@ def _datify(self, date):
     security.declareProtected(permissions.View, 'Publisher')
 
     def Publisher(self):
-        """Dublin Core element - resource publisher
-        """
+        # Dublin Core element - resource publisher
         # XXX: fixme using 'portal_metadata'
         return 'No publisher'
 
     security.declareProtected(permissions.View, 'ModificationDate')
 
     def ModificationDate(self, zone=None):
-        """ Dublin Core element - date resource last modified.
-        """
+        # Dublin Core element - date resource last modified.
         if zone is None:
             zone = _zone
         modified = self.modified()
@@ -606,7 +587,7 @@ def Type(self):
     security.declareProtected(permissions.View, 'Identifier')
 
     def Identifier(self):
-        """Dublin Core element - Object ID"""
+        # Dublin Core element - Object ID
         # XXX: fixme using 'portal_metadata' (we need to prepend the
         #      right prefix to self.getPhysicalPath().
         return self.absolute_url()
@@ -614,15 +595,14 @@ def Identifier(self):
     security.declareProtected(permissions.View, 'listContributors')
 
     def listContributors(self):
-        """Dublin Core element - Contributors"""
+        # Dublin Core element - Contributors.
         return self.Contributors()
 
     security.declareProtected(permissions.ModifyPortalContent,
                               'addCreator')
 
     def addCreator(self, creator=None):
-        """ Add creator to Dublin Core creators.
-        """
+        # Add creator to Dublin Core creators.
         if creator is None:
             mtool = getToolByName(self, 'portal_membership', None)
             if mtool is None:
@@ -637,8 +617,7 @@ def addCreator(self, creator=None):
     security.declareProtected(permissions.View, 'listCreators')
 
     def listCreators(self):
-        """ List Dublin Core Creator elements - resource authors.
-        """
+        # List Dublin Core Creator elements - resource authors.
         creators = self.Schema()['creators']
         if not creators.get(self):
             # for content created with CMF versions before 1.5
@@ -654,8 +633,7 @@ def listCreators(self):
     security.declareProtected(permissions.View, 'Creator')
 
     def Creator(self):
-        """ Dublin Core Creator element - resource author.
-        """
+        # Dublin Core Creator element - resource author.
         creators = self.listCreators()
         return creators and creators[0] or ''
 
@@ -676,8 +654,7 @@ def content_type(self):
     security.declareProtected(permissions.View, 'getMetadataHeaders')
 
     def getMetadataHeaders(self):
-        """ Return RFC-822-style headers.
-        """
+        # Return RFC-822-style headers.
         hdrlist = []
         hdrlist.append(('Title', self.Title()))
         hdrlist.append(('Subject', string.join(self.Subject(), ', ')))
@@ -712,8 +689,7 @@ def _editMetadata(self,
                       language=_marker,
                       rights=_marker,
                       ):
-        """ Update the editable metadata for this resource.
-        """
+        # Update the editable metadata for this resource.
         if title is not _marker:
             self.setTitle(title)
         if subject is not _marker:
@@ -776,10 +752,8 @@ def editMetadata(self,
                      language='en-US',
                      rights='',
                      ):
-        """
-        used to be:  editMetadata = WorkflowAction(_editMetadata)
-        Need to add check for webDAV locked resource for TTW methods.
-        """
+        # Used to be:  editMetadata = WorkflowAction(_editMetadata)
+        # Need to add check for webDAV locked resource for TTW methods.
         self.failIfLocked()
         self._editMetadata(title=title,
                            subject=subject,
diff --git a/Products/Archetypes/OrderedBaseFolder.py b/Products/Archetypes/OrderedBaseFolder.py
index 3bafc40..65525fd 100644
--- a/Products/Archetypes/OrderedBaseFolder.py
+++ b/Products/Archetypes/OrderedBaseFolder.py
@@ -40,8 +40,7 @@ def moveObject(self, id, position):
     security.declarePrivate('getCMFObjectsSubsetIds')
 
     def getIdsSubset(self, objs):
-        """Get the ids of only cmf objects (used for moveObjectsByDelta)
-        """
+        # Get the ids of only cmf objects (used for moveObjectsByDelta).
         ttool = getToolByName(self, 'portal_types')
         cmf_meta_types = [ti.Metatype() for ti in ttool.listTypeInfo()]
         return [obj['id'] for obj in objs
diff --git a/Products/Archetypes/ReferenceEngine.py b/Products/Archetypes/ReferenceEngine.py
index 3c6c600..6624800 100644
--- a/Products/Archetypes/ReferenceEngine.py
+++ b/Products/Archetypes/ReferenceEngine.py
@@ -82,7 +82,7 @@ def __repr__(self):
                                                      self.relationship)
 
     def UID(self):
-        """the uid method for compat"""
+        # the uid method for compat.
         return IUUID(self, None)
 
     # Convenience methods
@@ -124,13 +124,13 @@ def delHook(self, tool, sourceObject=None, targetObject=None):
     # OFS Operations Policy Hooks
     # These Hooks are experimental and subject to change
     def beforeTargetDeleteInformSource(self):
-        """called before target object is deleted so
-        the source can have a say"""
+        # Called before target object is deleted so
+        # the source can have a say.
         pass
 
     def beforeSourceDeleteInformTarget(self):
-        """called when the refering source Object is
-        about to be deleted"""
+        # Called when the refering source Object is
+        # about to be deleted.
         pass
 
     def manage_afterAdd(self, item, container):
@@ -233,9 +233,9 @@ class PluggableCatalog(Catalog):
     # XXX FIXME more security
 
     def useBrains(self, brains):
-        """Tricky brains overrides, we need to use our own class here
-        with annotation support
-        """
+        # Tricky brains overrides, we need to use our own class here
+        # with annotation support.
+
         class plugbrains(self.BASE_CLASS, brains):
             pass
 
@@ -392,9 +392,8 @@ def _optimizedReferences(self, object, relationship=None,
         return brains
 
     def _optimizedQuery(self, uid, indexname, relationship):
-        """query reference catalog for object matching the info we are
-        given, returns brains
-        """
+        # Query reference catalog for object matching the info we are
+        # given, returns brains.
         if not uid:  # pragma: no cover
             return []
 
@@ -583,7 +582,7 @@ def _resolveBrains(self, brains):
         return objects
 
     def _makeName(self, *args):
-        """get a uuid"""
+        # Get a uuid.
         name = make_uuid(*args)
         return name
 
diff --git a/Products/Archetypes/TemplateMixin.py b/Products/Archetypes/TemplateMixin.py
index 00e336f..66720d0 100644
--- a/Products/Archetypes/TemplateMixin.py
+++ b/Products/Archetypes/TemplateMixin.py
@@ -93,13 +93,12 @@ def getLayout(self, **kw):
     security.declareProtected(permissions.View, 'getDefaultLayout')
 
     def getDefaultLayout(self):
-        """Get the default layout used for TemplateMixin.
-
-        Check the class definition for a attribute called 'default_view' then
-        check the Factory Type Information (portal_types) for an attribute
-        immediate_view else finally return the 'base_view' string which is a
-        autogenerated form from Archetypes.
-        """
+        # Get the default layout used for TemplateMixin.
+        #
+        # Check the class definition for a attribute called 'default_view' then
+        # check the Factory Type Information (portal_types) for an attribute
+        # immediate_view else finally return the 'base_view' string which is a
+        # autogenerated form from Archetypes.
         default_view = getattr(aq_base(self), 'default_view', None)
         if default_view:
             return default_view
@@ -109,10 +108,8 @@ def getDefaultLayout(self):
         return 'base_view'
 
     def getTemplateFor(self, pt, default='base_view'):
-        """Let the SkinManager handle this.
-
-        But always try to show something.
-        """
+        # Let the SkinManager handle this.
+        # But always try to show something.
         pt = getattr(self, pt, None)
         if not pt:
             # default is the value of obj.default_view or base_view
diff --git a/Products/Archetypes/UIDCatalog.py b/Products/Archetypes/UIDCatalog.py
index 9c92f3b..c351e86 100644
--- a/Products/Archetypes/UIDCatalog.py
+++ b/Products/Archetypes/UIDCatalog.py
@@ -53,9 +53,8 @@ class PluggableCatalog(Catalog):
     # XXX FIXME more security
 
     def useBrains(self, brains):
-        """Tricky brains overrides, we need to use our own class here
-        with annotation support
-        """
+        # Tricky brains overrides, we need to use our own class here
+        # with annotation support.
         class plugbrains(self.BASE_CLASS, brains):
             pass
 
@@ -119,7 +118,7 @@ def getObject(self, REQUEST=None):
 
 
 class IndexableObjectWrapper(object):
-    """Wwrapper for object indexing
+    """Wrapper for object indexing
     """
 
     def __init__(self, obj):
diff --git a/Products/Archetypes/VariableSchemaSupport.py b/Products/Archetypes/VariableSchemaSupport.py
index 57f0fac..1619e58 100644
--- a/Products/Archetypes/VariableSchemaSupport.py
+++ b/Products/Archetypes/VariableSchemaSupport.py
@@ -22,10 +22,8 @@ def __init__(self, schema):
         self.schema = schema
 
     def updateMethods(self, klass):
-        """Update the methods of the klass to support a new schema.
-
-        This will re-generate methods.
-        """
+        # Update the methods of the klass to support a new schema.
+        # This will re-generate methods.
         self.generateMethods(klass, self.schema.fields())
 
 #
diff --git a/Products/Archetypes/annotations.py b/Products/Archetypes/annotations.py
index 4f2a9be..9c82b08 100644
--- a/Products/Archetypes/annotations.py
+++ b/Products/Archetypes/annotations.py
@@ -110,8 +110,7 @@ def set(self, key, value):
         self[key] = value
 
     def getSubkey(self, key, subkey, default=None):
-        """Get annotations using a key and onesubkey
-        """
+        # Get annotations using a key and one subkey.
         if isinstance(subkey, basestring):
             k = '%s-%s' % (key, subkey)
             return self.get(k, default)
@@ -120,8 +119,7 @@ def getSubkey(self, key, subkey, default=None):
                 'Invalid subkey type %s, must be string type' % type(subkey))
 
     def setSubkey(self, key, value, subkey):
-        """Stores data using a key and one subkey
-        """
+        # Stores data using a key and one subkey.
         if isinstance(subkey, basestring):
             k = '%s-%s' % (key, subkey)
             self[k] = value
@@ -130,8 +128,7 @@ def setSubkey(self, key, value, subkey):
                 'Invalid subkey type %s, must be string type' % type(subkey))
 
     def delSubkey(self, key, subkey):
-        """Removes a subkey
-        """
+        # Removes a subkey.
         if isinstance(subkey, basestring):
             k = '%s-%s' % (key, subkey)
             del self[k]
@@ -140,8 +137,7 @@ def delSubkey(self, key, subkey):
                 'Invalid subkey type %s, must be string type' % type(subkey))
 
     def hasSubkey(self, key, subkey):
-        """Checks for the existence of a sub key
-        """
+        # Checks for the existence of a sub key.
         if isinstance(subkey, basestring):
             k = '%s-%s' % (key, subkey)
             return k in self
diff --git a/Products/Archetypes/athistoryaware.py b/Products/Archetypes/athistoryaware.py
index 13867ce..776bfa9 100644
--- a/Products/Archetypes/athistoryaware.py
+++ b/Products/Archetypes/athistoryaware.py
@@ -175,7 +175,7 @@ def _constructAnnotatedHistory(self, max=10):
         tids = sorted(history.iterkeys(), reverse=True)
 
         def find_revision(tids, key):
-            """First revision of key in a series of tids"""
+            # First revision of key in a series of tids.
             has_revision = lambda t, h=history, k=key: k in h[t]
             next_tid = itertools.ifilter(has_revision, tids).next()
             return history[next_tid][key]


