Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-10-05T17:21:32+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.contentmenu/commit/053ffd95ff292a1216d8b8658dbf93ebc5d48b6b

Cleanup

Files changed:
M CHANGES.rst
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/test_menu.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 49d72a0..05433b0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Code cleanup.
+  [gforcad]
 
 2.1.9 (2016-10-03)
 ------------------
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index c254bea..a1471de 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -102,7 +102,7 @@ def getMenuItems(self, context, request):
             if not action['allowed']:
                 continue
             aid = action['id']
-            cssClass = 'actionicon-object_buttons-%s' % aid
+            cssClass = 'actionicon-object_buttons-{0}'.format(aid)
             icon = action.get('icon', None)
             modal = action.get('modal', None)
             if modal:
@@ -273,7 +273,7 @@ def getMenuItems(self, obj, request):
                 contextCanSetLayout or contextCanSetDefaultPage):
             return []
 
-        # Only show the block "Folder display" and "Item display" separators if
+        # Only show the block 'Folder display' and 'Item display' separators if
         # they are necessars
         useSeparators = False
         if folderCanSetLayout or folderCanSetDefaultPage:
@@ -305,8 +305,12 @@ def getMenuItems(self, obj, request):
                         'title': title,
                         'description': '',
                         'action': addTokenToUrl(
-                            '%s/selectViewTemplate?templateId=%s' % (
-                                folderUrl, id,), request),
+                            '{0}/selectViewTemplate?templateId={1}'.format(
+                                folderUrl,
+                                id,
+                            ),
+                            request
+                        ),
                         'selected': False,
                         'icon': None,
                         'extra': {
@@ -340,7 +344,7 @@ def getMenuItems(self, obj, request):
                     'description': _(u'title_change_default_view_item',
                                      default=u'Change the item used as default'
                                              u' view in this folder'),
-                    'action': '%s/select_default_page' % (folderUrl,),
+                    'action': '{0}/select_default_page'.format(folderUrl),
                     'selected': False,
                     'icon': None,
                     'extra': {
@@ -384,8 +388,12 @@ def getMenuItems(self, obj, request):
                         'title': title,
                         'description': '',
                         'action': addTokenToUrl(
-                            '%s/selectViewTemplate?templateId=%s' % (
-                                contextUrl, id,), request),
+                            '{0}/selectViewTemplate?templateId={1}'.format(
+                                contextUrl,
+                                id,
+                            ),
+                            request
+                        ),
                         'selected': is_selected,
                         'icon': None,
                         'extra': {
@@ -410,7 +418,7 @@ def getMenuItems(self, obj, request):
                                 default=u'Select an item to be used as '
                                         u'default view in this folder...'),
                             'action': addTokenToUrl(
-                                '%s/select_default_page' % (contextUrl,),
+                                '{0}/select_default_page'.format(contextUrl),
                                 request),
                             'selected': False,
                             'icon': None,
@@ -422,9 +430,9 @@ def getMenuItems(self, obj, request):
                         })
                 else:
                     defaultPageObj = getattr(obj, defaultPage, None)
-                    defaultPageTitle = u""
+                    defaultPageTitle = u''
                     if defaultPageObj is not None:
-                        if hasattr(aq_base(defaultPageObj), 'Title'):
+                        if getattr(aq_base(defaultPageObj), 'Title'):
                             defaultPageTitle = defaultPageObj.Title()
                         else:
                             defaultPageTitle = getattr(aq_base(defaultPageObj),
@@ -454,7 +462,9 @@ def getMenuItems(self, obj, request):
                                 u'title_change_default_view_item',
                                 default=u'Change the item used as default '
                                         u'view in this folder'),
-                            'action': '%s/select_default_page' % (contextUrl,),
+                            'action': '{0}/select_default_page'.format(
+                                contextUrl
+                            ),
                             'selected': False,
                             'icon': None,
                             'extra': {
@@ -491,7 +501,7 @@ def extra(self):
     @property
     def action(self):
         return addTokenToUrl(
-            '%s/folder_factories' % self._addContext().absolute_url(),
+            '{0}/folder_factories'.format(self._addContext().absolute_url()),
             self.request
         )
 
@@ -566,7 +576,7 @@ def getMenuItems(self, context, request):
         results = factories_view.addable_types(include=include)
 
         if haveMore:
-            url = '%s/folder_factories' % (addContext.absolute_url(),)
+            url = '{0}/folder_factories'.format(addContext.absolute_url())
             results.append({
                 'title': _(u'folder_add_more', default=u'More\u2026'),
                 'description': _(u'Show all available content types'),
@@ -584,8 +594,9 @@ def getMenuItems(self, context, request):
         if constraints is not None:
             if constraints.canSetConstrainTypes() and \
                     constraints.getDefaultAddableTypes():
-                url = '%s/folder_constraintypes_form' % (
-                    addContext.absolute_url(),)
+                url = '{0}/folder_constraintypes_form'.format(
+                    addContext.absolute_url(),
+                )
                 results.append({
                     'title': _(u'folder_add_settings',
                                default=u'Restrictions\u2026'),
@@ -659,7 +670,7 @@ def extra(self):
         state = self.context_state.workflow_state()
         stateTitle = self._currentStateTitle()
         return {'id': 'plone-contentmenu-workflow',
-                'class': 'state-%s' % state,
+                'class': 'state-{0}'.format(state),
                 'state': state,
                 'stateTitle': stateTitle,
                 'li_class': 'plonetoolbar-workfow-transition'}
@@ -739,9 +750,12 @@ def getMenuItems(self, context, request):
 
             cssClass = ''
             actionUrl = action['url']
-            if actionUrl == "":
-                actionUrl = '%s/content_status_modify?workflow_action=%s' % (
-                    context.absolute_url(), action['id'])
+            if actionUrl == '':
+                actionUrl = '{0}/content_status_modify?workflow_action={1}'
+                actionUrl = actionUrl.format(
+                    context.absolute_url(),
+                    action['id'],
+                )
                 cssClass = ''
 
             description = ''
@@ -750,12 +764,14 @@ def getMenuItems(self, context, request):
             if transition is not None:
                 description = transition.description
 
+            baseUrl = '{0}/content_status_modify?workflow_action={1}'
             for bogus in self.BOGUS_WORKFLOW_ACTIONS:
                 if actionUrl.endswith(bogus):
                     if getattr(context, bogus, None) is None:
-                        baseUrl = '%s/content_status_modify?workflow_action=%s'
-                        actionUrl = baseUrl % (context.absolute_url(),
-                                               action['id'])
+                        actionUrl = baseUrl.format(
+                            context.absolute_url(),
+                            action['id'],
+                        )
                         cssClass = ''
                     break
 
@@ -767,7 +783,7 @@ def getMenuItems(self, context, request):
                     'selected': False,
                     'icon': None,
                     'extra': {
-                        'id': 'workflow-transition-%s' % action['id'],
+                        'id': 'workflow-transition-{0}'.format(action['id']),
                         'separator': None,
                         'class': cssClass},
                     'submenu': None,
@@ -893,14 +909,14 @@ def getMenuItems(self, context, request):
                 'title': ' '.join(manager_name.split('.')).title(),
                 'description': ' '.join(manager_name.split('.')).title(),
                 'action': addTokenToUrl(
-                    '%s/@@topbar-manage-portlets/%s' % (
+                    '{0}/@@topbar-manage-portlets/{1}'.format(
                         current_url,
                         manager_name),
                     request),
                 'selected': False,
                 'icon': None,
                 'extra': {
-                    'id': 'portlet-manager-%s' % manager_name,
+                    'id': 'portlet-manager-{0}'.format(manager_name),
                     'separator': None},
                 'submenu': None,
             }
diff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py
index 4677e1f..9852297 100644
--- a/plone/app/contentmenu/testing.py
+++ b/plone/app/contentmenu/testing.py
@@ -51,7 +51,7 @@ def tearDownZope(self, app):
         z2.uninstallProduct(app, 'Products.Archetypes')
 
     def setUpPloneSite(self, portal):
-        portal.portal_workflow.setDefaultChain("simple_publication_workflow")
+        portal.portal_workflow.setDefaultChain('simple_publication_workflow')
         # install Products.ATContentTypes manually if profile is available
         # (this is only needed for Plone >= 5)
         profiles = [x['id'] for x in portal.portal_setup.listProfileInfo()]
@@ -67,26 +67,26 @@ def setUpPloneSite(self, portal):
 PLONE_APP_CONTENTMENU_FIXTURE = PloneAppContentmenu()
 PLONE_APP_CONTENTMENU_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),
-    name="PloneAppContentmenu:Integration")
+    name='PloneAppContentmenu:Integration')
 PLONE_APP_CONTENTMENU_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),
-    name="PloneAppContentmenu:Functional")
+    name='PloneAppContentmenu:Functional')
 
 
 # Dexterity test layers
 PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
-    name="PloneAppContentmenuDX:Integration")
+    name='PloneAppContentmenuDX:Integration')
 PLONE_APP_CONTENTMENU_DX_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
-    name="PloneAppContentmenuDX:Functional")
+    name='PloneAppContentmenuDX:Functional')
 
 
 # AT test layers
 PLONE_APP_CONTENTMENU_AT_FIXTURE = PloneAppContentmenuAT()
 PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),
-    name="PloneAppContentmenuAT:Integration")
+    name='PloneAppContentmenuAT:Integration')
 PLONE_APP_CONTENTMENU_AT_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),
-    name="PloneAppContentmenuAT:Functional")
+    name='PloneAppContentmenuAT:Functional')
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 530a10b..7090652 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -112,9 +112,14 @@ def testDefaultPageIncludesParentOnlyWhenItemHasSingleView(self):
         self.folder.invokeFactory('Document', 'doc1')
         self.folder.setDefaultPage('doc1')
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
-        self.assertTrue('folderDefaultPageDisplay' in
-                        [a['extra']['id'] for a in actions])
-        self.assertFalse('document_view' in [a['extra']['id'] for a in actions])
+        self.assertIn(
+            'folderDefaultPageDisplay',
+            [a['extra']['id'] for a in actions],
+        )
+        self.assertNotIn(
+            'document_view',
+            [a['extra']['id'] for a in actions],
+        )
 
     def testDefaultPageIncludesParentAndItemViewsWhenItemHasMultipleViews(self):  # noqa
         fti = self.portal.portal_types['Document']
@@ -180,8 +185,10 @@ def testSelectItemNotIncludedInNonStructuralFolder(self):
         self.folder.invokeFactory('Folder', 'f1')
         directlyProvides(self.folder.f1, INonStructuralFolder)
         actions = self.menu.getMenuItems(self.folder.f1, self.request)
-        self.assertFalse('contextSetDefaultPage' in
-                    [a['extra']['id'] for a in actions])
+        self.assertNotIn(
+            'contextSetDefaultPage',
+            [a['extra']['id'] for a in actions],
+        )
 
     def testDefaultPageSelectedAndOverridesLayout(self):
         self.folder.invokeFactory('Document', 'doc1')
@@ -201,10 +208,14 @@ def testDefaultPageCanBeChangedInFolder(self):
         self.folder.invokeFactory('Document', 'doc1')
         self.folder.setDefaultPage('doc1')
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
-        self.assertTrue('folderChangeDefaultPage' in
-                        [a['extra']['id'] for a in actions])
-        self.assertFalse('contextChangeDefaultPage' in
-                    [a['extra']['id'] for a in actions])
+        self.assertIn(
+            'folderChangeDefaultPage',
+            [a['extra']['id'] for a in actions],
+        )
+        self.assertNotIn(
+            'contextChangeDefaultPage',
+            [a['extra']['id'] for a in actions],
+        )
 
     # Headers/separators
 
@@ -249,14 +260,14 @@ def testSeparatorsNotDisplayedWhenViewingFolder(self):
 
     def testDefaultPageTemplateTitle(self):
         self.folder.invokeFactory('Document', 'doc1')
-        self.folder.doc1.setTitle("New Document")
+        self.folder.doc1.setTitle('New Document')
         self.folder.setDefaultPage('doc1')
         actions = self.menu.getMenuItems(self.folder, self.request)
         changeAction = [x for x in actions if
                         x['extra']['id'] == 'contextDefaultPageDisplay'][0]
         changeAction['title'].default
         self.assertEqual(
-            u"New Document",
+            u'New Document',
             changeAction['title'].mapping['contentitem']
         )
 
@@ -302,11 +313,16 @@ def testAddViewExpressionUsedInMenu(self):
         urls = [a['action'] for a in actions]
         self.assertIn('custom_expr', urls)
         if self.is_dx:
-            self.assertIn('%s/++add++File' % self.folder.absolute_url(), urls)
+            self.assertIn(
+                '{0}/++add++File'.format(self.folder.absolute_url()),
+                urls,
+            )
         else:
             found = False
+            create_url = '{0}/createObject?type_name=File'
+            create_url = create_url.format(self.folder.absolute_url())
             for url in urls:
-                if '%s/createObject?type_name=File' % self.folder.absolute_url() in url:  # noqa
+                if create_url in url:
                     found = True
             self.assertTrue(found)
 
@@ -546,9 +562,9 @@ def testMenuIncludesActions(self):
         # usual in older workflows, and which is nice to keep
         # supporting.
         context = self.folder.doc1
-        wf_tool = getToolByName(context, "portal_workflow")
+        wf_tool = getToolByName(context, 'portal_workflow')
         submit = wf_tool.plone_workflow.transitions['submit']
-        submit.actbox_url = ""
+        submit.actbox_url = ''
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
         self.assertTrue('workflow-transition-submit' in
                         [a['extra']['id'] for a in actions])
@@ -646,8 +662,9 @@ def testNoTransitions(self):
     def testAdvancedIncluded(self):
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
         base_url = self.folder.doc1.absolute_url()
-        url_plone5 = '%s/@@topbar-manage-portlets/plone.leftcolumn' % base_url
-        url_plone4 = '%s/manage-portlets' % base_url
+        url_plone5 = '{0}/@@topbar-manage-portlets/plone.leftcolumn'
+        url_plone5 = url_plone5.format(base_url)
+        url_plone4 = '{0}/manage-portlets'.format(base_url)
         self.assertTrue(
             url_plone5 in [a['action'] for a in actions][1] or
             url_plone4 in [a['action'] for a in actions][1]
@@ -851,7 +868,7 @@ def testWorkflowMenuWithNoTransitionsDisabled(self):
             i['extra']['id'] == 'plone-contentmenu-workflow'][0]
         self.assertEqual(workflowMenuItem['action'], '')
 
-    @unittest.skip("Unable to write a proper test so far")
+    @unittest.skip('Unable to write a proper test so far')
     def testWorkflowMenuWithNoTransitionsEnabledAsManager(self):
         # set workflow guard condition that fails, so there are no transitions.
         # then show that manager will get a drop-down with settings whilst
@@ -877,8 +894,10 @@ def testWorkflowMenuWithNoWorkflowNotIncluded(self):
         self.portal.portal_workflow.setChainForPortalTypes(('Document',), ())
         self.folder.invokeFactory('Document', 'doc1')
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
-        self.assertFalse('plone_contentmenu_workflow' in
-                    [a['extra']['id'] for a in actions])
+        self.assertNotIn(
+            'plone_contentmenu_workflow',
+            [a['extra']['id'] for a in actions],
+        )
 
 
 class TestContentMenuDX(TestContentMenuAT):


Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2016-10-06T10:13:06+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.contentmenu/commit/5c75689e751e97f398c1d6151bf4f47e2bc85c4b

Merge pull request #16 from plone/gforcada-patch-1

Cleanup

Files changed:
M CHANGES.rst
M plone/app/contentmenu/menu.py
M plone/app/contentmenu/testing.py
M plone/app/contentmenu/tests/test_menu.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 49d72a0..05433b0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Code cleanup.
+  [gforcad]
 
 2.1.9 (2016-10-03)
 ------------------
diff --git a/plone/app/contentmenu/menu.py b/plone/app/contentmenu/menu.py
index c254bea..a1471de 100644
--- a/plone/app/contentmenu/menu.py
+++ b/plone/app/contentmenu/menu.py
@@ -102,7 +102,7 @@ def getMenuItems(self, context, request):
             if not action['allowed']:
                 continue
             aid = action['id']
-            cssClass = 'actionicon-object_buttons-%s' % aid
+            cssClass = 'actionicon-object_buttons-{0}'.format(aid)
             icon = action.get('icon', None)
             modal = action.get('modal', None)
             if modal:
@@ -273,7 +273,7 @@ def getMenuItems(self, obj, request):
                 contextCanSetLayout or contextCanSetDefaultPage):
             return []
 
-        # Only show the block "Folder display" and "Item display" separators if
+        # Only show the block 'Folder display' and 'Item display' separators if
         # they are necessars
         useSeparators = False
         if folderCanSetLayout or folderCanSetDefaultPage:
@@ -305,8 +305,12 @@ def getMenuItems(self, obj, request):
                         'title': title,
                         'description': '',
                         'action': addTokenToUrl(
-                            '%s/selectViewTemplate?templateId=%s' % (
-                                folderUrl, id,), request),
+                            '{0}/selectViewTemplate?templateId={1}'.format(
+                                folderUrl,
+                                id,
+                            ),
+                            request
+                        ),
                         'selected': False,
                         'icon': None,
                         'extra': {
@@ -340,7 +344,7 @@ def getMenuItems(self, obj, request):
                     'description': _(u'title_change_default_view_item',
                                      default=u'Change the item used as default'
                                              u' view in this folder'),
-                    'action': '%s/select_default_page' % (folderUrl,),
+                    'action': '{0}/select_default_page'.format(folderUrl),
                     'selected': False,
                     'icon': None,
                     'extra': {
@@ -384,8 +388,12 @@ def getMenuItems(self, obj, request):
                         'title': title,
                         'description': '',
                         'action': addTokenToUrl(
-                            '%s/selectViewTemplate?templateId=%s' % (
-                                contextUrl, id,), request),
+                            '{0}/selectViewTemplate?templateId={1}'.format(
+                                contextUrl,
+                                id,
+                            ),
+                            request
+                        ),
                         'selected': is_selected,
                         'icon': None,
                         'extra': {
@@ -410,7 +418,7 @@ def getMenuItems(self, obj, request):
                                 default=u'Select an item to be used as '
                                         u'default view in this folder...'),
                             'action': addTokenToUrl(
-                                '%s/select_default_page' % (contextUrl,),
+                                '{0}/select_default_page'.format(contextUrl),
                                 request),
                             'selected': False,
                             'icon': None,
@@ -422,9 +430,9 @@ def getMenuItems(self, obj, request):
                         })
                 else:
                     defaultPageObj = getattr(obj, defaultPage, None)
-                    defaultPageTitle = u""
+                    defaultPageTitle = u''
                     if defaultPageObj is not None:
-                        if hasattr(aq_base(defaultPageObj), 'Title'):
+                        if getattr(aq_base(defaultPageObj), 'Title'):
                             defaultPageTitle = defaultPageObj.Title()
                         else:
                             defaultPageTitle = getattr(aq_base(defaultPageObj),
@@ -454,7 +462,9 @@ def getMenuItems(self, obj, request):
                                 u'title_change_default_view_item',
                                 default=u'Change the item used as default '
                                         u'view in this folder'),
-                            'action': '%s/select_default_page' % (contextUrl,),
+                            'action': '{0}/select_default_page'.format(
+                                contextUrl
+                            ),
                             'selected': False,
                             'icon': None,
                             'extra': {
@@ -491,7 +501,7 @@ def extra(self):
     @property
     def action(self):
         return addTokenToUrl(
-            '%s/folder_factories' % self._addContext().absolute_url(),
+            '{0}/folder_factories'.format(self._addContext().absolute_url()),
             self.request
         )
 
@@ -566,7 +576,7 @@ def getMenuItems(self, context, request):
         results = factories_view.addable_types(include=include)
 
         if haveMore:
-            url = '%s/folder_factories' % (addContext.absolute_url(),)
+            url = '{0}/folder_factories'.format(addContext.absolute_url())
             results.append({
                 'title': _(u'folder_add_more', default=u'More\u2026'),
                 'description': _(u'Show all available content types'),
@@ -584,8 +594,9 @@ def getMenuItems(self, context, request):
         if constraints is not None:
             if constraints.canSetConstrainTypes() and \
                     constraints.getDefaultAddableTypes():
-                url = '%s/folder_constraintypes_form' % (
-                    addContext.absolute_url(),)
+                url = '{0}/folder_constraintypes_form'.format(
+                    addContext.absolute_url(),
+                )
                 results.append({
                     'title': _(u'folder_add_settings',
                                default=u'Restrictions\u2026'),
@@ -659,7 +670,7 @@ def extra(self):
         state = self.context_state.workflow_state()
         stateTitle = self._currentStateTitle()
         return {'id': 'plone-contentmenu-workflow',
-                'class': 'state-%s' % state,
+                'class': 'state-{0}'.format(state),
                 'state': state,
                 'stateTitle': stateTitle,
                 'li_class': 'plonetoolbar-workfow-transition'}
@@ -739,9 +750,12 @@ def getMenuItems(self, context, request):
 
             cssClass = ''
             actionUrl = action['url']
-            if actionUrl == "":
-                actionUrl = '%s/content_status_modify?workflow_action=%s' % (
-                    context.absolute_url(), action['id'])
+            if actionUrl == '':
+                actionUrl = '{0}/content_status_modify?workflow_action={1}'
+                actionUrl = actionUrl.format(
+                    context.absolute_url(),
+                    action['id'],
+                )
                 cssClass = ''
 
             description = ''
@@ -750,12 +764,14 @@ def getMenuItems(self, context, request):
             if transition is not None:
                 description = transition.description
 
+            baseUrl = '{0}/content_status_modify?workflow_action={1}'
             for bogus in self.BOGUS_WORKFLOW_ACTIONS:
                 if actionUrl.endswith(bogus):
                     if getattr(context, bogus, None) is None:
-                        baseUrl = '%s/content_status_modify?workflow_action=%s'
-                        actionUrl = baseUrl % (context.absolute_url(),
-                                               action['id'])
+                        actionUrl = baseUrl.format(
+                            context.absolute_url(),
+                            action['id'],
+                        )
                         cssClass = ''
                     break
 
@@ -767,7 +783,7 @@ def getMenuItems(self, context, request):
                     'selected': False,
                     'icon': None,
                     'extra': {
-                        'id': 'workflow-transition-%s' % action['id'],
+                        'id': 'workflow-transition-{0}'.format(action['id']),
                         'separator': None,
                         'class': cssClass},
                     'submenu': None,
@@ -893,14 +909,14 @@ def getMenuItems(self, context, request):
                 'title': ' '.join(manager_name.split('.')).title(),
                 'description': ' '.join(manager_name.split('.')).title(),
                 'action': addTokenToUrl(
-                    '%s/@@topbar-manage-portlets/%s' % (
+                    '{0}/@@topbar-manage-portlets/{1}'.format(
                         current_url,
                         manager_name),
                     request),
                 'selected': False,
                 'icon': None,
                 'extra': {
-                    'id': 'portlet-manager-%s' % manager_name,
+                    'id': 'portlet-manager-{0}'.format(manager_name),
                     'separator': None},
                 'submenu': None,
             }
diff --git a/plone/app/contentmenu/testing.py b/plone/app/contentmenu/testing.py
index 4677e1f..9852297 100644
--- a/plone/app/contentmenu/testing.py
+++ b/plone/app/contentmenu/testing.py
@@ -51,7 +51,7 @@ def tearDownZope(self, app):
         z2.uninstallProduct(app, 'Products.Archetypes')
 
     def setUpPloneSite(self, portal):
-        portal.portal_workflow.setDefaultChain("simple_publication_workflow")
+        portal.portal_workflow.setDefaultChain('simple_publication_workflow')
         # install Products.ATContentTypes manually if profile is available
         # (this is only needed for Plone >= 5)
         profiles = [x['id'] for x in portal.portal_setup.listProfileInfo()]
@@ -67,26 +67,26 @@ def setUpPloneSite(self, portal):
 PLONE_APP_CONTENTMENU_FIXTURE = PloneAppContentmenu()
 PLONE_APP_CONTENTMENU_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),
-    name="PloneAppContentmenu:Integration")
+    name='PloneAppContentmenu:Integration')
 PLONE_APP_CONTENTMENU_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CONTENTMENU_FIXTURE, ),
-    name="PloneAppContentmenu:Functional")
+    name='PloneAppContentmenu:Functional')
 
 
 # Dexterity test layers
 PLONE_APP_CONTENTMENU_DX_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
-    name="PloneAppContentmenuDX:Integration")
+    name='PloneAppContentmenuDX:Integration')
 PLONE_APP_CONTENTMENU_DX_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CONTENTTYPES_FIXTURE, ),
-    name="PloneAppContentmenuDX:Functional")
+    name='PloneAppContentmenuDX:Functional')
 
 
 # AT test layers
 PLONE_APP_CONTENTMENU_AT_FIXTURE = PloneAppContentmenuAT()
 PLONE_APP_CONTENTMENU_AT_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),
-    name="PloneAppContentmenuAT:Integration")
+    name='PloneAppContentmenuAT:Integration')
 PLONE_APP_CONTENTMENU_AT_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CONTENTMENU_AT_FIXTURE, ),
-    name="PloneAppContentmenuAT:Functional")
+    name='PloneAppContentmenuAT:Functional')
diff --git a/plone/app/contentmenu/tests/test_menu.py b/plone/app/contentmenu/tests/test_menu.py
index 530a10b..7090652 100644
--- a/plone/app/contentmenu/tests/test_menu.py
+++ b/plone/app/contentmenu/tests/test_menu.py
@@ -112,9 +112,14 @@ def testDefaultPageIncludesParentOnlyWhenItemHasSingleView(self):
         self.folder.invokeFactory('Document', 'doc1')
         self.folder.setDefaultPage('doc1')
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
-        self.assertTrue('folderDefaultPageDisplay' in
-                        [a['extra']['id'] for a in actions])
-        self.assertFalse('document_view' in [a['extra']['id'] for a in actions])
+        self.assertIn(
+            'folderDefaultPageDisplay',
+            [a['extra']['id'] for a in actions],
+        )
+        self.assertNotIn(
+            'document_view',
+            [a['extra']['id'] for a in actions],
+        )
 
     def testDefaultPageIncludesParentAndItemViewsWhenItemHasMultipleViews(self):  # noqa
         fti = self.portal.portal_types['Document']
@@ -180,8 +185,10 @@ def testSelectItemNotIncludedInNonStructuralFolder(self):
         self.folder.invokeFactory('Folder', 'f1')
         directlyProvides(self.folder.f1, INonStructuralFolder)
         actions = self.menu.getMenuItems(self.folder.f1, self.request)
-        self.assertFalse('contextSetDefaultPage' in
-                    [a['extra']['id'] for a in actions])
+        self.assertNotIn(
+            'contextSetDefaultPage',
+            [a['extra']['id'] for a in actions],
+        )
 
     def testDefaultPageSelectedAndOverridesLayout(self):
         self.folder.invokeFactory('Document', 'doc1')
@@ -201,10 +208,14 @@ def testDefaultPageCanBeChangedInFolder(self):
         self.folder.invokeFactory('Document', 'doc1')
         self.folder.setDefaultPage('doc1')
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
-        self.assertTrue('folderChangeDefaultPage' in
-                        [a['extra']['id'] for a in actions])
-        self.assertFalse('contextChangeDefaultPage' in
-                    [a['extra']['id'] for a in actions])
+        self.assertIn(
+            'folderChangeDefaultPage',
+            [a['extra']['id'] for a in actions],
+        )
+        self.assertNotIn(
+            'contextChangeDefaultPage',
+            [a['extra']['id'] for a in actions],
+        )
 
     # Headers/separators
 
@@ -249,14 +260,14 @@ def testSeparatorsNotDisplayedWhenViewingFolder(self):
 
     def testDefaultPageTemplateTitle(self):
         self.folder.invokeFactory('Document', 'doc1')
-        self.folder.doc1.setTitle("New Document")
+        self.folder.doc1.setTitle('New Document')
         self.folder.setDefaultPage('doc1')
         actions = self.menu.getMenuItems(self.folder, self.request)
         changeAction = [x for x in actions if
                         x['extra']['id'] == 'contextDefaultPageDisplay'][0]
         changeAction['title'].default
         self.assertEqual(
-            u"New Document",
+            u'New Document',
             changeAction['title'].mapping['contentitem']
         )
 
@@ -302,11 +313,16 @@ def testAddViewExpressionUsedInMenu(self):
         urls = [a['action'] for a in actions]
         self.assertIn('custom_expr', urls)
         if self.is_dx:
-            self.assertIn('%s/++add++File' % self.folder.absolute_url(), urls)
+            self.assertIn(
+                '{0}/++add++File'.format(self.folder.absolute_url()),
+                urls,
+            )
         else:
             found = False
+            create_url = '{0}/createObject?type_name=File'
+            create_url = create_url.format(self.folder.absolute_url())
             for url in urls:
-                if '%s/createObject?type_name=File' % self.folder.absolute_url() in url:  # noqa
+                if create_url in url:
                     found = True
             self.assertTrue(found)
 
@@ -546,9 +562,9 @@ def testMenuIncludesActions(self):
         # usual in older workflows, and which is nice to keep
         # supporting.
         context = self.folder.doc1
-        wf_tool = getToolByName(context, "portal_workflow")
+        wf_tool = getToolByName(context, 'portal_workflow')
         submit = wf_tool.plone_workflow.transitions['submit']
-        submit.actbox_url = ""
+        submit.actbox_url = ''
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
         self.assertTrue('workflow-transition-submit' in
                         [a['extra']['id'] for a in actions])
@@ -646,8 +662,9 @@ def testNoTransitions(self):
     def testAdvancedIncluded(self):
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
         base_url = self.folder.doc1.absolute_url()
-        url_plone5 = '%s/@@topbar-manage-portlets/plone.leftcolumn' % base_url
-        url_plone4 = '%s/manage-portlets' % base_url
+        url_plone5 = '{0}/@@topbar-manage-portlets/plone.leftcolumn'
+        url_plone5 = url_plone5.format(base_url)
+        url_plone4 = '{0}/manage-portlets'.format(base_url)
         self.assertTrue(
             url_plone5 in [a['action'] for a in actions][1] or
             url_plone4 in [a['action'] for a in actions][1]
@@ -851,7 +868,7 @@ def testWorkflowMenuWithNoTransitionsDisabled(self):
             i['extra']['id'] == 'plone-contentmenu-workflow'][0]
         self.assertEqual(workflowMenuItem['action'], '')
 
-    @unittest.skip("Unable to write a proper test so far")
+    @unittest.skip('Unable to write a proper test so far')
     def testWorkflowMenuWithNoTransitionsEnabledAsManager(self):
         # set workflow guard condition that fails, so there are no transitions.
         # then show that manager will get a drop-down with settings whilst
@@ -877,8 +894,10 @@ def testWorkflowMenuWithNoWorkflowNotIncluded(self):
         self.portal.portal_workflow.setChainForPortalTypes(('Document',), ())
         self.folder.invokeFactory('Document', 'doc1')
         actions = self.menu.getMenuItems(self.folder.doc1, self.request)
-        self.assertFalse('plone_contentmenu_workflow' in
-                    [a['extra']['id'] for a in actions])
+        self.assertNotIn(
+            'plone_contentmenu_workflow',
+            [a['extra']['id'] for a in actions],
+        )
 
 
 class TestContentMenuDX(TestContentMenuAT):


