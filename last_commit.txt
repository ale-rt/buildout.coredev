Repository: plone.contentrules


Branch: refs/heads/master
Date: 2016-07-05T23:15:09+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.contentrules/commit/245e2bbc33258a798958f464778480dd619e1993

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M plone/contentrules/engine/assignments.py
M plone/contentrules/engine/executor.py
M plone/contentrules/engine/storage.py
M plone/contentrules/rule/element.py
M plone/contentrules/rule/eventvocab.py
M plone/contentrules/rule/rule.py
M plone/contentrules/rule/tests/elements.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a18d770..fa0b4ae 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.0.5 (2016-02-25)
diff --git a/plone/contentrules/engine/assignments.py b/plone/contentrules/engine/assignments.py
index b316a7c..87f779b 100644
--- a/plone/contentrules/engine/assignments.py
+++ b/plone/contentrules/engine/assignments.py
@@ -2,7 +2,7 @@
 
 from OFS.Uninstalled import BrokenClass
 from ZODB.broken import PersistentBroken
-from zope.interface import implements, implementer
+from zope.interface import implementer, implementer
 from zope.component import adapter, queryUtility
 from zope.annotation.interfaces import IAnnotations
 from zope.container.ordered import OrderedContainer
@@ -34,10 +34,10 @@ def check_rules_with_dotted_name_moved(rule):
 
 KEY = 'plone.contentrules.localassignments'
 
+@implementer(IRuleAssignment)
 class RuleAssignment(Contained, Persistent):
     """An assignment of a rule to a context
     """
-    implements(IRuleAssignment)
 
     def __init__(self, ruleid, enabled=True, bubbles=False):
         super(RuleAssignment, self).__init__()
@@ -45,10 +45,10 @@ def __init__(self, ruleid, enabled=True, bubbles=False):
         self.enabled = enabled
         self.bubbles = bubbles
 
+@implementer(IRuleAssignmentManager)
 class RuleAssignmentManager(OrderedContainer):
     """A context-specific container for rule assignments
     """
-    implements(IRuleAssignmentManager)
 
     def __init__(self):
         # XXX: This depends on implementation detail in OrderedContainer,
diff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py
index 36fc0f9..ba012fd 100644
--- a/plone/contentrules/engine/executor.py
+++ b/plone/contentrules/engine/executor.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleExecutor
@@ -9,11 +9,10 @@
 
 from plone.contentrules.rule.interfaces import IExecutable
 
+@implementer(IRuleExecutor)
 class RuleExecutor(object):
     """An object that can execute rules in its context.
     """
-
-    implements(IRuleExecutor)
     adapts(IRuleAssignable)
 
     def __init__(self, context):
diff --git a/plone/contentrules/engine/storage.py b/plone/contentrules/engine/storage.py
index 8db3eef..0105015 100644
--- a/plone/contentrules/engine/storage.py
+++ b/plone/contentrules/engine/storage.py
@@ -1,16 +1,15 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.container.ordered import OrderedContainer
 
 from plone.contentrules.engine.interfaces import IRuleStorage
 
 from BTrees.OOBTree import OOBTree
 
+@implementer(IRuleStorage)
 class RuleStorage(OrderedContainer):
     """A container for rules.
     """
 
-    implements(IRuleStorage)
-
     active = True
 
     def __init__(self):
diff --git a/plone/contentrules/rule/element.py b/plone/contentrules/rule/element.py
index 59b08fc..a8744c0 100644
--- a/plone/contentrules/rule/element.py
+++ b/plone/contentrules/rule/element.py
@@ -1,7 +1,8 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 from plone.contentrules.rule.interfaces import IRuleElement, IRuleCondition, IRuleAction
 
+@implementer(IRuleElement)
 class RuleElement(object):
     """A rule element.
 
@@ -9,8 +10,6 @@ class RuleElement(object):
     register them as utilities.
     """
 
-    implements(IRuleElement)
-
     title = u''
     description = u''
     for_ = Interface
@@ -20,6 +19,7 @@ class RuleElement(object):
     schema = None
     factory = None
 
+@implementer(IRuleCondition)
 class RuleCondition(RuleElement):
     """A rule condition.
 
@@ -27,8 +27,8 @@ class RuleCondition(RuleElement):
     specific interface to enable the UI to differentate between different types
     of elements.
     """
-    implements(IRuleCondition)
 
+@implementer(IRuleAction)
 class RuleAction(RuleElement):
     """A rule action.
 
@@ -36,4 +36,3 @@ class RuleAction(RuleElement):
     specific interface to enable the UI to differentate between different types
     of elements.
     """
-    implements(IRuleAction)
diff --git a/plone/contentrules/rule/eventvocab.py b/plone/contentrules/rule/eventvocab.py
index fe68672..8108332 100644
--- a/plone/contentrules/rule/eventvocab.py
+++ b/plone/contentrules/rule/eventvocab.py
@@ -1,4 +1,4 @@
-from zope.interface import Interface, classProvides
+from zope.interface import Interface, provider
 from zope.interface.interfaces import IInterface
 import zope.component
 from zope.schema.interfaces import IVocabularyFactory
@@ -12,13 +12,13 @@
 
 _ = MessageFactory('plone')
 
+@provider(IVocabularyFactory)
 class EventTypesVocabulary(UtilityVocabulary):
     """A vocabulary for event interfaces that can be selected for the 'event'
     attribute of an IRule.
     An internationalized version of UtilityVocabulary
     """
     interface = IRuleEventType
-    classProvides(IVocabularyFactory)
 
     def __init__(self, context, **kw):
         if kw:
diff --git a/plone/contentrules/rule/rule.py b/plone/contentrules/rule/rule.py
index 1972ce5..714dcaa 100644
--- a/plone/contentrules/rule/rule.py
+++ b/plone/contentrules/rule/rule.py
@@ -1,18 +1,17 @@
 from persistent import Persistent
 from persistent.list import PersistentList
 
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts, getMultiAdapter
 
 from plone.contentrules.rule.interfaces import IRule
 from plone.contentrules.rule.interfaces import IExecutable
 
+@implementer(IRule)
 class Rule(Persistent):
     """A rule.
     """
 
-    implements(IRule)
-
     title = u''
     description = u''
     event = None
@@ -27,11 +26,10 @@ def __init__(self):
         self.conditions = PersistentList()
         self.actions = PersistentList()
 
+@implementer(IExecutable)
 class RuleExecutable(object):
     """An adapter capable of executing a rule
     """
-
-    implements(IExecutable)
     adapts(Interface, IRule, Interface)
 
     def __init__(self, context, rule, event):
diff --git a/plone/contentrules/rule/tests/elements.py b/plone/contentrules/rule/tests/elements.py
index 0ce9b40..4661755 100644
--- a/plone/contentrules/rule/tests/elements.py
+++ b/plone/contentrules/rule/tests/elements.py
@@ -1,7 +1,7 @@
 """Dummies used in ZCML tests
 """
 
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 from zope import schema
 
 from plone.contentrules.rule.interfaces import IRuleElementData
@@ -9,8 +9,8 @@
 class ITestCondition(Interface):
     test = schema.TextLine(title=u"Test property")
 
+@implementer(ITestCondition, IRuleElementData)
 class TestCondition(object):
-    implements(ITestCondition, IRuleElementData)
     test = u""
 
     summary = u"Test condition"
@@ -19,8 +19,8 @@ class TestCondition(object):
 class ITestAction(Interface):
     test = schema.TextLine(title=u"Test property")
 
+@implementer(ITestAction, IRuleElementData)
 class TestAction(object):
-    implements(ITestAction, IRuleElementData)
     test = u""
 
     summary = u"Test action"


Repository: plone.contentrules


Branch: refs/heads/master
Date: 2016-07-07T00:50:52+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.contentrules/commit/4ed67d166da2695dd2a198209805ff18023b37f4

Merge pull request #5 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.rst
M plone/contentrules/engine/assignments.py
M plone/contentrules/engine/executor.py
M plone/contentrules/engine/storage.py
M plone/contentrules/rule/element.py
M plone/contentrules/rule/eventvocab.py
M plone/contentrules/rule/rule.py
M plone/contentrules/rule/tests/elements.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a18d770..fa0b4ae 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.0.5 (2016-02-25)
diff --git a/plone/contentrules/engine/assignments.py b/plone/contentrules/engine/assignments.py
index b316a7c..87f779b 100644
--- a/plone/contentrules/engine/assignments.py
+++ b/plone/contentrules/engine/assignments.py
@@ -2,7 +2,7 @@
 
 from OFS.Uninstalled import BrokenClass
 from ZODB.broken import PersistentBroken
-from zope.interface import implements, implementer
+from zope.interface import implementer, implementer
 from zope.component import adapter, queryUtility
 from zope.annotation.interfaces import IAnnotations
 from zope.container.ordered import OrderedContainer
@@ -34,10 +34,10 @@ def check_rules_with_dotted_name_moved(rule):
 
 KEY = 'plone.contentrules.localassignments'
 
+@implementer(IRuleAssignment)
 class RuleAssignment(Contained, Persistent):
     """An assignment of a rule to a context
     """
-    implements(IRuleAssignment)
 
     def __init__(self, ruleid, enabled=True, bubbles=False):
         super(RuleAssignment, self).__init__()
@@ -45,10 +45,10 @@ def __init__(self, ruleid, enabled=True, bubbles=False):
         self.enabled = enabled
         self.bubbles = bubbles
 
+@implementer(IRuleAssignmentManager)
 class RuleAssignmentManager(OrderedContainer):
     """A context-specific container for rule assignments
     """
-    implements(IRuleAssignmentManager)
 
     def __init__(self):
         # XXX: This depends on implementation detail in OrderedContainer,
diff --git a/plone/contentrules/engine/executor.py b/plone/contentrules/engine/executor.py
index 36fc0f9..ba012fd 100644
--- a/plone/contentrules/engine/executor.py
+++ b/plone/contentrules/engine/executor.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts, getMultiAdapter
 
 from plone.contentrules.engine.interfaces import IRuleExecutor
@@ -9,11 +9,10 @@
 
 from plone.contentrules.rule.interfaces import IExecutable
 
+@implementer(IRuleExecutor)
 class RuleExecutor(object):
     """An object that can execute rules in its context.
     """
-
-    implements(IRuleExecutor)
     adapts(IRuleAssignable)
 
     def __init__(self, context):
diff --git a/plone/contentrules/engine/storage.py b/plone/contentrules/engine/storage.py
index 8db3eef..0105015 100644
--- a/plone/contentrules/engine/storage.py
+++ b/plone/contentrules/engine/storage.py
@@ -1,16 +1,15 @@
-from zope.interface import implements
+from zope.interface import implementer
 from zope.container.ordered import OrderedContainer
 
 from plone.contentrules.engine.interfaces import IRuleStorage
 
 from BTrees.OOBTree import OOBTree
 
+@implementer(IRuleStorage)
 class RuleStorage(OrderedContainer):
     """A container for rules.
     """
 
-    implements(IRuleStorage)
-
     active = True
 
     def __init__(self):
diff --git a/plone/contentrules/rule/element.py b/plone/contentrules/rule/element.py
index 59b08fc..a8744c0 100644
--- a/plone/contentrules/rule/element.py
+++ b/plone/contentrules/rule/element.py
@@ -1,7 +1,8 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 
 from plone.contentrules.rule.interfaces import IRuleElement, IRuleCondition, IRuleAction
 
+@implementer(IRuleElement)
 class RuleElement(object):
     """A rule element.
 
@@ -9,8 +10,6 @@ class RuleElement(object):
     register them as utilities.
     """
 
-    implements(IRuleElement)
-
     title = u''
     description = u''
     for_ = Interface
@@ -20,6 +19,7 @@ class RuleElement(object):
     schema = None
     factory = None
 
+@implementer(IRuleCondition)
 class RuleCondition(RuleElement):
     """A rule condition.
 
@@ -27,8 +27,8 @@ class RuleCondition(RuleElement):
     specific interface to enable the UI to differentate between different types
     of elements.
     """
-    implements(IRuleCondition)
 
+@implementer(IRuleAction)
 class RuleAction(RuleElement):
     """A rule action.
 
@@ -36,4 +36,3 @@ class RuleAction(RuleElement):
     specific interface to enable the UI to differentate between different types
     of elements.
     """
-    implements(IRuleAction)
diff --git a/plone/contentrules/rule/eventvocab.py b/plone/contentrules/rule/eventvocab.py
index fe68672..8108332 100644
--- a/plone/contentrules/rule/eventvocab.py
+++ b/plone/contentrules/rule/eventvocab.py
@@ -1,4 +1,4 @@
-from zope.interface import Interface, classProvides
+from zope.interface import Interface, provider
 from zope.interface.interfaces import IInterface
 import zope.component
 from zope.schema.interfaces import IVocabularyFactory
@@ -12,13 +12,13 @@
 
 _ = MessageFactory('plone')
 
+@provider(IVocabularyFactory)
 class EventTypesVocabulary(UtilityVocabulary):
     """A vocabulary for event interfaces that can be selected for the 'event'
     attribute of an IRule.
     An internationalized version of UtilityVocabulary
     """
     interface = IRuleEventType
-    classProvides(IVocabularyFactory)
 
     def __init__(self, context, **kw):
         if kw:
diff --git a/plone/contentrules/rule/rule.py b/plone/contentrules/rule/rule.py
index 1972ce5..714dcaa 100644
--- a/plone/contentrules/rule/rule.py
+++ b/plone/contentrules/rule/rule.py
@@ -1,18 +1,17 @@
 from persistent import Persistent
 from persistent.list import PersistentList
 
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts, getMultiAdapter
 
 from plone.contentrules.rule.interfaces import IRule
 from plone.contentrules.rule.interfaces import IExecutable
 
+@implementer(IRule)
 class Rule(Persistent):
     """A rule.
     """
 
-    implements(IRule)
-
     title = u''
     description = u''
     event = None
@@ -27,11 +26,10 @@ def __init__(self):
         self.conditions = PersistentList()
         self.actions = PersistentList()
 
+@implementer(IExecutable)
 class RuleExecutable(object):
     """An adapter capable of executing a rule
     """
-
-    implements(IExecutable)
     adapts(Interface, IRule, Interface)
 
     def __init__(self, context, rule, event):
diff --git a/plone/contentrules/rule/tests/elements.py b/plone/contentrules/rule/tests/elements.py
index 0ce9b40..4661755 100644
--- a/plone/contentrules/rule/tests/elements.py
+++ b/plone/contentrules/rule/tests/elements.py
@@ -1,7 +1,7 @@
 """Dummies used in ZCML tests
 """
 
-from zope.interface import Interface, implements
+from zope.interface import Interface, implementer
 from zope import schema
 
 from plone.contentrules.rule.interfaces import IRuleElementData
@@ -9,8 +9,8 @@
 class ITestCondition(Interface):
     test = schema.TextLine(title=u"Test property")
 
+@implementer(ITestCondition, IRuleElementData)
 class TestCondition(object):
-    implements(ITestCondition, IRuleElementData)
     test = u""
 
     summary = u"Test condition"
@@ -19,8 +19,8 @@ class TestCondition(object):
 class ITestAction(Interface):
     test = schema.TextLine(title=u"Test property")
 
+@implementer(ITestAction, IRuleElementData)
 class TestAction(object):
-    implements(ITestAction, IRuleElementData)
     test = u""
 
     summary = u"Test action"


