Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2016-10-30T19:26:26+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.customerize/commit/0628f5e110f9b5697c16ea98f279ed3bf40129f5

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/app/customerize/__init__.py
M plone/app/customerize/browser.py
M plone/app/customerize/registration.py
M plone/app/customerize/testing.py
M plone/app/customerize/tests/interfaces.py
M plone/app/customerize/tests/testDocTests.py
M plone/app/customerize/tests/viewlets.py
M plone/app/customerize/tool.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 075bfa5..f9c2f91 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,9 @@ Bug fixes:
 - Add coding header to python files.
   [gforcada]
 
+- Update code to follow Plone styleguide.
+  [gforcada]
+
 1.3.5 (2016-08-17)
 ------------------
 
diff --git a/plone/app/customerize/__init__.py b/plone/app/customerize/__init__.py
index 53c88e3..53740d7 100644
--- a/plone/app/customerize/__init__.py
+++ b/plone/app/customerize/__init__.py
@@ -1,13 +1,12 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import ToolInit
 from plone.app.customerize.tool import ViewTemplateContainer
+from Products.CMFCore.utils import ToolInit
 
 
 def initialize(context):
     """ initialize function called when used as a zope2 product """
 
     ToolInit('plone.app.customerize',
-             tools = (ViewTemplateContainer,),
-             icon = 'tool.gif',
-    ).initialize(context)
-
+             tools=(ViewTemplateContainer,),
+             icon='tool.gif',
+             ).initialize(context)
diff --git a/plone/app/customerize/browser.py b/plone/app/customerize/browser.py
index 9cce5d1..4241b18 100644
--- a/plone/app/customerize/browser.py
+++ b/plone/app/customerize/browser.py
@@ -1,12 +1,12 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser import BrowserView
-from zope.publisher.interfaces.browser import IBrowserRequest
-from zope.component import getSiteManager, getAllUtilitiesRegisteredFor
-from plone.browserlayer.interfaces import ILocalBrowserLayerType
 from Acquisition import aq_inner
-
-from plone.app.customerize import registration
 from five.customerize.interfaces import ITTWViewTemplate
+from plone.app.customerize import registration
+from plone.browserlayer.interfaces import ILocalBrowserLayerType
+from Products.Five.browser import BrowserView
+from zope.component import getAllUtilitiesRegisteredFor
+from zope.component import getSiteManager
+from zope.publisher.interfaces.browser import IBrowserRequest
 
 
 class RegistrationsView(BrowserView):
@@ -19,7 +19,8 @@ def getTemplateViewRegistrations(self, mangle=True):
         for reg in self.getLocalRegistrations():
             local[(reg.required, str(reg.name), str(reg.factory.name))] = reg
         for reg in registration.templateViewRegistrations():
-            lreg = local.get((reg.required, str(reg.name), str(reg.ptname)), None)
+            lreg = local.get(
+                (reg.required, str(reg.name), str(reg.ptname)), None)
             if lreg is not None:
                 regs.append(lreg)
             else:
@@ -37,19 +38,19 @@ def getTemplateViewRegistrationInfo(self):
     def getRegistrationFromRequest(self):
         form = self.request.form
         return registration.findTemplateViewRegistration(form['required'],
-            form['view_name'])
+                                                         form['view_name'])
 
     def registerTTWView(self, viewzpt, reg):
         sm = getSiteManager(self.context)
-        sm.registerAdapter(viewzpt, required = reg.required,
-                           provided = reg.provided, name = reg.name)
+        sm.registerAdapter(viewzpt, required=reg.required,
+                           provided=reg.provided, name=reg.name)
 
     def customizeTemplate(self):
         reg = self.getRegistrationFromRequest()
         viewzpt = registration.customizeTemplate(reg)
         self.registerTTWView(viewzpt, reg)
         path = aq_inner(viewzpt).getPhysicalPath()
-        url = self.request.physicalPathToURL(path) + "/manage_workspace"
+        url = self.request.physicalPathToURL(path) + '/manage_workspace'
         self.request.response.redirect(url)
 
     def getLocalRegistrations(self):
@@ -61,4 +62,3 @@ def getLocalRegistrations(self):
                     reg.required[1] in layers) and
                     ITTWViewTemplate.providedBy(reg.factory)):
                 yield reg
-
diff --git a/plone/app/customerize/registration.py b/plone/app/customerize/registration.py
index 2377f70..2b37d55 100644
--- a/plone/app/customerize/registration.py
+++ b/plone/app/customerize/registration.py
@@ -1,26 +1,30 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser import BrowserView
-from five.customerize.interfaces import IViewTemplateContainer, ITTWViewTemplate
 from five.customerize.browser import mangleAbsoluteFilename
-from five.customerize.zpt import TTWViewTemplate
+from five.customerize.interfaces import ITTWViewTemplate
+from five.customerize.interfaces import IViewTemplateContainer
 from five.customerize.utils import findViewletTemplate
-from zope.publisher.interfaces.browser import IBrowserRequest
-from zope.component import getGlobalSiteManager, getUtility
+from five.customerize.zpt import TTWViewTemplate
+from os.path import basename
+from plone.browserlayer.interfaces import ILocalBrowserLayerType
+from plone.portlets.interfaces import IPortletRenderer
+from Products.Five.browser import BrowserView
 from zope.component import getAllUtilitiesRegisteredFor
+from zope.component import getGlobalSiteManager
+from zope.component import getUtility
+from zope.publisher.interfaces.browser import IBrowserRequest
 from zope.viewlet.interfaces import IViewlet
-from plone.portlets.interfaces import IPortletRenderer
-from plone.browserlayer.interfaces import ILocalBrowserLayerType
-from os.path import basename
 
 
 def getViews(type):
     """ get all view registrations (stolen from zope.app.apidoc.presentation),
         both global and those registered for a specific layer """
 
-    # A zope 3 view is any multi-adapter whose second requirement is a browser request,
-    # or derivation thereof.  We also do an explicit check for interfaces that have
-    # been registered as plone.browserlayer browser layers, because often these
-    # do not extend IBrowserRequest even though they should.
+    # A zope 3 view is any multi-adapter whose second requirement
+    # is a browser request, or derivation thereof.
+    # We also do an explicit check for interfaces that have
+    # been registered as plone.browserlayer browser layers,
+    # because often these do not extend IBrowserRequest even though
+    # they should.
     layers = getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)
     gsm = getGlobalSiteManager()
     for reg in gsm.registeredAdapters():
@@ -30,11 +34,13 @@ def getViews(type):
                 reg.required[1] in layers)):
             yield reg
 
+
 def interfaceName(iface):
     """ return a sensible name for the given interface """
     name = getattr(iface, '__name__', repr(iface))
     return getattr(iface, '__identifier__', name)
 
+
 def templateViewRegistrations():
     regs = []
     for reg in getViews(IBrowserRequest):
@@ -57,13 +63,15 @@ def templateViewRegistrations():
             regs.append(reg)
     return regs
 
+
 def templateViewRegistrationInfos(regs, mangle=True):
     for reg in regs:
         if ITTWViewTemplate.providedBy(reg.factory):
             zptfile = None
             zcmlfile = None
             name = reg.name or reg.factory.name
-            customized = reg.factory.getId()    # TODO: can we get an absolute url?
+            # TODO: can we get an absolute url?
+            customized = reg.factory.getId()
         else:
             attr, pt = findViewletTemplate(reg.factory)
             if attr is None:        # skip, if the factory has no template...
@@ -79,9 +87,11 @@ def templateViewRegistrationInfos(regs, mangle=True):
             customized = None
         required = [interfaceName(r) for r in reg.required]
         required_str = ','.join(required)
-        customize_url = '@@customizezpt.html?required=%s&view_name=%s' % (
-                required_str,
-                name)
+        url = '@@customizezpt.html?required={0}&view_name={1}'
+        customize_url = url.format(
+            required_str,
+            name,
+        )
         yield {
             'viewname': name,
             'required': required_str,
@@ -93,30 +103,39 @@ def templateViewRegistrationInfos(regs, mangle=True):
             'customize_url': customize_url,
         }
 
+
 def templateViewRegistrationGroups(regs, mangle=True):
     ifaces = {}
-    comp = lambda a,b: cmp(a['viewname'], b['viewname'])
-    for reg in sorted(templateViewRegistrationInfos(regs, mangle=mangle), cmp=comp):
+    comp = lambda a, b: cmp(a['viewname'], b['viewname'])
+    registrations = sorted(
+        templateViewRegistrationInfos(regs, mangle=mangle),
+        cmp=comp
+    )
+    for reg in registrations:
         key = reg['for']
-        if ifaces.has_key(key):
+        if key in ifaces:
             ifaces[key]['views'].append(reg)
         else:
-            ifaces[key] = { 'name': key, 'views': [reg] }
-    return sorted(ifaces.values(), cmp=lambda a,b: cmp(a['name'], b['name']))
+            ifaces[key] = {'name': key, 'views': [reg]}
+    return sorted(ifaces.values(), cmp=lambda a, b: cmp(a['name'], b['name']))
+
 
 def findTemplateViewRegistration(required, viewname):
     required = required.split(',')
     for reg in templateViewRegistrations():
         if required == [interfaceName(r) for r in reg.required]:
-            if reg.name == viewname or reg.provided.isOrExtends(IPortletRenderer):
+            if reg.name == viewname or \
+                    reg.provided.isOrExtends(IPortletRenderer):
                 return reg
 
+
 def generateIdFromRegistration(reg):
-    return '%s-%s' % (
+    return '{0}-{1}'.format(
         interfaceName(reg.required[0]).lower(),
         reg.name or reg.ptname
     )
 
+
 def getViewClassFromRegistration(reg):
     # The view class is generally auto-generated, we usually want
     # the first base class, though if the view only has one base
@@ -130,18 +149,21 @@ def getViewClassFromRegistration(reg):
         return klass
     return base
 
+
 def getTemplateCodeFromRegistration(reg):
     attr, template = findViewletTemplate(reg.factory)
     # TODO: we can't do template.read() here because of a bug in
     # Zope 3's ZPT implementation.
     return open(template.filename, 'rb').read()
 
+
 def getViewPermissionFromRegistration(reg):
     permissions = getattr(reg.factory, '__ac_permissions__', [])
     for permission, methods in permissions:
         if methods[0] in ('', '__call__'):
             return permission
 
+
 def createTTWViewTemplate(reg):
     attr, pt = findViewletTemplate(reg.factory)
     if pt:
@@ -149,17 +171,17 @@ def createTTWViewTemplate(reg):
     else:
         ptname = None
     viewzpt = TTWViewTemplate(
-        id = str(generateIdFromRegistration(reg)),
-        text = getTemplateCodeFromRegistration(reg),
-        view = getViewClassFromRegistration(reg),
-        permission = getViewPermissionFromRegistration(reg),
-        name = ptname)
+        id=str(generateIdFromRegistration(reg)),
+        text=getTemplateCodeFromRegistration(reg),
+        view=getViewClassFromRegistration(reg),
+        permission=getViewPermissionFromRegistration(reg),
+        name=ptname)
     # conserve view name (at least for KSS kssattr-viewname to work
     viewzpt.manage_addProperty('view_name', reg.name, 'string')
     return viewzpt
 
+
 def customizeTemplate(reg):
     viewzpt = createTTWViewTemplate(reg)
     container = getUtility(IViewTemplateContainer)
     return container.addTemplate(viewzpt.getId(), viewzpt)
-
diff --git a/plone/app/customerize/testing.py b/plone/app/customerize/testing.py
index 366a928..3497b67 100644
--- a/plone/app/customerize/testing.py
+++ b/plone/app/customerize/testing.py
@@ -24,5 +24,5 @@ def setUpZCML(self):
 PLONE_APP_CUSTOMERIZE_FIXTURE = PloneAppCustomerize()
 PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CUSTOMERIZE_FIXTURE,),
-    name="PloneAppCustomerize:Functional",
+    name='PloneAppCustomerize:Functional',
 )
diff --git a/plone/app/customerize/tests/interfaces.py b/plone/app/customerize/tests/interfaces.py
index 51cd78f..10a1165 100644
--- a/plone/app/customerize/tests/interfaces.py
+++ b/plone/app/customerize/tests/interfaces.py
@@ -5,5 +5,6 @@
 class IMyLayer(Interface):
     """ marker interface for a layer for testing purposes """
 
+
 class IOtherLayer(Interface):
-    """ marker interface for a second layer for testing purposes """
\ No newline at end of file
+    """ marker interface for a second layer for testing purposes """
diff --git a/plone/app/customerize/tests/testDocTests.py b/plone/app/customerize/tests/testDocTests.py
index 5b6ea52..ef7700b 100644
--- a/plone/app/customerize/tests/testDocTests.py
+++ b/plone/app/customerize/tests/testDocTests.py
@@ -1,19 +1,23 @@
 # -*- coding: utf-8 -*-
-import doctest
-from unittest import TestSuite
-
+from plone.app.customerize.testing import PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING  # noqa
 from plone.testing import layered
+from unittest import TestSuite
 
-from plone.app.customerize.testing import \
-    PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING
+import doctest
 
 
 def test_suite():
     suite = TestSuite()
     OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
     for testfile in ('testBrowserLayers.txt', 'testCustomizeView.txt'):
-        suite.addTest(layered(doctest.DocFileSuite(testfile,
-                                optionflags=OPTIONFLAGS,
-                                package="plone.app.customerize.tests"),
-                     layer=PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING))
+        suite.addTest(
+            layered(
+                doctest.DocFileSuite(
+                    testfile,
+                    optionflags=OPTIONFLAGS,
+                    package='plone.app.customerize.tests',
+                ),
+                layer=PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING
+            )
+        )
     return suite
diff --git a/plone/app/customerize/tests/viewlets.py b/plone/app/customerize/tests/viewlets.py
index 827dc5d..96e14c1 100644
--- a/plone/app/customerize/tests/viewlets.py
+++ b/plone/app/customerize/tests/viewlets.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from plone.app.layout.viewlets.common import ViewletBase
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 
 class StandardViewlet(ViewletBase):
@@ -13,5 +13,3 @@ class LayerViewlet(ViewletBase):
     """ a viewlet class for testing purposes """
 
     render = ViewPageTemplateFile('local.pt')
-
-
diff --git a/plone/app/customerize/tool.py b/plone/app/customerize/tool.py
index 034b886..f9673d1 100644
--- a/plone/app/customerize/tool.py
+++ b/plone/app/customerize/tool.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from five.customerize.interfaces import IViewTemplateContainer
-from zope.interface import implementer
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
+from five.customerize.interfaces import IViewTemplateContainer
 from OFS.Folder import Folder
 from Products.CMFCore.permissions import ManagePortal
+from zope.interface import implementer
 
 
 @implementer(IViewTemplateContainer)
@@ -12,7 +12,7 @@ class ViewTemplateContainer(Folder):
     """ a local utility storing all ttw view templates provided
         by five.customerize in a folder """
 
-    id  = 'portal_view_customizations'
+    id = 'portal_view_customizations'
     title = 'Manages view customizations'
     meta_type = 'Plone View Customizations'
 
@@ -20,12 +20,12 @@ class ViewTemplateContainer(Folder):
 
     manage_options = (
         dict(label='Registrations', action='registrations.html'),
-        ) + Folder.manage_options[0:1] + Folder.manage_options[2:]
+    ) + Folder.manage_options[0:1] + Folder.manage_options[2:]
 
-    security.declareProtected(ManagePortal, 'addTemplate')
+    @security.protected(ManagePortal)
     def addTemplate(self, id, template):
         """ add the given ttw view template to the container """
         self._setObject(id, template)
         return getattr(self, id)
 
-InitializeClass(ViewTemplateContainer)
\ No newline at end of file
+InitializeClass(ViewTemplateContainer)
diff --git a/setup.py b/setup.py
index e85d33c..38551d6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,14 +1,17 @@
 # -*- coding: utf-8 -*-
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.3.6.dev0'
 
-setup(name = 'plone.app.customerize',
-      version = version,
-      description = 'Integrate five.customerize into Plone.',
-      long_description = open("README.rst").read() + '\n' +
-                         open('CHANGES.rst').read(),
-      classifiers=[
+setup(
+    name='plone.app.customerize',
+    version=version,
+    description='Integrate five.customerize into Plone.',
+    long_description=open('README.rst').read() + '\n' +
+    open('CHANGES.rst').read(),
+    classifiers=[
         'Development Status :: 5 - Production/Stable',
         'Environment :: Web Environment',
         'Framework :: Plone',
@@ -22,23 +25,23 @@
         'Programming Language :: Python',
         'Programming Language :: Python :: 2.7',
         'Topic :: Internet :: WWW/HTTP :: Site Management',
-      ],
-      keywords='customerize plone views page templates zmi',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.app.customerize/',
-      license='GPL version 2',
-      packages = find_packages(),
-      namespace_packages = ['plone', 'plone.app'],
-      include_package_data = True,
-      extras_require=dict(
-          test=[
+    ],
+    keywords='customerize plone views page templates zmi',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.app.customerize/',
+    license='GPL version 2',
+    packages=find_packages(),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    extras_require=dict(
+        test=[
             'plone.app.layout',
             'plone.app.testing',
             'zope.testing',
-          ]
-      ),
-      install_requires = [
+        ]
+    ),
+    install_requires=[
         'setuptools',
         'five.customerize',
         'plone.browserlayer',
@@ -50,7 +53,7 @@
         'Products.CMFCore',
         'Acquisition',
         'Zope2',
-      ],
-      platforms = 'Any',
-      zip_safe = False,
+    ],
+    platforms='Any',
+    zip_safe=False,
 )


Repository: plone.app.customerize


Branch: refs/heads/master
Date: 2016-11-01T20:46:49+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.customerize/commit/6364b561251fe392739097d9c800e6c4f62ac0ed

Merge pull request #13 from plone/gforcada-cleanup

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/app/customerize/__init__.py
M plone/app/customerize/browser.py
M plone/app/customerize/registration.py
M plone/app/customerize/testing.py
M plone/app/customerize/tests/interfaces.py
M plone/app/customerize/tests/testDocTests.py
M plone/app/customerize/tests/viewlets.py
M plone/app/customerize/tool.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 075bfa5..f9c2f91 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -18,6 +18,9 @@ Bug fixes:
 - Add coding header to python files.
   [gforcada]
 
+- Update code to follow Plone styleguide.
+  [gforcada]
+
 1.3.5 (2016-08-17)
 ------------------
 
diff --git a/plone/app/customerize/__init__.py b/plone/app/customerize/__init__.py
index 53c88e3..53740d7 100644
--- a/plone/app/customerize/__init__.py
+++ b/plone/app/customerize/__init__.py
@@ -1,13 +1,12 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import ToolInit
 from plone.app.customerize.tool import ViewTemplateContainer
+from Products.CMFCore.utils import ToolInit
 
 
 def initialize(context):
     """ initialize function called when used as a zope2 product """
 
     ToolInit('plone.app.customerize',
-             tools = (ViewTemplateContainer,),
-             icon = 'tool.gif',
-    ).initialize(context)
-
+             tools=(ViewTemplateContainer,),
+             icon='tool.gif',
+             ).initialize(context)
diff --git a/plone/app/customerize/browser.py b/plone/app/customerize/browser.py
index 9cce5d1..4241b18 100644
--- a/plone/app/customerize/browser.py
+++ b/plone/app/customerize/browser.py
@@ -1,12 +1,12 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser import BrowserView
-from zope.publisher.interfaces.browser import IBrowserRequest
-from zope.component import getSiteManager, getAllUtilitiesRegisteredFor
-from plone.browserlayer.interfaces import ILocalBrowserLayerType
 from Acquisition import aq_inner
-
-from plone.app.customerize import registration
 from five.customerize.interfaces import ITTWViewTemplate
+from plone.app.customerize import registration
+from plone.browserlayer.interfaces import ILocalBrowserLayerType
+from Products.Five.browser import BrowserView
+from zope.component import getAllUtilitiesRegisteredFor
+from zope.component import getSiteManager
+from zope.publisher.interfaces.browser import IBrowserRequest
 
 
 class RegistrationsView(BrowserView):
@@ -19,7 +19,8 @@ def getTemplateViewRegistrations(self, mangle=True):
         for reg in self.getLocalRegistrations():
             local[(reg.required, str(reg.name), str(reg.factory.name))] = reg
         for reg in registration.templateViewRegistrations():
-            lreg = local.get((reg.required, str(reg.name), str(reg.ptname)), None)
+            lreg = local.get(
+                (reg.required, str(reg.name), str(reg.ptname)), None)
             if lreg is not None:
                 regs.append(lreg)
             else:
@@ -37,19 +38,19 @@ def getTemplateViewRegistrationInfo(self):
     def getRegistrationFromRequest(self):
         form = self.request.form
         return registration.findTemplateViewRegistration(form['required'],
-            form['view_name'])
+                                                         form['view_name'])
 
     def registerTTWView(self, viewzpt, reg):
         sm = getSiteManager(self.context)
-        sm.registerAdapter(viewzpt, required = reg.required,
-                           provided = reg.provided, name = reg.name)
+        sm.registerAdapter(viewzpt, required=reg.required,
+                           provided=reg.provided, name=reg.name)
 
     def customizeTemplate(self):
         reg = self.getRegistrationFromRequest()
         viewzpt = registration.customizeTemplate(reg)
         self.registerTTWView(viewzpt, reg)
         path = aq_inner(viewzpt).getPhysicalPath()
-        url = self.request.physicalPathToURL(path) + "/manage_workspace"
+        url = self.request.physicalPathToURL(path) + '/manage_workspace'
         self.request.response.redirect(url)
 
     def getLocalRegistrations(self):
@@ -61,4 +62,3 @@ def getLocalRegistrations(self):
                     reg.required[1] in layers) and
                     ITTWViewTemplate.providedBy(reg.factory)):
                 yield reg
-
diff --git a/plone/app/customerize/registration.py b/plone/app/customerize/registration.py
index 2377f70..2b37d55 100644
--- a/plone/app/customerize/registration.py
+++ b/plone/app/customerize/registration.py
@@ -1,26 +1,30 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser import BrowserView
-from five.customerize.interfaces import IViewTemplateContainer, ITTWViewTemplate
 from five.customerize.browser import mangleAbsoluteFilename
-from five.customerize.zpt import TTWViewTemplate
+from five.customerize.interfaces import ITTWViewTemplate
+from five.customerize.interfaces import IViewTemplateContainer
 from five.customerize.utils import findViewletTemplate
-from zope.publisher.interfaces.browser import IBrowserRequest
-from zope.component import getGlobalSiteManager, getUtility
+from five.customerize.zpt import TTWViewTemplate
+from os.path import basename
+from plone.browserlayer.interfaces import ILocalBrowserLayerType
+from plone.portlets.interfaces import IPortletRenderer
+from Products.Five.browser import BrowserView
 from zope.component import getAllUtilitiesRegisteredFor
+from zope.component import getGlobalSiteManager
+from zope.component import getUtility
+from zope.publisher.interfaces.browser import IBrowserRequest
 from zope.viewlet.interfaces import IViewlet
-from plone.portlets.interfaces import IPortletRenderer
-from plone.browserlayer.interfaces import ILocalBrowserLayerType
-from os.path import basename
 
 
 def getViews(type):
     """ get all view registrations (stolen from zope.app.apidoc.presentation),
         both global and those registered for a specific layer """
 
-    # A zope 3 view is any multi-adapter whose second requirement is a browser request,
-    # or derivation thereof.  We also do an explicit check for interfaces that have
-    # been registered as plone.browserlayer browser layers, because often these
-    # do not extend IBrowserRequest even though they should.
+    # A zope 3 view is any multi-adapter whose second requirement
+    # is a browser request, or derivation thereof.
+    # We also do an explicit check for interfaces that have
+    # been registered as plone.browserlayer browser layers,
+    # because often these do not extend IBrowserRequest even though
+    # they should.
     layers = getAllUtilitiesRegisteredFor(ILocalBrowserLayerType)
     gsm = getGlobalSiteManager()
     for reg in gsm.registeredAdapters():
@@ -30,11 +34,13 @@ def getViews(type):
                 reg.required[1] in layers)):
             yield reg
 
+
 def interfaceName(iface):
     """ return a sensible name for the given interface """
     name = getattr(iface, '__name__', repr(iface))
     return getattr(iface, '__identifier__', name)
 
+
 def templateViewRegistrations():
     regs = []
     for reg in getViews(IBrowserRequest):
@@ -57,13 +63,15 @@ def templateViewRegistrations():
             regs.append(reg)
     return regs
 
+
 def templateViewRegistrationInfos(regs, mangle=True):
     for reg in regs:
         if ITTWViewTemplate.providedBy(reg.factory):
             zptfile = None
             zcmlfile = None
             name = reg.name or reg.factory.name
-            customized = reg.factory.getId()    # TODO: can we get an absolute url?
+            # TODO: can we get an absolute url?
+            customized = reg.factory.getId()
         else:
             attr, pt = findViewletTemplate(reg.factory)
             if attr is None:        # skip, if the factory has no template...
@@ -79,9 +87,11 @@ def templateViewRegistrationInfos(regs, mangle=True):
             customized = None
         required = [interfaceName(r) for r in reg.required]
         required_str = ','.join(required)
-        customize_url = '@@customizezpt.html?required=%s&view_name=%s' % (
-                required_str,
-                name)
+        url = '@@customizezpt.html?required={0}&view_name={1}'
+        customize_url = url.format(
+            required_str,
+            name,
+        )
         yield {
             'viewname': name,
             'required': required_str,
@@ -93,30 +103,39 @@ def templateViewRegistrationInfos(regs, mangle=True):
             'customize_url': customize_url,
         }
 
+
 def templateViewRegistrationGroups(regs, mangle=True):
     ifaces = {}
-    comp = lambda a,b: cmp(a['viewname'], b['viewname'])
-    for reg in sorted(templateViewRegistrationInfos(regs, mangle=mangle), cmp=comp):
+    comp = lambda a, b: cmp(a['viewname'], b['viewname'])
+    registrations = sorted(
+        templateViewRegistrationInfos(regs, mangle=mangle),
+        cmp=comp
+    )
+    for reg in registrations:
         key = reg['for']
-        if ifaces.has_key(key):
+        if key in ifaces:
             ifaces[key]['views'].append(reg)
         else:
-            ifaces[key] = { 'name': key, 'views': [reg] }
-    return sorted(ifaces.values(), cmp=lambda a,b: cmp(a['name'], b['name']))
+            ifaces[key] = {'name': key, 'views': [reg]}
+    return sorted(ifaces.values(), cmp=lambda a, b: cmp(a['name'], b['name']))
+
 
 def findTemplateViewRegistration(required, viewname):
     required = required.split(',')
     for reg in templateViewRegistrations():
         if required == [interfaceName(r) for r in reg.required]:
-            if reg.name == viewname or reg.provided.isOrExtends(IPortletRenderer):
+            if reg.name == viewname or \
+                    reg.provided.isOrExtends(IPortletRenderer):
                 return reg
 
+
 def generateIdFromRegistration(reg):
-    return '%s-%s' % (
+    return '{0}-{1}'.format(
         interfaceName(reg.required[0]).lower(),
         reg.name or reg.ptname
     )
 
+
 def getViewClassFromRegistration(reg):
     # The view class is generally auto-generated, we usually want
     # the first base class, though if the view only has one base
@@ -130,18 +149,21 @@ def getViewClassFromRegistration(reg):
         return klass
     return base
 
+
 def getTemplateCodeFromRegistration(reg):
     attr, template = findViewletTemplate(reg.factory)
     # TODO: we can't do template.read() here because of a bug in
     # Zope 3's ZPT implementation.
     return open(template.filename, 'rb').read()
 
+
 def getViewPermissionFromRegistration(reg):
     permissions = getattr(reg.factory, '__ac_permissions__', [])
     for permission, methods in permissions:
         if methods[0] in ('', '__call__'):
             return permission
 
+
 def createTTWViewTemplate(reg):
     attr, pt = findViewletTemplate(reg.factory)
     if pt:
@@ -149,17 +171,17 @@ def createTTWViewTemplate(reg):
     else:
         ptname = None
     viewzpt = TTWViewTemplate(
-        id = str(generateIdFromRegistration(reg)),
-        text = getTemplateCodeFromRegistration(reg),
-        view = getViewClassFromRegistration(reg),
-        permission = getViewPermissionFromRegistration(reg),
-        name = ptname)
+        id=str(generateIdFromRegistration(reg)),
+        text=getTemplateCodeFromRegistration(reg),
+        view=getViewClassFromRegistration(reg),
+        permission=getViewPermissionFromRegistration(reg),
+        name=ptname)
     # conserve view name (at least for KSS kssattr-viewname to work
     viewzpt.manage_addProperty('view_name', reg.name, 'string')
     return viewzpt
 
+
 def customizeTemplate(reg):
     viewzpt = createTTWViewTemplate(reg)
     container = getUtility(IViewTemplateContainer)
     return container.addTemplate(viewzpt.getId(), viewzpt)
-
diff --git a/plone/app/customerize/testing.py b/plone/app/customerize/testing.py
index 366a928..3497b67 100644
--- a/plone/app/customerize/testing.py
+++ b/plone/app/customerize/testing.py
@@ -24,5 +24,5 @@ def setUpZCML(self):
 PLONE_APP_CUSTOMERIZE_FIXTURE = PloneAppCustomerize()
 PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CUSTOMERIZE_FIXTURE,),
-    name="PloneAppCustomerize:Functional",
+    name='PloneAppCustomerize:Functional',
 )
diff --git a/plone/app/customerize/tests/interfaces.py b/plone/app/customerize/tests/interfaces.py
index 51cd78f..10a1165 100644
--- a/plone/app/customerize/tests/interfaces.py
+++ b/plone/app/customerize/tests/interfaces.py
@@ -5,5 +5,6 @@
 class IMyLayer(Interface):
     """ marker interface for a layer for testing purposes """
 
+
 class IOtherLayer(Interface):
-    """ marker interface for a second layer for testing purposes """
\ No newline at end of file
+    """ marker interface for a second layer for testing purposes """
diff --git a/plone/app/customerize/tests/testDocTests.py b/plone/app/customerize/tests/testDocTests.py
index 5b6ea52..ef7700b 100644
--- a/plone/app/customerize/tests/testDocTests.py
+++ b/plone/app/customerize/tests/testDocTests.py
@@ -1,19 +1,23 @@
 # -*- coding: utf-8 -*-
-import doctest
-from unittest import TestSuite
-
+from plone.app.customerize.testing import PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING  # noqa
 from plone.testing import layered
+from unittest import TestSuite
 
-from plone.app.customerize.testing import \
-    PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING
+import doctest
 
 
 def test_suite():
     suite = TestSuite()
     OPTIONFLAGS = (doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE)
     for testfile in ('testBrowserLayers.txt', 'testCustomizeView.txt'):
-        suite.addTest(layered(doctest.DocFileSuite(testfile,
-                                optionflags=OPTIONFLAGS,
-                                package="plone.app.customerize.tests"),
-                     layer=PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING))
+        suite.addTest(
+            layered(
+                doctest.DocFileSuite(
+                    testfile,
+                    optionflags=OPTIONFLAGS,
+                    package='plone.app.customerize.tests',
+                ),
+                layer=PLONE_APP_CUSTOMERIZE_FUNCTIONAL_TESTING
+            )
+        )
     return suite
diff --git a/plone/app/customerize/tests/viewlets.py b/plone/app/customerize/tests/viewlets.py
index 827dc5d..96e14c1 100644
--- a/plone/app/customerize/tests/viewlets.py
+++ b/plone/app/customerize/tests/viewlets.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from plone.app.layout.viewlets.common import ViewletBase
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 
 class StandardViewlet(ViewletBase):
@@ -13,5 +13,3 @@ class LayerViewlet(ViewletBase):
     """ a viewlet class for testing purposes """
 
     render = ViewPageTemplateFile('local.pt')
-
-
diff --git a/plone/app/customerize/tool.py b/plone/app/customerize/tool.py
index 034b886..f9673d1 100644
--- a/plone/app/customerize/tool.py
+++ b/plone/app/customerize/tool.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from five.customerize.interfaces import IViewTemplateContainer
-from zope.interface import implementer
 from AccessControl import ClassSecurityInfo
 from App.class_init import InitializeClass
+from five.customerize.interfaces import IViewTemplateContainer
 from OFS.Folder import Folder
 from Products.CMFCore.permissions import ManagePortal
+from zope.interface import implementer
 
 
 @implementer(IViewTemplateContainer)
@@ -12,7 +12,7 @@ class ViewTemplateContainer(Folder):
     """ a local utility storing all ttw view templates provided
         by five.customerize in a folder """
 
-    id  = 'portal_view_customizations'
+    id = 'portal_view_customizations'
     title = 'Manages view customizations'
     meta_type = 'Plone View Customizations'
 
@@ -20,12 +20,12 @@ class ViewTemplateContainer(Folder):
 
     manage_options = (
         dict(label='Registrations', action='registrations.html'),
-        ) + Folder.manage_options[0:1] + Folder.manage_options[2:]
+    ) + Folder.manage_options[0:1] + Folder.manage_options[2:]
 
-    security.declareProtected(ManagePortal, 'addTemplate')
+    @security.protected(ManagePortal)
     def addTemplate(self, id, template):
         """ add the given ttw view template to the container """
         self._setObject(id, template)
         return getattr(self, id)
 
-InitializeClass(ViewTemplateContainer)
\ No newline at end of file
+InitializeClass(ViewTemplateContainer)
diff --git a/setup.py b/setup.py
index e85d33c..38551d6 100644
--- a/setup.py
+++ b/setup.py
@@ -1,14 +1,17 @@
 # -*- coding: utf-8 -*-
-from setuptools import setup, find_packages
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.3.6.dev0'
 
-setup(name = 'plone.app.customerize',
-      version = version,
-      description = 'Integrate five.customerize into Plone.',
-      long_description = open("README.rst").read() + '\n' +
-                         open('CHANGES.rst').read(),
-      classifiers=[
+setup(
+    name='plone.app.customerize',
+    version=version,
+    description='Integrate five.customerize into Plone.',
+    long_description=open('README.rst').read() + '\n' +
+    open('CHANGES.rst').read(),
+    classifiers=[
         'Development Status :: 5 - Production/Stable',
         'Environment :: Web Environment',
         'Framework :: Plone',
@@ -22,23 +25,23 @@
         'Programming Language :: Python',
         'Programming Language :: Python :: 2.7',
         'Topic :: Internet :: WWW/HTTP :: Site Management',
-      ],
-      keywords='customerize plone views page templates zmi',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.app.customerize/',
-      license='GPL version 2',
-      packages = find_packages(),
-      namespace_packages = ['plone', 'plone.app'],
-      include_package_data = True,
-      extras_require=dict(
-          test=[
+    ],
+    keywords='customerize plone views page templates zmi',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.app.customerize/',
+    license='GPL version 2',
+    packages=find_packages(),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    extras_require=dict(
+        test=[
             'plone.app.layout',
             'plone.app.testing',
             'zope.testing',
-          ]
-      ),
-      install_requires = [
+        ]
+    ),
+    install_requires=[
         'setuptools',
         'five.customerize',
         'plone.browserlayer',
@@ -50,7 +53,7 @@
         'Products.CMFCore',
         'Acquisition',
         'Zope2',
-      ],
-      platforms = 'Any',
-      zip_safe = False,
+    ],
+    platforms='Any',
+    zip_safe=False,
 )


