Repository: plone.app.theming


Branch: refs/heads/1.1.x
Date: 2016-08-05T16:26:28+02:00
Author: Fred van Dijk (fredvd) <fredvd@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/d43abe754ff35c770735ce776d58039721f5c49f

Backport diazo rules caching in development mode, backwards compatible

Files changed:
M docs/HISTORY.txt
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/transform.py

diff --git a/docs/HISTORY.txt b/docs/HISTORY.txt
index f460863..da3b8c5 100644
--- a/docs/HISTORY.txt
+++ b/docs/HISTORY.txt
@@ -4,7 +4,9 @@ Changelog
 1.1.8 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Control theme compilation in development mode
+  through the environment variable ``DIAZO_ALWAYS_CACHE_RULES``
+  [ale-rt]
 
 
 1.1.7 (2015-07-14)
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 96768e9..70a3cb3 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,6 +1,8 @@
+from os import environ
 import unittest2 as unittest
 
 from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
+
 from plone.testing.z2 import Browser
 
 from plone.app.testing import setRoles, TEST_USER_ID
@@ -18,6 +20,7 @@
 from zope.component import getUtility
 
 from plone.app.theming.interfaces import IThemeSettings
+from plone.app.theming.transform import ThemeTransform
 from plone.app.theming.utils import applyTheme, getAvailableThemes, getTheme
 from plone.app.theming.utils import InternalResolver, PythonResolver, resolvePythonURL
 
@@ -92,6 +95,30 @@ def test_theme_enabled(self):
         # The theme
         self.assertTrue("This is the theme" in browser.contents)
 
+    def test_develop_theme(self):
+        ''' Check if the rules are developed
+        '''
+        # First we check the status of our environment variables
+        var_name = 'DIAZO_ALWAYS_CACHE_RULES'
+        env_had_var = var_name in environ
+        # and clean it up
+        env_var_backup = environ.pop(var_name, None)
+
+        transform = ThemeTransform(None, None)
+        # This evaluates to True because we set
+        # Globals.DevelopmentMode to True in the test setup
+        self.assertTrue(transform.develop_theme())
+
+        # But we can anyway force the cache
+        environ[var_name] = 'true'
+        self.assertFalse(transform.develop_theme())
+
+        # Then we reset our env variables before leaving
+        if env_had_var:
+            environ[var_name] = env_var_backup
+        else:
+            del environ[var_name]
+
     def test_theme_enabled_resource_directory(self):
 
         app = self.layer['app']
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 2667e98..6321fee 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,5 +1,6 @@
 import logging
 import Globals
+from os import environ
 
 from lxml import etree
 
@@ -22,6 +23,7 @@
 from plone.app.theming.utils import getParser
 from plone.app.theming.zmi import patch_zmi
 
+
 # Disable theming of ZMI
 patch_zmi()
 
@@ -78,9 +80,20 @@ def __init__(self, published, request):
         self.published = published
         self.request = request
 
+    def develop_theme(self):
+        ''' Check if the theme should be recompiled every time the
+        transform is applied
+        '''
+        if Globals.DevelopmentMode:
+            if environ.get('DIAZO_ALWAYS_CACHE_RULES'):
+                return False
+            else:
+                return True
+        return False
+
     def setupTransform(self, runtrace=False):
         request = self.request
-        DevelopmentMode = Globals.DevelopmentMode
+        DevelopmentMode = self.develop_theme()
 
         # Obtain settings. Do nothing if not found
         settings = self.getSettings()


Repository: plone.app.theming


Branch: refs/heads/1.1.x
Date: 2016-08-08T09:41:01+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/37a816e15787bbf8bc9577e032a8fcfbbec05246

Merge pull request #111 from plone/debug_caching_11_backport

Backport Diazo rules caching in development mode, backwards compatible

Files changed:
M docs/HISTORY.txt
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/transform.py

diff --git a/docs/HISTORY.txt b/docs/HISTORY.txt
index f460863..da3b8c5 100644
--- a/docs/HISTORY.txt
+++ b/docs/HISTORY.txt
@@ -4,7 +4,9 @@ Changelog
 1.1.8 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Control theme compilation in development mode
+  through the environment variable ``DIAZO_ALWAYS_CACHE_RULES``
+  [ale-rt]
 
 
 1.1.7 (2015-07-14)
diff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py
index 96768e9..70a3cb3 100644
--- a/src/plone/app/theming/tests/test_transform.py
+++ b/src/plone/app/theming/tests/test_transform.py
@@ -1,6 +1,8 @@
+from os import environ
 import unittest2 as unittest
 
 from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING
+
 from plone.testing.z2 import Browser
 
 from plone.app.testing import setRoles, TEST_USER_ID
@@ -18,6 +20,7 @@
 from zope.component import getUtility
 
 from plone.app.theming.interfaces import IThemeSettings
+from plone.app.theming.transform import ThemeTransform
 from plone.app.theming.utils import applyTheme, getAvailableThemes, getTheme
 from plone.app.theming.utils import InternalResolver, PythonResolver, resolvePythonURL
 
@@ -92,6 +95,30 @@ def test_theme_enabled(self):
         # The theme
         self.assertTrue("This is the theme" in browser.contents)
 
+    def test_develop_theme(self):
+        ''' Check if the rules are developed
+        '''
+        # First we check the status of our environment variables
+        var_name = 'DIAZO_ALWAYS_CACHE_RULES'
+        env_had_var = var_name in environ
+        # and clean it up
+        env_var_backup = environ.pop(var_name, None)
+
+        transform = ThemeTransform(None, None)
+        # This evaluates to True because we set
+        # Globals.DevelopmentMode to True in the test setup
+        self.assertTrue(transform.develop_theme())
+
+        # But we can anyway force the cache
+        environ[var_name] = 'true'
+        self.assertFalse(transform.develop_theme())
+
+        # Then we reset our env variables before leaving
+        if env_had_var:
+            environ[var_name] = env_var_backup
+        else:
+            del environ[var_name]
+
     def test_theme_enabled_resource_directory(self):
 
         app = self.layer['app']
diff --git a/src/plone/app/theming/transform.py b/src/plone/app/theming/transform.py
index 2667e98..6321fee 100644
--- a/src/plone/app/theming/transform.py
+++ b/src/plone/app/theming/transform.py
@@ -1,5 +1,6 @@
 import logging
 import Globals
+from os import environ
 
 from lxml import etree
 
@@ -22,6 +23,7 @@
 from plone.app.theming.utils import getParser
 from plone.app.theming.zmi import patch_zmi
 
+
 # Disable theming of ZMI
 patch_zmi()
 
@@ -78,9 +80,20 @@ def __init__(self, published, request):
         self.published = published
         self.request = request
 
+    def develop_theme(self):
+        ''' Check if the theme should be recompiled every time the
+        transform is applied
+        '''
+        if Globals.DevelopmentMode:
+            if environ.get('DIAZO_ALWAYS_CACHE_RULES'):
+                return False
+            else:
+                return True
+        return False
+
     def setupTransform(self, runtrace=False):
         request = self.request
-        DevelopmentMode = Globals.DevelopmentMode
+        DevelopmentMode = self.develop_theme()
 
         # Obtain settings. Do nothing if not found
         settings = self.getSettings()


