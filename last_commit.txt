Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-03-12T01:47:02+01:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/459fdcf477d0c1a839916a077b885804cf049e47

autopep8

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/atcontentypes_bbb.py
M plone/app/upgrade/bbb.py
M plone/app/upgrade/bbbd/LanguageTool.py
M plone/app/upgrade/bbbd/__init__.py
M plone/app/upgrade/gruf_bbb.py
M plone/app/upgrade/kupu_bbb.py
M plone/app/upgrade/tests/__init__.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v25/__init__.py
M plone/app/upgrade/v25/tests.py
M plone/app/upgrade/v30/alphas.py
M plone/app/upgrade/v30/betas.py
M plone/app/upgrade/v30/final_three0x.py
M plone/app/upgrade/v30/rcs.py
M plone/app/upgrade/v30/tests.py
M plone/app/upgrade/v31/betas.py
M plone/app/upgrade/v31/final_three1x.py
M plone/app/upgrade/v31/tests.py
M plone/app/upgrade/v32/tests.py
M plone/app/upgrade/v33/__init__.py
M plone/app/upgrade/v33/tests.py
M plone/app/upgrade/v40/__init__.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v40/tests.py
M plone/app/upgrade/v41/__init__.py
M plone/app/upgrade/v41/alphas.py
M plone/app/upgrade/v41/betas.py
M plone/app/upgrade/v41/tests.py
M plone/app/upgrade/v42/__init__.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v42/final.py
M plone/app/upgrade/v43/__init__.py
M plone/app/upgrade/v43/alphas.py
M plone/app/upgrade/v43/tests.py
M setup.py

diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index 1843de8..a7844c1 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -24,7 +24,7 @@ def getNonInstallableProducts(self):
             'plone.app.upgrade.v43',
             'plone.app.upgrade.v50',
             'plone.app.upgrade.v51',
-            ]
+        ]
 
 # Make sure folks upgrading from Plone 2.1 see a helpful message telling them
 # how to do a two-stage upgrade, instead of a GroupUserFolder error.
@@ -137,10 +137,12 @@ def getNonInstallableProducts(self):
 except ImportError:
     alias_module('Products.PloneLanguageTool.interfaces', bbb)
     alias_module('Products.PloneLanguageTool', bbbd)
-    __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool = __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool.LanguageTool
+    __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool = __import__(
+        'Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool.LanguageTool
 
 
-# To solve the __iro__ problem because CMFPlacefulWorkflow interfaces changed on 1.6.1
+# To solve the __iro__ problem because CMFPlacefulWorkflow interfaces
+# changed on 1.6.1
 try:
     pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
     from Products.CMFPlacefulWorkflow.interfaces import portal_placeful_workflow
@@ -150,4 +152,5 @@ def getNonInstallableProducts(self):
     pass
 except:
     from Products.CMFPlacefulWorkflow import interfaces
-    alias_module('Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
+    alias_module(
+        'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
diff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py
index 7d95cc9..62d00ff 100644
--- a/plone/app/upgrade/atcontentypes_bbb.py
+++ b/plone/app/upgrade/atcontentypes_bbb.py
@@ -9,6 +9,7 @@
 class FactoryTool(SimpleItem):
     ''' Compatibility code for portal_factory
     '''
+
     def __nonzero__(self):
         ''' Always evealuate to False
         '''
diff --git a/plone/app/upgrade/bbb.py b/plone/app/upgrade/bbb.py
index 287de1c..9866b48 100644
--- a/plone/app/upgrade/bbb.py
+++ b/plone/app/upgrade/bbb.py
@@ -66,6 +66,8 @@ def removeActionIcon(self, category, action_id):
         self._icons = tuple(icons)
 
 # BBB from CMFDefault
+
+
 class SyndicationInformation(SimpleItem):
-        id='syndication_information'
-        meta_type='SyndicationInformation'
+    id = 'syndication_information'
+    meta_type = 'SyndicationInformation'
diff --git a/plone/app/upgrade/bbbd/LanguageTool.py b/plone/app/upgrade/bbbd/LanguageTool.py
index b43e57a..fe82763 100644
--- a/plone/app/upgrade/bbbd/LanguageTool.py
+++ b/plone/app/upgrade/bbbd/LanguageTool.py
@@ -12,4 +12,4 @@ def __call__(self, container, req):
     def manage_beforeDelete(self, item, container):
         if item is self:
             handle = self.meta_type + '/' + self.getId()
-            BeforeTraverse.unregisterBeforeTraverse(container, handle)
\ No newline at end of file
+            BeforeTraverse.unregisterBeforeTraverse(container, handle)
diff --git a/plone/app/upgrade/bbbd/__init__.py b/plone/app/upgrade/bbbd/__init__.py
index fd1fad2..56fc51d 100644
--- a/plone/app/upgrade/bbbd/__init__.py
+++ b/plone/app/upgrade/bbbd/__init__.py
@@ -1,2 +1 @@
 from .LanguageTool import LanguageTool
-
diff --git a/plone/app/upgrade/gruf_bbb.py b/plone/app/upgrade/gruf_bbb.py
index 582a8e4..d1033ba 100644
--- a/plone/app/upgrade/gruf_bbb.py
+++ b/plone/app/upgrade/gruf_bbb.py
@@ -1,16 +1,20 @@
 from persistent import Persistent
 from Products.Five import BrowserView
 
+
 class UpgradeProcessError(Exception):
     """Two-stage upgrade required."""
 
+
 class GroupUserFolder(Persistent):
     """Dummy GRUF for the purpose of raising our exception
        when its iterator is called by the ZPublisher validation hook
     """
+
     def __iter__(self):
         raise UpgradeProcessError
 
+
 class UpgradeProcessErrorView(BrowserView):
 
     def __call__(self):
diff --git a/plone/app/upgrade/kupu_bbb.py b/plone/app/upgrade/kupu_bbb.py
index 38776bd..6dd9fd5 100644
--- a/plone/app/upgrade/kupu_bbb.py
+++ b/plone/app/upgrade/kupu_bbb.py
@@ -12,7 +12,7 @@ def get_stripped_attributes(self):
 
     def get_stripped_combinations(self):
         stripped = [(tags, attrs) for (tags, attrs) in
-            self.getHtmlExclusions() if tags and attrs]
+                    self.getHtmlExclusions() if tags and attrs]
         return stripped
 
     def getHtmlExclusions(self):
diff --git a/plone/app/upgrade/tests/__init__.py b/plone/app/upgrade/tests/__init__.py
index 4287ca8..792d600 100644
--- a/plone/app/upgrade/tests/__init__.py
+++ b/plone/app/upgrade/tests/__init__.py
@@ -1 +1 @@
-#
\ No newline at end of file
+#
diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index 66e72ff..5b2491b 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -269,7 +269,8 @@ def updateIconsInBrains(context, typesToUpdate=None):
             # SearchableText
             brain_path = brain.getPath()
             try:
-                catalog.catalog_object(obj, brain_path, ['id'], True, pghandler)
+                catalog.catalog_object(
+                    obj, brain_path, ['id'], True, pghandler)
             except ConflictError:
                 raise
             except Exception:
diff --git a/plone/app/upgrade/v25/__init__.py b/plone/app/upgrade/v25/__init__.py
index 29327e5..bfa47ca 100644
--- a/plone/app/upgrade/v25/__init__.py
+++ b/plone/app/upgrade/v25/__init__.py
@@ -8,7 +8,8 @@
 def final_two51(context):
     """2.5-final -> 2.5.1
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v25:2.5final-2.5.1')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v25:2.5final-2.5.1')
 
     # Required for #5569 (is_folderish needs reindexing) and #5231 (all text
     # indices need to be reindexed so they are split properly)
@@ -27,7 +28,7 @@ def fixupPloneLexicon(context):
             pipeline = list(lexicon._pipeline)
             if len(pipeline) >= 2:
                 if (not isinstance(pipeline[0], Splitter) or
-                    not isinstance(pipeline[1], CaseNormalizer)):
+                        not isinstance(pipeline[1], CaseNormalizer)):
                     pipeline[0] = Splitter()
                     pipeline[1] = CaseNormalizer()
                     lexicon._pipeline = tuple(pipeline)
@@ -70,7 +71,7 @@ def addMissingMimeTypes(context):
     mtr = getToolByName(context, 'mimetypes_registry', None)
     if mtr is not None:
         mtr.manage_addMimeType('text/x-web-markdown',
-            ['text/x-web-markdown'], ['markdown'], 'text.png')
+                               ['text/x-web-markdown'], ['markdown'], 'text.png')
         mtr.manage_addMimeType('text/x-web-textile',
-            ['text/x-web-textile'], ['textile'], 'text.png')
+                               ['text/x-web-textile'], ['textile'], 'text.png')
         logger.info("Added `text/x-web-markdown` and `text/x-web-textile`.")
diff --git a/plone/app/upgrade/v25/tests.py b/plone/app/upgrade/v25/tests.py
index 32628fb..cf752cf 100644
--- a/plone/app/upgrade/v25/tests.py
+++ b/plone/app/upgrade/v25/tests.py
@@ -59,7 +59,7 @@ def testSetLoginFormInCookieAuth(self):
         setLoginFormInCookieAuth(self.portal)
         cookie_auth = self.portal.acl_users.credentials_cookie_auth
         self.assertEqual(cookie_auth.getProperty('login_path'),
-                             'require_login')
+                         'require_login')
 
     def testSetLoginFormNoCookieAuth(self):
         # Shouldn't error
@@ -72,7 +72,9 @@ def testSetLoginFormAlreadyChanged(self):
         cookie_auth = self.portal.acl_users.credentials_cookie_auth
         cookie_auth.manage_changeProperties(login_path='foo')
         setLoginFormInCookieAuth(self.portal)
-        self.assertTrue(cookie_auth.getProperty('login_path') != 'require_login')
+        self.assertTrue(cookie_auth.getProperty(
+            'login_path') != 'require_login')
+
 
 class TestMigrations_v2_5_2(MigrationTest):
 
@@ -92,10 +94,12 @@ def testMissingMimeTypes(self):
         if types_to_delete:
             self.mimetypes.manage_delObjects(types_to_delete)
         # now they're gone:
-        self.assertFalse(set(self.mimetypes.list_mimetypes()).issuperset(set(missing_types)))
+        self.assertFalse(set(self.mimetypes.list_mimetypes()
+                             ).issuperset(set(missing_types)))
         addMissingMimeTypes(self.portal)
         # now they're back:
-        self.assertTrue(set(self.mimetypes.list_mimetypes()).issuperset(set(missing_types)))
+        self.assertTrue(set(self.mimetypes.list_mimetypes()
+                            ).issuperset(set(missing_types)))
 
 
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
diff --git a/plone/app/upgrade/v30/alphas.py b/plone/app/upgrade/v30/alphas.py
index a4a6a00..1fe1d9e 100644
--- a/plone/app/upgrade/v30/alphas.py
+++ b/plone/app/upgrade/v30/alphas.py
@@ -160,16 +160,18 @@ def migrateOldActions(context):
     # We don't need to operate on the providers that are still valid and
     # should ignore the control panel as well
     providers = [obj for obj in portal.objectValues()
-                     if hasattr(obj, '_actions') and
-                     obj.getId() not in special_providers]
+                 if hasattr(obj, '_actions') and
+                 obj.getId() not in special_providers]
     non_empty_providers = [p for p in providers if len(p._actions) > 0]
     for provider in non_empty_providers:
         for action in provider._actions:
             category = action.category
             # check if the category already exists, otherwise create it
-            new_category = getattr(aq_base(portal.portal_actions), category, None)
+            new_category = getattr(
+                aq_base(portal.portal_actions), category, None)
             if new_category is None:
-                portal.portal_actions._setObject(category, ActionCategory(id=category))
+                portal.portal_actions._setObject(
+                    category, ActionCategory(id=category))
                 new_category = portal.portal_actions[category]
 
             # Special handling for Expressions
@@ -181,12 +183,12 @@ def migrateOldActions(context):
                 available_expr = action.condition.text
 
             new_action = Action(action.id,
-                title=action.title,
-                description=action.description,
-                url_expr=url_expr,
-                available_expr=available_expr,
-                permissions=action.permissions,
-                visible = action.visible)
+                                title=action.title,
+                                description=action.description,
+                                url_expr=url_expr,
+                                available_expr=available_expr,
+                                permissions=action.permissions,
+                                visible=action.visible)
 
             # Only add an action if there isn't one with that name already
             if getattr(aq_base(new_category), action.id, None) is None:
@@ -230,7 +232,7 @@ def updateFTII18NDomain(context):
 def addPortletManagers(context):
     """Add new portlets managers."""
     loadMigrationProfile(context, 'profile-Products.CMFPlone:plone',
-            steps=['portlets'])
+                         steps=['portlets'])
 
 
 def convertLegacyPortlets(context):
@@ -252,10 +254,13 @@ def convertLegacyPortlets(context):
     if members is not None:
         membersRightSlots = getattr(aq_base(members), 'right_slots', None)
         if membersRightSlots == []:
-            rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=portal)
-            portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
+            rightColumn = getUtility(
+                IPortletManager, name=u'plone.rightcolumn', context=portal)
+            portletAssignments = getMultiAdapter(
+                (members, rightColumn,), ILocalPortletAssignmentManager)
             portletAssignments.setBlacklistStatus(CONTEXT_PORTLETS, True)
-            logger.info('Blacklisted contextual portlets in the Members folder')
+            logger.info(
+                'Blacklisted contextual portlets in the Members folder')
 
 
 def installProduct(product, portal, out=None, hidden=False):
@@ -277,7 +282,7 @@ def installProduct(product, portal, out=None, hidden=False):
                 ('portal_diff', IDiffTool),
                 ('portal_uidannotation', IUniqueIdAnnotationManagement),
                 ('portal_uidgenerator', IUniqueIdGenerator),
-               )
+                )
 if HAS_ATCT:
     registration += (('portal_atct', IATCTTool),)
 
@@ -292,7 +297,8 @@ def installProduct(product, portal, out=None, hidden=False):
                 ICachingPolicyManager, IRegistrationTool, IArchetypeTool,
                 ITranslationServiceTool, IQuickInstallerTool,
                 ISetupTool,
-               )
+                )
+
 
 def registerToolsAsUtilities(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
@@ -329,8 +335,10 @@ def addReaderAndEditorRoles(context):
     if 'Editor' not in portal.acl_users.portal_role_manager.listRoleIds():
         portal.acl_users.portal_role_manager.addRole('Editor')
 
-    viewRoles = [r['name'] for r in portal.rolesOfPermission('View') if r['selected']]
-    modifyRoles = [r['name'] for r in portal.rolesOfPermission('Modify portal content') if r['selected']]
+    viewRoles = [r['name']
+                 for r in portal.rolesOfPermission('View') if r['selected']]
+    modifyRoles = [r['name'] for r in portal.rolesOfPermission(
+        'Modify portal content') if r['selected']]
 
     if 'Reader' not in viewRoles:
         viewRoles.append('Reader')
@@ -348,20 +356,23 @@ def migrateLocalroleForm(context):
     if portal_types is not None:
         for fti in portal_types.objectValues():
             if not hasattr(fti, '_aliases'):
-                fti._aliases={}
+                fti._aliases = {}
 
             aliases = fti.getMethodAliases()
             new_aliases = aliases.copy()
             for k, v in aliases.items():
                 if 'folder_localrole_form' in v:
-                    new_aliases[k] = v.replace('folder_localrole_form', '@@sharing')
+                    new_aliases[k] = v.replace(
+                        'folder_localrole_form', '@@sharing')
             fti.setMethodAliases(new_aliases)
 
             for a in fti.listActions():
                 expr = a.getActionExpression()
                 if 'folder_localrole_form' in expr:
-                    a.setActionExpression(expr.replace('folder_localrole_form', '@@sharing'))
-    logger.info('Ensured references to folder_localrole_form point to @@sharing now')
+                    a.setActionExpression(expr.replace(
+                        'folder_localrole_form', '@@sharing'))
+    logger.info(
+        'Ensured references to folder_localrole_form point to @@sharing now')
 
 
 def reorderUserActions(context):
@@ -369,7 +380,8 @@ def reorderUserActions(context):
     if portal_actions is not None:
         user_category = getattr(portal_actions, 'user', None)
         if user_category is not None:
-            new_actions = ['login', 'join', 'mystuff', 'preferences', 'undo', 'logout']
+            new_actions = ['login', 'join', 'mystuff',
+                           'preferences', 'undo', 'logout']
             new_actions.reverse()
             for action in new_actions:
                 if action in user_category.objectIds():
@@ -379,8 +391,10 @@ def reorderUserActions(context):
 def updateMemberSecurity(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
     pprop = getToolByName(portal, 'portal_properties')
-    portal.manage_permission('Add portal member', roles=['Manager','Owner'], acquire=0)
-    pprop.site_properties.manage_changeProperties(allowAnonymousViewAbout=False)
+    portal.manage_permission('Add portal member', roles=[
+                             'Manager', 'Owner'], acquire=0)
+    pprop.site_properties.manage_changeProperties(
+        allowAnonymousViewAbout=False)
 
     portal.manage_changeProperties(validate_email=True)
 
@@ -397,7 +411,7 @@ def updatePASPlugins(context):
     activatePluginInterfaces(portal, 'mutable_properties')
     activatePluginInterfaces(portal, 'source_users')
     activatePluginInterfaces(portal, 'credentials_cookie_auth',
-            disable=['ICredentialsResetPlugin', 'ICredentialsUpdatePlugin'])
+                             disable=['ICredentialsResetPlugin', 'ICredentialsUpdatePlugin'])
     if not portal.acl_users.objectIds(['Plone Session Plugin']):
         from plone.session.plugins.session import manage_addSessionPlugin
         manage_addSessionPlugin(portal.acl_users, 'session')
@@ -456,10 +470,12 @@ def addCacheForResourceRegistry(context):
         RAMCacheManager.manage_addRAMCacheManager(portal, ram_cache_id)
         cache = getattr(portal, ram_cache_id)
         settings = cache.getSettings()
-        settings['max_age'] = 24*3600 # keep for up to 24 hours
+        settings['max_age'] = 24 * 3600  # keep for up to 24 hours
         settings['request_vars'] = ('URL',)
-        cache.manage_editProps('Cache for saved ResourceRegistry files', settings)
-        logger.info('Created RAMCache %s for ResourceRegistry output' % ram_cache_id)
+        cache.manage_editProps(
+            'Cache for saved ResourceRegistry files', settings)
+        logger.info('Created RAMCache %s for ResourceRegistry output' %
+                    ram_cache_id)
     reg = getToolByName(portal, 'portal_css', None)
     if reg is not None and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) is not None:
         reg.ZCacheable_setManagerId(ram_cache_id)
@@ -477,8 +493,8 @@ def removeTablelessSkin(context):
     if 'Plone Tableless' in st.getSkinSelections():
         st.manage_skinLayers(['Plone Tableless'], del_skin=True)
         logger.info("Removed the Plone Tableless skin")
-    if st.default_skin=='Plone Tableless':
-        st.default_skin='Plone Default'
+    if st.default_skin == 'Plone Tableless':
+        st.default_skin = 'Plone Default'
         logger.info("Changed the default skin to 'Plone Default'")
 
 
@@ -496,7 +512,7 @@ def removeMyStuffAction(context):
     actions = getToolByName(context, 'portal_actions')
     if getattr(actions, 'user', None) is None:
         return
-    category=actions.user
+    category = actions.user
     if 'mystuff' in category.objectIds():
         category.manage_delObjects(ids=['mystuff'])
         logger.info("Removed the mystuff user action")
@@ -510,11 +526,11 @@ def addMissingWorkflows(context):
     if wft is None:
         return
 
-    new_workflow_ids = [ 'intranet_workflow', 'intranet_folder_workflow',
+    new_workflow_ids = ['intranet_workflow', 'intranet_folder_workflow',
                         'one_state_workflow', 'simple_publication_workflow']
     encoding = 'utf-8'
     path_prefix = os.path.join(package_home(cmfplone_globals), 'profiles',
-            'default', 'workflows')
+                               'default', 'workflows')
 
     for wf_id in new_workflow_ids:
         if wf_id in wft.objectIds():
@@ -522,44 +538,19 @@ def addMissingWorkflows(context):
             continue
 
         path = os.path.join(path_prefix, wf_id, 'definition.xml')
-        body = open(path,'r').read()
+        body = open(path, 'r').read()
 
         wft._setObject(wf_id, DCWorkflowDefinition(wf_id))
         wf = wft[wf_id]
         wfdc = WorkflowDefinitionConfigurator(wf)
 
-        ( workflow_id
-        , title
-        , state_variable
-        , initial_state
-        , states
-        , transitions
-        , variables
-        , worklists
-        , permissions
-        , scripts
-        , description
-        , manager_bypass
-        , creation_guard
-        ) = wfdc.parseWorkflowXML(body, encoding)
-
-        _initDCWorkflow( wf
-                       , title
-                       , description
-                       , manager_bypass
-                       , creation_guard
-                       , state_variable
-                       , initial_state
-                       , states
-                       , transitions
-                       , variables
-                       , worklists
-                       , permissions
-                       , scripts
-                       , portal     # not sure what to pass here
-                                    # the site or the wft?
-                                    # (does it matter at all?)
-                      )
+        (workflow_id, title, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, description, manager_bypass, creation_guard
+         ) = wfdc.parseWorkflowXML(body, encoding)
+
+        _initDCWorkflow(wf, title, description, manager_bypass, creation_guard, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, portal     # not sure what to pass here
+                        # the site or the wft?
+                        # (does it matter at all?)
+                        )
         logger.info("Added workflow %s" % wf_id)
 
 
@@ -580,4 +571,3 @@ def restorePloneTool(context):
 def updateImportStepsFromBaseProfile(context):
     """Updates the available import steps for existing sites."""
     context.setBaselineContext("profile-%s" % _DEFAULT_PROFILE)
-
diff --git a/plone/app/upgrade/v30/betas.py b/plone/app/upgrade/v30/betas.py
index a75464f..48f7077 100644
--- a/plone/app/upgrade/v30/betas.py
+++ b/plone/app/upgrade/v30/betas.py
@@ -46,6 +46,7 @@ def changeOrderOfActionProviders(context):
         portal_actions.addActionProvider('portal_actions')
         logger.info('Changed the order of action providers.')
 
+
 def cleanupOldActions(context):
     portal_actions = getToolByName(context, 'portal_actions', None)
     if portal_actions is not None:
@@ -82,6 +83,7 @@ def cleanupOldActions(context):
                 portal_actions._delObject('global')
                 logger.info('Removed global action category.')
 
+
 def cleanDefaultCharset(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
     charset = portal.getProperty('default_charset', None)
@@ -100,11 +102,12 @@ def addAutoGroupToPAS(context):
     if not portal.acl_users.objectIds(['Automatic Group Plugin']):
         from Products.PlonePAS.plugins.autogroup import manage_addAutoGroup
         manage_addAutoGroup(portal.acl_users, 'auto_group',
-                'Automatic Group Provider',
-                'AuthenticatedUsers', "Logged-in users (Virtual Group)")
+                            'Automatic Group Provider',
+                            'AuthenticatedUsers', "Logged-in users (Virtual Group)")
         activatePluginInterfaces(portal, "auto_group", sout)
         logger.info("Added automatic group PAS plugin")
 
+
 def removeS5Actions(context):
     portalTypes = getToolByName(context, 'portal_types', None)
     if portalTypes is not None:
@@ -114,14 +117,17 @@ def removeS5Actions(context):
             if 's5_presentation' in ids:
                 index = ids.index('s5_presentation')
                 document.deleteActions([index])
-                logger.info("Removed 's5_presentation' action from actions tool.")
+                logger.info(
+                    "Removed 's5_presentation' action from actions tool.")
 
     iconsTool = queryUtility(IActionIconsTool)
     if iconsTool is not None:
         ids = [x._action_id for x in iconsTool.listActionIcons()]
         if 's5_presentation' in ids:
-            iconsTool.removeActionIcon('plone','s5_presentation')
-            logger.info("Removed 's5_presentation' icon from actionicons tool.")
+            iconsTool.removeActionIcon('plone', 's5_presentation')
+            logger.info(
+                "Removed 's5_presentation' icon from actionicons tool.")
+
 
 def addContributorToCreationPermissions(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
@@ -131,14 +137,17 @@ def addContributorToCreationPermissions(context):
         portal.acl_users.portal_role_manager.addRole('Contributor')
 
     for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                'ATContentTypes: Add Event',
-                'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                'ATContentTypes: Add News Item', ]:
-        roles = [r['name'] for r in portal.rolesOfPermission(p) if r['selected']]
+              'ATContentTypes: Add Event',
+              'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
+              'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
+              'ATContentTypes: Add News Item', ]:
+        roles = [r['name']
+                 for r in portal.rolesOfPermission(p) if r['selected']]
         if 'Contributor' not in roles:
             roles.append('Contributor')
-            portal.manage_permission(p, roles, bool(portal.acquiredRolesAreUsedBy(p)))
+            portal.manage_permission(p, roles, bool(
+                portal.acquiredRolesAreUsedBy(p)))
+
 
 def removeSharingAction(context):
     portal_types = getToolByName(context, 'portal_types', None)
@@ -150,13 +159,17 @@ def removeSharingAction(context):
 
         logger.info('Removed explicit references to sharing action')
 
+
 def addEditorToSecondaryEditorPermissions(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
     for p in ['Manage properties', 'Modify view template', 'Request review']:
-        roles = [r['name'] for r in portal.rolesOfPermission(p) if r['selected']]
+        roles = [r['name']
+                 for r in portal.rolesOfPermission(p) if r['selected']]
         if 'Editor' not in roles:
             roles.append('Editor')
-            portal.manage_permission(p, roles, bool(portal.acquiredRolesAreUsedBy(p)))
+            portal.manage_permission(p, roles, bool(
+                portal.acquiredRolesAreUsedBy(p)))
+
 
 def updateEditActionConditionForLocking(context):
     """
@@ -173,7 +186,9 @@ def updateEditActionConditionForLocking(context):
             if fti:
                 for action in fti.listActions():
                     if action.getId() == 'edit' and not action.condition:
-                        action.condition = Expression("not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
+                        action.condition = Expression(
+                            "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
+
 
 def addOnFormUnloadJS(context):
     """
@@ -186,12 +201,13 @@ def addOnFormUnloadJS(context):
         # Failsafe: first make sure the stylesheet doesn't exist in the list
         if script not in script_ids:
             jsreg.registerScript(script,
-                                 enabled = True,
-                                 cookable = True)
+                                 enabled=True,
+                                 cookable=True)
             # put it at the bottom of the stack
             jsreg.moveResourceToBottom(script)
             logger.info("Added " + script + " to portal_javascripts")
 
+
 def updateTopicTitle(context):
     """Update the title of the topic type."""
     tt = getToolByName(context, 'portal_types', None)
@@ -210,15 +226,16 @@ def cleanupActionProviders(context):
             at.deleteActionProvider(provider)
             logger.info("%s is no longer an action provider" % provider)
 
+
 def hidePropertiesAction(context):
     tt = getToolByName(context, 'portal_types', None)
     if not IActionProvider.providedBy(tt):
         return
     for ti in tt.listTypeInfo():
         actions = ti.listActions()
-        index=[i for i in range(len(actions) )
-                if actions[i].category=="object" and
-                   actions[i].id=="metadata"]
+        index = [i for i in range(len(actions))
+                 if actions[i].category == "object" and
+                 actions[i].id == "metadata"]
         if index:
             ti.deleteActions(index)
             logger.info("Removed properties action from type %s" % ti.id)
diff --git a/plone/app/upgrade/v30/final_three0x.py b/plone/app/upgrade/v30/final_three0x.py
index 5c47471..62ea2fd 100644
--- a/plone/app/upgrade/v30/final_three0x.py
+++ b/plone/app/upgrade/v30/final_three0x.py
@@ -6,7 +6,8 @@
 
 
 def final_three01(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0final-3.0.1')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v30:3.0final-3.0.1')
 
 
 def three01_three02(context):
diff --git a/plone/app/upgrade/v30/rcs.py b/plone/app/upgrade/v30/rcs.py
index c78701d..50fcbd8 100644
--- a/plone/app/upgrade/v30/rcs.py
+++ b/plone/app/upgrade/v30/rcs.py
@@ -10,13 +10,16 @@
 
 
 def rc2_final(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final')
     try:
         import plone.app.iterate
     except ImportError:
         pass
     else:
-        loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final-iterate')
+        loadMigrationProfile(
+            context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final-iterate')
+
 
 def addIntelligentText(context):
     """ add intelligenttext mime type and transforms that have been
diff --git a/plone/app/upgrade/v30/tests.py b/plone/app/upgrade/v30/tests.py
index 2a3a2cf..bab3076 100644
--- a/plone/app/upgrade/v30/tests.py
+++ b/plone/app/upgrade/v30/tests.py
@@ -139,16 +139,17 @@ def afterSetUp(self):
     def _migrate_reply_action(self):
         # Create dummy old ActionInformation
         reply = ActionInformation('reply',
-            title='Reply',
-            category='reply_actions',
-            condition='context/replyAllowed',
-            permissions=(AccessInactivePortalContent, ),
-            priority=10,
-            visible=True,
-            action='context/reply'
-        )
+                                  title='Reply',
+                                  category='reply_actions',
+                                  condition='context/replyAllowed',
+                                  permissions=(AccessInactivePortalContent, ),
+                                  priority=10,
+                                  visible=True,
+                                  action='context/reply'
+                                  )
 
         from OFS.SimpleItem import SimpleItem
+
         class DummyTool(SimpleItem):
             pass
         dummy = DummyTool()
@@ -169,7 +170,8 @@ def testMigrateActions(self):
             self.assertEqual(data['category'], 'reply_actions')
             self.assertEqual(data['title'], 'Reply')
             self.assertEqual(data['visible'], True)
-            self.assertEqual(data['permissions'], (AccessInactivePortalContent, ))
+            self.assertEqual(data['permissions'],
+                             (AccessInactivePortalContent, ))
             self.assertEqual(data['available'].text, 'context/replyAllowed')
             self.assertEqual(data['url'].text, 'context/reply')
             # Make sure the original action has been removed
@@ -204,17 +206,19 @@ def testHistoryActionID(self):
 
     def testProviderCleanup(self):
         self.actions.addActionProvider("portal_membership")
-        self.assertTrue("portal_membership" in self.actions.listActionProviders())
+        self.assertTrue(
+            "portal_membership" in self.actions.listActionProviders())
         # Test it twice
         for i in range(2):
             cleanupActionProviders(self.portal)
-            self.assertFalse("portal_membership" in self.actions.listActionProviders())
+            self.assertFalse(
+                "portal_membership" in self.actions.listActionProviders())
 
     def testRemovePropertiesActions(self):
         ti = self.types.getTypeInfo("Document")
         if ti.getActionObject("object/properties") is None:
             ti.addAction("metadata", "name", "action", "condition",
-                    "permission", "object",)
+                         "permission", "object",)
         # Test it twice
         for i in range(2):
             hidePropertiesAction(self.portal)
@@ -270,7 +274,8 @@ def testEnableZope3Site(self):
         # Test it twice
         for i in range(2):
             enableZope3Site(self.portal)
-            self.assertEqual(sm.utilities.LookupClass, FiveVerifyingAdapterLookup)
+            self.assertEqual(sm.utilities.LookupClass,
+                             FiveVerifyingAdapterLookup)
             self.assertEqual(sm.utilities.__parent__, sm)
             self.assertEqual(sm.__parent__, self.portal)
 
@@ -292,26 +297,33 @@ def testUpdateFTII18NDomainNonAscii(self):
         self.assertEqual(doc.i18n_domain, '')
 
     def testAddDefaultAndForbiddenContentTypesProperties(self):
-        # Should add the forbidden_contenttypes and default_contenttype property
+        # Should add the forbidden_contenttypes and default_contenttype
+        # property
         self.removeSiteProperty('forbidden_contenttypes')
         self.removeSiteProperty('default_contenttype')
-        self.assertFalse(self.properties.site_properties.hasProperty('forbidden_contenttypes'))
-        self.assertFalse(self.properties.site_properties.hasProperty('default_contenttype'))
+        self.assertFalse(self.properties.site_properties.hasProperty(
+            'forbidden_contenttypes'))
+        self.assertFalse(
+            self.properties.site_properties.hasProperty('default_contenttype'))
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('propertiestool', ))
-            self.assertTrue(self.properties.site_properties.hasProperty('forbidden_contenttypes'))
-            self.assertTrue(self.properties.site_properties.hasProperty('default_contenttype'))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('propertiestool', ))
+            self.assertTrue(self.properties.site_properties.hasProperty(
+                'forbidden_contenttypes'))
+            self.assertTrue(self.properties.site_properties.hasProperty(
+                'default_contenttype'))
             self.assertEqual(self.properties.site_properties.forbidden_contenttypes,
-                ('text/structured', 'text/restructured', 'text/x-rst',
-                'text/plain', 'text/plain-pre', 'text/x-python',
-                'text/x-web-markdown', 'text/x-web-intelligent', 'text/x-web-textile')
-            )
+                             ('text/structured', 'text/restructured', 'text/x-rst',
+                              'text/plain', 'text/plain-pre', 'text/x-python',
+                              'text/x-web-markdown', 'text/x-web-intelligent', 'text/x-web-textile')
+                             )
 
     def testTablelessRemoval(self):
         st = getToolByName(self.portal, "portal_skins")
         if "Plone Tableless" not in st.getSkinSelections():
-            st.addSkinSelection('Plone Tableless', 'one,two', make_default=True)
+            st.addSkinSelection('Plone Tableless',
+                                'one,two', make_default=True)
         # Test it twice
         for i in range(2):
             removeTablelessSkin(self.portal)
@@ -320,11 +332,15 @@ def testTablelessRemoval(self):
 
     def testLegacyPortletsConverted(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -346,8 +362,10 @@ def testLegacyPortletsConverted(self):
             self.assertEqual(self.portal.left_slots, [])
             self.assertEqual(self.portal.right_slots, [])
 
-            left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-            right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+            left = getMultiAdapter(
+                (self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
+            right = getMultiAdapter(
+                (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
             lp = left.values()
             self.assertEqual(2, len(lp))
@@ -360,16 +378,22 @@ def testLegacyPortletsConverted(self):
             self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
 
             members = self.portal.Members
-            portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
-            self.assertEqual(True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
+            portletAssignments = getMultiAdapter(
+                (members, rightColumn,), ILocalPortletAssignmentManager)
+            self.assertEqual(
+                True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
 
     def testLegacyPortletsConvertedNoSlots(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -388,8 +412,10 @@ def testLegacyPortletsConvertedNoSlots(self):
 
         self.assertEqual(self.portal.left_slots, [])
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         lp = left.values()
         self.assertEqual(2, len(lp))
@@ -401,16 +427,22 @@ def testLegacyPortletsConvertedNoSlots(self):
         self.assertEqual(0, len(rp))
 
         members = self.portal.Members
-        portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
+        portletAssignments = getMultiAdapter(
+            (members, rightColumn,), ILocalPortletAssignmentManager)
+        self.assertEqual(
+            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
 
     def testLegacyPortletsConvertedBadSlots(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -419,14 +451,16 @@ def testLegacyPortletsConvertedBadSlots(self):
 
         self.portal.left_slots = ['here/portlet_recent/macros/portlet',
                                   'here/portlet_news/macros/portlet',
-                                  'foobar',]
+                                  'foobar', ]
         self.portal.right_slots = ['here/portlet_login/macros/portlet']
 
         self.portal.Members.right_slots = []
 
         convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         self.assertEqual(self.portal.left_slots, [])
         self.assertEqual(self.portal.right_slots, [])
@@ -442,16 +476,22 @@ def testLegacyPortletsConvertedBadSlots(self):
         self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
 
         members = self.portal.Members
-        portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
+        portletAssignments = getMultiAdapter(
+            (members, rightColumn,), ILocalPortletAssignmentManager)
+        self.assertEqual(
+            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
 
     def testLegacyPortletsConvertedNoMembersFolder(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -460,14 +500,16 @@ def testLegacyPortletsConvertedNoMembersFolder(self):
 
         self.portal.left_slots = ['here/portlet_recent/macros/portlet',
                                   'here/portlet_news/macros/portlet',
-                                  'foobar',]
+                                  'foobar', ]
         self.portal.right_slots = ['here/portlet_login/macros/portlet']
 
         self.portal._delObject('Members')
 
         convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         self.assertEqual(self.portal.left_slots, [])
         self.assertEqual(self.portal.right_slots, [])
@@ -518,7 +560,7 @@ def testDontRegisterToolsAsUtilities(self):
                       IMemberDataTool, IArchetypeTool, ICachingPolicyManager,
                       IRegistrationTool, ITranslationServiceTool,
                       ISetupTool, IQuickInstallerTool,
-                     )
+                      )
         for i in interfaces:
             sm.unregisterUtility(provided=i)
         registerToolsAsUtilities(self.portal)
@@ -548,7 +590,8 @@ def testInstallRedirectorUtility(self):
         sm.unregisterUtility(provided=IRedirectionStorage)
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('componentregistry', ))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('componentregistry', ))
             self.assertFalse(sm.queryUtility(IRedirectionStorage) is None)
 
     def testAddReaderEditorRoles(self):
@@ -558,10 +601,14 @@ def testAddReaderEditorRoles(self):
             addReaderAndEditorRoles(self.portal)
             self.assertTrue('Reader' in self.portal.valid_roles())
             self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue('Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole('Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
+            self.assertTrue(
+                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue(
+                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
+                'Reader') if r['selected']])
+            self.assertTrue('Modify portal content' in [
+                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testAddReaderEditorRolesPermissionOnly(self):
         self.portal.manage_permission('View', [], True)
@@ -571,23 +618,29 @@ def testAddReaderEditorRolesPermissionOnly(self):
             addReaderAndEditorRoles(self.portal)
             self.assertTrue('Reader' in self.portal.valid_roles())
             self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue('Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole('Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
+            self.assertTrue(
+                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue(
+                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
+                'Reader') if r['selected']])
+            self.assertTrue('Modify portal content' in [
+                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testMigrateLocalroleForm(self):
         fti = self.portal.portal_types['Document']
         aliases = fti.getMethodAliases()
         aliases['sharing'] = 'folder_localrole_form'
         fti.setMethodAliases(aliases)
-        fti.addAction('test', 'Test', 'string:${object_url}/folder_localrole_form', None, 'View', 'object')
+        fti.addAction(
+            'test', 'Test', 'string:${object_url}/folder_localrole_form', None, 'View', 'object')
         # Test it twice
         for i in range(2):
             migrateLocalroleForm(self.portal)
             self.assertEqual('@@sharing', fti.getMethodAliases()['sharing'])
             test_action = fti.listActions()[-1]
-            self.assertEqual('string:${object_url}/@@sharing', test_action.getActionExpression())
+            self.assertEqual(
+                'string:${object_url}/@@sharing', test_action.getActionExpression())
 
     def testReorderUserActions(self):
         self.actions.user.moveObjectsToTop(['logout', 'undo', 'join'])
@@ -637,7 +690,8 @@ def testAddVariousProperties(self):
         sheet = self.properties.site_properties
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('propertiestool', ))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('propertiestool', ))
             for prop in PROPERTIES:
                 self.assertTrue(sheet.hasProperty(prop))
 
@@ -649,7 +703,8 @@ def testInstallContentrulesAndLanguageUtilities(self):
             sm.unregisterUtility(provided=i)
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('componentregistry', ))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('componentregistry', ))
             for i in INTERFACES:
                 self.assertFalse(sm.queryUtility(i) is None)
 
@@ -688,8 +743,10 @@ def testUpdateMemberSecurity(self):
         self.assertEqual(pmembership.memberareaCreationFlag, False)
         self.assertEqual(self.portal.getProperty('validate_email'), True)
 
-        app_roles = self.portal.rolesOfPermission(permission='Add portal member')
-        app_perms = self.portal.permission_settings(permission='Add portal member')
+        app_roles = self.portal.rolesOfPermission(
+            permission='Add portal member')
+        app_perms = self.portal.permission_settings(
+            permission='Add portal member')
         acquire_check = app_perms[0]['acquire']
         reg_roles = []
         for appperm in app_roles:
@@ -702,14 +759,16 @@ def testUpdateMemberSecurity(self):
     def testPASPluginInterfaces(self):
         pas = self.portal.acl_users
         from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin
-        pas.plugins.deactivatePlugin(IUserEnumerationPlugin, 'mutable_properties')
+        pas.plugins.deactivatePlugin(
+            IUserEnumerationPlugin, 'mutable_properties')
         updatePASPlugins(self.portal)
 
         plugin = pas.mutable_properties
         for intf_id in plugin.listInterfaces():
             try:
                 intf = pas.plugins._getInterfaceFromName(intf_id)
-                self.assertTrue('mutable_properties' in pas.plugins.listPluginIds(intf))
+                self.assertTrue(
+                    'mutable_properties' in pas.plugins.listPluginIds(intf))
             except KeyError:
                 # Ignore unregistered interface types
                 pass
@@ -801,7 +860,8 @@ def testAddContentRulesAction(self):
         # Test it twice
         for i in range(2):
             loadMigrationProfile(self.portal, self.profile, ('actions', ))
-            self.assertTrue('contentrules' in self.portal.portal_actions.object.objectIds())
+            self.assertTrue(
+                'contentrules' in self.portal.portal_actions.object.objectIds())
 
     def testChangeOrderOfActionProviders(self):
         self.actions.deleteActionProvider('portal_types')
@@ -853,16 +913,16 @@ def testCharsetCleanup(self):
             self.portal.manage_addProperty('default_charset', '', 'string')
         # Test it twice
         for i in range(2):
-            self.portal.manage_changeProperties(default_charset = 'latin1')
+            self.portal.manage_changeProperties(default_charset='latin1')
             cleanDefaultCharset(self.portal)
             self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                    'latin1')
+                             'latin1')
         # Test it twice
         for i in range(2):
-            self.portal.manage_changeProperties(default_charset = '')
+            self.portal.manage_changeProperties(default_charset='')
             cleanDefaultCharset(self.portal)
             self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                    'nothere')
+                             'nothere')
 
     def testAutoGroupCreated(self):
         pas = self.portal.acl_users
@@ -871,12 +931,14 @@ def testAutoGroupCreated(self):
             pas.manage_delObjects(ids)
         addAutoGroupToPAS(self.portal)
         self.assertEqual(pas.objectIds(['Automatic Group Plugin']),
-                ['auto_group'])
+                         ['auto_group'])
         plugin = pas.auto_group
-        interfaces = [info['interface'] for info in pas.plugins.listPluginTypeInfo()]
+        interfaces = [info['interface']
+                      for info in pas.plugins.listPluginTypeInfo()]
         for iface in interfaces:
             if plugin.testImplements(iface):
-                self.assertFalse('auto_group' not in pas.plugins.listPluginIds(iface))
+                self.assertFalse(
+                    'auto_group' not in pas.plugins.listPluginIds(iface))
         self.assertEqual(len(pas.searchGroups(id='AuthenticatedUsers',
                                               exact_match=True)), 1)
 
@@ -884,13 +946,13 @@ def testPloneS5(self):
         pt = getToolByName(self.portal, "portal_types")
         document = pt.restrictedTraverse('Document')
         document.addAction('s5_presentation',
-            name='View as presentation',
-            action="string:${object/absolute_url}/document_s5_presentation",
-            condition='python:object.document_s5_alter(test=True)',
-            permission='View',
-            category='document_actions',
-            visible=1,
-            )
+                           name='View as presentation',
+                           action="string:${object/absolute_url}/document_s5_presentation",
+                           condition='python:object.document_s5_alter(test=True)',
+                           permission='View',
+                           category='document_actions',
+                           visible=1,
+                           )
         action_ids = [x.getId() for x in document.listActions()]
         self.assertTrue("s5_presentation" in action_ids)
         # Test it twice
@@ -900,34 +962,37 @@ def testPloneS5(self):
             self.assertFalse("s5_presentation" in action_ids)
 
     def testAddContributorToCreationPermissions(self):
-        self.portal._delRoles(['Contributor',])
+        self.portal._delRoles(['Contributor', ])
         for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                    'ATContentTypes: Add Event',
-                    'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                    'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                    'ATContentTypes: Add News Item', ]:
+                  'ATContentTypes: Add Event',
+                  'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
+                  'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
+                  'ATContentTypes: Add News Item', ]:
             self.portal.manage_permission(p, ['Manager', 'Owner'], True)
         # Test it twice
         for i in range(2):
             addContributorToCreationPermissions(self.portal)
             self.assertTrue('Contributor' in self.portal.valid_roles())
-            self.assertTrue('Contributor' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue(
+                'Contributor' in self.portal.acl_users.portal_role_manager.listRoleIds())
             for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                        'ATContentTypes: Add Event',
-                        'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                        'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                        'ATContentTypes: Add News Item', ]:
+                      'ATContentTypes: Add Event',
+                      'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
+                      'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
+                      'ATContentTypes: Add News Item', ]:
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Contributor') if r['selected']])
+                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
 
     def testAddContributerToCreationPermissionsNoStomp(self):
         self.portal.manage_permission('Add portal content', ['Manager'], False)
         # Test it twice
         for i in range(2):
             addContributorToCreationPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission('Add portal content') if r['selected']])
+            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
+                'Add portal content') if r['selected']])
             self.assertEqual(['Contributor', 'Manager'], roles)
-            self.assertEqual(False, bool(self.portal.acquiredRolesAreUsedBy('Add portal content')))
+            self.assertEqual(False, bool(
+                self.portal.acquiredRolesAreUsedBy('Add portal content')))
 
     def testAddBeta2VersioningPermissionsToNewRoles(self):
         # This upgrade just uses GS to apply the role changes,
@@ -942,19 +1007,19 @@ def testAddBeta2VersioningPermissionsToNewRoles(self):
         # Test it twice
         for i in range(2):
             loadMigrationProfile(self.portal,
-                    'profile-plone.app.upgrade.v30:3.0b1-3.0b2',
-                    steps=["rolemap"])
+                                 'profile-plone.app.upgrade.v30:3.0b1-3.0b2',
+                                 steps=["rolemap"])
             for p in ['CMFEditions: Apply version control',
                       'CMFEditions: Save new version',
                       'CMFEditions: Access previous versions']:
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Contributor') if r['selected']])
+                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Editor') if r['selected']])
+                                      self.portal.permissionsOfRole('Editor') if r['selected']])
             for p in ['CMFEditions: Revert to previous versions',
                       'CMFEditions: Checkout to location']:
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Editor') if r['selected']])
+                                      self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testRemoveSharingAction(self):
         fti = self.types['Document']
@@ -965,7 +1030,8 @@ def testRemoveSharingAction(self):
         # Test it twice
         for i in range(2):
             removeSharingAction(self.portal)
-            self.assertFalse('local_roles' in [a.id for a in fti.listActions()])
+            self.assertFalse('local_roles' in [
+                             a.id for a in fti.listActions()])
 
     def testAddEditorToCreationPermissions(self):
         for p in ['Manage properties', 'Modify view template', 'Request review']:
@@ -975,16 +1041,18 @@ def testAddEditorToCreationPermissions(self):
             addEditorToSecondaryEditorPermissions(self.portal)
             for p in ['Manage properties', 'Modify view template', 'Request review']:
                 self.assertTrue(p in [r['name'] for r in
-                    self.portal.permissionsOfRole('Editor') if r['selected']])
+                                      self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testAddEditorToCreationPermissionsNoStomp(self):
         self.portal.manage_permission('Manage properties', ['Manager'], False)
         # Test it twice
         for i in range(2):
             addEditorToSecondaryEditorPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission('Manage properties') if r['selected']])
+            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
+                'Manage properties') if r['selected']])
             self.assertEqual(['Editor', 'Manager'], roles)
-            self.assertEqual(False, bool(self.portal.acquiredRolesAreUsedBy('Manage properties')))
+            self.assertEqual(False, bool(
+                self.portal.acquiredRolesAreUsedBy('Manage properties')))
 
     def testUpdateEditActionConditionForLocking(self):
         lockable_types = ['Document', 'Event', 'File', 'Folder',
@@ -1002,7 +1070,7 @@ def testUpdateEditActionConditionForLocking(self):
                 for action in fti.listActions():
                     if action.getId() == 'edit':
                         self.assertEqual(action.condition.text,
-                            "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
+                                         "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
 
     def testUpdateEditExistingActionConditionForLocking(self):
         fti = self.types.getTypeInfo('Document')
@@ -1057,28 +1125,30 @@ def testAddIntelligentText(self):
             mtr.manage_delObjects((mime_type,))
         # now all are gone:
         self.assertFalse(mime_type in mtr.list_mimetypes())
-        self.assertFalse(set(ptr.objectIds()).issuperset(set(missing_transforms)))
+        self.assertFalse(set(ptr.objectIds()).issuperset(
+            set(missing_transforms)))
         # Test it twice
         for i in range(2):
             addIntelligentText(self.portal)
             # now all are back:
             self.assertTrue(mime_type in mtr.list_mimetypes())
-            self.assertTrue(set(ptr.objectIds()).issuperset(set(missing_transforms)))
+            self.assertTrue(set(ptr.objectIds()).issuperset(
+                set(missing_transforms)))
 
     def testInstallNewModifiers(self):
         # ensure the new modifiers are installed
         modifiers = self.portal.portal_modifier
         self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                        modifiers.objectIds())
         modifiers.manage_delObjects(['AbortVersioningOfLargeFilesAndImages',
                                      'SkipVersioningOfLargeFilesAndImages'])
         self.assertFalse('AbortVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                         modifiers.objectIds())
         installNewModifiers(self.portal)
         self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                        modifiers.objectIds())
         self.assertTrue('SkipVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                        modifiers.objectIds())
 
     def testInstallNewModifiersTwice(self):
         # ensure that we get no errors when run twice
diff --git a/plone/app/upgrade/v31/betas.py b/plone/app/upgrade/v31/betas.py
index 3124b42..b621f9c 100644
--- a/plone/app/upgrade/v31/betas.py
+++ b/plone/app/upgrade/v31/betas.py
@@ -15,7 +15,8 @@ def three0_beta1(portal):
     """
     out = []
 
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v31:3.0.6-3.1beta1')
+    loadMigrationProfile(
+        portal, 'profile-plone.app.upgrade.v31:3.0.6-3.1beta1')
 
     addBrowserLayer(portal, out)
     addCollectionAndStaticPortlets(portal, out)
@@ -28,14 +29,14 @@ def three0_beta1(portal):
 
 
 def addBrowserLayer(portal, out):
-    qi=getToolByName(portal, "portal_quickinstaller")
+    qi = getToolByName(portal, "portal_quickinstaller")
     if not qi.isProductInstalled("plone.browserlayer"):
         qi.installProduct("plone.browserlayer", locked=True)
         out.append("Installed plone.browserlayer")
 
 
 def addCollectionAndStaticPortlets(portal, out):
-    qi=getToolByName(portal, "portal_quickinstaller")
+    qi = getToolByName(portal, "portal_quickinstaller")
     if not qi.isProductInstalled("plone.portlet.static"):
         qi.installProduct("plone.portlet.static", locked=True)
         out.append("Installed plone.portlet.static")
@@ -51,31 +52,32 @@ def migratePortletTypeRegistrations(portal, out):
         elif type(portletType.for_) is not list:
             portletType.for_ = [portletType.for_]
 
-    out.append("Upgraded portlet types to support multiple " + \
-      "portlet manager interfaces.")
+    out.append("Upgraded portlet types to support multiple " +
+               "portlet manager interfaces.")
 
 
 def removeDoubleGenericSetupSteps(portal, out):
     """Remove all GenericSetup steps that are registered both using
     zcml and in the persistent registry from the persistent registry.
     """
-    st=getToolByName(portal, "portal_setup")
-    view=ImportStepsView(st, None)
-    steps=[step["id"] for step in view.doubleSteps()]
+    st = getToolByName(portal, "portal_setup")
+    view = ImportStepsView(st, None)
+    steps = [step["id"] for step in view.doubleSteps()]
     if steps:
         for step in steps:
             st._import_registry.unregisterStep(step)
-        st._p_changed=True
+        st._p_changed = True
         out.append("Removed doubly registered GenericSetup import steps: %s" %
-                " ".join(steps))
+                   " ".join(steps))
 
-    view=ExportStepsView(st, None)
-    steps=[step["id"] for step in view.doubleSteps()]
+    view = ExportStepsView(st, None)
+    steps = [step["id"] for step in view.doubleSteps()]
     if steps:
         for step in steps:
             st._export_registry.unregisterStep(step)
         out.append("Removed doubly registered GenericSetup export steps: %s" %
-                " ".join(steps))
+                   " ".join(steps))
+
 
 def reinstallCMFPlacefulWorkflow(portal, out):
     qi = getToolByName(portal, 'portal_quickinstaller', None)
diff --git a/plone/app/upgrade/v31/final_three1x.py b/plone/app/upgrade/v31/final_three1x.py
index 0c461eb..f0ab05d 100644
--- a/plone/app/upgrade/v31/final_three1x.py
+++ b/plone/app/upgrade/v31/final_three1x.py
@@ -1,9 +1,11 @@
 from plone.app.upgrade.utils import loadMigrationProfile
 
+
 def three11_three12(portal):
     """3.1.1 -> 3.1.2"""
     pass
 
+
 def three14_three15(portal):
     """3.1.4 -> 3.1.5"""
 
diff --git a/plone/app/upgrade/v31/tests.py b/plone/app/upgrade/v31/tests.py
index a0a49e9..7fa994a 100644
--- a/plone/app/upgrade/v31/tests.py
+++ b/plone/app/upgrade/v31/tests.py
@@ -94,6 +94,7 @@ def testReplaceLocalRoleManagerNoUF(self):
         # Delete the user folder
         replace_local_role_manager(self.portal)
 
+
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
 
     def testBaseUpgrade(self):
diff --git a/plone/app/upgrade/v32/tests.py b/plone/app/upgrade/v32/tests.py
index 5cf445a..02a2a06 100644
--- a/plone/app/upgrade/v32/tests.py
+++ b/plone/app/upgrade/v32/tests.py
@@ -3,6 +3,7 @@
 from plone.app.upgrade.utils import version_match
 from plone.app.upgrade.v32.betas import three1_beta1
 
+
 class TestMigrations_v3_2(MigrationTest):
 
     def afterSetUp(self):
@@ -24,7 +25,8 @@ def testIterateInstalledButActionMissing(self):
         self.actions.object_buttons.manage_delObjects(['iterate_checkin'])
         three1_beta1(self.portal)
         self.assertFalse('iterate_checkin' in
-                    self.actions.object_buttons.objectIds())
+                         self.actions.object_buttons.objectIds())
+
 
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
 
diff --git a/plone/app/upgrade/v33/__init__.py b/plone/app/upgrade/v33/__init__.py
index cc80093..baed573 100644
--- a/plone/app/upgrade/v33/__init__.py
+++ b/plone/app/upgrade/v33/__init__.py
@@ -1,16 +1,19 @@
 from Products.CMFCore.utils import getToolByName
 from plone.app.upgrade.utils import loadMigrationProfile
 
+
 def three2_three3(portal):
     """3.2.1 -> 3.3a1
     """
     loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.2.1-3.3a1')
     maybeUpdateLinkView(portal)
 
+
 def three3_rc3_three3_rc4(portal):
-    loadMigrationProfile(portal,'profile-plone.app.upgrade.v33:3.3rc3-3.3')
+    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.3rc3-3.3')
     cookCSSRegistries(portal)
 
+
 def maybeUpdateLinkView(portal):
     ttool = getToolByName(portal, 'portal_types')
     link_fti = ttool.Link
@@ -19,6 +22,7 @@ def maybeUpdateLinkView(portal):
         link_fti.default_view = 'link_redirect_view'
         link_fti.immediate_view = 'link_redirect_view'
 
+
 def cookCSSRegistries(portal):
     csstool = getToolByName(portal, 'portal_css')
     for resource in csstool.resources:
diff --git a/plone/app/upgrade/v33/tests.py b/plone/app/upgrade/v33/tests.py
index 3c846cd..bd9de99 100644
--- a/plone/app/upgrade/v33/tests.py
+++ b/plone/app/upgrade/v33/tests.py
@@ -19,7 +19,7 @@ def testRedirectLinksProperty(self):
         del self.properties.site_properties.redirect_links
         self._upgrade()
         self.assertEqual(True,
-            self.properties.site_properties.getProperty('redirect_links'))
+                         self.properties.site_properties.getProperty('redirect_links'))
 
     def testLinkDefaultView(self):
         self.types.Link.default_view = 'link_view'
@@ -40,6 +40,7 @@ def testCustomizedLinkDefaultView(self):
         self.assertEqual(self.types.Link.immediate_view, 'foobar')
         self.assertEqual(self.types.Link.view_methods, ('foobar',))
 
+
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
 
     def testBaseUpgrade(self):
@@ -77,9 +78,9 @@ def testFolderUpgrade(self):
         for id in ids:
             obj = oldsite[id]
             self.assertTrue(IOrderableFolder.providedBy(obj),
-                '%s not orderable?' % id)
+                            '%s not orderable?' % id)
             self.assertEqual(obj._ordering, 'unordered',
-                '%s has no `_ordering`?' % id)
+                             '%s has no `_ordering`?' % id)
             self.assertEqual(obj.portal_type, 'Folder')
             self.assertEqual(obj.Type(), 'Folder')
             brain, = oldsite.portal_catalog(getId=id)   # asserts only one
diff --git a/plone/app/upgrade/v40/__init__.py b/plone/app/upgrade/v40/__init__.py
index b5a5c30..fafec79 100644
--- a/plone/app/upgrade/v40/__init__.py
+++ b/plone/app/upgrade/v40/__init__.py
@@ -1,2 +1,2 @@
 import alphas
-import betas
\ No newline at end of file
+import betas
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index a43fbd7..e98f8b0 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -86,13 +86,14 @@ def threeX_alpha1(context):
     # Install packages that are needed for Plone 4,
     # but don't break on Plone 5 where they are gone
     for profile in ('archetypes.referencebrowserwidget:default',
-            'plonetheme.sunburst:default',
-            'Products.TinyMCE:TinyMCE'):
+                    'plonetheme.sunburst:default',
+                    'Products.TinyMCE:TinyMCE'):
         try:
             stool.runAllImportStepsFromProfile('profile-' + profile)
         except KeyError:
             pass
 
+
 def restoreTheme(context):
     skins = getToolByName(context, 'portal_skins')
     portal = getToolByName(context, 'portal_url').getPortalObject()
@@ -101,22 +102,25 @@ def restoreTheme(context):
     if old_default_skin == 'Plone Default':
         v_storage = getUtility(IViewletSettingsStorage)
         uncustomized_layers = ('custom,tinymce,referencebrowser,LanguageTool,cmfeditions_views,'
-                              'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
-                              'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
-                              'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
-                              'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
-                              'plone_images,plone_content,plone_login,plone_deprecated,'
-                              'plone_3rdParty,cmf_legacy')
+                               'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
+                               'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
+                               'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
+                               'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
+                               'plone_images,plone_content,plone_login,plone_deprecated,'
+                               'plone_3rdParty,cmf_legacy')
         if skins.selections.get('Plone Default') == uncustomized_layers:
             # if the old theme's layers hadn't been mucked with, we can just
             # use Plone Classic Theme
             old_default_skin = 'Plone Classic Theme'
         else:
             # otherwise, copy Plone Default to a new theme
-            skins.selections['Old Plone 3 Custom Theme'] = skins.selections.get('Plone Default')
+            skins.selections['Old Plone 3 Custom Theme'] = skins.selections.get(
+                'Plone Default')
             # copy the viewlet order
-            v_storage._order['Old Plone 3 Custom Theme'] = dict(v_storage._order.get('Plone Default', {}))
-            v_storage._hidden['Old Plone 3 Custom Theme'] = dict(v_storage._hidden.get('Plone Default', {}))
+            v_storage._order['Old Plone 3 Custom Theme'] = dict(
+                v_storage._order.get('Plone Default', {}))
+            v_storage._hidden['Old Plone 3 Custom Theme'] = dict(
+                v_storage._hidden.get('Plone Default', {}))
 
             old_default_skin = 'Old Plone 3 Custom Theme'
 
@@ -188,7 +192,7 @@ def migrateActionIcons(context):
         prefix = ''
 
         if (cat not in _KNOWN_ACTION_ICONS.keys() or
-            ident not in _KNOWN_ACTION_ICONS[cat]):
+                ident not in _KNOWN_ACTION_ICONS[cat]):
             continue
 
         prefix = ''
@@ -208,7 +212,7 @@ def migrateActionIcons(context):
         elif cat == 'controlpanel':
             # control panel tool
             action_infos = [a for a in cptool.listActions()
-                              if a.getId() == ident]
+                            if a.getId() == ident]
             if len(action_infos):
                 if not action_infos[0].getIconExpression():
                     action_infos[0].setIconExpression('%s%s' % (prefix, expr))
@@ -238,10 +242,10 @@ def changeWorkflowActorVariableExpression(context):
         actor_var = wf.variables._getOb('actor', None)
         if actor_var is None:
             continue
-        actor_var.setProperties(description = actor_var.description,
-                                default_expr = 'user/getId',
-                                for_status = 1,
-                                update_always = 1)
+        actor_var.setProperties(description=actor_var.description,
+                                default_expr='user/getId',
+                                for_status=1,
+                                update_always=1)
     logger.info('Updated workflow actor variable expression.')
 
 
@@ -253,8 +257,8 @@ def changeAuthenticatedResourcesCondition(context):
     resources = {
         'portal_css': ('member.css', ),
         'portal_javascripts': ('dropdown.js', 'table_sorter.js',
-            'calendar_formfield.js', 'calendarpopup.js', 'formUnload.js',
-            'formsubmithelpers.js', 'unlockOnFormUnload.js')}
+                               'calendar_formfield.js', 'calendarpopup.js', 'formUnload.js',
+                               'formsubmithelpers.js', 'unlockOnFormUnload.js')}
     ANON = ('not: portal/portal_membership/isAnonymousUser',
             'not:portal/portal_membership/isAnonymousUser', )
     for tool_id, resource_ids in resources.items():
@@ -408,15 +412,15 @@ def migrate_portlets_for_object(obj, path):
                 if IStaticPortlet.providedBy(portlet) and \
                         getattr(portlet, 'hide', False):
                     logger.info(
-                            'Found hidden static text portlet %s at %s' %
-                            (portlet_id, path))
+                        'Found hidden static text portlet %s at %s' %
+                        (portlet_id, path))
                     settings = IPortletAssignmentSettings(portlet)
                     settings['visible'] = False
 
     logger.info('Migrating static text portlets')
     portal = getToolByName(context, 'portal_url').getPortalObject()
     portal.ZopeFindAndApply(
-            portal, search_sub=True, apply_func=migrate_portlets_for_object)
+        portal, search_sub=True, apply_func=migrate_portlets_for_object)
     logger.info('Finished migrating static text portlets')
 
 
@@ -487,18 +491,21 @@ def renameJoinFormFields(context):
     sprop = getToolByName(context, 'portal_properties').site_properties
     if sprop.hasProperty('join_form_fields'):
         oldValue = list(sprop.getProperty('join_form_fields'))
-        # The 'groups' field no longer belongs in the user-facing registration form
+        # The 'groups' field no longer belongs in the user-facing registration
+        # form
         if 'groups' in oldValue:
             oldValue.remove('groups')
         if not sprop.hasProperty('user_registration_fields'):
-            sprop.manage_addProperty('user_registration_fields', oldValue, 'lines')
+            sprop.manage_addProperty(
+                'user_registration_fields', oldValue, 'lines')
         sprop.manage_delProperties(['join_form_fields'])
 
 
 def alpha2_alpha3(context):
     """4.0alpha2 -> 4.0alpha3
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4alpha2-4alpha3')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4alpha2-4alpha3')
 
 
 def updateLargeFolderType(context):
@@ -533,10 +540,12 @@ def addRecursiveGroupsPlugin(context):
         for p, id in existingPlugins:
             if IRecursiveGroupsPlugin.providedBy(p):
                 plugins.deactivatePlugin(IGroupsPlugin, id)
-                logger.warn('Found an existing Recursive Groups plugin, %s, in acl_users, deactivating.' % id)
+                logger.warn(
+                    'Found an existing Recursive Groups plugin, %s, in acl_users, deactivating.' % id)
 
     if not 'recursive_groups' in acl:
-        addRecursiveGroupsPlugin(acl, 'recursive_groups', "Recursive Groups Plugin")
+        addRecursiveGroupsPlugin(
+            acl, 'recursive_groups', "Recursive Groups Plugin")
 
 
 def cleanUpClassicThemeResources(context):
@@ -570,4 +579,5 @@ def migrateTypeIcons(context):
 def alpha4_alpha5(context):
     """4.0alpha4 -> 4.0alpha5
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4alpha4-4alpha5')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4alpha4-4alpha5')
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index 353cd2e..75bee1b 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -10,7 +10,8 @@
 
 def alpha5_beta1(context):
     """4.0alpha5 -> 4.0beta1"""
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4alpha5-4beta1')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4alpha5-4beta1')
 
 
 def repositionRecursiveGroupsPlugin(context):
@@ -20,14 +21,15 @@ def repositionRecursiveGroupsPlugin(context):
     plugins = acl.plugins
     existingGroupsPlugins = plugins.listPlugins(IGroupsPlugin)
     if 'recursive_groups' in [a[0] for a in existingGroupsPlugins]:
-        while plugins.getAllPlugins('IGroupsPlugin')['active'].index('recursive_groups') < len(existingGroupsPlugins)-1:
+        while plugins.getAllPlugins('IGroupsPlugin')['active'].index('recursive_groups') < len(existingGroupsPlugins) - 1:
             plugins.movePluginsDown(IGroupsPlugin, ['recursive_groups'])
 
 
 def beta1_beta2(context):
     """4.0beta1 -> 4.0beta2
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta1-4beta2')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta1-4beta2')
 
 
 def updateSafeHTMLConfig(context):
@@ -38,7 +40,8 @@ def updateSafeHTMLConfig(context):
     if kupu_tool is None:
         return
     list_conf = []
-    # Kupu sets its attributes on first use, rather than providing class level defaults.
+    # Kupu sets its attributes on first use, rather than providing class level
+    # defaults.
     if hasattr(kupu_tool.aq_base, 'style_whitelist'):
         styles = list(kupu_tool.style_whitelist)
         if 'padding-left' not in styles:
@@ -47,7 +50,8 @@ def updateSafeHTMLConfig(context):
     if hasattr(kupu_tool.aq_base, 'class_blacklist'):
         list_conf.append(('class_blacklist', kupu_tool.class_blacklist))
     if hasattr(kupu_tool.aq_base, 'html_exclusions'):
-        list_conf.append(('stripped_attributes', kupu_tool.get_stripped_attributes()))
+        list_conf.append(
+            ('stripped_attributes', kupu_tool.get_stripped_attributes()))
     for k, v in list_conf:
         tdata = transform._config[k]
         if tdata == v:
@@ -56,7 +60,8 @@ def updateSafeHTMLConfig(context):
             tdata.pop()
         tdata.extend(v)
     if hasattr(kupu_tool.aq_base, 'html_exclusions'):
-        ksc = dict((str(' '.join(k)), str(' '.join(v))) for k, v in kupu_tool.get_stripped_combinations())
+        ksc = dict((str(' '.join(k)), str(' '.join(v)))
+                   for k, v in kupu_tool.get_stripped_combinations())
         tsc = transform._config['stripped_combinations']
         if tsc != ksc:
             tsc.clear()
@@ -83,13 +88,15 @@ def updateIconMetadata(context):
 def beta2_beta3(context):
     """4.0beta2 -> 4.0beta3
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta2-4beta3')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta2-4beta3')
 
 
 def beta3_beta4(context):
     """4.0beta3 -> 4.0beta4
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta3-4beta4')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta3-4beta4')
 
     pprop = getToolByName(context, 'portal_properties')
     site_properties = pprop.site_properties
@@ -133,7 +140,8 @@ def convertToBlobs(context):
     from plone.app.blob.migrations import migrateATBlobFiles
     sprop = getToolByName(context, 'portal_properties').site_properties
     if sprop.hasProperty('enable_link_integrity_checks'):
-        ori_enable_link_integrity_checks = sprop.getProperty('enable_link_integrity_checks')
+        ori_enable_link_integrity_checks = sprop.getProperty(
+            'enable_link_integrity_checks')
         if ori_enable_link_integrity_checks:
             logger.info('Temporarily disabled link integrity checking')
             sprop.enable_link_integrity_checks = False
@@ -157,7 +165,8 @@ def convertToBlobs(context):
 def beta4_beta5(context):
     """4.0beta4 -> 4.0beta5
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta4-4beta5')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta4-4beta5')
 
 
 def beta5_rc1(context):
diff --git a/plone/app/upgrade/v40/tests.py b/plone/app/upgrade/v40/tests.py
index 4ad4651..2a5b836 100644
--- a/plone/app/upgrade/v40/tests.py
+++ b/plone/app/upgrade/v40/tests.py
@@ -45,9 +45,9 @@ class FakeSecureMailHost(object):
     title = 'Fake MailHost'
     smtp_host = 'smtp.example.com'
     smtp_port = 587
-    smtp_userid='me'
-    smtp_pass='secret'
-    smtp_notls=False
+    smtp_userid = 'me'
+    smtp_pass = 'secret'
+    smtp_notls = False
 
     def manage_fixupOwnershipAfterAdd(self):
         pass
@@ -82,29 +82,29 @@ def testMigrateActionIcons(self):
             action_id='test_id',
             icon_expr='test.gif',
             title='Test my icon',
-            )
+        )
         self.aitool.addActionIcon(
             category='object_buttons',
             action_id='test2_id',
             icon_expr='python:context.getIcon()',
             title='Test my second icon',
-            )
+        )
         test_action = Action('test_id',
-            title='Test me',
-            description='',
-            url_expr='',
-            icon_expr='',
-            available_expr='',
-            permissions=('View', ),
-            visible = True)
+                             title='Test me',
+                             description='',
+                             url_expr='',
+                             icon_expr='',
+                             available_expr='',
+                             permissions=('View', ),
+                             visible=True)
         test2_action = Action('test2_id',
-            title='Test me too',
-            description='',
-            url_expr='',
-            icon_expr='',
-            available_expr='',
-            permissions=('View', ),
-            visible = True)
+                              title='Test me too',
+                              description='',
+                              url_expr='',
+                              icon_expr='',
+                              available_expr='',
+                              permissions=('View', ),
+                              visible=True)
 
         object_buttons = self.atool.object_buttons
         if getattr(object_buttons, 'test_id', None) is None:
@@ -132,7 +132,7 @@ def testMigrateControlPanelActionIcons(self):
             action_id='test_id',
             icon_expr='test.gif',
             title='Test my icon',
-            )
+        )
 
         self.cptool.registerConfiglet(
             id='test_id',
@@ -143,7 +143,7 @@ def testMigrateControlPanelActionIcons(self):
             visible=True,
             appId='',
             icon_expr='',
-            )
+        )
 
         action = self.cptool.getActionObject('Plone/test_id')
         self.assertEqual(action.getIconExpression(), '')
@@ -178,7 +178,7 @@ def testMigrateTypeIcons(self):
                          "string:${portal_url}/document_icon.gif")
         self.assertTrue(hasattr(tt.Document, 'icon_expr_object'))
 
-        #Don't upgrade if there is already an icon_expr.
+        # Don't upgrade if there is already an icon_expr.
         tt.Document.icon_expr = "string:${portal_url}/document_icon.png"
         tt.Document.content_icon = 'document_icon.gif'
         migrateTypeIcons(self.portal)
@@ -190,7 +190,7 @@ def testPngContentIcons(self):
         tt.Document.icon_expr = "string:${portal_url}/document_icon.gif"
         loadMigrationProfile(self.portal, self.profile, ('typeinfo', ))
         self.assertEqual(tt.Document.icon_expr,
-            "string:${portal_url}/document_icon.png")
+                         "string:${portal_url}/document_icon.png")
 
     def testAddRAMCache(self):
         # Test it twice
@@ -323,7 +323,7 @@ def testReplaceSecureMailHost(self):
         self.assertEqual(new_mh.smtp_port, 587)
         self.assertEqual(new_mh.smtp_uid, 'me')
         self.assertEqual(new_mh.smtp_pwd, 'secret')
-        #Force TLS is always false, because SMH has no equivalent option
+        # Force TLS is always false, because SMH has no equivalent option
         self.assertEqual(new_mh.force_tls, False)
 
     def testFolderMigration(self):
@@ -350,10 +350,10 @@ class HiddenAssignment(static.Assignment):
         folder = self.portal['statictest']
 
         manager = getUtility(
-                IPortletManager, name='plone.rightcolumn',
-                context=folder)
+            IPortletManager, name='plone.rightcolumn',
+            context=folder)
         assignments = getMultiAdapter(
-                (folder, manager), IPortletAssignmentMapping)
+            (folder, manager), IPortletAssignmentMapping)
         hidden_portlet = HiddenAssignment()
         visible_portlet = static.Assignment()
         assignments['hidden'] = hidden_portlet
@@ -362,12 +362,11 @@ class HiddenAssignment(static.Assignment):
         migrateStaticTextPortlets(self.portal)
 
         self.assertFalse(
-                IPortletAssignmentSettings(hidden_portlet).get(
-                        'visible', True))
+            IPortletAssignmentSettings(hidden_portlet).get(
+                'visible', True))
         self.assertTrue(
-                IPortletAssignmentSettings(visible_portlet).get(
-                        'visible', True))
-
+            IPortletAssignmentSettings(visible_portlet).get(
+                'visible', True))
 
 
 class TestMigrations_v4_0alpha2(MigrationTest):
@@ -399,7 +398,7 @@ def testJoinActionURL(self):
         self.portal.portal_actions.user.join.url_expr = 'foo'
         loadMigrationProfile(self.portal, self.profile, ('actions', ))
         self.assertEqual(self.portal.portal_actions.user.join.url_expr,
-            'string:${globals_view/navigationRootUrl}/@@register')
+                         'string:${globals_view/navigationRootUrl}/@@register')
 
 
 class TestMigrations_v4_0alpha5(MigrationTest):
@@ -454,7 +453,7 @@ def testClassicThemeResourcesCleanUp(self):
         qi = getToolByName(portal, 'portal_quickinstaller')
         qi.installProduct('plonetheme.classic')
         classictheme = qi['plonetheme.classic']
-        classictheme.resources_css = ['something'] # add a random resource
+        classictheme.resources_css = ['something']  # add a random resource
         cleanUpClassicThemeResources(portal)
         self.assertEqual(classictheme.resources_css, [])
 
@@ -464,11 +463,11 @@ def testGetObjPositionInParentIndex(self):
         catalog.delIndex('getObjPositionInParent')
         catalog.addIndex('getObjPositionInParent', 'FieldIndex')
         self.assertFalse(isinstance(catalog.Indexes['getObjPositionInParent'],
-            GopipIndex))
+                                    GopipIndex))
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue('getObjPositionInParent' in catalog.indexes())
         self.assertTrue(isinstance(catalog.Indexes['getObjPositionInParent'],
-            GopipIndex))
+                                   GopipIndex))
 
     def testGetEventTypeIndex(self):
         catalog = self.portal.portal_catalog
@@ -574,16 +573,16 @@ def testRemoveLargePloneFolder(self):
             removeLargePloneFolder(self.portal)
             self.assertFalse('Large Plone Folder' in self.portal.portal_types)
             self.assertFalse('Large Plone Folder' in
-                        temp_folder_fti.allowed_content_types)
+                             temp_folder_fti.allowed_content_types)
             self.assertTrue('Folder' in temp_folder_fti.allowed_content_types)
             self.assertFalse('Large Plone Folder' in ftool.getFactoryTypes())
             self.assertTrue('Folder' in ftool.getFactoryTypes())
             self.assertFalse('Large Plone Folder' in
-                        nav_props.parentMetaTypesNotToQuery)
+                             nav_props.parentMetaTypesNotToQuery)
             self.assertTrue('TempFolder' in
                             nav_props.parentMetaTypesNotToQuery)
             self.assertFalse('Large Plone Folder' in
-                        site_props.typesLinkToFolderContentsInFC)
+                             site_props.typesLinkToFolderContentsInFC)
             self.assertTrue('Folder' in
                             site_props.typesLinkToFolderContentsInFC)
             # sleep to avoid a GS log filename collision :-o
@@ -609,6 +608,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4rc1-4final'
@@ -618,6 +618,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_1(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0-4.0.1'
@@ -627,6 +628,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_2(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.1-4.0.2'
@@ -636,6 +638,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_3(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.2-4.0.3'
@@ -645,6 +648,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_4(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.3-4.0.4'
@@ -654,6 +658,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_5(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.4-4.0.5'
diff --git a/plone/app/upgrade/v41/__init__.py b/plone/app/upgrade/v41/__init__.py
index e72cf90..cb55214 100644
--- a/plone/app/upgrade/v41/__init__.py
+++ b/plone/app/upgrade/v41/__init__.py
@@ -1,3 +1,3 @@
 import alphas
 import betas
-import final
\ No newline at end of file
+import final
diff --git a/plone/app/upgrade/v41/alphas.py b/plone/app/upgrade/v41/alphas.py
index 87fb61a..b641cbe 100644
--- a/plone/app/upgrade/v41/alphas.py
+++ b/plone/app/upgrade/v41/alphas.py
@@ -25,11 +25,12 @@
 def to41alpha1(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v41:to41alpha1')
 
+
 def add_siteadmin_role(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
 
     # add the role to the site
-    immediate_roles = list( getattr(portal, '__ac_roles__', []) )
+    immediate_roles = list(getattr(portal, '__ac_roles__', []))
     if 'Site Administrator' not in immediate_roles:
         immediate_roles.append('Site Administrator')
         immediate_roles.sort()
@@ -39,7 +40,8 @@ def add_siteadmin_role(context):
     uf = getToolByName(context, 'acl_users')
     gtool = getToolByName(context, 'portal_groups')
     if not uf.searchGroups(id='Site Administrators'):
-        gtool.addGroup('Site Administrators', title='Site Administrators', roles=['Site Administrator'])
+        gtool.addGroup('Site Administrators', title='Site Administrators', roles=[
+                       'Site Administrator'])
 
     # update rolemap:
     # add Site Administrator role to permissions that have the Manager role,
@@ -68,16 +70,16 @@ def add_siteadmin_role(context):
         'WebDAV Lock items',
         'WebDAV Unlock items',
         'WebDAV access',
-        ])
+    ])
     if HAS_KUPU:
         extra_permissions.update([
-        'Kupu: Manage libraries',
-        'Kupu: Query libraries',
+            'Kupu: Manage libraries',
+            'Kupu: Query libraries',
         ])
     exclude_permissions = set([
         'Manage portal',
         'View management screens',
-        ])
+    ])
     for permission_info in permissions:
         if permission_info['name'] in exclude_permissions:
             continue
@@ -92,7 +94,7 @@ def add_siteadmin_role(context):
                                      roles,
                                      permission_info['acquire'])
     for permission_id in extra_permissions:
-        portal.manage_permission(permission_id, ['Site Administrator',], True)
+        portal.manage_permission(permission_id, ['Site Administrator', ], True)
 
     # update workflows:
     # add Site Administrator role where Manager already is;
@@ -107,12 +109,15 @@ def add_siteadmin_role(context):
                 if 'Manager' in roles:
                     new_roles = list(roles)
                     new_roles.append('Site Administrator')
-                    state.setPermission(permission_id, isinstance(roles, list), new_roles)
+                    state.setPermission(
+                        permission_id, isinstance(roles, list), new_roles)
+
 
 def update_role_mappings(context):
     wtool = getToolByName(context, 'portal_workflow')
     wtool.updateRoleMappings()
 
+
 def update_controlpanel_permissions(context):
     cptool = getToolByName(context, 'portal_controlpanel')
 
@@ -139,6 +144,7 @@ def update_controlpanel_permissions(context):
         if action.id in new_permissions:
             action.permissions = (new_permissions[action.id], )
 
+
 def install_outputfilters(context):
     qi = getToolByName(context, 'portal_quickinstaller')
     if qi.isProductInstallable('plone.outputfilters'):
diff --git a/plone/app/upgrade/v41/betas.py b/plone/app/upgrade/v41/betas.py
index 109953f..946608a 100644
--- a/plone/app/upgrade/v41/betas.py
+++ b/plone/app/upgrade/v41/betas.py
@@ -16,7 +16,7 @@
 def optimize_rangeindex_floor_ceiling(index):
     # respect the new ceiling and floor values
     logger.info('Optimizing range index `%s` to respect floor and ceiling '
-        'dates' % index.getId())
+                'dates' % index.getId())
     ceiling_value = index.ceiling_value
     floor_value = index.floor_value
 
@@ -97,7 +97,8 @@ def fix_uuids_topic_criteria(context):
     search = catalog.unrestrictedSearchResults
     for brain in search(Type='Collection'):
         obj = brain.getObject()
-        crits = [x for x in obj.contentValues() if x.getId().startswith('crit__')]
+        crits = [x for x in obj.contentValues(
+        ) if x.getId().startswith('crit__')]
         for crit in crits:
             if getattr(crit, '_plone.uuid', None) is None:
                 notify(ObjectCreatedEvent(crit))
@@ -133,5 +134,6 @@ def to41rc4(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v41:to41rc4')
     fix_uuids_topic_criteria(context)
 
+
 def to41final(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v41:to41final')
diff --git a/plone/app/upgrade/v41/tests.py b/plone/app/upgrade/v41/tests.py
index 4570a4c..6792b88 100644
--- a/plone/app/upgrade/v41/tests.py
+++ b/plone/app/upgrade/v41/tests.py
@@ -10,8 +10,8 @@ def test_fixOkapiIndexes(self):
         catalog = ZCatalog('catalog')
         catalog.lexicon = PLexicon('lexicon')
         catalog.addIndex('test',
-            ZCTextIndex('test', index_factory=OkapiIndex,
-                        caller=catalog, lexicon_id='lexicon'))
+                         ZCTextIndex('test', index_factory=OkapiIndex,
+                                     caller=catalog, lexicon_id='lexicon'))
         catalog.Indexes['test'].index._totaldoclen = -1000
 
         from plone.app.upgrade.v41.final import fixOkapiIndexes
diff --git a/plone/app/upgrade/v42/__init__.py b/plone/app/upgrade/v42/__init__.py
index e72cf90..cb55214 100644
--- a/plone/app/upgrade/v42/__init__.py
+++ b/plone/app/upgrade/v42/__init__.py
@@ -1,3 +1,3 @@
 import alphas
 import betas
-import final
\ No newline at end of file
+import final
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 5645643..61efd5b 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -93,4 +93,4 @@ def to42rc1_member_dashboard(context):
 def to42rc2(context):
     """4.2rc1 -> 4.2rc2
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to42rc2')
\ No newline at end of file
+    loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to42rc2')
diff --git a/plone/app/upgrade/v42/final.py b/plone/app/upgrade/v42/final.py
index 5320204..b8a6af3 100644
--- a/plone/app/upgrade/v42/final.py
+++ b/plone/app/upgrade/v42/final.py
@@ -28,21 +28,25 @@ def to421(context):
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to421')
 
+
 def to422(context):
     """4.2.1 -> 4.2.2
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to422')
 
+
 def to423(context):
     """4.2.2 -> 4.2.3
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to423')
 
+
 def to424(context):
     """4.2.3 -> 4.2.4
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to424')
 
+
 def to425(context):
     """4.2.4 -> 4.2.5
     """
diff --git a/plone/app/upgrade/v43/__init__.py b/plone/app/upgrade/v43/__init__.py
index 3a54648..b40f1d8 100644
--- a/plone/app/upgrade/v43/__init__.py
+++ b/plone/app/upgrade/v43/__init__.py
@@ -1 +1 @@
-import alphas
\ No newline at end of file
+import alphas
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index 7aadde6..eddbc97 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -60,13 +60,14 @@ def upgradeToI18NCaseNormalizer(context):
     for index in catalog.Indexes.objectValues():
         if IZCTextIndex.providedBy(index):
             index_id = index.getId()
-            logger.info("Reindex %s index with I18N Case Normalizer",\
+            logger.info("Reindex %s index with I18N Case Normalizer",
                         index_id)
             catalog.manage_clearIndex([index_id])
-            catalog.reindexIndex(index_id,\
+            catalog.reindexIndex(index_id,
                                  aq_get(context, 'REQUEST', None))
         pass
 
+
 def upgradeTinyMCE(context):
     """ Upgrade TinyMCE WYSIWYG Editor to jQuery based version 1.3
 
@@ -146,7 +147,7 @@ def getDexterityFolderTypes():
 
         portal_types = getToolByName(portal, 'portal_types')
         types = [fti for fti in portal_types.listTypeInfo() if
-                    IDexterityFTI.providedBy(fti)]
+                 IDexterityFTI.providedBy(fti)]
 
         ftypes = set([])
         for _type in types:
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index 843360a..3284c6a 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -31,7 +31,8 @@ def testAddDisplayPublicationDateInBylineProperty(self):
             return
         pprop = getToolByName(self.portal, 'portal_properties')
         self.assertEqual(
-            pprop.site_properties.getProperty('displayPublicationDateInByline'),
+            pprop.site_properties.getProperty(
+                'displayPublicationDateInByline'),
             False)
 
     def testUpgradeToI18NCaseNormalizer(self):
@@ -39,7 +40,8 @@ def testUpgradeToI18NCaseNormalizer(self):
         ctool = self.portal.portal_catalog
         ctool.plone_lexicon._pipeline[1] == (Splitter(), CaseNormalizer())
         alphas.upgradeToI18NCaseNormalizer(self.portal.portal_setup)
-        self.assertEqual(ctool.plone_lexicon._pipeline[1].__class__.__name__, 'I18NNormalizer')
+        self.assertEqual(ctool.plone_lexicon._pipeline[
+                         1].__class__.__name__, 'I18NNormalizer')
 
     def testUpgradeTinyMCE(self):
         # skip test in new Plones that don't install tinymce to begin with
@@ -63,9 +65,9 @@ def testUpgradeTinyMCE(self):
         request = self.app.REQUEST
         plone_view = queryMultiAdapter((self.portal, request), name="plone")
         manager = queryMultiAdapter(
-                    (self.portal, request, plone_view), IContentProvider, 'plone.htmlhead')
+            (self.portal, request, plone_view), IContentProvider, 'plone.htmlhead')
         viewlets = getAdapters(
-                (manager.context, manager.request, manager.__parent__, manager), IViewlet)
+            (manager.context, manager.request, manager.__parent__, manager), IViewlet)
         self.assertFalse(u'tinymce.configuration' in dict(viewlets))
 
     def testInstallThemingNotPreviouslyInstalled(self):
@@ -84,7 +86,8 @@ def testInstallThemingPreviouslyInstalled(self):
         from plone.registry.interfaces import IRegistry
         from zope.component import getUtility
 
-        self.portal.portal_setup.runAllImportStepsFromProfile('profile-plone.app.theming:default')
+        self.portal.portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.theming:default')
         alphas.upgradePloneAppTheming(self.portal.portal_setup)
 
         registry = getUtility(IRegistry)
@@ -123,7 +126,8 @@ def testReindexNumericalTitle(self):
         )
 
         # Only the numerical title got reindexed
-        portal.portal_setup.runAllImportStepsFromProfile('profile-plone.app.theming:default')
+        portal.portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.theming:default')
         alphas.reindex_sortable_title(portal.portal_setup)
         self.assertEqual(
             catalog(id=portal['num-title'].id)[0].Title,
@@ -140,7 +144,8 @@ class TestMigrations_v4_3final_to4308(MigrationTest):
     def testAddDefaultPlonePasswordPolicy(self):
         # this add the 'Default Plone Password Policy' to Plone's acl_users
         portal = self.portal
-        # make sure the 'Default Plone Password Policy' does not exist in acl_users
+        # make sure the 'Default Plone Password Policy' does not exist in
+        # acl_users
         portal.acl_users.manage_delObjects(ids=['password_policy', ])
         self.assertFalse('password_policy' in portal.acl_users.objectIds())
         # find the relevant upgrade step and execute it
diff --git a/setup.py b/setup.py
index e00963e..8299c78 100644
--- a/setup.py
+++ b/setup.py
@@ -30,58 +30,58 @@
     include_package_data=True,
     zip_safe=False,
     extras_require=dict(
-      test=[
-          'mock',
-          'Products.CMFPlacefulWorkflow',
-          'Products.CMFQuickInstallerTool',
-          'plone.contentrules',
-          'plone.app.i18n',
-          'plone.app.iterate',
-          'plone.app.openid',
-          'plone.app.redirector',
-          'plone.app.viewletmanager',
-          'plone.app.testing',
-          'plone.app.theming',
-      ]
+        test=[
+            'mock',
+            'Products.CMFPlacefulWorkflow',
+            'Products.CMFQuickInstallerTool',
+            'plone.contentrules',
+            'plone.app.i18n',
+            'plone.app.iterate',
+            'plone.app.openid',
+            'plone.app.redirector',
+            'plone.app.viewletmanager',
+            'plone.app.testing',
+            'plone.app.theming',
+        ]
     ),
     install_requires=[
-      'setuptools',
-      'borg.localrole',
-      'five.localsitemanager',
-      'plone.portlets',
-      'plone.session',
-      'plone.app.folder',
-      'plone.app.portlets',
-      'transaction',
-      'zope.component',
-      'zope.interface',
-      'zope.location',
-      'zope.ramcache',
-      'zope.site',
-      'Acquisition',
-      'Products.CMFPlone',
-      'Products.Archetypes',
-      'Products.contentmigration',
-      'Products.CMFCore',
-      'Products.CMFDiffTool',
-      'Products.CMFEditions',
-      'Products.CMFFormController',
-      'Products.CMFQuickInstallerTool',
-      'Products.CMFUid',
-      'Products.DCWorkflow',
-      'Products.GenericSetup>=1.8.1',
-      'Products.MimetypesRegistry',
-      # 'Products.PloneLanguageTool',
-      'Products.PlonePAS',
-      'Products.PluggableAuthService',
-      'Products.PortalTransforms',
-      'Products.ResourceRegistries',
-      'Products.SecureMailHost',  # For migration only, when can we remove this?
-      'Products.ZCatalog >= 2.13.4',
-      'Zope2',
+        'setuptools',
+        'borg.localrole',
+        'five.localsitemanager',
+        'plone.portlets',
+        'plone.session',
+        'plone.app.folder',
+        'plone.app.portlets',
+        'transaction',
+        'zope.component',
+        'zope.interface',
+        'zope.location',
+        'zope.ramcache',
+        'zope.site',
+        'Acquisition',
+        'Products.CMFPlone',
+        'Products.Archetypes',
+        'Products.contentmigration',
+        'Products.CMFCore',
+        'Products.CMFDiffTool',
+        'Products.CMFEditions',
+        'Products.CMFFormController',
+        'Products.CMFQuickInstallerTool',
+        'Products.CMFUid',
+        'Products.DCWorkflow',
+        'Products.GenericSetup>=1.8.1',
+        'Products.MimetypesRegistry',
+        # 'Products.PloneLanguageTool',
+        'Products.PlonePAS',
+        'Products.PluggableAuthService',
+        'Products.PortalTransforms',
+        'Products.ResourceRegistries',
+        'Products.SecureMailHost',  # For migration only, when can we remove this?
+        'Products.ZCatalog >= 2.13.4',
+        'Zope2',
     ],
     entry_points="""
     [z3c.autoinclude.plugin]
     target = plone
     """,
-    )
+)


Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2016-03-12T08:08:25+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.upgrade/commit/3690c27c68a7c9b74a12c0cb91f1bbce8998ffb1

Merge pull request #72 from plone/gforcada-minimal-cleanup

Minimal cleanup

Files changed:
M plone/app/upgrade/__init__.py
M plone/app/upgrade/atcontentypes_bbb.py
M plone/app/upgrade/bbb.py
M plone/app/upgrade/bbbd/LanguageTool.py
M plone/app/upgrade/bbbd/__init__.py
M plone/app/upgrade/gruf_bbb.py
M plone/app/upgrade/kupu_bbb.py
M plone/app/upgrade/tests/__init__.py
M plone/app/upgrade/utils.py
M plone/app/upgrade/v25/__init__.py
M plone/app/upgrade/v25/tests.py
M plone/app/upgrade/v30/alphas.py
M plone/app/upgrade/v30/betas.py
M plone/app/upgrade/v30/final_three0x.py
M plone/app/upgrade/v30/rcs.py
M plone/app/upgrade/v30/tests.py
M plone/app/upgrade/v31/betas.py
M plone/app/upgrade/v31/final_three1x.py
M plone/app/upgrade/v31/tests.py
M plone/app/upgrade/v32/tests.py
M plone/app/upgrade/v33/__init__.py
M plone/app/upgrade/v33/tests.py
M plone/app/upgrade/v40/__init__.py
M plone/app/upgrade/v40/alphas.py
M plone/app/upgrade/v40/betas.py
M plone/app/upgrade/v40/tests.py
M plone/app/upgrade/v41/__init__.py
M plone/app/upgrade/v41/alphas.py
M plone/app/upgrade/v41/betas.py
M plone/app/upgrade/v41/tests.py
M plone/app/upgrade/v42/__init__.py
M plone/app/upgrade/v42/betas.py
M plone/app/upgrade/v42/final.py
M plone/app/upgrade/v43/__init__.py
M plone/app/upgrade/v43/alphas.py
M plone/app/upgrade/v43/tests.py
M setup.py

diff --git a/plone/app/upgrade/__init__.py b/plone/app/upgrade/__init__.py
index 1843de8..a7844c1 100644
--- a/plone/app/upgrade/__init__.py
+++ b/plone/app/upgrade/__init__.py
@@ -24,7 +24,7 @@ def getNonInstallableProducts(self):
             'plone.app.upgrade.v43',
             'plone.app.upgrade.v50',
             'plone.app.upgrade.v51',
-            ]
+        ]
 
 # Make sure folks upgrading from Plone 2.1 see a helpful message telling them
 # how to do a two-stage upgrade, instead of a GroupUserFolder error.
@@ -137,10 +137,12 @@ def getNonInstallableProducts(self):
 except ImportError:
     alias_module('Products.PloneLanguageTool.interfaces', bbb)
     alias_module('Products.PloneLanguageTool', bbbd)
-    __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool = __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool.LanguageTool
+    __import__('Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool = __import__(
+        'Products.PloneLanguageTool.LanguageTool').PloneLanguageTool.LanguageTool.LanguageTool
 
 
-# To solve the __iro__ problem because CMFPlacefulWorkflow interfaces changed on 1.6.1
+# To solve the __iro__ problem because CMFPlacefulWorkflow interfaces
+# changed on 1.6.1
 try:
     pkg_resources.get_distribution('Products.CMFPlacefulWorkflow')
     from Products.CMFPlacefulWorkflow.interfaces import portal_placeful_workflow
@@ -150,4 +152,5 @@ def getNonInstallableProducts(self):
     pass
 except:
     from Products.CMFPlacefulWorkflow import interfaces
-    alias_module('Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
+    alias_module(
+        'Products.CMFPlacefulWorkflow.interfaces.portal_placeful_workflow', interfaces)
diff --git a/plone/app/upgrade/atcontentypes_bbb.py b/plone/app/upgrade/atcontentypes_bbb.py
index 7d95cc9..62d00ff 100644
--- a/plone/app/upgrade/atcontentypes_bbb.py
+++ b/plone/app/upgrade/atcontentypes_bbb.py
@@ -9,6 +9,7 @@
 class FactoryTool(SimpleItem):
     ''' Compatibility code for portal_factory
     '''
+
     def __nonzero__(self):
         ''' Always evealuate to False
         '''
diff --git a/plone/app/upgrade/bbb.py b/plone/app/upgrade/bbb.py
index 287de1c..9866b48 100644
--- a/plone/app/upgrade/bbb.py
+++ b/plone/app/upgrade/bbb.py
@@ -66,6 +66,8 @@ def removeActionIcon(self, category, action_id):
         self._icons = tuple(icons)
 
 # BBB from CMFDefault
+
+
 class SyndicationInformation(SimpleItem):
-        id='syndication_information'
-        meta_type='SyndicationInformation'
+    id = 'syndication_information'
+    meta_type = 'SyndicationInformation'
diff --git a/plone/app/upgrade/bbbd/LanguageTool.py b/plone/app/upgrade/bbbd/LanguageTool.py
index b43e57a..fe82763 100644
--- a/plone/app/upgrade/bbbd/LanguageTool.py
+++ b/plone/app/upgrade/bbbd/LanguageTool.py
@@ -12,4 +12,4 @@ def __call__(self, container, req):
     def manage_beforeDelete(self, item, container):
         if item is self:
             handle = self.meta_type + '/' + self.getId()
-            BeforeTraverse.unregisterBeforeTraverse(container, handle)
\ No newline at end of file
+            BeforeTraverse.unregisterBeforeTraverse(container, handle)
diff --git a/plone/app/upgrade/bbbd/__init__.py b/plone/app/upgrade/bbbd/__init__.py
index fd1fad2..56fc51d 100644
--- a/plone/app/upgrade/bbbd/__init__.py
+++ b/plone/app/upgrade/bbbd/__init__.py
@@ -1,2 +1 @@
 from .LanguageTool import LanguageTool
-
diff --git a/plone/app/upgrade/gruf_bbb.py b/plone/app/upgrade/gruf_bbb.py
index 582a8e4..d1033ba 100644
--- a/plone/app/upgrade/gruf_bbb.py
+++ b/plone/app/upgrade/gruf_bbb.py
@@ -1,16 +1,20 @@
 from persistent import Persistent
 from Products.Five import BrowserView
 
+
 class UpgradeProcessError(Exception):
     """Two-stage upgrade required."""
 
+
 class GroupUserFolder(Persistent):
     """Dummy GRUF for the purpose of raising our exception
        when its iterator is called by the ZPublisher validation hook
     """
+
     def __iter__(self):
         raise UpgradeProcessError
 
+
 class UpgradeProcessErrorView(BrowserView):
 
     def __call__(self):
diff --git a/plone/app/upgrade/kupu_bbb.py b/plone/app/upgrade/kupu_bbb.py
index 38776bd..6dd9fd5 100644
--- a/plone/app/upgrade/kupu_bbb.py
+++ b/plone/app/upgrade/kupu_bbb.py
@@ -12,7 +12,7 @@ def get_stripped_attributes(self):
 
     def get_stripped_combinations(self):
         stripped = [(tags, attrs) for (tags, attrs) in
-            self.getHtmlExclusions() if tags and attrs]
+                    self.getHtmlExclusions() if tags and attrs]
         return stripped
 
     def getHtmlExclusions(self):
diff --git a/plone/app/upgrade/tests/__init__.py b/plone/app/upgrade/tests/__init__.py
index 4287ca8..792d600 100644
--- a/plone/app/upgrade/tests/__init__.py
+++ b/plone/app/upgrade/tests/__init__.py
@@ -1 +1 @@
-#
\ No newline at end of file
+#
diff --git a/plone/app/upgrade/utils.py b/plone/app/upgrade/utils.py
index 66e72ff..5b2491b 100644
--- a/plone/app/upgrade/utils.py
+++ b/plone/app/upgrade/utils.py
@@ -269,7 +269,8 @@ def updateIconsInBrains(context, typesToUpdate=None):
             # SearchableText
             brain_path = brain.getPath()
             try:
-                catalog.catalog_object(obj, brain_path, ['id'], True, pghandler)
+                catalog.catalog_object(
+                    obj, brain_path, ['id'], True, pghandler)
             except ConflictError:
                 raise
             except Exception:
diff --git a/plone/app/upgrade/v25/__init__.py b/plone/app/upgrade/v25/__init__.py
index 29327e5..bfa47ca 100644
--- a/plone/app/upgrade/v25/__init__.py
+++ b/plone/app/upgrade/v25/__init__.py
@@ -8,7 +8,8 @@
 def final_two51(context):
     """2.5-final -> 2.5.1
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v25:2.5final-2.5.1')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v25:2.5final-2.5.1')
 
     # Required for #5569 (is_folderish needs reindexing) and #5231 (all text
     # indices need to be reindexed so they are split properly)
@@ -27,7 +28,7 @@ def fixupPloneLexicon(context):
             pipeline = list(lexicon._pipeline)
             if len(pipeline) >= 2:
                 if (not isinstance(pipeline[0], Splitter) or
-                    not isinstance(pipeline[1], CaseNormalizer)):
+                        not isinstance(pipeline[1], CaseNormalizer)):
                     pipeline[0] = Splitter()
                     pipeline[1] = CaseNormalizer()
                     lexicon._pipeline = tuple(pipeline)
@@ -70,7 +71,7 @@ def addMissingMimeTypes(context):
     mtr = getToolByName(context, 'mimetypes_registry', None)
     if mtr is not None:
         mtr.manage_addMimeType('text/x-web-markdown',
-            ['text/x-web-markdown'], ['markdown'], 'text.png')
+                               ['text/x-web-markdown'], ['markdown'], 'text.png')
         mtr.manage_addMimeType('text/x-web-textile',
-            ['text/x-web-textile'], ['textile'], 'text.png')
+                               ['text/x-web-textile'], ['textile'], 'text.png')
         logger.info("Added `text/x-web-markdown` and `text/x-web-textile`.")
diff --git a/plone/app/upgrade/v25/tests.py b/plone/app/upgrade/v25/tests.py
index 32628fb..cf752cf 100644
--- a/plone/app/upgrade/v25/tests.py
+++ b/plone/app/upgrade/v25/tests.py
@@ -59,7 +59,7 @@ def testSetLoginFormInCookieAuth(self):
         setLoginFormInCookieAuth(self.portal)
         cookie_auth = self.portal.acl_users.credentials_cookie_auth
         self.assertEqual(cookie_auth.getProperty('login_path'),
-                             'require_login')
+                         'require_login')
 
     def testSetLoginFormNoCookieAuth(self):
         # Shouldn't error
@@ -72,7 +72,9 @@ def testSetLoginFormAlreadyChanged(self):
         cookie_auth = self.portal.acl_users.credentials_cookie_auth
         cookie_auth.manage_changeProperties(login_path='foo')
         setLoginFormInCookieAuth(self.portal)
-        self.assertTrue(cookie_auth.getProperty('login_path') != 'require_login')
+        self.assertTrue(cookie_auth.getProperty(
+            'login_path') != 'require_login')
+
 
 class TestMigrations_v2_5_2(MigrationTest):
 
@@ -92,10 +94,12 @@ def testMissingMimeTypes(self):
         if types_to_delete:
             self.mimetypes.manage_delObjects(types_to_delete)
         # now they're gone:
-        self.assertFalse(set(self.mimetypes.list_mimetypes()).issuperset(set(missing_types)))
+        self.assertFalse(set(self.mimetypes.list_mimetypes()
+                             ).issuperset(set(missing_types)))
         addMissingMimeTypes(self.portal)
         # now they're back:
-        self.assertTrue(set(self.mimetypes.list_mimetypes()).issuperset(set(missing_types)))
+        self.assertTrue(set(self.mimetypes.list_mimetypes()
+                            ).issuperset(set(missing_types)))
 
 
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
diff --git a/plone/app/upgrade/v30/alphas.py b/plone/app/upgrade/v30/alphas.py
index a4a6a00..1fe1d9e 100644
--- a/plone/app/upgrade/v30/alphas.py
+++ b/plone/app/upgrade/v30/alphas.py
@@ -160,16 +160,18 @@ def migrateOldActions(context):
     # We don't need to operate on the providers that are still valid and
     # should ignore the control panel as well
     providers = [obj for obj in portal.objectValues()
-                     if hasattr(obj, '_actions') and
-                     obj.getId() not in special_providers]
+                 if hasattr(obj, '_actions') and
+                 obj.getId() not in special_providers]
     non_empty_providers = [p for p in providers if len(p._actions) > 0]
     for provider in non_empty_providers:
         for action in provider._actions:
             category = action.category
             # check if the category already exists, otherwise create it
-            new_category = getattr(aq_base(portal.portal_actions), category, None)
+            new_category = getattr(
+                aq_base(portal.portal_actions), category, None)
             if new_category is None:
-                portal.portal_actions._setObject(category, ActionCategory(id=category))
+                portal.portal_actions._setObject(
+                    category, ActionCategory(id=category))
                 new_category = portal.portal_actions[category]
 
             # Special handling for Expressions
@@ -181,12 +183,12 @@ def migrateOldActions(context):
                 available_expr = action.condition.text
 
             new_action = Action(action.id,
-                title=action.title,
-                description=action.description,
-                url_expr=url_expr,
-                available_expr=available_expr,
-                permissions=action.permissions,
-                visible = action.visible)
+                                title=action.title,
+                                description=action.description,
+                                url_expr=url_expr,
+                                available_expr=available_expr,
+                                permissions=action.permissions,
+                                visible=action.visible)
 
             # Only add an action if there isn't one with that name already
             if getattr(aq_base(new_category), action.id, None) is None:
@@ -230,7 +232,7 @@ def updateFTII18NDomain(context):
 def addPortletManagers(context):
     """Add new portlets managers."""
     loadMigrationProfile(context, 'profile-Products.CMFPlone:plone',
-            steps=['portlets'])
+                         steps=['portlets'])
 
 
 def convertLegacyPortlets(context):
@@ -252,10 +254,13 @@ def convertLegacyPortlets(context):
     if members is not None:
         membersRightSlots = getattr(aq_base(members), 'right_slots', None)
         if membersRightSlots == []:
-            rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=portal)
-            portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
+            rightColumn = getUtility(
+                IPortletManager, name=u'plone.rightcolumn', context=portal)
+            portletAssignments = getMultiAdapter(
+                (members, rightColumn,), ILocalPortletAssignmentManager)
             portletAssignments.setBlacklistStatus(CONTEXT_PORTLETS, True)
-            logger.info('Blacklisted contextual portlets in the Members folder')
+            logger.info(
+                'Blacklisted contextual portlets in the Members folder')
 
 
 def installProduct(product, portal, out=None, hidden=False):
@@ -277,7 +282,7 @@ def installProduct(product, portal, out=None, hidden=False):
                 ('portal_diff', IDiffTool),
                 ('portal_uidannotation', IUniqueIdAnnotationManagement),
                 ('portal_uidgenerator', IUniqueIdGenerator),
-               )
+                )
 if HAS_ATCT:
     registration += (('portal_atct', IATCTTool),)
 
@@ -292,7 +297,8 @@ def installProduct(product, portal, out=None, hidden=False):
                 ICachingPolicyManager, IRegistrationTool, IArchetypeTool,
                 ITranslationServiceTool, IQuickInstallerTool,
                 ISetupTool,
-               )
+                )
+
 
 def registerToolsAsUtilities(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
@@ -329,8 +335,10 @@ def addReaderAndEditorRoles(context):
     if 'Editor' not in portal.acl_users.portal_role_manager.listRoleIds():
         portal.acl_users.portal_role_manager.addRole('Editor')
 
-    viewRoles = [r['name'] for r in portal.rolesOfPermission('View') if r['selected']]
-    modifyRoles = [r['name'] for r in portal.rolesOfPermission('Modify portal content') if r['selected']]
+    viewRoles = [r['name']
+                 for r in portal.rolesOfPermission('View') if r['selected']]
+    modifyRoles = [r['name'] for r in portal.rolesOfPermission(
+        'Modify portal content') if r['selected']]
 
     if 'Reader' not in viewRoles:
         viewRoles.append('Reader')
@@ -348,20 +356,23 @@ def migrateLocalroleForm(context):
     if portal_types is not None:
         for fti in portal_types.objectValues():
             if not hasattr(fti, '_aliases'):
-                fti._aliases={}
+                fti._aliases = {}
 
             aliases = fti.getMethodAliases()
             new_aliases = aliases.copy()
             for k, v in aliases.items():
                 if 'folder_localrole_form' in v:
-                    new_aliases[k] = v.replace('folder_localrole_form', '@@sharing')
+                    new_aliases[k] = v.replace(
+                        'folder_localrole_form', '@@sharing')
             fti.setMethodAliases(new_aliases)
 
             for a in fti.listActions():
                 expr = a.getActionExpression()
                 if 'folder_localrole_form' in expr:
-                    a.setActionExpression(expr.replace('folder_localrole_form', '@@sharing'))
-    logger.info('Ensured references to folder_localrole_form point to @@sharing now')
+                    a.setActionExpression(expr.replace(
+                        'folder_localrole_form', '@@sharing'))
+    logger.info(
+        'Ensured references to folder_localrole_form point to @@sharing now')
 
 
 def reorderUserActions(context):
@@ -369,7 +380,8 @@ def reorderUserActions(context):
     if portal_actions is not None:
         user_category = getattr(portal_actions, 'user', None)
         if user_category is not None:
-            new_actions = ['login', 'join', 'mystuff', 'preferences', 'undo', 'logout']
+            new_actions = ['login', 'join', 'mystuff',
+                           'preferences', 'undo', 'logout']
             new_actions.reverse()
             for action in new_actions:
                 if action in user_category.objectIds():
@@ -379,8 +391,10 @@ def reorderUserActions(context):
 def updateMemberSecurity(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
     pprop = getToolByName(portal, 'portal_properties')
-    portal.manage_permission('Add portal member', roles=['Manager','Owner'], acquire=0)
-    pprop.site_properties.manage_changeProperties(allowAnonymousViewAbout=False)
+    portal.manage_permission('Add portal member', roles=[
+                             'Manager', 'Owner'], acquire=0)
+    pprop.site_properties.manage_changeProperties(
+        allowAnonymousViewAbout=False)
 
     portal.manage_changeProperties(validate_email=True)
 
@@ -397,7 +411,7 @@ def updatePASPlugins(context):
     activatePluginInterfaces(portal, 'mutable_properties')
     activatePluginInterfaces(portal, 'source_users')
     activatePluginInterfaces(portal, 'credentials_cookie_auth',
-            disable=['ICredentialsResetPlugin', 'ICredentialsUpdatePlugin'])
+                             disable=['ICredentialsResetPlugin', 'ICredentialsUpdatePlugin'])
     if not portal.acl_users.objectIds(['Plone Session Plugin']):
         from plone.session.plugins.session import manage_addSessionPlugin
         manage_addSessionPlugin(portal.acl_users, 'session')
@@ -456,10 +470,12 @@ def addCacheForResourceRegistry(context):
         RAMCacheManager.manage_addRAMCacheManager(portal, ram_cache_id)
         cache = getattr(portal, ram_cache_id)
         settings = cache.getSettings()
-        settings['max_age'] = 24*3600 # keep for up to 24 hours
+        settings['max_age'] = 24 * 3600  # keep for up to 24 hours
         settings['request_vars'] = ('URL',)
-        cache.manage_editProps('Cache for saved ResourceRegistry files', settings)
-        logger.info('Created RAMCache %s for ResourceRegistry output' % ram_cache_id)
+        cache.manage_editProps(
+            'Cache for saved ResourceRegistry files', settings)
+        logger.info('Created RAMCache %s for ResourceRegistry output' %
+                    ram_cache_id)
     reg = getToolByName(portal, 'portal_css', None)
     if reg is not None and getattr(aq_base(reg), 'ZCacheable_setManagerId', None) is not None:
         reg.ZCacheable_setManagerId(ram_cache_id)
@@ -477,8 +493,8 @@ def removeTablelessSkin(context):
     if 'Plone Tableless' in st.getSkinSelections():
         st.manage_skinLayers(['Plone Tableless'], del_skin=True)
         logger.info("Removed the Plone Tableless skin")
-    if st.default_skin=='Plone Tableless':
-        st.default_skin='Plone Default'
+    if st.default_skin == 'Plone Tableless':
+        st.default_skin = 'Plone Default'
         logger.info("Changed the default skin to 'Plone Default'")
 
 
@@ -496,7 +512,7 @@ def removeMyStuffAction(context):
     actions = getToolByName(context, 'portal_actions')
     if getattr(actions, 'user', None) is None:
         return
-    category=actions.user
+    category = actions.user
     if 'mystuff' in category.objectIds():
         category.manage_delObjects(ids=['mystuff'])
         logger.info("Removed the mystuff user action")
@@ -510,11 +526,11 @@ def addMissingWorkflows(context):
     if wft is None:
         return
 
-    new_workflow_ids = [ 'intranet_workflow', 'intranet_folder_workflow',
+    new_workflow_ids = ['intranet_workflow', 'intranet_folder_workflow',
                         'one_state_workflow', 'simple_publication_workflow']
     encoding = 'utf-8'
     path_prefix = os.path.join(package_home(cmfplone_globals), 'profiles',
-            'default', 'workflows')
+                               'default', 'workflows')
 
     for wf_id in new_workflow_ids:
         if wf_id in wft.objectIds():
@@ -522,44 +538,19 @@ def addMissingWorkflows(context):
             continue
 
         path = os.path.join(path_prefix, wf_id, 'definition.xml')
-        body = open(path,'r').read()
+        body = open(path, 'r').read()
 
         wft._setObject(wf_id, DCWorkflowDefinition(wf_id))
         wf = wft[wf_id]
         wfdc = WorkflowDefinitionConfigurator(wf)
 
-        ( workflow_id
-        , title
-        , state_variable
-        , initial_state
-        , states
-        , transitions
-        , variables
-        , worklists
-        , permissions
-        , scripts
-        , description
-        , manager_bypass
-        , creation_guard
-        ) = wfdc.parseWorkflowXML(body, encoding)
-
-        _initDCWorkflow( wf
-                       , title
-                       , description
-                       , manager_bypass
-                       , creation_guard
-                       , state_variable
-                       , initial_state
-                       , states
-                       , transitions
-                       , variables
-                       , worklists
-                       , permissions
-                       , scripts
-                       , portal     # not sure what to pass here
-                                    # the site or the wft?
-                                    # (does it matter at all?)
-                      )
+        (workflow_id, title, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, description, manager_bypass, creation_guard
+         ) = wfdc.parseWorkflowXML(body, encoding)
+
+        _initDCWorkflow(wf, title, description, manager_bypass, creation_guard, state_variable, initial_state, states, transitions, variables, worklists, permissions, scripts, portal     # not sure what to pass here
+                        # the site or the wft?
+                        # (does it matter at all?)
+                        )
         logger.info("Added workflow %s" % wf_id)
 
 
@@ -580,4 +571,3 @@ def restorePloneTool(context):
 def updateImportStepsFromBaseProfile(context):
     """Updates the available import steps for existing sites."""
     context.setBaselineContext("profile-%s" % _DEFAULT_PROFILE)
-
diff --git a/plone/app/upgrade/v30/betas.py b/plone/app/upgrade/v30/betas.py
index a75464f..48f7077 100644
--- a/plone/app/upgrade/v30/betas.py
+++ b/plone/app/upgrade/v30/betas.py
@@ -46,6 +46,7 @@ def changeOrderOfActionProviders(context):
         portal_actions.addActionProvider('portal_actions')
         logger.info('Changed the order of action providers.')
 
+
 def cleanupOldActions(context):
     portal_actions = getToolByName(context, 'portal_actions', None)
     if portal_actions is not None:
@@ -82,6 +83,7 @@ def cleanupOldActions(context):
                 portal_actions._delObject('global')
                 logger.info('Removed global action category.')
 
+
 def cleanDefaultCharset(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
     charset = portal.getProperty('default_charset', None)
@@ -100,11 +102,12 @@ def addAutoGroupToPAS(context):
     if not portal.acl_users.objectIds(['Automatic Group Plugin']):
         from Products.PlonePAS.plugins.autogroup import manage_addAutoGroup
         manage_addAutoGroup(portal.acl_users, 'auto_group',
-                'Automatic Group Provider',
-                'AuthenticatedUsers', "Logged-in users (Virtual Group)")
+                            'Automatic Group Provider',
+                            'AuthenticatedUsers', "Logged-in users (Virtual Group)")
         activatePluginInterfaces(portal, "auto_group", sout)
         logger.info("Added automatic group PAS plugin")
 
+
 def removeS5Actions(context):
     portalTypes = getToolByName(context, 'portal_types', None)
     if portalTypes is not None:
@@ -114,14 +117,17 @@ def removeS5Actions(context):
             if 's5_presentation' in ids:
                 index = ids.index('s5_presentation')
                 document.deleteActions([index])
-                logger.info("Removed 's5_presentation' action from actions tool.")
+                logger.info(
+                    "Removed 's5_presentation' action from actions tool.")
 
     iconsTool = queryUtility(IActionIconsTool)
     if iconsTool is not None:
         ids = [x._action_id for x in iconsTool.listActionIcons()]
         if 's5_presentation' in ids:
-            iconsTool.removeActionIcon('plone','s5_presentation')
-            logger.info("Removed 's5_presentation' icon from actionicons tool.")
+            iconsTool.removeActionIcon('plone', 's5_presentation')
+            logger.info(
+                "Removed 's5_presentation' icon from actionicons tool.")
+
 
 def addContributorToCreationPermissions(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
@@ -131,14 +137,17 @@ def addContributorToCreationPermissions(context):
         portal.acl_users.portal_role_manager.addRole('Contributor')
 
     for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                'ATContentTypes: Add Event',
-                'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                'ATContentTypes: Add News Item', ]:
-        roles = [r['name'] for r in portal.rolesOfPermission(p) if r['selected']]
+              'ATContentTypes: Add Event',
+              'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
+              'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
+              'ATContentTypes: Add News Item', ]:
+        roles = [r['name']
+                 for r in portal.rolesOfPermission(p) if r['selected']]
         if 'Contributor' not in roles:
             roles.append('Contributor')
-            portal.manage_permission(p, roles, bool(portal.acquiredRolesAreUsedBy(p)))
+            portal.manage_permission(p, roles, bool(
+                portal.acquiredRolesAreUsedBy(p)))
+
 
 def removeSharingAction(context):
     portal_types = getToolByName(context, 'portal_types', None)
@@ -150,13 +159,17 @@ def removeSharingAction(context):
 
         logger.info('Removed explicit references to sharing action')
 
+
 def addEditorToSecondaryEditorPermissions(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
     for p in ['Manage properties', 'Modify view template', 'Request review']:
-        roles = [r['name'] for r in portal.rolesOfPermission(p) if r['selected']]
+        roles = [r['name']
+                 for r in portal.rolesOfPermission(p) if r['selected']]
         if 'Editor' not in roles:
             roles.append('Editor')
-            portal.manage_permission(p, roles, bool(portal.acquiredRolesAreUsedBy(p)))
+            portal.manage_permission(p, roles, bool(
+                portal.acquiredRolesAreUsedBy(p)))
+
 
 def updateEditActionConditionForLocking(context):
     """
@@ -173,7 +186,9 @@ def updateEditActionConditionForLocking(context):
             if fti:
                 for action in fti.listActions():
                     if action.getId() == 'edit' and not action.condition:
-                        action.condition = Expression("not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
+                        action.condition = Expression(
+                            "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
+
 
 def addOnFormUnloadJS(context):
     """
@@ -186,12 +201,13 @@ def addOnFormUnloadJS(context):
         # Failsafe: first make sure the stylesheet doesn't exist in the list
         if script not in script_ids:
             jsreg.registerScript(script,
-                                 enabled = True,
-                                 cookable = True)
+                                 enabled=True,
+                                 cookable=True)
             # put it at the bottom of the stack
             jsreg.moveResourceToBottom(script)
             logger.info("Added " + script + " to portal_javascripts")
 
+
 def updateTopicTitle(context):
     """Update the title of the topic type."""
     tt = getToolByName(context, 'portal_types', None)
@@ -210,15 +226,16 @@ def cleanupActionProviders(context):
             at.deleteActionProvider(provider)
             logger.info("%s is no longer an action provider" % provider)
 
+
 def hidePropertiesAction(context):
     tt = getToolByName(context, 'portal_types', None)
     if not IActionProvider.providedBy(tt):
         return
     for ti in tt.listTypeInfo():
         actions = ti.listActions()
-        index=[i for i in range(len(actions) )
-                if actions[i].category=="object" and
-                   actions[i].id=="metadata"]
+        index = [i for i in range(len(actions))
+                 if actions[i].category == "object" and
+                 actions[i].id == "metadata"]
         if index:
             ti.deleteActions(index)
             logger.info("Removed properties action from type %s" % ti.id)
diff --git a/plone/app/upgrade/v30/final_three0x.py b/plone/app/upgrade/v30/final_three0x.py
index 5c47471..62ea2fd 100644
--- a/plone/app/upgrade/v30/final_three0x.py
+++ b/plone/app/upgrade/v30/final_three0x.py
@@ -6,7 +6,8 @@
 
 
 def final_three01(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0final-3.0.1')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v30:3.0final-3.0.1')
 
 
 def three01_three02(context):
diff --git a/plone/app/upgrade/v30/rcs.py b/plone/app/upgrade/v30/rcs.py
index c78701d..50fcbd8 100644
--- a/plone/app/upgrade/v30/rcs.py
+++ b/plone/app/upgrade/v30/rcs.py
@@ -10,13 +10,16 @@
 
 
 def rc2_final(context):
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final')
     try:
         import plone.app.iterate
     except ImportError:
         pass
     else:
-        loadMigrationProfile(context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final-iterate')
+        loadMigrationProfile(
+            context, 'profile-plone.app.upgrade.v30:3.0rc2-3.0final-iterate')
+
 
 def addIntelligentText(context):
     """ add intelligenttext mime type and transforms that have been
diff --git a/plone/app/upgrade/v30/tests.py b/plone/app/upgrade/v30/tests.py
index 2a3a2cf..bab3076 100644
--- a/plone/app/upgrade/v30/tests.py
+++ b/plone/app/upgrade/v30/tests.py
@@ -139,16 +139,17 @@ def afterSetUp(self):
     def _migrate_reply_action(self):
         # Create dummy old ActionInformation
         reply = ActionInformation('reply',
-            title='Reply',
-            category='reply_actions',
-            condition='context/replyAllowed',
-            permissions=(AccessInactivePortalContent, ),
-            priority=10,
-            visible=True,
-            action='context/reply'
-        )
+                                  title='Reply',
+                                  category='reply_actions',
+                                  condition='context/replyAllowed',
+                                  permissions=(AccessInactivePortalContent, ),
+                                  priority=10,
+                                  visible=True,
+                                  action='context/reply'
+                                  )
 
         from OFS.SimpleItem import SimpleItem
+
         class DummyTool(SimpleItem):
             pass
         dummy = DummyTool()
@@ -169,7 +170,8 @@ def testMigrateActions(self):
             self.assertEqual(data['category'], 'reply_actions')
             self.assertEqual(data['title'], 'Reply')
             self.assertEqual(data['visible'], True)
-            self.assertEqual(data['permissions'], (AccessInactivePortalContent, ))
+            self.assertEqual(data['permissions'],
+                             (AccessInactivePortalContent, ))
             self.assertEqual(data['available'].text, 'context/replyAllowed')
             self.assertEqual(data['url'].text, 'context/reply')
             # Make sure the original action has been removed
@@ -204,17 +206,19 @@ def testHistoryActionID(self):
 
     def testProviderCleanup(self):
         self.actions.addActionProvider("portal_membership")
-        self.assertTrue("portal_membership" in self.actions.listActionProviders())
+        self.assertTrue(
+            "portal_membership" in self.actions.listActionProviders())
         # Test it twice
         for i in range(2):
             cleanupActionProviders(self.portal)
-            self.assertFalse("portal_membership" in self.actions.listActionProviders())
+            self.assertFalse(
+                "portal_membership" in self.actions.listActionProviders())
 
     def testRemovePropertiesActions(self):
         ti = self.types.getTypeInfo("Document")
         if ti.getActionObject("object/properties") is None:
             ti.addAction("metadata", "name", "action", "condition",
-                    "permission", "object",)
+                         "permission", "object",)
         # Test it twice
         for i in range(2):
             hidePropertiesAction(self.portal)
@@ -270,7 +274,8 @@ def testEnableZope3Site(self):
         # Test it twice
         for i in range(2):
             enableZope3Site(self.portal)
-            self.assertEqual(sm.utilities.LookupClass, FiveVerifyingAdapterLookup)
+            self.assertEqual(sm.utilities.LookupClass,
+                             FiveVerifyingAdapterLookup)
             self.assertEqual(sm.utilities.__parent__, sm)
             self.assertEqual(sm.__parent__, self.portal)
 
@@ -292,26 +297,33 @@ def testUpdateFTII18NDomainNonAscii(self):
         self.assertEqual(doc.i18n_domain, '')
 
     def testAddDefaultAndForbiddenContentTypesProperties(self):
-        # Should add the forbidden_contenttypes and default_contenttype property
+        # Should add the forbidden_contenttypes and default_contenttype
+        # property
         self.removeSiteProperty('forbidden_contenttypes')
         self.removeSiteProperty('default_contenttype')
-        self.assertFalse(self.properties.site_properties.hasProperty('forbidden_contenttypes'))
-        self.assertFalse(self.properties.site_properties.hasProperty('default_contenttype'))
+        self.assertFalse(self.properties.site_properties.hasProperty(
+            'forbidden_contenttypes'))
+        self.assertFalse(
+            self.properties.site_properties.hasProperty('default_contenttype'))
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('propertiestool', ))
-            self.assertTrue(self.properties.site_properties.hasProperty('forbidden_contenttypes'))
-            self.assertTrue(self.properties.site_properties.hasProperty('default_contenttype'))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('propertiestool', ))
+            self.assertTrue(self.properties.site_properties.hasProperty(
+                'forbidden_contenttypes'))
+            self.assertTrue(self.properties.site_properties.hasProperty(
+                'default_contenttype'))
             self.assertEqual(self.properties.site_properties.forbidden_contenttypes,
-                ('text/structured', 'text/restructured', 'text/x-rst',
-                'text/plain', 'text/plain-pre', 'text/x-python',
-                'text/x-web-markdown', 'text/x-web-intelligent', 'text/x-web-textile')
-            )
+                             ('text/structured', 'text/restructured', 'text/x-rst',
+                              'text/plain', 'text/plain-pre', 'text/x-python',
+                              'text/x-web-markdown', 'text/x-web-intelligent', 'text/x-web-textile')
+                             )
 
     def testTablelessRemoval(self):
         st = getToolByName(self.portal, "portal_skins")
         if "Plone Tableless" not in st.getSkinSelections():
-            st.addSkinSelection('Plone Tableless', 'one,two', make_default=True)
+            st.addSkinSelection('Plone Tableless',
+                                'one,two', make_default=True)
         # Test it twice
         for i in range(2):
             removeTablelessSkin(self.portal)
@@ -320,11 +332,15 @@ def testTablelessRemoval(self):
 
     def testLegacyPortletsConverted(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -346,8 +362,10 @@ def testLegacyPortletsConverted(self):
             self.assertEqual(self.portal.left_slots, [])
             self.assertEqual(self.portal.right_slots, [])
 
-            left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-            right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+            left = getMultiAdapter(
+                (self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
+            right = getMultiAdapter(
+                (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
             lp = left.values()
             self.assertEqual(2, len(lp))
@@ -360,16 +378,22 @@ def testLegacyPortletsConverted(self):
             self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
 
             members = self.portal.Members
-            portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
-            self.assertEqual(True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
+            portletAssignments = getMultiAdapter(
+                (members, rightColumn,), ILocalPortletAssignmentManager)
+            self.assertEqual(
+                True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
 
     def testLegacyPortletsConvertedNoSlots(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -388,8 +412,10 @@ def testLegacyPortletsConvertedNoSlots(self):
 
         self.assertEqual(self.portal.left_slots, [])
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         lp = left.values()
         self.assertEqual(2, len(lp))
@@ -401,16 +427,22 @@ def testLegacyPortletsConvertedNoSlots(self):
         self.assertEqual(0, len(rp))
 
         members = self.portal.Members
-        portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
+        portletAssignments = getMultiAdapter(
+            (members, rightColumn,), ILocalPortletAssignmentManager)
+        self.assertEqual(
+            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
 
     def testLegacyPortletsConvertedBadSlots(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -419,14 +451,16 @@ def testLegacyPortletsConvertedBadSlots(self):
 
         self.portal.left_slots = ['here/portlet_recent/macros/portlet',
                                   'here/portlet_news/macros/portlet',
-                                  'foobar',]
+                                  'foobar', ]
         self.portal.right_slots = ['here/portlet_login/macros/portlet']
 
         self.portal.Members.right_slots = []
 
         convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         self.assertEqual(self.portal.left_slots, [])
         self.assertEqual(self.portal.right_slots, [])
@@ -442,16 +476,22 @@ def testLegacyPortletsConvertedBadSlots(self):
         self.assertTrue(isinstance(rp[0], portlets.login.Assignment))
 
         members = self.portal.Members
-        portletAssignments = getMultiAdapter((members, rightColumn,), ILocalPortletAssignmentManager)
-        self.assertEqual(True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
+        portletAssignments = getMultiAdapter(
+            (members, rightColumn,), ILocalPortletAssignmentManager)
+        self.assertEqual(
+            True, portletAssignments.getBlacklistStatus(CONTEXT_PORTLETS))
 
     def testLegacyPortletsConvertedNoMembersFolder(self):
         self.setRoles(('Manager',))
-        leftColumn = getUtility(IPortletManager, name=u'plone.leftcolumn', context=self.portal)
-        rightColumn = getUtility(IPortletManager, name=u'plone.rightcolumn', context=self.portal)
+        leftColumn = getUtility(
+            IPortletManager, name=u'plone.leftcolumn', context=self.portal)
+        rightColumn = getUtility(
+            IPortletManager, name=u'plone.rightcolumn', context=self.portal)
 
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         for k in left:
             del left[k]
@@ -460,14 +500,16 @@ def testLegacyPortletsConvertedNoMembersFolder(self):
 
         self.portal.left_slots = ['here/portlet_recent/macros/portlet',
                                   'here/portlet_news/macros/portlet',
-                                  'foobar',]
+                                  'foobar', ]
         self.portal.right_slots = ['here/portlet_login/macros/portlet']
 
         self.portal._delObject('Members')
 
         convertLegacyPortlets(self.portal)
-        left = getMultiAdapter((self.portal, leftColumn,), IPortletAssignmentMapping, context=self.portal)
-        right = getMultiAdapter((self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
+        left = getMultiAdapter((self.portal, leftColumn,),
+                               IPortletAssignmentMapping, context=self.portal)
+        right = getMultiAdapter(
+            (self.portal, rightColumn,), IPortletAssignmentMapping, context=self.portal)
 
         self.assertEqual(self.portal.left_slots, [])
         self.assertEqual(self.portal.right_slots, [])
@@ -518,7 +560,7 @@ def testDontRegisterToolsAsUtilities(self):
                       IMemberDataTool, IArchetypeTool, ICachingPolicyManager,
                       IRegistrationTool, ITranslationServiceTool,
                       ISetupTool, IQuickInstallerTool,
-                     )
+                      )
         for i in interfaces:
             sm.unregisterUtility(provided=i)
         registerToolsAsUtilities(self.portal)
@@ -548,7 +590,8 @@ def testInstallRedirectorUtility(self):
         sm.unregisterUtility(provided=IRedirectionStorage)
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('componentregistry', ))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('componentregistry', ))
             self.assertFalse(sm.queryUtility(IRedirectionStorage) is None)
 
     def testAddReaderEditorRoles(self):
@@ -558,10 +601,14 @@ def testAddReaderEditorRoles(self):
             addReaderAndEditorRoles(self.portal)
             self.assertTrue('Reader' in self.portal.valid_roles())
             self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue('Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole('Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
+            self.assertTrue(
+                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue(
+                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
+                'Reader') if r['selected']])
+            self.assertTrue('Modify portal content' in [
+                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testAddReaderEditorRolesPermissionOnly(self):
         self.portal.manage_permission('View', [], True)
@@ -571,23 +618,29 @@ def testAddReaderEditorRolesPermissionOnly(self):
             addReaderAndEditorRoles(self.portal)
             self.assertTrue('Reader' in self.portal.valid_roles())
             self.assertTrue('Editor' in self.portal.valid_roles())
-            self.assertTrue('Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
-            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole('Reader') if r['selected']])
-            self.assertTrue('Modify portal content' in [r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
+            self.assertTrue(
+                'Reader' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue(
+                'Editor' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue('View' in [r['name'] for r in self.portal.permissionsOfRole(
+                'Reader') if r['selected']])
+            self.assertTrue('Modify portal content' in [
+                            r['name'] for r in self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testMigrateLocalroleForm(self):
         fti = self.portal.portal_types['Document']
         aliases = fti.getMethodAliases()
         aliases['sharing'] = 'folder_localrole_form'
         fti.setMethodAliases(aliases)
-        fti.addAction('test', 'Test', 'string:${object_url}/folder_localrole_form', None, 'View', 'object')
+        fti.addAction(
+            'test', 'Test', 'string:${object_url}/folder_localrole_form', None, 'View', 'object')
         # Test it twice
         for i in range(2):
             migrateLocalroleForm(self.portal)
             self.assertEqual('@@sharing', fti.getMethodAliases()['sharing'])
             test_action = fti.listActions()[-1]
-            self.assertEqual('string:${object_url}/@@sharing', test_action.getActionExpression())
+            self.assertEqual(
+                'string:${object_url}/@@sharing', test_action.getActionExpression())
 
     def testReorderUserActions(self):
         self.actions.user.moveObjectsToTop(['logout', 'undo', 'join'])
@@ -637,7 +690,8 @@ def testAddVariousProperties(self):
         sheet = self.properties.site_properties
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('propertiestool', ))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('propertiestool', ))
             for prop in PROPERTIES:
                 self.assertTrue(sheet.hasProperty(prop))
 
@@ -649,7 +703,8 @@ def testInstallContentrulesAndLanguageUtilities(self):
             sm.unregisterUtility(provided=i)
         # Test it twice
         for i in range(2):
-            loadMigrationProfile(self.portal, self.profile, ('componentregistry', ))
+            loadMigrationProfile(self.portal, self.profile,
+                                 ('componentregistry', ))
             for i in INTERFACES:
                 self.assertFalse(sm.queryUtility(i) is None)
 
@@ -688,8 +743,10 @@ def testUpdateMemberSecurity(self):
         self.assertEqual(pmembership.memberareaCreationFlag, False)
         self.assertEqual(self.portal.getProperty('validate_email'), True)
 
-        app_roles = self.portal.rolesOfPermission(permission='Add portal member')
-        app_perms = self.portal.permission_settings(permission='Add portal member')
+        app_roles = self.portal.rolesOfPermission(
+            permission='Add portal member')
+        app_perms = self.portal.permission_settings(
+            permission='Add portal member')
         acquire_check = app_perms[0]['acquire']
         reg_roles = []
         for appperm in app_roles:
@@ -702,14 +759,16 @@ def testUpdateMemberSecurity(self):
     def testPASPluginInterfaces(self):
         pas = self.portal.acl_users
         from Products.PluggableAuthService.interfaces.plugins import IUserEnumerationPlugin
-        pas.plugins.deactivatePlugin(IUserEnumerationPlugin, 'mutable_properties')
+        pas.plugins.deactivatePlugin(
+            IUserEnumerationPlugin, 'mutable_properties')
         updatePASPlugins(self.portal)
 
         plugin = pas.mutable_properties
         for intf_id in plugin.listInterfaces():
             try:
                 intf = pas.plugins._getInterfaceFromName(intf_id)
-                self.assertTrue('mutable_properties' in pas.plugins.listPluginIds(intf))
+                self.assertTrue(
+                    'mutable_properties' in pas.plugins.listPluginIds(intf))
             except KeyError:
                 # Ignore unregistered interface types
                 pass
@@ -801,7 +860,8 @@ def testAddContentRulesAction(self):
         # Test it twice
         for i in range(2):
             loadMigrationProfile(self.portal, self.profile, ('actions', ))
-            self.assertTrue('contentrules' in self.portal.portal_actions.object.objectIds())
+            self.assertTrue(
+                'contentrules' in self.portal.portal_actions.object.objectIds())
 
     def testChangeOrderOfActionProviders(self):
         self.actions.deleteActionProvider('portal_types')
@@ -853,16 +913,16 @@ def testCharsetCleanup(self):
             self.portal.manage_addProperty('default_charset', '', 'string')
         # Test it twice
         for i in range(2):
-            self.portal.manage_changeProperties(default_charset = 'latin1')
+            self.portal.manage_changeProperties(default_charset='latin1')
             cleanDefaultCharset(self.portal)
             self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                    'latin1')
+                             'latin1')
         # Test it twice
         for i in range(2):
-            self.portal.manage_changeProperties(default_charset = '')
+            self.portal.manage_changeProperties(default_charset='')
             cleanDefaultCharset(self.portal)
             self.assertEqual(self.portal.getProperty('default_charset', 'nothere'),
-                    'nothere')
+                             'nothere')
 
     def testAutoGroupCreated(self):
         pas = self.portal.acl_users
@@ -871,12 +931,14 @@ def testAutoGroupCreated(self):
             pas.manage_delObjects(ids)
         addAutoGroupToPAS(self.portal)
         self.assertEqual(pas.objectIds(['Automatic Group Plugin']),
-                ['auto_group'])
+                         ['auto_group'])
         plugin = pas.auto_group
-        interfaces = [info['interface'] for info in pas.plugins.listPluginTypeInfo()]
+        interfaces = [info['interface']
+                      for info in pas.plugins.listPluginTypeInfo()]
         for iface in interfaces:
             if plugin.testImplements(iface):
-                self.assertFalse('auto_group' not in pas.plugins.listPluginIds(iface))
+                self.assertFalse(
+                    'auto_group' not in pas.plugins.listPluginIds(iface))
         self.assertEqual(len(pas.searchGroups(id='AuthenticatedUsers',
                                               exact_match=True)), 1)
 
@@ -884,13 +946,13 @@ def testPloneS5(self):
         pt = getToolByName(self.portal, "portal_types")
         document = pt.restrictedTraverse('Document')
         document.addAction('s5_presentation',
-            name='View as presentation',
-            action="string:${object/absolute_url}/document_s5_presentation",
-            condition='python:object.document_s5_alter(test=True)',
-            permission='View',
-            category='document_actions',
-            visible=1,
-            )
+                           name='View as presentation',
+                           action="string:${object/absolute_url}/document_s5_presentation",
+                           condition='python:object.document_s5_alter(test=True)',
+                           permission='View',
+                           category='document_actions',
+                           visible=1,
+                           )
         action_ids = [x.getId() for x in document.listActions()]
         self.assertTrue("s5_presentation" in action_ids)
         # Test it twice
@@ -900,34 +962,37 @@ def testPloneS5(self):
             self.assertFalse("s5_presentation" in action_ids)
 
     def testAddContributorToCreationPermissions(self):
-        self.portal._delRoles(['Contributor',])
+        self.portal._delRoles(['Contributor', ])
         for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                    'ATContentTypes: Add Event',
-                    'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                    'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                    'ATContentTypes: Add News Item', ]:
+                  'ATContentTypes: Add Event',
+                  'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
+                  'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
+                  'ATContentTypes: Add News Item', ]:
             self.portal.manage_permission(p, ['Manager', 'Owner'], True)
         # Test it twice
         for i in range(2):
             addContributorToCreationPermissions(self.portal)
             self.assertTrue('Contributor' in self.portal.valid_roles())
-            self.assertTrue('Contributor' in self.portal.acl_users.portal_role_manager.listRoleIds())
+            self.assertTrue(
+                'Contributor' in self.portal.acl_users.portal_role_manager.listRoleIds())
             for p in ['Add portal content', 'Add portal folders', 'ATContentTypes: Add Document',
-                        'ATContentTypes: Add Event',
-                        'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
-                        'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
-                        'ATContentTypes: Add News Item', ]:
+                      'ATContentTypes: Add Event',
+                      'ATContentTypes: Add File', 'ATContentTypes: Add Folder',
+                      'ATContentTypes: Add Image', 'ATContentTypes: Add Link',
+                      'ATContentTypes: Add News Item', ]:
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Contributor') if r['selected']])
+                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
 
     def testAddContributerToCreationPermissionsNoStomp(self):
         self.portal.manage_permission('Add portal content', ['Manager'], False)
         # Test it twice
         for i in range(2):
             addContributorToCreationPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission('Add portal content') if r['selected']])
+            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
+                'Add portal content') if r['selected']])
             self.assertEqual(['Contributor', 'Manager'], roles)
-            self.assertEqual(False, bool(self.portal.acquiredRolesAreUsedBy('Add portal content')))
+            self.assertEqual(False, bool(
+                self.portal.acquiredRolesAreUsedBy('Add portal content')))
 
     def testAddBeta2VersioningPermissionsToNewRoles(self):
         # This upgrade just uses GS to apply the role changes,
@@ -942,19 +1007,19 @@ def testAddBeta2VersioningPermissionsToNewRoles(self):
         # Test it twice
         for i in range(2):
             loadMigrationProfile(self.portal,
-                    'profile-plone.app.upgrade.v30:3.0b1-3.0b2',
-                    steps=["rolemap"])
+                                 'profile-plone.app.upgrade.v30:3.0b1-3.0b2',
+                                 steps=["rolemap"])
             for p in ['CMFEditions: Apply version control',
                       'CMFEditions: Save new version',
                       'CMFEditions: Access previous versions']:
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Contributor') if r['selected']])
+                                      self.portal.permissionsOfRole('Contributor') if r['selected']])
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Editor') if r['selected']])
+                                      self.portal.permissionsOfRole('Editor') if r['selected']])
             for p in ['CMFEditions: Revert to previous versions',
                       'CMFEditions: Checkout to location']:
                 self.assertTrue(p in [r['name'] for r in
-                                    self.portal.permissionsOfRole('Editor') if r['selected']])
+                                      self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testRemoveSharingAction(self):
         fti = self.types['Document']
@@ -965,7 +1030,8 @@ def testRemoveSharingAction(self):
         # Test it twice
         for i in range(2):
             removeSharingAction(self.portal)
-            self.assertFalse('local_roles' in [a.id for a in fti.listActions()])
+            self.assertFalse('local_roles' in [
+                             a.id for a in fti.listActions()])
 
     def testAddEditorToCreationPermissions(self):
         for p in ['Manage properties', 'Modify view template', 'Request review']:
@@ -975,16 +1041,18 @@ def testAddEditorToCreationPermissions(self):
             addEditorToSecondaryEditorPermissions(self.portal)
             for p in ['Manage properties', 'Modify view template', 'Request review']:
                 self.assertTrue(p in [r['name'] for r in
-                    self.portal.permissionsOfRole('Editor') if r['selected']])
+                                      self.portal.permissionsOfRole('Editor') if r['selected']])
 
     def testAddEditorToCreationPermissionsNoStomp(self):
         self.portal.manage_permission('Manage properties', ['Manager'], False)
         # Test it twice
         for i in range(2):
             addEditorToSecondaryEditorPermissions(self.portal)
-            roles = sorted([r['name'] for r in self.portal.rolesOfPermission('Manage properties') if r['selected']])
+            roles = sorted([r['name'] for r in self.portal.rolesOfPermission(
+                'Manage properties') if r['selected']])
             self.assertEqual(['Editor', 'Manager'], roles)
-            self.assertEqual(False, bool(self.portal.acquiredRolesAreUsedBy('Manage properties')))
+            self.assertEqual(False, bool(
+                self.portal.acquiredRolesAreUsedBy('Manage properties')))
 
     def testUpdateEditActionConditionForLocking(self):
         lockable_types = ['Document', 'Event', 'File', 'Folder',
@@ -1002,7 +1070,7 @@ def testUpdateEditActionConditionForLocking(self):
                 for action in fti.listActions():
                     if action.getId() == 'edit':
                         self.assertEqual(action.condition.text,
-                            "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
+                                         "not:object/@@plone_lock_info/is_locked_for_current_user|python:True")
 
     def testUpdateEditExistingActionConditionForLocking(self):
         fti = self.types.getTypeInfo('Document')
@@ -1057,28 +1125,30 @@ def testAddIntelligentText(self):
             mtr.manage_delObjects((mime_type,))
         # now all are gone:
         self.assertFalse(mime_type in mtr.list_mimetypes())
-        self.assertFalse(set(ptr.objectIds()).issuperset(set(missing_transforms)))
+        self.assertFalse(set(ptr.objectIds()).issuperset(
+            set(missing_transforms)))
         # Test it twice
         for i in range(2):
             addIntelligentText(self.portal)
             # now all are back:
             self.assertTrue(mime_type in mtr.list_mimetypes())
-            self.assertTrue(set(ptr.objectIds()).issuperset(set(missing_transforms)))
+            self.assertTrue(set(ptr.objectIds()).issuperset(
+                set(missing_transforms)))
 
     def testInstallNewModifiers(self):
         # ensure the new modifiers are installed
         modifiers = self.portal.portal_modifier
         self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                        modifiers.objectIds())
         modifiers.manage_delObjects(['AbortVersioningOfLargeFilesAndImages',
                                      'SkipVersioningOfLargeFilesAndImages'])
         self.assertFalse('AbortVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                         modifiers.objectIds())
         installNewModifiers(self.portal)
         self.assertTrue('AbortVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                        modifiers.objectIds())
         self.assertTrue('SkipVersioningOfLargeFilesAndImages' in
-                                                          modifiers.objectIds())
+                        modifiers.objectIds())
 
     def testInstallNewModifiersTwice(self):
         # ensure that we get no errors when run twice
diff --git a/plone/app/upgrade/v31/betas.py b/plone/app/upgrade/v31/betas.py
index 3124b42..b621f9c 100644
--- a/plone/app/upgrade/v31/betas.py
+++ b/plone/app/upgrade/v31/betas.py
@@ -15,7 +15,8 @@ def three0_beta1(portal):
     """
     out = []
 
-    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v31:3.0.6-3.1beta1')
+    loadMigrationProfile(
+        portal, 'profile-plone.app.upgrade.v31:3.0.6-3.1beta1')
 
     addBrowserLayer(portal, out)
     addCollectionAndStaticPortlets(portal, out)
@@ -28,14 +29,14 @@ def three0_beta1(portal):
 
 
 def addBrowserLayer(portal, out):
-    qi=getToolByName(portal, "portal_quickinstaller")
+    qi = getToolByName(portal, "portal_quickinstaller")
     if not qi.isProductInstalled("plone.browserlayer"):
         qi.installProduct("plone.browserlayer", locked=True)
         out.append("Installed plone.browserlayer")
 
 
 def addCollectionAndStaticPortlets(portal, out):
-    qi=getToolByName(portal, "portal_quickinstaller")
+    qi = getToolByName(portal, "portal_quickinstaller")
     if not qi.isProductInstalled("plone.portlet.static"):
         qi.installProduct("plone.portlet.static", locked=True)
         out.append("Installed plone.portlet.static")
@@ -51,31 +52,32 @@ def migratePortletTypeRegistrations(portal, out):
         elif type(portletType.for_) is not list:
             portletType.for_ = [portletType.for_]
 
-    out.append("Upgraded portlet types to support multiple " + \
-      "portlet manager interfaces.")
+    out.append("Upgraded portlet types to support multiple " +
+               "portlet manager interfaces.")
 
 
 def removeDoubleGenericSetupSteps(portal, out):
     """Remove all GenericSetup steps that are registered both using
     zcml and in the persistent registry from the persistent registry.
     """
-    st=getToolByName(portal, "portal_setup")
-    view=ImportStepsView(st, None)
-    steps=[step["id"] for step in view.doubleSteps()]
+    st = getToolByName(portal, "portal_setup")
+    view = ImportStepsView(st, None)
+    steps = [step["id"] for step in view.doubleSteps()]
     if steps:
         for step in steps:
             st._import_registry.unregisterStep(step)
-        st._p_changed=True
+        st._p_changed = True
         out.append("Removed doubly registered GenericSetup import steps: %s" %
-                " ".join(steps))
+                   " ".join(steps))
 
-    view=ExportStepsView(st, None)
-    steps=[step["id"] for step in view.doubleSteps()]
+    view = ExportStepsView(st, None)
+    steps = [step["id"] for step in view.doubleSteps()]
     if steps:
         for step in steps:
             st._export_registry.unregisterStep(step)
         out.append("Removed doubly registered GenericSetup export steps: %s" %
-                " ".join(steps))
+                   " ".join(steps))
+
 
 def reinstallCMFPlacefulWorkflow(portal, out):
     qi = getToolByName(portal, 'portal_quickinstaller', None)
diff --git a/plone/app/upgrade/v31/final_three1x.py b/plone/app/upgrade/v31/final_three1x.py
index 0c461eb..f0ab05d 100644
--- a/plone/app/upgrade/v31/final_three1x.py
+++ b/plone/app/upgrade/v31/final_three1x.py
@@ -1,9 +1,11 @@
 from plone.app.upgrade.utils import loadMigrationProfile
 
+
 def three11_three12(portal):
     """3.1.1 -> 3.1.2"""
     pass
 
+
 def three14_three15(portal):
     """3.1.4 -> 3.1.5"""
 
diff --git a/plone/app/upgrade/v31/tests.py b/plone/app/upgrade/v31/tests.py
index a0a49e9..7fa994a 100644
--- a/plone/app/upgrade/v31/tests.py
+++ b/plone/app/upgrade/v31/tests.py
@@ -94,6 +94,7 @@ def testReplaceLocalRoleManagerNoUF(self):
         # Delete the user folder
         replace_local_role_manager(self.portal)
 
+
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
 
     def testBaseUpgrade(self):
diff --git a/plone/app/upgrade/v32/tests.py b/plone/app/upgrade/v32/tests.py
index 5cf445a..02a2a06 100644
--- a/plone/app/upgrade/v32/tests.py
+++ b/plone/app/upgrade/v32/tests.py
@@ -3,6 +3,7 @@
 from plone.app.upgrade.utils import version_match
 from plone.app.upgrade.v32.betas import three1_beta1
 
+
 class TestMigrations_v3_2(MigrationTest):
 
     def afterSetUp(self):
@@ -24,7 +25,8 @@ def testIterateInstalledButActionMissing(self):
         self.actions.object_buttons.manage_delObjects(['iterate_checkin'])
         three1_beta1(self.portal)
         self.assertFalse('iterate_checkin' in
-                    self.actions.object_buttons.objectIds())
+                         self.actions.object_buttons.objectIds())
+
 
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
 
diff --git a/plone/app/upgrade/v33/__init__.py b/plone/app/upgrade/v33/__init__.py
index cc80093..baed573 100644
--- a/plone/app/upgrade/v33/__init__.py
+++ b/plone/app/upgrade/v33/__init__.py
@@ -1,16 +1,19 @@
 from Products.CMFCore.utils import getToolByName
 from plone.app.upgrade.utils import loadMigrationProfile
 
+
 def three2_three3(portal):
     """3.2.1 -> 3.3a1
     """
     loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.2.1-3.3a1')
     maybeUpdateLinkView(portal)
 
+
 def three3_rc3_three3_rc4(portal):
-    loadMigrationProfile(portal,'profile-plone.app.upgrade.v33:3.3rc3-3.3')
+    loadMigrationProfile(portal, 'profile-plone.app.upgrade.v33:3.3rc3-3.3')
     cookCSSRegistries(portal)
 
+
 def maybeUpdateLinkView(portal):
     ttool = getToolByName(portal, 'portal_types')
     link_fti = ttool.Link
@@ -19,6 +22,7 @@ def maybeUpdateLinkView(portal):
         link_fti.default_view = 'link_redirect_view'
         link_fti.immediate_view = 'link_redirect_view'
 
+
 def cookCSSRegistries(portal):
     csstool = getToolByName(portal, 'portal_css')
     for resource in csstool.resources:
diff --git a/plone/app/upgrade/v33/tests.py b/plone/app/upgrade/v33/tests.py
index 3c846cd..bd9de99 100644
--- a/plone/app/upgrade/v33/tests.py
+++ b/plone/app/upgrade/v33/tests.py
@@ -19,7 +19,7 @@ def testRedirectLinksProperty(self):
         del self.properties.site_properties.redirect_links
         self._upgrade()
         self.assertEqual(True,
-            self.properties.site_properties.getProperty('redirect_links'))
+                         self.properties.site_properties.getProperty('redirect_links'))
 
     def testLinkDefaultView(self):
         self.types.Link.default_view = 'link_view'
@@ -40,6 +40,7 @@ def testCustomizedLinkDefaultView(self):
         self.assertEqual(self.types.Link.immediate_view, 'foobar')
         self.assertEqual(self.types.Link.view_methods, ('foobar',))
 
+
 class TestFunctionalMigrations(FunctionalUpgradeTestCase):
 
     def testBaseUpgrade(self):
@@ -77,9 +78,9 @@ def testFolderUpgrade(self):
         for id in ids:
             obj = oldsite[id]
             self.assertTrue(IOrderableFolder.providedBy(obj),
-                '%s not orderable?' % id)
+                            '%s not orderable?' % id)
             self.assertEqual(obj._ordering, 'unordered',
-                '%s has no `_ordering`?' % id)
+                             '%s has no `_ordering`?' % id)
             self.assertEqual(obj.portal_type, 'Folder')
             self.assertEqual(obj.Type(), 'Folder')
             brain, = oldsite.portal_catalog(getId=id)   # asserts only one
diff --git a/plone/app/upgrade/v40/__init__.py b/plone/app/upgrade/v40/__init__.py
index b5a5c30..fafec79 100644
--- a/plone/app/upgrade/v40/__init__.py
+++ b/plone/app/upgrade/v40/__init__.py
@@ -1,2 +1,2 @@
 import alphas
-import betas
\ No newline at end of file
+import betas
diff --git a/plone/app/upgrade/v40/alphas.py b/plone/app/upgrade/v40/alphas.py
index a43fbd7..e98f8b0 100644
--- a/plone/app/upgrade/v40/alphas.py
+++ b/plone/app/upgrade/v40/alphas.py
@@ -86,13 +86,14 @@ def threeX_alpha1(context):
     # Install packages that are needed for Plone 4,
     # but don't break on Plone 5 where they are gone
     for profile in ('archetypes.referencebrowserwidget:default',
-            'plonetheme.sunburst:default',
-            'Products.TinyMCE:TinyMCE'):
+                    'plonetheme.sunburst:default',
+                    'Products.TinyMCE:TinyMCE'):
         try:
             stool.runAllImportStepsFromProfile('profile-' + profile)
         except KeyError:
             pass
 
+
 def restoreTheme(context):
     skins = getToolByName(context, 'portal_skins')
     portal = getToolByName(context, 'portal_url').getPortalObject()
@@ -101,22 +102,25 @@ def restoreTheme(context):
     if old_default_skin == 'Plone Default':
         v_storage = getUtility(IViewletSettingsStorage)
         uncustomized_layers = ('custom,tinymce,referencebrowser,LanguageTool,cmfeditions_views,'
-                              'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
-                              'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
-                              'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
-                              'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
-                              'plone_images,plone_content,plone_login,plone_deprecated,'
-                              'plone_3rdParty,cmf_legacy')
+                               'CMFEditions,kupu_plone,kupu,kupu_tests,archetypes,archetypes_kss,'
+                               'mimetypes_icons,plone_kss,ATContentTypes,PasswordReset,'
+                               'plone_ecmascript,plone_wysiwyg,plone_prefs,plone_templates,'
+                               'classic_styles,plone_form_scripts,plone_scripts,plone_forms,'
+                               'plone_images,plone_content,plone_login,plone_deprecated,'
+                               'plone_3rdParty,cmf_legacy')
         if skins.selections.get('Plone Default') == uncustomized_layers:
             # if the old theme's layers hadn't been mucked with, we can just
             # use Plone Classic Theme
             old_default_skin = 'Plone Classic Theme'
         else:
             # otherwise, copy Plone Default to a new theme
-            skins.selections['Old Plone 3 Custom Theme'] = skins.selections.get('Plone Default')
+            skins.selections['Old Plone 3 Custom Theme'] = skins.selections.get(
+                'Plone Default')
             # copy the viewlet order
-            v_storage._order['Old Plone 3 Custom Theme'] = dict(v_storage._order.get('Plone Default', {}))
-            v_storage._hidden['Old Plone 3 Custom Theme'] = dict(v_storage._hidden.get('Plone Default', {}))
+            v_storage._order['Old Plone 3 Custom Theme'] = dict(
+                v_storage._order.get('Plone Default', {}))
+            v_storage._hidden['Old Plone 3 Custom Theme'] = dict(
+                v_storage._hidden.get('Plone Default', {}))
 
             old_default_skin = 'Old Plone 3 Custom Theme'
 
@@ -188,7 +192,7 @@ def migrateActionIcons(context):
         prefix = ''
 
         if (cat not in _KNOWN_ACTION_ICONS.keys() or
-            ident not in _KNOWN_ACTION_ICONS[cat]):
+                ident not in _KNOWN_ACTION_ICONS[cat]):
             continue
 
         prefix = ''
@@ -208,7 +212,7 @@ def migrateActionIcons(context):
         elif cat == 'controlpanel':
             # control panel tool
             action_infos = [a for a in cptool.listActions()
-                              if a.getId() == ident]
+                            if a.getId() == ident]
             if len(action_infos):
                 if not action_infos[0].getIconExpression():
                     action_infos[0].setIconExpression('%s%s' % (prefix, expr))
@@ -238,10 +242,10 @@ def changeWorkflowActorVariableExpression(context):
         actor_var = wf.variables._getOb('actor', None)
         if actor_var is None:
             continue
-        actor_var.setProperties(description = actor_var.description,
-                                default_expr = 'user/getId',
-                                for_status = 1,
-                                update_always = 1)
+        actor_var.setProperties(description=actor_var.description,
+                                default_expr='user/getId',
+                                for_status=1,
+                                update_always=1)
     logger.info('Updated workflow actor variable expression.')
 
 
@@ -253,8 +257,8 @@ def changeAuthenticatedResourcesCondition(context):
     resources = {
         'portal_css': ('member.css', ),
         'portal_javascripts': ('dropdown.js', 'table_sorter.js',
-            'calendar_formfield.js', 'calendarpopup.js', 'formUnload.js',
-            'formsubmithelpers.js', 'unlockOnFormUnload.js')}
+                               'calendar_formfield.js', 'calendarpopup.js', 'formUnload.js',
+                               'formsubmithelpers.js', 'unlockOnFormUnload.js')}
     ANON = ('not: portal/portal_membership/isAnonymousUser',
             'not:portal/portal_membership/isAnonymousUser', )
     for tool_id, resource_ids in resources.items():
@@ -408,15 +412,15 @@ def migrate_portlets_for_object(obj, path):
                 if IStaticPortlet.providedBy(portlet) and \
                         getattr(portlet, 'hide', False):
                     logger.info(
-                            'Found hidden static text portlet %s at %s' %
-                            (portlet_id, path))
+                        'Found hidden static text portlet %s at %s' %
+                        (portlet_id, path))
                     settings = IPortletAssignmentSettings(portlet)
                     settings['visible'] = False
 
     logger.info('Migrating static text portlets')
     portal = getToolByName(context, 'portal_url').getPortalObject()
     portal.ZopeFindAndApply(
-            portal, search_sub=True, apply_func=migrate_portlets_for_object)
+        portal, search_sub=True, apply_func=migrate_portlets_for_object)
     logger.info('Finished migrating static text portlets')
 
 
@@ -487,18 +491,21 @@ def renameJoinFormFields(context):
     sprop = getToolByName(context, 'portal_properties').site_properties
     if sprop.hasProperty('join_form_fields'):
         oldValue = list(sprop.getProperty('join_form_fields'))
-        # The 'groups' field no longer belongs in the user-facing registration form
+        # The 'groups' field no longer belongs in the user-facing registration
+        # form
         if 'groups' in oldValue:
             oldValue.remove('groups')
         if not sprop.hasProperty('user_registration_fields'):
-            sprop.manage_addProperty('user_registration_fields', oldValue, 'lines')
+            sprop.manage_addProperty(
+                'user_registration_fields', oldValue, 'lines')
         sprop.manage_delProperties(['join_form_fields'])
 
 
 def alpha2_alpha3(context):
     """4.0alpha2 -> 4.0alpha3
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4alpha2-4alpha3')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4alpha2-4alpha3')
 
 
 def updateLargeFolderType(context):
@@ -533,10 +540,12 @@ def addRecursiveGroupsPlugin(context):
         for p, id in existingPlugins:
             if IRecursiveGroupsPlugin.providedBy(p):
                 plugins.deactivatePlugin(IGroupsPlugin, id)
-                logger.warn('Found an existing Recursive Groups plugin, %s, in acl_users, deactivating.' % id)
+                logger.warn(
+                    'Found an existing Recursive Groups plugin, %s, in acl_users, deactivating.' % id)
 
     if not 'recursive_groups' in acl:
-        addRecursiveGroupsPlugin(acl, 'recursive_groups', "Recursive Groups Plugin")
+        addRecursiveGroupsPlugin(
+            acl, 'recursive_groups', "Recursive Groups Plugin")
 
 
 def cleanUpClassicThemeResources(context):
@@ -570,4 +579,5 @@ def migrateTypeIcons(context):
 def alpha4_alpha5(context):
     """4.0alpha4 -> 4.0alpha5
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4alpha4-4alpha5')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4alpha4-4alpha5')
diff --git a/plone/app/upgrade/v40/betas.py b/plone/app/upgrade/v40/betas.py
index 353cd2e..75bee1b 100644
--- a/plone/app/upgrade/v40/betas.py
+++ b/plone/app/upgrade/v40/betas.py
@@ -10,7 +10,8 @@
 
 def alpha5_beta1(context):
     """4.0alpha5 -> 4.0beta1"""
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4alpha5-4beta1')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4alpha5-4beta1')
 
 
 def repositionRecursiveGroupsPlugin(context):
@@ -20,14 +21,15 @@ def repositionRecursiveGroupsPlugin(context):
     plugins = acl.plugins
     existingGroupsPlugins = plugins.listPlugins(IGroupsPlugin)
     if 'recursive_groups' in [a[0] for a in existingGroupsPlugins]:
-        while plugins.getAllPlugins('IGroupsPlugin')['active'].index('recursive_groups') < len(existingGroupsPlugins)-1:
+        while plugins.getAllPlugins('IGroupsPlugin')['active'].index('recursive_groups') < len(existingGroupsPlugins) - 1:
             plugins.movePluginsDown(IGroupsPlugin, ['recursive_groups'])
 
 
 def beta1_beta2(context):
     """4.0beta1 -> 4.0beta2
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta1-4beta2')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta1-4beta2')
 
 
 def updateSafeHTMLConfig(context):
@@ -38,7 +40,8 @@ def updateSafeHTMLConfig(context):
     if kupu_tool is None:
         return
     list_conf = []
-    # Kupu sets its attributes on first use, rather than providing class level defaults.
+    # Kupu sets its attributes on first use, rather than providing class level
+    # defaults.
     if hasattr(kupu_tool.aq_base, 'style_whitelist'):
         styles = list(kupu_tool.style_whitelist)
         if 'padding-left' not in styles:
@@ -47,7 +50,8 @@ def updateSafeHTMLConfig(context):
     if hasattr(kupu_tool.aq_base, 'class_blacklist'):
         list_conf.append(('class_blacklist', kupu_tool.class_blacklist))
     if hasattr(kupu_tool.aq_base, 'html_exclusions'):
-        list_conf.append(('stripped_attributes', kupu_tool.get_stripped_attributes()))
+        list_conf.append(
+            ('stripped_attributes', kupu_tool.get_stripped_attributes()))
     for k, v in list_conf:
         tdata = transform._config[k]
         if tdata == v:
@@ -56,7 +60,8 @@ def updateSafeHTMLConfig(context):
             tdata.pop()
         tdata.extend(v)
     if hasattr(kupu_tool.aq_base, 'html_exclusions'):
-        ksc = dict((str(' '.join(k)), str(' '.join(v))) for k, v in kupu_tool.get_stripped_combinations())
+        ksc = dict((str(' '.join(k)), str(' '.join(v)))
+                   for k, v in kupu_tool.get_stripped_combinations())
         tsc = transform._config['stripped_combinations']
         if tsc != ksc:
             tsc.clear()
@@ -83,13 +88,15 @@ def updateIconMetadata(context):
 def beta2_beta3(context):
     """4.0beta2 -> 4.0beta3
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta2-4beta3')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta2-4beta3')
 
 
 def beta3_beta4(context):
     """4.0beta3 -> 4.0beta4
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta3-4beta4')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta3-4beta4')
 
     pprop = getToolByName(context, 'portal_properties')
     site_properties = pprop.site_properties
@@ -133,7 +140,8 @@ def convertToBlobs(context):
     from plone.app.blob.migrations import migrateATBlobFiles
     sprop = getToolByName(context, 'portal_properties').site_properties
     if sprop.hasProperty('enable_link_integrity_checks'):
-        ori_enable_link_integrity_checks = sprop.getProperty('enable_link_integrity_checks')
+        ori_enable_link_integrity_checks = sprop.getProperty(
+            'enable_link_integrity_checks')
         if ori_enable_link_integrity_checks:
             logger.info('Temporarily disabled link integrity checking')
             sprop.enable_link_integrity_checks = False
@@ -157,7 +165,8 @@ def convertToBlobs(context):
 def beta4_beta5(context):
     """4.0beta4 -> 4.0beta5
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v40:4beta4-4beta5')
+    loadMigrationProfile(
+        context, 'profile-plone.app.upgrade.v40:4beta4-4beta5')
 
 
 def beta5_rc1(context):
diff --git a/plone/app/upgrade/v40/tests.py b/plone/app/upgrade/v40/tests.py
index 4ad4651..2a5b836 100644
--- a/plone/app/upgrade/v40/tests.py
+++ b/plone/app/upgrade/v40/tests.py
@@ -45,9 +45,9 @@ class FakeSecureMailHost(object):
     title = 'Fake MailHost'
     smtp_host = 'smtp.example.com'
     smtp_port = 587
-    smtp_userid='me'
-    smtp_pass='secret'
-    smtp_notls=False
+    smtp_userid = 'me'
+    smtp_pass = 'secret'
+    smtp_notls = False
 
     def manage_fixupOwnershipAfterAdd(self):
         pass
@@ -82,29 +82,29 @@ def testMigrateActionIcons(self):
             action_id='test_id',
             icon_expr='test.gif',
             title='Test my icon',
-            )
+        )
         self.aitool.addActionIcon(
             category='object_buttons',
             action_id='test2_id',
             icon_expr='python:context.getIcon()',
             title='Test my second icon',
-            )
+        )
         test_action = Action('test_id',
-            title='Test me',
-            description='',
-            url_expr='',
-            icon_expr='',
-            available_expr='',
-            permissions=('View', ),
-            visible = True)
+                             title='Test me',
+                             description='',
+                             url_expr='',
+                             icon_expr='',
+                             available_expr='',
+                             permissions=('View', ),
+                             visible=True)
         test2_action = Action('test2_id',
-            title='Test me too',
-            description='',
-            url_expr='',
-            icon_expr='',
-            available_expr='',
-            permissions=('View', ),
-            visible = True)
+                              title='Test me too',
+                              description='',
+                              url_expr='',
+                              icon_expr='',
+                              available_expr='',
+                              permissions=('View', ),
+                              visible=True)
 
         object_buttons = self.atool.object_buttons
         if getattr(object_buttons, 'test_id', None) is None:
@@ -132,7 +132,7 @@ def testMigrateControlPanelActionIcons(self):
             action_id='test_id',
             icon_expr='test.gif',
             title='Test my icon',
-            )
+        )
 
         self.cptool.registerConfiglet(
             id='test_id',
@@ -143,7 +143,7 @@ def testMigrateControlPanelActionIcons(self):
             visible=True,
             appId='',
             icon_expr='',
-            )
+        )
 
         action = self.cptool.getActionObject('Plone/test_id')
         self.assertEqual(action.getIconExpression(), '')
@@ -178,7 +178,7 @@ def testMigrateTypeIcons(self):
                          "string:${portal_url}/document_icon.gif")
         self.assertTrue(hasattr(tt.Document, 'icon_expr_object'))
 
-        #Don't upgrade if there is already an icon_expr.
+        # Don't upgrade if there is already an icon_expr.
         tt.Document.icon_expr = "string:${portal_url}/document_icon.png"
         tt.Document.content_icon = 'document_icon.gif'
         migrateTypeIcons(self.portal)
@@ -190,7 +190,7 @@ def testPngContentIcons(self):
         tt.Document.icon_expr = "string:${portal_url}/document_icon.gif"
         loadMigrationProfile(self.portal, self.profile, ('typeinfo', ))
         self.assertEqual(tt.Document.icon_expr,
-            "string:${portal_url}/document_icon.png")
+                         "string:${portal_url}/document_icon.png")
 
     def testAddRAMCache(self):
         # Test it twice
@@ -323,7 +323,7 @@ def testReplaceSecureMailHost(self):
         self.assertEqual(new_mh.smtp_port, 587)
         self.assertEqual(new_mh.smtp_uid, 'me')
         self.assertEqual(new_mh.smtp_pwd, 'secret')
-        #Force TLS is always false, because SMH has no equivalent option
+        # Force TLS is always false, because SMH has no equivalent option
         self.assertEqual(new_mh.force_tls, False)
 
     def testFolderMigration(self):
@@ -350,10 +350,10 @@ class HiddenAssignment(static.Assignment):
         folder = self.portal['statictest']
 
         manager = getUtility(
-                IPortletManager, name='plone.rightcolumn',
-                context=folder)
+            IPortletManager, name='plone.rightcolumn',
+            context=folder)
         assignments = getMultiAdapter(
-                (folder, manager), IPortletAssignmentMapping)
+            (folder, manager), IPortletAssignmentMapping)
         hidden_portlet = HiddenAssignment()
         visible_portlet = static.Assignment()
         assignments['hidden'] = hidden_portlet
@@ -362,12 +362,11 @@ class HiddenAssignment(static.Assignment):
         migrateStaticTextPortlets(self.portal)
 
         self.assertFalse(
-                IPortletAssignmentSettings(hidden_portlet).get(
-                        'visible', True))
+            IPortletAssignmentSettings(hidden_portlet).get(
+                'visible', True))
         self.assertTrue(
-                IPortletAssignmentSettings(visible_portlet).get(
-                        'visible', True))
-
+            IPortletAssignmentSettings(visible_portlet).get(
+                'visible', True))
 
 
 class TestMigrations_v4_0alpha2(MigrationTest):
@@ -399,7 +398,7 @@ def testJoinActionURL(self):
         self.portal.portal_actions.user.join.url_expr = 'foo'
         loadMigrationProfile(self.portal, self.profile, ('actions', ))
         self.assertEqual(self.portal.portal_actions.user.join.url_expr,
-            'string:${globals_view/navigationRootUrl}/@@register')
+                         'string:${globals_view/navigationRootUrl}/@@register')
 
 
 class TestMigrations_v4_0alpha5(MigrationTest):
@@ -454,7 +453,7 @@ def testClassicThemeResourcesCleanUp(self):
         qi = getToolByName(portal, 'portal_quickinstaller')
         qi.installProduct('plonetheme.classic')
         classictheme = qi['plonetheme.classic']
-        classictheme.resources_css = ['something'] # add a random resource
+        classictheme.resources_css = ['something']  # add a random resource
         cleanUpClassicThemeResources(portal)
         self.assertEqual(classictheme.resources_css, [])
 
@@ -464,11 +463,11 @@ def testGetObjPositionInParentIndex(self):
         catalog.delIndex('getObjPositionInParent')
         catalog.addIndex('getObjPositionInParent', 'FieldIndex')
         self.assertFalse(isinstance(catalog.Indexes['getObjPositionInParent'],
-            GopipIndex))
+                                    GopipIndex))
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue('getObjPositionInParent' in catalog.indexes())
         self.assertTrue(isinstance(catalog.Indexes['getObjPositionInParent'],
-            GopipIndex))
+                                   GopipIndex))
 
     def testGetEventTypeIndex(self):
         catalog = self.portal.portal_catalog
@@ -574,16 +573,16 @@ def testRemoveLargePloneFolder(self):
             removeLargePloneFolder(self.portal)
             self.assertFalse('Large Plone Folder' in self.portal.portal_types)
             self.assertFalse('Large Plone Folder' in
-                        temp_folder_fti.allowed_content_types)
+                             temp_folder_fti.allowed_content_types)
             self.assertTrue('Folder' in temp_folder_fti.allowed_content_types)
             self.assertFalse('Large Plone Folder' in ftool.getFactoryTypes())
             self.assertTrue('Folder' in ftool.getFactoryTypes())
             self.assertFalse('Large Plone Folder' in
-                        nav_props.parentMetaTypesNotToQuery)
+                             nav_props.parentMetaTypesNotToQuery)
             self.assertTrue('TempFolder' in
                             nav_props.parentMetaTypesNotToQuery)
             self.assertFalse('Large Plone Folder' in
-                        site_props.typesLinkToFolderContentsInFC)
+                             site_props.typesLinkToFolderContentsInFC)
             self.assertTrue('Folder' in
                             site_props.typesLinkToFolderContentsInFC)
             # sleep to avoid a GS log filename collision :-o
@@ -609,6 +608,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4rc1-4final'
@@ -618,6 +618,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_1(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0-4.0.1'
@@ -627,6 +628,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_2(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.1-4.0.2'
@@ -636,6 +638,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_3(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.2-4.0.3'
@@ -645,6 +648,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_4(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.3-4.0.4'
@@ -654,6 +658,7 @@ def testProfile(self):
         loadMigrationProfile(self.portal, self.profile)
         self.assertTrue(True)
 
+
 class TestMigrations_v4_0_5(MigrationTest):
 
     profile = 'profile-plone.app.upgrade.v40:4.0.4-4.0.5'
diff --git a/plone/app/upgrade/v41/__init__.py b/plone/app/upgrade/v41/__init__.py
index e72cf90..cb55214 100644
--- a/plone/app/upgrade/v41/__init__.py
+++ b/plone/app/upgrade/v41/__init__.py
@@ -1,3 +1,3 @@
 import alphas
 import betas
-import final
\ No newline at end of file
+import final
diff --git a/plone/app/upgrade/v41/alphas.py b/plone/app/upgrade/v41/alphas.py
index 87fb61a..b641cbe 100644
--- a/plone/app/upgrade/v41/alphas.py
+++ b/plone/app/upgrade/v41/alphas.py
@@ -25,11 +25,12 @@
 def to41alpha1(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v41:to41alpha1')
 
+
 def add_siteadmin_role(context):
     portal = getToolByName(context, 'portal_url').getPortalObject()
 
     # add the role to the site
-    immediate_roles = list( getattr(portal, '__ac_roles__', []) )
+    immediate_roles = list(getattr(portal, '__ac_roles__', []))
     if 'Site Administrator' not in immediate_roles:
         immediate_roles.append('Site Administrator')
         immediate_roles.sort()
@@ -39,7 +40,8 @@ def add_siteadmin_role(context):
     uf = getToolByName(context, 'acl_users')
     gtool = getToolByName(context, 'portal_groups')
     if not uf.searchGroups(id='Site Administrators'):
-        gtool.addGroup('Site Administrators', title='Site Administrators', roles=['Site Administrator'])
+        gtool.addGroup('Site Administrators', title='Site Administrators', roles=[
+                       'Site Administrator'])
 
     # update rolemap:
     # add Site Administrator role to permissions that have the Manager role,
@@ -68,16 +70,16 @@ def add_siteadmin_role(context):
         'WebDAV Lock items',
         'WebDAV Unlock items',
         'WebDAV access',
-        ])
+    ])
     if HAS_KUPU:
         extra_permissions.update([
-        'Kupu: Manage libraries',
-        'Kupu: Query libraries',
+            'Kupu: Manage libraries',
+            'Kupu: Query libraries',
         ])
     exclude_permissions = set([
         'Manage portal',
         'View management screens',
-        ])
+    ])
     for permission_info in permissions:
         if permission_info['name'] in exclude_permissions:
             continue
@@ -92,7 +94,7 @@ def add_siteadmin_role(context):
                                      roles,
                                      permission_info['acquire'])
     for permission_id in extra_permissions:
-        portal.manage_permission(permission_id, ['Site Administrator',], True)
+        portal.manage_permission(permission_id, ['Site Administrator', ], True)
 
     # update workflows:
     # add Site Administrator role where Manager already is;
@@ -107,12 +109,15 @@ def add_siteadmin_role(context):
                 if 'Manager' in roles:
                     new_roles = list(roles)
                     new_roles.append('Site Administrator')
-                    state.setPermission(permission_id, isinstance(roles, list), new_roles)
+                    state.setPermission(
+                        permission_id, isinstance(roles, list), new_roles)
+
 
 def update_role_mappings(context):
     wtool = getToolByName(context, 'portal_workflow')
     wtool.updateRoleMappings()
 
+
 def update_controlpanel_permissions(context):
     cptool = getToolByName(context, 'portal_controlpanel')
 
@@ -139,6 +144,7 @@ def update_controlpanel_permissions(context):
         if action.id in new_permissions:
             action.permissions = (new_permissions[action.id], )
 
+
 def install_outputfilters(context):
     qi = getToolByName(context, 'portal_quickinstaller')
     if qi.isProductInstallable('plone.outputfilters'):
diff --git a/plone/app/upgrade/v41/betas.py b/plone/app/upgrade/v41/betas.py
index 109953f..946608a 100644
--- a/plone/app/upgrade/v41/betas.py
+++ b/plone/app/upgrade/v41/betas.py
@@ -16,7 +16,7 @@
 def optimize_rangeindex_floor_ceiling(index):
     # respect the new ceiling and floor values
     logger.info('Optimizing range index `%s` to respect floor and ceiling '
-        'dates' % index.getId())
+                'dates' % index.getId())
     ceiling_value = index.ceiling_value
     floor_value = index.floor_value
 
@@ -97,7 +97,8 @@ def fix_uuids_topic_criteria(context):
     search = catalog.unrestrictedSearchResults
     for brain in search(Type='Collection'):
         obj = brain.getObject()
-        crits = [x for x in obj.contentValues() if x.getId().startswith('crit__')]
+        crits = [x for x in obj.contentValues(
+        ) if x.getId().startswith('crit__')]
         for crit in crits:
             if getattr(crit, '_plone.uuid', None) is None:
                 notify(ObjectCreatedEvent(crit))
@@ -133,5 +134,6 @@ def to41rc4(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v41:to41rc4')
     fix_uuids_topic_criteria(context)
 
+
 def to41final(context):
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v41:to41final')
diff --git a/plone/app/upgrade/v41/tests.py b/plone/app/upgrade/v41/tests.py
index 4570a4c..6792b88 100644
--- a/plone/app/upgrade/v41/tests.py
+++ b/plone/app/upgrade/v41/tests.py
@@ -10,8 +10,8 @@ def test_fixOkapiIndexes(self):
         catalog = ZCatalog('catalog')
         catalog.lexicon = PLexicon('lexicon')
         catalog.addIndex('test',
-            ZCTextIndex('test', index_factory=OkapiIndex,
-                        caller=catalog, lexicon_id='lexicon'))
+                         ZCTextIndex('test', index_factory=OkapiIndex,
+                                     caller=catalog, lexicon_id='lexicon'))
         catalog.Indexes['test'].index._totaldoclen = -1000
 
         from plone.app.upgrade.v41.final import fixOkapiIndexes
diff --git a/plone/app/upgrade/v42/__init__.py b/plone/app/upgrade/v42/__init__.py
index e72cf90..cb55214 100644
--- a/plone/app/upgrade/v42/__init__.py
+++ b/plone/app/upgrade/v42/__init__.py
@@ -1,3 +1,3 @@
 import alphas
 import betas
-import final
\ No newline at end of file
+import final
diff --git a/plone/app/upgrade/v42/betas.py b/plone/app/upgrade/v42/betas.py
index 5645643..61efd5b 100644
--- a/plone/app/upgrade/v42/betas.py
+++ b/plone/app/upgrade/v42/betas.py
@@ -93,4 +93,4 @@ def to42rc1_member_dashboard(context):
 def to42rc2(context):
     """4.2rc1 -> 4.2rc2
     """
-    loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to42rc2')
\ No newline at end of file
+    loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to42rc2')
diff --git a/plone/app/upgrade/v42/final.py b/plone/app/upgrade/v42/final.py
index 5320204..b8a6af3 100644
--- a/plone/app/upgrade/v42/final.py
+++ b/plone/app/upgrade/v42/final.py
@@ -28,21 +28,25 @@ def to421(context):
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to421')
 
+
 def to422(context):
     """4.2.1 -> 4.2.2
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to422')
 
+
 def to423(context):
     """4.2.2 -> 4.2.3
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to423')
 
+
 def to424(context):
     """4.2.3 -> 4.2.4
     """
     loadMigrationProfile(context, 'profile-plone.app.upgrade.v42:to424')
 
+
 def to425(context):
     """4.2.4 -> 4.2.5
     """
diff --git a/plone/app/upgrade/v43/__init__.py b/plone/app/upgrade/v43/__init__.py
index 3a54648..b40f1d8 100644
--- a/plone/app/upgrade/v43/__init__.py
+++ b/plone/app/upgrade/v43/__init__.py
@@ -1 +1 @@
-import alphas
\ No newline at end of file
+import alphas
diff --git a/plone/app/upgrade/v43/alphas.py b/plone/app/upgrade/v43/alphas.py
index 7aadde6..eddbc97 100644
--- a/plone/app/upgrade/v43/alphas.py
+++ b/plone/app/upgrade/v43/alphas.py
@@ -60,13 +60,14 @@ def upgradeToI18NCaseNormalizer(context):
     for index in catalog.Indexes.objectValues():
         if IZCTextIndex.providedBy(index):
             index_id = index.getId()
-            logger.info("Reindex %s index with I18N Case Normalizer",\
+            logger.info("Reindex %s index with I18N Case Normalizer",
                         index_id)
             catalog.manage_clearIndex([index_id])
-            catalog.reindexIndex(index_id,\
+            catalog.reindexIndex(index_id,
                                  aq_get(context, 'REQUEST', None))
         pass
 
+
 def upgradeTinyMCE(context):
     """ Upgrade TinyMCE WYSIWYG Editor to jQuery based version 1.3
 
@@ -146,7 +147,7 @@ def getDexterityFolderTypes():
 
         portal_types = getToolByName(portal, 'portal_types')
         types = [fti for fti in portal_types.listTypeInfo() if
-                    IDexterityFTI.providedBy(fti)]
+                 IDexterityFTI.providedBy(fti)]
 
         ftypes = set([])
         for _type in types:
diff --git a/plone/app/upgrade/v43/tests.py b/plone/app/upgrade/v43/tests.py
index 843360a..3284c6a 100644
--- a/plone/app/upgrade/v43/tests.py
+++ b/plone/app/upgrade/v43/tests.py
@@ -31,7 +31,8 @@ def testAddDisplayPublicationDateInBylineProperty(self):
             return
         pprop = getToolByName(self.portal, 'portal_properties')
         self.assertEqual(
-            pprop.site_properties.getProperty('displayPublicationDateInByline'),
+            pprop.site_properties.getProperty(
+                'displayPublicationDateInByline'),
             False)
 
     def testUpgradeToI18NCaseNormalizer(self):
@@ -39,7 +40,8 @@ def testUpgradeToI18NCaseNormalizer(self):
         ctool = self.portal.portal_catalog
         ctool.plone_lexicon._pipeline[1] == (Splitter(), CaseNormalizer())
         alphas.upgradeToI18NCaseNormalizer(self.portal.portal_setup)
-        self.assertEqual(ctool.plone_lexicon._pipeline[1].__class__.__name__, 'I18NNormalizer')
+        self.assertEqual(ctool.plone_lexicon._pipeline[
+                         1].__class__.__name__, 'I18NNormalizer')
 
     def testUpgradeTinyMCE(self):
         # skip test in new Plones that don't install tinymce to begin with
@@ -63,9 +65,9 @@ def testUpgradeTinyMCE(self):
         request = self.app.REQUEST
         plone_view = queryMultiAdapter((self.portal, request), name="plone")
         manager = queryMultiAdapter(
-                    (self.portal, request, plone_view), IContentProvider, 'plone.htmlhead')
+            (self.portal, request, plone_view), IContentProvider, 'plone.htmlhead')
         viewlets = getAdapters(
-                (manager.context, manager.request, manager.__parent__, manager), IViewlet)
+            (manager.context, manager.request, manager.__parent__, manager), IViewlet)
         self.assertFalse(u'tinymce.configuration' in dict(viewlets))
 
     def testInstallThemingNotPreviouslyInstalled(self):
@@ -84,7 +86,8 @@ def testInstallThemingPreviouslyInstalled(self):
         from plone.registry.interfaces import IRegistry
         from zope.component import getUtility
 
-        self.portal.portal_setup.runAllImportStepsFromProfile('profile-plone.app.theming:default')
+        self.portal.portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.theming:default')
         alphas.upgradePloneAppTheming(self.portal.portal_setup)
 
         registry = getUtility(IRegistry)
@@ -123,7 +126,8 @@ def testReindexNumericalTitle(self):
         )
 
         # Only the numerical title got reindexed
-        portal.portal_setup.runAllImportStepsFromProfile('profile-plone.app.theming:default')
+        portal.portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.theming:default')
         alphas.reindex_sortable_title(portal.portal_setup)
         self.assertEqual(
             catalog(id=portal['num-title'].id)[0].Title,
@@ -140,7 +144,8 @@ class TestMigrations_v4_3final_to4308(MigrationTest):
     def testAddDefaultPlonePasswordPolicy(self):
         # this add the 'Default Plone Password Policy' to Plone's acl_users
         portal = self.portal
-        # make sure the 'Default Plone Password Policy' does not exist in acl_users
+        # make sure the 'Default Plone Password Policy' does not exist in
+        # acl_users
         portal.acl_users.manage_delObjects(ids=['password_policy', ])
         self.assertFalse('password_policy' in portal.acl_users.objectIds())
         # find the relevant upgrade step and execute it
diff --git a/setup.py b/setup.py
index e00963e..8299c78 100644
--- a/setup.py
+++ b/setup.py
@@ -30,58 +30,58 @@
     include_package_data=True,
     zip_safe=False,
     extras_require=dict(
-      test=[
-          'mock',
-          'Products.CMFPlacefulWorkflow',
-          'Products.CMFQuickInstallerTool',
-          'plone.contentrules',
-          'plone.app.i18n',
-          'plone.app.iterate',
-          'plone.app.openid',
-          'plone.app.redirector',
-          'plone.app.viewletmanager',
-          'plone.app.testing',
-          'plone.app.theming',
-      ]
+        test=[
+            'mock',
+            'Products.CMFPlacefulWorkflow',
+            'Products.CMFQuickInstallerTool',
+            'plone.contentrules',
+            'plone.app.i18n',
+            'plone.app.iterate',
+            'plone.app.openid',
+            'plone.app.redirector',
+            'plone.app.viewletmanager',
+            'plone.app.testing',
+            'plone.app.theming',
+        ]
     ),
     install_requires=[
-      'setuptools',
-      'borg.localrole',
-      'five.localsitemanager',
-      'plone.portlets',
-      'plone.session',
-      'plone.app.folder',
-      'plone.app.portlets',
-      'transaction',
-      'zope.component',
-      'zope.interface',
-      'zope.location',
-      'zope.ramcache',
-      'zope.site',
-      'Acquisition',
-      'Products.CMFPlone',
-      'Products.Archetypes',
-      'Products.contentmigration',
-      'Products.CMFCore',
-      'Products.CMFDiffTool',
-      'Products.CMFEditions',
-      'Products.CMFFormController',
-      'Products.CMFQuickInstallerTool',
-      'Products.CMFUid',
-      'Products.DCWorkflow',
-      'Products.GenericSetup>=1.8.1',
-      'Products.MimetypesRegistry',
-      # 'Products.PloneLanguageTool',
-      'Products.PlonePAS',
-      'Products.PluggableAuthService',
-      'Products.PortalTransforms',
-      'Products.ResourceRegistries',
-      'Products.SecureMailHost',  # For migration only, when can we remove this?
-      'Products.ZCatalog >= 2.13.4',
-      'Zope2',
+        'setuptools',
+        'borg.localrole',
+        'five.localsitemanager',
+        'plone.portlets',
+        'plone.session',
+        'plone.app.folder',
+        'plone.app.portlets',
+        'transaction',
+        'zope.component',
+        'zope.interface',
+        'zope.location',
+        'zope.ramcache',
+        'zope.site',
+        'Acquisition',
+        'Products.CMFPlone',
+        'Products.Archetypes',
+        'Products.contentmigration',
+        'Products.CMFCore',
+        'Products.CMFDiffTool',
+        'Products.CMFEditions',
+        'Products.CMFFormController',
+        'Products.CMFQuickInstallerTool',
+        'Products.CMFUid',
+        'Products.DCWorkflow',
+        'Products.GenericSetup>=1.8.1',
+        'Products.MimetypesRegistry',
+        # 'Products.PloneLanguageTool',
+        'Products.PlonePAS',
+        'Products.PluggableAuthService',
+        'Products.PortalTransforms',
+        'Products.ResourceRegistries',
+        'Products.SecureMailHost',  # For migration only, when can we remove this?
+        'Products.ZCatalog >= 2.13.4',
+        'Zope2',
     ],
     entry_points="""
     [z3c.autoinclude.plugin]
     target = plone
     """,
-    )
+)


