Repository: icalendar


Branch: refs/heads/master
Date: 2017-06-20T13:57:55+02:00
Author: Christian Geier (geier) <geier@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/2e8311ba0a12f82b67f0ada1885cf31fdb651459

Reproduce #227

The issue here is that both VTIMEZONE subcomponents have the same
TZOFFSETFROM, TZOFFSETTO and DTSTART, but one is a DAYLIGHT and the
other is a STANDARD component. While this makes them pretty
useless and, if it is standard compliant, it probably shouldn't be.

Files changed:
A src/icalendar/tests/timezone_same_start_and_offset.ics
M src/icalendar/tests/test_timezoned.py

diff --git a/src/icalendar/tests/test_timezoned.py b/src/icalendar/tests/test_timezoned.py
index e93abfa..d09e85c 100644
--- a/src/icalendar/tests/test_timezoned.py
+++ b/src/icalendar/tests/test_timezoned.py
@@ -328,3 +328,13 @@ def test_same_start_date(self):
         cal = icalendar.Calendar.from_ical(data)
         d = cal.subcomponents[1]['DTSTART'].dt
         self.assertEqual(d.strftime('%c'), 'Fri Feb 24 12:00:00 2017')
+
+    def test_same_start_date_and_offset(self):
+        """testing if we can handle VTIMEZONEs whose different components
+        have the same DTSTARTs, TZOFFSETFROM, and TZOFFSETTO."""
+        directory = os.path.dirname(__file__)
+        with open(os.path.join(directory, 'timezone_same_start_and_offset.ics'), 'rb') as fp:
+            data = fp.read()
+        cal = icalendar.Calendar.from_ical(data)
+        d = cal.subcomponents[1]['DTSTART'].dt
+        self.assertEqual(d.strftime('%c'), 'Fri Feb 24 12:00:00 2017')
diff --git a/src/icalendar/tests/timezone_same_start_and_offset.ics b/src/icalendar/tests/timezone_same_start_and_offset.ics
new file mode 100644
index 0000000..0ec7ba0
--- /dev/null
+++ b/src/icalendar/tests/timezone_same_start_and_offset.ics
@@ -0,0 +1,23 @@
+BEGIN:VCALENDAR
+VERSION:2.0
+PRODID:Microsoft Exchange Server 2010
+BEGIN:VTIMEZONE
+TZID:Tokyo Standard Time
+BEGIN:STANDARD
+DTSTART:16010101T000000
+TZOFFSETFROM:+0900
+TZOFFSETTO:+0900
+END:STANDARD
+BEGIN:DAYLIGHT
+DTSTART:16010101T000000
+TZOFFSETFROM:+0900
+TZOFFSETTO:+0900
+END:DAYLIGHT
+END:VTIMEZONE
+BEGIN:VEVENT
+DTSTART;TZID="Tokyo Standard Time":20170224T120000
+DTEND;TZID="Tokyo Standard Time":20170224T123000
+UID:blafoobar
+SUMMARY:this is an event
+END:VEVENT
+END:VCALENDARD


Repository: icalendar


Branch: refs/heads/master
Date: 2017-06-20T13:58:26+02:00
Author: Christian Geier (geier) <geier@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/d445fcf87cf98c41c16de94f55ca2b613ae8b10a

Fix handling of non-unique VTIMEZONEs.

We should probably choose a better system for generating unique TZNAMEs.

Files changed:
M CHANGES.rst
M src/icalendar/cal.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e0fa29e..daffda5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,11 @@ Bug fixes:
 - added an assertion that VTIMEZONE sub-components' DTSTART must be of type
   DATETIME [geier]
 
+- Fix handling of VTIMEZONEs with subcomponents with the same DTSTARTs and
+  OFFSETs but which are of different types  [geier]
+
+- *add item here*
+
 
 3.11.4 (2017-05-10)
 -------------------
diff --git a/src/icalendar/cal.py b/src/icalendar/cal.py
index a5a08f5..e4dc350 100644
--- a/src/icalendar/cal.py
+++ b/src/icalendar/cal.py
@@ -572,6 +572,7 @@ def to_tz(self):
         zone = str(self['TZID'])
         transitions = []
         dst = {}
+        tznames = set()
         for component in self.walk():
             if type(component) == Timezone:
                 continue
@@ -587,6 +588,11 @@ def to_tz(self):
                     component['TZOFFSETFROM'].to_ical(),  # for whatever reason this is str/unicode
                     component['TZOFFSETTO'].to_ical(),  # for whatever reason this is str/unicode
                 )
+                # TODO better way of making sure tznames are unique
+                while tzname in tznames:
+                    tzname += '_1'
+                tznames.add(tzname)
+
             dst[tzname], component_transitions = self._extract_offsets(
                 component, tzname
             )


Repository: icalendar


Branch: refs/heads/master
Date: 2017-06-20T14:17:53+02:00
Author: Christian Geier (geier) <github@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/60048cee8581e0b3fa42c470629a0a026624ae93

Merge pull request #228 from geier/fix/227

Fix dealing with non unique VTIMEZONE components

Files changed:
A src/icalendar/tests/timezone_same_start_and_offset.ics
M CHANGES.rst
M src/icalendar/cal.py
M src/icalendar/tests/test_timezoned.py

diff --git a/CHANGES.rst b/CHANGES.rst
index e0fa29e..daffda5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,11 @@ Bug fixes:
 - added an assertion that VTIMEZONE sub-components' DTSTART must be of type
   DATETIME [geier]
 
+- Fix handling of VTIMEZONEs with subcomponents with the same DTSTARTs and
+  OFFSETs but which are of different types  [geier]
+
+- *add item here*
+
 
 3.11.4 (2017-05-10)
 -------------------
diff --git a/src/icalendar/cal.py b/src/icalendar/cal.py
index a5a08f5..e4dc350 100644
--- a/src/icalendar/cal.py
+++ b/src/icalendar/cal.py
@@ -572,6 +572,7 @@ def to_tz(self):
         zone = str(self['TZID'])
         transitions = []
         dst = {}
+        tznames = set()
         for component in self.walk():
             if type(component) == Timezone:
                 continue
@@ -587,6 +588,11 @@ def to_tz(self):
                     component['TZOFFSETFROM'].to_ical(),  # for whatever reason this is str/unicode
                     component['TZOFFSETTO'].to_ical(),  # for whatever reason this is str/unicode
                 )
+                # TODO better way of making sure tznames are unique
+                while tzname in tznames:
+                    tzname += '_1'
+                tznames.add(tzname)
+
             dst[tzname], component_transitions = self._extract_offsets(
                 component, tzname
             )
diff --git a/src/icalendar/tests/test_timezoned.py b/src/icalendar/tests/test_timezoned.py
index e93abfa..d09e85c 100644
--- a/src/icalendar/tests/test_timezoned.py
+++ b/src/icalendar/tests/test_timezoned.py
@@ -328,3 +328,13 @@ def test_same_start_date(self):
         cal = icalendar.Calendar.from_ical(data)
         d = cal.subcomponents[1]['DTSTART'].dt
         self.assertEqual(d.strftime('%c'), 'Fri Feb 24 12:00:00 2017')
+
+    def test_same_start_date_and_offset(self):
+        """testing if we can handle VTIMEZONEs whose different components
+        have the same DTSTARTs, TZOFFSETFROM, and TZOFFSETTO."""
+        directory = os.path.dirname(__file__)
+        with open(os.path.join(directory, 'timezone_same_start_and_offset.ics'), 'rb') as fp:
+            data = fp.read()
+        cal = icalendar.Calendar.from_ical(data)
+        d = cal.subcomponents[1]['DTSTART'].dt
+        self.assertEqual(d.strftime('%c'), 'Fri Feb 24 12:00:00 2017')
diff --git a/src/icalendar/tests/timezone_same_start_and_offset.ics b/src/icalendar/tests/timezone_same_start_and_offset.ics
new file mode 100644
index 0000000..0ec7ba0
--- /dev/null
+++ b/src/icalendar/tests/timezone_same_start_and_offset.ics
@@ -0,0 +1,23 @@
+BEGIN:VCALENDAR
+VERSION:2.0
+PRODID:Microsoft Exchange Server 2010
+BEGIN:VTIMEZONE
+TZID:Tokyo Standard Time
+BEGIN:STANDARD
+DTSTART:16010101T000000
+TZOFFSETFROM:+0900
+TZOFFSETTO:+0900
+END:STANDARD
+BEGIN:DAYLIGHT
+DTSTART:16010101T000000
+TZOFFSETFROM:+0900
+TZOFFSETTO:+0900
+END:DAYLIGHT
+END:VTIMEZONE
+BEGIN:VEVENT
+DTSTART;TZID="Tokyo Standard Time":20170224T120000
+DTEND;TZID="Tokyo Standard Time":20170224T123000
+UID:blafoobar
+SUMMARY:this is an event
+END:VEVENT
+END:VCALENDARD


