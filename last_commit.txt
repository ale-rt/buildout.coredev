Repository: plone.app.registry


Branch: refs/heads/master
Date: 2016-05-14T22:37:53+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.registry/commit/2015c478a7d0fae60bd39d675906ff7d309eda6e

Revert "Tests for choice schema constraints"

Files changed:
M plone/app/registry/tests/test_exportimport.py

diff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py
index 9dfd7d2..0799ffe 100644
--- a/plone/app/registry/tests/test_exportimport.py
+++ b/plone/app/registry/tests/test_exportimport.py
@@ -19,7 +19,6 @@
 from zope.component import provideUtility
 from zope.configuration import xmlconfig
 from zope.interface import alsoProvides
-from zope.schema.interfaces import WrongContainedType
 import unittest2 as unittest
 
 configuration = """\
@@ -988,138 +987,6 @@ def test_import_choice_field(self):
             None, self.registry['test.registry.field']
         )
 
-    def test_import_list_choice_field_vocabulary_usage(self):
-        xml = """\
-<registry>
-    <record name="test.registry.field">
-        <field type="plone.registry.field.List">
-            <title>Simple list of choices</title>
-            <value_type type="plone.registry.field.Choice">
-                <values>
-                  <element>Zero</element>
-                  <element>One</element>
-                </values>
-            </value_type>
-        </field>
-    </record>
-</registry>
-"""
-
-        self.registry.records['test.registry.field'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),
-                   value=u"Old value")
-
-        context = DummyImportContext(self.site, purge=False)
-        context._files = {'registry.xml': xml}
-
-        importRegistry(context)
-
-        self.assertEquals(1, len(self.registry.records))
-        self.failUnless(
-            isinstance(
-                self.registry.records['test.registry.field'].field,
-                field.List
-            )
-        )
-        self.assertEquals(
-            u"Simple list of choices",
-            self.registry.records['test.registry.field'].
-            field.title
-        )
-        self.assertEquals(
-            None, self.registry['test.registry.field']
-        )
-
-        self.registry['test.registry.field'] = [u'One']
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', u'Three']
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', object()]
-
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
-    def test_import_list_choice_field_vocabulary_usage_named(self):
-        xml = """\
-<registry>
-    <record name="test.registry.field">
-        <field type="plone.registry.field.List">
-            <title>Simple list of choices</title>
-            <value_type type="plone.registry.field.Choice">
-                <vocabulary>dummy.vocab</vocabulary>
-            </value_type>
-        </field>
-    </record>
-</registry>
-"""
-
-        from zope.schema.vocabulary import SimpleVocabulary
-
-        def dummy_vocab(context):
-            return SimpleVocabulary.fromValues([u'Zero', u'One'])
-
-        # This is how registration is done normally:
-        # from zope.schema.interfaces import IVocabularyFactory
-        #
-        # provideUtility(
-        #     provides=IVocabularyFactory,
-        #     component=dummy_vocab,
-        #     name='dummy.vocab',
-        # )
-
-        # However, within the standard test harness it needs to be
-        # registered into the default vocab registry.
-        from zope.schema.vocabulary import getVocabularyRegistry
-
-        vr = getVocabularyRegistry()
-        vr.register(u'dummy.vocab', dummy_vocab)
-
-        self.registry.records['test.registry.field'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),
-                   value=u"Old value")
-
-        context = DummyImportContext(self.site, purge=False)
-        context._files = {'registry.xml': xml}
-
-        importRegistry(context)
-
-        self.assertEquals(1, len(self.registry.records))
-        self.failUnless(
-            isinstance(
-                self.registry.records['test.registry.field'].field,
-                field.List
-            )
-        )
-        self.assertEquals(
-            u"Simple list of choices",
-            self.registry.records['test.registry.field'].
-            field.title
-        )
-        self.assertEquals(
-            None, self.registry['test.registry.field']
-        )
-
-        self.registry['test.registry.field'] = [u'One']
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', u'Three']
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', object()]
-
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
     def test_import_with_comments(self):
         xml = """\
 <registry>


Repository: plone.app.registry


Branch: refs/heads/master
Date: 2016-05-14T23:46:43+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.registry/commit/be0995e8e153928ba637df73820d344ff2403d21

Merge pull request #19 from plone/revert-18-plone_supermodel_pr_12

Revert "Tests for choice schema constraints"

Files changed:
M plone/app/registry/tests/test_exportimport.py

diff --git a/plone/app/registry/tests/test_exportimport.py b/plone/app/registry/tests/test_exportimport.py
index 9dfd7d2..0799ffe 100644
--- a/plone/app/registry/tests/test_exportimport.py
+++ b/plone/app/registry/tests/test_exportimport.py
@@ -19,7 +19,6 @@
 from zope.component import provideUtility
 from zope.configuration import xmlconfig
 from zope.interface import alsoProvides
-from zope.schema.interfaces import WrongContainedType
 import unittest2 as unittest
 
 configuration = """\
@@ -988,138 +987,6 @@ def test_import_choice_field(self):
             None, self.registry['test.registry.field']
         )
 
-    def test_import_list_choice_field_vocabulary_usage(self):
-        xml = """\
-<registry>
-    <record name="test.registry.field">
-        <field type="plone.registry.field.List">
-            <title>Simple list of choices</title>
-            <value_type type="plone.registry.field.Choice">
-                <values>
-                  <element>Zero</element>
-                  <element>One</element>
-                </values>
-            </value_type>
-        </field>
-    </record>
-</registry>
-"""
-
-        self.registry.records['test.registry.field'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),
-                   value=u"Old value")
-
-        context = DummyImportContext(self.site, purge=False)
-        context._files = {'registry.xml': xml}
-
-        importRegistry(context)
-
-        self.assertEquals(1, len(self.registry.records))
-        self.failUnless(
-            isinstance(
-                self.registry.records['test.registry.field'].field,
-                field.List
-            )
-        )
-        self.assertEquals(
-            u"Simple list of choices",
-            self.registry.records['test.registry.field'].
-            field.title
-        )
-        self.assertEquals(
-            None, self.registry['test.registry.field']
-        )
-
-        self.registry['test.registry.field'] = [u'One']
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', u'Three']
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', object()]
-
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
-    def test_import_list_choice_field_vocabulary_usage_named(self):
-        xml = """\
-<registry>
-    <record name="test.registry.field">
-        <field type="plone.registry.field.List">
-            <title>Simple list of choices</title>
-            <value_type type="plone.registry.field.Choice">
-                <vocabulary>dummy.vocab</vocabulary>
-            </value_type>
-        </field>
-    </record>
-</registry>
-"""
-
-        from zope.schema.vocabulary import SimpleVocabulary
-
-        def dummy_vocab(context):
-            return SimpleVocabulary.fromValues([u'Zero', u'One'])
-
-        # This is how registration is done normally:
-        # from zope.schema.interfaces import IVocabularyFactory
-        #
-        # provideUtility(
-        #     provides=IVocabularyFactory,
-        #     component=dummy_vocab,
-        #     name='dummy.vocab',
-        # )
-
-        # However, within the standard test harness it needs to be
-        # registered into the default vocab registry.
-        from zope.schema.vocabulary import getVocabularyRegistry
-
-        vr = getVocabularyRegistry()
-        vr.register(u'dummy.vocab', dummy_vocab)
-
-        self.registry.records['test.registry.field'] = \
-            Record(field.TextLine(title=u"Simple record", default=u"N/A"),
-                   value=u"Old value")
-
-        context = DummyImportContext(self.site, purge=False)
-        context._files = {'registry.xml': xml}
-
-        importRegistry(context)
-
-        self.assertEquals(1, len(self.registry.records))
-        self.failUnless(
-            isinstance(
-                self.registry.records['test.registry.field'].field,
-                field.List
-            )
-        )
-        self.assertEquals(
-            u"Simple list of choices",
-            self.registry.records['test.registry.field'].
-            field.title
-        )
-        self.assertEquals(
-            None, self.registry['test.registry.field']
-        )
-
-        self.registry['test.registry.field'] = [u'One']
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', u'Three']
-
-        with self.assertRaises(WrongContainedType):
-            self.registry['test.registry.field'] = [u'One', object()]
-
-        self.assertEquals(
-            [u'One'], self.registry['test.registry.field']
-        )
-
     def test_import_with_comments(self):
         xml = """\
 <registry>


