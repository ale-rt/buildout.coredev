Repository: mockup


Branch: refs/heads/2.1.x
Date: 2016-09-09T14:18:13+02:00
Author: vangheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/3f1b7413f07084a3602272672c6c4e378c187a41

provide selector option to markspeciallinks pattern

Files changed:
M CHANGES.rst
M mockup/patterns/markspeciallinks/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index c9b155e..43494d7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- provide selector option to markspeciallinks pattern
+  [vangheem]
 
 Bug fixes:
 
diff --git a/mockup/patterns/markspeciallinks/pattern.js b/mockup/patterns/markspeciallinks/pattern.js
index 6a0217f..fb990fa 100644
--- a/mockup/patterns/markspeciallinks/pattern.js
+++ b/mockup/patterns/markspeciallinks/pattern.js
@@ -3,6 +3,7 @@
  * Options:
  *    external_links_open_new_window(boolean): Open external links in a new window. (false)
  *    mark_special_links(boolean): Marks external or special protocl links with class. (true)
+ *    selector(string): Select an area of the page to enable this feature on (#main-container)
  *
  * Documentation:
  *   # General
@@ -90,7 +91,8 @@ define([
     parser: 'mockup',
     defaults: {
       external_links_open_new_window: false,
-      mark_special_links: true
+      mark_special_links: true,
+      selector: '#main-container'
     },
     init: function () {
       var self = this, $el = self.$el;
@@ -105,46 +107,49 @@ define([
           res;
 
       if (typeof self.options.external_links_open_new_window === 'string') {
-          elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
+        elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
       } else if (typeof self.options.external_links_open_new_window === 'boolean') {
-          elonw = self.options.external_links_open_new_window;
+        elonw = self.options.external_links_open_new_window;
       }
 
       if (typeof self.options.mark_special_links === 'string') {
-          msl = self.options.mark_special_links.toLowerCase() === 'true';
+        msl = self.options.mark_special_links.toLowerCase() === 'true';
       } else if (typeof self.options.mark_special_links === 'boolean') {
-          msl = self.options.mark_special_links;
+        msl = self.options.mark_special_links;
       }
 
       url = window.location.protocol + '//' + window.location.host;
       protocols = /^(mailto|ftp|news|irc|h323|sip|callto|https|feed|webcal)/;
       contentarea = $el;
+      if(self.options.selector){
+        contentarea = $(self.options.selector, contentarea);
+      }
 
       if (elonw) {
-          // all http links (without the link-plain class), not within this site
-          contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])')
-                     .attr('target', '_blank');
+        // all http links (without the link-plain class), not within this site
+        contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])').attr('target', '_blank');
       }
 
       if (msl) {
         // All links with an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-external span
         contentarea.find(
-            'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-            .before('<i class="glyphicon link-external"></i>');
+          'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+          .before('<i class="glyphicon link-external"></i>');
         // All links without an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-[protocol] span
         contentarea.find(
-            'a[href]:not([href^="http:"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-            .each(function() {
-                // those without a http link may have another interesting protocol
-                // wrap these in a link-[protocol] span
-                res = protocols.exec(this.href);
-                if (res) {
-                    var iconclass = 'glyphicon link-' + res[0];
-                    $(this).before('<i class="' + iconclass + '"></i>');
-                }
+          'a[href]:not([href^="http"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+          .each(function() {
+            // those without a http link may have another interesting protocol
+            // wrap these in a link-[protocol] span
+            var href = $(this).attr('href');
+            res = protocols.exec(href);
+            if(res) {
+              var iconclass = 'glyphicon link-' + res[0];
+              $(this).before('<i class="' + iconclass + '"></i>');
             }
+          }
         );
       }
     }


Repository: mockup


Branch: refs/heads/2.1.x
Date: 2016-10-22T09:32:02-04:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/c2e26b09f7f98b0865ea3e94b0d0615936031b6d

Merge pull request #708 from plone/special-links-container

provide selector option to markspeciallinks pattern(2.1.x)

Files changed:
M CHANGES.rst
M mockup/patterns/markspeciallinks/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index c9b155e..43494d7 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- provide selector option to markspeciallinks pattern
+  [vangheem]
 
 Bug fixes:
 
diff --git a/mockup/patterns/markspeciallinks/pattern.js b/mockup/patterns/markspeciallinks/pattern.js
index 6a0217f..fb990fa 100644
--- a/mockup/patterns/markspeciallinks/pattern.js
+++ b/mockup/patterns/markspeciallinks/pattern.js
@@ -3,6 +3,7 @@
  * Options:
  *    external_links_open_new_window(boolean): Open external links in a new window. (false)
  *    mark_special_links(boolean): Marks external or special protocl links with class. (true)
+ *    selector(string): Select an area of the page to enable this feature on (#main-container)
  *
  * Documentation:
  *   # General
@@ -90,7 +91,8 @@ define([
     parser: 'mockup',
     defaults: {
       external_links_open_new_window: false,
-      mark_special_links: true
+      mark_special_links: true,
+      selector: '#main-container'
     },
     init: function () {
       var self = this, $el = self.$el;
@@ -105,46 +107,49 @@ define([
           res;
 
       if (typeof self.options.external_links_open_new_window === 'string') {
-          elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
+        elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
       } else if (typeof self.options.external_links_open_new_window === 'boolean') {
-          elonw = self.options.external_links_open_new_window;
+        elonw = self.options.external_links_open_new_window;
       }
 
       if (typeof self.options.mark_special_links === 'string') {
-          msl = self.options.mark_special_links.toLowerCase() === 'true';
+        msl = self.options.mark_special_links.toLowerCase() === 'true';
       } else if (typeof self.options.mark_special_links === 'boolean') {
-          msl = self.options.mark_special_links;
+        msl = self.options.mark_special_links;
       }
 
       url = window.location.protocol + '//' + window.location.host;
       protocols = /^(mailto|ftp|news|irc|h323|sip|callto|https|feed|webcal)/;
       contentarea = $el;
+      if(self.options.selector){
+        contentarea = $(self.options.selector, contentarea);
+      }
 
       if (elonw) {
-          // all http links (without the link-plain class), not within this site
-          contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])')
-                     .attr('target', '_blank');
+        // all http links (without the link-plain class), not within this site
+        contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])').attr('target', '_blank');
       }
 
       if (msl) {
         // All links with an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-external span
         contentarea.find(
-            'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-            .before('<i class="glyphicon link-external"></i>');
+          'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+          .before('<i class="glyphicon link-external"></i>');
         // All links without an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-[protocol] span
         contentarea.find(
-            'a[href]:not([href^="http:"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-            .each(function() {
-                // those without a http link may have another interesting protocol
-                // wrap these in a link-[protocol] span
-                res = protocols.exec(this.href);
-                if (res) {
-                    var iconclass = 'glyphicon link-' + res[0];
-                    $(this).before('<i class="' + iconclass + '"></i>');
-                }
+          'a[href]:not([href^="http"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+          .each(function() {
+            // those without a http link may have another interesting protocol
+            // wrap these in a link-[protocol] span
+            var href = $(this).attr('href');
+            res = protocols.exec(href);
+            if(res) {
+              var iconclass = 'glyphicon link-' + res[0];
+              $(this).before('<i class="' + iconclass + '"></i>');
             }
+          }
         );
       }
     }


