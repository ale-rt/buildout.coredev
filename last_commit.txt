Repository: plone.api


Branch: refs/heads/master
Date: 2017-02-20T14:39:55+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/01d7e658008eea4283da0a97ca3eb8a931a3bd20

Fix inconsistencies when getting and granting local roles

Files changed:
M CHANGES.rst
M src/plone/api/group.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_user.py
M src/plone/api/user.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3e0c424..2c70942 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,17 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Do not reassign dynamic roles as local roles when using user.grant_roles().
+  Fixes same issue as #351 for groups.
+  [pbauer]
 
+- Include local roles granted from being in a group when using "inherit=False"
+  in user.get_roles. Fixes #346
+  [pbauer]
+
+- Ignore local roles granted on parents when using "inherit=False" in either
+  user.get_roles or group.get_roles. Fixes #354
+  [pbauer]
 
 1.6 (2017-02-15)
 ----------------
diff --git a/src/plone/api/group.py b/src/plone/api/group.py
index 539af2a..3e5ac9b 100644
--- a/src/plone/api/group.py
+++ b/src/plone/api/group.py
@@ -8,6 +8,7 @@
 from plone.api.validation import at_least_one_of
 from plone.api.validation import mutually_exclusive_parameters
 from plone.api.validation import required_parameters
+from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
 
 
 @required_parameters('groupname')
@@ -230,12 +231,18 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):
         return list(roles)
     else:
         # get only the local roles on a object
-        # same as above we use the PloneUser version of getRolesInContext
+        # same as above we use the PloneUser version of getRolesInContext.
+        # Include roles inherited from being the member of a group
+        # and from adapters granting local roles
         plone_user = super(group.__class__, group)
-        lrmanagers = plone_user._getLocalRolesPlugins()
+        principal_ids = list(plone_user.getGroups())
+        principal_ids.insert(0, plone_user.getId())
         roles = set([])
-        for _, lrmanager in lrmanagers:
-            roles.update(lrmanager.getRolesInContext(plone_user, obj))
+        pas = portal.get_tool('acl_users')
+        for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):
+            for adapter in lrmanager._getAdapters(obj):
+                for pid in principal_ids:
+                    roles.update(adapter.getRoles(pid))
         return list(roles)
 
 
@@ -269,8 +276,7 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):
         actual_roles = get_roles(groupname=group_id)
     else:
         # only roles persistent on the object, not from other providers
-        local_roles = getattr(obj, '__ac_local_roles__', {})
-        actual_roles = local_roles.get(group_id, [])
+        actual_roles = obj.get_local_roles_for_userid(group_id)
 
     if actual_roles.count('Anonymous'):
         actual_roles.remove('Anonymous')
diff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py
index 582a0b3..3f0178f 100644
--- a/src/plone/api/tests/test_group.py
+++ b/src/plone/api/tests/test_group.py
@@ -488,12 +488,12 @@ def test_grant_roles_in_context(self):
             set(api.group.get_roles(group=group, obj=folder, inherit=False)),
         )
         self.assertEqual(
-            ROLES,
+            set([]),
             set(api.group.get_roles(
                 groupname='foo', obj=document, inherit=False)),
         )
         self.assertEqual(
-            ROLES,
+            set([]),
             set(api.group.get_roles(group=group, obj=document, inherit=False)),
         )
 
@@ -548,6 +548,19 @@ def test_local_roles_without_inheritance(self):
             set(['Authenticated', 'Editor', 'Contributor']),
             set(api.group.get_roles(groupname='foo', obj=document)),
         )
+        # no only-local roles
+        self.assertEqual(
+            set([]),
+            set(api.group.get_roles(groupname='foo', obj=document, inherit=False)),  # noqa
+        )
+        api.group.grant_roles(
+            groupname='foo', roles=['Contributor'], obj=document)
+        # one only-local role
+        self.assertEqual(
+            set(['Contributor']),
+            set(api.group.get_roles(groupname='foo', obj=document, inherit=False)),  # noqa
+        )
+
         # The Editor-role is added even though it is already a global role
         api.group.grant_roles(groupname='foo', roles=['Editor'], obj=folder)
         self.assertEqual(
diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 2b917c6..66b7043 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -2,11 +2,17 @@
 """Tests for plone.api.user."""
 
 from AccessControl.Permission import getPermissions
+from borg.localrole.interfaces import ILocalRoleProvider
 from plone import api
 from plone.api.tests.base import INTEGRATION_TESTING
 from plone.app.testing import logout
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
+from zope.component import adapter
+from zope.component import getGlobalSiteManager
+from zope.component import provideAdapter
+from zope.interface import implementer
+from zope.interface import Interface
 
 import mock
 import unittest
@@ -389,6 +395,53 @@ def test_get_roles_local_only(self):
             api.user.get_roles(username='chuck', obj=document, inherit=False),
         )
 
+    def test_get_roles_local_includes_group_roles(self):
+        """Test if get local roles for a user on an object respects groups."""
+        user = api.user.create(
+            username='chuck',
+            email='chuck@norris.org',
+            password='secret',
+        )
+        group = api.group.create('foo', roles=['Reviewer'])
+        api.group.add_user(groupname='foo', username='chuck')
+
+        portal = api.portal.get()
+        folder = api.content.create(
+            container=portal,
+            type='Folder',
+            id='folder_one',
+            title='Folder One',
+        )
+        document = api.content.create(
+            container=folder,
+            type='Document',
+            id='document_one',
+            title='Document One',
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Member', 'Reviewer', 'Authenticated'],
+        )
+        api.user.grant_roles(username='chuck', roles=['Editor'], obj=folder)
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Member', 'Reviewer', 'Authenticated', 'Editor'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            [],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Editor'],
+        )
+        api.group.grant_roles(
+            groupname='foo', roles=['Contributor'], obj=document)
+        self.assertEqual(
+            ['Contributor'],
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+        )
+
     def test_get_permissions_root(self):
         """Test get permissions on site root."""
 
@@ -695,7 +748,7 @@ def test_grant_roles_in_context(self):
             api.user.get_roles(username='chuck', obj=folder),
         )
         self.assertEqual(
-            ('Editor',),
+            ['Editor'],
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
         )
         self.assertIn(
@@ -745,6 +798,121 @@ def test_grant_roles_in_context(self):
             set(api.user.get_roles(user=user, obj=document)),
         )
 
+    def test_grant_roles_disregards_adapter(self):
+        """Test that borg.localrole-adpaters are not copied when granting
+        local roles."""
+
+        portal = api.portal.get()
+        folder = api.content.create(
+            container=portal,
+            type='Folder',
+            id='folder_one',
+            title='Folder One',
+        )
+        document = api.content.create(
+            container=folder,
+            type='Document',
+            id='document_one',
+            title='Document One',
+        )
+        user = api.user.create(
+            username='chuck',
+            email='chuck@norris.org',
+            password='secret',
+        )
+
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Member', 'Authenticated'],
+        )
+        self.assertFalse(
+            api.user.get_roles(user=user, obj=folder, inherit=False),
+        )
+
+        # throw in a adapter granting the reviewer-roles
+        @adapter(Interface)
+        @implementer(ILocalRoleProvider)
+        class LocalRoleProvider(object):
+
+            def __init__(self, context):
+                self.context = context
+
+            def getRoles(self, principal_id):
+                return ('Reviewer',)
+
+        provideAdapter(LocalRoleProvider)
+
+        # the adapter-role is added for get_role
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Member', 'Authenticated', 'Reviewer'],
+        )
+
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Reviewer'],
+        )
+
+        # Assign a local role
+        api.user.grant_roles(
+            username='chuck', roles=['Contributor'], obj=folder)
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Member', 'Authenticated', 'Contributor', 'Reviewer'],
+        )
+
+        # The adapter role is in in the local roles but not persistent
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Contributor', 'Reviewer'],
+        )
+        local_roles = getattr(folder, '__ac_local_roles__', {})
+        self.assertEqual(
+            local_roles.get('chuck'),
+            ['Contributor'],
+        )
+
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            ['Reviewer'],
+        )
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Member', 'Authenticated', 'Contributor', 'Reviewer'],
+        )
+
+        # add a group and test mix of group and adapter and user-roles
+        api.group.create('foo')
+        api.group.grant_roles(groupname='foo', roles=['Contributor'], obj=document)  # noqa
+        api.group.add_user(groupname='foo', username='chuck')
+
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            ['Contributor', 'Reviewer'],
+        )
+        api.group.grant_roles(groupname='foo', roles=['Manager'], obj=folder)
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            ['Contributor', 'Reviewer'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Contributor', 'Reviewer', 'Manager', 'Authenticated', 'Member'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Contributor', 'Reviewer', 'Manager', 'Authenticated', 'Member'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Contributor', 'Reviewer', 'Manager'],
+        )
+
+        # cleanup
+        gsm = getGlobalSiteManager()
+        gsm.unregisterAdapter(
+            factory=LocalRoleProvider, provided=ILocalRoleProvider)
+
     def test_revoke_roles_in_context(self):
         """Test revoke roles."""
 
@@ -822,15 +990,15 @@ def test_revoke_roles_in_context(self):
         self.assertEqual(
             ROLES, set(api.user.get_roles(user=user, obj=document)))
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
         )
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(user=user, obj=folder, inherit=False))
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(username='chuck', obj=document, inherit=False))
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(user=user, obj=document, inherit=False))
diff --git a/src/plone/api/user.py b/src/plone/api/user.py
index d47c75d..e0931b2 100644
--- a/src/plone/api/user.py
+++ b/src/plone/api/user.py
@@ -13,6 +13,7 @@
 from plone.api.validation import mutually_exclusive_parameters
 from plone.api.validation import required_parameters
 from Products.CMFPlone.RegistrationTool import get_member_by_login_name
+from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
 
 import random
 import string
@@ -244,7 +245,18 @@ def get_roles(username=None, user=None, obj=None, inherit=True):
         if inherit:
             return user.getRolesInContext(obj)
         else:
-            return obj.get_local_roles_for_userid(username)
+            # Include roles inherited from being the member of a group
+            # and from adapters granting local roles
+            plone_user = user.getUser()
+            principal_ids = list(plone_user.getGroups())
+            principal_ids.insert(0, plone_user.getId())
+            roles = set([])
+            pas = portal.get_tool('acl_users')
+            for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):
+                for adapter in lrmanager._getAdapters(obj):
+                    for pid in principal_ids:
+                        roles.update(adapter.getRoles(pid))
+            return list(roles)
     else:
         return user.getRoles()
 
@@ -367,7 +379,12 @@ def grant_roles(username=None, user=None, obj=None, roles=None):
     if 'Anonymous' in roles or 'Authenticated' in roles:
         raise InvalidParameterError
 
-    roles.extend(get_roles(user=user, obj=obj, inherit=False))
+    if obj is None:
+        actual_roles = get_roles(user=user)
+    else:
+        # only roles persistent on the object, not from other providers
+        actual_roles = obj.get_local_roles_for_userid(username)
+    roles = list(set(actual_roles) | set(roles))
 
     if obj is None:
         user.setSecurityProfile(roles=roles)


Repository: plone.api


Branch: refs/heads/master
Date: 2017-02-20T14:47:58+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/b21111d2164a5e76d42c09b5672a506843400b79

make code-analysis happy

Files changed:
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_user.py

diff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py
index 3f0178f..1583700 100644
--- a/src/plone/api/tests/test_group.py
+++ b/src/plone/api/tests/test_group.py
@@ -8,8 +8,8 @@
 from zope.component import adapter
 from zope.component import getGlobalSiteManager
 from zope.component import provideAdapter
-from zope.interface import implementer
 from zope.interface import Interface
+from zope.interface import implementer
 
 import mock
 import unittest
diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 66b7043..712cabe 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -397,12 +397,12 @@ def test_get_roles_local_only(self):
 
     def test_get_roles_local_includes_group_roles(self):
         """Test if get local roles for a user on an object respects groups."""
-        user = api.user.create(
+        api.user.create(
             username='chuck',
             email='chuck@norris.org',
             password='secret',
         )
-        group = api.group.create('foo', roles=['Reviewer'])
+        api.group.create('foo', roles=['Reviewer'])
         api.group.add_user(groupname='foo', username='chuck')
 
         portal = api.portal.get()


Repository: plone.api


Branch: refs/heads/master
Date: 2017-02-20T14:54:40+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.api/commit/d7e7afcab734e7e981cd396dcb8340bef879cb11

isort is annoying

Files changed:
M src/plone/api/tests/test_group.py

diff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py
index 1583700..41acc15 100644
--- a/src/plone/api/tests/test_group.py
+++ b/src/plone/api/tests/test_group.py
@@ -1,15 +1,15 @@
 # -*- coding: utf-8 -*-
 """Tests for plone.api.group."""
 
-from Products.CMFCore.utils import getToolByName
 from borg.localrole.interfaces import ILocalRoleProvider
 from plone import api
 from plone.api.tests.base import INTEGRATION_TESTING
+from Products.CMFCore.utils import getToolByName
 from zope.component import adapter
 from zope.component import getGlobalSiteManager
 from zope.component import provideAdapter
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 
 import mock
 import unittest


Repository: plone.api


Branch: refs/heads/master
Date: 2017-02-20T17:49:12+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.api/commit/8e1e9dc189d90872de420743ca937d004d53cf7e

Merge pull request #355 from plone/fix_local_roles_inconsistencies

Fix inconsistencies when getting and granting local roles

Files changed:
M CHANGES.rst
M src/plone/api/group.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_user.py
M src/plone/api/user.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3e0c424..2c70942 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,17 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Do not reassign dynamic roles as local roles when using user.grant_roles().
+  Fixes same issue as #351 for groups.
+  [pbauer]
 
+- Include local roles granted from being in a group when using "inherit=False"
+  in user.get_roles. Fixes #346
+  [pbauer]
+
+- Ignore local roles granted on parents when using "inherit=False" in either
+  user.get_roles or group.get_roles. Fixes #354
+  [pbauer]
 
 1.6 (2017-02-15)
 ----------------
diff --git a/src/plone/api/group.py b/src/plone/api/group.py
index 539af2a..3e5ac9b 100644
--- a/src/plone/api/group.py
+++ b/src/plone/api/group.py
@@ -8,6 +8,7 @@
 from plone.api.validation import at_least_one_of
 from plone.api.validation import mutually_exclusive_parameters
 from plone.api.validation import required_parameters
+from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
 
 
 @required_parameters('groupname')
@@ -230,12 +231,18 @@ def get_roles(groupname=None, group=None, obj=None, inherit=True):
         return list(roles)
     else:
         # get only the local roles on a object
-        # same as above we use the PloneUser version of getRolesInContext
+        # same as above we use the PloneUser version of getRolesInContext.
+        # Include roles inherited from being the member of a group
+        # and from adapters granting local roles
         plone_user = super(group.__class__, group)
-        lrmanagers = plone_user._getLocalRolesPlugins()
+        principal_ids = list(plone_user.getGroups())
+        principal_ids.insert(0, plone_user.getId())
         roles = set([])
-        for _, lrmanager in lrmanagers:
-            roles.update(lrmanager.getRolesInContext(plone_user, obj))
+        pas = portal.get_tool('acl_users')
+        for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):
+            for adapter in lrmanager._getAdapters(obj):
+                for pid in principal_ids:
+                    roles.update(adapter.getRoles(pid))
         return list(roles)
 
 
@@ -269,8 +276,7 @@ def grant_roles(groupname=None, group=None, roles=None, obj=None):
         actual_roles = get_roles(groupname=group_id)
     else:
         # only roles persistent on the object, not from other providers
-        local_roles = getattr(obj, '__ac_local_roles__', {})
-        actual_roles = local_roles.get(group_id, [])
+        actual_roles = obj.get_local_roles_for_userid(group_id)
 
     if actual_roles.count('Anonymous'):
         actual_roles.remove('Anonymous')
diff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py
index 582a0b3..41acc15 100644
--- a/src/plone/api/tests/test_group.py
+++ b/src/plone/api/tests/test_group.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 """Tests for plone.api.group."""
 
-from Products.CMFCore.utils import getToolByName
 from borg.localrole.interfaces import ILocalRoleProvider
 from plone import api
 from plone.api.tests.base import INTEGRATION_TESTING
+from Products.CMFCore.utils import getToolByName
 from zope.component import adapter
 from zope.component import getGlobalSiteManager
 from zope.component import provideAdapter
@@ -488,12 +488,12 @@ def test_grant_roles_in_context(self):
             set(api.group.get_roles(group=group, obj=folder, inherit=False)),
         )
         self.assertEqual(
-            ROLES,
+            set([]),
             set(api.group.get_roles(
                 groupname='foo', obj=document, inherit=False)),
         )
         self.assertEqual(
-            ROLES,
+            set([]),
             set(api.group.get_roles(group=group, obj=document, inherit=False)),
         )
 
@@ -548,6 +548,19 @@ def test_local_roles_without_inheritance(self):
             set(['Authenticated', 'Editor', 'Contributor']),
             set(api.group.get_roles(groupname='foo', obj=document)),
         )
+        # no only-local roles
+        self.assertEqual(
+            set([]),
+            set(api.group.get_roles(groupname='foo', obj=document, inherit=False)),  # noqa
+        )
+        api.group.grant_roles(
+            groupname='foo', roles=['Contributor'], obj=document)
+        # one only-local role
+        self.assertEqual(
+            set(['Contributor']),
+            set(api.group.get_roles(groupname='foo', obj=document, inherit=False)),  # noqa
+        )
+
         # The Editor-role is added even though it is already a global role
         api.group.grant_roles(groupname='foo', roles=['Editor'], obj=folder)
         self.assertEqual(
diff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py
index 2b917c6..712cabe 100644
--- a/src/plone/api/tests/test_user.py
+++ b/src/plone/api/tests/test_user.py
@@ -2,11 +2,17 @@
 """Tests for plone.api.user."""
 
 from AccessControl.Permission import getPermissions
+from borg.localrole.interfaces import ILocalRoleProvider
 from plone import api
 from plone.api.tests.base import INTEGRATION_TESTING
 from plone.app.testing import logout
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
+from zope.component import adapter
+from zope.component import getGlobalSiteManager
+from zope.component import provideAdapter
+from zope.interface import implementer
+from zope.interface import Interface
 
 import mock
 import unittest
@@ -389,6 +395,53 @@ def test_get_roles_local_only(self):
             api.user.get_roles(username='chuck', obj=document, inherit=False),
         )
 
+    def test_get_roles_local_includes_group_roles(self):
+        """Test if get local roles for a user on an object respects groups."""
+        api.user.create(
+            username='chuck',
+            email='chuck@norris.org',
+            password='secret',
+        )
+        api.group.create('foo', roles=['Reviewer'])
+        api.group.add_user(groupname='foo', username='chuck')
+
+        portal = api.portal.get()
+        folder = api.content.create(
+            container=portal,
+            type='Folder',
+            id='folder_one',
+            title='Folder One',
+        )
+        document = api.content.create(
+            container=folder,
+            type='Document',
+            id='document_one',
+            title='Document One',
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Member', 'Reviewer', 'Authenticated'],
+        )
+        api.user.grant_roles(username='chuck', roles=['Editor'], obj=folder)
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Member', 'Reviewer', 'Authenticated', 'Editor'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            [],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Editor'],
+        )
+        api.group.grant_roles(
+            groupname='foo', roles=['Contributor'], obj=document)
+        self.assertEqual(
+            ['Contributor'],
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+        )
+
     def test_get_permissions_root(self):
         """Test get permissions on site root."""
 
@@ -695,7 +748,7 @@ def test_grant_roles_in_context(self):
             api.user.get_roles(username='chuck', obj=folder),
         )
         self.assertEqual(
-            ('Editor',),
+            ['Editor'],
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
         )
         self.assertIn(
@@ -745,6 +798,121 @@ def test_grant_roles_in_context(self):
             set(api.user.get_roles(user=user, obj=document)),
         )
 
+    def test_grant_roles_disregards_adapter(self):
+        """Test that borg.localrole-adpaters are not copied when granting
+        local roles."""
+
+        portal = api.portal.get()
+        folder = api.content.create(
+            container=portal,
+            type='Folder',
+            id='folder_one',
+            title='Folder One',
+        )
+        document = api.content.create(
+            container=folder,
+            type='Document',
+            id='document_one',
+            title='Document One',
+        )
+        user = api.user.create(
+            username='chuck',
+            email='chuck@norris.org',
+            password='secret',
+        )
+
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Member', 'Authenticated'],
+        )
+        self.assertFalse(
+            api.user.get_roles(user=user, obj=folder, inherit=False),
+        )
+
+        # throw in a adapter granting the reviewer-roles
+        @adapter(Interface)
+        @implementer(ILocalRoleProvider)
+        class LocalRoleProvider(object):
+
+            def __init__(self, context):
+                self.context = context
+
+            def getRoles(self, principal_id):
+                return ('Reviewer',)
+
+        provideAdapter(LocalRoleProvider)
+
+        # the adapter-role is added for get_role
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Member', 'Authenticated', 'Reviewer'],
+        )
+
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Reviewer'],
+        )
+
+        # Assign a local role
+        api.user.grant_roles(
+            username='chuck', roles=['Contributor'], obj=folder)
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Member', 'Authenticated', 'Contributor', 'Reviewer'],
+        )
+
+        # The adapter role is in in the local roles but not persistent
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Contributor', 'Reviewer'],
+        )
+        local_roles = getattr(folder, '__ac_local_roles__', {})
+        self.assertEqual(
+            local_roles.get('chuck'),
+            ['Contributor'],
+        )
+
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            ['Reviewer'],
+        )
+        self.assertItemsEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Member', 'Authenticated', 'Contributor', 'Reviewer'],
+        )
+
+        # add a group and test mix of group and adapter and user-roles
+        api.group.create('foo')
+        api.group.grant_roles(groupname='foo', roles=['Contributor'], obj=document)  # noqa
+        api.group.add_user(groupname='foo', username='chuck')
+
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            ['Contributor', 'Reviewer'],
+        )
+        api.group.grant_roles(groupname='foo', roles=['Manager'], obj=folder)
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document, inherit=False),
+            ['Contributor', 'Reviewer'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=document),
+            ['Contributor', 'Reviewer', 'Manager', 'Authenticated', 'Member'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder),
+            ['Contributor', 'Reviewer', 'Manager', 'Authenticated', 'Member'],
+        )
+        self.assertEqual(
+            api.user.get_roles(username='chuck', obj=folder, inherit=False),
+            ['Contributor', 'Reviewer', 'Manager'],
+        )
+
+        # cleanup
+        gsm = getGlobalSiteManager()
+        gsm.unregisterAdapter(
+            factory=LocalRoleProvider, provided=ILocalRoleProvider)
+
     def test_revoke_roles_in_context(self):
         """Test revoke roles."""
 
@@ -822,15 +990,15 @@ def test_revoke_roles_in_context(self):
         self.assertEqual(
             ROLES, set(api.user.get_roles(user=user, obj=document)))
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(username='chuck', obj=folder, inherit=False),
         )
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(user=user, obj=folder, inherit=False))
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(username='chuck', obj=document, inherit=False))
         self.assertEqual(
-            (),
+            [],
             api.user.get_roles(user=user, obj=document, inherit=False))
diff --git a/src/plone/api/user.py b/src/plone/api/user.py
index d47c75d..e0931b2 100644
--- a/src/plone/api/user.py
+++ b/src/plone/api/user.py
@@ -13,6 +13,7 @@
 from plone.api.validation import mutually_exclusive_parameters
 from plone.api.validation import required_parameters
 from Products.CMFPlone.RegistrationTool import get_member_by_login_name
+from Products.PlonePAS.interfaces.plugins import ILocalRolesPlugin
 
 import random
 import string
@@ -244,7 +245,18 @@ def get_roles(username=None, user=None, obj=None, inherit=True):
         if inherit:
             return user.getRolesInContext(obj)
         else:
-            return obj.get_local_roles_for_userid(username)
+            # Include roles inherited from being the member of a group
+            # and from adapters granting local roles
+            plone_user = user.getUser()
+            principal_ids = list(plone_user.getGroups())
+            principal_ids.insert(0, plone_user.getId())
+            roles = set([])
+            pas = portal.get_tool('acl_users')
+            for _, lrmanager in pas.plugins.listPlugins(ILocalRolesPlugin):
+                for adapter in lrmanager._getAdapters(obj):
+                    for pid in principal_ids:
+                        roles.update(adapter.getRoles(pid))
+            return list(roles)
     else:
         return user.getRoles()
 
@@ -367,7 +379,12 @@ def grant_roles(username=None, user=None, obj=None, roles=None):
     if 'Anonymous' in roles or 'Authenticated' in roles:
         raise InvalidParameterError
 
-    roles.extend(get_roles(user=user, obj=obj, inherit=False))
+    if obj is None:
+        actual_roles = get_roles(user=user)
+    else:
+        # only roles persistent on the object, not from other providers
+        actual_roles = obj.get_local_roles_for_userid(username)
+    roles = list(set(actual_roles) | set(roles))
 
     if obj is None:
         user.setSecurityProfile(roles=roles)


