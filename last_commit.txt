Repository: plone.app.blob


Branch: refs/heads/master
Date: 2017-11-16T19:16:12Z
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.app.blob/commit/1d202d7955d6208b0a3cd45926bb9b50a665fbc1

Fix buildout issues

Files changed:
M buildout.cfg

diff --git a/buildout.cfg b/buildout.cfg
index 427ea07..d341f1d 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -7,14 +7,12 @@ extensions = mr.developer
 sources = sources
 sources-dir = src-dev
 auto-checkout = 
-    plone.app.testing
-    plone.app.imaging
-    Products.GenericSetup
 
 [remotes]
 plone = git://github.com/plone
 plone_push = git@github.com:plone
-zope = svn://svn.zope.org/repos/main/
+zope = git://github.com/zopefoundation
+zope_push = git@github.com:zopefoundation
 
 [versions]
 plone.app.testing =
@@ -23,4 +21,4 @@ plone.app.blob =
 [sources]
 plone.app.testing         = git ${remotes:plone}/plone.app.testing.git pushurl=${remotes:plone_push}/plone.app.testing.git branch=master
 plone.app.imaging         = git ${remotes:plone}/plone.app.imaging.git pushurl=${remotes:plone_push}/plone.app.imaging.git branch=master
-Products.GenericSetup     = svn svn://svn.zope.org/repos/main/Products.GenericSetup/trunk
+Products.GenericSetup     = git ${remotes:zope}/Products.GenericSetup.git pushurl=${remotes:zope_push}/Products.GenericSetup.git branch=master


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2017-11-16T19:40:41Z
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.app.blob/commit/e54618afcb6c05bb0ba0a9235d58c9c8f557fe6f

Fix bug introduced by #26 that prevents image blob types being used
by content types that did not originally have an image field.

This is done by making the fix in #26 selective, rather than porting
the EXIF functionality from ATContentTypes to plone.app.blob. That
is a valid feature, but presumably low priority.

Files changed:
A src/plone/app/blob/tests/extender.py
A src/plone/app/blob/tests/extender.zcml
A src/plone/app/blob/tests/test_extensionblobfield.py
M CHANGES.rst
M src/plone/app/blob/subtypes/image.py
M src/plone/app/blob/tests/base.py
M src/plone/app/blob/tests/layer.py
M src/plone/app/blob/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 39ae5fd..d433165 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -20,6 +20,11 @@ Bug fixes:
 - Remove no longer existing icons from type definitions.
   [davisagli]
 
+- Fix bug where Image blob fields couldn't be used with
+  archetypes.schemaextender unless the parent class subclasses
+  ATCTImageTransform
+  [MatthewWilkes]
+
 
 1.7.2 (2017-06-03)
 ------------------
diff --git a/src/plone/app/blob/subtypes/image.py b/src/plone/app/blob/subtypes/image.py
index 2561736..245761f 100644
--- a/src/plone/app/blob/subtypes/image.py
+++ b/src/plone/app/blob/subtypes/image.py
@@ -21,7 +21,11 @@ class ExtensionBlobField(ExtensionField, BlobField, ImageFieldMixin):
     def set(self, instance, value, refresh_exif=True, **kwargs):
         super(ExtensionBlobField, self).set(instance, value, **kwargs)
         self.fixAutoId(instance)
-        instance.getEXIF(value, refresh=refresh_exif)
+        if hasattr(instance, 'getEXIF'):
+            # If the instance subclasses ATCTImageTransform we process the
+            # metadata.
+            # TODO: The EXIF functionality should not be dependent on ATCT
+            instance.getEXIF(value, refresh=refresh_exif)
         if hasattr(aq_base(instance), blobScalesAttr):
             delattr(aq_base(instance), blobScalesAttr)
 
diff --git a/src/plone/app/blob/tests/base.py b/src/plone/app/blob/tests/base.py
index 8c193c3..c8218e5 100644
--- a/src/plone/app/blob/tests/base.py
+++ b/src/plone/app/blob/tests/base.py
@@ -2,6 +2,7 @@
 from plone.app.blob.tests.layer import BlobLayer
 from plone.app.blob.tests.layer import BlobLinguaLayer
 from plone.app.blob.tests.layer import BlobReplacementLayer
+from plone.app.blob.tests.layer import BlobSchemaExtenderLayer
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing.bbb import PloneTestCase
@@ -37,6 +38,12 @@ class ReplacementTestCase(BlobTestCase):
 ReplacementFunctionalTestCase = ReplacementTestCase
 
 
+class BlobSchemaExtenderTestCase(PloneTestCase):
+    """ base class for schemaextender tests """
+
+    layer = BlobSchemaExtenderLayer
+
+
 class BlobLinguaTestCase(PloneTestCase):
     """ base class for functional tests """
 
diff --git a/src/plone/app/blob/tests/extender.py b/src/plone/app/blob/tests/extender.py
new file mode 100644
index 0000000..f46fb52
--- /dev/null
+++ b/src/plone/app/blob/tests/extender.py
@@ -0,0 +1,36 @@
+from zope.component import adapts
+from zope.interface import implements
+from archetypes.schemaextender.interfaces import ISchemaExtender
+from Products.ATContentTypes.interfaces import IATDocument, IATImage
+
+from plone.app.blob.subtypes.image import ExtensionBlobField
+
+
+class PageImageAdder(object):
+    adapts(IATDocument)
+    implements(ISchemaExtender)
+
+    fields = [
+        ExtensionBlobField("image"),
+    ]
+
+    def __init__(self, context):
+        self.context = context
+
+    def getFields(self):
+        return self.fields
+
+
+class ImageImageAdder(object):
+    adapts(IATImage)
+    implements(ISchemaExtender)
+
+    fields = [
+        ExtensionBlobField("new_image"),
+    ]
+
+    def __init__(self, context):
+        self.context = context
+
+    def getFields(self):
+        return self.fields
diff --git a/src/plone/app/blob/tests/extender.zcml b/src/plone/app/blob/tests/extender.zcml
new file mode 100644
index 0000000..23da468
--- /dev/null
+++ b/src/plone/app/blob/tests/extender.zcml
@@ -0,0 +1,12 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:zcml="http://namespaces.zope.org/zcml"
+    xmlns:five="http://namespaces.zope.org/five"
+    xmlns:monkey="http://namespaces.plone.org/monkey"
+    i18n_domain="plone.app.blob">
+
+    <include package="archetypes.schemaextender" />
+    <adapter factory=".extender.PageImageAdder" />
+    <adapter factory=".extender.ImageImageAdder" />
+
+</configure>
diff --git a/src/plone/app/blob/tests/layer.py b/src/plone/app/blob/tests/layer.py
index 2ab3610..9aaf339 100644
--- a/src/plone/app/blob/tests/layer.py
+++ b/src/plone/app/blob/tests/layer.py
@@ -81,6 +81,32 @@ def tearDownZope(self, app):
 BlobFileReplacementLayer = BlobReplacementLayer
 
 
+class BlobSchemaExtenderFixture(PloneTestCaseFixture):
+    """ layer for integration tests with SchemaExtender """
+
+    defaultBases = (PTC_FIXTURE, )
+
+    def setUpZope(self, app, configurationContext):
+        import archetypes.schemaextender
+        self.loadZCML(package=archetypes.schemaextender)
+        import plone.app.blob
+        self.loadZCML(package=plone.app.blob)
+        self.loadZCML(name='extender.zcml', package=plone.app.blob.tests)
+        z2.installProduct(app, 'plone.app.blob')
+        z2.installProduct(app, 'archetypes.schemaextender')
+
+    def tearDownZope(self, app):
+        z2.uninstallProduct(app, 'plone.app.blob')
+        z2.uninstallProduct(app, 'archetypes.schemaextender')
+
+
+BLOB_SCHEMA_EXTENDER_FIXTURE = BlobSchemaExtenderFixture()
+BlobSchemaExtenderLayer = testing.FunctionalTesting(
+    bases=(BLOB_SCHEMA_EXTENDER_FIXTURE, ),
+    name='Blob SchemaExtender:Functional',
+)
+
+
 class BlobLinguaFixture(PloneTestCaseFixture):
     """ layer for integration tests with LinguaPlone """
 
diff --git a/src/plone/app/blob/tests/test_extensionblobfield.py b/src/plone/app/blob/tests/test_extensionblobfield.py
new file mode 100644
index 0000000..290ef33
--- /dev/null
+++ b/src/plone/app/blob/tests/test_extensionblobfield.py
@@ -0,0 +1,30 @@
+# -*- coding: utf-8 -*-
+from unittest import defaultTestLoader
+from unittest import TestSuite
+
+from plone.app.blob.tests.base import BlobSchemaExtenderTestCase
+from plone.app.blob.tests.utils import hasSchemaExtender
+
+
+class ExtenderTests(BlobSchemaExtenderTestCase):
+
+    def testImageOnDocument(self):
+        """Test that adding an image blob field to a document doesn't
+        error for lack of EXIF helper functions"""
+        document_id = self.folder.invokeFactory('Document', id='doc')
+        document = self.folder[document_id]
+        document.Schema().get('image').set(document, 'f')
+
+    def testImageOnImage(self):
+        """Test that an extension image field works on a class that has image
+        helper methods"""
+        img_id = self.folder.invokeFactory('Image', id='img')
+        img = self.folder[img_id]
+        img.Schema().get('new_image').set(img, 'f')
+
+
+def test_suite():
+    if hasSchemaExtender():
+        return defaultTestLoader.loadTestsFromName(__name__)
+    else:
+        return TestSuite()
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index e090efb..d93e374 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -60,3 +60,17 @@ def hasLinguaPlone():
         print msg
         print '*' * len(msg)
         return False
+
+
+def hasSchemaExtender():
+    """ test if SchemaExtender is available """
+    try:
+        import archetypes.schemaextender
+        archetypes.schemaextender     # make pyflakes happy...
+        return True
+    except ImportError:
+        msg = 'WARNING: archetypes.schemaextender not found. Skipping tests.'
+        print '*' * len(msg)
+        print msg
+        print '*' * len(msg)
+        return False


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2017-11-27T20:15:42Z
Author: Matthew Wilkes (MatthewWilkes) <git@matthewwilkes.name>
Commit: https://github.com/plone/plone.app.blob/commit/f4953b714115edf1a7c4a499e7459edf613b9b79

Only set _original_setBody patch if it doesn't already exist, to prevent multiple applications of this patch causing a problem.

Files changed:
M src/plone/app/blob/tests/patches.py

diff --git a/src/plone/app/blob/tests/patches.py b/src/plone/app/blob/tests/patches.py
index 3d3da13..5ff2e07 100644
--- a/src/plone/app/blob/tests/patches.py
+++ b/src/plone/app/blob/tests/patches.py
@@ -14,5 +14,6 @@ def setBody(self, body, *args, **kw):
 
 
 def applyPatch(scope, original, replacement):
-    setattr(scope, '_original_' + original, getattr(scope, original))
+    if not hasattr(scope, '_original_'+original):
+        setattr(scope, '_original_' + original, getattr(scope, original))
     setattr(scope, original, replacement)


Repository: plone.app.blob


Branch: refs/heads/master
Date: 2017-11-28T13:52:08-05:00
Author: David Glick (davisagli) <david.glick@plone.org>
Commit: https://github.com/plone/plone.app.blob/commit/cda6ba71fcabec8135237c8b2906bbe5f707c39e

Merge pull request #47 from plone/exif-bug

Fix regression introduced by #26

Files changed:
A src/plone/app/blob/tests/extender.py
A src/plone/app/blob/tests/extender.zcml
A src/plone/app/blob/tests/test_extensionblobfield.py
M CHANGES.rst
M buildout.cfg
M src/plone/app/blob/subtypes/image.py
M src/plone/app/blob/tests/base.py
M src/plone/app/blob/tests/layer.py
M src/plone/app/blob/tests/patches.py
M src/plone/app/blob/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d89e9ca..9bc955c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -28,6 +28,11 @@ Bug fixes:
 - Remove no longer existing icons from type definitions.
   [davisagli]
 
+- Fix bug where Image blob fields couldn't be used with
+  archetypes.schemaextender unless the parent class subclasses
+  ATCTImageTransform
+  [MatthewWilkes]
+
 
 1.7.2 (2017-06-03)
 ------------------
diff --git a/buildout.cfg b/buildout.cfg
index 427ea07..d341f1d 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -7,14 +7,12 @@ extensions = mr.developer
 sources = sources
 sources-dir = src-dev
 auto-checkout = 
-    plone.app.testing
-    plone.app.imaging
-    Products.GenericSetup
 
 [remotes]
 plone = git://github.com/plone
 plone_push = git@github.com:plone
-zope = svn://svn.zope.org/repos/main/
+zope = git://github.com/zopefoundation
+zope_push = git@github.com:zopefoundation
 
 [versions]
 plone.app.testing =
@@ -23,4 +21,4 @@ plone.app.blob =
 [sources]
 plone.app.testing         = git ${remotes:plone}/plone.app.testing.git pushurl=${remotes:plone_push}/plone.app.testing.git branch=master
 plone.app.imaging         = git ${remotes:plone}/plone.app.imaging.git pushurl=${remotes:plone_push}/plone.app.imaging.git branch=master
-Products.GenericSetup     = svn svn://svn.zope.org/repos/main/Products.GenericSetup/trunk
+Products.GenericSetup     = git ${remotes:zope}/Products.GenericSetup.git pushurl=${remotes:zope_push}/Products.GenericSetup.git branch=master
diff --git a/src/plone/app/blob/subtypes/image.py b/src/plone/app/blob/subtypes/image.py
index 2561736..245761f 100644
--- a/src/plone/app/blob/subtypes/image.py
+++ b/src/plone/app/blob/subtypes/image.py
@@ -21,7 +21,11 @@ class ExtensionBlobField(ExtensionField, BlobField, ImageFieldMixin):
     def set(self, instance, value, refresh_exif=True, **kwargs):
         super(ExtensionBlobField, self).set(instance, value, **kwargs)
         self.fixAutoId(instance)
-        instance.getEXIF(value, refresh=refresh_exif)
+        if hasattr(instance, 'getEXIF'):
+            # If the instance subclasses ATCTImageTransform we process the
+            # metadata.
+            # TODO: The EXIF functionality should not be dependent on ATCT
+            instance.getEXIF(value, refresh=refresh_exif)
         if hasattr(aq_base(instance), blobScalesAttr):
             delattr(aq_base(instance), blobScalesAttr)
 
diff --git a/src/plone/app/blob/tests/base.py b/src/plone/app/blob/tests/base.py
index 8c193c3..c8218e5 100644
--- a/src/plone/app/blob/tests/base.py
+++ b/src/plone/app/blob/tests/base.py
@@ -2,6 +2,7 @@
 from plone.app.blob.tests.layer import BlobLayer
 from plone.app.blob.tests.layer import BlobLinguaLayer
 from plone.app.blob.tests.layer import BlobReplacementLayer
+from plone.app.blob.tests.layer import BlobSchemaExtenderLayer
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing.bbb import PloneTestCase
@@ -37,6 +38,12 @@ class ReplacementTestCase(BlobTestCase):
 ReplacementFunctionalTestCase = ReplacementTestCase
 
 
+class BlobSchemaExtenderTestCase(PloneTestCase):
+    """ base class for schemaextender tests """
+
+    layer = BlobSchemaExtenderLayer
+
+
 class BlobLinguaTestCase(PloneTestCase):
     """ base class for functional tests """
 
diff --git a/src/plone/app/blob/tests/extender.py b/src/plone/app/blob/tests/extender.py
new file mode 100644
index 0000000..f46fb52
--- /dev/null
+++ b/src/plone/app/blob/tests/extender.py
@@ -0,0 +1,36 @@
+from zope.component import adapts
+from zope.interface import implements
+from archetypes.schemaextender.interfaces import ISchemaExtender
+from Products.ATContentTypes.interfaces import IATDocument, IATImage
+
+from plone.app.blob.subtypes.image import ExtensionBlobField
+
+
+class PageImageAdder(object):
+    adapts(IATDocument)
+    implements(ISchemaExtender)
+
+    fields = [
+        ExtensionBlobField("image"),
+    ]
+
+    def __init__(self, context):
+        self.context = context
+
+    def getFields(self):
+        return self.fields
+
+
+class ImageImageAdder(object):
+    adapts(IATImage)
+    implements(ISchemaExtender)
+
+    fields = [
+        ExtensionBlobField("new_image"),
+    ]
+
+    def __init__(self, context):
+        self.context = context
+
+    def getFields(self):
+        return self.fields
diff --git a/src/plone/app/blob/tests/extender.zcml b/src/plone/app/blob/tests/extender.zcml
new file mode 100644
index 0000000..23da468
--- /dev/null
+++ b/src/plone/app/blob/tests/extender.zcml
@@ -0,0 +1,12 @@
+<configure
+    xmlns="http://namespaces.zope.org/zope"
+    xmlns:zcml="http://namespaces.zope.org/zcml"
+    xmlns:five="http://namespaces.zope.org/five"
+    xmlns:monkey="http://namespaces.plone.org/monkey"
+    i18n_domain="plone.app.blob">
+
+    <include package="archetypes.schemaextender" />
+    <adapter factory=".extender.PageImageAdder" />
+    <adapter factory=".extender.ImageImageAdder" />
+
+</configure>
diff --git a/src/plone/app/blob/tests/layer.py b/src/plone/app/blob/tests/layer.py
index 2ab3610..9aaf339 100644
--- a/src/plone/app/blob/tests/layer.py
+++ b/src/plone/app/blob/tests/layer.py
@@ -81,6 +81,32 @@ def tearDownZope(self, app):
 BlobFileReplacementLayer = BlobReplacementLayer
 
 
+class BlobSchemaExtenderFixture(PloneTestCaseFixture):
+    """ layer for integration tests with SchemaExtender """
+
+    defaultBases = (PTC_FIXTURE, )
+
+    def setUpZope(self, app, configurationContext):
+        import archetypes.schemaextender
+        self.loadZCML(package=archetypes.schemaextender)
+        import plone.app.blob
+        self.loadZCML(package=plone.app.blob)
+        self.loadZCML(name='extender.zcml', package=plone.app.blob.tests)
+        z2.installProduct(app, 'plone.app.blob')
+        z2.installProduct(app, 'archetypes.schemaextender')
+
+    def tearDownZope(self, app):
+        z2.uninstallProduct(app, 'plone.app.blob')
+        z2.uninstallProduct(app, 'archetypes.schemaextender')
+
+
+BLOB_SCHEMA_EXTENDER_FIXTURE = BlobSchemaExtenderFixture()
+BlobSchemaExtenderLayer = testing.FunctionalTesting(
+    bases=(BLOB_SCHEMA_EXTENDER_FIXTURE, ),
+    name='Blob SchemaExtender:Functional',
+)
+
+
 class BlobLinguaFixture(PloneTestCaseFixture):
     """ layer for integration tests with LinguaPlone """
 
diff --git a/src/plone/app/blob/tests/patches.py b/src/plone/app/blob/tests/patches.py
index 3d3da13..5ff2e07 100644
--- a/src/plone/app/blob/tests/patches.py
+++ b/src/plone/app/blob/tests/patches.py
@@ -14,5 +14,6 @@ def setBody(self, body, *args, **kw):
 
 
 def applyPatch(scope, original, replacement):
-    setattr(scope, '_original_' + original, getattr(scope, original))
+    if not hasattr(scope, '_original_'+original):
+        setattr(scope, '_original_' + original, getattr(scope, original))
     setattr(scope, original, replacement)
diff --git a/src/plone/app/blob/tests/test_extensionblobfield.py b/src/plone/app/blob/tests/test_extensionblobfield.py
new file mode 100644
index 0000000..290ef33
--- /dev/null
+++ b/src/plone/app/blob/tests/test_extensionblobfield.py
@@ -0,0 +1,30 @@
+# -*- coding: utf-8 -*-
+from unittest import defaultTestLoader
+from unittest import TestSuite
+
+from plone.app.blob.tests.base import BlobSchemaExtenderTestCase
+from plone.app.blob.tests.utils import hasSchemaExtender
+
+
+class ExtenderTests(BlobSchemaExtenderTestCase):
+
+    def testImageOnDocument(self):
+        """Test that adding an image blob field to a document doesn't
+        error for lack of EXIF helper functions"""
+        document_id = self.folder.invokeFactory('Document', id='doc')
+        document = self.folder[document_id]
+        document.Schema().get('image').set(document, 'f')
+
+    def testImageOnImage(self):
+        """Test that an extension image field works on a class that has image
+        helper methods"""
+        img_id = self.folder.invokeFactory('Image', id='img')
+        img = self.folder[img_id]
+        img.Schema().get('new_image').set(img, 'f')
+
+
+def test_suite():
+    if hasSchemaExtender():
+        return defaultTestLoader.loadTestsFromName(__name__)
+    else:
+        return TestSuite()
diff --git a/src/plone/app/blob/tests/utils.py b/src/plone/app/blob/tests/utils.py
index e090efb..d93e374 100644
--- a/src/plone/app/blob/tests/utils.py
+++ b/src/plone/app/blob/tests/utils.py
@@ -60,3 +60,17 @@ def hasLinguaPlone():
         print msg
         print '*' * len(msg)
         return False
+
+
+def hasSchemaExtender():
+    """ test if SchemaExtender is available """
+    try:
+        import archetypes.schemaextender
+        archetypes.schemaextender     # make pyflakes happy...
+        return True
+    except ImportError:
+        msg = 'WARNING: archetypes.schemaextender not found. Skipping tests.'
+        print '*' * len(msg)
+        print msg
+        print '*' * len(msg)
+        return False


