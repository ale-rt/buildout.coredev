Repository: plone.app.event


Branch: refs/heads/master
Date: 2016-03-09T20:33:51-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/23c86fa0cc8257bcfd4b0a266b7e9ae94dba9f03

When trying to access an occurrence in the future, do not raise StopIteration.

Files changed:
M CHANGES.rst
M plone/app/event/recurrence.py
M plone/app/event/tests/test_recurrence.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 150f313..fe8b43d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,10 @@ New:
 
 Fixes:
 
+- When trying to access an occurrence in the future, do not
+  raise StopIteration.
+  [frapell]
+
 - Ensure that unittests reset the timezone information
   [do3cc]
 
diff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py
index d983d5c..8857b16 100644
--- a/plone/app/event/recurrence.py
+++ b/plone/app/event/recurrence.py
@@ -97,10 +97,13 @@ def publishTraverse(self, request, name):
         dateobj = guess_date_from(name, context)
         if dateobj:
             occs = IRecurrenceSupport(context).occurrences(range_start=dateobj)
-            occurrence = occs.next()
-            occ_acc = IEventAccessor(occurrence)
-            if is_same_day(dateobj, occ_acc.start):
-                return occurrence
+            try:
+                occurrence = occs.next()
+                occ_acc = IEventAccessor(occurrence)
+                if is_same_day(dateobj, occ_acc.start):
+                    return occurrence
+            except StopIteration:
+                pass
         return self.fallbackTraverse(request, name)
 
     def fallbackTraverse(self, request, name):
diff --git a/plone/app/event/tests/test_recurrence.py b/plone/app/event/tests/test_recurrence.py
index 8f36cf8..67a59fc 100644
--- a/plone/app/event/tests/test_recurrence.py
+++ b/plone/app/event/tests/test_recurrence.py
@@ -64,6 +64,12 @@ def test_occurrence(self):
             self.occ_traverser_1.publishTraverse,
             self.request, '2000-01-01')
 
+        # Try to traverse to future occurrence
+        self.assertRaises(
+            AttributeError,
+            self.occ_traverser_1.publishTraverse,
+            self.request, '2030-01-01')
+
         # Traverse to existent occurrence
         item = self.occ_traverser_1.publishTraverse(self.request, '2013-05-07')
         self.assertTrue(IOccurrence.providedBy(item))


Repository: plone.app.event


Branch: refs/heads/master
Date: 2016-03-14T13:37:12+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/b326efbbb8dd310bb523ac0e91916edf1570c532

adapt changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index fe8b43d..acfa947 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,8 +10,8 @@ New:
 
 Fixes:
 
-- When trying to access an occurrence in the future, do not
-  raise StopIteration.
+- When trying to access an occurrence in the future outside the range of indexed occurrences, do not raise ``StopIteration``.
+  Instead fall back to raise ``AttributeError``.
   [frapell]
 
 - Ensure that unittests reset the timezone information


Repository: plone.app.event


Branch: refs/heads/master
Date: 2016-03-14T13:37:33+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.event/commit/f0a8bafaa052d92e757fa36825c7d33b6975847e

Merge pull request #216 from plone/stop_iteration

When trying to access an occurrence in the future, do not raise StopIteration

Files changed:
M CHANGES.rst
M plone/app/event/recurrence.py
M plone/app/event/tests/test_recurrence.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 150f313..acfa947 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,6 +10,10 @@ New:
 
 Fixes:
 
+- When trying to access an occurrence in the future outside the range of indexed occurrences, do not raise ``StopIteration``.
+  Instead fall back to raise ``AttributeError``.
+  [frapell]
+
 - Ensure that unittests reset the timezone information
   [do3cc]
 
diff --git a/plone/app/event/recurrence.py b/plone/app/event/recurrence.py
index d983d5c..8857b16 100644
--- a/plone/app/event/recurrence.py
+++ b/plone/app/event/recurrence.py
@@ -97,10 +97,13 @@ def publishTraverse(self, request, name):
         dateobj = guess_date_from(name, context)
         if dateobj:
             occs = IRecurrenceSupport(context).occurrences(range_start=dateobj)
-            occurrence = occs.next()
-            occ_acc = IEventAccessor(occurrence)
-            if is_same_day(dateobj, occ_acc.start):
-                return occurrence
+            try:
+                occurrence = occs.next()
+                occ_acc = IEventAccessor(occurrence)
+                if is_same_day(dateobj, occ_acc.start):
+                    return occurrence
+            except StopIteration:
+                pass
         return self.fallbackTraverse(request, name)
 
     def fallbackTraverse(self, request, name):
diff --git a/plone/app/event/tests/test_recurrence.py b/plone/app/event/tests/test_recurrence.py
index 8f36cf8..67a59fc 100644
--- a/plone/app/event/tests/test_recurrence.py
+++ b/plone/app/event/tests/test_recurrence.py
@@ -64,6 +64,12 @@ def test_occurrence(self):
             self.occ_traverser_1.publishTraverse,
             self.request, '2000-01-01')
 
+        # Try to traverse to future occurrence
+        self.assertRaises(
+            AttributeError,
+            self.occ_traverser_1.publishTraverse,
+            self.request, '2030-01-01')
+
         # Traverse to existent occurrence
         item = self.occ_traverser_1.publishTraverse(self.request, '2013-05-07')
         self.assertTrue(IOccurrence.providedBy(item))


