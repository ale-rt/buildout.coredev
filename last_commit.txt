Repository: plone.releaser


Branch: refs/heads/master
Date: 2016-09-27T23:06:44+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.releaser/commit/d2e53d5017c8d3ce6281269d3e5e1e92666bc4a4

Use print as a function

Files changed:
M CHANGES.rst
M plone/releaser/changelog.py
M plone/releaser/manage.py
M plone/releaser/package.py
M plone/releaser/release.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 126c549..c7e5372 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Use print as a function.
+  [gforcada]
 
 1.5.3 (2016-06-27)
 ------------------
diff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py
index 14005f3..3441c6c 100644
--- a/plone/releaser/changelog.py
+++ b/plone/releaser/changelog.py
@@ -36,7 +36,7 @@ def pull_versions(version_number):
                 pass
             else:
                 package_versions[package] = version
-    print "Parsed {0}".format(url)
+    print("Parsed {0}".format(url))
     return package_versions
 
 
@@ -74,7 +74,7 @@ def get_changelog(package_name):
         try:
             response = urllib.urlopen(url)
         except IOError:
-            print "Unable to reach {0}".format(url)
+            print("Unable to reach {0}".format(url))
         else:
             if response.code == 200:
                 return response.read()
@@ -181,7 +181,7 @@ def build_unified_changelog(start_version, end_version):
         prior_versions = pull_versions(start_version)
         current_versions = pull_versions(end_version)
     except ValueError, e:
-        print e
+        print(e)
         return
 
     output_str = ""
@@ -190,7 +190,7 @@ def build_unified_changelog(start_version, end_version):
             if package in prior_versions:
                 prior_version = prior_versions[package]
                 if version > prior_version:
-                    print "{0} has a newer version".format(package)
+                    print("{0} has a newer version".format(package))
                     packageChange = u"{0}: {1} {2} {3}".format(
                         package,
                         prior_version,
@@ -202,13 +202,13 @@ def build_unified_changelog(start_version, end_version):
 
                     logtext = get_changelog(package)
                     if not logtext:
-                        print "No changelog found."
+                        print("No changelog found.")
                         continue
                     changelog = Changelog(content=logtext)
                     try:
                         changes = changelog.get_changes(prior_version, version)
                     except ValueError, e:
-                        print e
+                        print(e)
                     else:
                         bullet = "- "
                         for change in changes:
@@ -221,4 +221,4 @@ def build_unified_changelog(start_version, end_version):
     except KeyboardInterrupt:
         pass
 
-    print output_str.encode('utf-8')
+    print(output_str.encode('utf-8'))
diff --git a/plone/releaser/manage.py b/plone/releaser/manage.py
index 8373908..bcc6451 100644
--- a/plone/releaser/manage.py
+++ b/plone/releaser/manage.py
@@ -30,10 +30,10 @@ def checkPypi(user):
             pass
         else:
             if not pypi.can_user_release_package_to_pypi(user, package):
-                print "{0}: {1}".format(
+                print("{0}: {1}".format(
                     package,
                     ', '.join(pypi.get_users_with_release_rights(package))
-                )
+                ))
 
 
 @named('jenkins')
@@ -78,13 +78,13 @@ def pulls():
             pulls = [a for a in repo.get_pulls(
                 'open') if a.head.ref == source.branch]
             if pulls:
-                print package_name
+                print(package_name)
                 for pull in pulls:
-                    print "    {0}: {1} ({2})".format(
+                    print("    {0}: {1} ({2})".format(
                         pull.user.login,
                         pull.title,
                         pull.url
-                    )
+                    ))
 
 
 @named('changelog')
diff --git a/plone/releaser/package.py b/plone/releaser/package.py
index ad75302..0c94397 100644
--- a/plone/releaser/package.py
+++ b/plone/releaser/package.py
@@ -88,7 +88,7 @@ def __init__(self, buildout, package):
 
     def __call__(self, action=ACTION_INTERACTIVE):
         if action not in PACKAGE_ACTIONS:
-            print 'This package action does not exist: {0}'.format(action)
+            print('This package action does not exist: {0}'.format(action))
             return
         self.set_interaction_and_report(action)
 
@@ -140,7 +140,7 @@ def __call__(self, action=ACTION_INTERACTIVE):
 
                     if self.name in THIRD_PARTY_PACKAGES:
                         msg = 'NOTE: {0} is a third-party package.'
-                        print msg.format(self.name)
+                        print(msg.format(self.name))
 
                     self.add(commits_since_release)
 
@@ -151,7 +151,7 @@ def __call__(self, action=ACTION_INTERACTIVE):
 
                         if self.name in THIRD_PARTY_PACKAGES:
                             msg = 'NOTE: {0} is a third-party package.'
-                            print msg.format(self.name)
+                            print(msg.format(self.name))
 
     def set_interaction_and_report(self, action):
         if action == ACTION_REPORT:
@@ -168,7 +168,7 @@ def is_git_hosted(self):
         if self.source.protocol != 'git':
             if self.report_only:
                 msg = 'Skipped check of {0} as it\'s not a git repo.'
-                print msg.format(self.name)
+                print(msg.format(self.name))
             return False
         return True
 
@@ -178,7 +178,7 @@ def get_version(self):
             version = self.buildout.get_version(self.name)
         except (NoOptionError, KeyError):
             if self.report_only:
-                print 'No version available for {0}'.format(self.name)
+                print('No version available for {0}'.format(self.name))
 
         return version
 
@@ -188,7 +188,7 @@ def latest_tag(self, repo):
             tag = repo.git.describe('--abbrev=0', '--tags')
         except git.exc.GitCommandError:
             if self.report_only:
-                print 'Unable to check tags for {0}'.format(self.name)
+                print('Unable to check tags for {0}'.format(self.name))
 
         return tag
 
@@ -202,7 +202,7 @@ def latest_commits(self, repo):
                 self.source.branch
             )
         except git.exc.GitCommandError:
-            print '\nCould not read commits for package {0}'.format(self.name)
+            print('\nCould not read commits for package {0}'.format(self.name))
 
         return commits
 
@@ -218,7 +218,7 @@ def remove(self):
         if self.name in self.buildout.checkouts and \
                 self.name not in ALWAYS_CHECKED_OUT:
             msg = '\nNo new changes in {0}, but it is listed for auto-checkout.'  # noqa
-            print msg.format(self.name)
+            print(msg.format(self.name))
 
         if self.report_only:
             return
@@ -258,20 +258,20 @@ def add(self, commits_since_release):
     @staticmethod
     def print_commits(commits_list, message=None):
         if message:
-            print message
+            print(message)
 
         for commit in commits_list:
-            print '    {0}: {1}'.format(
+            print('    {0}: {1}'.format(
                 commit.author.name.encode('ascii', 'replace'),
                 commit.summary.encode('ascii', 'replace')
-            )
+            ))
 
     def update_version(self, tag):
         if tag <= self.version:
             return
 
         msg = '\nNewer version {0} is available for {1} (Currently {2})'
-        print msg.format(tag, self.name, self.version)
+        print(msg.format(tag, self.name, self.version))
 
         if self.report_only:
             return
diff --git a/plone/releaser/release.py b/plone/releaser/release.py
index a5b691c..a1bbb20 100644
--- a/plone/releaser/release.py
+++ b/plone/releaser/release.py
@@ -184,16 +184,16 @@ def update_core(data):
         message = "{0} {1}".format(package_name, new_version)
         g.add('versions.cfg')
         g.add('checkouts.cfg')
-        print "Committing changes."
+        print("Committing changes.")
         g.commit(message=message)
         if ask("Ok to push coredev?", default=True):
-            print "Pushing changes to server."
+            print("Pushing changes to server.")
             g.push()
 
 
 def update_versions(package_name, new_version):
     # Update version
-    print "Updating versions.cfg"
+    print("Updating versions.cfg")
     path = os.path.join(os.getcwd(), '../../versions.cfg')
     versions = VersionsFile(path)
     versions.set(package_name, new_version)
@@ -201,7 +201,7 @@ def update_versions(package_name, new_version):
 
 def update_checkouts(package_name):
     # Remove from checkouts.cfg
-    print "Removing package from checkouts.cfg"
+    print("Removing package from checkouts.cfg")
     path = os.path.join(os.getcwd(), '../../checkouts.cfg')
     checkouts = CheckoutsFile(path)
     checkouts.remove(package_name)


Repository: plone.releaser


Branch: refs/heads/master
Date: 2016-09-28T12:21:54+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/8fc1ac66ea661ae4f4764cf1c69eef3f648bc22c

Merge pull request #11 from plone/gforcada-print-function

Use print as a function

Files changed:
M CHANGES.rst
M plone/releaser/changelog.py
M plone/releaser/manage.py
M plone/releaser/package.py
M plone/releaser/release.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 126c549..c7e5372 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Use print as a function.
+  [gforcada]
 
 1.5.3 (2016-06-27)
 ------------------
diff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py
index 14005f3..3441c6c 100644
--- a/plone/releaser/changelog.py
+++ b/plone/releaser/changelog.py
@@ -36,7 +36,7 @@ def pull_versions(version_number):
                 pass
             else:
                 package_versions[package] = version
-    print "Parsed {0}".format(url)
+    print("Parsed {0}".format(url))
     return package_versions
 
 
@@ -74,7 +74,7 @@ def get_changelog(package_name):
         try:
             response = urllib.urlopen(url)
         except IOError:
-            print "Unable to reach {0}".format(url)
+            print("Unable to reach {0}".format(url))
         else:
             if response.code == 200:
                 return response.read()
@@ -181,7 +181,7 @@ def build_unified_changelog(start_version, end_version):
         prior_versions = pull_versions(start_version)
         current_versions = pull_versions(end_version)
     except ValueError, e:
-        print e
+        print(e)
         return
 
     output_str = ""
@@ -190,7 +190,7 @@ def build_unified_changelog(start_version, end_version):
             if package in prior_versions:
                 prior_version = prior_versions[package]
                 if version > prior_version:
-                    print "{0} has a newer version".format(package)
+                    print("{0} has a newer version".format(package))
                     packageChange = u"{0}: {1} {2} {3}".format(
                         package,
                         prior_version,
@@ -202,13 +202,13 @@ def build_unified_changelog(start_version, end_version):
 
                     logtext = get_changelog(package)
                     if not logtext:
-                        print "No changelog found."
+                        print("No changelog found.")
                         continue
                     changelog = Changelog(content=logtext)
                     try:
                         changes = changelog.get_changes(prior_version, version)
                     except ValueError, e:
-                        print e
+                        print(e)
                     else:
                         bullet = "- "
                         for change in changes:
@@ -221,4 +221,4 @@ def build_unified_changelog(start_version, end_version):
     except KeyboardInterrupt:
         pass
 
-    print output_str.encode('utf-8')
+    print(output_str.encode('utf-8'))
diff --git a/plone/releaser/manage.py b/plone/releaser/manage.py
index 8373908..bcc6451 100644
--- a/plone/releaser/manage.py
+++ b/plone/releaser/manage.py
@@ -30,10 +30,10 @@ def checkPypi(user):
             pass
         else:
             if not pypi.can_user_release_package_to_pypi(user, package):
-                print "{0}: {1}".format(
+                print("{0}: {1}".format(
                     package,
                     ', '.join(pypi.get_users_with_release_rights(package))
-                )
+                ))
 
 
 @named('jenkins')
@@ -78,13 +78,13 @@ def pulls():
             pulls = [a for a in repo.get_pulls(
                 'open') if a.head.ref == source.branch]
             if pulls:
-                print package_name
+                print(package_name)
                 for pull in pulls:
-                    print "    {0}: {1} ({2})".format(
+                    print("    {0}: {1} ({2})".format(
                         pull.user.login,
                         pull.title,
                         pull.url
-                    )
+                    ))
 
 
 @named('changelog')
diff --git a/plone/releaser/package.py b/plone/releaser/package.py
index ad75302..0c94397 100644
--- a/plone/releaser/package.py
+++ b/plone/releaser/package.py
@@ -88,7 +88,7 @@ def __init__(self, buildout, package):
 
     def __call__(self, action=ACTION_INTERACTIVE):
         if action not in PACKAGE_ACTIONS:
-            print 'This package action does not exist: {0}'.format(action)
+            print('This package action does not exist: {0}'.format(action))
             return
         self.set_interaction_and_report(action)
 
@@ -140,7 +140,7 @@ def __call__(self, action=ACTION_INTERACTIVE):
 
                     if self.name in THIRD_PARTY_PACKAGES:
                         msg = 'NOTE: {0} is a third-party package.'
-                        print msg.format(self.name)
+                        print(msg.format(self.name))
 
                     self.add(commits_since_release)
 
@@ -151,7 +151,7 @@ def __call__(self, action=ACTION_INTERACTIVE):
 
                         if self.name in THIRD_PARTY_PACKAGES:
                             msg = 'NOTE: {0} is a third-party package.'
-                            print msg.format(self.name)
+                            print(msg.format(self.name))
 
     def set_interaction_and_report(self, action):
         if action == ACTION_REPORT:
@@ -168,7 +168,7 @@ def is_git_hosted(self):
         if self.source.protocol != 'git':
             if self.report_only:
                 msg = 'Skipped check of {0} as it\'s not a git repo.'
-                print msg.format(self.name)
+                print(msg.format(self.name))
             return False
         return True
 
@@ -178,7 +178,7 @@ def get_version(self):
             version = self.buildout.get_version(self.name)
         except (NoOptionError, KeyError):
             if self.report_only:
-                print 'No version available for {0}'.format(self.name)
+                print('No version available for {0}'.format(self.name))
 
         return version
 
@@ -188,7 +188,7 @@ def latest_tag(self, repo):
             tag = repo.git.describe('--abbrev=0', '--tags')
         except git.exc.GitCommandError:
             if self.report_only:
-                print 'Unable to check tags for {0}'.format(self.name)
+                print('Unable to check tags for {0}'.format(self.name))
 
         return tag
 
@@ -202,7 +202,7 @@ def latest_commits(self, repo):
                 self.source.branch
             )
         except git.exc.GitCommandError:
-            print '\nCould not read commits for package {0}'.format(self.name)
+            print('\nCould not read commits for package {0}'.format(self.name))
 
         return commits
 
@@ -218,7 +218,7 @@ def remove(self):
         if self.name in self.buildout.checkouts and \
                 self.name not in ALWAYS_CHECKED_OUT:
             msg = '\nNo new changes in {0}, but it is listed for auto-checkout.'  # noqa
-            print msg.format(self.name)
+            print(msg.format(self.name))
 
         if self.report_only:
             return
@@ -258,20 +258,20 @@ def add(self, commits_since_release):
     @staticmethod
     def print_commits(commits_list, message=None):
         if message:
-            print message
+            print(message)
 
         for commit in commits_list:
-            print '    {0}: {1}'.format(
+            print('    {0}: {1}'.format(
                 commit.author.name.encode('ascii', 'replace'),
                 commit.summary.encode('ascii', 'replace')
-            )
+            ))
 
     def update_version(self, tag):
         if tag <= self.version:
             return
 
         msg = '\nNewer version {0} is available for {1} (Currently {2})'
-        print msg.format(tag, self.name, self.version)
+        print(msg.format(tag, self.name, self.version))
 
         if self.report_only:
             return
diff --git a/plone/releaser/release.py b/plone/releaser/release.py
index a5b691c..a1bbb20 100644
--- a/plone/releaser/release.py
+++ b/plone/releaser/release.py
@@ -184,16 +184,16 @@ def update_core(data):
         message = "{0} {1}".format(package_name, new_version)
         g.add('versions.cfg')
         g.add('checkouts.cfg')
-        print "Committing changes."
+        print("Committing changes.")
         g.commit(message=message)
         if ask("Ok to push coredev?", default=True):
-            print "Pushing changes to server."
+            print("Pushing changes to server.")
             g.push()
 
 
 def update_versions(package_name, new_version):
     # Update version
-    print "Updating versions.cfg"
+    print("Updating versions.cfg")
     path = os.path.join(os.getcwd(), '../../versions.cfg')
     versions = VersionsFile(path)
     versions.set(package_name, new_version)
@@ -201,7 +201,7 @@ def update_versions(package_name, new_version):
 
 def update_checkouts(package_name):
     # Remove from checkouts.cfg
-    print "Removing package from checkouts.cfg"
+    print("Removing package from checkouts.cfg")
     path = os.path.join(os.getcwd(), '../../checkouts.cfg')
     checkouts = CheckoutsFile(path)
     checkouts.remove(package_name)


