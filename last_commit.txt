Repository: plone.portlets


Branch: refs/heads/master
Date: 2016-07-05T23:17:14+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.portlets/commit/728a84a1d59956c7c62047bc621ed041a9a63c30

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M plone/portlets/assignable.py
M plone/portlets/manager.py
M plone/portlets/registration.py
M plone/portlets/retriever.py
M plone/portlets/settings.py
M plone/portlets/storage.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 24bcf42..981890d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.2.2 (2016-02-15)
diff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py
index 794bb76..4b8612a 100644
--- a/plone/portlets/assignable.py
+++ b/plone/portlets/assignable.py
@@ -1,7 +1,7 @@
 from persistent.dict import PersistentDict
 
 from zope.interface import implementer
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapter
 from zope.component import adapts
 from zope.component import queryAdapter
@@ -42,11 +42,11 @@ def localPortletAssignmentMappingAdapter(context, manager):
     return portlets
 
 
+@implementer(ILocalPortletAssignmentManager)
 class LocalPortletAssignmentManager(object):
     """Default implementation of ILocalPortletAssignmentManager which stores
     information in an annotation.
     """
-    implements(ILocalPortletAssignmentManager)
     adapts(ILocalPortletAssignable, IPortletManager)
 
     def __init__(self, context, manager):
diff --git a/plone/portlets/manager.py b/plone/portlets/manager.py
index e20a79d..5740a60 100644
--- a/plone/portlets/manager.py
+++ b/plone/portlets/manager.py
@@ -5,7 +5,7 @@
 from zope.component import getMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.contentprovider.interfaces import UpdateNotCalled
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.publisher.interfaces.browser import IBrowserView
 from zope.publisher.interfaces.browser import IBrowserRequest
@@ -22,6 +22,7 @@
 logger = logging.getLogger('portlets')
 
 
+@implementer(IPortletManagerRenderer)
 class PortletManagerRenderer(object):
     """Default renderer for portlet managers.
 
@@ -30,7 +31,6 @@ class PortletManagerRenderer(object):
     instance of this class, by doing an adapter lookup for (context, request,
     view, manager).
     """
-    implements(IPortletManagerRenderer)
     adapts(Interface, IBrowserRequest, IBrowserView, IPortletManager)
 
     template = None
@@ -137,6 +137,7 @@ def _dataToPortlet(self, data):
                                 self.manager, data, ), IPortletRenderer)
 
 
+@implementer(IPortletManager)
 class PortletManager(PortletStorage):
     """Default implementation of the portlet manager.
 
@@ -144,8 +145,6 @@ class PortletManager(PortletStorage):
     adapter factory.
     """
 
-    implements(IPortletManager)
-
     __name__ = __parent__ = None
 
     def __call__(self, context, request, view):
diff --git a/plone/portlets/registration.py b/plone/portlets/registration.py
index 20d6b9b..2d58162 100644
--- a/plone/portlets/registration.py
+++ b/plone/portlets/registration.py
@@ -1,15 +1,15 @@
-from zope.interface import implements
+from zope.interface import implementer
 from persistent import Persistent
 
 from plone.portlets.interfaces import IPortletType
 
 
+@implementer(IPortletType)
 class PortletType(Persistent):
     """A portlet registration.
 
     This is persistent so that it can be stored as a local utility.
     """
-    implements(IPortletType)
 
     title = u''
     description = u''
diff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py
index 4e165fa..da79d35 100644
--- a/plone/portlets/retriever.py
+++ b/plone/portlets/retriever.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts
 from zope.component import getMultiAdapter
 from zope.component import queryAdapter
@@ -16,14 +16,13 @@
 from plone.portlets.constants import CONTEXT_CATEGORY
 
 
+@implementer(IPortletRetriever)
 class PortletRetriever(object):
     """The default portlet retriever.
 
     This will examine the context and its parents for contextual portlets,
     provided they provide ILocalPortletAssignable.
     """
-
-    implements(IPortletRetriever)
     adapts(Interface, IPortletManager)
 
     def __init__(self, context, storage):
@@ -148,13 +147,12 @@ def getPortlets(self):
         return assignments
 
 
+@implementer(IPortletRetriever)
 class PlacelessPortletRetriever(PortletRetriever):
     """A placeless portlet retriever.
 
     This will aggregate user portlets, then group portlets.
     """
-
-    implements(IPortletRetriever)
     adapts(Interface, IPlacelessPortletManager)
 
     def __init__(self, context, storage):
diff --git a/plone/portlets/settings.py b/plone/portlets/settings.py
index 8eae2a2..d483950 100644
--- a/plone/portlets/settings.py
+++ b/plone/portlets/settings.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, implementer
+from zope.interface import implementer, implementer
 from zope.component import adapter, queryAdapter
 from zope.container.contained import Contained
 from plone.portlets.interfaces import IPortletAssignment, IPortletAssignmentSettings
@@ -7,8 +7,8 @@
 from plone.portlets.constants import ASSIGNMENT_SETTINGS_KEY
 
 
+@implementer(IPortletAssignmentSettings)
 class PortletAssignmentSettings(Contained):
-    implements(IPortletAssignmentSettings)
 
     def __init__(self):
         self.data = PersistentDict()
diff --git a/plone/portlets/storage.py b/plone/portlets/storage.py
index 126da32..4129162 100644
--- a/plone/portlets/storage.py
+++ b/plone/portlets/storage.py
@@ -1,7 +1,7 @@
 
 import logging
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from zope.container.btree import BTreeContainer
 from zope.container.contained import Contained
@@ -34,16 +34,16 @@ def _coerce(key):
     return key
 
 
+@implementer(IPortletStorage)
 class PortletStorage(BTreeContainer):
     """The default portlet storage.
     """
-    implements(IPortletStorage)
 
 
+@implementer(IPortletCategoryMapping)
 class PortletCategoryMapping(BTreeContainer, Contained):
     """The default category/key mapping storage.
     """
-    implements(IPortletCategoryMapping)
 
     # We need to hack some stuff to make sure keys are unicode.
     # The shole BTreeContainer/SampleContainer mess is a pain in the backside
@@ -70,10 +70,10 @@ def __delitem__(self, key):
         super(PortletCategoryMapping, self).__delitem__(_coerce(key))
 
 
+@implementer(IPortletAssignmentMapping)
 class PortletAssignmentMapping(OrderedContainer):
     """The default assignment mapping storage.
     """
-    implements(IPortletAssignmentMapping)
 
     __manager__ = u''
     __category__ = u''


Repository: plone.portlets


Branch: refs/heads/master
Date: 2016-07-07T00:57:32+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.portlets/commit/f5aeadd46907c4735cc564b148a3b1e4dcaa312f

Merge pull request #2 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.rst
M plone/portlets/assignable.py
M plone/portlets/manager.py
M plone/portlets/registration.py
M plone/portlets/retriever.py
M plone/portlets/settings.py
M plone/portlets/storage.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 24bcf42..981890d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 2.2.2 (2016-02-15)
diff --git a/plone/portlets/assignable.py b/plone/portlets/assignable.py
index 794bb76..4b8612a 100644
--- a/plone/portlets/assignable.py
+++ b/plone/portlets/assignable.py
@@ -1,7 +1,7 @@
 from persistent.dict import PersistentDict
 
 from zope.interface import implementer
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapter
 from zope.component import adapts
 from zope.component import queryAdapter
@@ -42,11 +42,11 @@ def localPortletAssignmentMappingAdapter(context, manager):
     return portlets
 
 
+@implementer(ILocalPortletAssignmentManager)
 class LocalPortletAssignmentManager(object):
     """Default implementation of ILocalPortletAssignmentManager which stores
     information in an annotation.
     """
-    implements(ILocalPortletAssignmentManager)
     adapts(ILocalPortletAssignable, IPortletManager)
 
     def __init__(self, context, manager):
diff --git a/plone/portlets/manager.py b/plone/portlets/manager.py
index e20a79d..5740a60 100644
--- a/plone/portlets/manager.py
+++ b/plone/portlets/manager.py
@@ -5,7 +5,7 @@
 from zope.component import getMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.contentprovider.interfaces import UpdateNotCalled
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.publisher.interfaces.browser import IBrowserView
 from zope.publisher.interfaces.browser import IBrowserRequest
@@ -22,6 +22,7 @@
 logger = logging.getLogger('portlets')
 
 
+@implementer(IPortletManagerRenderer)
 class PortletManagerRenderer(object):
     """Default renderer for portlet managers.
 
@@ -30,7 +31,6 @@ class PortletManagerRenderer(object):
     instance of this class, by doing an adapter lookup for (context, request,
     view, manager).
     """
-    implements(IPortletManagerRenderer)
     adapts(Interface, IBrowserRequest, IBrowserView, IPortletManager)
 
     template = None
@@ -137,6 +137,7 @@ def _dataToPortlet(self, data):
                                 self.manager, data, ), IPortletRenderer)
 
 
+@implementer(IPortletManager)
 class PortletManager(PortletStorage):
     """Default implementation of the portlet manager.
 
@@ -144,8 +145,6 @@ class PortletManager(PortletStorage):
     adapter factory.
     """
 
-    implements(IPortletManager)
-
     __name__ = __parent__ = None
 
     def __call__(self, context, request, view):
diff --git a/plone/portlets/registration.py b/plone/portlets/registration.py
index 20d6b9b..2d58162 100644
--- a/plone/portlets/registration.py
+++ b/plone/portlets/registration.py
@@ -1,15 +1,15 @@
-from zope.interface import implements
+from zope.interface import implementer
 from persistent import Persistent
 
 from plone.portlets.interfaces import IPortletType
 
 
+@implementer(IPortletType)
 class PortletType(Persistent):
     """A portlet registration.
 
     This is persistent so that it can be stored as a local utility.
     """
-    implements(IPortletType)
 
     title = u''
     description = u''
diff --git a/plone/portlets/retriever.py b/plone/portlets/retriever.py
index 4e165fa..da79d35 100644
--- a/plone/portlets/retriever.py
+++ b/plone/portlets/retriever.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, Interface
+from zope.interface import implementer, Interface
 from zope.component import adapts
 from zope.component import getMultiAdapter
 from zope.component import queryAdapter
@@ -16,14 +16,13 @@
 from plone.portlets.constants import CONTEXT_CATEGORY
 
 
+@implementer(IPortletRetriever)
 class PortletRetriever(object):
     """The default portlet retriever.
 
     This will examine the context and its parents for contextual portlets,
     provided they provide ILocalPortletAssignable.
     """
-
-    implements(IPortletRetriever)
     adapts(Interface, IPortletManager)
 
     def __init__(self, context, storage):
@@ -148,13 +147,12 @@ def getPortlets(self):
         return assignments
 
 
+@implementer(IPortletRetriever)
 class PlacelessPortletRetriever(PortletRetriever):
     """A placeless portlet retriever.
 
     This will aggregate user portlets, then group portlets.
     """
-
-    implements(IPortletRetriever)
     adapts(Interface, IPlacelessPortletManager)
 
     def __init__(self, context, storage):
diff --git a/plone/portlets/settings.py b/plone/portlets/settings.py
index 8eae2a2..d483950 100644
--- a/plone/portlets/settings.py
+++ b/plone/portlets/settings.py
@@ -1,4 +1,4 @@
-from zope.interface import implements, implementer
+from zope.interface import implementer, implementer
 from zope.component import adapter, queryAdapter
 from zope.container.contained import Contained
 from plone.portlets.interfaces import IPortletAssignment, IPortletAssignmentSettings
@@ -7,8 +7,8 @@
 from plone.portlets.constants import ASSIGNMENT_SETTINGS_KEY
 
 
+@implementer(IPortletAssignmentSettings)
 class PortletAssignmentSettings(Contained):
-    implements(IPortletAssignmentSettings)
 
     def __init__(self):
         self.data = PersistentDict()
diff --git a/plone/portlets/storage.py b/plone/portlets/storage.py
index 126da32..4129162 100644
--- a/plone/portlets/storage.py
+++ b/plone/portlets/storage.py
@@ -1,7 +1,7 @@
 
 import logging
 
-from zope.interface import implements
+from zope.interface import implementer
 
 from zope.container.btree import BTreeContainer
 from zope.container.contained import Contained
@@ -34,16 +34,16 @@ def _coerce(key):
     return key
 
 
+@implementer(IPortletStorage)
 class PortletStorage(BTreeContainer):
     """The default portlet storage.
     """
-    implements(IPortletStorage)
 
 
+@implementer(IPortletCategoryMapping)
 class PortletCategoryMapping(BTreeContainer, Contained):
     """The default category/key mapping storage.
     """
-    implements(IPortletCategoryMapping)
 
     # We need to hack some stuff to make sure keys are unicode.
     # The shole BTreeContainer/SampleContainer mess is a pain in the backside
@@ -70,10 +70,10 @@ def __delitem__(self, key):
         super(PortletCategoryMapping, self).__delitem__(_coerce(key))
 
 
+@implementer(IPortletAssignmentMapping)
 class PortletAssignmentMapping(OrderedContainer):
     """The default assignment mapping storage.
     """
-    implements(IPortletAssignmentMapping)
 
     __manager__ = u''
     __category__ = u''


