Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T11:00:28+01:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/1b6c75dae22cee9ad13b99fb013cd02189ff2d9a

webdav support

Files changed:
A plone/app/contenttypes/tests/test_webdav.py
M CHANGES.rst
M plone/app/contenttypes/content.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b2d0069..24e4315 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Incompatibilities:
 
 New:
 
-- *add item here*
+- WebDAV support for File and Image
+  [ebrehault]
 
 Fixes:
 
diff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py
index 5a71fcd..e322f2b 100644
--- a/plone/app/contenttypes/content.py
+++ b/plone/app/contenttypes/content.py
@@ -9,8 +9,11 @@
 from plone.app.contenttypes.interfaces import INewsItem
 from plone.dexterity.content import Container
 from plone.dexterity.content import Item
+from plone.namedfile.file import NamedBlobImage
+from plone.namedfile.file import NamedBlobFile
 from zope.deprecation import deprecation
 from zope.interface import implementer
+from zope.lifecycleevent import modified
 
 
 @implementer(ICollection)
@@ -77,6 +80,28 @@ class File(Item):
     """Convenience subclass for ``File`` portal type
     """
 
+    def PUT(self, REQUEST=None, RESPONSE=None):
+        """DAV method to replace the file field with a new resource."""
+        request = REQUEST if REQUEST is not None else self.REQUEST
+        response = RESPONSE if RESPONSE is not None else request.response
+
+        self.dav__init(request, response)
+        self.dav__simpleifhandler(request, response, refresh=1)
+
+        infile = request.get('BODYFILE', None)
+        filename = request['PATH_INFO'].split('/')[-1]
+        self.file = NamedBlobFile(
+            data=infile.read(), filename=unicode(filename))
+
+        modified(self)
+        return response
+
+    def get_size(self):
+        return self.file.size
+
+    def content_type(self):
+        return self.file.contentType
+
 
 @implementer(IFolder)
 class Folder(Container):
@@ -89,6 +114,28 @@ class Image(Item):
     """Convenience subclass for ``Image`` portal type
     """
 
+    def PUT(self, REQUEST=None, RESPONSE=None):
+        """DAV method to replace image field with a new resource."""
+        request = REQUEST if REQUEST is not None else self.REQUEST
+        response = RESPONSE if RESPONSE is not None else request.response
+
+        self.dav__init(request, response)
+        self.dav__simpleifhandler(request, response, refresh=1)
+
+        infile = request.get('BODYFILE', None)
+        filename = request['PATH_INFO'].split('/')[-1]
+        self.image = NamedBlobImage(
+            data=infile.read(), filename=unicode(filename))
+
+        modified(self)
+        return response
+
+    def get_size(self):
+        return self.image.size
+
+    def content_type(self):
+        return self.image.contentType
+
 
 @implementer(ILink)
 class Link(Item):
diff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py
new file mode 100644
index 0000000..ec8ac52
--- /dev/null
+++ b/plone/app/contenttypes/tests/test_webdav.py
@@ -0,0 +1,60 @@
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from zope.publisher.browser import TestRequest
+from ZPublisher.HTTPResponse import HTTPResponse
+
+import os.path
+import unittest2 as unittest
+
+
+class DAVTestRequest(TestRequest):
+    """Mock webdav request."""
+
+    get_header = TestRequest.getHeader
+
+    def _createResponse(self):
+        return HTTPResponse()
+
+
+class WebDAVIntegrationTest(unittest.TestCase):
+    """Test webdav support."""
+
+    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        self.portal.invokeFactory('Image', 'image')
+        self.image = self.portal['image']
+        self.image.title = "My Image"
+        self.portal.invokeFactory('File', 'file')
+        self.file = self.portal['file']
+        self.file.title = "My file"
+
+    def test_image_put(self):
+        """Upload an image through webdav."""
+        filename = os.path.join(os.path.dirname(__file__), u'image.jpg')
+        request = DAVTestRequest(environ={
+            'BODYFILE': open(filename),
+            'PATH_INFO': '/foo/bar/image.jpg',
+        })
+        self.image.REQUEST = request
+        self.image.PUT()
+        self.assertEqual(self.image.image.filename, u'image.jpg')
+        self.assertEqual(self.image.get_size(), 5131)
+        self.assertEqual(self.image.content_type(), 'image/jpeg')
+
+    def test_file_put(self):
+        """Upload a file through webdav."""
+        filename = os.path.join(os.path.dirname(__file__), u'file.pdf')
+        request = DAVTestRequest(environ={
+            'BODYFILE': open(filename),
+            'PATH_INFO': '/foo/bar/file.pdf',
+        })
+        self.file.REQUEST = request
+        self.file.PUT()
+        self.assertEqual(self.file.file.filename, u'file.pdf')
+        self.assertEqual(self.file.get_size(), 8561)
+        self.assertEqual(self.file.content_type(), 'application/pdf')


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-18T17:49:40+01:00
Author: Eric BREHAULT (ebrehault) <ebrehault@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/58a6ac419bdad62087d09b82ca5cb71a2cbee3b9

Merge pull request #334 from plone/webdav-support

Webdav support for File and Image

Files changed:
A plone/app/contenttypes/tests/test_webdav.py
M CHANGES.rst
M plone/app/contenttypes/content.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d31cbcb..8a8d7d6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ Incompatibilities:
 
 New:
 
-- *add item here*
+- WebDAV support for File and Image
+  [ebrehault]
 
 Fixes:
 
diff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py
index 5a71fcd..e322f2b 100644
--- a/plone/app/contenttypes/content.py
+++ b/plone/app/contenttypes/content.py
@@ -9,8 +9,11 @@
 from plone.app.contenttypes.interfaces import INewsItem
 from plone.dexterity.content import Container
 from plone.dexterity.content import Item
+from plone.namedfile.file import NamedBlobImage
+from plone.namedfile.file import NamedBlobFile
 from zope.deprecation import deprecation
 from zope.interface import implementer
+from zope.lifecycleevent import modified
 
 
 @implementer(ICollection)
@@ -77,6 +80,28 @@ class File(Item):
     """Convenience subclass for ``File`` portal type
     """
 
+    def PUT(self, REQUEST=None, RESPONSE=None):
+        """DAV method to replace the file field with a new resource."""
+        request = REQUEST if REQUEST is not None else self.REQUEST
+        response = RESPONSE if RESPONSE is not None else request.response
+
+        self.dav__init(request, response)
+        self.dav__simpleifhandler(request, response, refresh=1)
+
+        infile = request.get('BODYFILE', None)
+        filename = request['PATH_INFO'].split('/')[-1]
+        self.file = NamedBlobFile(
+            data=infile.read(), filename=unicode(filename))
+
+        modified(self)
+        return response
+
+    def get_size(self):
+        return self.file.size
+
+    def content_type(self):
+        return self.file.contentType
+
 
 @implementer(IFolder)
 class Folder(Container):
@@ -89,6 +114,28 @@ class Image(Item):
     """Convenience subclass for ``Image`` portal type
     """
 
+    def PUT(self, REQUEST=None, RESPONSE=None):
+        """DAV method to replace image field with a new resource."""
+        request = REQUEST if REQUEST is not None else self.REQUEST
+        response = RESPONSE if RESPONSE is not None else request.response
+
+        self.dav__init(request, response)
+        self.dav__simpleifhandler(request, response, refresh=1)
+
+        infile = request.get('BODYFILE', None)
+        filename = request['PATH_INFO'].split('/')[-1]
+        self.image = NamedBlobImage(
+            data=infile.read(), filename=unicode(filename))
+
+        modified(self)
+        return response
+
+    def get_size(self):
+        return self.image.size
+
+    def content_type(self):
+        return self.image.contentType
+
 
 @implementer(ILink)
 class Link(Item):
diff --git a/plone/app/contenttypes/tests/test_webdav.py b/plone/app/contenttypes/tests/test_webdav.py
new file mode 100644
index 0000000..ec8ac52
--- /dev/null
+++ b/plone/app/contenttypes/tests/test_webdav.py
@@ -0,0 +1,60 @@
+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING  # noqa
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from zope.publisher.browser import TestRequest
+from ZPublisher.HTTPResponse import HTTPResponse
+
+import os.path
+import unittest2 as unittest
+
+
+class DAVTestRequest(TestRequest):
+    """Mock webdav request."""
+
+    get_header = TestRequest.getHeader
+
+    def _createResponse(self):
+        return HTTPResponse()
+
+
+class WebDAVIntegrationTest(unittest.TestCase):
+    """Test webdav support."""
+
+    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, ['Manager'])
+        self.portal.invokeFactory('Image', 'image')
+        self.image = self.portal['image']
+        self.image.title = "My Image"
+        self.portal.invokeFactory('File', 'file')
+        self.file = self.portal['file']
+        self.file.title = "My file"
+
+    def test_image_put(self):
+        """Upload an image through webdav."""
+        filename = os.path.join(os.path.dirname(__file__), u'image.jpg')
+        request = DAVTestRequest(environ={
+            'BODYFILE': open(filename),
+            'PATH_INFO': '/foo/bar/image.jpg',
+        })
+        self.image.REQUEST = request
+        self.image.PUT()
+        self.assertEqual(self.image.image.filename, u'image.jpg')
+        self.assertEqual(self.image.get_size(), 5131)
+        self.assertEqual(self.image.content_type(), 'image/jpeg')
+
+    def test_file_put(self):
+        """Upload a file through webdav."""
+        filename = os.path.join(os.path.dirname(__file__), u'file.pdf')
+        request = DAVTestRequest(environ={
+            'BODYFILE': open(filename),
+            'PATH_INFO': '/foo/bar/file.pdf',
+        })
+        self.file.REQUEST = request
+        self.file.PUT()
+        self.assertEqual(self.file.file.filename, u'file.pdf')
+        self.assertEqual(self.file.get_size(), 8561)
+        self.assertEqual(self.file.content_type(), 'application/pdf')


