Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2017-02-20T21:52:17Z
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/dc90e0c1df1442628d8145c4efb97c8aafabf740

When field is a Relation List, get the referenced objects instead of diffing on the actual reference objects.

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/dexteritydiff.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ea06f2b..50fc1ef 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- When field is a Relation List, get the referenced objects instead of diffing
+  on the actual reference objects.
+  [frapell]
 
 Bug fixes:
 
diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index 5ce3f5c..70a120b 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -10,6 +10,7 @@
 from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
 from Products.CMFDiffTool.interfaces import IDifference
 from Products.CMFPlone.utils import safe_hasattr
+from z3c.relationfield.relation import RelationValue
 from zope.i18n import translate
 from zope.interface import implementer
 
@@ -90,6 +91,27 @@ def _getValue(ob, field, field_name, convert_to_str=True):
     except (AttributeError, TypeError):
         pass
 
+    new_value = value
+    if isinstance(value, list) or isinstance(value, tuple):
+        new_value = list()
+        for val in value:
+            if isinstance(val, RelationValue):
+                try:
+                    obj = val.to_object
+                except:
+                    obj = None
+                new_value.append(obj)
+        if isinstance(value, tuple):
+            new_value = tuple(new_value)
+    value = new_value
+
+    if isinstance(value, RelationValue):
+        try:
+            obj = value.to_object
+        except:
+            obj = None
+        value = obj
+
     if convert_to_str:
         # If this is some object, convert it to a string
         try:
diff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py
index d13f9ec..0150717 100644
--- a/Products/CMFDiffTool/ListDiff.py
+++ b/Products/CMFDiffTool/ListDiff.py
@@ -17,4 +17,101 @@ def _parseField(self, value, filename=None):
         else:
             return value
 
+
+class RelationListDiff(FieldDiff):
+
+    meta_type = 'Related List Diff'
+
+    same_fmt = """<div class="%s"><a target="_blank" href="%s">%s</a></div>"""
+    inlinediff_fmt = """<div class="%s">
+        <div class="diff_sub"><a target="_blank" href="%s">%s</a></div>
+        <div class="diff_add"><a target="_blank" href="%s">%s</a></div>
+    </div>"""
+
+    def _parseField(self, value, filename=None):
+        """Take RelationValues and just return the target UID so we can compare"""
+
+        if filename is None:
+            # Since we only want to compare a single field, make a
+            # one-item list out of it
+            return ['/'.join(val.getPhysicalPath()) for val in value]
+        else:
+            return [
+                self.filenameTitle(filename),
+                ['/'.join(val.getPhysicalPath()) for val in value]
+            ]
+
+    def inline_diff(self):
+        css_class = 'InlineDiff'
+        inlinediff_fmt = self.inlinediff_fmt
+        same_fmt = self.same_fmt
+        r=[]
+        for tag, alo, ahi, blo, bhi in self.getLineDiffs():
+            if tag == 'replace':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, obj_url, obj_title, '', ''))
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, '', '', obj_url, obj_title))
+            elif tag == 'delete':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, obj_url, obj_title, '', ''))
+            elif tag == 'insert':
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, '', '', obj_url, obj_title))
+            elif tag == 'equal':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(same_fmt % (css_class, obj_url, obj_title))
+            else:
+                raise ValueError('unknown tag ' + `tag`)
+        return '\n'.join(r)
+
+    def ndiff(self):
+        """Return a textual diff"""
+        r = []
+        for tag, alo, ahi, blo, bhi in self.getLineDiffs():
+            if tag == 'replace':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("- %s" % obj_url)
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("+ %s" % obj_url)
+            elif tag == 'delete':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("- %s" % obj_url)
+            elif tag == 'insert':
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("+ %s" % obj_url)
+            elif tag == 'equal':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("  %s" % obj_url)
+            else:
+                raise ValueError('unknown tag %r', tag)
+        return '\n'.join(r)
+
+
 InitializeClass(ListDiff)
+InitializeClass(RelationListDiff)
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 59513ce..7d9f1db 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -5,11 +5,13 @@
 from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.ListDiff import ListDiff
+from Products.CMFDiffTool.ListDiff import RelationListDiff
 from Products.CMFDiffTool.namedfile import FILE_FIELD_TYPES
 from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
 from Products.CMFDiffTool.namedfile import NamedFileListDiff
 from Products.CMFDiffTool.TextDiff import AsTextDiff
 from Products.CMFDiffTool.TextDiff import TextDiff
+from z3c.relationfield.schema import RelationList
 from zope.globalrequest import getRequest
 from zope.schema import Bool
 from zope.schema import Bytes
@@ -26,6 +28,7 @@
 # adaptation, in order to provide better extensibility.
 FIELDS_AND_DIFF_TYPES_RELATION = [
     (FILE_FIELD_TYPES, NamedFileBinaryDiff),
+    ((RelationList,), RelationListDiff),
     ((Iterable, Container), ListDiff),
     ((Date, Datetime, Time), AsTextDiff),
     ((Bool, ), AsTextDiff),


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2017-02-20T19:34:22-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/ebbade89d1c94424f553e73d212438313fb42d99

Improve HTML for relations diff output

Files changed:
M Products/CMFDiffTool/ListDiff.py

diff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py
index 0150717..09939fc 100644
--- a/Products/CMFDiffTool/ListDiff.py
+++ b/Products/CMFDiffTool/ListDiff.py
@@ -24,8 +24,7 @@ class RelationListDiff(FieldDiff):
 
     same_fmt = """<div class="%s"><a target="_blank" href="%s">%s</a></div>"""
     inlinediff_fmt = """<div class="%s">
-        <div class="diff_sub"><a target="_blank" href="%s">%s</a></div>
-        <div class="diff_add"><a target="_blank" href="%s">%s</a></div>
+        <div class="%s"><a target="_blank" href="%s">%s</a></div>
     </div>"""
 
     def _parseField(self, value, filename=None):
@@ -52,24 +51,24 @@ def inline_diff(self):
                     obj = self.oldValue[i]
                     obj_title = obj.Title()
                     obj_url = obj.absolute_url()
-                    r.append(inlinediff_fmt % (css_class, obj_url, obj_title, '', ''))
+                    r.append(inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title))
                 for i in xrange(blo, bhi):
                     obj = self.newValue[i]
                     obj_title = obj.Title()
                     obj_url = obj.absolute_url()
-                    r.append(inlinediff_fmt % (css_class, '', '', obj_url, obj_title))
+                    r.append(inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title))
             elif tag == 'delete':
                 for i in xrange(alo, ahi):
                     obj = self.oldValue[i]
                     obj_title = obj.Title()
                     obj_url = obj.absolute_url()
-                    r.append(inlinediff_fmt % (css_class, obj_url, obj_title, '', ''))
+                    r.append(inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title))
             elif tag == 'insert':
                 for i in xrange(blo, bhi):
                     obj = self.newValue[i]
                     obj_title = obj.Title()
                     obj_url = obj.absolute_url()
-                    r.append(inlinediff_fmt % (css_class, '', '', obj_url, obj_title))
+                    r.append(inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title))
             elif tag == 'equal':
                 for i in xrange(alo, ahi):
                     obj = self.oldValue[i]


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2017-02-21T10:48:19-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/aedce40fa30bff351b8777d9c92494f4f47616d4

Fix non-RelationList lists

Files changed:
M Products/CMFDiffTool/BaseDiff.py

diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index 70a120b..a06c054 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -101,6 +101,8 @@ def _getValue(ob, field, field_name, convert_to_str=True):
                 except:
                     obj = None
                 new_value.append(obj)
+            else:
+                new_value.append(val)
         if isinstance(value, tuple):
             new_value = tuple(new_value)
     value = new_value


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2017-02-21T10:48:38-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/8244e21ba7224709b75f36e4da0e68876de0faf7

Add tests for the RelationList diffs

Files changed:
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py

diff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py
index 16d0143..7878067 100644
--- a/Products/CMFDiffTool/testing.py
+++ b/Products/CMFDiffTool/testing.py
@@ -51,7 +51,7 @@ def setUpPloneSite(self, portal):
             behaviors=(
                 'plone.app.versioningbehavior.behaviors.IVersionable',
                 'plone.app.dexterity.behaviors.metadata.IBasic',
-                'plone.app.dexterity.behaviors.metadata.IRelatedItems',
+                'plone.app.relationfield.behavior.IRelatedItems',
                 'plone.app.contenttypes.behaviors.collection.ICollection',
             ),
             model_source='''
diff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py
index ac8f540..7cb9e1c 100644
--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py
+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py
@@ -6,6 +6,9 @@
 from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 from Products.CMFDiffTool.dexteritydiff import EXCLUDED_FIELDS
 from Products.CMFDiffTool.interfaces import IDifference
+from z3c.relationfield.relation import RelationValue
+from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
 
 
 class DexterityDiffTestCase(BaseDXTestCase):
@@ -102,3 +105,52 @@ def test_should_provide_diff_for_behaviors_fields(self):
         fields = [d.field for d in diffs]
         self.assertIn('title', fields)
         self.assertIn('description', fields)
+
+    def test_should_provide_diff_for_related_fields(self):
+        intids = getUtility(IIntIds)
+
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj1',
+            title=u'Object 1',
+            description=u'Desc 1',
+            text=u'Text 1'
+        )
+        obj1 = self.portal['obj1']
+
+        intid = intids.register(obj1)
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj2',
+            title=u'Object 2',
+            relatedItems=[RelationValue(intid)],
+        )
+        obj2 = self.portal['obj2']
+
+        intid = intids.register(obj2)
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj3',
+            title=u'Object 3',
+            relatedItems=[RelationValue(intid)],
+        )
+        obj3 = self.portal['obj3']
+
+        diffs = DexterityCompoundDiff(obj2, obj3, 'any')
+        for d in diffs:
+            if d.field == 'relatedItems':
+                inline_diff = d.inline_diff()
+                self.assertTrue(inline_diff)
+                i_diff_sub = inline_diff.index('<div class="diff_sub">')
+                i_obj1 = inline_diff.index('Object 1')
+                i_diff_add = inline_diff.index('<div class="diff_add">')
+                i_obj2 = inline_diff.index('Object 2')
+                self.assertTrue(i_diff_sub < i_obj1 < i_diff_add < i_obj2)
+
+                n_diff = d.ndiff()
+                self.assertTrue(n_diff)
+                i_rem = n_diff.index('-')
+                i_obj1 = n_diff.index('obj1')
+                i_add = n_diff.index('+')
+                i_obj2 = n_diff.index('obj2')
+                self.assertTrue(i_rem < i_obj1 < i_add < i_obj2)


Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2017-02-21T17:04:54+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/bc6410f28d81ec811b85ecc93a1783f6dd47cfd0

Merge pull request #25 from plone/relation_value

Generate a diff using the referenced objects instead of the reference object

Files changed:
M CHANGES.rst
M Products/CMFDiffTool/BaseDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/dexteritydiff.py
M Products/CMFDiffTool/testing.py
M Products/CMFDiffTool/tests/test_dexteritydiff.py

diff --git a/CHANGES.rst b/CHANGES.rst
index ea06f2b..50fc1ef 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- When field is a Relation List, get the referenced objects instead of diffing
+  on the actual reference objects.
+  [frapell]
 
 Bug fixes:
 
diff --git a/Products/CMFDiffTool/BaseDiff.py b/Products/CMFDiffTool/BaseDiff.py
index 5ce3f5c..a06c054 100644
--- a/Products/CMFDiffTool/BaseDiff.py
+++ b/Products/CMFDiffTool/BaseDiff.py
@@ -10,6 +10,7 @@
 from Products.CMFDiffTool import CMFDiffToolMessageFactory as _
 from Products.CMFDiffTool.interfaces import IDifference
 from Products.CMFPlone.utils import safe_hasattr
+from z3c.relationfield.relation import RelationValue
 from zope.i18n import translate
 from zope.interface import implementer
 
@@ -90,6 +91,29 @@ def _getValue(ob, field, field_name, convert_to_str=True):
     except (AttributeError, TypeError):
         pass
 
+    new_value = value
+    if isinstance(value, list) or isinstance(value, tuple):
+        new_value = list()
+        for val in value:
+            if isinstance(val, RelationValue):
+                try:
+                    obj = val.to_object
+                except:
+                    obj = None
+                new_value.append(obj)
+            else:
+                new_value.append(val)
+        if isinstance(value, tuple):
+            new_value = tuple(new_value)
+    value = new_value
+
+    if isinstance(value, RelationValue):
+        try:
+            obj = value.to_object
+        except:
+            obj = None
+        value = obj
+
     if convert_to_str:
         # If this is some object, convert it to a string
         try:
diff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py
index d13f9ec..09939fc 100644
--- a/Products/CMFDiffTool/ListDiff.py
+++ b/Products/CMFDiffTool/ListDiff.py
@@ -17,4 +17,100 @@ def _parseField(self, value, filename=None):
         else:
             return value
 
+
+class RelationListDiff(FieldDiff):
+
+    meta_type = 'Related List Diff'
+
+    same_fmt = """<div class="%s"><a target="_blank" href="%s">%s</a></div>"""
+    inlinediff_fmt = """<div class="%s">
+        <div class="%s"><a target="_blank" href="%s">%s</a></div>
+    </div>"""
+
+    def _parseField(self, value, filename=None):
+        """Take RelationValues and just return the target UID so we can compare"""
+
+        if filename is None:
+            # Since we only want to compare a single field, make a
+            # one-item list out of it
+            return ['/'.join(val.getPhysicalPath()) for val in value]
+        else:
+            return [
+                self.filenameTitle(filename),
+                ['/'.join(val.getPhysicalPath()) for val in value]
+            ]
+
+    def inline_diff(self):
+        css_class = 'InlineDiff'
+        inlinediff_fmt = self.inlinediff_fmt
+        same_fmt = self.same_fmt
+        r=[]
+        for tag, alo, ahi, blo, bhi in self.getLineDiffs():
+            if tag == 'replace':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title))
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title))
+            elif tag == 'delete':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, "diff_sub", obj_url, obj_title))
+            elif tag == 'insert':
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(inlinediff_fmt % (css_class, "diff_add", obj_url, obj_title))
+            elif tag == 'equal':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_title = obj.Title()
+                    obj_url = obj.absolute_url()
+                    r.append(same_fmt % (css_class, obj_url, obj_title))
+            else:
+                raise ValueError('unknown tag ' + `tag`)
+        return '\n'.join(r)
+
+    def ndiff(self):
+        """Return a textual diff"""
+        r = []
+        for tag, alo, ahi, blo, bhi in self.getLineDiffs():
+            if tag == 'replace':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("- %s" % obj_url)
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("+ %s" % obj_url)
+            elif tag == 'delete':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("- %s" % obj_url)
+            elif tag == 'insert':
+                for i in xrange(blo, bhi):
+                    obj = self.newValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("+ %s" % obj_url)
+            elif tag == 'equal':
+                for i in xrange(alo, ahi):
+                    obj = self.oldValue[i]
+                    obj_url = obj.absolute_url()
+                    r.append("  %s" % obj_url)
+            else:
+                raise ValueError('unknown tag %r', tag)
+        return '\n'.join(r)
+
+
 InitializeClass(ListDiff)
+InitializeClass(RelationListDiff)
diff --git a/Products/CMFDiffTool/dexteritydiff.py b/Products/CMFDiffTool/dexteritydiff.py
index 59513ce..7d9f1db 100644
--- a/Products/CMFDiffTool/dexteritydiff.py
+++ b/Products/CMFDiffTool/dexteritydiff.py
@@ -5,11 +5,13 @@
 from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff
 from Products.CMFDiffTool.FieldDiff import FieldDiff
 from Products.CMFDiffTool.ListDiff import ListDiff
+from Products.CMFDiffTool.ListDiff import RelationListDiff
 from Products.CMFDiffTool.namedfile import FILE_FIELD_TYPES
 from Products.CMFDiffTool.namedfile import NamedFileBinaryDiff
 from Products.CMFDiffTool.namedfile import NamedFileListDiff
 from Products.CMFDiffTool.TextDiff import AsTextDiff
 from Products.CMFDiffTool.TextDiff import TextDiff
+from z3c.relationfield.schema import RelationList
 from zope.globalrequest import getRequest
 from zope.schema import Bool
 from zope.schema import Bytes
@@ -26,6 +28,7 @@
 # adaptation, in order to provide better extensibility.
 FIELDS_AND_DIFF_TYPES_RELATION = [
     (FILE_FIELD_TYPES, NamedFileBinaryDiff),
+    ((RelationList,), RelationListDiff),
     ((Iterable, Container), ListDiff),
     ((Date, Datetime, Time), AsTextDiff),
     ((Bool, ), AsTextDiff),
diff --git a/Products/CMFDiffTool/testing.py b/Products/CMFDiffTool/testing.py
index 16d0143..7878067 100644
--- a/Products/CMFDiffTool/testing.py
+++ b/Products/CMFDiffTool/testing.py
@@ -51,7 +51,7 @@ def setUpPloneSite(self, portal):
             behaviors=(
                 'plone.app.versioningbehavior.behaviors.IVersionable',
                 'plone.app.dexterity.behaviors.metadata.IBasic',
-                'plone.app.dexterity.behaviors.metadata.IRelatedItems',
+                'plone.app.relationfield.behavior.IRelatedItems',
                 'plone.app.contenttypes.behaviors.collection.ICollection',
             ),
             model_source='''
diff --git a/Products/CMFDiffTool/tests/test_dexteritydiff.py b/Products/CMFDiffTool/tests/test_dexteritydiff.py
index ac8f540..7cb9e1c 100644
--- a/Products/CMFDiffTool/tests/test_dexteritydiff.py
+++ b/Products/CMFDiffTool/tests/test_dexteritydiff.py
@@ -6,6 +6,9 @@
 from Products.CMFDiffTool.dexteritydiff import DexterityCompoundDiff
 from Products.CMFDiffTool.dexteritydiff import EXCLUDED_FIELDS
 from Products.CMFDiffTool.interfaces import IDifference
+from z3c.relationfield.relation import RelationValue
+from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
 
 
 class DexterityDiffTestCase(BaseDXTestCase):
@@ -102,3 +105,52 @@ def test_should_provide_diff_for_behaviors_fields(self):
         fields = [d.field for d in diffs]
         self.assertIn('title', fields)
         self.assertIn('description', fields)
+
+    def test_should_provide_diff_for_related_fields(self):
+        intids = getUtility(IIntIds)
+
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj1',
+            title=u'Object 1',
+            description=u'Desc 1',
+            text=u'Text 1'
+        )
+        obj1 = self.portal['obj1']
+
+        intid = intids.register(obj1)
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj2',
+            title=u'Object 2',
+            relatedItems=[RelationValue(intid)],
+        )
+        obj2 = self.portal['obj2']
+
+        intid = intids.register(obj2)
+        self.portal.invokeFactory(
+            testing.TEST_CONTENT_TYPE_ID,
+            'obj3',
+            title=u'Object 3',
+            relatedItems=[RelationValue(intid)],
+        )
+        obj3 = self.portal['obj3']
+
+        diffs = DexterityCompoundDiff(obj2, obj3, 'any')
+        for d in diffs:
+            if d.field == 'relatedItems':
+                inline_diff = d.inline_diff()
+                self.assertTrue(inline_diff)
+                i_diff_sub = inline_diff.index('<div class="diff_sub">')
+                i_obj1 = inline_diff.index('Object 1')
+                i_diff_add = inline_diff.index('<div class="diff_add">')
+                i_obj2 = inline_diff.index('Object 2')
+                self.assertTrue(i_diff_sub < i_obj1 < i_diff_add < i_obj2)
+
+                n_diff = d.ndiff()
+                self.assertTrue(n_diff)
+                i_rem = n_diff.index('-')
+                i_obj1 = n_diff.index('obj1')
+                i_add = n_diff.index('+')
+                i_obj2 = n_diff.index('obj2')
+                self.assertTrue(i_rem < i_obj1 < i_add < i_obj2)


