Repository: plone.scale


Branch: refs/heads/master
Date: 2015-11-24T14:46:24+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/9e93b9e91299614eb7c36263f872996de6ab8a3c

do not store by hash

Files changed:
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index dc88de6..6e2c86e 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -60,10 +60,15 @@ def storage(self):
     def hash(self, **parameters):
         return tuple(sorted(parameters.items()))
 
+    def get_info_by_hash(self, hash):
+        for value in self.storage.values():
+            if value['key'] == hash:
+                return value
+
     def scale(self, factory=None, **parameters):
         key = self.hash(**parameters)
         storage = self.storage
-        info = storage.get(key)
+        info = self.get_info_by_hash(key)
         modified = self.modified and self.modified()
         if info is not None and modified > info['modified']:
             # This is a good moment to clear out the cache and remove
@@ -81,7 +86,7 @@ def scale(self, factory=None, **parameters):
                 info = dict(uid=uid, data=data, width=width, height=height,
                             mimetype='image/%s' % format.lower(), key=key,
                             modified=modified)
-                storage[key] = storage[uid] = info
+                storage[uid] = info
         return info
 
     def __getitem__(self, uid):
@@ -91,11 +96,7 @@ def __setitem__(self, id, scale):
         raise RuntimeError('New scales have to be created via scale()')
 
     def __delitem__(self, uid):
-        storage = self.storage
-        info = storage[uid]
-        key = info['key']
-        del storage[key]
-        del storage[uid]
+        del self.storage[uid]
 
     def __iter__(self):
         return iter(self.storage)
@@ -109,6 +110,4 @@ def has_key(self, uid):
     __contains__ = has_key
 
     def clear(self):
-        storage = self.storage
-        for key in storage.keys():
-            del storage[key]
+        self.storage.clear()
diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py
index adc53cc..0395b22 100644
--- a/plone/scale/tests/test_storage.py
+++ b/plone/scale/tests/test_storage.py
@@ -40,14 +40,12 @@ def testScaleForExistingScale(self):
         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)
         scale2 = storage.scale(factory=self.factory, bar=42, foo=23)
         self.failUnless(scale1 is scale2)
-        self.assertEqual(len(storage), 2)
 
     def testScaleForSimilarScales(self):
         storage = self.storage
         scale1 = storage.scale(factory=self.factory, foo=23, bar=42)
         scale2 = storage.scale(factory=self.factory, bar=42, foo=23, hurz='!')
         self.failIf(scale1 is scale2)
-        self.assertEqual(len(storage), 4)
 
     def testGetItem(self):
         storage = self.storage
@@ -101,7 +99,7 @@ def testDeleteNonExistingItem(self):
     def testDeleteRemovesItemAndIndex(self):
         storage = self.storage
         scale = storage.scale(factory=self.factory, foo=23, bar=42)
-        self.assertEqual(len(storage), 2)
+        self.assertEqual(len(storage), 1)
         del storage[scale['uid']]
         self.assertEqual(len(storage), 0)
 
@@ -111,7 +109,7 @@ def testCleanUpOldItems(self):
         next_modified = storage.modified() + 1
         storage.modified = lambda: next_modified
         scale_new = storage.scale(factory=self.factory, foo=23, bar=42)
-        self.assertEqual(len(storage), 3)
+        self.assertEqual(len(storage), 2)
         self.assertEqual(scale_new['uid'] in storage, True)
         self.assertEqual(scale_old['uid'] in storage, True)
 
@@ -130,7 +128,7 @@ def testCleanUpOldItems(self):
     def testClear(self):
         storage = self.storage
         storage.scale(factory=self.factory, foo=23, bar=42)
-        self.assertEqual(len(storage), 2)
+        self.assertEqual(len(storage), 1)
         storage.clear()
         self.assertEqual(len(storage), 0)
 


Repository: plone.scale


Branch: refs/heads/master
Date: 2015-11-24T15:17:54+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/3a4783e8689cc243cb43e343063403e25f74909c

info['modified'] could be None

Files changed:
M plone/scale/storage.py

diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 6e2c86e..a620b68 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -46,6 +46,21 @@ def __init__(self, context, modified=None):
         self.context = context
         self.modified = modified
 
+    def _modified_since(self, since):
+        if since is None:
+            return False
+        elif self.modified_time is None:
+            return False
+        else:
+            return self.modified_time > since
+
+    @property
+    def modified_time(self):
+        if self.modified is not None:
+            return self.modified()
+        else:
+            return None
+
     def __repr__(self):
         name = self.__class__.__name__
         return '<%s context=%r>' % (name, self.context)
@@ -69,12 +84,11 @@ def scale(self, factory=None, **parameters):
         key = self.hash(**parameters)
         storage = self.storage
         info = self.get_info_by_hash(key)
-        modified = self.modified and self.modified()
-        if info is not None and modified > info['modified']:
+        if info is not None and self._modified_since(info['modified']):
             # This is a good moment to clear out the cache and remove
             # all scales older than one day.
             for hash, value in storage.items():
-                if value['modified'] < modified - KEEP_SCALE_MILLIS:
+                if value['modified'] < self.modified_time - KEEP_SCALE_MILLIS:
                     del storage[hash]
             info = None     # invalidate when the image was updated
         if info is None and factory:
@@ -85,7 +99,7 @@ def scale(self, factory=None, **parameters):
                 uid = str(uuid4())
                 info = dict(uid=uid, data=data, width=width, height=height,
                             mimetype='image/%s' % format.lower(), key=key,
-                            modified=modified)
+                            modified=self.modified_time)
                 storage[uid] = info
         return info
 


Repository: plone.scale


Branch: refs/heads/master
Date: 2015-11-24T15:30:50+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/8b89545179ce47a659d00d41fc827ece4f5cde05

change when cache is cleared

Files changed:
M plone/scale/storage.py

diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index a620b68..2f16f88 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -85,15 +85,14 @@ def scale(self, factory=None, **parameters):
         storage = self.storage
         info = self.get_info_by_hash(key)
         if info is not None and self._modified_since(info['modified']):
-            # This is a good moment to clear out the cache and remove
-            # all scales older than one day.
-            for hash, value in storage.items():
-                if value['modified'] < self.modified_time - KEEP_SCALE_MILLIS:
-                    del storage[hash]
-            info = None     # invalidate when the image was updated
+            # invalidate when the image was updated
+            info = None
         if info is None and factory:
             result = factory(**parameters)
             if result is not None:
+                # storage will be modified:
+                # good time to also cleanup
+                self._cleanup()
                 data, format, dimensions = result
                 width, height = dimensions
                 uid = str(uuid4())
@@ -103,6 +102,15 @@ def scale(self, factory=None, **parameters):
                 storage[uid] = info
         return info
 
+    def _cleanup(self):
+        storage = self.storage
+        modified_time = self.modified_time
+        for key, value in storage.items():
+            # clear cache from scales older than one day
+            if (modified_time and
+                    value['modified'] < modified_time - KEEP_SCALE_MILLIS):
+                del storage[key]
+
     def __getitem__(self, uid):
         return self.storage[uid]
 


Repository: plone.scale


Branch: refs/heads/master
Date: 2015-11-24T15:32:14+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/854b97c672c2b60143ac9328a17833801a119c93

remove info stored by tuple keys

Files changed:
M plone/scale/storage.py

diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 2f16f88..5abf98d 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -106,6 +106,10 @@ def _cleanup(self):
         storage = self.storage
         modified_time = self.modified_time
         for key, value in storage.items():
+            # remove info stored by tuple keys
+            # before refactoring
+            if isinstance(key, tuple):
+                del storage[key]
             # clear cache from scales older than one day
             if (modified_time and
                     value['modified'] < modified_time - KEEP_SCALE_MILLIS):


Repository: plone.scale


Branch: refs/heads/master
Date: 2015-11-24T16:01:38+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/ef455f1116fcf0323c707ea92c3b8abf7d4ec9eb

get rid of old scales

Files changed:
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 5abf98d..3df7d96 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -85,6 +85,7 @@ def scale(self, factory=None, **parameters):
         storage = self.storage
         info = self.get_info_by_hash(key)
         if info is not None and self._modified_since(info['modified']):
+            del storage[info['uid']]
             # invalidate when the image was updated
             info = None
         if info is None and factory:
diff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py
index 0395b22..1e05d7f 100644
--- a/plone/scale/tests/test_storage.py
+++ b/plone/scale/tests/test_storage.py
@@ -109,9 +109,9 @@ def testCleanUpOldItems(self):
         next_modified = storage.modified() + 1
         storage.modified = lambda: next_modified
         scale_new = storage.scale(factory=self.factory, foo=23, bar=42)
-        self.assertEqual(len(storage), 2)
+        self.assertEqual(len(storage), 1)
         self.assertEqual(scale_new['uid'] in storage, True)
-        self.assertEqual(scale_old['uid'] in storage, True)
+        self.assertEqual(scale_old['uid'] in storage, False)
 
         # When modification time is older than a day, too old scales
         # get purged.


Repository: plone.scale


Branch: refs/heads/master
Date: 2015-11-24T16:02:57+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/29972816d8e84d5e172cc3f499f9e64fd73d2fa0

resolve ZODB conflicts with storage

- conflicts happen when scales are computed by concurrent requests
- as storage is persistent, there is code to migrate from PerssistentDict
  tp ScalesDict

Files changed:
M plone/scale/storage.py

diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 3df7d96..1b73606 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -4,7 +4,11 @@
 from zope.interface import implements
 from zope.annotation import IAnnotations
 from UserDict import DictMixin
+from ZODB.POSException import ConflictError
+import logging
+import pprint
 
+logger = logging.getLogger('plone.scale')
 # Keep old scales around for this amount of milliseconds.
 # This is one day:
 KEEP_SCALE_MILLIS = 24 * 60 * 60 * 1000
@@ -35,6 +39,63 @@ def __getitem__(uid):
         """ Find image scale data based on its uid. """
 
 
+class ScalesDict(PersistentDict):
+
+    def raise_conflict(self, saved, new):
+        logger.info('CONFLICT')
+        logger.info('saved\n' + pprint.pformat(saved))
+        logger.info('new\n' + pprint.pformat(new))
+        raise ConflictError
+
+    def _p_resolveConflict(self, oldState, savedState, newState):
+        logger.info('\nResolve conflict')
+        old = oldState['data']
+        saved = savedState['data']
+        new = newState['data']
+        added = []
+        modified = []
+        deleted = []
+        for key, value in new.items():
+            if key not in old:
+                added.append(key)
+            elif value['modified'] != old[key]['modified']:
+                modified.append(key)
+            # else:
+                # unchanged
+        for key in old:
+            if key not in new:
+                deleted.append(key)
+        for key in deleted:
+            if ((key in saved) and
+                    (old[key]['modified'] == saved[key]['modified'])):
+                # unchanged by saved, deleted by new
+                logger.info('deleted %s' % repr(key))
+                del saved[key]
+            else:
+                # modified by saved, deleted by new
+                self.raise_conflict(saved[key], new[key])
+        for key in added:
+            if key in saved:
+                # added by saved, added by new
+                self.raise_conflict(saved[key], new[key])
+            else:
+                # not in saved, added by new
+                logger.info('added %s' % repr(key))
+                saved[key] = new[key]
+        for key in modified:
+            if key not in saved:
+                # deleted by saved, modified by new
+                self.raise_conflict(saved[key], new[key])
+            elif saved[key]['modified'] != old[key]['modified']:
+                # modified by saved, modified by new
+                self.raise_conflict(saved[key], new[key])
+            else:
+                # unchanged in saved, modified by new
+                logger.info('modified %s' % repr(key))
+                saved[key] = new[key]
+        return dict(data=saved)
+
+
 class AnnotationStorage(DictMixin):
     """ An abstract storage for image scale data using annotations and
         implementing :class:`IImageScaleStorage`. Image data is stored as an
@@ -69,8 +130,17 @@ def __repr__(self):
 
     @property
     def storage(self):
-        return IAnnotations(self.context).setdefault('plone.scale',
-                                                     PersistentDict())
+        annotations = IAnnotations(self.context)
+        scales = annotations.setdefault(
+            'plone.scale',
+            ScalesDict()
+        )
+        if not isinstance(scales, ScalesDict):
+            # migrate from PersistentDict to ScalesDict
+            new_scales = ScalesDict(scales)
+            annotations['plone.scale'] = new_scales
+            return new_scales
+        return scales
 
     def hash(self, **parameters):
         return tuple(sorted(parameters.items()))


Repository: plone.scale


Branch: refs/heads/master
Date: 2015-11-24T16:21:38+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/f3b7b6b63e5079f575a0593dad6ff841bab36387

be less verbose

Files changed:
M plone/scale/storage.py

diff --git a/plone/scale/storage.py b/plone/scale/storage.py
index 1b73606..986ed20 100644
--- a/plone/scale/storage.py
+++ b/plone/scale/storage.py
@@ -42,13 +42,13 @@ def __getitem__(uid):
 class ScalesDict(PersistentDict):
 
     def raise_conflict(self, saved, new):
-        logger.info('CONFLICT')
-        logger.info('saved\n' + pprint.pformat(saved))
-        logger.info('new\n' + pprint.pformat(new))
+        logger.info('Conflict')
+        logger.debug('saved\n' + pprint.pformat(saved))
+        logger.debug('new\n' + pprint.pformat(new))
         raise ConflictError
 
     def _p_resolveConflict(self, oldState, savedState, newState):
-        logger.info('\nResolve conflict')
+        logger.debug('Resolve conflict')
         old = oldState['data']
         saved = savedState['data']
         new = newState['data']
@@ -69,7 +69,7 @@ def _p_resolveConflict(self, oldState, savedState, newState):
             if ((key in saved) and
                     (old[key]['modified'] == saved[key]['modified'])):
                 # unchanged by saved, deleted by new
-                logger.info('deleted %s' % repr(key))
+                logger.debug('deleted %s' % repr(key))
                 del saved[key]
             else:
                 # modified by saved, deleted by new
@@ -80,7 +80,7 @@ def _p_resolveConflict(self, oldState, savedState, newState):
                 self.raise_conflict(saved[key], new[key])
             else:
                 # not in saved, added by new
-                logger.info('added %s' % repr(key))
+                logger.debug('added %s' % repr(key))
                 saved[key] = new[key]
         for key in modified:
             if key not in saved:
@@ -91,7 +91,7 @@ def _p_resolveConflict(self, oldState, savedState, newState):
                 self.raise_conflict(saved[key], new[key])
             else:
                 # unchanged in saved, modified by new
-                logger.info('modified %s' % repr(key))
+                logger.debug('modified %s' % repr(key))
                 saved[key] = new[key]
         return dict(data=saved)
 


Repository: plone.scale


Branch: refs/heads/master
Date: 2015-12-07T12:43:50+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.scale/commit/14e4386e94e6016d5c381791346eb5c676623719

update changelog

Files changed:
M docs/changes.rst

diff --git a/docs/changes.rst b/docs/changes.rst
index ac4c95e..6aac806 100644
--- a/docs/changes.rst
+++ b/docs/changes.rst
@@ -5,7 +5,10 @@ Changelog
 1.3.6 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- Resolve conflicts raised when accessing multiple scales concurrently
+  [gotcha]
+
+- Refactor scale storage [gotcha]
 
 
 1.3.5 (2015-03-10)


