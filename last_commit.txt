Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-27T15:38:27+01:00
Author: Daniel Jowett (djowett) <daniel@jowettenterprises.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/fdcd4d520c9bea2935ba67dc808f597ca05be13d

Add descriptions for subscriber tests for content moved / copied to another language folder

Files changed:
M src/plone/app/multilingual/tests/test_subscribers.py

diff --git a/src/plone/app/multilingual/tests/test_subscribers.py b/src/plone/app/multilingual/tests/test_subscribers.py
index 410e1ab..901f5d7 100644
--- a/src/plone/app/multilingual/tests/test_subscribers.py
+++ b/src/plone/app/multilingual/tests/test_subscribers.py
@@ -39,6 +39,10 @@ def test_created_event_on_portal(self):
         self.assertEqual(ILanguage(a_ca).get_language(), '')
 
     def test_moved_event(self):
+        """When an object is moved from within one Language Root Folder into
+        a different Language Root Folder it changes its language to that of the
+        folder it is copied into
+        """
         a_ca = createContentInContainer(
             self.portal['ca'], 'Document', title=u"Test document")
 
@@ -48,6 +52,10 @@ def test_moved_event(self):
         self.assertEqual(ILanguage(a_ca_copied).get_language(), 'en')
 
     def test_copied_event(self):
+        """When an object is copied from within one Language Root Folder into
+        a different Language Root Folder it changes its language to that of the
+        folder it is copied into
+        """
         a_ca = createContentInContainer(
             self.portal['ca'], 'Document', title=u"Test document")
 


Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-27T15:43:53+01:00
Author: Daniel Jowett (djowett) <daniel@jowettenterprises.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/468b4055e94b12050448e9b760533f2ec8e26242

Add tests for copying / moving content to Media folders (proving issue #205)

Files changed:
M src/plone/app/multilingual/tests/test_subscribers.py

diff --git a/src/plone/app/multilingual/tests/test_subscribers.py b/src/plone/app/multilingual/tests/test_subscribers.py
index 901f5d7..3668bc3 100644
--- a/src/plone/app/multilingual/tests/test_subscribers.py
+++ b/src/plone/app/multilingual/tests/test_subscribers.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
 import unittest2 as unittest
 
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import ILanguage
+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING
 from plone.dexterity.utils import createContentInContainer
-from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 from zope.interface import alsoProvides
 
 
@@ -63,3 +64,90 @@ def test_copied_event(self):
         self.portal['en'].manage_pasteObjects(id_)
         a_ca_copied = self.portal['en'][a_ca.id]
         self.assertEqual(ILanguage(a_ca_copied).get_language(), 'en')
+
+
+    def test_moved_to_media_folder(self):
+        """When an object is moved from within one Language Root Folder into
+        the Language Independent Folder (named 'Media') it becomes language 
+        independent, and it should be visible from the media folder accessed
+        from within other Language Root Folders
+        """
+        a_ca = createContentInContainer(
+            self.portal['ca'], 'Document', title=u"Test document")
+
+        # Test a paste into a subfolder to be ultra cautious
+        ca_media_subfolder = createContentInContainer(
+            self.portal['ca']['media'], 'Folder', title=u"A Folder")
+
+        subfolder_name = ca_media_subfolder.id
+
+        id_ = self.portal['ca'].manage_cutObjects(a_ca.id)
+        ca_media_subfolder.manage_pasteObjects(id_)
+
+        # Get both media folders afresh
+        ca_media_subfolder = self.portal['ca']['media'][subfolder_name]
+        en_media_subfolder = self.portal['en']['media'][subfolder_name]
+        
+        # Check it is in both folder listings
+        self.assertTrue(a_ca.id in ca_media_subfolder)
+        self.assertTrue(a_ca.id in en_media_subfolder)
+
+        # Check it is language independent
+        copy_in_en = en_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_en).get_language(), '')
+        copy_in_ca = ca_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_ca).get_language(), '')
+
+        # Check it is returned in catalog search
+        catalog = getToolByName(self.portal, 'portal_catalog')
+
+        ca_subfolder_path = '/'.join(ca_media_subfolder.getPhysicalPath())
+        ca_folder_contents = [r.id for r in catalog(path=ca_subfolder_path)]
+        self.assertTrue(a_ca.id in ca_folder_contents)
+
+        en_subfolder_path = '/'.join(en_media_subfolder.getPhysicalPath())
+        en_folder_contents = [r.id for r in catalog(path=en_subfolder_path)]
+        self.assertTrue(a_ca.id in en_folder_contents)
+
+
+    def test_copied_to_media_folder(self):
+        """When an object is copied from within one Language Root Folder into
+        the Language Independent Folder (named 'Media') it becomes language 
+        independent, and it should be visible from the media folder accessed
+        from within other Language Root Folders
+        """
+        a_ca = createContentInContainer(
+            self.portal['ca'], 'Document', title=u"Test document")
+
+        # Test a paste into a subfolder to be ultra cautious
+        ca_media_subfolder = createContentInContainer(
+            self.portal['ca']['media'], 'Folder', title=u"A Folder")
+
+        subfolder_name = ca_media_subfolder.id
+        id_ = self.portal['ca'].manage_copyObjects(a_ca.id)
+        ca_media_subfolder.manage_pasteObjects(id_)
+
+        # Get both media folders afresh
+        ca_media_subfolder = self.portal['ca']['media'][subfolder_name]
+        en_media_subfolder = self.portal['en']['media'][subfolder_name]
+        
+        # Check it is in both folder listings
+        self.assertTrue(a_ca.id in ca_media_subfolder)
+        self.assertTrue(a_ca.id in en_media_subfolder)
+
+        # Check it is language independent
+        copy_in_en = en_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_en).get_language(), '')
+        copy_in_ca = ca_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_ca).get_language(), '')
+
+        # Check it is returned in catalog search
+        catalog = getToolByName(self.portal, 'portal_catalog')
+
+        ca_subfolder_path = '/'.join(ca_media_subfolder.getPhysicalPath())
+        ca_folder_contents = [r.id for r in catalog(path=ca_subfolder_path)]
+        self.assertTrue(a_ca.id in ca_folder_contents)
+
+        en_subfolder_path = '/'.join(en_media_subfolder.getPhysicalPath())
+        en_folder_contents = [r.id for r in catalog(path=en_subfolder_path)]
+        self.assertTrue(a_ca.id in en_folder_contents)


Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-27T16:06:31+01:00
Author: Daniel Jowett (djowett) <daniel@jowettenterprises.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/f228b86b4dc8b756f682bb4457ebc89f25834973

Resolve #205 (in master branch) by subscribing to IObjectMovedEvent rather than it's subclass IObjectAddedEvent

This means Cut &amp; Paste are now reindexed as well as Copy &amp; Paste

Files changed:
M CHANGES.rst
M src/plone/app/multilingual/configure.zcml
M src/plone/app/multilingual/subscriber.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 51f294a..84ab287 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,10 @@ New features:
 
 Bug fixes:
 
+- Correct event subscribers so that content cut from one LRF & pasted into the
+  Media folder is shown there when I switch to a second language.
+  [djowett]
+
 - *add item here*
 
 
diff --git a/src/plone/app/multilingual/configure.zcml b/src/plone/app/multilingual/configure.zcml
index 9a26917..61674aa 100644
--- a/src/plone/app/multilingual/configure.zcml
+++ b/src/plone/app/multilingual/configure.zcml
@@ -108,7 +108,7 @@
   <!-- Language independent folder content indexers -->
   <subscriber
       for="plone.dexterity.interfaces.IDexterityContent
-           zope.lifecycleevent.interfaces.IObjectAddedEvent"
+           zope.lifecycleevent.interfaces.IObjectMovedEvent"
       handler=".subscriber.reindex_language_independent"/>
 
   <subscriber
diff --git a/src/plone/app/multilingual/subscriber.py b/src/plone/app/multilingual/subscriber.py
index 66ccf91..d0fe55d 100644
--- a/src/plone/app/multilingual/subscriber.py
+++ b/src/plone/app/multilingual/subscriber.py
@@ -39,6 +39,9 @@ def reindex_language_independent(ob, event):
     if not is_language_independent(ob):
         return
 
+    if IObjectRemovedEvent.providedBy(event):
+        return
+
     pc = getToolByName(ob, 'portal_catalog')
     parent = aq_parent(ob)
 


Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2016-05-28T06:13:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/ec28b6bda77de78f55b9b954a46366a928da530b

Merge pull request #233 from plone/master-fix-issue-205

Fixing issue with items cut &amp; pasted into media folders (master branch)

Files changed:
M CHANGES.rst
M src/plone/app/multilingual/configure.zcml
M src/plone/app/multilingual/subscriber.py
M src/plone/app/multilingual/tests/test_subscribers.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 51f294a..84ab287 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,10 @@ New features:
 
 Bug fixes:
 
+- Correct event subscribers so that content cut from one LRF & pasted into the
+  Media folder is shown there when I switch to a second language.
+  [djowett]
+
 - *add item here*
 
 
diff --git a/src/plone/app/multilingual/configure.zcml b/src/plone/app/multilingual/configure.zcml
index 9a26917..61674aa 100644
--- a/src/plone/app/multilingual/configure.zcml
+++ b/src/plone/app/multilingual/configure.zcml
@@ -108,7 +108,7 @@
   <!-- Language independent folder content indexers -->
   <subscriber
       for="plone.dexterity.interfaces.IDexterityContent
-           zope.lifecycleevent.interfaces.IObjectAddedEvent"
+           zope.lifecycleevent.interfaces.IObjectMovedEvent"
       handler=".subscriber.reindex_language_independent"/>
 
   <subscriber
diff --git a/src/plone/app/multilingual/subscriber.py b/src/plone/app/multilingual/subscriber.py
index 66ccf91..d0fe55d 100644
--- a/src/plone/app/multilingual/subscriber.py
+++ b/src/plone/app/multilingual/subscriber.py
@@ -39,6 +39,9 @@ def reindex_language_independent(ob, event):
     if not is_language_independent(ob):
         return
 
+    if IObjectRemovedEvent.providedBy(event):
+        return
+
     pc = getToolByName(ob, 'portal_catalog')
     parent = aq_parent(ob)
 
diff --git a/src/plone/app/multilingual/tests/test_subscribers.py b/src/plone/app/multilingual/tests/test_subscribers.py
index 410e1ab..3668bc3 100644
--- a/src/plone/app/multilingual/tests/test_subscribers.py
+++ b/src/plone/app/multilingual/tests/test_subscribers.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
 import unittest2 as unittest
 
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import ILanguage
+from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 from plone.app.multilingual.testing import PAM_FUNCTIONAL_TESTING
 from plone.dexterity.utils import createContentInContainer
-from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled
 from zope.interface import alsoProvides
 
 
@@ -39,6 +40,10 @@ def test_created_event_on_portal(self):
         self.assertEqual(ILanguage(a_ca).get_language(), '')
 
     def test_moved_event(self):
+        """When an object is moved from within one Language Root Folder into
+        a different Language Root Folder it changes its language to that of the
+        folder it is copied into
+        """
         a_ca = createContentInContainer(
             self.portal['ca'], 'Document', title=u"Test document")
 
@@ -48,6 +53,10 @@ def test_moved_event(self):
         self.assertEqual(ILanguage(a_ca_copied).get_language(), 'en')
 
     def test_copied_event(self):
+        """When an object is copied from within one Language Root Folder into
+        a different Language Root Folder it changes its language to that of the
+        folder it is copied into
+        """
         a_ca = createContentInContainer(
             self.portal['ca'], 'Document', title=u"Test document")
 
@@ -55,3 +64,90 @@ def test_copied_event(self):
         self.portal['en'].manage_pasteObjects(id_)
         a_ca_copied = self.portal['en'][a_ca.id]
         self.assertEqual(ILanguage(a_ca_copied).get_language(), 'en')
+
+
+    def test_moved_to_media_folder(self):
+        """When an object is moved from within one Language Root Folder into
+        the Language Independent Folder (named 'Media') it becomes language 
+        independent, and it should be visible from the media folder accessed
+        from within other Language Root Folders
+        """
+        a_ca = createContentInContainer(
+            self.portal['ca'], 'Document', title=u"Test document")
+
+        # Test a paste into a subfolder to be ultra cautious
+        ca_media_subfolder = createContentInContainer(
+            self.portal['ca']['media'], 'Folder', title=u"A Folder")
+
+        subfolder_name = ca_media_subfolder.id
+
+        id_ = self.portal['ca'].manage_cutObjects(a_ca.id)
+        ca_media_subfolder.manage_pasteObjects(id_)
+
+        # Get both media folders afresh
+        ca_media_subfolder = self.portal['ca']['media'][subfolder_name]
+        en_media_subfolder = self.portal['en']['media'][subfolder_name]
+        
+        # Check it is in both folder listings
+        self.assertTrue(a_ca.id in ca_media_subfolder)
+        self.assertTrue(a_ca.id in en_media_subfolder)
+
+        # Check it is language independent
+        copy_in_en = en_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_en).get_language(), '')
+        copy_in_ca = ca_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_ca).get_language(), '')
+
+        # Check it is returned in catalog search
+        catalog = getToolByName(self.portal, 'portal_catalog')
+
+        ca_subfolder_path = '/'.join(ca_media_subfolder.getPhysicalPath())
+        ca_folder_contents = [r.id for r in catalog(path=ca_subfolder_path)]
+        self.assertTrue(a_ca.id in ca_folder_contents)
+
+        en_subfolder_path = '/'.join(en_media_subfolder.getPhysicalPath())
+        en_folder_contents = [r.id for r in catalog(path=en_subfolder_path)]
+        self.assertTrue(a_ca.id in en_folder_contents)
+
+
+    def test_copied_to_media_folder(self):
+        """When an object is copied from within one Language Root Folder into
+        the Language Independent Folder (named 'Media') it becomes language 
+        independent, and it should be visible from the media folder accessed
+        from within other Language Root Folders
+        """
+        a_ca = createContentInContainer(
+            self.portal['ca'], 'Document', title=u"Test document")
+
+        # Test a paste into a subfolder to be ultra cautious
+        ca_media_subfolder = createContentInContainer(
+            self.portal['ca']['media'], 'Folder', title=u"A Folder")
+
+        subfolder_name = ca_media_subfolder.id
+        id_ = self.portal['ca'].manage_copyObjects(a_ca.id)
+        ca_media_subfolder.manage_pasteObjects(id_)
+
+        # Get both media folders afresh
+        ca_media_subfolder = self.portal['ca']['media'][subfolder_name]
+        en_media_subfolder = self.portal['en']['media'][subfolder_name]
+        
+        # Check it is in both folder listings
+        self.assertTrue(a_ca.id in ca_media_subfolder)
+        self.assertTrue(a_ca.id in en_media_subfolder)
+
+        # Check it is language independent
+        copy_in_en = en_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_en).get_language(), '')
+        copy_in_ca = ca_media_subfolder[a_ca.id]
+        self.assertEqual(ILanguage(copy_in_ca).get_language(), '')
+
+        # Check it is returned in catalog search
+        catalog = getToolByName(self.portal, 'portal_catalog')
+
+        ca_subfolder_path = '/'.join(ca_media_subfolder.getPhysicalPath())
+        ca_folder_contents = [r.id for r in catalog(path=ca_subfolder_path)]
+        self.assertTrue(a_ca.id in ca_folder_contents)
+
+        en_subfolder_path = '/'.join(en_media_subfolder.getPhysicalPath())
+        en_folder_contents = [r.id for r in catalog(path=en_subfolder_path)]
+        self.assertTrue(a_ca.id in en_folder_contents)


