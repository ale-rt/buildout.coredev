Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2016-11-05T22:23:05+01:00
Author: Gil Forcada (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/ff77f14126c921f5e53caef77666822da091ca6c

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/dexterity/__init__.py
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/id.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/behaviors/nextprevious.py
M plone/app/dexterity/behaviors/related.py
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/clone_type.py
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/fields.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/layout.py
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/browser/overview.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/factories.py
M plone/app/dexterity/interfaces.py
M plone/app/dexterity/permissions.py
M plone/app/dexterity/serialize.py
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/test_constrains.py
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py
M plone/app/dexterity/tests/test_nextprevious.py
M plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/tests/test_robot.py
M plone/app/dexterity/tests/test_upgrades.py
M plone/app/dexterity/upgrades/to2001.py
M plone/app/dexterity/upgrades/to2003.py
M plone/app/dexterity/upgrades/to2004.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6027f2f..f616105 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Update code to follow Plone styleguide.
+  [gforcada]
 
 2.3.4 (2016-10-03)
 ------------------
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py
index ebe5018..60f3708 100644
--- a/plone/app/dexterity/__init__.py
+++ b/plone/app/dexterity/__init__.py
@@ -1,7 +1,9 @@
 # -*- coding: utf-8 -*-
 from zope.i18nmessageid import MessageFactory as ZMessageFactory
+
 import warnings
 
+
 _ = ZMessageFactory('plone')
 
 
diff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py
index 359e21f..4f1daff 100644
--- a/plone/app/dexterity/behaviors/constrains.py
+++ b/plone/app/dexterity/behaviors/constrains.py
@@ -2,6 +2,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 
+
 # constants for enableConstrain. Copied from AT
 ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
 DISABLED = 0  # use default behavior of PortalFolder which uses the FTI info
@@ -103,9 +104,8 @@ def allowedContentTypes(self, context=None):
                     context), context)
             return [t for t in default_addable if t.getId() in return_tids]
         else:
-            raise Exception(
-                "Wrong constraint setting. %i is an invalid value",
-                mode)
+            msg = 'Wrong constraint setting. %i is an invalid value'
+            raise Exception(msg, mode)
 
     def getLocallyAllowedTypes(self, context=None):
         """
@@ -120,7 +120,7 @@ def setLocallyAllowedTypes(self, types):
         defaults = [t.getId() for t in self.getDefaultAddableTypes()]
         for type_ in types:
             if type_ not in defaults:
-                raise ValueError("%s is not a valid type id", type_)
+                raise ValueError('%s is not a valid type id', type_)
         self.context.locally_allowed_types = types
 
     def getImmediatelyAddableTypes(self, context=None):
@@ -154,13 +154,12 @@ def getImmediatelyAddableTypes(self, context=None):
                 parent_constrain_adapter.getImmediatelyAddableTypes(
                     context), context)
         else:
-            raise Exception(
-                "Wrong constraint setting. %i is an invalid value",
-                mode)
+            msg = 'Wrong constraint setting. %i is an invalid value'
+            raise Exception(msg, mode)
 
     def setImmediatelyAddableTypes(self, types):
         defaults = [t.getId() for t in self.getDefaultAddableTypes()]
         for type_ in types:
             if type_ not in defaults:
-                raise ValueError("%s is not a valid type id", type_)
+                raise ValueError('%s is not a valid type id', type_)
         self.context.immediately_addable_types = types
diff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py
index cb6c741..5e1c6c6 100644
--- a/plone/app/dexterity/behaviors/filename.py
+++ b/plone/app/dexterity/behaviors/filename.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.utils import safe_hasattr
 from plone.app.content.interfaces import INameFromTitle
 from plone.rfc822.interfaces import IPrimaryFieldInfo
+from Products.CMFPlone.utils import safe_hasattr
 from zope.component import adapter
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 
 
 class INameFromFileName(Interface):
diff --git a/plone/app/dexterity/behaviors/id.py b/plone/app/dexterity/behaviors/id.py
index 8af6262..1cf8046 100644
--- a/plone/app/dexterity/behaviors/id.py
+++ b/plone/app/dexterity/behaviors/id.py
@@ -10,6 +10,7 @@
 from zope import schema
 from zope.container.interfaces import INameChooser
 from zope.interface import provider
+
 import transaction
 
 
diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index f707f92..e05629b 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -1,7 +1,6 @@
+# -*- coding: utf-8 -*-
 from AccessControl.SecurityManagement import getSecurityManager
 from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from datetime import datetime
 from plone.app.dexterity import _
 from plone.app.z3cform.widget import AjaxSelectFieldWidget
@@ -12,6 +11,8 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.utils import safe_unicode
 from plone.supermodel import model
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from z3c.form.interfaces import IAddForm
 from z3c.form.interfaces import IEditForm
 from z3c.form.widget import ComputedWidgetAttribute
@@ -25,6 +26,7 @@
 from zope.schema.interfaces import ISequence
 from zope.schema.interfaces import IText
 
+
 # Behavior interfaces to display Dublin Core metadata fields on Dexterity
 # content edit forms.
 #
@@ -128,8 +130,8 @@ class ICategorization(model.Schema):
 
 
 class EffectiveAfterExpires(Invalid):
-    __doc__ = _("error_invalid_publication",
-                default=u"Invalid effective or expires date")
+    __doc__ = _('error_invalid_publication',
+                default=u'Invalid effective or expires date')
 
 
 @provider(IFormFieldProvider)
@@ -145,8 +147,8 @@ class IPublication(model.Schema):
         title=_(u'label_effective_date', u'Publishing Date'),
         description=_(
             u'help_effective_date',
-            default=u"If this date is in the future, the content will "
-                    u"not show up in listings and searches until this date."),
+            default=u'If this date is in the future, the content will '
+                    u'not show up in listings and searches until this date.'),
         required=False
     )
     directives.widget('effective', DatetimeFieldWidget)
@@ -155,8 +157,8 @@ class IPublication(model.Schema):
         title=_(u'label_expiration_date', u'Expiration Date'),
         description=_(
             u'help_expiration_date',
-            default=u"When this date is reached, the content will no"
-                    u"longer be visible in listings and searches."),
+            default=u'When this date is reached, the content will no'
+                    u'longer be visible in listings and searches.'),
         required=False
     )
     directives.widget('expires', DatetimeFieldWidget)
@@ -165,8 +167,8 @@ class IPublication(model.Schema):
     def validate_start_end(data):
         if data.effective and data.expires and data.effective > data.expires:
             raise EffectiveAfterExpires(
-                _("error_expiration_must_be_after_effective_date",
-                  default=u"Expiration date must be after publishing date.")
+                _('error_expiration_must_be_after_effective_date',
+                  default=u'Expiration date must be after publishing date.')
             )
 
     directives.omitted('effective', 'expires')
@@ -191,9 +193,9 @@ class IOwnership(model.Schema):
         title=_(u'label_creators', u'Creators'),
         description=_(
             u'help_creators',
-            default=u"Persons responsible for creating the content of "
-                    u"this item. Please enter a list of user names, one "
-                    u"per line. The principal creator should come first."
+            default=u'Persons responsible for creating the content of '
+                    u'this item. Please enter a list of user names, one '
+                    u'per line. The principal creator should come first.'
         ),
         value_type=schema.TextLine(),
         required=False,
@@ -209,9 +211,9 @@ class IOwnership(model.Schema):
         title=_(u'label_contributors', u'Contributors'),
         description=_(
             u'help_contributors',
-            default=u"The names of people that have contributed "
-                    u"to this item. Each contributor should "
-                    u"be on a separate line."),
+            default=u'The names of people that have contributed '
+                    u'to this item. Each contributor should '
+                    u'be on a separate line.'),
         value_type=schema.TextLine(),
         required=False,
         missing_value=(),
diff --git a/plone/app/dexterity/behaviors/nextprevious.py b/plone/app/dexterity/behaviors/nextprevious.py
index adec8bf..30c63e3 100644
--- a/plone/app/dexterity/behaviors/nextprevious.py
+++ b/plone/app/dexterity/behaviors/nextprevious.py
@@ -1,21 +1,21 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
 from Acquisition import aq_base
-from zope.component import getUtility
-from Products.CMFCore.interfaces import IContentish
 from plone.app.dexterity import _
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
 from plone.autoform import directives
 from plone.autoform.interfaces import IFormFieldProvider
-from plone.supermodel import model
 from plone.registry.interfaces import IRegistry
+from plone.supermodel import model
+from Products.CMFCore.interfaces import IContentish
 from z3c.form import widget
 from z3c.form.interfaces import IAddForm
 from z3c.form.interfaces import IEditForm
 from zope import schema
 from zope.component import adapter
-from zope.interface import Interface
+from zope.component import getUtility
 from zope.interface import implementer
+from zope.interface import Interface
 from zope.interface import provider
 
 
diff --git a/plone/app/dexterity/behaviors/related.py b/plone/app/dexterity/behaviors/related.py
index bb0e5f9..4405c59 100644
--- a/plone/app/dexterity/behaviors/related.py
+++ b/plone/app/dexterity/behaviors/related.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """BBB import for 'Related Items' behavior that was moved to
 plone.app.relationfield in Dexterity 2.0.
 """
diff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py
index 057854c..e5ccbb0 100644
--- a/plone/app/dexterity/behaviors/tests/test_id.py
+++ b/plone/app/dexterity/behaviors/tests/test_id.py
@@ -1,8 +1,10 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.testing import z2
+
 import transaction
 import unittest
 
@@ -21,8 +23,8 @@ def setUp(self):
         # prepare browser
         self.browser = z2.Browser(self.layer['app'])
         self.browser.addHeader(
-            'Authorization', 'Basic %s:%s'
-            % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+            'Authorization',
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )
         )
         self.browser.open('http://nohost/plone')
 
diff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py
index 7ffff1b..207b27b 100644
--- a/plone/app/dexterity/behaviors/tests/test_metadata.py
+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py
@@ -64,6 +64,7 @@ class TestDCFieldProperty(unittest.TestCase):
 
     def _makeOne(self):
         class Dummy(object):
+
             def addCreator(self, creator=None):
                 self.creators = (creator or 'dummy_user', )
 
diff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py
index 21b310f..273f5f5 100644
--- a/plone/app/dexterity/browser/add_type.py
+++ b/plone/app/dexterity/browser/add_type.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity import _
 from plone.app.dexterity.interfaces import ITypeSettings
 from plone.dexterity.fti import DexterityFTI
 from plone.z3cform.layout import wrap_form
+from Products.CMFCore.utils import getToolByName
 from z3c.form import field
 from z3c.form import form
 
@@ -24,7 +24,7 @@ def create(self, data):
         if data['description']:
             data['description'] = data['description'].encode('utf8')
         data['i18n_domain'] = 'plone'
-        data['behaviors'] = "\n".join([
+        data['behaviors'] = '\n'.join([
             'plone.app.dexterity.behaviors.metadata.IDublinCore',
             'plone.app.content.interfaces.INameFromTitle',
         ])
@@ -50,7 +50,7 @@ def add(self, fti):
     def nextURL(self):
         url = self.context.absolute_url()
         if self.fti_id is not None:
-            url += '/%s/@@fields' % self.fti_id
+            url += '/{0}/@@fields'.format(self.fti_id)
         return url
 
 TypeAddFormPage = wrap_form(TypeAddForm)
diff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py
index 905f8f2..c859c2b 100644
--- a/plone/app/dexterity/browser/behaviors.py
+++ b/plone/app/dexterity/browser/behaviors.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
 from collections import Counter
-from operator import attrgetter
 from copy import deepcopy
+from operator import attrgetter
 from plone.app.dexterity import _
 from plone.app.dexterity.browser.layout import TypeFormLayout
 from plone.app.dexterity.interfaces import ITypeSchemaContext
 from plone.behavior.interfaces import IBehavior
-from plone.behavior.registration import lookup_behavior_registration
 from plone.behavior.registration import BehaviorRegistrationNotFound
+from plone.behavior.registration import lookup_behavior_registration
 from plone.dexterity.fti import DexterityFTIModificationDescription
 from z3c.form import field
 from z3c.form import form
@@ -18,6 +18,7 @@
 from zope.component import getUtilitiesFor
 from zope.lifecycleevent import modified
 
+
 TTW_BEHAVIOR_BLACKLIST = [
     # skip deprecated behavior
     'plone.app.dexterity.behaviors.related.IRelatedItems',
@@ -25,7 +26,7 @@
 
 
 def behaviorConfigurationModified(object, event):
-    description = DexterityFTIModificationDescription("behaviors", "")
+    description = DexterityFTIModificationDescription('behaviors', '')
     modified(object.fti, description)
 
 
diff --git a/plone/app/dexterity/browser/clone_type.py b/plone/app/dexterity/browser/clone_type.py
index af00b2c..5fd573c 100644
--- a/plone/app/dexterity/browser/clone_type.py
+++ b/plone/app/dexterity/browser/clone_type.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity import _
 from plone.app.dexterity.interfaces import ITypeSettings
 from plone.dexterity.fti import DexterityFTI
 from plone.z3cform.layout import wrap_form
-from z3c.form import form
+from Products.CMFCore.utils import getToolByName
 from z3c.form import field
+from z3c.form import form
 
 
 class TypeCloneForm(form.AddForm):
diff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py
index 20d7708..5041631 100644
--- a/plone/app/dexterity/browser/export.py
+++ b/plone/app/dexterity/browser/export.py
@@ -2,14 +2,15 @@
 # @@types-export view for dexterity types configlet. View support for the
 # "Export" button. This is done by repurposing the GS typeinfo export and
 # removing unselected type information from its output.
+from lxml import etree
+from plone.supermodel import serializeModel
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.GenericSetup.context import BaseContext
 from Products.GenericSetup.context import TarballExportContext
 from StringIO import StringIO
-from lxml import etree
-from plone.supermodel import serializeModel
 from zipfile import ZipFile
+
 import time
 
 
@@ -22,7 +23,7 @@ def __init__(self, tool, typelist, encoding=None, base_name='setup_tool'):
         self.typelist = typelist
         self.filenames = ['types.xml']
         for tn in typelist:
-            self.filenames.append('types/%s.xml' % tn)
+            self.filenames.append('types/{0}.xml'.format(tn))
 
         timestamp = time.gmtime()
         self._archive_filename = (base_name + '-%4d%02d%02d%02d%02d%02d.zip'
@@ -50,7 +51,7 @@ def writeDataFile(self, filename, text, content_type, subdir=None):
             # Add a marker for ZopeSkel additions
             root.append(etree.Comment(' -*- extra stuff goes here -*- '))
             # minor prettifying
-            text = '<?xml version="1.0"?>\n%s' % etree.tostring(root)
+            text = '<?xml version="1.0"?>\n{0}'.format(etree.tostring(root))
             text = text.replace('<!--', ' <!--')
             text = text.replace('-->', '-->\n')
 
@@ -74,8 +75,10 @@ def __call__(self):
         filename = context.getArchiveFilename()
 
         RESPONSE.setHeader('Content-type', 'application/zip')
-        RESPONSE.setHeader('Content-disposition',
-                           'attachment; filename=%s' % filename)
+        RESPONSE.setHeader(
+            'Content-disposition',
+            'attachment; filename={0}'.format(filename)
+        )
 
         return context.getArchive()
 
@@ -95,12 +98,14 @@ def __call__(self):
             # return a single XML file
 
             item = items[0]
-            filename = '%s.xml' % item
+            filename = '{0}.xml'.format(item)
             text = serializeModel(pt[item].lookupModel())
 
             RESPONSE.setHeader('Content-type', 'application/xml')
-            RESPONSE.setHeader('Content-disposition',
-                               'attachment; filename=%s' % filename)
+            RESPONSE.setHeader(
+                'Content-disposition',
+                'attachment; filename={0}'.format(filename)
+            )
 
             return text
 
@@ -115,15 +120,17 @@ def __call__(self):
             archive = ZipFile(archive_stream, 'w')
 
             for item in items:
-                filename = 'models/%s.xml' % item
+                filename = 'models/{0}.xml'.format(item)
                 text = serializeModel(pt[item].lookupModel())
                 archive.writestr(filename, text)
 
             archive.close()
 
             RESPONSE.setHeader('Content-type', 'application/zip')
-            RESPONSE.setHeader('Content-disposition',
-                               'attachment; filename=%s' % archive_filename)
+            RESPONSE.setHeader(
+                'Content-disposition',
+                'attachment; filename={0}'.format(archive_filename)
+            )
 
             return archive_stream.getvalue()
 
diff --git a/plone/app/dexterity/browser/fields.py b/plone/app/dexterity/browser/fields.py
index a93d40e..072ebdb 100644
--- a/plone/app/dexterity/browser/fields.py
+++ b/plone/app/dexterity/browser/fields.py
@@ -4,8 +4,10 @@
 from plone.schemaeditor.browser.schema.listing import ReadOnlySchemaListing
 from plone.schemaeditor.browser.schema.listing import SchemaListing
 from z3c.form import button
+
 import pkg_resources
 
+
 # We want to add a Plone-specific feature to the SchemaListing
 # form from plone.schemaeditor. We'll do this by subclassing, then
 # adding the plone-specific button for the ace model editor.
@@ -17,7 +19,7 @@ def handleModelEdit(self, action):
         self.request.response.redirect('@@modeleditor')
 
 if pkg_resources.get_distribution('plone.resourceeditor'):
-    but = button.Button("modeleditor", title=u'Edit XML Field Model')
+    but = button.Button('modeleditor', title=u'Edit XML Field Model')
     EnhancedSchemaListing.buttons += button.Buttons(but)
     handler = button.Handler(but, EnhancedSchemaListing.handleModelEdit)
     EnhancedSchemaListing.handlers.addHandler(but, handler)
diff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py
index 44ef321..9969a3e 100644
--- a/plone/app/dexterity/browser/import_types.py
+++ b/plone/app/dexterity/browser/import_types.py
@@ -1,25 +1,26 @@
 # -*- coding: utf-8 -*-
 """ Support for importing Dexterity types from GS zip file.
 """
+from cStringIO import StringIO
 # XXX: need to make exceptions more specific, shorten messages
 from DateTime.DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.context import BaseContext
-from Products.GenericSetup.interfaces import IImportContext
-from cStringIO import StringIO
 from lxml import etree
 from plone.app.dexterity import _
 from plone.namedfile.field import NamedFile
 from plone.z3cform.layout import wrap_form
+from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.context import BaseContext
+from Products.GenericSetup.interfaces import IImportContext
 from z3c.form import field
 from z3c.form import form
 from zipfile import BadZipfile
 from zipfile import ZipFile
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.interface import Invalid
-from zope.interface import implementer
 from zope.interface import invariant
 from zope.site.hooks import getSite
+
 import os.path
 import zope.schema
 
@@ -74,11 +75,12 @@ def isGoodImportFile(data):
                         'Types in archive must be only Dexterity types.'
                     ),)
                 if attribs['name'] in existing_types:
-                    raise Invalid(_(
+                    msg = (
                         u'One or more types in the import archive is an '
                         u'existing type. Delete "%s" if you '
-                        u'really wish to replace it.' % attribs['name']
-                    ),)
+                        u'really wish to replace it.'
+                    )
+                    raise Invalid(_(msg, attribs['name']), )
 
 
 @implementer(ITypeProfileImport)
diff --git a/plone/app/dexterity/browser/layout.py b/plone/app/dexterity/browser/layout.py
index 0d2abdc..b428767 100644
--- a/plone/app/dexterity/browser/layout.py
+++ b/plone/app/dexterity/browser/layout.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from plone.app.dexterity import _
 from plone.z3cform.layout import FormWrapper
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 
 class TypeFormLayout(FormWrapper):
diff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py
index 8dd9689..8e37130 100644
--- a/plone/app/dexterity/browser/modeleditor.py
+++ b/plone/app/dexterity/browser/modeleditor.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
-from Products.Five import BrowserView
 from lxml import etree
 from plone.app.dexterity import _
 from plone.supermodel.parser import SupermodelParseError
+from Products.Five import BrowserView
 from zope.component import queryMultiAdapter
+
 import json
 import plone.supermodel
 
+
 NAMESPACE = '{http://namespaces.plone.org/supermodel/schema}'
 
 
@@ -21,7 +23,7 @@ def modelSource(self):
 
 def authorized(context, request):
     authenticator = queryMultiAdapter((context, request),
-                                      name=u"authenticator")
+                                      name=u'authenticator')
     return authenticator and authenticator.verify()
 
 
@@ -44,7 +46,9 @@ def __call__(self):
             except etree.XMLSyntaxError, e:
                 return json.dumps({
                     'success': False,
-                    'message': "XMLSyntaxError: %s" % e.message.encode('utf8')
+                    'message': 'XMLSyntaxError: {0}'.format(
+                        e.message.encode('utf8')
+                    )
                 })
 
             # a little more sanity checking, look at first two element levels
@@ -65,12 +69,12 @@ def __call__(self):
             # can supermodel parse it?
             # This is mainly good for catching bad dotted names.
             try:
-                plone.supermodel.loadString(source, policy=u"dexterity")
+                plone.supermodel.loadString(source, policy=u'dexterity')
             except SupermodelParseError, e:
                 message = e.args[0].replace('\n  File "<unknown>"', '')
                 return json.dumps({
                     'success': False,
-                    'message': u"SuperModelParseError: %s" % message
+                    'message': u'SuperModelParseError: {0}'.format(message)
                 })
 
             # clean up formatting sins
@@ -85,4 +89,4 @@ def __call__(self):
             fti.manage_changeProperties(model_source=source)
 
             self.request.response.setHeader('Content-Type', 'application/json')
-            return json.dumps({'success': True, 'message': _(u"Saved")})
+            return json.dumps({'success': True, 'message': _(u'Saved')})
diff --git a/plone/app/dexterity/browser/overview.py b/plone/app/dexterity/browser/overview.py
index 1203560..0762894 100644
--- a/plone/app/dexterity/browser/overview.py
+++ b/plone/app/dexterity/browser/overview.py
@@ -3,7 +3,8 @@
 from plone.app.dexterity.browser.layout import TypeFormLayout
 from plone.app.dexterity.interfaces import ITypeSettings
 from Products.CMFCore.interfaces import IFolderish
-from z3c.form import form, field
+from z3c.form import field
+from z3c.form import form
 from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
 from zope.dottedname.resolve import resolve as resolveDottedName
 
diff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py
index 5d4dcd8..0aafcb2 100644
--- a/plone/app/dexterity/browser/types.py
+++ b/plone/app/dexterity/browser/types.py
@@ -1,9 +1,5 @@
 # -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-from Products.Five.browser.pagetemplatefile \
-    import ViewPageTemplateFile as FiveViewPageTemplateFile
-from ZPublisher.BaseRequest import DefaultPublishTraverse
 from plone.app.dexterity import _
 from plone.app.dexterity.browser.utils import UTF8Property
 from plone.app.dexterity.interfaces import ITypeSchemaContext
@@ -16,6 +12,8 @@
 from plone.z3cform import layout
 from plone.z3cform.crud import crud
 from plone.z3cform.layout import FormWrapper
+from Products.CMFCore.utils import getToolByName
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile as FiveViewPageTemplateFile  # noqa
 from z3c.form import button
 from z3c.form import field
 from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
@@ -26,6 +24,8 @@
 from zope.component import getUtility
 from zope.interface import implementer
 from zope.publisher.interfaces.browser import IBrowserPublisher
+from ZPublisher.BaseRequest import DefaultPublishTraverse
+
 import urllib
 
 
@@ -76,33 +76,38 @@ def handleClone(self, action):
             self.status = _(u'Please select a single type to clone.')
         elif len(selected) == 1:
             id = selected[0][0]
-            url = '%s/%s/@@clone' % (self.context.context.absolute_url(), id)
+            url = '{0}/{1}/@@clone'.format(
+                self.context.context.absolute_url(),
+                id
+            )
             self.request.response.redirect(url)
         else:
             self.status = _(u'Please select a type to clone.')
 
     @button.buttonAndHandler(_(u'Export Type Profiles'))
     def handleExport(self, action):
-        selected = ",".join([items[0] for items in self.selected_items()])
+        selected = ','.join([items[0] for items in self.selected_items()])
 
         if len(selected) == 0:
             self.status = _(u'Please select types to export.')
         elif len(selected) > 0:
-            url = '%s/@@types-export?selected=%s' % \
-                (self.context.context.absolute_url(),
-                 urllib.quote(selected))
+            url = '{0}/@@types-export?selected={1}'.format(
+                self.context.context.absolute_url(),
+                urllib.quote(selected),
+            )
             self.request.response.redirect(url)
 
     @button.buttonAndHandler(_(u'Export Schema Models'))
     def handleExportModels(self, action):
-        selected = ",".join([items[0] for items in self.selected_items()])
+        selected = ','.join([items[0] for items in self.selected_items()])
 
         if len(selected) == 0:
             self.status = _(u'Please select types to export.')
         elif len(selected) > 0:
-            url = '%s/@@models-export?selected=%s' % \
-                (self.context.context.absolute_url(),
-                 urllib.quote(selected))
+            url = '{0}/@@models-export?selected={1}'.format(
+                self.context.context.absolute_url(),
+                urllib.quote(selected)
+            )
             self.request.response.redirect(url)
 
 
@@ -110,7 +115,7 @@ class TypesEditFormWrapper(FormWrapper):
     """ Render Plone frame around our form with little modifications """
 
     form = TypeEditForm
-    index = FiveViewPageTemplateFile("typesformwrapper.pt")
+    index = FiveViewPageTemplateFile('typesformwrapper.pt')
 
 
 @adapter(IDexterityFTI)
@@ -194,10 +199,10 @@ def description(self):
             )
         return _(
             'help_addcontenttype_button',
-            default= u'Content types show up on Plone\'s "Add Item" menu and '
-                     u'allow you to store custom data in your site. Click the '
-                     u'"Add Content Type" button to begin creating a new '
-                     u'content type with its own fields.')
+            default=u'Content types show up on Plone\'s "Add Item" menu and '
+            u'allow you to store custom data in your site. Click the '
+            u'"Add Content Type" button to begin creating a new '
+            u'content type with its own fields.')
 
     template = ViewPageTemplateFile('types_listing.pt')
     view_schema = field.Fields(ITypeSettings).select('title', 'description')
diff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py
index 782a102..59e4569 100644
--- a/plone/app/dexterity/factories.py
+++ b/plone/app/dexterity/factories.py
@@ -1,17 +1,19 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.interfaces._content import IFolderish
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import utils as ploneutils
 from plone.app.dexterity.interfaces import IDXFileFactory
 from plone.dexterity.utils import createContentInContainer
 from plone.namedfile.file import NamedBlobFile
 from plone.namedfile.file import NamedBlobImage
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import utils as ploneutils
 from thread import allocate_lock
 from zope.component import adapter
 from zope.container.interfaces import INameChooser
 from zope.interface import implementer
+
 import transaction
 
+
 upload_lock = allocate_lock()
 
 
@@ -26,7 +28,7 @@ def __call__(self, name, content_type, data):
         ctr = getToolByName(self.context, 'content_type_registry')
         type_ = ctr.findTypeName(name.lower(), content_type, data) or 'File'
 
-        name = name.decode("utf8")
+        name = name.decode('utf8')
 
         chooser = INameChooser(self.context)
 
diff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py
index 31912e6..1fb34d2 100644
--- a/plone/app/dexterity/interfaces.py
+++ b/plone/app/dexterity/interfaces.py
@@ -1,14 +1,15 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity import _
 from plone.app.widgets.interfaces import IFileFactory
+from Products.CMFCore.utils import getToolByName
 from z3c.form import validator
 from zope import schema
 from zope.interface import Attribute
 from zope.interface import Interface
 from zope.interface import Invalid
 from zope.publisher.interfaces.browser import IBrowserPage
+
 import re
 
 
@@ -103,8 +104,8 @@ def validate(self, value):
 
         ttool = getToolByName(self.context, 'portal_types')
         if value in ttool.objectIds():
-            raise Invalid(_(u"There is already a content type named '${name}'",
-                          mapping={'name': value}))
+            msg = u"There is already a content type named '${name}'"
+            raise Invalid(_(msg, mapping={'name': value}))
 
 validator.WidgetValidatorDiscriminators(
     TypeIdValidator,
@@ -123,9 +124,8 @@ def validate(self, value):
                 continue
 
             if existing_fti.Title() == value:
-                raise Invalid(
-                    _(u"There is already a content type named '${name}'",
-                      mapping={'name': value}))
+                msg = u"There is already a content type named '${name}'"
+                raise Invalid(_(msg, mapping={'name': value}))
 
 validator.WidgetValidatorDiscriminators(
     TypeTitleValidator,
diff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py
index 99c94c3..dd8f36b 100644
--- a/plone/app/dexterity/permissions.py
+++ b/plone/app/dexterity/permissions.py
@@ -8,8 +8,8 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.utils import iterSchemata
 from plone.supermodel.utils import mergedTaggedValueDict
-from z3c.form.interfaces import IForm
 from z3c.form.interfaces import IFieldWidget
+from z3c.form.interfaces import IForm
 from zope.component import adapts
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
diff --git a/plone/app/dexterity/serialize.py b/plone/app/dexterity/serialize.py
index 690870d..5c5122d 100644
--- a/plone/app/dexterity/serialize.py
+++ b/plone/app/dexterity/serialize.py
@@ -49,4 +49,4 @@ def serializeSchema(schema):
         syncSchema(schema, model.schemata[schemaName], overwrite=True)
         fti.model_source = serializeModel(model)
     else:
-        raise TypeError("Changes to non-dynamic schemata not yet supported.")
+        raise TypeError('Changes to non-dynamic schemata not yet supported.')
diff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py
index 8acea54..3dbcba2 100644
--- a/plone/app/dexterity/testing.py
+++ b/plone/app/dexterity/testing.py
@@ -23,13 +23,13 @@ def setUpPloneSite(self, portal):
 
 DEXTERITY_INTEGRATION_TESTING = IntegrationTesting(
     bases=(DEXTERITY_FIXTURE,),
-    name="dexterity:Integration"
+    name='dexterity:Integration'
 )
 DEXTERITY_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(DEXTERITY_FIXTURE,),
-    name="dexterity:Functional"
+    name='dexterity:Functional'
 )
 DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(
     bases=(DEXTERITY_FIXTURE, AUTOLOGIN_LIBRARY_FIXTURE, z2.ZSERVER_FIXTURE),
-    name="dexterity:Acceptance"
+    name='dexterity:Acceptance'
 )
diff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py
index b732d31..33179b6 100644
--- a/plone/app/dexterity/tests/test_constrains.py
+++ b/plone/app/dexterity/tests/test_constrains.py
@@ -1,18 +1,19 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 from plone.app.content.browser.constraintypes import IConstrainForm
 from plone.app.dexterity.behaviors import constrains
 from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+from plone.app.testing import login
+from plone.app.testing import setRoles
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.app.testing import TEST_USER_ID
-from plone.app.testing import login
-from plone.app.testing import setRoles
 from plone.dexterity.fti import DexterityFTI
 from plone.testing.z2 import Browser
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 from zope.interface.exceptions import Invalid
+
 import unittest
 
 
@@ -58,9 +59,12 @@ def setUp(self):
 
         self.types_tool = getToolByName(self.portal, 'portal_types')
         folder_type = self.types_tool.getTypeInfo(self.folder)
-        self.default_types = [t for t in self.types_tool.listTypeInfo() if
-                              t.isConstructionAllowed(self.folder)
-                              and folder_type.allowType(t.getId())]
+        self.default_types = [
+            t
+            for t in self.types_tool.listTypeInfo()
+            if t.isConstructionAllowed(self.folder) and
+            folder_type.allowType(t.getId())
+        ]
         assert len(self.default_types) > 1
         self.types_id_subset = [t.getId() for t in self.default_types][:1]
 
@@ -85,7 +89,7 @@ def test_constrainTypesModeValidSet(self):
     def test_constrainTypesModeInvalidSet(self):
         behavior = ISelectableConstrainTypes(self.folder)
         self.assertRaises(
-            ValueError, behavior.setConstrainTypesMode, "INVALID")
+            ValueError, behavior.setConstrainTypesMode, 'INVALID')
 
     def test_canSetConstrainTypesMode(self):
         behavior = ISelectableConstrainTypes(self.folder)
@@ -300,7 +304,7 @@ def test_allowedContentTypesExit3(self):
 
         behavior = ISelectableConstrainTypes(self.inner_folder)
         behavior.setConstrainTypesMode(constrains.ACQUIRE)
-        self.assertEquals(
+        self.assertEqual(
             self.types_id_subset,
             [x.getId() for x in behavior.allowedContentTypes()]
         )
@@ -355,7 +359,7 @@ def setUp(self):
         self.browser.handleErrors = False
         self.browser.addHeader(
             'Authorization',
-            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
         )
 
     def test_folder_view(self):
@@ -365,10 +369,12 @@ def test_folder_view(self):
 
     def test_folder_restrictions_view(self):
         self.browser.open(self.folder_url + '/folder_constraintypes_form')
-        self.assertTrue("Restrict what types" in self.browser.contents)
-        self.assertTrue("// Custom form constraints for constrain form" in
-                        self.browser.contents)
-        self.assertTrue("current_prefer_form" in self.browser.contents)
+        self.assertIn('Restrict what types', self.browser.contents)
+        self.assertIn(
+            '// Custom form constraints for constrain form',
+            self.browser.contents,
+        )
+        self.assertIn('current_prefer_form', self.browser.contents)
 
     def test_form_save_restrictions(self):
         self.browser.open(self.folder_url)
@@ -377,23 +383,23 @@ def test_form_save_restrictions(self):
         def ctrl(name):
             return self.browser.getControl(name=name)
 
-        self.browser.getControl("Type restrictions").value = ['1']
-        ctrl("form.widgets.allowed_types:list").value = ["Document", "Folder"]
-        ctrl("form.widgets.secondary_types:list").value = ["Document"]
-        self.browser.getControl("Save").click()
+        self.browser.getControl('Type restrictions').value = ['1']
+        ctrl('form.widgets.allowed_types:list').value = ['Document', 'Folder']
+        ctrl('form.widgets.secondary_types:list').value = ['Document']
+        self.browser.getControl('Save').click()
         aspect = ISelectableConstrainTypes(self.folder)
         self.assertEqual(1, aspect.getConstrainTypesMode())
         self.assertEqual(
-            ["Document", "Folder"],
+            ['Document', 'Folder'],
             aspect.getLocallyAllowedTypes()
         )
-        self.assertEqual(["Folder"], aspect.getImmediatelyAddableTypes())
+        self.assertEqual(['Folder'], aspect.getImmediatelyAddableTypes())
 
     def test_form_bad_save(self):
         aspect = ISelectableConstrainTypes(self.folder)
         constraint_before = aspect.getConstrainTypesMode()
-        assert constraint_before != 1, ("Default constraint should not be 1. "
-                                        "Test is outdated.")
+        assert constraint_before != 1, ('Default constraint should not be 1. '
+                                        'Test is outdated.')
 
         self.browser.open(self.folder_url)
         self.browser.getLink('Restrictions').click()
@@ -401,13 +407,13 @@ def test_form_bad_save(self):
         def ctrl(name):
             return self.browser.getControl(name=name)
 
-        self.browser.getControl("Type restrictions").value = ['1']
-        ctrl("form.widgets.allowed_types:list").value = ["Document"]
-        ctrl("form.widgets.secondary_types:list").value = [
-            "Document",
-            "Folder"
+        self.browser.getControl('Type restrictions').value = ['1']
+        ctrl('form.widgets.allowed_types:list').value = ['Document']
+        ctrl('form.widgets.secondary_types:list').value = [
+            'Document',
+            'Folder'
         ]
-        self.browser.getControl("Save").click()
+        self.browser.getControl('Save').click()
         self.assertEqual(constraint_before, aspect.getConstrainTypesMode())
         self.assertTrue('Error' in self.browser.contents)
 
@@ -432,7 +438,7 @@ def setUp(self):
         self.browser.handleErrors = False
         self.browser.addHeader(
             'Authorization',
-            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),
         )
 
     def test_overview_folder_view(self):
diff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py
index e4849e9..fdd6fe4 100644
--- a/plone/app/dexterity/tests/test_doctests.py
+++ b/plone/app/dexterity/tests/test_doctests.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
 from plone.testing import layered
+
 import doctest
 import unittest
 
diff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py
index 7a26211..fd0dcb6 100644
--- a/plone/app/dexterity/tests/test_export.py
+++ b/plone/app/dexterity/tests/test_export.py
@@ -5,6 +5,7 @@
 from xml.dom.minidom import parseString
 from xml.parsers.expat import ExpatError
 from zope.component import getMultiAdapter
+
 import StringIO
 import unittest
 import zipfile
@@ -43,7 +44,8 @@ def test_exported_XML_valid_for_GS(self):
             try:
                 parseString(file_xml)
             except ExpatError as e:
-                self.fail("Parsing XML failed with ExpatError: " + e.message)
+                msg = 'Parsing XML failed with ExpatError: {0}'
+                self.fail(msg.format(e.message))
 
 
 def test_suite():
diff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py
index 2e42825..754f088 100644
--- a/plone/app/dexterity/tests/test_import.py
+++ b/plone/app/dexterity/tests/test_import.py
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
 """Test the types import."""
 from DateTime.DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity.browser.import_types import ITypeProfileImport
 from plone.app.dexterity.browser.import_types import TypeProfileImport
 from plone.app.dexterity.browser.import_types import ZipFileImportContext
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+from Products.CMFCore.utils import getToolByName
+
 import os.path
 import plone.namedfile
 import unittest
diff --git a/plone/app/dexterity/tests/test_nextprevious.py b/plone/app/dexterity/tests/test_nextprevious.py
index f723aad..fe56ee0 100644
--- a/plone/app/dexterity/tests/test_nextprevious.py
+++ b/plone/app/dexterity/tests/test_nextprevious.py
@@ -1,11 +1,15 @@
-import unittest
-from plone.app.testing import setRoles, login, logout, TEST_USER_ID
+# -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
-
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.dexterity.fti import DexterityFTI
 from Products.CMFCore.utils import getToolByName
 
+import unittest
+
 
 class NextPreviousBase:
     # subclass here
@@ -32,7 +36,7 @@ class NextPreviousEnabledTests(NextPreviousBase, unittest.TestCase):
 
     def setUp(self):
         self.portal = self.layer['portal']
-        self.wf = getToolByName(self.portal, "portal_workflow")
+        self.wf = getToolByName(self.portal, 'portal_workflow')
         self.wf.setDefaultChain('simple_publication_workflow')
         self.portal.acl_users._doAddUser('user_std', 'secret', ['Member'], [])
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
@@ -67,13 +71,13 @@ def testNextPreviousItems(self):
         container = self.portal[self.portal.invokeFactory(
             self._portal_type, 'case3')]
         for id in range(1, 4):
-            container.invokeFactory('Document', 'subDoc%d' % id)
+            container.invokeFactory('Document', 'subDoc{0}'.format(id))
 
         from OFS.Folder import manage_addFolder
         manage_addFolder(container, 'notacontentishtype')
 
         for id in range(5, 6):
-            container.invokeFactory('Document', 'subDoc%d' % id)
+            container.invokeFactory('Document', 'subDoc{0}'.format(id))
 
         adapter = INextPreviousProvider(container)
         # text data for next/previous items
@@ -108,9 +112,9 @@ def testNextItemOnlyShowViewable(self):
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         for id in range(1, 7):
             doc = container[container.invokeFactory(
-                'Document', 'subDoc%d' % id)]
+                'Document', 'subDoc{0}'.format(id))]
             if id in [2, 4, 5]:
-                self.wf.doActionFor(doc, "publish")
+                self.wf.doActionFor(doc, 'publish')
 
         # Member should only see the published items
         logout()
@@ -132,9 +136,9 @@ def testPreviousItemOnlyShowViewable(self):
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         for id in range(1, 7):
             doc = container[container.invokeFactory(
-                'Document', 'subDoc%d' % id)]
+                'Document', 'subDoc{0}'.format(id))]
             if id in [2, 4, 5]:
-                self.wf.doActionFor(doc, "publish")
+                self.wf.doActionFor(doc, 'publish')
 
         # Member should only see the published items
         logout()
@@ -161,7 +165,7 @@ class NextPreviousToggleTests(NextPreviousBase, unittest.TestCase):
 
     def setUp(self):
         self.portal = self.layer['portal']
-        self.wf = getToolByName(self.portal, "portal_workflow")
+        self.wf = getToolByName(self.portal, 'portal_workflow')
         self.portal.acl_users._doAddUser('user_std', 'secret', ['Member'], [])
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         self._setupFTI()
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
index d3a2c42..4326f04 100644
--- a/plone/app/dexterity/tests/test_permissions.py
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
 from plone.app.content.browser.vocabulary import VocabularyView
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
 from plone.app.widgets.interfaces import IWidgetsLayer
 from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
 from plone.app.widgets.testing import TestRequest
 from plone.autoform.interfaces import WIDGETS_KEY
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
+from plone.dexterity.browser.add import DefaultAddForm
+from plone.dexterity.browser.add import DefaultAddView
 from plone.dexterity.fti import DexterityFTI
-from plone.dexterity.browser.add import DefaultAddForm, DefaultAddView
 from z3c.form.interfaces import IFieldWidget
 from z3c.form.util import getSpecification
 from z3c.form.widget import FieldWidget
@@ -19,6 +20,7 @@
 from zope.component.globalregistry import base
 from zope.globalrequest import setRequest
 from zope.interface import Interface
+
 import json
 import unittest
 
@@ -70,9 +72,10 @@ def _enable_custom_widget(field):
 
 
 def _disable_custom_widget(field):
-        base.unregisterAdapter(
-            required=(getSpecification(field), IWidgetsLayer,),
-            provided=IFieldWidget)
+    base.unregisterAdapter(
+        required=(getSpecification(field), IWidgetsLayer, ),
+        provided=IFieldWidget,
+    )
 
 
 class DexterityVocabularyPermissionTests(unittest.TestCase):
@@ -108,8 +111,10 @@ def test_vocabulary_field_allowed(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
     def test_vocabulary_field_wrong_vocabulary_disallowed(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -118,7 +123,7 @@ def test_vocabulary_field_wrong_vocabulary_disallowed(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_field_disallowed(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -127,7 +132,7 @@ def test_vocabulary_field_disallowed(self):
             'field': 'disallowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_field_default_permission(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -139,13 +144,15 @@ def test_vocabulary_field_default_permission(self):
         # default edit permission is tested (Modify portal content)
         setRoles(self.portal, TEST_USER_ID, ['Member'])
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
         setRoles(self.portal, TEST_USER_ID, ['Editor'])
         # Now access should be allowed, but the vocabulary does not exist
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
     def test_vocabulary_field_default_permission_wrong_vocab(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -156,7 +163,7 @@ def test_vocabulary_field_default_permission_wrong_vocab(self):
         setRoles(self.portal, TEST_USER_ID, ['Editor'])
         # Now access should be allowed, but the vocabulary does not exist
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_missing_field(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -175,11 +182,13 @@ def test_vocabulary_on_widget(self):
             'field': 'custom_widget_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
         self.request.form['name'] = 'plone.app.vocabularies.Fake'
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_on_adapted_widget(self):
         _enable_custom_widget(IMockSchema['adapted_widget_field'])
@@ -189,12 +198,14 @@ def test_vocabulary_on_adapted_widget(self):
             'field': 'adapted_widget_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
         self.request.form['name'] = 'plone.app.vocabularies.Fake'
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
         _disable_custom_widget(IMockSchema['adapted_widget_field'])
 
     def test_vocabulary_field_allowed_from_add_view(self):
@@ -206,8 +217,10 @@ def test_vocabulary_field_allowed_from_add_view(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
     def test_vocabulary_field_allowed_from_add_form(self):
         add_form = DefaultAddForm(self.portal, self.request)
@@ -218,5 +231,7 @@ def test_vocabulary_field_allowed_from_add_form(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
diff --git a/plone/app/dexterity/tests/test_robot.py b/plone/app/dexterity/tests/test_robot.py
index 570499e..aa9cf7d 100644
--- a/plone/app/dexterity/tests/test_robot.py
+++ b/plone/app/dexterity/tests/test_robot.py
@@ -2,6 +2,7 @@
 from plone.app.dexterity.testing import DEXTERITY_ACCEPTANCE_TESTING
 from plone.app.testing import ROBOT_TEST_LEVEL
 from plone.testing import layered
+
 import os
 import robotsuite
 import unittest
diff --git a/plone/app/dexterity/tests/test_upgrades.py b/plone/app/dexterity/tests/test_upgrades.py
index c6851a0..4bc0aa1 100644
--- a/plone/app/dexterity/tests/test_upgrades.py
+++ b/plone/app/dexterity/tests/test_upgrades.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+
 import unittest
 
 
diff --git a/plone/app/dexterity/upgrades/to2001.py b/plone/app/dexterity/upgrades/to2001.py
index c37ac1d..e8e7356 100644
--- a/plone/app/dexterity/upgrades/to2001.py
+++ b/plone/app/dexterity/upgrades/to2001.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.dexterity.interfaces import IDexterityContent
 from plone.uuid.handlers import addAttributeUUID
 from plone.uuid.interfaces import IUUID
+from Products.CMFCore.utils import getToolByName
 
 
 def add_missing_uuids(context):
diff --git a/plone/app/dexterity/upgrades/to2003.py b/plone/app/dexterity/upgrades/to2003.py
index c344c13..c1da608 100644
--- a/plone/app/dexterity/upgrades/to2003.py
+++ b/plone/app/dexterity/upgrades/to2003.py
@@ -2,6 +2,7 @@
 from Acquisition import aq_base
 from Products.CMFCore.utils import getToolByName
 
+
 BAD_GUY = ('zope.intid.interfaces.IIntIds', '')
 
 
diff --git a/plone/app/dexterity/upgrades/to2004.py b/plone/app/dexterity/upgrades/to2004.py
index 43d6d5d..3f22551 100644
--- a/plone/app/dexterity/upgrades/to2004.py
+++ b/plone/app/dexterity/upgrades/to2004.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.dexterity.interfaces import IDexterityFTI
+from Products.CMFCore.utils import getToolByName
 
 
 def remove_cr_and_lf_description(context):
diff --git a/setup.py b/setup.py
index bdfddb7..c22a650 100644
--- a/setup.py
+++ b/setup.py
@@ -1,86 +1,96 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '2.3.5.dev0'
-long_description = open("README.rst").read() + "\n" + \
-    open("RELEASE_NOTES.rst").read() + "\n" + \
-    open("CHANGES.rst").read()
 
-setup(name='plone.app.dexterity',
-      version=version,
-      description="Dexterity is a content type framework for CMF "
-                  "applications, with particular emphasis on Plone. It can "
-                  "be viewed as an alternative to Archetypes that is more "
-                  "light-weight and modular.",
-      long_description=long_description,
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Framework :: Plone :: 5.1",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Software Development :: Libraries :: Python Modules",
-          "Development Status :: 5 - Production/Stable",
-      ],
-      keywords='plone ttw dexterity schema interface',
-      author='Martin Aspeli, David Glick, et al',
-      author_email='dexterity-development@googlegroups.com',
-      url='http://plone.org/products/dexterity',
-      license='GPL',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          # Dexterity
-          'plone.app.textfield',
-          'plone.behavior>=1.0b5',
-          'plone.dexterity >= 2.2.2dev',
-          'plone.formwidget.namedfile',
-          'plone.namedfile[scales] >=1.0b5dev-r36016',
-          'plone.rfc822',
-          'plone.schemaeditor >1.3.3',
-          # Plone/Zope core
-          'lxml',
-          'plone.app.content',
-          'plone.app.layout',
-          'plone.app.uuid',
-          'plone.app.z3cform>=1.1.0',
-          'plone.autoform >=1.1dev',
-          'plone.contentrules',
-          'plone.portlets',
-          'plone.supermodel>=1.1dev',
-          'plone.z3cform>=0.6.0',
-          'Products.CMFCore',
-          'Products.CMFPlone>=4.0b1',
-          'Products.GenericSetup',
-          'setuptools',
-          'Zope2',
-          'zope.browserpage',
-          'zope.interface',
-          'zope.component',
-          'zope.deprecation',
-          'zope.schema',
-          'zope.publisher',
-          'z3c.form>=3.0.0a1',
-      ],
-      extras_require={
-          'test': [
-              'plone.app.robotframework',
-              'plone.app.testing',
-          ],
-          'grok': [
-              'five.grok',
-              'plone.directives.dexterity',
-              'plone.directives.form >=1.1dev',
-          ],
-          'relations': [
-              'plone.app.relationfield',
-              'plone.app.intid',
-              'z3c.relationfield',
-          ]
-      },
-      entry_points="""
-      [z3c.autoinclude.plugin]
-      target = plone
-      """,
-      )
+short_description = (
+    'Dexterity is a content type framework for CMF  applications, '
+    'with particular emphasis on Plone. It can be viewed as an '
+    'alternative to Archetypes that is more light-weight and modular.'
+)
+
+long_description = '{0}\n{1}\n{2}'.format(
+    open('README.rst').read(),
+    open('RELEASE_NOTES.rst').read(),
+    open('CHANGES.rst').read(),
+)
+
+setup(
+    name='plone.app.dexterity',
+    version=version,
+    description=short_description,
+    long_description=long_description,
+    classifiers=[
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
+        'Topic :: Software Development :: Libraries :: Python Modules',
+        'Development Status :: 5 - Production/Stable',
+    ],
+    keywords='plone ttw dexterity schema interface',
+    author='Martin Aspeli, David Glick, et al',
+    author_email='dexterity-development@googlegroups.com',
+    url='http://plone.org/products/dexterity',
+    license='GPL',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        # Dexterity
+        'plone.app.textfield',
+        'plone.behavior>=1.0b5',
+        'plone.dexterity >= 2.2.2dev',
+        'plone.formwidget.namedfile',
+        'plone.namedfile[scales] >=1.0b5dev-r36016',
+        'plone.rfc822',
+        'plone.schemaeditor >1.3.3',
+        # Plone/Zope core
+        'lxml',
+        'plone.app.content',
+        'plone.app.layout',
+        'plone.app.uuid',
+        'plone.app.z3cform>=1.1.0',
+        'plone.autoform >=1.1dev',
+        'plone.contentrules',
+        'plone.portlets',
+        'plone.supermodel>=1.1dev',
+        'plone.z3cform>=0.6.0',
+        'Products.CMFCore',
+        'Products.CMFPlone>=4.0b1',
+        'Products.GenericSetup',
+        'setuptools',
+        'Zope2',
+        'zope.browserpage',
+        'zope.interface',
+        'zope.component',
+        'zope.deprecation',
+        'zope.schema',
+        'zope.publisher',
+        'z3c.form>=3.0.0a1',
+    ],
+    extras_require={
+        'test': [
+            'plone.app.robotframework',
+            'plone.app.testing',
+        ],
+        'grok': [
+            'five.grok',
+            'plone.directives.dexterity',
+            'plone.directives.form >=1.1dev',
+        ],
+        'relations': [
+            'plone.app.relationfield',
+            'plone.app.intid',
+            'z3c.relationfield',
+        ]
+    },
+    entry_points="""
+    [z3c.autoinclude.plugin]
+    target = plone
+    """,
+)


Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2016-11-06T00:37:34+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/5256b37e7b5b4b9a312af4123a9137c29ec5a086

Merge pull request #228 from plone/gforcada-cleanup

Update code to follow Plone styleguide

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/dexterity/__init__.py
M plone/app/dexterity/behaviors/constrains.py
M plone/app/dexterity/behaviors/filename.py
M plone/app/dexterity/behaviors/id.py
M plone/app/dexterity/behaviors/metadata.py
M plone/app/dexterity/behaviors/nextprevious.py
M plone/app/dexterity/behaviors/related.py
M plone/app/dexterity/behaviors/tests/test_id.py
M plone/app/dexterity/behaviors/tests/test_metadata.py
M plone/app/dexterity/browser/add_type.py
M plone/app/dexterity/browser/behaviors.py
M plone/app/dexterity/browser/clone_type.py
M plone/app/dexterity/browser/export.py
M plone/app/dexterity/browser/fields.py
M plone/app/dexterity/browser/import_types.py
M plone/app/dexterity/browser/layout.py
M plone/app/dexterity/browser/modeleditor.py
M plone/app/dexterity/browser/overview.py
M plone/app/dexterity/browser/types.py
M plone/app/dexterity/factories.py
M plone/app/dexterity/interfaces.py
M plone/app/dexterity/permissions.py
M plone/app/dexterity/serialize.py
M plone/app/dexterity/testing.py
M plone/app/dexterity/tests/test_constrains.py
M plone/app/dexterity/tests/test_doctests.py
M plone/app/dexterity/tests/test_export.py
M plone/app/dexterity/tests/test_import.py
M plone/app/dexterity/tests/test_nextprevious.py
M plone/app/dexterity/tests/test_permissions.py
M plone/app/dexterity/tests/test_robot.py
M plone/app/dexterity/tests/test_upgrades.py
M plone/app/dexterity/upgrades/to2001.py
M plone/app/dexterity/upgrades/to2003.py
M plone/app/dexterity/upgrades/to2004.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6027f2f..f616105 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Update code to follow Plone styleguide.
+  [gforcada]
 
 2.3.4 (2016-10-03)
 ------------------
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/dexterity/__init__.py b/plone/app/dexterity/__init__.py
index ebe5018..60f3708 100644
--- a/plone/app/dexterity/__init__.py
+++ b/plone/app/dexterity/__init__.py
@@ -1,7 +1,9 @@
 # -*- coding: utf-8 -*-
 from zope.i18nmessageid import MessageFactory as ZMessageFactory
+
 import warnings
 
+
 _ = ZMessageFactory('plone')
 
 
diff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py
index 359e21f..4f1daff 100644
--- a/plone/app/dexterity/behaviors/constrains.py
+++ b/plone/app/dexterity/behaviors/constrains.py
@@ -2,6 +2,7 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 
+
 # constants for enableConstrain. Copied from AT
 ACQUIRE = -1  # acquire locallyAllowedTypes from parent (default)
 DISABLED = 0  # use default behavior of PortalFolder which uses the FTI info
@@ -103,9 +104,8 @@ def allowedContentTypes(self, context=None):
                     context), context)
             return [t for t in default_addable if t.getId() in return_tids]
         else:
-            raise Exception(
-                "Wrong constraint setting. %i is an invalid value",
-                mode)
+            msg = 'Wrong constraint setting. %i is an invalid value'
+            raise Exception(msg, mode)
 
     def getLocallyAllowedTypes(self, context=None):
         """
@@ -120,7 +120,7 @@ def setLocallyAllowedTypes(self, types):
         defaults = [t.getId() for t in self.getDefaultAddableTypes()]
         for type_ in types:
             if type_ not in defaults:
-                raise ValueError("%s is not a valid type id", type_)
+                raise ValueError('%s is not a valid type id', type_)
         self.context.locally_allowed_types = types
 
     def getImmediatelyAddableTypes(self, context=None):
@@ -154,13 +154,12 @@ def getImmediatelyAddableTypes(self, context=None):
                 parent_constrain_adapter.getImmediatelyAddableTypes(
                     context), context)
         else:
-            raise Exception(
-                "Wrong constraint setting. %i is an invalid value",
-                mode)
+            msg = 'Wrong constraint setting. %i is an invalid value'
+            raise Exception(msg, mode)
 
     def setImmediatelyAddableTypes(self, types):
         defaults = [t.getId() for t in self.getDefaultAddableTypes()]
         for type_ in types:
             if type_ not in defaults:
-                raise ValueError("%s is not a valid type id", type_)
+                raise ValueError('%s is not a valid type id', type_)
         self.context.immediately_addable_types = types
diff --git a/plone/app/dexterity/behaviors/filename.py b/plone/app/dexterity/behaviors/filename.py
index cb6c741..5e1c6c6 100644
--- a/plone/app/dexterity/behaviors/filename.py
+++ b/plone/app/dexterity/behaviors/filename.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.utils import safe_hasattr
 from plone.app.content.interfaces import INameFromTitle
 from plone.rfc822.interfaces import IPrimaryFieldInfo
+from Products.CMFPlone.utils import safe_hasattr
 from zope.component import adapter
-from zope.interface import Interface
 from zope.interface import implementer
+from zope.interface import Interface
 
 
 class INameFromFileName(Interface):
diff --git a/plone/app/dexterity/behaviors/id.py b/plone/app/dexterity/behaviors/id.py
index 8af6262..1cf8046 100644
--- a/plone/app/dexterity/behaviors/id.py
+++ b/plone/app/dexterity/behaviors/id.py
@@ -10,6 +10,7 @@
 from zope import schema
 from zope.container.interfaces import INameChooser
 from zope.interface import provider
+
 import transaction
 
 
diff --git a/plone/app/dexterity/behaviors/metadata.py b/plone/app/dexterity/behaviors/metadata.py
index f707f92..e05629b 100644
--- a/plone/app/dexterity/behaviors/metadata.py
+++ b/plone/app/dexterity/behaviors/metadata.py
@@ -1,7 +1,6 @@
+# -*- coding: utf-8 -*-
 from AccessControl.SecurityManagement import getSecurityManager
 from DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from datetime import datetime
 from plone.app.dexterity import _
 from plone.app.z3cform.widget import AjaxSelectFieldWidget
@@ -12,6 +11,8 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.utils import safe_unicode
 from plone.supermodel import model
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot
 from z3c.form.interfaces import IAddForm
 from z3c.form.interfaces import IEditForm
 from z3c.form.widget import ComputedWidgetAttribute
@@ -25,6 +26,7 @@
 from zope.schema.interfaces import ISequence
 from zope.schema.interfaces import IText
 
+
 # Behavior interfaces to display Dublin Core metadata fields on Dexterity
 # content edit forms.
 #
@@ -128,8 +130,8 @@ class ICategorization(model.Schema):
 
 
 class EffectiveAfterExpires(Invalid):
-    __doc__ = _("error_invalid_publication",
-                default=u"Invalid effective or expires date")
+    __doc__ = _('error_invalid_publication',
+                default=u'Invalid effective or expires date')
 
 
 @provider(IFormFieldProvider)
@@ -145,8 +147,8 @@ class IPublication(model.Schema):
         title=_(u'label_effective_date', u'Publishing Date'),
         description=_(
             u'help_effective_date',
-            default=u"If this date is in the future, the content will "
-                    u"not show up in listings and searches until this date."),
+            default=u'If this date is in the future, the content will '
+                    u'not show up in listings and searches until this date.'),
         required=False
     )
     directives.widget('effective', DatetimeFieldWidget)
@@ -155,8 +157,8 @@ class IPublication(model.Schema):
         title=_(u'label_expiration_date', u'Expiration Date'),
         description=_(
             u'help_expiration_date',
-            default=u"When this date is reached, the content will no"
-                    u"longer be visible in listings and searches."),
+            default=u'When this date is reached, the content will no'
+                    u'longer be visible in listings and searches.'),
         required=False
     )
     directives.widget('expires', DatetimeFieldWidget)
@@ -165,8 +167,8 @@ class IPublication(model.Schema):
     def validate_start_end(data):
         if data.effective and data.expires and data.effective > data.expires:
             raise EffectiveAfterExpires(
-                _("error_expiration_must_be_after_effective_date",
-                  default=u"Expiration date must be after publishing date.")
+                _('error_expiration_must_be_after_effective_date',
+                  default=u'Expiration date must be after publishing date.')
             )
 
     directives.omitted('effective', 'expires')
@@ -191,9 +193,9 @@ class IOwnership(model.Schema):
         title=_(u'label_creators', u'Creators'),
         description=_(
             u'help_creators',
-            default=u"Persons responsible for creating the content of "
-                    u"this item. Please enter a list of user names, one "
-                    u"per line. The principal creator should come first."
+            default=u'Persons responsible for creating the content of '
+                    u'this item. Please enter a list of user names, one '
+                    u'per line. The principal creator should come first.'
         ),
         value_type=schema.TextLine(),
         required=False,
@@ -209,9 +211,9 @@ class IOwnership(model.Schema):
         title=_(u'label_contributors', u'Contributors'),
         description=_(
             u'help_contributors',
-            default=u"The names of people that have contributed "
-                    u"to this item. Each contributor should "
-                    u"be on a separate line."),
+            default=u'The names of people that have contributed '
+                    u'to this item. Each contributor should '
+                    u'be on a separate line.'),
         value_type=schema.TextLine(),
         required=False,
         missing_value=(),
diff --git a/plone/app/dexterity/behaviors/nextprevious.py b/plone/app/dexterity/behaviors/nextprevious.py
index adec8bf..30c63e3 100644
--- a/plone/app/dexterity/behaviors/nextprevious.py
+++ b/plone/app/dexterity/behaviors/nextprevious.py
@@ -1,21 +1,21 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
 from Acquisition import aq_base
-from zope.component import getUtility
-from Products.CMFCore.interfaces import IContentish
 from plone.app.dexterity import _
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
 from plone.autoform import directives
 from plone.autoform.interfaces import IFormFieldProvider
-from plone.supermodel import model
 from plone.registry.interfaces import IRegistry
+from plone.supermodel import model
+from Products.CMFCore.interfaces import IContentish
 from z3c.form import widget
 from z3c.form.interfaces import IAddForm
 from z3c.form.interfaces import IEditForm
 from zope import schema
 from zope.component import adapter
-from zope.interface import Interface
+from zope.component import getUtility
 from zope.interface import implementer
+from zope.interface import Interface
 from zope.interface import provider
 
 
diff --git a/plone/app/dexterity/behaviors/related.py b/plone/app/dexterity/behaviors/related.py
index bb0e5f9..4405c59 100644
--- a/plone/app/dexterity/behaviors/related.py
+++ b/plone/app/dexterity/behaviors/related.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """BBB import for 'Related Items' behavior that was moved to
 plone.app.relationfield in Dexterity 2.0.
 """
diff --git a/plone/app/dexterity/behaviors/tests/test_id.py b/plone/app/dexterity/behaviors/tests/test_id.py
index 057854c..e5ccbb0 100644
--- a/plone/app/dexterity/behaviors/tests/test_id.py
+++ b/plone/app/dexterity/behaviors/tests/test_id.py
@@ -1,8 +1,10 @@
+# -*- coding: utf-8 -*-
 from DateTime import DateTime
 from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.testing import z2
+
 import transaction
 import unittest
 
@@ -21,8 +23,8 @@ def setUp(self):
         # prepare browser
         self.browser = z2.Browser(self.layer['app'])
         self.browser.addHeader(
-            'Authorization', 'Basic %s:%s'
-            % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+            'Authorization',
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, )
         )
         self.browser.open('http://nohost/plone')
 
diff --git a/plone/app/dexterity/behaviors/tests/test_metadata.py b/plone/app/dexterity/behaviors/tests/test_metadata.py
index 7ffff1b..207b27b 100644
--- a/plone/app/dexterity/behaviors/tests/test_metadata.py
+++ b/plone/app/dexterity/behaviors/tests/test_metadata.py
@@ -64,6 +64,7 @@ class TestDCFieldProperty(unittest.TestCase):
 
     def _makeOne(self):
         class Dummy(object):
+
             def addCreator(self, creator=None):
                 self.creators = (creator or 'dummy_user', )
 
diff --git a/plone/app/dexterity/browser/add_type.py b/plone/app/dexterity/browser/add_type.py
index 21b310f..273f5f5 100644
--- a/plone/app/dexterity/browser/add_type.py
+++ b/plone/app/dexterity/browser/add_type.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity import _
 from plone.app.dexterity.interfaces import ITypeSettings
 from plone.dexterity.fti import DexterityFTI
 from plone.z3cform.layout import wrap_form
+from Products.CMFCore.utils import getToolByName
 from z3c.form import field
 from z3c.form import form
 
@@ -24,7 +24,7 @@ def create(self, data):
         if data['description']:
             data['description'] = data['description'].encode('utf8')
         data['i18n_domain'] = 'plone'
-        data['behaviors'] = "\n".join([
+        data['behaviors'] = '\n'.join([
             'plone.app.dexterity.behaviors.metadata.IDublinCore',
             'plone.app.content.interfaces.INameFromTitle',
         ])
@@ -50,7 +50,7 @@ def add(self, fti):
     def nextURL(self):
         url = self.context.absolute_url()
         if self.fti_id is not None:
-            url += '/%s/@@fields' % self.fti_id
+            url += '/{0}/@@fields'.format(self.fti_id)
         return url
 
 TypeAddFormPage = wrap_form(TypeAddForm)
diff --git a/plone/app/dexterity/browser/behaviors.py b/plone/app/dexterity/browser/behaviors.py
index 905f8f2..c859c2b 100644
--- a/plone/app/dexterity/browser/behaviors.py
+++ b/plone/app/dexterity/browser/behaviors.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
 from collections import Counter
-from operator import attrgetter
 from copy import deepcopy
+from operator import attrgetter
 from plone.app.dexterity import _
 from plone.app.dexterity.browser.layout import TypeFormLayout
 from plone.app.dexterity.interfaces import ITypeSchemaContext
 from plone.behavior.interfaces import IBehavior
-from plone.behavior.registration import lookup_behavior_registration
 from plone.behavior.registration import BehaviorRegistrationNotFound
+from plone.behavior.registration import lookup_behavior_registration
 from plone.dexterity.fti import DexterityFTIModificationDescription
 from z3c.form import field
 from z3c.form import form
@@ -18,6 +18,7 @@
 from zope.component import getUtilitiesFor
 from zope.lifecycleevent import modified
 
+
 TTW_BEHAVIOR_BLACKLIST = [
     # skip deprecated behavior
     'plone.app.dexterity.behaviors.related.IRelatedItems',
@@ -25,7 +26,7 @@
 
 
 def behaviorConfigurationModified(object, event):
-    description = DexterityFTIModificationDescription("behaviors", "")
+    description = DexterityFTIModificationDescription('behaviors', '')
     modified(object.fti, description)
 
 
diff --git a/plone/app/dexterity/browser/clone_type.py b/plone/app/dexterity/browser/clone_type.py
index af00b2c..5fd573c 100644
--- a/plone/app/dexterity/browser/clone_type.py
+++ b/plone/app/dexterity/browser/clone_type.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity import _
 from plone.app.dexterity.interfaces import ITypeSettings
 from plone.dexterity.fti import DexterityFTI
 from plone.z3cform.layout import wrap_form
-from z3c.form import form
+from Products.CMFCore.utils import getToolByName
 from z3c.form import field
+from z3c.form import form
 
 
 class TypeCloneForm(form.AddForm):
diff --git a/plone/app/dexterity/browser/export.py b/plone/app/dexterity/browser/export.py
index 20d7708..5041631 100644
--- a/plone/app/dexterity/browser/export.py
+++ b/plone/app/dexterity/browser/export.py
@@ -2,14 +2,15 @@
 # @@types-export view for dexterity types configlet. View support for the
 # "Export" button. This is done by repurposing the GS typeinfo export and
 # removing unselected type information from its output.
+from lxml import etree
+from plone.supermodel import serializeModel
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.GenericSetup.context import BaseContext
 from Products.GenericSetup.context import TarballExportContext
 from StringIO import StringIO
-from lxml import etree
-from plone.supermodel import serializeModel
 from zipfile import ZipFile
+
 import time
 
 
@@ -22,7 +23,7 @@ def __init__(self, tool, typelist, encoding=None, base_name='setup_tool'):
         self.typelist = typelist
         self.filenames = ['types.xml']
         for tn in typelist:
-            self.filenames.append('types/%s.xml' % tn)
+            self.filenames.append('types/{0}.xml'.format(tn))
 
         timestamp = time.gmtime()
         self._archive_filename = (base_name + '-%4d%02d%02d%02d%02d%02d.zip'
@@ -50,7 +51,7 @@ def writeDataFile(self, filename, text, content_type, subdir=None):
             # Add a marker for ZopeSkel additions
             root.append(etree.Comment(' -*- extra stuff goes here -*- '))
             # minor prettifying
-            text = '<?xml version="1.0"?>\n%s' % etree.tostring(root)
+            text = '<?xml version="1.0"?>\n{0}'.format(etree.tostring(root))
             text = text.replace('<!--', ' <!--')
             text = text.replace('-->', '-->\n')
 
@@ -74,8 +75,10 @@ def __call__(self):
         filename = context.getArchiveFilename()
 
         RESPONSE.setHeader('Content-type', 'application/zip')
-        RESPONSE.setHeader('Content-disposition',
-                           'attachment; filename=%s' % filename)
+        RESPONSE.setHeader(
+            'Content-disposition',
+            'attachment; filename={0}'.format(filename)
+        )
 
         return context.getArchive()
 
@@ -95,12 +98,14 @@ def __call__(self):
             # return a single XML file
 
             item = items[0]
-            filename = '%s.xml' % item
+            filename = '{0}.xml'.format(item)
             text = serializeModel(pt[item].lookupModel())
 
             RESPONSE.setHeader('Content-type', 'application/xml')
-            RESPONSE.setHeader('Content-disposition',
-                               'attachment; filename=%s' % filename)
+            RESPONSE.setHeader(
+                'Content-disposition',
+                'attachment; filename={0}'.format(filename)
+            )
 
             return text
 
@@ -115,15 +120,17 @@ def __call__(self):
             archive = ZipFile(archive_stream, 'w')
 
             for item in items:
-                filename = 'models/%s.xml' % item
+                filename = 'models/{0}.xml'.format(item)
                 text = serializeModel(pt[item].lookupModel())
                 archive.writestr(filename, text)
 
             archive.close()
 
             RESPONSE.setHeader('Content-type', 'application/zip')
-            RESPONSE.setHeader('Content-disposition',
-                               'attachment; filename=%s' % archive_filename)
+            RESPONSE.setHeader(
+                'Content-disposition',
+                'attachment; filename={0}'.format(archive_filename)
+            )
 
             return archive_stream.getvalue()
 
diff --git a/plone/app/dexterity/browser/fields.py b/plone/app/dexterity/browser/fields.py
index a93d40e..072ebdb 100644
--- a/plone/app/dexterity/browser/fields.py
+++ b/plone/app/dexterity/browser/fields.py
@@ -4,8 +4,10 @@
 from plone.schemaeditor.browser.schema.listing import ReadOnlySchemaListing
 from plone.schemaeditor.browser.schema.listing import SchemaListing
 from z3c.form import button
+
 import pkg_resources
 
+
 # We want to add a Plone-specific feature to the SchemaListing
 # form from plone.schemaeditor. We'll do this by subclassing, then
 # adding the plone-specific button for the ace model editor.
@@ -17,7 +19,7 @@ def handleModelEdit(self, action):
         self.request.response.redirect('@@modeleditor')
 
 if pkg_resources.get_distribution('plone.resourceeditor'):
-    but = button.Button("modeleditor", title=u'Edit XML Field Model')
+    but = button.Button('modeleditor', title=u'Edit XML Field Model')
     EnhancedSchemaListing.buttons += button.Buttons(but)
     handler = button.Handler(but, EnhancedSchemaListing.handleModelEdit)
     EnhancedSchemaListing.handlers.addHandler(but, handler)
diff --git a/plone/app/dexterity/browser/import_types.py b/plone/app/dexterity/browser/import_types.py
index 44ef321..9969a3e 100644
--- a/plone/app/dexterity/browser/import_types.py
+++ b/plone/app/dexterity/browser/import_types.py
@@ -1,25 +1,26 @@
 # -*- coding: utf-8 -*-
 """ Support for importing Dexterity types from GS zip file.
 """
+from cStringIO import StringIO
 # XXX: need to make exceptions more specific, shorten messages
 from DateTime.DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.context import BaseContext
-from Products.GenericSetup.interfaces import IImportContext
-from cStringIO import StringIO
 from lxml import etree
 from plone.app.dexterity import _
 from plone.namedfile.field import NamedFile
 from plone.z3cform.layout import wrap_form
+from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.context import BaseContext
+from Products.GenericSetup.interfaces import IImportContext
 from z3c.form import field
 from z3c.form import form
 from zipfile import BadZipfile
 from zipfile import ZipFile
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.interface import Invalid
-from zope.interface import implementer
 from zope.interface import invariant
 from zope.site.hooks import getSite
+
 import os.path
 import zope.schema
 
@@ -74,11 +75,12 @@ def isGoodImportFile(data):
                         'Types in archive must be only Dexterity types.'
                     ),)
                 if attribs['name'] in existing_types:
-                    raise Invalid(_(
+                    msg = (
                         u'One or more types in the import archive is an '
                         u'existing type. Delete "%s" if you '
-                        u'really wish to replace it.' % attribs['name']
-                    ),)
+                        u'really wish to replace it.'
+                    )
+                    raise Invalid(_(msg, attribs['name']), )
 
 
 @implementer(ITypeProfileImport)
diff --git a/plone/app/dexterity/browser/layout.py b/plone/app/dexterity/browser/layout.py
index 0d2abdc..b428767 100644
--- a/plone/app/dexterity/browser/layout.py
+++ b/plone/app/dexterity/browser/layout.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from plone.app.dexterity import _
 from plone.z3cform.layout import FormWrapper
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 
 class TypeFormLayout(FormWrapper):
diff --git a/plone/app/dexterity/browser/modeleditor.py b/plone/app/dexterity/browser/modeleditor.py
index 8dd9689..8e37130 100644
--- a/plone/app/dexterity/browser/modeleditor.py
+++ b/plone/app/dexterity/browser/modeleditor.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
-from Products.Five import BrowserView
 from lxml import etree
 from plone.app.dexterity import _
 from plone.supermodel.parser import SupermodelParseError
+from Products.Five import BrowserView
 from zope.component import queryMultiAdapter
+
 import json
 import plone.supermodel
 
+
 NAMESPACE = '{http://namespaces.plone.org/supermodel/schema}'
 
 
@@ -21,7 +23,7 @@ def modelSource(self):
 
 def authorized(context, request):
     authenticator = queryMultiAdapter((context, request),
-                                      name=u"authenticator")
+                                      name=u'authenticator')
     return authenticator and authenticator.verify()
 
 
@@ -44,7 +46,9 @@ def __call__(self):
             except etree.XMLSyntaxError, e:
                 return json.dumps({
                     'success': False,
-                    'message': "XMLSyntaxError: %s" % e.message.encode('utf8')
+                    'message': 'XMLSyntaxError: {0}'.format(
+                        e.message.encode('utf8')
+                    )
                 })
 
             # a little more sanity checking, look at first two element levels
@@ -65,12 +69,12 @@ def __call__(self):
             # can supermodel parse it?
             # This is mainly good for catching bad dotted names.
             try:
-                plone.supermodel.loadString(source, policy=u"dexterity")
+                plone.supermodel.loadString(source, policy=u'dexterity')
             except SupermodelParseError, e:
                 message = e.args[0].replace('\n  File "<unknown>"', '')
                 return json.dumps({
                     'success': False,
-                    'message': u"SuperModelParseError: %s" % message
+                    'message': u'SuperModelParseError: {0}'.format(message)
                 })
 
             # clean up formatting sins
@@ -85,4 +89,4 @@ def __call__(self):
             fti.manage_changeProperties(model_source=source)
 
             self.request.response.setHeader('Content-Type', 'application/json')
-            return json.dumps({'success': True, 'message': _(u"Saved")})
+            return json.dumps({'success': True, 'message': _(u'Saved')})
diff --git a/plone/app/dexterity/browser/overview.py b/plone/app/dexterity/browser/overview.py
index 1203560..0762894 100644
--- a/plone/app/dexterity/browser/overview.py
+++ b/plone/app/dexterity/browser/overview.py
@@ -3,7 +3,8 @@
 from plone.app.dexterity.browser.layout import TypeFormLayout
 from plone.app.dexterity.interfaces import ITypeSettings
 from Products.CMFCore.interfaces import IFolderish
-from z3c.form import form, field
+from z3c.form import field
+from z3c.form import form
 from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
 from zope.dottedname.resolve import resolve as resolveDottedName
 
diff --git a/plone/app/dexterity/browser/types.py b/plone/app/dexterity/browser/types.py
index 5d4dcd8..0aafcb2 100644
--- a/plone/app/dexterity/browser/types.py
+++ b/plone/app/dexterity/browser/types.py
@@ -1,9 +1,5 @@
 # -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-from Products.Five.browser.pagetemplatefile \
-    import ViewPageTemplateFile as FiveViewPageTemplateFile
-from ZPublisher.BaseRequest import DefaultPublishTraverse
 from plone.app.dexterity import _
 from plone.app.dexterity.browser.utils import UTF8Property
 from plone.app.dexterity.interfaces import ITypeSchemaContext
@@ -16,6 +12,8 @@
 from plone.z3cform import layout
 from plone.z3cform.crud import crud
 from plone.z3cform.layout import FormWrapper
+from Products.CMFCore.utils import getToolByName
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile as FiveViewPageTemplateFile  # noqa
 from z3c.form import button
 from z3c.form import field
 from zope.browserpage.viewpagetemplatefile import ViewPageTemplateFile
@@ -26,6 +24,8 @@
 from zope.component import getUtility
 from zope.interface import implementer
 from zope.publisher.interfaces.browser import IBrowserPublisher
+from ZPublisher.BaseRequest import DefaultPublishTraverse
+
 import urllib
 
 
@@ -76,33 +76,38 @@ def handleClone(self, action):
             self.status = _(u'Please select a single type to clone.')
         elif len(selected) == 1:
             id = selected[0][0]
-            url = '%s/%s/@@clone' % (self.context.context.absolute_url(), id)
+            url = '{0}/{1}/@@clone'.format(
+                self.context.context.absolute_url(),
+                id
+            )
             self.request.response.redirect(url)
         else:
             self.status = _(u'Please select a type to clone.')
 
     @button.buttonAndHandler(_(u'Export Type Profiles'))
     def handleExport(self, action):
-        selected = ",".join([items[0] for items in self.selected_items()])
+        selected = ','.join([items[0] for items in self.selected_items()])
 
         if len(selected) == 0:
             self.status = _(u'Please select types to export.')
         elif len(selected) > 0:
-            url = '%s/@@types-export?selected=%s' % \
-                (self.context.context.absolute_url(),
-                 urllib.quote(selected))
+            url = '{0}/@@types-export?selected={1}'.format(
+                self.context.context.absolute_url(),
+                urllib.quote(selected),
+            )
             self.request.response.redirect(url)
 
     @button.buttonAndHandler(_(u'Export Schema Models'))
     def handleExportModels(self, action):
-        selected = ",".join([items[0] for items in self.selected_items()])
+        selected = ','.join([items[0] for items in self.selected_items()])
 
         if len(selected) == 0:
             self.status = _(u'Please select types to export.')
         elif len(selected) > 0:
-            url = '%s/@@models-export?selected=%s' % \
-                (self.context.context.absolute_url(),
-                 urllib.quote(selected))
+            url = '{0}/@@models-export?selected={1}'.format(
+                self.context.context.absolute_url(),
+                urllib.quote(selected)
+            )
             self.request.response.redirect(url)
 
 
@@ -110,7 +115,7 @@ class TypesEditFormWrapper(FormWrapper):
     """ Render Plone frame around our form with little modifications """
 
     form = TypeEditForm
-    index = FiveViewPageTemplateFile("typesformwrapper.pt")
+    index = FiveViewPageTemplateFile('typesformwrapper.pt')
 
 
 @adapter(IDexterityFTI)
@@ -194,10 +199,10 @@ def description(self):
             )
         return _(
             'help_addcontenttype_button',
-            default= u'Content types show up on Plone\'s "Add Item" menu and '
-                     u'allow you to store custom data in your site. Click the '
-                     u'"Add Content Type" button to begin creating a new '
-                     u'content type with its own fields.')
+            default=u'Content types show up on Plone\'s "Add Item" menu and '
+            u'allow you to store custom data in your site. Click the '
+            u'"Add Content Type" button to begin creating a new '
+            u'content type with its own fields.')
 
     template = ViewPageTemplateFile('types_listing.pt')
     view_schema = field.Fields(ITypeSettings).select('title', 'description')
diff --git a/plone/app/dexterity/factories.py b/plone/app/dexterity/factories.py
index 782a102..59e4569 100644
--- a/plone/app/dexterity/factories.py
+++ b/plone/app/dexterity/factories.py
@@ -1,17 +1,19 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.interfaces._content import IFolderish
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import utils as ploneutils
 from plone.app.dexterity.interfaces import IDXFileFactory
 from plone.dexterity.utils import createContentInContainer
 from plone.namedfile.file import NamedBlobFile
 from plone.namedfile.file import NamedBlobImage
+from Products.CMFCore.interfaces._content import IFolderish
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import utils as ploneutils
 from thread import allocate_lock
 from zope.component import adapter
 from zope.container.interfaces import INameChooser
 from zope.interface import implementer
+
 import transaction
 
+
 upload_lock = allocate_lock()
 
 
@@ -26,7 +28,7 @@ def __call__(self, name, content_type, data):
         ctr = getToolByName(self.context, 'content_type_registry')
         type_ = ctr.findTypeName(name.lower(), content_type, data) or 'File'
 
-        name = name.decode("utf8")
+        name = name.decode('utf8')
 
         chooser = INameChooser(self.context)
 
diff --git a/plone/app/dexterity/interfaces.py b/plone/app/dexterity/interfaces.py
index 31912e6..1fb34d2 100644
--- a/plone/app/dexterity/interfaces.py
+++ b/plone/app/dexterity/interfaces.py
@@ -1,14 +1,15 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity import _
 from plone.app.widgets.interfaces import IFileFactory
+from Products.CMFCore.utils import getToolByName
 from z3c.form import validator
 from zope import schema
 from zope.interface import Attribute
 from zope.interface import Interface
 from zope.interface import Invalid
 from zope.publisher.interfaces.browser import IBrowserPage
+
 import re
 
 
@@ -103,8 +104,8 @@ def validate(self, value):
 
         ttool = getToolByName(self.context, 'portal_types')
         if value in ttool.objectIds():
-            raise Invalid(_(u"There is already a content type named '${name}'",
-                          mapping={'name': value}))
+            msg = u"There is already a content type named '${name}'"
+            raise Invalid(_(msg, mapping={'name': value}))
 
 validator.WidgetValidatorDiscriminators(
     TypeIdValidator,
@@ -123,9 +124,8 @@ def validate(self, value):
                 continue
 
             if existing_fti.Title() == value:
-                raise Invalid(
-                    _(u"There is already a content type named '${name}'",
-                      mapping={'name': value}))
+                msg = u"There is already a content type named '${name}'"
+                raise Invalid(_(msg, mapping={'name': value}))
 
 validator.WidgetValidatorDiscriminators(
     TypeTitleValidator,
diff --git a/plone/app/dexterity/permissions.py b/plone/app/dexterity/permissions.py
index 99c94c3..dd8f36b 100644
--- a/plone/app/dexterity/permissions.py
+++ b/plone/app/dexterity/permissions.py
@@ -8,8 +8,8 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.utils import iterSchemata
 from plone.supermodel.utils import mergedTaggedValueDict
-from z3c.form.interfaces import IForm
 from z3c.form.interfaces import IFieldWidget
+from z3c.form.interfaces import IForm
 from zope.component import adapts
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
diff --git a/plone/app/dexterity/serialize.py b/plone/app/dexterity/serialize.py
index 690870d..5c5122d 100644
--- a/plone/app/dexterity/serialize.py
+++ b/plone/app/dexterity/serialize.py
@@ -49,4 +49,4 @@ def serializeSchema(schema):
         syncSchema(schema, model.schemata[schemaName], overwrite=True)
         fti.model_source = serializeModel(model)
     else:
-        raise TypeError("Changes to non-dynamic schemata not yet supported.")
+        raise TypeError('Changes to non-dynamic schemata not yet supported.')
diff --git a/plone/app/dexterity/testing.py b/plone/app/dexterity/testing.py
index 8acea54..3dbcba2 100644
--- a/plone/app/dexterity/testing.py
+++ b/plone/app/dexterity/testing.py
@@ -23,13 +23,13 @@ def setUpPloneSite(self, portal):
 
 DEXTERITY_INTEGRATION_TESTING = IntegrationTesting(
     bases=(DEXTERITY_FIXTURE,),
-    name="dexterity:Integration"
+    name='dexterity:Integration'
 )
 DEXTERITY_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(DEXTERITY_FIXTURE,),
-    name="dexterity:Functional"
+    name='dexterity:Functional'
 )
 DEXTERITY_ACCEPTANCE_TESTING = FunctionalTesting(
     bases=(DEXTERITY_FIXTURE, AUTOLOGIN_LIBRARY_FIXTURE, z2.ZSERVER_FIXTURE),
-    name="dexterity:Acceptance"
+    name='dexterity:Acceptance'
 )
diff --git a/plone/app/dexterity/tests/test_constrains.py b/plone/app/dexterity/tests/test_constrains.py
index b732d31..33179b6 100644
--- a/plone/app/dexterity/tests/test_constrains.py
+++ b/plone/app/dexterity/tests/test_constrains.py
@@ -1,18 +1,19 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 from plone.app.content.browser.constraintypes import IConstrainForm
 from plone.app.dexterity.behaviors import constrains
 from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+from plone.app.testing import login
+from plone.app.testing import setRoles
 from plone.app.testing import SITE_OWNER_NAME
 from plone.app.testing import SITE_OWNER_PASSWORD
 from plone.app.testing import TEST_USER_ID
-from plone.app.testing import login
-from plone.app.testing import setRoles
 from plone.dexterity.fti import DexterityFTI
 from plone.testing.z2 import Browser
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes
 from zope.interface.exceptions import Invalid
+
 import unittest
 
 
@@ -58,9 +59,12 @@ def setUp(self):
 
         self.types_tool = getToolByName(self.portal, 'portal_types')
         folder_type = self.types_tool.getTypeInfo(self.folder)
-        self.default_types = [t for t in self.types_tool.listTypeInfo() if
-                              t.isConstructionAllowed(self.folder)
-                              and folder_type.allowType(t.getId())]
+        self.default_types = [
+            t
+            for t in self.types_tool.listTypeInfo()
+            if t.isConstructionAllowed(self.folder) and
+            folder_type.allowType(t.getId())
+        ]
         assert len(self.default_types) > 1
         self.types_id_subset = [t.getId() for t in self.default_types][:1]
 
@@ -85,7 +89,7 @@ def test_constrainTypesModeValidSet(self):
     def test_constrainTypesModeInvalidSet(self):
         behavior = ISelectableConstrainTypes(self.folder)
         self.assertRaises(
-            ValueError, behavior.setConstrainTypesMode, "INVALID")
+            ValueError, behavior.setConstrainTypesMode, 'INVALID')
 
     def test_canSetConstrainTypesMode(self):
         behavior = ISelectableConstrainTypes(self.folder)
@@ -300,7 +304,7 @@ def test_allowedContentTypesExit3(self):
 
         behavior = ISelectableConstrainTypes(self.inner_folder)
         behavior.setConstrainTypesMode(constrains.ACQUIRE)
-        self.assertEquals(
+        self.assertEqual(
             self.types_id_subset,
             [x.getId() for x in behavior.allowedContentTypes()]
         )
@@ -355,7 +359,7 @@ def setUp(self):
         self.browser.handleErrors = False
         self.browser.addHeader(
             'Authorization',
-            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
         )
 
     def test_folder_view(self):
@@ -365,10 +369,12 @@ def test_folder_view(self):
 
     def test_folder_restrictions_view(self):
         self.browser.open(self.folder_url + '/folder_constraintypes_form')
-        self.assertTrue("Restrict what types" in self.browser.contents)
-        self.assertTrue("// Custom form constraints for constrain form" in
-                        self.browser.contents)
-        self.assertTrue("current_prefer_form" in self.browser.contents)
+        self.assertIn('Restrict what types', self.browser.contents)
+        self.assertIn(
+            '// Custom form constraints for constrain form',
+            self.browser.contents,
+        )
+        self.assertIn('current_prefer_form', self.browser.contents)
 
     def test_form_save_restrictions(self):
         self.browser.open(self.folder_url)
@@ -377,23 +383,23 @@ def test_form_save_restrictions(self):
         def ctrl(name):
             return self.browser.getControl(name=name)
 
-        self.browser.getControl("Type restrictions").value = ['1']
-        ctrl("form.widgets.allowed_types:list").value = ["Document", "Folder"]
-        ctrl("form.widgets.secondary_types:list").value = ["Document"]
-        self.browser.getControl("Save").click()
+        self.browser.getControl('Type restrictions').value = ['1']
+        ctrl('form.widgets.allowed_types:list').value = ['Document', 'Folder']
+        ctrl('form.widgets.secondary_types:list').value = ['Document']
+        self.browser.getControl('Save').click()
         aspect = ISelectableConstrainTypes(self.folder)
         self.assertEqual(1, aspect.getConstrainTypesMode())
         self.assertEqual(
-            ["Document", "Folder"],
+            ['Document', 'Folder'],
             aspect.getLocallyAllowedTypes()
         )
-        self.assertEqual(["Folder"], aspect.getImmediatelyAddableTypes())
+        self.assertEqual(['Folder'], aspect.getImmediatelyAddableTypes())
 
     def test_form_bad_save(self):
         aspect = ISelectableConstrainTypes(self.folder)
         constraint_before = aspect.getConstrainTypesMode()
-        assert constraint_before != 1, ("Default constraint should not be 1. "
-                                        "Test is outdated.")
+        assert constraint_before != 1, ('Default constraint should not be 1. '
+                                        'Test is outdated.')
 
         self.browser.open(self.folder_url)
         self.browser.getLink('Restrictions').click()
@@ -401,13 +407,13 @@ def test_form_bad_save(self):
         def ctrl(name):
             return self.browser.getControl(name=name)
 
-        self.browser.getControl("Type restrictions").value = ['1']
-        ctrl("form.widgets.allowed_types:list").value = ["Document"]
-        ctrl("form.widgets.secondary_types:list").value = [
-            "Document",
-            "Folder"
+        self.browser.getControl('Type restrictions').value = ['1']
+        ctrl('form.widgets.allowed_types:list').value = ['Document']
+        ctrl('form.widgets.secondary_types:list').value = [
+            'Document',
+            'Folder'
         ]
-        self.browser.getControl("Save").click()
+        self.browser.getControl('Save').click()
         self.assertEqual(constraint_before, aspect.getConstrainTypesMode())
         self.assertTrue('Error' in self.browser.contents)
 
@@ -432,7 +438,7 @@ def setUp(self):
         self.browser.handleErrors = False
         self.browser.addHeader(
             'Authorization',
-            'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD,)
+            'Basic {0}:{1}'.format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD, ),
         )
 
     def test_overview_folder_view(self):
diff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py
index e4849e9..fdd6fe4 100644
--- a/plone/app/dexterity/tests/test_doctests.py
+++ b/plone/app/dexterity/tests/test_doctests.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING
 from plone.testing import layered
+
 import doctest
 import unittest
 
diff --git a/plone/app/dexterity/tests/test_export.py b/plone/app/dexterity/tests/test_export.py
index 7a26211..fd0dcb6 100644
--- a/plone/app/dexterity/tests/test_export.py
+++ b/plone/app/dexterity/tests/test_export.py
@@ -5,6 +5,7 @@
 from xml.dom.minidom import parseString
 from xml.parsers.expat import ExpatError
 from zope.component import getMultiAdapter
+
 import StringIO
 import unittest
 import zipfile
@@ -43,7 +44,8 @@ def test_exported_XML_valid_for_GS(self):
             try:
                 parseString(file_xml)
             except ExpatError as e:
-                self.fail("Parsing XML failed with ExpatError: " + e.message)
+                msg = 'Parsing XML failed with ExpatError: {0}'
+                self.fail(msg.format(e.message))
 
 
 def test_suite():
diff --git a/plone/app/dexterity/tests/test_import.py b/plone/app/dexterity/tests/test_import.py
index 2e42825..754f088 100644
--- a/plone/app/dexterity/tests/test_import.py
+++ b/plone/app/dexterity/tests/test_import.py
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
 """Test the types import."""
 from DateTime.DateTime import DateTime
-from Products.CMFCore.utils import getToolByName
 from plone.app.dexterity.browser.import_types import ITypeProfileImport
 from plone.app.dexterity.browser.import_types import TypeProfileImport
 from plone.app.dexterity.browser.import_types import ZipFileImportContext
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+from Products.CMFCore.utils import getToolByName
+
 import os.path
 import plone.namedfile
 import unittest
diff --git a/plone/app/dexterity/tests/test_nextprevious.py b/plone/app/dexterity/tests/test_nextprevious.py
index f723aad..fe56ee0 100644
--- a/plone/app/dexterity/tests/test_nextprevious.py
+++ b/plone/app/dexterity/tests/test_nextprevious.py
@@ -1,11 +1,15 @@
-import unittest
-from plone.app.testing import setRoles, login, logout, TEST_USER_ID
+# -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
-
 from plone.app.layout.nextprevious.interfaces import INextPreviousProvider
+from plone.app.testing import login
+from plone.app.testing import logout
+from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
 from plone.dexterity.fti import DexterityFTI
 from Products.CMFCore.utils import getToolByName
 
+import unittest
+
 
 class NextPreviousBase:
     # subclass here
@@ -32,7 +36,7 @@ class NextPreviousEnabledTests(NextPreviousBase, unittest.TestCase):
 
     def setUp(self):
         self.portal = self.layer['portal']
-        self.wf = getToolByName(self.portal, "portal_workflow")
+        self.wf = getToolByName(self.portal, 'portal_workflow')
         self.wf.setDefaultChain('simple_publication_workflow')
         self.portal.acl_users._doAddUser('user_std', 'secret', ['Member'], [])
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
@@ -67,13 +71,13 @@ def testNextPreviousItems(self):
         container = self.portal[self.portal.invokeFactory(
             self._portal_type, 'case3')]
         for id in range(1, 4):
-            container.invokeFactory('Document', 'subDoc%d' % id)
+            container.invokeFactory('Document', 'subDoc{0}'.format(id))
 
         from OFS.Folder import manage_addFolder
         manage_addFolder(container, 'notacontentishtype')
 
         for id in range(5, 6):
-            container.invokeFactory('Document', 'subDoc%d' % id)
+            container.invokeFactory('Document', 'subDoc{0}'.format(id))
 
         adapter = INextPreviousProvider(container)
         # text data for next/previous items
@@ -108,9 +112,9 @@ def testNextItemOnlyShowViewable(self):
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         for id in range(1, 7):
             doc = container[container.invokeFactory(
-                'Document', 'subDoc%d' % id)]
+                'Document', 'subDoc{0}'.format(id))]
             if id in [2, 4, 5]:
-                self.wf.doActionFor(doc, "publish")
+                self.wf.doActionFor(doc, 'publish')
 
         # Member should only see the published items
         logout()
@@ -132,9 +136,9 @@ def testPreviousItemOnlyShowViewable(self):
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         for id in range(1, 7):
             doc = container[container.invokeFactory(
-                'Document', 'subDoc%d' % id)]
+                'Document', 'subDoc{0}'.format(id))]
             if id in [2, 4, 5]:
-                self.wf.doActionFor(doc, "publish")
+                self.wf.doActionFor(doc, 'publish')
 
         # Member should only see the published items
         logout()
@@ -161,7 +165,7 @@ class NextPreviousToggleTests(NextPreviousBase, unittest.TestCase):
 
     def setUp(self):
         self.portal = self.layer['portal']
-        self.wf = getToolByName(self.portal, "portal_workflow")
+        self.wf = getToolByName(self.portal, 'portal_workflow')
         self.portal.acl_users._doAddUser('user_std', 'secret', ['Member'], [])
         setRoles(self.portal, TEST_USER_ID, ['Manager'])
         self._setupFTI()
diff --git a/plone/app/dexterity/tests/test_permissions.py b/plone/app/dexterity/tests/test_permissions.py
index d3a2c42..4326f04 100644
--- a/plone/app/dexterity/tests/test_permissions.py
+++ b/plone/app/dexterity/tests/test_permissions.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
 from plone.app.content.browser.vocabulary import VocabularyView
-from plone.app.testing import TEST_USER_ID
-from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import login
 from plone.app.testing import setRoles
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
 from plone.app.widgets.interfaces import IWidgetsLayer
 from plone.app.widgets.testing import PLONEAPPWIDGETS_DX_INTEGRATION_TESTING
 from plone.app.widgets.testing import TestRequest
 from plone.autoform.interfaces import WIDGETS_KEY
 from plone.autoform.interfaces import WRITE_PERMISSIONS_KEY
+from plone.dexterity.browser.add import DefaultAddForm
+from plone.dexterity.browser.add import DefaultAddView
 from plone.dexterity.fti import DexterityFTI
-from plone.dexterity.browser.add import DefaultAddForm, DefaultAddView
 from z3c.form.interfaces import IFieldWidget
 from z3c.form.util import getSpecification
 from z3c.form.widget import FieldWidget
@@ -19,6 +20,7 @@
 from zope.component.globalregistry import base
 from zope.globalrequest import setRequest
 from zope.interface import Interface
+
 import json
 import unittest
 
@@ -70,9 +72,10 @@ def _enable_custom_widget(field):
 
 
 def _disable_custom_widget(field):
-        base.unregisterAdapter(
-            required=(getSpecification(field), IWidgetsLayer,),
-            provided=IFieldWidget)
+    base.unregisterAdapter(
+        required=(getSpecification(field), IWidgetsLayer, ),
+        provided=IFieldWidget,
+    )
 
 
 class DexterityVocabularyPermissionTests(unittest.TestCase):
@@ -108,8 +111,10 @@ def test_vocabulary_field_allowed(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
     def test_vocabulary_field_wrong_vocabulary_disallowed(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -118,7 +123,7 @@ def test_vocabulary_field_wrong_vocabulary_disallowed(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_field_disallowed(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -127,7 +132,7 @@ def test_vocabulary_field_disallowed(self):
             'field': 'disallowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_field_default_permission(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -139,13 +144,15 @@ def test_vocabulary_field_default_permission(self):
         # default edit permission is tested (Modify portal content)
         setRoles(self.portal, TEST_USER_ID, ['Member'])
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
         setRoles(self.portal, TEST_USER_ID, ['Editor'])
         # Now access should be allowed, but the vocabulary does not exist
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
     def test_vocabulary_field_default_permission_wrong_vocab(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -156,7 +163,7 @@ def test_vocabulary_field_default_permission_wrong_vocab(self):
         setRoles(self.portal, TEST_USER_ID, ['Editor'])
         # Now access should be allowed, but the vocabulary does not exist
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_missing_field(self):
         view = VocabularyView(self.portal.test_dx, self.request)
@@ -175,11 +182,13 @@ def test_vocabulary_on_widget(self):
             'field': 'custom_widget_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
         self.request.form['name'] = 'plone.app.vocabularies.Fake'
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
 
     def test_vocabulary_on_adapted_widget(self):
         _enable_custom_widget(IMockSchema['adapted_widget_field'])
@@ -189,12 +198,14 @@ def test_vocabulary_on_adapted_widget(self):
             'field': 'adapted_widget_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
         self.request.form['name'] = 'plone.app.vocabularies.Fake'
         data = json.loads(view())
-        self.assertEquals(data['error'], 'Vocabulary lookup not allowed')
+        self.assertEqual(data['error'], 'Vocabulary lookup not allowed')
         _disable_custom_widget(IMockSchema['adapted_widget_field'])
 
     def test_vocabulary_field_allowed_from_add_view(self):
@@ -206,8 +217,10 @@ def test_vocabulary_field_allowed_from_add_view(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
 
     def test_vocabulary_field_allowed_from_add_form(self):
         add_form = DefaultAddForm(self.portal, self.request)
@@ -218,5 +231,7 @@ def test_vocabulary_field_allowed_from_add_form(self):
             'field': 'allowed_field',
         })
         data = json.loads(view())
-        self.assertEquals(len(data['results']),
-                          len(self.portal.portal_types.objectIds()))
+        self.assertEqual(
+            len(data['results']),
+            len(self.portal.portal_types.objectIds()),
+        )
diff --git a/plone/app/dexterity/tests/test_robot.py b/plone/app/dexterity/tests/test_robot.py
index 570499e..aa9cf7d 100644
--- a/plone/app/dexterity/tests/test_robot.py
+++ b/plone/app/dexterity/tests/test_robot.py
@@ -2,6 +2,7 @@
 from plone.app.dexterity.testing import DEXTERITY_ACCEPTANCE_TESTING
 from plone.app.testing import ROBOT_TEST_LEVEL
 from plone.testing import layered
+
 import os
 import robotsuite
 import unittest
diff --git a/plone/app/dexterity/tests/test_upgrades.py b/plone/app/dexterity/tests/test_upgrades.py
index c6851a0..4bc0aa1 100644
--- a/plone/app/dexterity/tests/test_upgrades.py
+++ b/plone/app/dexterity/tests/test_upgrades.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING
+
 import unittest
 
 
diff --git a/plone/app/dexterity/upgrades/to2001.py b/plone/app/dexterity/upgrades/to2001.py
index c37ac1d..e8e7356 100644
--- a/plone/app/dexterity/upgrades/to2001.py
+++ b/plone/app/dexterity/upgrades/to2001.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.dexterity.interfaces import IDexterityContent
 from plone.uuid.handlers import addAttributeUUID
 from plone.uuid.interfaces import IUUID
+from Products.CMFCore.utils import getToolByName
 
 
 def add_missing_uuids(context):
diff --git a/plone/app/dexterity/upgrades/to2003.py b/plone/app/dexterity/upgrades/to2003.py
index c344c13..c1da608 100644
--- a/plone/app/dexterity/upgrades/to2003.py
+++ b/plone/app/dexterity/upgrades/to2003.py
@@ -2,6 +2,7 @@
 from Acquisition import aq_base
 from Products.CMFCore.utils import getToolByName
 
+
 BAD_GUY = ('zope.intid.interfaces.IIntIds', '')
 
 
diff --git a/plone/app/dexterity/upgrades/to2004.py b/plone/app/dexterity/upgrades/to2004.py
index 43d6d5d..3f22551 100644
--- a/plone/app/dexterity/upgrades/to2004.py
+++ b/plone/app/dexterity/upgrades/to2004.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.utils import getToolByName
 from plone.dexterity.interfaces import IDexterityFTI
+from Products.CMFCore.utils import getToolByName
 
 
 def remove_cr_and_lf_description(context):
diff --git a/setup.py b/setup.py
index bdfddb7..c22a650 100644
--- a/setup.py
+++ b/setup.py
@@ -1,86 +1,96 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '2.3.5.dev0'
-long_description = open("README.rst").read() + "\n" + \
-    open("RELEASE_NOTES.rst").read() + "\n" + \
-    open("CHANGES.rst").read()
 
-setup(name='plone.app.dexterity',
-      version=version,
-      description="Dexterity is a content type framework for CMF "
-                  "applications, with particular emphasis on Plone. It can "
-                  "be viewed as an alternative to Archetypes that is more "
-                  "light-weight and modular.",
-      long_description=long_description,
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 5.0",
-          "Framework :: Plone :: 5.1",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.7",
-          "Topic :: Software Development :: Libraries :: Python Modules",
-          "Development Status :: 5 - Production/Stable",
-      ],
-      keywords='plone ttw dexterity schema interface',
-      author='Martin Aspeli, David Glick, et al',
-      author_email='dexterity-development@googlegroups.com',
-      url='http://plone.org/products/dexterity',
-      license='GPL',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone', 'plone.app'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          # Dexterity
-          'plone.app.textfield',
-          'plone.behavior>=1.0b5',
-          'plone.dexterity >= 2.2.2dev',
-          'plone.formwidget.namedfile',
-          'plone.namedfile[scales] >=1.0b5dev-r36016',
-          'plone.rfc822',
-          'plone.schemaeditor >1.3.3',
-          # Plone/Zope core
-          'lxml',
-          'plone.app.content',
-          'plone.app.layout',
-          'plone.app.uuid',
-          'plone.app.z3cform>=1.1.0',
-          'plone.autoform >=1.1dev',
-          'plone.contentrules',
-          'plone.portlets',
-          'plone.supermodel>=1.1dev',
-          'plone.z3cform>=0.6.0',
-          'Products.CMFCore',
-          'Products.CMFPlone>=4.0b1',
-          'Products.GenericSetup',
-          'setuptools',
-          'Zope2',
-          'zope.browserpage',
-          'zope.interface',
-          'zope.component',
-          'zope.deprecation',
-          'zope.schema',
-          'zope.publisher',
-          'z3c.form>=3.0.0a1',
-      ],
-      extras_require={
-          'test': [
-              'plone.app.robotframework',
-              'plone.app.testing',
-          ],
-          'grok': [
-              'five.grok',
-              'plone.directives.dexterity',
-              'plone.directives.form >=1.1dev',
-          ],
-          'relations': [
-              'plone.app.relationfield',
-              'plone.app.intid',
-              'z3c.relationfield',
-          ]
-      },
-      entry_points="""
-      [z3c.autoinclude.plugin]
-      target = plone
-      """,
-      )
+short_description = (
+    'Dexterity is a content type framework for CMF  applications, '
+    'with particular emphasis on Plone. It can be viewed as an '
+    'alternative to Archetypes that is more light-weight and modular.'
+)
+
+long_description = '{0}\n{1}\n{2}'.format(
+    open('README.rst').read(),
+    open('RELEASE_NOTES.rst').read(),
+    open('CHANGES.rst').read(),
+)
+
+setup(
+    name='plone.app.dexterity',
+    version=version,
+    description=short_description,
+    long_description=long_description,
+    classifiers=[
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
+        'Topic :: Software Development :: Libraries :: Python Modules',
+        'Development Status :: 5 - Production/Stable',
+    ],
+    keywords='plone ttw dexterity schema interface',
+    author='Martin Aspeli, David Glick, et al',
+    author_email='dexterity-development@googlegroups.com',
+    url='http://plone.org/products/dexterity',
+    license='GPL',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone', 'plone.app'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        # Dexterity
+        'plone.app.textfield',
+        'plone.behavior>=1.0b5',
+        'plone.dexterity >= 2.2.2dev',
+        'plone.formwidget.namedfile',
+        'plone.namedfile[scales] >=1.0b5dev-r36016',
+        'plone.rfc822',
+        'plone.schemaeditor >1.3.3',
+        # Plone/Zope core
+        'lxml',
+        'plone.app.content',
+        'plone.app.layout',
+        'plone.app.uuid',
+        'plone.app.z3cform>=1.1.0',
+        'plone.autoform >=1.1dev',
+        'plone.contentrules',
+        'plone.portlets',
+        'plone.supermodel>=1.1dev',
+        'plone.z3cform>=0.6.0',
+        'Products.CMFCore',
+        'Products.CMFPlone>=4.0b1',
+        'Products.GenericSetup',
+        'setuptools',
+        'Zope2',
+        'zope.browserpage',
+        'zope.interface',
+        'zope.component',
+        'zope.deprecation',
+        'zope.schema',
+        'zope.publisher',
+        'z3c.form>=3.0.0a1',
+    ],
+    extras_require={
+        'test': [
+            'plone.app.robotframework',
+            'plone.app.testing',
+        ],
+        'grok': [
+            'five.grok',
+            'plone.directives.dexterity',
+            'plone.directives.form >=1.1dev',
+        ],
+        'relations': [
+            'plone.app.relationfield',
+            'plone.app.intid',
+            'z3c.relationfield',
+        ]
+    },
+    entry_points="""
+    [z3c.autoinclude.plugin]
+    target = plone
+    """,
+)


