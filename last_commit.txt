Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-08-22T12:59:46-05:00
Author: Oshane Bailey (b4oshany) <b4.oshany@gmail.com>
Commit: https://github.com/plone/mockup/commit/3d49b4b094d23fcf9370e2d7e74e56f00928f88d

Ported the changes from 5.1 to 5.0

Files changed:
A mockup/js/ui/templates/dropdown.xml
A mockup/js/ui/views/anchor.js
A mockup/js/ui/views/dropdown.js
A mockup/patterns/filemanager/js/findfile.js
A mockup/patterns/filemanager/js/findinfiles.js
A mockup/patterns/filemanager/js/popover.xml
A mockup/patterns/filemanager/templates/popover.xml
M .gitignore
M CHANGES.rst
M bower.json
M mockup/js/config.js
M mockup/js/ui/views/button.js
M mockup/patterns/filemanager/js/basepopover.js
M mockup/patterns/filemanager/js/customize.js
M mockup/patterns/filemanager/js/delete.js
M mockup/patterns/filemanager/pattern.filemanager.less
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/filemanager/templates/app.xml

diff --git a/.gitignore b/.gitignore
index 687ae184..69d17555 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+*.orig
 *.egg-info
 *.py?
 .idea
diff --git a/CHANGES.rst b/CHANGES.rst
index bd8285e7..d0f9ca5b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,17 @@ Changelog
 
 New features:
 
-- * Add item here *
+ - Improve the user experience for the theme editor
+  - Search for files and text within files and opening the file upon click.
+  - Add Bootstrap Dropdown menu to the UI views.
+  - Enable Drag and Drop inside of the theme editor file tree.
+  - Fixed the Drag and Drop files to root of the file tree.
+  - Fixed the autoscrolling issue when dragging a file in the file tree.
+  - Add Anchor (a) tag to the UI views.
+  - Upgrade JQTree to 1.4.1
+  - Enable Drag and Drop inside of the theme editor file tree.
+  - Add contextual menu to theme files in the file tree.
+  [b4oshany]
 
 Bug fixes:
 
diff --git a/bower.json b/bower.json
index 070f7c85..0e398285 100644
--- a/bower.json
+++ b/bower.json
@@ -26,7 +26,9 @@
     "tinymce-builded": "4.3.12",
     "requirejs": "",
     "less": "2.1.2",
-    "r.js": "2.1.15"
+    "r.js": "2.1.15",
+    "js-shortcuts": "^1.0.1",
+    "cs-jqtree-contextmenu": "^0.1.0"
   },
   "resolutions": {
     "jquery": "1.11.3",
diff --git a/mockup/js/config.js b/mockup/js/config.js
index e1f1c38a..61375283 100644
--- a/mockup/js/config.js
+++ b/mockup/js/config.js
@@ -35,6 +35,7 @@
       'dropzone': 'bower_components/dropzone/dist/dropzone-amd-module',
       'expect': 'bower_components/expect/index',
       'jqtree': 'bower_components/jqtree/tree.jquery',
+      'jqtree-contextmenu': 'bower_components/cs-jqtree-contextmenu/src/jqTreeContextMenu',
       'jquery': 'bower_components/jquery/dist/jquery',
       'jquery.cookie': 'bower_components/jquery.cookie/jquery.cookie',
       'jquery.event.drag': 'lib/jquery.event.drag',
@@ -44,6 +45,7 @@
       'jquery.tools.dateinput': 'bower_components/jquery.recurrenceinput.js/lib/jquery.tools.dateinput',
       'jquery.tools.overlay': 'bower_components/jquery.recurrenceinput.js/lib/jquery.tools.overlay',
       'jquery.tmpl': 'bower_components/jquery.recurrenceinput.js/lib/jquery.tmpl',
+      'js-shortcuts': 'bower_components/js-shortcuts/js-shortcuts',
       'translate': 'js/i18n-wrapper',
       'marked': 'bower_components/marked/lib/marked',
       'mockup-bundles-docs': 'js/bundles/docs',
@@ -134,6 +136,8 @@
       'bootstrap-transition': { exports: 'window.jQuery.support.transition', deps: ['jquery'] },
       'expect': { exports: 'window.expect' },
       'jqtree': { deps: ['jquery'] },
+      'jqtree-contextmenu': { deps: ['jqtree'] },
+      'js-shortcuts': { deps: ['jquery'] },
       'select2': { deps: ["jquery"] },
       'jquery.cookie': { deps: ['jquery'] },
       'jquery.event.drag': { deps: ['jquery'] },
diff --git a/mockup/js/ui/templates/dropdown.xml b/mockup/js/ui/templates/dropdown.xml
new file mode 100644
index 00000000..82c130e7
--- /dev/null
+++ b/mockup/js/ui/templates/dropdown.xml
@@ -0,0 +1,10 @@
+
+<a href="#" class="btn btn-default dropdown-toggle" type="button" id="dropdown-menu-" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
+  <span class="glyphicon glyphicon-<%= icon %>"></span>
+  <span class="dropdown-title">
+
+  </span>
+  <span class="caret"></span>
+</a>
+<ul class="dropdown-menu items dropdown-content" aria-labelledby="dropdown-menu-">
+</ul>
diff --git a/mockup/js/ui/views/anchor.js b/mockup/js/ui/views/anchor.js
new file mode 100644
index 00000000..3d373ee2
--- /dev/null
+++ b/mockup/js/ui/views/anchor.js
@@ -0,0 +1,57 @@
+define([
+  'underscore',
+  'mockup-ui-url/views/base',
+  'mockup-patterns-tooltip'
+], function(_, BaseView, Tooltip) {
+  'use strict';
+
+  var AnchorView = BaseView.extend({
+    tagName: 'a',
+    className: 'alink',
+    eventPrefix: 'button',
+    context: 'default',
+    idPrefix: 'alink-',
+    shortcut: '',
+    attributes: {
+      'href': '#'
+    },
+    extraClasses: [],
+    tooltip: null,
+    template: '<% if (icon) { %><span class="glyphicon glyphicon-<%= icon %>"></span><% } %> <%= title %> <span class="shortcut"><%= shortcut %></span>',
+    events: {
+      'click': 'handleClick'
+    },
+    initialize: function(options) {
+      if (!options.id) {
+        var title = options.title || '';
+        options.id = title !== '' ? title.toLowerCase().replace(' ', '-') : this.cid;
+      }
+      BaseView.prototype.initialize.apply(this, [options]);
+
+      this.on('render', function() {
+        this.$el.attr('title', this.options.tooltip || this.options.title || '');
+        this.$el.attr('aria-label', this.options.title || this.options.tooltip || '');
+        _.each(this.extraClasses, function(klass) {
+          this.$el.addClass(klass);
+        });
+      }, this);
+    },
+    handleClick: function(e) {
+      e.preventDefault();
+      if (!this.$el.prop('disabled')) {
+        this.uiEventTrigger('click', this, e);
+      }
+    },
+    serializedModel: function() {
+      return _.extend({'icon': '', 'title': '', 'shortcut': ''}, this.options);
+    },
+    disable: function() {
+      this.$el.prop('disabled', true);
+    },
+    enable: function() {
+      this.$el.prop('disabled', false);
+    }
+  });
+
+  return AnchorView;
+});
diff --git a/mockup/js/ui/views/button.js b/mockup/js/ui/views/button.js
index 83b3fa94..e9fd1ece 100644
--- a/mockup/js/ui/views/button.js
+++ b/mockup/js/ui/views/button.js
@@ -63,7 +63,7 @@ define([
     },
     handleClick: function(e) {
       e.preventDefault();
-      if (!this.$el.is('.disabled')) {
+      if (!this.$el.prop('disabled')) {
         this.uiEventTrigger('click', this, e);
       }
     },
@@ -71,12 +71,10 @@ define([
       return _.extend({'icon': '', 'title': ''}, this.options);
     },
     disable: function() {
-      this.options.disabled = true;
-      this.$el.addClass('disabled');
+      this.$el.prop('disabled', true);
     },
     enable: function() {
-      this.options.disabled = false;
-      this.$el.removeClass('disabled');
+      this.$el.prop('disabled', false);
     }
   });
 
diff --git a/mockup/js/ui/views/dropdown.js b/mockup/js/ui/views/dropdown.js
new file mode 100644
index 00000000..90eb79f9
--- /dev/null
+++ b/mockup/js/ui/views/dropdown.js
@@ -0,0 +1,59 @@
+define([
+  'jquery',
+  'underscore',
+  'mockup-ui-url/views/buttongroup',
+  'text!mockup-ui-url/templates/dropdown.xml',
+], function($, _, ButtonGroup, DropdownTemplate) {
+  'use strict';
+
+  var DropdownView = ButtonGroup.extend({
+    idPrefix: 'btngroup-dropdown-',
+    template: DropdownTemplate,
+    className: 'btn-group-dropdown',
+    itemContainer: "ul.dropdown-content",
+    title: null,
+
+    initialize: function(options) {
+      ButtonGroup.prototype.initialize.apply(this, [options]);
+
+      this.on('render', function() {
+        this.renderTitle();
+      }, this);
+    },
+
+    renderTitle: function() {
+      var title = this.options.title;
+      if(this.options.title === undefined) {
+        title = this.title;
+        if(this.title === null) {
+          title = "Menu Option";
+        }
+      }
+      this.$('.dropdown-title').empty().append(title);
+    },
+
+    renderItems: function() {
+      var self = this;
+      var $container;
+
+      if (this.itemContainer !== null) {
+        $container = $(this.itemContainer, this.$el);
+        if ($container.length === 0) {
+          throw 'Item Container element not found.';
+        }
+      } else {
+        $container = this.$el;
+      }
+
+      var $item = null;
+      _.each(this.items, function(view) {
+        $item = $("<li></li>");
+        $item.append(view.render().$el.removeClass("btn"));
+        $container.append($item);
+      }, this);
+    },
+
+  });
+
+  return DropdownView;
+});
diff --git a/mockup/patterns/filemanager/js/basepopover.js b/mockup/patterns/filemanager/js/basepopover.js
index 1559f724..301002b3 100644
--- a/mockup/patterns/filemanager/js/basepopover.js
+++ b/mockup/patterns/filemanager/js/basepopover.js
@@ -1,24 +1,53 @@
 define([
   'jquery',
   'underscore',
-  'backbone',
-  'mockup-ui-url/views/popover'
-], function($, _, Backbone, PopoverView) {
+  'mockup-ui-url/views/popover',
+  'text!mockup-patterns-filemanager-url/templates/popover.xml',
+], function($, _, PopoverView, PopoverTemplate) {
   'use strict';
 
   var FileManagerPopover = PopoverView.extend({
     className: 'popover',
     title: _.template('nothing'),
     content: _.template('<div/>'),
+    template: PopoverTemplate,
     initialize: function(options) {
       this.app = options.app;
       PopoverView.prototype.initialize.apply(this, [options]);
     },
+    afterRender: function () {
+      var self = this;
+      self.$el.find(".popover-close").click(function(e){
+        self.hide(true);
+      });
+      return self;
+    },
+    getBodyClassName: function(){
+      var name = 'popover-';
+      if(this.options.id){
+        name += this.options.id + '-';
+      }
+      name += 'active';
+      return name;
+    },
     render: function() {
       var self = this;
       PopoverView.prototype.render.call(this);
       return self;
     },
+    hide: function(closePopover) {
+      if(this.closeOnOutClick || closePopover == true){
+        this.opened = false;
+        this.$el.removeClass('active');
+        if (this.triggerView) {
+          this.triggerView.$el.removeClass('active');
+          this.triggerView.$el.attr('aria-hidden', 'true');
+        }
+        this.uiEventTrigger('hide', this);
+        this.$el.attr('aria-hidden', 'true');
+        $('body').removeClass(this.getBodyClassName());
+      }
+    },
     toggle: function(button, e) {
       PopoverView.prototype.toggle.apply(this, [button, e]);
       var self = this;
@@ -26,7 +55,7 @@ define([
         return;
       }
       var $path = self.$('.current-path');
-      if ($path.length !== 0){
+      if ($path.length !== 0) {
         $path.html(self.getPath());
       }
     },
diff --git a/mockup/patterns/filemanager/js/customize.js b/mockup/patterns/filemanager/js/customize.js
index 985108f2..18834eae 100644
--- a/mockup/patterns/filemanager/js/customize.js
+++ b/mockup/patterns/filemanager/js/customize.js
@@ -28,20 +28,20 @@ define([
       PopoverView.prototype.render.call(this);
       self.$form = self.$('form');
       self.$results = self.$('.results');
-      self.$form.submit(function(e){
+      self.$form.submit(function(e) {
         e.preventDefault();
         $.ajax({
           url: self.app.options.resourceSearchUrl,
           dataType: 'json',
-          success: function(data){
+          success: function(data) {
             self.$results.empty();
-            _.each(data, function(item){
+            _.each(data, function(item) {
               var $item = $(
                 '<li class="list-group-item" data-id="' + item.id + '">' +
                   '<span class="badge"><a href=#">' + _t('Customize') + '</a></span>' +
                   item.id +
                 '</li>');
-              $('a', $item).click(function(e){
+              $('a', $item).click(function(e) {
                 e.preventDefault();
                 self.customize($(this).parents('li').eq(0).attr('data-id'));
               });
diff --git a/mockup/patterns/filemanager/js/delete.js b/mockup/patterns/filemanager/js/delete.js
index ef60adcb..18bb097f 100644
--- a/mockup/patterns/filemanager/js/delete.js
+++ b/mockup/patterns/filemanager/js/delete.js
@@ -23,8 +23,8 @@ define([
     deleteButtonClicked: function(e) {
       var self = this;
       var path = self.app.getNodePath();
-      if( path === undefined ) {
-        alert("No file selected.");
+      if (path === undefined) {
+        alert('No file selected.');
         return;
       }
       self.app.doAction('delete', {
@@ -41,8 +41,8 @@ define([
             parent = parent.substr(0, parent.lastIndexOf('/'));
 
             var node = self.app.getNodeByPath(parent);
-            if( node !== null ) {
-                self.app.$tree.tree('openNode', node);
+            if (node !== null) {
+              self.app.$tree.tree('openNode', node);
             }
 
             self.app.closeActiveTab();
diff --git a/mockup/patterns/filemanager/js/findfile.js b/mockup/patterns/filemanager/js/findfile.js
new file mode 100644
index 00000000..d4c0c3dd
--- /dev/null
+++ b/mockup/patterns/filemanager/js/findfile.js
@@ -0,0 +1,101 @@
+define([
+  'jquery',
+  'underscore',
+  'mockup-patterns-filemanager-url/js/basepopover',
+  'translate'
+], function($, _, PopoverView, _t) {
+  'use strict';
+
+  var FindFile = PopoverView.extend({
+    className: 'popover filesearch',
+    closeOnOutClick: false,
+    backdropOptions: {
+      zIndex: '1009',
+      opacity: '0.4',
+      className: 'backdrop backdrop-popover',
+      classActiveName: 'backdrop-active',
+      closeOnEsc: false,
+      closeOnClick: false
+    },
+    title: _.template('<%= _t("Find File") %>'),
+    content: _.template(
+      '<form>' +
+        '<div class="input-group">' +
+          '<input type="text" class="search form-control" ' +
+                  'id="file-search-field" placeholder="<%= _t("Find theme resource in plone") %>">' +
+        '</div>' +
+        '<div class="input-group">' +
+          '<input type="submit" class="btn btn-primary" value="<%= _t("Search") %>"/>' +
+        '</div>' +
+      '</form><br/>' +
+      '<ul class="results list-group">' +
+      '</ul>'
+    ),
+    appendToResults: function(item){
+      var self = this;
+      var $item = $(
+        '<li class="list-group-item">' +
+          '<span class="badge"><a data-target="' + item.path + '" href=#">' +
+          _t(item.filename) + '</a></span>' +
+        '</li>');
+      $('a', $item).click(function(e) {
+        e.preventDefault();
+        self.findfile($(this).attr('data-target'));
+      });
+      self.$results.append($item);
+    },
+    filterFiles: function(patt, data){
+      var self = this;
+      _.each(data, function(item) {
+        if(item.folder){
+          self.filterFiles(patt, item.children);
+        }else{
+          if(patt.test(item.filename)){
+            self.appendToResults(item);
+            self.noMatches++;
+          }
+        }
+      });
+    },
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      self.$form = self.$('form');
+      self.$searchFor = self.$("input");
+      self.$results = self.$('.results');
+      self.$form.submit(function(e) {
+        e.preventDefault();
+        $.ajax({
+          url: self.app.options.actionUrl + '?action=dataTree',
+          dataType: 'json',
+          success: function(data) {
+            self.$results.empty();
+            self.noMatches = 0;
+            var searchFor = self.$searchFor.val();
+            var patt = new RegExp(searchFor, "g");
+            self.filterFiles(patt, data);
+            if(self.noMatches == 0){
+              self.$results.append("<span>No results found for " + searchFor + "</span>");
+            }
+          }
+        });
+      });
+      return self;
+    },
+    findfile: function(resource) {
+      var self = this;
+      self.app.doAction('getFile', {
+        data: {
+          path: resource
+        },
+        dataType: 'json',
+        success: function(data) {
+          self.app.fileData[resource] = data;
+          self.app.openEditor(resource);
+        }
+      });
+    }
+  });
+
+  return FindFile;
+});
diff --git a/mockup/patterns/filemanager/js/findinfiles.js b/mockup/patterns/filemanager/js/findinfiles.js
new file mode 100644
index 00000000..51ea104e
--- /dev/null
+++ b/mockup/patterns/filemanager/js/findinfiles.js
@@ -0,0 +1,137 @@
+define([
+  'jquery',
+  'underscore',
+  'mockup-patterns-filemanager-url/js/basepopover',
+  'translate'
+], function($, _, PopoverView, _t) {
+  'use strict';
+
+  var FindInFiles = PopoverView.extend({
+    className: 'popover filesearch',
+    closeOnOutClick: false,
+    backdropOptions: {
+      zIndex: '1009',
+      opacity: '0.4',
+      className: 'backdrop backdrop-popover',
+      classActiveName: 'backdrop-active',
+      closeOnEsc: false,
+      closeOnClick: false
+    },
+    title: _.template('<%= _t("Find in File") %>'),
+    content: _.template(
+      '<form>' +
+        '<div class="input-group">' +
+          '<input type="text" class="search form-control" ' +
+                  'id="file-search-field" placeholder="<%= _t("Find text witin theme resource in plone") %>">' +
+        '</div>' +
+        '<div class="input-group">' +
+          '<input type="submit" class="btn btn-primary" value="<%= _t("Search") %>"/>' +
+        '</div>' +
+      '</form><br/>' +
+      '<ul style="max-height: 400px; overflow: auto;" class="results list-group">' +
+      '</ul>'
+    ),
+    appendToResults: function(item){
+      var self = this, seen = null;
+      var file_item =
+        '<li class="list-group-item" data-id="' + item.file.label + '">' +
+          '<span class="badge">' + _t(item.file.filename) + '</span><ul>';
+      for(var x in item.lines){
+        seen = item.lines[x];
+        file_item += '<li class="list-group-item" data-id="' + item.file.label + '">' +
+          '<span class="badge"><a class="ff-open-file" data-target="'+item.file.path+'" ' +
+          'target-line="'+seen.line+'" href="#">Line ' +
+          '<span style="display: inline-block; width: 100px;">' + seen.line +
+          '</span><span>'+seen.text+'</span><a></span></li>';
+      }
+      file_item += '</ul></li>';
+      var $item = $(file_item);
+      $('a', $item).click(function(e) {
+        e.preventDefault();
+        self.findinfiles(
+          $(this).attr("data-target"),
+          parseInt($(this).attr("target-line"))
+        );
+      });
+      self.$results.append($item);
+    },
+
+    filterFile: function(patt, item){
+      var self = this;
+      $.ajax({
+        url: self.app.options.actionUrl + '?action=getFile&path='+item.path.replace("/", "%2F"),
+        dataType: 'json',
+        success: function(data) {
+          var contents = data["contents"];
+          if(contents == undefined){
+            return;
+          }
+          var lines = contents.split("\n");
+          var seen = [], line = '';
+          var result = null;
+          for(var x in lines){
+            line = lines[x];
+            result = patt.exec(line);
+            if(result != null){
+              seen.push({
+                "line": parseInt(x) + 1,
+                "text": '<b>'+result[0]+'</b>'+line.substr(result["index"] + result[0].length, 20)
+              });
+            }
+          }
+          if(seen.length > 0){
+            self.appendToResults({file: item, lines: seen});
+            self.noMatches += seen.length;
+          }
+        }
+      });
+    },
+    filterFiles: function(patt, data){
+      var self = this;
+      _.each(data, function(item) {
+        if(item.folder){
+          self.filterFiles(patt, item.children);
+        }else{
+          self.filterFile(patt, item);
+        }
+      });
+    },
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      self.$form = self.$('form');
+      self.$searchFor = self.$("input");
+      self.$results = self.$('.results');
+      self.$form.submit(function(e) {
+        e.preventDefault();
+        $.ajax({
+          url: self.app.options.actionUrl + '?action=dataTree',
+          dataType: 'json',
+          success: function(data) {
+            self.$results.empty();
+            self.noMatches = 0;
+            var searchFor = self.$searchFor.val();
+            var patt = new RegExp(searchFor, "g");
+            self.filterFiles(patt, data);
+          }
+        });
+      });
+      return self;
+    },
+    findinfiles: function(resource, line) {
+      var self = this;
+      self.app.doAction('getFile', {
+        data: {
+          path: resource
+        },
+        dataType: 'json',
+        success: function(data) {
+          self.app.fileData[resource] = data;
+          self.app.openEditor(resource, {goToLine: line});
+        }
+      });
+    }
+  });
+
+  return FindInFiles;
+});
diff --git a/mockup/patterns/filemanager/js/popover.xml b/mockup/patterns/filemanager/js/popover.xml
new file mode 100644
index 00000000..a276f070
--- /dev/null
+++ b/mockup/patterns/filemanager/js/popover.xml
@@ -0,0 +1,12 @@
+<div class="arrow"></div>
+<div class="popover-label">
+<div style="position: relative;" class="popover-title">
+</div>
+<a style="position: absolute; top: 5px; right: 3px; font-size: 16px; color: #999;"
+   href="#" class="popover-close">
+  <span class="glyphicon glyphicon-remove"></span>
+</a>
+</div>
+<div class="items popover-content">
+</div>
+
diff --git a/mockup/patterns/filemanager/pattern.filemanager.less b/mockup/patterns/filemanager/pattern.filemanager.less
index aa7d966f..d93221d1 100644
--- a/mockup/patterns/filemanager/pattern.filemanager.less
+++ b/mockup/patterns/filemanager/pattern.filemanager.less
@@ -28,6 +28,11 @@
     .popover:extend(.popover all){}
     .popover-title:extend(.popover-title all){}
     .popover-content:extend(.popover-content all){}
+
+    .popover{
+        max-width: 600px;
+    }
+
     .arrow:extend(.arrow all){}
     .tooltip:extend(.tooltip all){}
     .tooltip-arrow:extend(.tooltip-arrow all){}
@@ -42,6 +47,20 @@
     .btn-primary:extend(.btn-primary all){}
     .btn-group:extend(.btn-group all){}
     .btn-success:extend(.btn-success all){}
+    .btn-group-dropdown:extend(.btn-group all){
+        display: inline-block;
+        margin: 0 !important;
+        vertical-align: initial !important;
+        
+        span.shortcut {
+            display: inline-block;
+            float: right;
+        }
+
+        ul.dropdown-menu.items.dropdown-content {
+            min-width: 250px;
+        }
+    }
     .input-group:extend(.input-group all){}
     .input-group-addon:extend(.input-group-addon all){}
     .input-group-btn:extend(.input-group-btn all){}
@@ -110,8 +129,38 @@
         }
     }
     .navbar {
-        a.btn {
+        .btn-group > a.btn {
+            float: none;
+            display: inline-block;
+            margin-bottom: 0.5em;
+            text-decoration: none;
+        }
+        .btn-group > .btn-group-dropdown{
+            float: none;
+            display: inline-block;
             text-decoration: none;
+
+            & > a.btn {
+                margin-bottom: 0.5em;
+                border-radius: 0;
+                float: none;
+                display: inline-block;
+                text-decoration: none;
+                padding: 5px 5px 8px 5px;
+                line-height: 10px;
+                font-size: 13px;
+            }
+
+            &:last-child > a.btn{
+                border-bottom-right-radius: 4px;
+                border-top-right-radius: 4px;
+            }
+
+            &:first-child > a.btn{
+                border-bottom-left-radius: 4px;
+                border-top-left-radius: 4px;
+            }
+
         }
     }
     .navbar-default {
diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index 77a1acc7..ec60e5c3 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -37,24 +37,32 @@ define([
   'underscore',
   'backbone',
   'mockup-ui-url/views/base',
+  'jqtree-contextmenu',
   'mockup-patterns-tree',
   'mockup-patterns-texteditor',
   'text!mockup-patterns-filemanager-url/templates/app.xml',
   'mockup-ui-url/views/toolbar',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup',
+  'mockup-ui-url/views/anchor',
+  'mockup-ui-url/views/dropdown',
   'mockup-patterns-filemanager-url/js/addnew',
   'mockup-patterns-filemanager-url/js/newfolder',
+  'mockup-patterns-filemanager-url/js/findfile',
+  'mockup-patterns-filemanager-url/js/findinfiles',
   'mockup-patterns-filemanager-url/js/delete',
   'mockup-patterns-filemanager-url/js/customize',
   'mockup-patterns-filemanager-url/js/rename',
   'mockup-patterns-filemanager-url/js/upload',
   'translate',
   'mockup-utils',
-  'text!mockup-ui-url/templates/popover.xml'
-], function($, Base, _, Backbone, BaseView, Tree, TextEditor, AppTemplate, Toolbar,
-            ButtonView, ButtonGroup, AddNewView, NewFolderView, DeleteView,
-            CustomizeView, RenameView, UploadView, _t, utils) {
+  'js-shortcuts',
+  'text!mockup-ui-url/templates/popover.xml',
+  'text!mockup-ui-url/templates/dropdown.xml'
+], function($, Base, _, Backbone, BaseView, ContextMenu, Tree, TextEditor, AppTemplate, Toolbar,
+            ButtonView, ButtonGroup, AnchorView, DropdownView,
+      AddNewView, NewFolderView, FindFileView, FindInFilesView, DeleteView,
+            CustomizeView, RenameView, UploadView, _t, utils, jsShortcuts) {
   'use strict';
 
   var FileManager = Base.extend({
@@ -91,6 +99,15 @@ define([
 
       self.options.treeConfig = $.extend(true, {}, self.treeConfig, {
         dataUrl: self.options.actionUrl + '?action=dataTree',
+        dragAndDrop: true,
+        useContextMenu: true,
+        onCanMoveTo: function(moved, target, position) {
+          /* if not using folder option, just allow, otherwise, only allow if folder */
+          if (position === "inside") {
+            return target.folder === undefined || target.folder === true;
+          }
+          return true;
+        },
         onCreateLi: function(node, li) {
           var imageTypes = ['png', 'jpg', 'jpeg', 'gif', 'ico'];
           var themeTypes = ['css', 'html', 'htm', 'txt', 'xml', 'js', 'cfg', 'less'];
@@ -117,73 +134,150 @@ define([
         id: 'save',
         title: _t('Save'),
         icon: 'floppy-disk',
-        context: 'primary'
+        context: 'primary',
+        shortcut: 'Ctrl-S'
       });
-
-      var newFolderView = new NewFolderView({
-        triggerView: new ButtonView({
+      self.btns = {
+        "newfolder": new AnchorView({
           id: 'newfolder',
           title: _t('New folder'),
           tooltip: _t('Add new folder to current directory'),
           icon: 'folder-open',
-          context: 'default'
+          context: 'default',
+          shortcut: 'Alt-Shift-N'
         }),
-        app: self
-      });
-      var addNewView = new AddNewView({
-        triggerView: new ButtonView({
+        "newfile": new AnchorView({
           id: 'addnew',
-          title: _t('Add new file'),
+          title: _t('New file'),
           tooltip: _t('Add new file to current folder'),
           icon: 'file',
-          context: 'default'
+          context: 'default',
+          shortcut: 'Alt-N'
         }),
-        app: self
-      });
-      var renameView = new RenameView({
-        triggerView: new ButtonView({
+        "findfile": new AnchorView({
+          id: 'findfile',
+          title: _t('Find File'),
+          tooltip: _t('Find theme resource in plone'),
+          icon: 'search',
+          context: 'default',
+          shortcut: 'Ctrl-F'
+        }),
+        "findtextinfile": new AnchorView({
+          id: 'findinfiles',
+          title: _t('Find in Files'),
+          tooltip: _t('Find text within theme resource in plone'),
+          icon: 'search',
+          context: 'default',
+          shortcut: 'Ctrl-E'
+        }),
+        "rename": new AnchorView({
           id: 'rename',
           title: _t('Rename'),
           tooltip: _t('Rename currently selected resource'),
           icon: 'random',
           context: 'default'
         }),
-        app: self
-      });
-      var deleteView = new DeleteView({
-        triggerView: new ButtonView({
+        "delete": new AnchorView({
           id: 'delete',
           title: _t('Delete'),
           tooltip: _t('Delete currently selected resource'),
           icon: 'trash',
           context: 'danger'
         }),
+      };
+
+      var newFolderView = new NewFolderView({
+        triggerView: self.btns["newfolder"],
+        app: self
+      });
+      var addNewView = new AddNewView({
+        triggerView: self.btns["newfile"],
+        app: self
+      });
+      var findFileView = new FindFileView({
+        triggerView: self.btns["findfile"],
+        app: self
+      });
+      var findinFilesView = new FindInFilesView({
+        triggerView: self.btns["findtextinfile"],
+        app: self
+      });
+      var renameView = new RenameView({
+        triggerView: self.btns["rename"],
+        app: self
+      });
+      var deleteView = new DeleteView({
+        triggerView: self.btns["delete"],
         app: self
       });
 
-      self.views = [
-        newFolderView,
-        addNewView,
-        renameView,
-        deleteView
-      ];
+      var file_menu = new DropdownView({
+        title: _t('File'),
+        items: [
+          addNewView.triggerView,
+          newFolderView.triggerView
+        ],
+        id: 'file_menu',
+        app: self,
+        icon: 'file',
+        disable: function() {}
+      });
+
+      var edit_menu = new DropdownView({
+        title: _t('Edit'),
+        items: [
+          renameView.triggerView,
+          deleteView.triggerView
+        ],
+        id: 'edit_menu',
+        app: self,
+        icon: 'file',
+        disable: function() {}
+      });
+
+      var find_menu = new DropdownView({
+        title: _t('Find'),
+        items: [
+          findFileView.triggerView,
+          findinFilesView.triggerView
+        ],
+        id: 'find_menu',
+        icon: 'search',
+        app: self,
+        disable: function() {}
+      });
+
+      var views = {
+        "file_menu": [
+          newFolderView,
+          addNewView
+        ],
+        "edit_menu": [
+          renameView,
+          deleteView,
+        ],
+        "find_menu": [
+          findFileView,
+          findinFilesView
+        ],
+      };
       var mainButtons = [
         self.saveBtn,
-        newFolderView.triggerView,
-        addNewView.triggerView,
-        renameView.triggerView,
-        deleteView.triggerView
+        file_menu,
+        edit_menu,
+        find_menu,
       ];
 
-      if (self.options.uploadUrl && utils.featureSupport.dragAndDrop() && utils.featureSupport.fileApi()){
-        var uploadView = new UploadView({
-          triggerView: new ButtonView({
+      if (self.options.uploadUrl && utils.featureSupport.dragAndDrop() && utils.featureSupport.fileApi()) {
+        self.btns["upload"] = new AnchorView({
             id: 'upload',
-            title: _t('Upload'),
+            title: _t('Upload Local Files...'),
             tooltip: _t('Upload file to current directory'),
             icon: 'upload',
             context: 'default'
-          }),
+        });
+        var uploadView = new UploadView({
+          triggerView: self.btns["upload"],
           app: self,
           callback: function(data) {
             var path = self.uploadFolder + '/' + data.name;
@@ -194,22 +288,26 @@ define([
 
           }
         });
-        self.views.push(uploadView);
-        mainButtons.push(uploadView.triggerView);
+
+        views.file_menu.push(uploadView);
+        file_menu.items.push(uploadView.triggerView);
       }
-      if (self.options.resourceSearchUrl){
+      if (self.options.resourceSearchUrl) {
+        self.btns["customize"] = new AnchorView({
+          id: 'customize',
+          title: _t('Add new override'),
+          tooltip: _t('Find resource in plone to override'),
+          context: 'default'
+        });
         var customizeView = new CustomizeView({
-          triggerView: new ButtonView({
-            id: 'customize',
-            title: _t('Add new override'),
-            tooltip: _t('Find resource in plone to override'),
-            context: 'default'
-          }),
+          triggerView: self.btns["customize"],
           app: self
         });
-        self.views.push(customizeView);
-        mainButtons.push(customizeView.triggerView);
+        views["edit_menu"].push(customizeView);
+        edit_menu.items.push(customizeView.triggerView);
       }
+      self.views = [];
+      self.views = self.views.concat(views.file_menu).concat(views.edit_menu).concat(views.find_menu);
 
       self.toolbar = new Toolbar({
         items: [
@@ -224,8 +322,8 @@ define([
       self._save = function() {
 
         var path = $('.active', self.$tabs).data('path');
-        if( path === undefined || path === false ) {
-          alert("No file selected.");
+        if (path === undefined || path === false) {
+          alert('No file selected.');
           return;
         }
         self.doAction('saveFile', {
@@ -236,10 +334,10 @@ define([
             _authenticator: utils.getAuthenticator()
           },
           success: function(data) {
-            if( data['error'] !== undefined ) {
-              alert("There was a problem saving the file.");
+            if (data['error'] !== undefined) {
+              alert('There was a problem saving the file.');
             }
-            $('[data-path="' + path + '"]').removeClass("modified");
+            $('[data-path="' + path + '"]').removeClass('modified');
           }
         });
       };
@@ -248,13 +346,35 @@ define([
         self._save();
       });
       self.render();
+      self.shortcuts();
+
+    },
+
+    shortcuts: function(){
+      var self = this;
+      shortcut.add("Alt+N", function () {
+        self.btns.newfile.$el.click();
+      });
+      shortcut.add("Alt+Shift+N", function () {
+        self.btns.newfolder.$el.click();
+      });
+      shortcut.add("Ctrl+S", function () {
+        self.saveBtn.$el.click();
+      });
+      shortcut.add("Ctrl+F", function () {
+        self.btns.findfile.$el.click();
+      });
+      shortcut.add("Ctrl+E", function () {
+        self.btns.findtextinfile.$el.click();
+      });
     },
-    $: function(selector){
+
+    $: function(selector) {
       return this.$el.find(selector);
     },
     refreshTree: function(callback) {
       var self = this;
-      if( callback === undefined ) {
+      if (callback === undefined) {
         callback = function() {};
       }
       self.$tree.tree('loadDataFromUrl',
@@ -263,7 +383,7 @@ define([
         callback
       );
     },
-    render: function(){
+    render: function() {
       var self = this;
       self.$el.html(self.template(self.options));
       self.$('#toolbar').append(self.toolbar.render().el);
@@ -277,34 +397,74 @@ define([
       self.$editor = self.$('.editor');
 
       /* close popovers when clicking away */
-      $(document).click(function(e){
-          var $el = $(e.target);
-          if(!$el.is(':visible')){
-              // ignore this, fake event trigger to element that is not visible
-              return;
-          }
-          if($el.is('a') || $el.parent().is('a')){
-              return;
+      $(document).click(function(e) {
+        var $el = $(e.target);
+        if (!$el.is(':visible')) {
+          // ignore this, fake event trigger to element that is not visible
+          return;
+        }
+        if ($el.is('a') || $el.parent().is('a')) {
+          return;
+        }
+        var $popover = $('.popover:visible');
+        if ($popover.length > 0 && !$.contains($popover[0], $el[0])) {
+          var popover = $popover.data('component');
+          if (popover) {
+            popover.hide();
           }
-          var $popover = $('.popover:visible');
-          if($popover.length > 0 && !$.contains($popover[0], $el[0])){
-              var popover = $popover.data('component');
-              if(popover){
-                  popover.hide();
-              }
+        }
+      });
+
+      // bind 'tree.contextmenu' event
+      self.$tree.jqTreeContextMenu({
+          menu: '#contextual-menu',
+          onContextMenuItem: function(e, node, $el) {
+            var action = $el.data("item");
+            try {
+              self.btns[action].el.click();
+            } catch($err) {
+              console.log("Command does not exist: " + action);
+            }
           }
       });
 
       self.$tree.bind('tree.select', function(e) {
-        if( e.node === null ) {
+        if (e.node === null) {
           self.toggleButtons(false);
-        }
-        else{
+        } else {
           self.toggleButtons(true);
           self.handleClick(e);
         }
       });
 
+      self.$tree.bind('tree.move', function(event) {
+
+        var target_node = event.move_info.target_node;
+        var srcpath = event.move_info.moved_node.path;
+        var newpath = target_node.path;
+        if (event.move_info.position !== "inside" ){
+          newpath = newpath.substring(newpath.indexOf('/'), newpath.lastIndexOf('/'));
+        }
+
+        self.doAction('move', {
+          data: {
+            source: srcpath,
+            destination: newpath
+          },
+          dataType: 'json',
+          success: function(data) {
+            console.log(data);
+            self.$tree.tree('reload', function() {
+              self.$tree.tree('selectNode', target_node);
+            });
+            var jdata = JSON.parse(data);
+            if(jdata.error != ''){
+              alert(jdata.error);
+            }
+          }
+        });
+      });
+
       self.$tree.bind('tree.open', function(e) {
         var element = $(e.node.element).find(':first').find('.glyphicon');
         $(element).addClass('glyphicon-folder-open');
@@ -319,16 +479,16 @@ define([
 
       self.$tree.bind('tree.init', function(e) {
         var node = self.$tree.tree('getTree').children[0];
-        if( node ) {
+        if (node) {
           self.$tree.tree('selectNode', node);
         }
       });
 
       $(self.$tabs).on('click', function(e) {
         var path = $(e.target).data('path');
-        if( path === undefined ) {
+        if (path === undefined) {
           path = $(e.target.parentElement).data('path');
-          if( path === undefined ) {
+          if (path === undefined) {
             return false;
           }
         }
@@ -339,19 +499,18 @@ define([
       });
     },
     toggleButtons: function(on) {
-      if( on === undefined ) {
+      if (on === undefined) {
         return;
       }
 
-      if( on ) {
-        $('#btn-delete', this.$el).attr('disabled', false);
-        $('#btn-save', this.$el).attr('disabled', false);
-        $('#btn-rename', this.$el).attr('disabled', false);
-      }
-      else{
-        $('#btn-delete', this.$el).attr('disabled', 'disabled');
-        $('#btn-save', this.$el).attr('disabled', 'disabled');
-        $('#btn-rename', this.$el).attr('disabled', 'disabled');
+      if (on) {
+        $('#btn-delete', this.$el).prop('disabled', false);
+        $('#btn-save', this.$el).prop('disabled', false);
+        $('#btn-rename', this.$el).prop('disabled', false);
+      } else {
+        $('#btn-delete', this.$el).prop('disabled', true);
+        $('#btn-save', this.$el).prop('disabled', true);
+        $('#btn-rename', this.$el).prop('disabled', true);
       }
     },
     handleClick: function(event) {
@@ -363,9 +522,9 @@ define([
       var self = this;
       var active = self.$tabs.find('.active .remove');
       var $siblings = $(active).parent().siblings();
-      if ($siblings.length > 0){
+      if ($siblings.length > 0) {
         var $item;
-        if ($(active).parent().prev().length > 0){
+        if ($(active).parent().prev().length > 0) {
           $item = $(active).parent().prev();
         } else {
           $item = $(active).parent().next();
@@ -380,15 +539,14 @@ define([
     },
     closeTab: function(path) {
       var self = this;
-      if( path === undefined ) {
+      if (path === undefined) {
         return;
       }
 
       var tabs = self.$tabs.children();
 
       $(tabs).each(function() {
-        if( $(this).data('path') == path )
-        {
+        if ($(this).data('path') == path) {
           $(this).find('a.remove').trigger('click');
         }
       });
@@ -402,22 +560,22 @@ define([
     },
     createTab: function(path) {
       var self = this;
-      var $item = $(self.tabItemTemplate({path: path}));
+      var $item = $(self.tabItemTemplate({
+        path: path
+      }));
       self.shrinkTab($item);
       self.$tabs.append($item);
-      $('.remove', $item).click(function(e){
+      $('.remove', $item).click(function(e) {
         e.preventDefault();
         e.stopPropagation();
         self.closeActivePopovers();
-        if ($(this).parent().hasClass('active'))
-        {
+        if ($(this).parent().hasClass('active')) {
           self.closeActiveTab();
-        }
-        else {
+        } else {
           $(this).parent().remove();
         }
       });
-      $('.select', $item).click(function(e){
+      $('.select', $item).click(function(e) {
         e.preventDefault();
         $('li', self.$tabs).removeClass('active');
         var $li = $(this).parent();
@@ -427,60 +585,61 @@ define([
     },
     updateTabs: function(path) {
       var self = this;
-      if( path === undefined ) {
+      if (path === undefined) {
         return;
       }
       $('li', self.$tabs).removeClass('active');
       var $existing = $('[data-path="' + path + '"]', self.$tabs);
-      if ($existing.length === 0){
+      if ($existing.length === 0) {
         self.createTab(path);
-      }else{
+      } else {
         $existing.addClass('active');
       }
     },
     shrinkTab: function(tab) {
-        var self = this;
-        if( self.$tabs.hasClass('smallTabs') ) {
-            tab = $(tab);
-            var text = tab.text();
-            if( text.lastIndexOf('/') > 0 )
-            {
-                text = text.substr(text.lastIndexOf('/') + 1);
-                tab.find('.select').text(text);
-            }
+      var self = this;
+      if (self.$tabs.hasClass('smallTabs')) {
+        tab = $(tab);
+        var text = tab.text();
+        if (text.lastIndexOf('/') > 0) {
+          text = text.substr(text.lastIndexOf('/') + 1);
+          tab.find('.select').text(text);
         }
+      }
     },
     openFile: function(event) {
       var self = this;
-      if( event.node === null ) {
+      if (event.node === null) {
         return true;
       }
-      if (event.node.folder){
-        if( self.options.theme ) {
+      if (event.node.folder) {
+        if (self.options.theme) {
           self.setUploadUrl(event.node.path);
         }
         return true;
       }
       var doc = event.node.path;
-      if(self.fileData[doc]) {
+      if (self.fileData[doc]) {
         self.openEditor(doc);
 
         var resetLine = function() {
-          if( self.fileData[doc].line === undefined ) {
+          if (self.fileData[doc].line === undefined) {
             return;
           }
           self.ace.editor.scrollToLine(self.fileData[doc].line);
-          self.ace.editor.moveCursorToPosition(self.fileData[doc].cursorPosition)
+          self.ace.editor.moveCursorToPosition(self.fileData[doc].cursorPosition);
           //We only want this to fire after the intial render,
           //Not after rendering a "scroll" or "focus" event,
           //So we remove it immediately after.
-          self.ace.editor.renderer.off("afterRender", resetLine);
+          self.ace.editor.renderer.off('afterRender', resetLine);
         };
         //This sets the listener before rendering finishes
-        self.ace.editor.renderer.on("afterRender", resetLine);
+        self.ace.editor.renderer.on('afterRender', resetLine);
       } else {
         self.doAction('getFile', {
-          data: { path: doc },
+          data: {
+            path: doc
+          },
           dataType: 'json',
           success: function(data) {
             self.fileData[doc] = data;
@@ -491,29 +650,24 @@ define([
     },
     getNodeByPath: function(path) {
       var self = this;
-      if( path === undefined || path === "" )
-      {
-       return null;
+      if (path === undefined || path === '') {
+        return null;
       }
 
-      if( path.indexOf('/') === 0 )
-      {
-        path = path.substr(1,path.length);
+      if (path.indexOf('/') === 0) {
+        path = path.substr(1, path.length);
       }
 
       var folders = path.split('/');
       var children = self.$tree.tree('getTree').children;
 
-      for( var i = 0; i < folders.length; i++ )
-      {
-        for( var z = 0; z < children.length; z++ )
-        {
-          if( children[z].name == folders[i] ) {
-            if( children[z].folder == true && i != (folders.length - 1) ) {
+      for (var i = 0; i < folders.length; i++) {
+        for (var z = 0; z < children.length; z++) {
+          if (children[z].name == folders[i]) {
+            if (children[z].folder == true && i != (folders.length - 1)) {
               children = children[z].children;
               break;
-            }
-            else {
+            } else {
               return children[z];
             }
           }
@@ -524,7 +678,7 @@ define([
     },
     doAction: function(action, options) {
       var self = this;
-      if (!options){
+      if (!options) {
         options = {};
       }
       $.ajax({
@@ -538,22 +692,25 @@ define([
         failure: options.failure || function() {}
       });
     },
-    openEditor: function(path) {
+    openEditor: function(path, options) {
       var self = this;
 
-      if( path !== undefined ) {
-          self.updateTabs(path);
+      if (path !== undefined) {
+        self.updateTabs(path);
+      }
+      if (options === undefined) {
+        options = {};
       }
 
       // first we need to save the current editor content
-      if(self.currentPath) {
+      if (self.currentPath) {
         self.fileData[self.currentPath].contents = self.ace.editor.getValue();
         var lineNum = self.ace.editor.getFirstVisibleRow();
         self.fileData[self.currentPath].line = lineNum;
         self.fileData[self.currentPath].cursorPosition = self.ace.editor.getCursorPosition();
       }
       self.currentPath = path;
-      if (self.ace !== undefined){
+      if (self.ace !== undefined) {
         self.ace.editor.destroy();
         self.ace.editor.container.parentNode.replaceChild(
           self.ace.editor.container.cloneNode(true),
@@ -562,44 +719,45 @@ define([
       }
       self.ace = new TextEditor(self.$editor);
 
-      if( self.currentPath === undefined ) {
-          self.ace.setText();
-          self.ace.setSyntax('text');
-          self.ace.editor.clearSelection();
-          self.$tree.tree('selectNode', null);
-      }
-      else if( typeof self.fileData[path].info !== 'undefined' )
-      {
-          var preview = self.fileData[path].info;
-          if( self.ace.editor !== undefined ) {
-              self.ace.editor.off();
-          }
-          $('.ace_editor').empty().append(preview);
-      }
-      else
-      {
-          self.ace.setText(self.fileData[path].contents);
-          self.ace.setSyntax(path);
-          self.ace.editor.clearSelection();
+      if (self.currentPath === undefined) {
+        self.ace.setText('');
+        self.ace.setSyntax('text');
+        self.ace.editor.clearSelection();
+        self.$tree.tree('selectNode', null);
+      } else if (typeof self.fileData[path].info !== 'undefined') {
+        var preview = self.fileData[path].info;
+        if (self.ace.editor !== undefined) {
+          self.ace.editor.off();
+        }
+        $('.ace_editor').empty().append(preview);
+      } else {
+        self.ace.setText(self.fileData[path].contents);
+        self.ace.setSyntax(path);
+        self.ace.editor.clearSelection();
       }
 
       self.resizeEditor();
-      self.$el.trigger("fileChange");
+      if(options.goToLine != undefined){
+        self.ace.editor.gotoLine(options.goToLine, 0, true);
+      }
+
+      self.$el.trigger('fileChange');
       self.ace.editor.on('change', function() {
         if (self.ace.editor.curOp && self.ace.editor.curOp.command.name) {
-          $('[data-path="' + path + '"]').addClass("modified");
+          $('[data-path="' + path + '"]').addClass('modified');
         }
       });
       self.ace.editor.on('paste', function() {
-        $('[data-path="' + path + '"]').addClass("modified");
+        $('[data-path="' + path + '"]').addClass('modified');
       });
       self.ace.editor.commands.addCommand({
         name: 'saveFile',
         bindKey: {
-          win: 'Ctrl-S', mac: 'Command-S',
+          win: 'Ctrl-S',
+          mac: 'Command-S',
           sender: 'editor|cli'
         },
-        exec: function (env, args, request) {
+        exec: function(env, args, request) {
           self._save();
         }
       });
@@ -609,27 +767,27 @@ define([
     },
     getNodePath: function(node) {
       var self = this;
-      if(node === undefined){
+      if (node === undefined) {
         node = self.getSelectedNode();
       }
       var path = self.getFolderPath(node.parent);
-      if (path !== '/'){
+      if (path !== '/') {
         path += '/';
       }
 
       var name = (node.name !== undefined) ? node.name : '';
       return path + name;
     },
-    getFolderPath: function(node){
+    getFolderPath: function(node) {
       var self = this;
-      if(node === undefined){
+      if (node === undefined) {
         node = self.getSelectedNode();
       }
       var parts = [];
-      if (!node.folder && node.name){
+      if (!node.folder && node.name) {
         node = node.parent;
       }
-      while (node.name){
+      while (node.name) {
         parts.push(node.name);
         node = node.parent;
       }
@@ -639,40 +797,42 @@ define([
     getUpload: function() {
       var self = this;
 
-      return _.find(self.views, function(x) { return x.upload !== undefined });
+      return _.find(self.views, function(x) {
+        return x.upload !== undefined;
+      });
     },
     resizeEditor: function() {
-        var self = this;
-
-        self.$editor = $('.editor', self.$el);
-        var tab = self.$tabs.children()[0];
-        if( $(tab).outerHeight() < (self.$tabs.height() - 1) ) {
-            self.$tabs.addClass('smallTabs');
-            $(self.$tabs.children()).each(function() {
-                self.shrinkTab(this);
-            });
-        }
-        var tabBox = self.$tabs.parent();
-
-        //Contains both the tabs, and editor window
-        var container = tabBox.parent().parent();
-        var h = container.innerHeight();
-        h -= tabBox.outerHeight();
-
-        //+2 for the editor borders
-        h -= 2;
-        //accounts for the borders/margin
-        self.$editor.height(h);
-        var w = container.innerWidth();
-        w -= (container.outerWidth(true) - container.innerWidth());
-
-        self.$editor.width(w);
-        if (self.ace !== undefined){
-          //This forces ace to redraw if the container has changed size
-          self.ace.editor.resize();
-          self.ace.editor.$blockScrolling = Infinity;
-          self.ace.editor.focus();
-        }
+      var self = this;
+
+      self.$editor = $('.editor', self.$el);
+      var tab = self.$tabs.children()[0];
+      if ($(tab).outerHeight() < (self.$tabs.height() - 1)) {
+        self.$tabs.addClass('smallTabs');
+        $(self.$tabs.children()).each(function() {
+          self.shrinkTab(this);
+        });
+      }
+      var tabBox = self.$tabs.parent();
+
+      //Contains both the tabs, and editor window
+      var container = tabBox.parent().parent();
+      var h = container.innerHeight();
+      h -= tabBox.outerHeight();
+
+      //+2 for the editor borders
+      h -= 2;
+      //accounts for the borders/margin
+      self.$editor.height(h);
+      var w = container.innerWidth();
+      w -= (container.outerWidth(true) - container.innerWidth());
+
+      self.$editor.width(w);
+      if (self.ace !== undefined) {
+        //This forces ace to redraw if the container has changed size
+        self.ace.editor.resize();
+        self.ace.editor.$blockScrolling = Infinity;
+        self.ace.editor.focus();
+      }
     },
     selectItem: function(path) {
       var self = this;
@@ -682,18 +842,18 @@ define([
     setUploadUrl: function(path) {
       var self = this;
 
-      if( path === undefined ) {
-        path = "";
+      if (path === undefined) {
+        path = '';
       }
 
       self.uploadFolder = path;
       var view = self.getUpload();
-      if( view !== undefined ) {
+      if (view !== undefined) {
         var url = self.options.uploadUrl +
-                  path +
-                  "/themeFileUpload" +
-                  "?_authenticator=" +
-                  utils.getAuthenticator();
+          path +
+          '/themeFileUpload' +
+          '?_authenticator=' +
+          utils.getAuthenticator();
 
         view.upload.dropzone.options.url = url;
       }
@@ -701,7 +861,7 @@ define([
     refreshFile: function(path) {
       var self = this;
 
-      if( path === undefined ) {
+      if (path === undefined) {
         path = self.getSelectedNode().path;
       }
       self.closeTab(path);
diff --git a/mockup/patterns/filemanager/templates/app.xml b/mockup/patterns/filemanager/templates/app.xml
index 11d594ff..519d6dad 100644
--- a/mockup/patterns/filemanager/templates/app.xml
+++ b/mockup/patterns/filemanager/templates/app.xml
@@ -1,5 +1,7 @@
 <div id="toolbar">
 </div>
+<div id="toolbar-action">
+</div>
 <div class="container">
     <div class="tree">
     </div>
@@ -14,4 +16,11 @@
                 </div>
             </div>
         </nav>
-</div>
\ No newline at end of file
+</div>
+<ul id="contextual-menu" class="dropdown-menu">
+    <li data-item="newfile"><a>New File</a></li>
+    <li data-item="newfolder"><a>New Folder</a></li>
+    <li data-item="rename"><a>Rename</a></li>
+    <li data-item="delete"><a>Delete</a></li>
+    <li data-item="upload"><a>Upload Here</a></li>
+</ul>
diff --git a/mockup/patterns/filemanager/templates/popover.xml b/mockup/patterns/filemanager/templates/popover.xml
new file mode 100644
index 00000000..a276f070
--- /dev/null
+++ b/mockup/patterns/filemanager/templates/popover.xml
@@ -0,0 +1,12 @@
+<div class="arrow"></div>
+<div class="popover-label">
+<div style="position: relative;" class="popover-title">
+</div>
+<a style="position: absolute; top: 5px; right: 3px; font-size: 16px; color: #999;"
+   href="#" class="popover-close">
+  <span class="glyphicon glyphicon-remove"></span>
+</a>
+</div>
+<div class="items popover-content">
+</div>
+


Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-08-22T13:35:37-05:00
Author: Oshane Bailey (b4oshany) <b4.oshany@gmail.com>
Commit: https://github.com/plone/mockup/commit/02924941435721202e09f54ab489dd89969d3080

Pull in more changes from 5.1 branch.

Files changed:
M mockup/patterns/filemanager/pattern.filemanager.less
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/thememapper/pattern.js
M mockup/patterns/thememapper/pattern.thememapper.less

diff --git a/mockup/patterns/filemanager/pattern.filemanager.less b/mockup/patterns/filemanager/pattern.filemanager.less
index d93221d1..27ed619c 100644
--- a/mockup/patterns/filemanager/pattern.filemanager.less
+++ b/mockup/patterns/filemanager/pattern.filemanager.less
@@ -169,6 +169,11 @@
     .nav-and-editor {
         float: left;
         width: 75%;
+
+        .navbar .navbar-collapse.collapse {
+            // force editor tabs to be displayed
+            height: 37px !important;
+        }
     }
     .navbar-nav > li {
         padding-left: 15px;
@@ -194,7 +199,7 @@
             }
         }
         > a {
-            float: left;
+            display: inline-block;
             padding: 8px 0px;
             text-decoration: none;
             color: @gray-dark;
diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index ec60e5c3..13e29d61 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -113,17 +113,14 @@ define([
           var themeTypes = ['css', 'html', 'htm', 'txt', 'xml', 'js', 'cfg', 'less'];
 
           $('span', li).addClass('glyphicon');
-          if( node.folder ) {
-            $('span', li).addClass('glyphicon-folder-close')
-          }
-          else if( $.inArray(node.fileType, imageTypes) >= 0) {
+          if (node.folder) {
+            $('span', li).addClass('glyphicon-folder-close').addClass("droptarget");
+          } else if ($.inArray(node.fileType, imageTypes) >= 0) {
             $('span', li).addClass('glyphicon-picture');
-          }
-          else if( $.inArray(node.fileType, themeTypes) >= 0) {
+          } else if ($.inArray(node.fileType, themeTypes) >= 0) {
             $('span', li).addClass('glyphicon-file');
-          }
-          else {
-            $('span', li).addClass('glyphicon-cog')
+          } else {
+            $('span', li).addClass('glyphicon-cog');
           }
         }
       });
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 59e6ada6..5111e2a3 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -40,8 +40,12 @@ define([
   'mockup-patterns-thememapper-url/js/cacheview',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup',
+  'mockup-ui-url/views/anchor',
+  'mockup-ui-url/views/dropdown',
   'mockup-utils'
-], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, LessBuilderView, CacheView, ButtonView, ButtonGroup, utils) {
+], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView,
+            LessBuilderView, CacheView, ButtonView, ButtonGroup,
+            AnchorView, DropdownView, utils) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);
@@ -245,7 +249,7 @@ define([
       }
 
       self.animateSelector(self.$el.find('.frame-info'));
-      self.$el.find('.selector-info').text(node == null? "" : self.ruleBuilder.bestSelector(node));
+      self.$el.find('.selector-info').text(node == null? '': self.ruleBuilder.bestSelector(node));
 
       if(self.ruleBuilder.active) {
         self.ruleBuilder.select(node);
@@ -255,7 +259,7 @@ define([
     },
     onselect: function(highlighter, node) {
       var self = this;
-      self.$currentSelector.text(node == null? "" : self.ruleBuilder.bestSelector(node));
+      self.$currentSelector.text(node == null? '': self.ruleBuilder.bestSelector(node));
     }
   });
 
@@ -319,11 +323,13 @@ define([
       self.fileManager = new FileManager(self.$fileManager, self.options.filemanagerConfig);
       self.fileManager.setUploadUrl();
 
+      self.btns = {};
+      self.menus = {};
       self.setupButtons();
 
       self.ruleBuilder = new RuleBuilder(self, self.ruleBuilderCallback);
 
-      self.fileManager.on("fileChange", function() {
+      self.fileManager.on('fileChange', function() {
         var node = self.fileManager.getSelectedNode();
         self.setLessPaths(node);
       });
@@ -339,9 +345,7 @@ define([
         ruleBuilder: self.ruleBuilder,
         url: self.options.unthemedUrl,
       });
-      self.fileManager.$tree.bind('tree.click', function(e){
-      });
-      self.buildLessButton.disable();
+      self.btns.buildLessButton.disable();
 
       if( !self.editable ) {
         if( self.fileManager.toolbar ) {
@@ -369,39 +373,39 @@ define([
       })
     },
     setSavePath: function() {
-        var self = this;
-        var filename = self.lessbuilderView.$filename.val()
+      var self = this;
+      var filename = self.lessbuilderView.$filename.val();
 
-        if( filename == "" ) {
-            filename = self.lessbuilderView.$filename.attr('placeholder');
-        }
+      if(filename === '') {
+        filename = self.lessbuilderView.$filename.attr('placeholder');
+      }
 
-        var s = self.lessPaths['save'];
-        var folder = s.substr(0, s.lastIndexOf('/'));
+      var s = self.lessPaths['save'];
+      var folder = s.substr(0, s.lastIndexOf('/'));
 
-        var savePath = folder + '/' + filename;
-        self.lessPaths['save'] = savePath;
+      var savePath = folder + '/' + filename;
+      self.lessPaths['save'] = savePath;
     },
     setLessPaths: function(node) {
       var self = this;
 
-      if( node.fileType == "less" ){
-        self.buildLessButton.enable();
+      if(node.fileType === 'less'){
+        self.btns.buildLessButton.enable();
       }
-      else{
-        self.buildLessButton.disable();
+      else {
+        self.btns.buildLessButton.disable();
       }
 
-      if( node.path != "" ) {
-        var reg = new RegExp("/(.*\\.)less$", "m");
+      if (node.path !== '') {
+        var reg = new RegExp('/(.*\\.)less$', 'm');
         var path = reg.exec(node.path);
 
         if( path === null ) {
           self.lessPaths = {};
           return false;
         }
-        var lessPath = path[1] + "less";
-        var cssPath = path[1] + "css";
+        var lessPath = path[1] + 'less';
+        var cssPath = path[1] + 'css';
 
         //file paths should be in the form of:
         // "[directory/]filename.less"
@@ -419,8 +423,8 @@ define([
     },
     setDefaultPaths: function(manifest) {
       var self = this;
-      var dev = new RegExp("development-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)");
-      var prod = new RegExp("production-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)");
+      var dev = new RegExp('development-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)');
+      var prod = new RegExp('production-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)');
 
       var devUrl = dev.exec(manifest.contents)[1];
       var prodUrl = prod.exec(manifest.contents)[1];
@@ -432,7 +436,7 @@ define([
     saveThemeCSS: function(styles) {
       var self = this.env;
 
-      if( styles === "" || styles === undefined ) {
+      if(styles === '' || styles === undefined) {
         //There was probably a problem during compilation
         return false;
       }
@@ -465,8 +469,8 @@ define([
       var $parent = self.$mockupInspector.parent();
       $parent.slideDown();
       self.hidden = false;
-      self.showInspectorsButton.options.title = 'Hide inspectors';
-      self.showInspectorsButton.applyTemplate();
+      self.btns.showInspectorsButton.options.title = 'Hide inspectors';
+      self.btns.showInspectorsButton.applyTemplate();
       $('html, body').animate({
         scrollTop: $parent.offset().top - 50
       }, 500);
@@ -476,43 +480,43 @@ define([
       var $parent = self.$mockupInspector.parent();
       $parent.slideUp();
       self.hidden = true;
-      self.showInspectorsButton.options.title = 'Show inspectors';
-      self.showInspectorsButton.applyTemplate();
+      self.btns.showInspectorsButton.options.title = 'Show inspectors';
+      self.btns.showInspectorsButton.applyTemplate();
     },
     setupButtons: function(){
       var self = this;
-      self.showInspectorsButton = new ButtonView({
+      self.btns.showInspectorsButton = new ButtonView({
         id: 'showinspectors',
         title: _t('Show inspectors'),
         icon: 'search',
         tooltip: _t('Show inspector panels'),
         context: 'default'
       });
-      self.showInspectorsButton.on('button:click', function(){
+      self.btns.showInspectorsButton.on('button:click', function(){
         if (self.hidden) {
           self.showInspectors();
         } else {
           self.hideInspectors();
         }
       });
-
-      self.buildRuleButton = new ButtonView({
+      
+      self.btns.buildRuleButton = new AnchorView({
         id: 'buildrule',
         title: _t('Build rule'),
         icon: 'wrench',
         tooltip: _t('rule building wizard'),
         context: 'default'
       });
-      self.fullscreenButton = new ButtonView({
+      self.btns.fullscreenButton = new ButtonView({
         id: 'fullscreenEditor',
         title: _t('Fullscreen'),
         icon: 'fullscreen',
         tooltip: _t('view the editor in fullscreen'),
         context: 'default'
       });
-      self.fullscreenButton.on('button:click', function() {
+      self.btns.fullscreenButton.on('button:click', function() {
         var btn = $('<a href="#">'+
-            '<span class="btn btn-danger closeeditor">' + _t("Close Fullscreen") + '</span>'+
+            '<span class="btn btn-danger closeeditor">' + _t('Close Fullscreen') + '</span>'+
             '</a>').prependTo($('.tree'));
 
         $(btn).click(function() {
@@ -532,62 +536,75 @@ define([
       self.previewThemeButton.on('button:click', function(){
         window.open(self.options.previewUrl);
       });
-      self.buildLessButton = new ButtonView({
+      self.btns.buildLessButton = new AnchorView({
         id: 'buildless',
         title: _t('Build CSS'),
         icon: 'cog',
         tooltip: _t('Compile LESS file'),
         context: 'default'
       });
-      self.refreshButton = new ButtonView({
+      self.btns.refreshButton = new ButtonView({
         id: 'refreshButton ',
         title: _t('Refresh'),
         icon: 'refresh',
         tooltip: _t('Reload the current file'),
         context: 'default'
       });
-      self.refreshButton.on("button:click", function() {
+      self.btns.refreshButton.on('button:click', function() {
         self.fileManager.refreshFile();
       });
-      self.cacheButton = new ButtonView({
+      self.btns.cacheButton = new ButtonView({
         id: 'cachebutton',
         title: _t('Clear cache'),
         icon: 'floppy-remove',
         tooltip: _t('Clear site\'s theme cache'),
         context: 'default'
       });
-      self.helpButton = new ButtonView({
+      self.btns.helpButton = new ButtonView({
         id: 'helpbutton',
         title: _t('Help'),
         icon: 'question-sign',
         tooltip: _t('Show help'),
         context: 'default'
       });
-      self.helpButton.on('button:click', function(){
+      self.btns.helpButton.on('button:click', function(){
         window.open(self.options.helpUrl);
       });
       self.rulebuilderView = new RuleBuilderView({
-        triggerView: self.buildRuleButton,
+        triggerView: self.btns.buildRuleButton,
         app: self
       });
       self.cacheView = new CacheView({
-        triggerView: self.cacheButton,
+        triggerView: self.btns.cacheButton,
         app: self
-      })
+      });
       self.lessbuilderView = new LessBuilderView({
-        triggerView: self.buildLessButton,
+        triggerView: self.btns.buildLessButton,
         app: self
       });
+      
+
+      self.menus.tools = new DropdownView({
+        title: _t('Tools'),
+        items: [
+          self.btns.buildRuleButton,
+          self.btns.buildLessButton,
+        ],
+        id: 'file_menu',
+        app: self,
+        icon: 'file',
+        disable: function() {}
+      });
+      
       self.buttonGroup = new ButtonGroup({
         items: [
-          self.showInspectorsButton,
-          self.buildRuleButton,
+          self.menus.tools,
+          self.btns.showInspectorsButton,
           self.previewThemeButton,
-          self.fullscreenButton,
-          self.buildLessButton,
-          self.refreshButton,
-          self.cacheButton,
-          self.helpButton
+          self.btns.fullscreenButton,
+          self.btns.refreshButton,
+          self.btns.cacheButton,
+          self.btns.helpButton
         ],
         id: 'mapper'
       });
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index b5ae8500..7666065a 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -326,11 +326,13 @@ body.plone-toolbar-left-default {
     }
 
     .pat-filemanager .navbar .btn-group > a.btn {
+        float: none;
+        display: inline-block;
         line-height: 10px;
         padding: 5px;
         font-size: small;
         padding-bottom: 8px;
-        margin-bottom: -15px;
+        margin-bottom: 0.5em;
     }
 
     .btn-group {


Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-08-22T15:09:42-05:00
Author: Oshane Bailey (b4oshany) <b4.oshany@gmail.com>
Commit: https://github.com/plone/mockup/commit/c5e3a01933a77d52339546637bce52b4232bff15

Ported the tests from 5.1 to 5.0

Files changed:
M mockup/tests/pattern-filemanager-test.js
M mockup/tests/pattern-thememapper-test.js

diff --git a/mockup/tests/pattern-filemanager-test.js b/mockup/tests/pattern-filemanager-test.js
index 1789b425..9b230d39 100644
--- a/mockup/tests/pattern-filemanager-test.js
+++ b/mockup/tests/pattern-filemanager-test.js
@@ -40,6 +40,8 @@ define([
       registry.scan(this.$el);
       this.clock.tick(1000);
       expect(this.$el.find('.tree ul').length).to.be.equal(2);
+      // New File, New Folder, Rename, Delete, Upload Here
+      expect($('#contextual-menu li').length).to.be.equal(5);
     });
   });
 
diff --git a/mockup/tests/pattern-thememapper-test.js b/mockup/tests/pattern-thememapper-test.js
index 78576912..f7362f7c 100644
--- a/mockup/tests/pattern-thememapper-test.js
+++ b/mockup/tests/pattern-thememapper-test.js
@@ -39,7 +39,9 @@ define([
       expect($('.pat-filemanager', this.$el).length > 0).to.be.equal(true);
       expect($('#btngroup-mapper', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-showinspectors', this.$el).length > 0).to.be.equal(true);
-      expect($('#btn-buildrule', this.$el).length > 0).to.be.equal(true);
+      expect($('#dropdown-menu-', this.$el).length > 0).to.be.equal(true);
+      expect($('.btn-group-dropdown #alink-buildrule', this.$el).length > 0).to.be.equal(true);
+      expect($('.btn-group-dropdown #alink-buildless', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-previewtheme', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-fullscreenEditor', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-helpbutton', this.$el).length > 0).to.be.equal(true);


Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-08-27T23:20:54+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/mockup/commit/88b98174811fa1e1652565600277b3cff4e2500f

Remove forgotten console.log

Files changed:
M mockup/patterns/filemanager/pattern.js

diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index 13e29d61..a8af14e6 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -450,7 +450,6 @@ define([
           },
           dataType: 'json',
           success: function(data) {
-            console.log(data);
             self.$tree.tree('reload', function() {
               self.$tree.tree('selectNode', target_node);
             });


Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-08-28T00:30:43+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/mockup/commit/5526a21ca3d80fb9f0868c45af04195562252307

Merge pull request #801 from plone/contextual-menu-to-2.1.x

Contextual menu for 2.1.x

Files changed:
A mockup/js/ui/templates/dropdown.xml
A mockup/js/ui/views/anchor.js
A mockup/js/ui/views/dropdown.js
A mockup/patterns/filemanager/js/findfile.js
A mockup/patterns/filemanager/js/findinfiles.js
A mockup/patterns/filemanager/js/popover.xml
A mockup/patterns/filemanager/templates/popover.xml
M .gitignore
M CHANGES.rst
M bower.json
M mockup/js/config.js
M mockup/js/ui/views/button.js
M mockup/patterns/filemanager/js/basepopover.js
M mockup/patterns/filemanager/js/customize.js
M mockup/patterns/filemanager/js/delete.js
M mockup/patterns/filemanager/pattern.filemanager.less
M mockup/patterns/filemanager/pattern.js
M mockup/patterns/filemanager/templates/app.xml
M mockup/patterns/thememapper/pattern.js
M mockup/patterns/thememapper/pattern.thememapper.less
M mockup/tests/pattern-filemanager-test.js
M mockup/tests/pattern-thememapper-test.js

diff --git a/.gitignore b/.gitignore
index 687ae184..69d17555 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+*.orig
 *.egg-info
 *.py?
 .idea
diff --git a/CHANGES.rst b/CHANGES.rst
index bd8285e7..d0f9ca5b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,17 @@ Changelog
 
 New features:
 
-- * Add item here *
+ - Improve the user experience for the theme editor
+  - Search for files and text within files and opening the file upon click.
+  - Add Bootstrap Dropdown menu to the UI views.
+  - Enable Drag and Drop inside of the theme editor file tree.
+  - Fixed the Drag and Drop files to root of the file tree.
+  - Fixed the autoscrolling issue when dragging a file in the file tree.
+  - Add Anchor (a) tag to the UI views.
+  - Upgrade JQTree to 1.4.1
+  - Enable Drag and Drop inside of the theme editor file tree.
+  - Add contextual menu to theme files in the file tree.
+  [b4oshany]
 
 Bug fixes:
 
diff --git a/bower.json b/bower.json
index 070f7c85..0e398285 100644
--- a/bower.json
+++ b/bower.json
@@ -26,7 +26,9 @@
     "tinymce-builded": "4.3.12",
     "requirejs": "",
     "less": "2.1.2",
-    "r.js": "2.1.15"
+    "r.js": "2.1.15",
+    "js-shortcuts": "^1.0.1",
+    "cs-jqtree-contextmenu": "^0.1.0"
   },
   "resolutions": {
     "jquery": "1.11.3",
diff --git a/mockup/js/config.js b/mockup/js/config.js
index e1f1c38a..61375283 100644
--- a/mockup/js/config.js
+++ b/mockup/js/config.js
@@ -35,6 +35,7 @@
       'dropzone': 'bower_components/dropzone/dist/dropzone-amd-module',
       'expect': 'bower_components/expect/index',
       'jqtree': 'bower_components/jqtree/tree.jquery',
+      'jqtree-contextmenu': 'bower_components/cs-jqtree-contextmenu/src/jqTreeContextMenu',
       'jquery': 'bower_components/jquery/dist/jquery',
       'jquery.cookie': 'bower_components/jquery.cookie/jquery.cookie',
       'jquery.event.drag': 'lib/jquery.event.drag',
@@ -44,6 +45,7 @@
       'jquery.tools.dateinput': 'bower_components/jquery.recurrenceinput.js/lib/jquery.tools.dateinput',
       'jquery.tools.overlay': 'bower_components/jquery.recurrenceinput.js/lib/jquery.tools.overlay',
       'jquery.tmpl': 'bower_components/jquery.recurrenceinput.js/lib/jquery.tmpl',
+      'js-shortcuts': 'bower_components/js-shortcuts/js-shortcuts',
       'translate': 'js/i18n-wrapper',
       'marked': 'bower_components/marked/lib/marked',
       'mockup-bundles-docs': 'js/bundles/docs',
@@ -134,6 +136,8 @@
       'bootstrap-transition': { exports: 'window.jQuery.support.transition', deps: ['jquery'] },
       'expect': { exports: 'window.expect' },
       'jqtree': { deps: ['jquery'] },
+      'jqtree-contextmenu': { deps: ['jqtree'] },
+      'js-shortcuts': { deps: ['jquery'] },
       'select2': { deps: ["jquery"] },
       'jquery.cookie': { deps: ['jquery'] },
       'jquery.event.drag': { deps: ['jquery'] },
diff --git a/mockup/js/ui/templates/dropdown.xml b/mockup/js/ui/templates/dropdown.xml
new file mode 100644
index 00000000..82c130e7
--- /dev/null
+++ b/mockup/js/ui/templates/dropdown.xml
@@ -0,0 +1,10 @@
+
+<a href="#" class="btn btn-default dropdown-toggle" type="button" id="dropdown-menu-" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
+  <span class="glyphicon glyphicon-<%= icon %>"></span>
+  <span class="dropdown-title">
+
+  </span>
+  <span class="caret"></span>
+</a>
+<ul class="dropdown-menu items dropdown-content" aria-labelledby="dropdown-menu-">
+</ul>
diff --git a/mockup/js/ui/views/anchor.js b/mockup/js/ui/views/anchor.js
new file mode 100644
index 00000000..3d373ee2
--- /dev/null
+++ b/mockup/js/ui/views/anchor.js
@@ -0,0 +1,57 @@
+define([
+  'underscore',
+  'mockup-ui-url/views/base',
+  'mockup-patterns-tooltip'
+], function(_, BaseView, Tooltip) {
+  'use strict';
+
+  var AnchorView = BaseView.extend({
+    tagName: 'a',
+    className: 'alink',
+    eventPrefix: 'button',
+    context: 'default',
+    idPrefix: 'alink-',
+    shortcut: '',
+    attributes: {
+      'href': '#'
+    },
+    extraClasses: [],
+    tooltip: null,
+    template: '<% if (icon) { %><span class="glyphicon glyphicon-<%= icon %>"></span><% } %> <%= title %> <span class="shortcut"><%= shortcut %></span>',
+    events: {
+      'click': 'handleClick'
+    },
+    initialize: function(options) {
+      if (!options.id) {
+        var title = options.title || '';
+        options.id = title !== '' ? title.toLowerCase().replace(' ', '-') : this.cid;
+      }
+      BaseView.prototype.initialize.apply(this, [options]);
+
+      this.on('render', function() {
+        this.$el.attr('title', this.options.tooltip || this.options.title || '');
+        this.$el.attr('aria-label', this.options.title || this.options.tooltip || '');
+        _.each(this.extraClasses, function(klass) {
+          this.$el.addClass(klass);
+        });
+      }, this);
+    },
+    handleClick: function(e) {
+      e.preventDefault();
+      if (!this.$el.prop('disabled')) {
+        this.uiEventTrigger('click', this, e);
+      }
+    },
+    serializedModel: function() {
+      return _.extend({'icon': '', 'title': '', 'shortcut': ''}, this.options);
+    },
+    disable: function() {
+      this.$el.prop('disabled', true);
+    },
+    enable: function() {
+      this.$el.prop('disabled', false);
+    }
+  });
+
+  return AnchorView;
+});
diff --git a/mockup/js/ui/views/button.js b/mockup/js/ui/views/button.js
index 83b3fa94..e9fd1ece 100644
--- a/mockup/js/ui/views/button.js
+++ b/mockup/js/ui/views/button.js
@@ -63,7 +63,7 @@ define([
     },
     handleClick: function(e) {
       e.preventDefault();
-      if (!this.$el.is('.disabled')) {
+      if (!this.$el.prop('disabled')) {
         this.uiEventTrigger('click', this, e);
       }
     },
@@ -71,12 +71,10 @@ define([
       return _.extend({'icon': '', 'title': ''}, this.options);
     },
     disable: function() {
-      this.options.disabled = true;
-      this.$el.addClass('disabled');
+      this.$el.prop('disabled', true);
     },
     enable: function() {
-      this.options.disabled = false;
-      this.$el.removeClass('disabled');
+      this.$el.prop('disabled', false);
     }
   });
 
diff --git a/mockup/js/ui/views/dropdown.js b/mockup/js/ui/views/dropdown.js
new file mode 100644
index 00000000..90eb79f9
--- /dev/null
+++ b/mockup/js/ui/views/dropdown.js
@@ -0,0 +1,59 @@
+define([
+  'jquery',
+  'underscore',
+  'mockup-ui-url/views/buttongroup',
+  'text!mockup-ui-url/templates/dropdown.xml',
+], function($, _, ButtonGroup, DropdownTemplate) {
+  'use strict';
+
+  var DropdownView = ButtonGroup.extend({
+    idPrefix: 'btngroup-dropdown-',
+    template: DropdownTemplate,
+    className: 'btn-group-dropdown',
+    itemContainer: "ul.dropdown-content",
+    title: null,
+
+    initialize: function(options) {
+      ButtonGroup.prototype.initialize.apply(this, [options]);
+
+      this.on('render', function() {
+        this.renderTitle();
+      }, this);
+    },
+
+    renderTitle: function() {
+      var title = this.options.title;
+      if(this.options.title === undefined) {
+        title = this.title;
+        if(this.title === null) {
+          title = "Menu Option";
+        }
+      }
+      this.$('.dropdown-title').empty().append(title);
+    },
+
+    renderItems: function() {
+      var self = this;
+      var $container;
+
+      if (this.itemContainer !== null) {
+        $container = $(this.itemContainer, this.$el);
+        if ($container.length === 0) {
+          throw 'Item Container element not found.';
+        }
+      } else {
+        $container = this.$el;
+      }
+
+      var $item = null;
+      _.each(this.items, function(view) {
+        $item = $("<li></li>");
+        $item.append(view.render().$el.removeClass("btn"));
+        $container.append($item);
+      }, this);
+    },
+
+  });
+
+  return DropdownView;
+});
diff --git a/mockup/patterns/filemanager/js/basepopover.js b/mockup/patterns/filemanager/js/basepopover.js
index 1559f724..301002b3 100644
--- a/mockup/patterns/filemanager/js/basepopover.js
+++ b/mockup/patterns/filemanager/js/basepopover.js
@@ -1,24 +1,53 @@
 define([
   'jquery',
   'underscore',
-  'backbone',
-  'mockup-ui-url/views/popover'
-], function($, _, Backbone, PopoverView) {
+  'mockup-ui-url/views/popover',
+  'text!mockup-patterns-filemanager-url/templates/popover.xml',
+], function($, _, PopoverView, PopoverTemplate) {
   'use strict';
 
   var FileManagerPopover = PopoverView.extend({
     className: 'popover',
     title: _.template('nothing'),
     content: _.template('<div/>'),
+    template: PopoverTemplate,
     initialize: function(options) {
       this.app = options.app;
       PopoverView.prototype.initialize.apply(this, [options]);
     },
+    afterRender: function () {
+      var self = this;
+      self.$el.find(".popover-close").click(function(e){
+        self.hide(true);
+      });
+      return self;
+    },
+    getBodyClassName: function(){
+      var name = 'popover-';
+      if(this.options.id){
+        name += this.options.id + '-';
+      }
+      name += 'active';
+      return name;
+    },
     render: function() {
       var self = this;
       PopoverView.prototype.render.call(this);
       return self;
     },
+    hide: function(closePopover) {
+      if(this.closeOnOutClick || closePopover == true){
+        this.opened = false;
+        this.$el.removeClass('active');
+        if (this.triggerView) {
+          this.triggerView.$el.removeClass('active');
+          this.triggerView.$el.attr('aria-hidden', 'true');
+        }
+        this.uiEventTrigger('hide', this);
+        this.$el.attr('aria-hidden', 'true');
+        $('body').removeClass(this.getBodyClassName());
+      }
+    },
     toggle: function(button, e) {
       PopoverView.prototype.toggle.apply(this, [button, e]);
       var self = this;
@@ -26,7 +55,7 @@ define([
         return;
       }
       var $path = self.$('.current-path');
-      if ($path.length !== 0){
+      if ($path.length !== 0) {
         $path.html(self.getPath());
       }
     },
diff --git a/mockup/patterns/filemanager/js/customize.js b/mockup/patterns/filemanager/js/customize.js
index 985108f2..18834eae 100644
--- a/mockup/patterns/filemanager/js/customize.js
+++ b/mockup/patterns/filemanager/js/customize.js
@@ -28,20 +28,20 @@ define([
       PopoverView.prototype.render.call(this);
       self.$form = self.$('form');
       self.$results = self.$('.results');
-      self.$form.submit(function(e){
+      self.$form.submit(function(e) {
         e.preventDefault();
         $.ajax({
           url: self.app.options.resourceSearchUrl,
           dataType: 'json',
-          success: function(data){
+          success: function(data) {
             self.$results.empty();
-            _.each(data, function(item){
+            _.each(data, function(item) {
               var $item = $(
                 '<li class="list-group-item" data-id="' + item.id + '">' +
                   '<span class="badge"><a href=#">' + _t('Customize') + '</a></span>' +
                   item.id +
                 '</li>');
-              $('a', $item).click(function(e){
+              $('a', $item).click(function(e) {
                 e.preventDefault();
                 self.customize($(this).parents('li').eq(0).attr('data-id'));
               });
diff --git a/mockup/patterns/filemanager/js/delete.js b/mockup/patterns/filemanager/js/delete.js
index ef60adcb..18bb097f 100644
--- a/mockup/patterns/filemanager/js/delete.js
+++ b/mockup/patterns/filemanager/js/delete.js
@@ -23,8 +23,8 @@ define([
     deleteButtonClicked: function(e) {
       var self = this;
       var path = self.app.getNodePath();
-      if( path === undefined ) {
-        alert("No file selected.");
+      if (path === undefined) {
+        alert('No file selected.');
         return;
       }
       self.app.doAction('delete', {
@@ -41,8 +41,8 @@ define([
             parent = parent.substr(0, parent.lastIndexOf('/'));
 
             var node = self.app.getNodeByPath(parent);
-            if( node !== null ) {
-                self.app.$tree.tree('openNode', node);
+            if (node !== null) {
+              self.app.$tree.tree('openNode', node);
             }
 
             self.app.closeActiveTab();
diff --git a/mockup/patterns/filemanager/js/findfile.js b/mockup/patterns/filemanager/js/findfile.js
new file mode 100644
index 00000000..d4c0c3dd
--- /dev/null
+++ b/mockup/patterns/filemanager/js/findfile.js
@@ -0,0 +1,101 @@
+define([
+  'jquery',
+  'underscore',
+  'mockup-patterns-filemanager-url/js/basepopover',
+  'translate'
+], function($, _, PopoverView, _t) {
+  'use strict';
+
+  var FindFile = PopoverView.extend({
+    className: 'popover filesearch',
+    closeOnOutClick: false,
+    backdropOptions: {
+      zIndex: '1009',
+      opacity: '0.4',
+      className: 'backdrop backdrop-popover',
+      classActiveName: 'backdrop-active',
+      closeOnEsc: false,
+      closeOnClick: false
+    },
+    title: _.template('<%= _t("Find File") %>'),
+    content: _.template(
+      '<form>' +
+        '<div class="input-group">' +
+          '<input type="text" class="search form-control" ' +
+                  'id="file-search-field" placeholder="<%= _t("Find theme resource in plone") %>">' +
+        '</div>' +
+        '<div class="input-group">' +
+          '<input type="submit" class="btn btn-primary" value="<%= _t("Search") %>"/>' +
+        '</div>' +
+      '</form><br/>' +
+      '<ul class="results list-group">' +
+      '</ul>'
+    ),
+    appendToResults: function(item){
+      var self = this;
+      var $item = $(
+        '<li class="list-group-item">' +
+          '<span class="badge"><a data-target="' + item.path + '" href=#">' +
+          _t(item.filename) + '</a></span>' +
+        '</li>');
+      $('a', $item).click(function(e) {
+        e.preventDefault();
+        self.findfile($(this).attr('data-target'));
+      });
+      self.$results.append($item);
+    },
+    filterFiles: function(patt, data){
+      var self = this;
+      _.each(data, function(item) {
+        if(item.folder){
+          self.filterFiles(patt, item.children);
+        }else{
+          if(patt.test(item.filename)){
+            self.appendToResults(item);
+            self.noMatches++;
+          }
+        }
+      });
+    },
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      self.$form = self.$('form');
+      self.$searchFor = self.$("input");
+      self.$results = self.$('.results');
+      self.$form.submit(function(e) {
+        e.preventDefault();
+        $.ajax({
+          url: self.app.options.actionUrl + '?action=dataTree',
+          dataType: 'json',
+          success: function(data) {
+            self.$results.empty();
+            self.noMatches = 0;
+            var searchFor = self.$searchFor.val();
+            var patt = new RegExp(searchFor, "g");
+            self.filterFiles(patt, data);
+            if(self.noMatches == 0){
+              self.$results.append("<span>No results found for " + searchFor + "</span>");
+            }
+          }
+        });
+      });
+      return self;
+    },
+    findfile: function(resource) {
+      var self = this;
+      self.app.doAction('getFile', {
+        data: {
+          path: resource
+        },
+        dataType: 'json',
+        success: function(data) {
+          self.app.fileData[resource] = data;
+          self.app.openEditor(resource);
+        }
+      });
+    }
+  });
+
+  return FindFile;
+});
diff --git a/mockup/patterns/filemanager/js/findinfiles.js b/mockup/patterns/filemanager/js/findinfiles.js
new file mode 100644
index 00000000..51ea104e
--- /dev/null
+++ b/mockup/patterns/filemanager/js/findinfiles.js
@@ -0,0 +1,137 @@
+define([
+  'jquery',
+  'underscore',
+  'mockup-patterns-filemanager-url/js/basepopover',
+  'translate'
+], function($, _, PopoverView, _t) {
+  'use strict';
+
+  var FindInFiles = PopoverView.extend({
+    className: 'popover filesearch',
+    closeOnOutClick: false,
+    backdropOptions: {
+      zIndex: '1009',
+      opacity: '0.4',
+      className: 'backdrop backdrop-popover',
+      classActiveName: 'backdrop-active',
+      closeOnEsc: false,
+      closeOnClick: false
+    },
+    title: _.template('<%= _t("Find in File") %>'),
+    content: _.template(
+      '<form>' +
+        '<div class="input-group">' +
+          '<input type="text" class="search form-control" ' +
+                  'id="file-search-field" placeholder="<%= _t("Find text witin theme resource in plone") %>">' +
+        '</div>' +
+        '<div class="input-group">' +
+          '<input type="submit" class="btn btn-primary" value="<%= _t("Search") %>"/>' +
+        '</div>' +
+      '</form><br/>' +
+      '<ul style="max-height: 400px; overflow: auto;" class="results list-group">' +
+      '</ul>'
+    ),
+    appendToResults: function(item){
+      var self = this, seen = null;
+      var file_item =
+        '<li class="list-group-item" data-id="' + item.file.label + '">' +
+          '<span class="badge">' + _t(item.file.filename) + '</span><ul>';
+      for(var x in item.lines){
+        seen = item.lines[x];
+        file_item += '<li class="list-group-item" data-id="' + item.file.label + '">' +
+          '<span class="badge"><a class="ff-open-file" data-target="'+item.file.path+'" ' +
+          'target-line="'+seen.line+'" href="#">Line ' +
+          '<span style="display: inline-block; width: 100px;">' + seen.line +
+          '</span><span>'+seen.text+'</span><a></span></li>';
+      }
+      file_item += '</ul></li>';
+      var $item = $(file_item);
+      $('a', $item).click(function(e) {
+        e.preventDefault();
+        self.findinfiles(
+          $(this).attr("data-target"),
+          parseInt($(this).attr("target-line"))
+        );
+      });
+      self.$results.append($item);
+    },
+
+    filterFile: function(patt, item){
+      var self = this;
+      $.ajax({
+        url: self.app.options.actionUrl + '?action=getFile&path='+item.path.replace("/", "%2F"),
+        dataType: 'json',
+        success: function(data) {
+          var contents = data["contents"];
+          if(contents == undefined){
+            return;
+          }
+          var lines = contents.split("\n");
+          var seen = [], line = '';
+          var result = null;
+          for(var x in lines){
+            line = lines[x];
+            result = patt.exec(line);
+            if(result != null){
+              seen.push({
+                "line": parseInt(x) + 1,
+                "text": '<b>'+result[0]+'</b>'+line.substr(result["index"] + result[0].length, 20)
+              });
+            }
+          }
+          if(seen.length > 0){
+            self.appendToResults({file: item, lines: seen});
+            self.noMatches += seen.length;
+          }
+        }
+      });
+    },
+    filterFiles: function(patt, data){
+      var self = this;
+      _.each(data, function(item) {
+        if(item.folder){
+          self.filterFiles(patt, item.children);
+        }else{
+          self.filterFile(patt, item);
+        }
+      });
+    },
+    render: function() {
+      var self = this;
+      PopoverView.prototype.render.call(this);
+      self.$form = self.$('form');
+      self.$searchFor = self.$("input");
+      self.$results = self.$('.results');
+      self.$form.submit(function(e) {
+        e.preventDefault();
+        $.ajax({
+          url: self.app.options.actionUrl + '?action=dataTree',
+          dataType: 'json',
+          success: function(data) {
+            self.$results.empty();
+            self.noMatches = 0;
+            var searchFor = self.$searchFor.val();
+            var patt = new RegExp(searchFor, "g");
+            self.filterFiles(patt, data);
+          }
+        });
+      });
+      return self;
+    },
+    findinfiles: function(resource, line) {
+      var self = this;
+      self.app.doAction('getFile', {
+        data: {
+          path: resource
+        },
+        dataType: 'json',
+        success: function(data) {
+          self.app.fileData[resource] = data;
+          self.app.openEditor(resource, {goToLine: line});
+        }
+      });
+    }
+  });
+
+  return FindInFiles;
+});
diff --git a/mockup/patterns/filemanager/js/popover.xml b/mockup/patterns/filemanager/js/popover.xml
new file mode 100644
index 00000000..a276f070
--- /dev/null
+++ b/mockup/patterns/filemanager/js/popover.xml
@@ -0,0 +1,12 @@
+<div class="arrow"></div>
+<div class="popover-label">
+<div style="position: relative;" class="popover-title">
+</div>
+<a style="position: absolute; top: 5px; right: 3px; font-size: 16px; color: #999;"
+   href="#" class="popover-close">
+  <span class="glyphicon glyphicon-remove"></span>
+</a>
+</div>
+<div class="items popover-content">
+</div>
+
diff --git a/mockup/patterns/filemanager/pattern.filemanager.less b/mockup/patterns/filemanager/pattern.filemanager.less
index aa7d966f..27ed619c 100644
--- a/mockup/patterns/filemanager/pattern.filemanager.less
+++ b/mockup/patterns/filemanager/pattern.filemanager.less
@@ -28,6 +28,11 @@
     .popover:extend(.popover all){}
     .popover-title:extend(.popover-title all){}
     .popover-content:extend(.popover-content all){}
+
+    .popover{
+        max-width: 600px;
+    }
+
     .arrow:extend(.arrow all){}
     .tooltip:extend(.tooltip all){}
     .tooltip-arrow:extend(.tooltip-arrow all){}
@@ -42,6 +47,20 @@
     .btn-primary:extend(.btn-primary all){}
     .btn-group:extend(.btn-group all){}
     .btn-success:extend(.btn-success all){}
+    .btn-group-dropdown:extend(.btn-group all){
+        display: inline-block;
+        margin: 0 !important;
+        vertical-align: initial !important;
+        
+        span.shortcut {
+            display: inline-block;
+            float: right;
+        }
+
+        ul.dropdown-menu.items.dropdown-content {
+            min-width: 250px;
+        }
+    }
     .input-group:extend(.input-group all){}
     .input-group-addon:extend(.input-group-addon all){}
     .input-group-btn:extend(.input-group-btn all){}
@@ -110,8 +129,38 @@
         }
     }
     .navbar {
-        a.btn {
+        .btn-group > a.btn {
+            float: none;
+            display: inline-block;
+            margin-bottom: 0.5em;
+            text-decoration: none;
+        }
+        .btn-group > .btn-group-dropdown{
+            float: none;
+            display: inline-block;
             text-decoration: none;
+
+            & > a.btn {
+                margin-bottom: 0.5em;
+                border-radius: 0;
+                float: none;
+                display: inline-block;
+                text-decoration: none;
+                padding: 5px 5px 8px 5px;
+                line-height: 10px;
+                font-size: 13px;
+            }
+
+            &:last-child > a.btn{
+                border-bottom-right-radius: 4px;
+                border-top-right-radius: 4px;
+            }
+
+            &:first-child > a.btn{
+                border-bottom-left-radius: 4px;
+                border-top-left-radius: 4px;
+            }
+
         }
     }
     .navbar-default {
@@ -120,6 +169,11 @@
     .nav-and-editor {
         float: left;
         width: 75%;
+
+        .navbar .navbar-collapse.collapse {
+            // force editor tabs to be displayed
+            height: 37px !important;
+        }
     }
     .navbar-nav > li {
         padding-left: 15px;
@@ -145,7 +199,7 @@
             }
         }
         > a {
-            float: left;
+            display: inline-block;
             padding: 8px 0px;
             text-decoration: none;
             color: @gray-dark;
diff --git a/mockup/patterns/filemanager/pattern.js b/mockup/patterns/filemanager/pattern.js
index 77a1acc7..a8af14e6 100644
--- a/mockup/patterns/filemanager/pattern.js
+++ b/mockup/patterns/filemanager/pattern.js
@@ -37,24 +37,32 @@ define([
   'underscore',
   'backbone',
   'mockup-ui-url/views/base',
+  'jqtree-contextmenu',
   'mockup-patterns-tree',
   'mockup-patterns-texteditor',
   'text!mockup-patterns-filemanager-url/templates/app.xml',
   'mockup-ui-url/views/toolbar',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup',
+  'mockup-ui-url/views/anchor',
+  'mockup-ui-url/views/dropdown',
   'mockup-patterns-filemanager-url/js/addnew',
   'mockup-patterns-filemanager-url/js/newfolder',
+  'mockup-patterns-filemanager-url/js/findfile',
+  'mockup-patterns-filemanager-url/js/findinfiles',
   'mockup-patterns-filemanager-url/js/delete',
   'mockup-patterns-filemanager-url/js/customize',
   'mockup-patterns-filemanager-url/js/rename',
   'mockup-patterns-filemanager-url/js/upload',
   'translate',
   'mockup-utils',
-  'text!mockup-ui-url/templates/popover.xml'
-], function($, Base, _, Backbone, BaseView, Tree, TextEditor, AppTemplate, Toolbar,
-            ButtonView, ButtonGroup, AddNewView, NewFolderView, DeleteView,
-            CustomizeView, RenameView, UploadView, _t, utils) {
+  'js-shortcuts',
+  'text!mockup-ui-url/templates/popover.xml',
+  'text!mockup-ui-url/templates/dropdown.xml'
+], function($, Base, _, Backbone, BaseView, ContextMenu, Tree, TextEditor, AppTemplate, Toolbar,
+            ButtonView, ButtonGroup, AnchorView, DropdownView,
+      AddNewView, NewFolderView, FindFileView, FindInFilesView, DeleteView,
+            CustomizeView, RenameView, UploadView, _t, utils, jsShortcuts) {
   'use strict';
 
   var FileManager = Base.extend({
@@ -91,22 +99,28 @@ define([
 
       self.options.treeConfig = $.extend(true, {}, self.treeConfig, {
         dataUrl: self.options.actionUrl + '?action=dataTree',
+        dragAndDrop: true,
+        useContextMenu: true,
+        onCanMoveTo: function(moved, target, position) {
+          /* if not using folder option, just allow, otherwise, only allow if folder */
+          if (position === "inside") {
+            return target.folder === undefined || target.folder === true;
+          }
+          return true;
+        },
         onCreateLi: function(node, li) {
           var imageTypes = ['png', 'jpg', 'jpeg', 'gif', 'ico'];
           var themeTypes = ['css', 'html', 'htm', 'txt', 'xml', 'js', 'cfg', 'less'];
 
           $('span', li).addClass('glyphicon');
-          if( node.folder ) {
-            $('span', li).addClass('glyphicon-folder-close')
-          }
-          else if( $.inArray(node.fileType, imageTypes) >= 0) {
+          if (node.folder) {
+            $('span', li).addClass('glyphicon-folder-close').addClass("droptarget");
+          } else if ($.inArray(node.fileType, imageTypes) >= 0) {
             $('span', li).addClass('glyphicon-picture');
-          }
-          else if( $.inArray(node.fileType, themeTypes) >= 0) {
+          } else if ($.inArray(node.fileType, themeTypes) >= 0) {
             $('span', li).addClass('glyphicon-file');
-          }
-          else {
-            $('span', li).addClass('glyphicon-cog')
+          } else {
+            $('span', li).addClass('glyphicon-cog');
           }
         }
       });
@@ -117,73 +131,150 @@ define([
         id: 'save',
         title: _t('Save'),
         icon: 'floppy-disk',
-        context: 'primary'
+        context: 'primary',
+        shortcut: 'Ctrl-S'
       });
-
-      var newFolderView = new NewFolderView({
-        triggerView: new ButtonView({
+      self.btns = {
+        "newfolder": new AnchorView({
           id: 'newfolder',
           title: _t('New folder'),
           tooltip: _t('Add new folder to current directory'),
           icon: 'folder-open',
-          context: 'default'
+          context: 'default',
+          shortcut: 'Alt-Shift-N'
         }),
-        app: self
-      });
-      var addNewView = new AddNewView({
-        triggerView: new ButtonView({
+        "newfile": new AnchorView({
           id: 'addnew',
-          title: _t('Add new file'),
+          title: _t('New file'),
           tooltip: _t('Add new file to current folder'),
           icon: 'file',
-          context: 'default'
+          context: 'default',
+          shortcut: 'Alt-N'
         }),
-        app: self
-      });
-      var renameView = new RenameView({
-        triggerView: new ButtonView({
+        "findfile": new AnchorView({
+          id: 'findfile',
+          title: _t('Find File'),
+          tooltip: _t('Find theme resource in plone'),
+          icon: 'search',
+          context: 'default',
+          shortcut: 'Ctrl-F'
+        }),
+        "findtextinfile": new AnchorView({
+          id: 'findinfiles',
+          title: _t('Find in Files'),
+          tooltip: _t('Find text within theme resource in plone'),
+          icon: 'search',
+          context: 'default',
+          shortcut: 'Ctrl-E'
+        }),
+        "rename": new AnchorView({
           id: 'rename',
           title: _t('Rename'),
           tooltip: _t('Rename currently selected resource'),
           icon: 'random',
           context: 'default'
         }),
-        app: self
-      });
-      var deleteView = new DeleteView({
-        triggerView: new ButtonView({
+        "delete": new AnchorView({
           id: 'delete',
           title: _t('Delete'),
           tooltip: _t('Delete currently selected resource'),
           icon: 'trash',
           context: 'danger'
         }),
+      };
+
+      var newFolderView = new NewFolderView({
+        triggerView: self.btns["newfolder"],
+        app: self
+      });
+      var addNewView = new AddNewView({
+        triggerView: self.btns["newfile"],
+        app: self
+      });
+      var findFileView = new FindFileView({
+        triggerView: self.btns["findfile"],
+        app: self
+      });
+      var findinFilesView = new FindInFilesView({
+        triggerView: self.btns["findtextinfile"],
+        app: self
+      });
+      var renameView = new RenameView({
+        triggerView: self.btns["rename"],
+        app: self
+      });
+      var deleteView = new DeleteView({
+        triggerView: self.btns["delete"],
         app: self
       });
 
-      self.views = [
-        newFolderView,
-        addNewView,
-        renameView,
-        deleteView
-      ];
+      var file_menu = new DropdownView({
+        title: _t('File'),
+        items: [
+          addNewView.triggerView,
+          newFolderView.triggerView
+        ],
+        id: 'file_menu',
+        app: self,
+        icon: 'file',
+        disable: function() {}
+      });
+
+      var edit_menu = new DropdownView({
+        title: _t('Edit'),
+        items: [
+          renameView.triggerView,
+          deleteView.triggerView
+        ],
+        id: 'edit_menu',
+        app: self,
+        icon: 'file',
+        disable: function() {}
+      });
+
+      var find_menu = new DropdownView({
+        title: _t('Find'),
+        items: [
+          findFileView.triggerView,
+          findinFilesView.triggerView
+        ],
+        id: 'find_menu',
+        icon: 'search',
+        app: self,
+        disable: function() {}
+      });
+
+      var views = {
+        "file_menu": [
+          newFolderView,
+          addNewView
+        ],
+        "edit_menu": [
+          renameView,
+          deleteView,
+        ],
+        "find_menu": [
+          findFileView,
+          findinFilesView
+        ],
+      };
       var mainButtons = [
         self.saveBtn,
-        newFolderView.triggerView,
-        addNewView.triggerView,
-        renameView.triggerView,
-        deleteView.triggerView
+        file_menu,
+        edit_menu,
+        find_menu,
       ];
 
-      if (self.options.uploadUrl && utils.featureSupport.dragAndDrop() && utils.featureSupport.fileApi()){
-        var uploadView = new UploadView({
-          triggerView: new ButtonView({
+      if (self.options.uploadUrl && utils.featureSupport.dragAndDrop() && utils.featureSupport.fileApi()) {
+        self.btns["upload"] = new AnchorView({
             id: 'upload',
-            title: _t('Upload'),
+            title: _t('Upload Local Files...'),
             tooltip: _t('Upload file to current directory'),
             icon: 'upload',
             context: 'default'
-          }),
+        });
+        var uploadView = new UploadView({
+          triggerView: self.btns["upload"],
           app: self,
           callback: function(data) {
             var path = self.uploadFolder + '/' + data.name;
@@ -194,22 +285,26 @@ define([
 
           }
         });
-        self.views.push(uploadView);
-        mainButtons.push(uploadView.triggerView);
+
+        views.file_menu.push(uploadView);
+        file_menu.items.push(uploadView.triggerView);
       }
-      if (self.options.resourceSearchUrl){
+      if (self.options.resourceSearchUrl) {
+        self.btns["customize"] = new AnchorView({
+          id: 'customize',
+          title: _t('Add new override'),
+          tooltip: _t('Find resource in plone to override'),
+          context: 'default'
+        });
         var customizeView = new CustomizeView({
-          triggerView: new ButtonView({
-            id: 'customize',
-            title: _t('Add new override'),
-            tooltip: _t('Find resource in plone to override'),
-            context: 'default'
-          }),
+          triggerView: self.btns["customize"],
           app: self
         });
-        self.views.push(customizeView);
-        mainButtons.push(customizeView.triggerView);
+        views["edit_menu"].push(customizeView);
+        edit_menu.items.push(customizeView.triggerView);
       }
+      self.views = [];
+      self.views = self.views.concat(views.file_menu).concat(views.edit_menu).concat(views.find_menu);
 
       self.toolbar = new Toolbar({
         items: [
@@ -224,8 +319,8 @@ define([
       self._save = function() {
 
         var path = $('.active', self.$tabs).data('path');
-        if( path === undefined || path === false ) {
-          alert("No file selected.");
+        if (path === undefined || path === false) {
+          alert('No file selected.');
           return;
         }
         self.doAction('saveFile', {
@@ -236,10 +331,10 @@ define([
             _authenticator: utils.getAuthenticator()
           },
           success: function(data) {
-            if( data['error'] !== undefined ) {
-              alert("There was a problem saving the file.");
+            if (data['error'] !== undefined) {
+              alert('There was a problem saving the file.');
             }
-            $('[data-path="' + path + '"]').removeClass("modified");
+            $('[data-path="' + path + '"]').removeClass('modified');
           }
         });
       };
@@ -248,13 +343,35 @@ define([
         self._save();
       });
       self.render();
+      self.shortcuts();
+
     },
-    $: function(selector){
+
+    shortcuts: function(){
+      var self = this;
+      shortcut.add("Alt+N", function () {
+        self.btns.newfile.$el.click();
+      });
+      shortcut.add("Alt+Shift+N", function () {
+        self.btns.newfolder.$el.click();
+      });
+      shortcut.add("Ctrl+S", function () {
+        self.saveBtn.$el.click();
+      });
+      shortcut.add("Ctrl+F", function () {
+        self.btns.findfile.$el.click();
+      });
+      shortcut.add("Ctrl+E", function () {
+        self.btns.findtextinfile.$el.click();
+      });
+    },
+
+    $: function(selector) {
       return this.$el.find(selector);
     },
     refreshTree: function(callback) {
       var self = this;
-      if( callback === undefined ) {
+      if (callback === undefined) {
         callback = function() {};
       }
       self.$tree.tree('loadDataFromUrl',
@@ -263,7 +380,7 @@ define([
         callback
       );
     },
-    render: function(){
+    render: function() {
       var self = this;
       self.$el.html(self.template(self.options));
       self.$('#toolbar').append(self.toolbar.render().el);
@@ -277,34 +394,73 @@ define([
       self.$editor = self.$('.editor');
 
       /* close popovers when clicking away */
-      $(document).click(function(e){
-          var $el = $(e.target);
-          if(!$el.is(':visible')){
-              // ignore this, fake event trigger to element that is not visible
-              return;
-          }
-          if($el.is('a') || $el.parent().is('a')){
-              return;
+      $(document).click(function(e) {
+        var $el = $(e.target);
+        if (!$el.is(':visible')) {
+          // ignore this, fake event trigger to element that is not visible
+          return;
+        }
+        if ($el.is('a') || $el.parent().is('a')) {
+          return;
+        }
+        var $popover = $('.popover:visible');
+        if ($popover.length > 0 && !$.contains($popover[0], $el[0])) {
+          var popover = $popover.data('component');
+          if (popover) {
+            popover.hide();
           }
-          var $popover = $('.popover:visible');
-          if($popover.length > 0 && !$.contains($popover[0], $el[0])){
-              var popover = $popover.data('component');
-              if(popover){
-                  popover.hide();
-              }
+        }
+      });
+
+      // bind 'tree.contextmenu' event
+      self.$tree.jqTreeContextMenu({
+          menu: '#contextual-menu',
+          onContextMenuItem: function(e, node, $el) {
+            var action = $el.data("item");
+            try {
+              self.btns[action].el.click();
+            } catch($err) {
+              console.log("Command does not exist: " + action);
+            }
           }
       });
 
       self.$tree.bind('tree.select', function(e) {
-        if( e.node === null ) {
+        if (e.node === null) {
           self.toggleButtons(false);
-        }
-        else{
+        } else {
           self.toggleButtons(true);
           self.handleClick(e);
         }
       });
 
+      self.$tree.bind('tree.move', function(event) {
+
+        var target_node = event.move_info.target_node;
+        var srcpath = event.move_info.moved_node.path;
+        var newpath = target_node.path;
+        if (event.move_info.position !== "inside" ){
+          newpath = newpath.substring(newpath.indexOf('/'), newpath.lastIndexOf('/'));
+        }
+
+        self.doAction('move', {
+          data: {
+            source: srcpath,
+            destination: newpath
+          },
+          dataType: 'json',
+          success: function(data) {
+            self.$tree.tree('reload', function() {
+              self.$tree.tree('selectNode', target_node);
+            });
+            var jdata = JSON.parse(data);
+            if(jdata.error != ''){
+              alert(jdata.error);
+            }
+          }
+        });
+      });
+
       self.$tree.bind('tree.open', function(e) {
         var element = $(e.node.element).find(':first').find('.glyphicon');
         $(element).addClass('glyphicon-folder-open');
@@ -319,16 +475,16 @@ define([
 
       self.$tree.bind('tree.init', function(e) {
         var node = self.$tree.tree('getTree').children[0];
-        if( node ) {
+        if (node) {
           self.$tree.tree('selectNode', node);
         }
       });
 
       $(self.$tabs).on('click', function(e) {
         var path = $(e.target).data('path');
-        if( path === undefined ) {
+        if (path === undefined) {
           path = $(e.target.parentElement).data('path');
-          if( path === undefined ) {
+          if (path === undefined) {
             return false;
           }
         }
@@ -339,19 +495,18 @@ define([
       });
     },
     toggleButtons: function(on) {
-      if( on === undefined ) {
+      if (on === undefined) {
         return;
       }
 
-      if( on ) {
-        $('#btn-delete', this.$el).attr('disabled', false);
-        $('#btn-save', this.$el).attr('disabled', false);
-        $('#btn-rename', this.$el).attr('disabled', false);
-      }
-      else{
-        $('#btn-delete', this.$el).attr('disabled', 'disabled');
-        $('#btn-save', this.$el).attr('disabled', 'disabled');
-        $('#btn-rename', this.$el).attr('disabled', 'disabled');
+      if (on) {
+        $('#btn-delete', this.$el).prop('disabled', false);
+        $('#btn-save', this.$el).prop('disabled', false);
+        $('#btn-rename', this.$el).prop('disabled', false);
+      } else {
+        $('#btn-delete', this.$el).prop('disabled', true);
+        $('#btn-save', this.$el).prop('disabled', true);
+        $('#btn-rename', this.$el).prop('disabled', true);
       }
     },
     handleClick: function(event) {
@@ -363,9 +518,9 @@ define([
       var self = this;
       var active = self.$tabs.find('.active .remove');
       var $siblings = $(active).parent().siblings();
-      if ($siblings.length > 0){
+      if ($siblings.length > 0) {
         var $item;
-        if ($(active).parent().prev().length > 0){
+        if ($(active).parent().prev().length > 0) {
           $item = $(active).parent().prev();
         } else {
           $item = $(active).parent().next();
@@ -380,15 +535,14 @@ define([
     },
     closeTab: function(path) {
       var self = this;
-      if( path === undefined ) {
+      if (path === undefined) {
         return;
       }
 
       var tabs = self.$tabs.children();
 
       $(tabs).each(function() {
-        if( $(this).data('path') == path )
-        {
+        if ($(this).data('path') == path) {
           $(this).find('a.remove').trigger('click');
         }
       });
@@ -402,22 +556,22 @@ define([
     },
     createTab: function(path) {
       var self = this;
-      var $item = $(self.tabItemTemplate({path: path}));
+      var $item = $(self.tabItemTemplate({
+        path: path
+      }));
       self.shrinkTab($item);
       self.$tabs.append($item);
-      $('.remove', $item).click(function(e){
+      $('.remove', $item).click(function(e) {
         e.preventDefault();
         e.stopPropagation();
         self.closeActivePopovers();
-        if ($(this).parent().hasClass('active'))
-        {
+        if ($(this).parent().hasClass('active')) {
           self.closeActiveTab();
-        }
-        else {
+        } else {
           $(this).parent().remove();
         }
       });
-      $('.select', $item).click(function(e){
+      $('.select', $item).click(function(e) {
         e.preventDefault();
         $('li', self.$tabs).removeClass('active');
         var $li = $(this).parent();
@@ -427,60 +581,61 @@ define([
     },
     updateTabs: function(path) {
       var self = this;
-      if( path === undefined ) {
+      if (path === undefined) {
         return;
       }
       $('li', self.$tabs).removeClass('active');
       var $existing = $('[data-path="' + path + '"]', self.$tabs);
-      if ($existing.length === 0){
+      if ($existing.length === 0) {
         self.createTab(path);
-      }else{
+      } else {
         $existing.addClass('active');
       }
     },
     shrinkTab: function(tab) {
-        var self = this;
-        if( self.$tabs.hasClass('smallTabs') ) {
-            tab = $(tab);
-            var text = tab.text();
-            if( text.lastIndexOf('/') > 0 )
-            {
-                text = text.substr(text.lastIndexOf('/') + 1);
-                tab.find('.select').text(text);
-            }
+      var self = this;
+      if (self.$tabs.hasClass('smallTabs')) {
+        tab = $(tab);
+        var text = tab.text();
+        if (text.lastIndexOf('/') > 0) {
+          text = text.substr(text.lastIndexOf('/') + 1);
+          tab.find('.select').text(text);
         }
+      }
     },
     openFile: function(event) {
       var self = this;
-      if( event.node === null ) {
+      if (event.node === null) {
         return true;
       }
-      if (event.node.folder){
-        if( self.options.theme ) {
+      if (event.node.folder) {
+        if (self.options.theme) {
           self.setUploadUrl(event.node.path);
         }
         return true;
       }
       var doc = event.node.path;
-      if(self.fileData[doc]) {
+      if (self.fileData[doc]) {
         self.openEditor(doc);
 
         var resetLine = function() {
-          if( self.fileData[doc].line === undefined ) {
+          if (self.fileData[doc].line === undefined) {
             return;
           }
           self.ace.editor.scrollToLine(self.fileData[doc].line);
-          self.ace.editor.moveCursorToPosition(self.fileData[doc].cursorPosition)
+          self.ace.editor.moveCursorToPosition(self.fileData[doc].cursorPosition);
           //We only want this to fire after the intial render,
           //Not after rendering a "scroll" or "focus" event,
           //So we remove it immediately after.
-          self.ace.editor.renderer.off("afterRender", resetLine);
+          self.ace.editor.renderer.off('afterRender', resetLine);
         };
         //This sets the listener before rendering finishes
-        self.ace.editor.renderer.on("afterRender", resetLine);
+        self.ace.editor.renderer.on('afterRender', resetLine);
       } else {
         self.doAction('getFile', {
-          data: { path: doc },
+          data: {
+            path: doc
+          },
           dataType: 'json',
           success: function(data) {
             self.fileData[doc] = data;
@@ -491,29 +646,24 @@ define([
     },
     getNodeByPath: function(path) {
       var self = this;
-      if( path === undefined || path === "" )
-      {
-       return null;
+      if (path === undefined || path === '') {
+        return null;
       }
 
-      if( path.indexOf('/') === 0 )
-      {
-        path = path.substr(1,path.length);
+      if (path.indexOf('/') === 0) {
+        path = path.substr(1, path.length);
       }
 
       var folders = path.split('/');
       var children = self.$tree.tree('getTree').children;
 
-      for( var i = 0; i < folders.length; i++ )
-      {
-        for( var z = 0; z < children.length; z++ )
-        {
-          if( children[z].name == folders[i] ) {
-            if( children[z].folder == true && i != (folders.length - 1) ) {
+      for (var i = 0; i < folders.length; i++) {
+        for (var z = 0; z < children.length; z++) {
+          if (children[z].name == folders[i]) {
+            if (children[z].folder == true && i != (folders.length - 1)) {
               children = children[z].children;
               break;
-            }
-            else {
+            } else {
               return children[z];
             }
           }
@@ -524,7 +674,7 @@ define([
     },
     doAction: function(action, options) {
       var self = this;
-      if (!options){
+      if (!options) {
         options = {};
       }
       $.ajax({
@@ -538,22 +688,25 @@ define([
         failure: options.failure || function() {}
       });
     },
-    openEditor: function(path) {
+    openEditor: function(path, options) {
       var self = this;
 
-      if( path !== undefined ) {
-          self.updateTabs(path);
+      if (path !== undefined) {
+        self.updateTabs(path);
+      }
+      if (options === undefined) {
+        options = {};
       }
 
       // first we need to save the current editor content
-      if(self.currentPath) {
+      if (self.currentPath) {
         self.fileData[self.currentPath].contents = self.ace.editor.getValue();
         var lineNum = self.ace.editor.getFirstVisibleRow();
         self.fileData[self.currentPath].line = lineNum;
         self.fileData[self.currentPath].cursorPosition = self.ace.editor.getCursorPosition();
       }
       self.currentPath = path;
-      if (self.ace !== undefined){
+      if (self.ace !== undefined) {
         self.ace.editor.destroy();
         self.ace.editor.container.parentNode.replaceChild(
           self.ace.editor.container.cloneNode(true),
@@ -562,44 +715,45 @@ define([
       }
       self.ace = new TextEditor(self.$editor);
 
-      if( self.currentPath === undefined ) {
-          self.ace.setText();
-          self.ace.setSyntax('text');
-          self.ace.editor.clearSelection();
-          self.$tree.tree('selectNode', null);
-      }
-      else if( typeof self.fileData[path].info !== 'undefined' )
-      {
-          var preview = self.fileData[path].info;
-          if( self.ace.editor !== undefined ) {
-              self.ace.editor.off();
-          }
-          $('.ace_editor').empty().append(preview);
-      }
-      else
-      {
-          self.ace.setText(self.fileData[path].contents);
-          self.ace.setSyntax(path);
-          self.ace.editor.clearSelection();
+      if (self.currentPath === undefined) {
+        self.ace.setText('');
+        self.ace.setSyntax('text');
+        self.ace.editor.clearSelection();
+        self.$tree.tree('selectNode', null);
+      } else if (typeof self.fileData[path].info !== 'undefined') {
+        var preview = self.fileData[path].info;
+        if (self.ace.editor !== undefined) {
+          self.ace.editor.off();
+        }
+        $('.ace_editor').empty().append(preview);
+      } else {
+        self.ace.setText(self.fileData[path].contents);
+        self.ace.setSyntax(path);
+        self.ace.editor.clearSelection();
       }
 
       self.resizeEditor();
-      self.$el.trigger("fileChange");
+      if(options.goToLine != undefined){
+        self.ace.editor.gotoLine(options.goToLine, 0, true);
+      }
+
+      self.$el.trigger('fileChange');
       self.ace.editor.on('change', function() {
         if (self.ace.editor.curOp && self.ace.editor.curOp.command.name) {
-          $('[data-path="' + path + '"]').addClass("modified");
+          $('[data-path="' + path + '"]').addClass('modified');
         }
       });
       self.ace.editor.on('paste', function() {
-        $('[data-path="' + path + '"]').addClass("modified");
+        $('[data-path="' + path + '"]').addClass('modified');
       });
       self.ace.editor.commands.addCommand({
         name: 'saveFile',
         bindKey: {
-          win: 'Ctrl-S', mac: 'Command-S',
+          win: 'Ctrl-S',
+          mac: 'Command-S',
           sender: 'editor|cli'
         },
-        exec: function (env, args, request) {
+        exec: function(env, args, request) {
           self._save();
         }
       });
@@ -609,27 +763,27 @@ define([
     },
     getNodePath: function(node) {
       var self = this;
-      if(node === undefined){
+      if (node === undefined) {
         node = self.getSelectedNode();
       }
       var path = self.getFolderPath(node.parent);
-      if (path !== '/'){
+      if (path !== '/') {
         path += '/';
       }
 
       var name = (node.name !== undefined) ? node.name : '';
       return path + name;
     },
-    getFolderPath: function(node){
+    getFolderPath: function(node) {
       var self = this;
-      if(node === undefined){
+      if (node === undefined) {
         node = self.getSelectedNode();
       }
       var parts = [];
-      if (!node.folder && node.name){
+      if (!node.folder && node.name) {
         node = node.parent;
       }
-      while (node.name){
+      while (node.name) {
         parts.push(node.name);
         node = node.parent;
       }
@@ -639,40 +793,42 @@ define([
     getUpload: function() {
       var self = this;
 
-      return _.find(self.views, function(x) { return x.upload !== undefined });
+      return _.find(self.views, function(x) {
+        return x.upload !== undefined;
+      });
     },
     resizeEditor: function() {
-        var self = this;
-
-        self.$editor = $('.editor', self.$el);
-        var tab = self.$tabs.children()[0];
-        if( $(tab).outerHeight() < (self.$tabs.height() - 1) ) {
-            self.$tabs.addClass('smallTabs');
-            $(self.$tabs.children()).each(function() {
-                self.shrinkTab(this);
-            });
-        }
-        var tabBox = self.$tabs.parent();
-
-        //Contains both the tabs, and editor window
-        var container = tabBox.parent().parent();
-        var h = container.innerHeight();
-        h -= tabBox.outerHeight();
-
-        //+2 for the editor borders
-        h -= 2;
-        //accounts for the borders/margin
-        self.$editor.height(h);
-        var w = container.innerWidth();
-        w -= (container.outerWidth(true) - container.innerWidth());
-
-        self.$editor.width(w);
-        if (self.ace !== undefined){
-          //This forces ace to redraw if the container has changed size
-          self.ace.editor.resize();
-          self.ace.editor.$blockScrolling = Infinity;
-          self.ace.editor.focus();
-        }
+      var self = this;
+
+      self.$editor = $('.editor', self.$el);
+      var tab = self.$tabs.children()[0];
+      if ($(tab).outerHeight() < (self.$tabs.height() - 1)) {
+        self.$tabs.addClass('smallTabs');
+        $(self.$tabs.children()).each(function() {
+          self.shrinkTab(this);
+        });
+      }
+      var tabBox = self.$tabs.parent();
+
+      //Contains both the tabs, and editor window
+      var container = tabBox.parent().parent();
+      var h = container.innerHeight();
+      h -= tabBox.outerHeight();
+
+      //+2 for the editor borders
+      h -= 2;
+      //accounts for the borders/margin
+      self.$editor.height(h);
+      var w = container.innerWidth();
+      w -= (container.outerWidth(true) - container.innerWidth());
+
+      self.$editor.width(w);
+      if (self.ace !== undefined) {
+        //This forces ace to redraw if the container has changed size
+        self.ace.editor.resize();
+        self.ace.editor.$blockScrolling = Infinity;
+        self.ace.editor.focus();
+      }
     },
     selectItem: function(path) {
       var self = this;
@@ -682,18 +838,18 @@ define([
     setUploadUrl: function(path) {
       var self = this;
 
-      if( path === undefined ) {
-        path = "";
+      if (path === undefined) {
+        path = '';
       }
 
       self.uploadFolder = path;
       var view = self.getUpload();
-      if( view !== undefined ) {
+      if (view !== undefined) {
         var url = self.options.uploadUrl +
-                  path +
-                  "/themeFileUpload" +
-                  "?_authenticator=" +
-                  utils.getAuthenticator();
+          path +
+          '/themeFileUpload' +
+          '?_authenticator=' +
+          utils.getAuthenticator();
 
         view.upload.dropzone.options.url = url;
       }
@@ -701,7 +857,7 @@ define([
     refreshFile: function(path) {
       var self = this;
 
-      if( path === undefined ) {
+      if (path === undefined) {
         path = self.getSelectedNode().path;
       }
       self.closeTab(path);
diff --git a/mockup/patterns/filemanager/templates/app.xml b/mockup/patterns/filemanager/templates/app.xml
index 11d594ff..519d6dad 100644
--- a/mockup/patterns/filemanager/templates/app.xml
+++ b/mockup/patterns/filemanager/templates/app.xml
@@ -1,5 +1,7 @@
 <div id="toolbar">
 </div>
+<div id="toolbar-action">
+</div>
 <div class="container">
     <div class="tree">
     </div>
@@ -14,4 +16,11 @@
                 </div>
             </div>
         </nav>
-</div>
\ No newline at end of file
+</div>
+<ul id="contextual-menu" class="dropdown-menu">
+    <li data-item="newfile"><a>New File</a></li>
+    <li data-item="newfolder"><a>New Folder</a></li>
+    <li data-item="rename"><a>Rename</a></li>
+    <li data-item="delete"><a>Delete</a></li>
+    <li data-item="upload"><a>Upload Here</a></li>
+</ul>
diff --git a/mockup/patterns/filemanager/templates/popover.xml b/mockup/patterns/filemanager/templates/popover.xml
new file mode 100644
index 00000000..a276f070
--- /dev/null
+++ b/mockup/patterns/filemanager/templates/popover.xml
@@ -0,0 +1,12 @@
+<div class="arrow"></div>
+<div class="popover-label">
+<div style="position: relative;" class="popover-title">
+</div>
+<a style="position: absolute; top: 5px; right: 3px; font-size: 16px; color: #999;"
+   href="#" class="popover-close">
+  <span class="glyphicon glyphicon-remove"></span>
+</a>
+</div>
+<div class="items popover-content">
+</div>
+
diff --git a/mockup/patterns/thememapper/pattern.js b/mockup/patterns/thememapper/pattern.js
index 59e6ada6..5111e2a3 100644
--- a/mockup/patterns/thememapper/pattern.js
+++ b/mockup/patterns/thememapper/pattern.js
@@ -40,8 +40,12 @@ define([
   'mockup-patterns-thememapper-url/js/cacheview',
   'mockup-ui-url/views/button',
   'mockup-ui-url/views/buttongroup',
+  'mockup-ui-url/views/anchor',
+  'mockup-ui-url/views/dropdown',
   'mockup-utils'
-], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView, LessBuilderView, CacheView, ButtonView, ButtonGroup, utils) {
+], function($, Base, _, _t, InspectorTemplate, FileManager, RuleBuilder, RuleBuilderView,
+            LessBuilderView, CacheView, ButtonView, ButtonGroup,
+            AnchorView, DropdownView, utils) {
   'use strict';
 
   var inspectorTemplate = _.template(InspectorTemplate);
@@ -245,7 +249,7 @@ define([
       }
 
       self.animateSelector(self.$el.find('.frame-info'));
-      self.$el.find('.selector-info').text(node == null? "" : self.ruleBuilder.bestSelector(node));
+      self.$el.find('.selector-info').text(node == null? '': self.ruleBuilder.bestSelector(node));
 
       if(self.ruleBuilder.active) {
         self.ruleBuilder.select(node);
@@ -255,7 +259,7 @@ define([
     },
     onselect: function(highlighter, node) {
       var self = this;
-      self.$currentSelector.text(node == null? "" : self.ruleBuilder.bestSelector(node));
+      self.$currentSelector.text(node == null? '': self.ruleBuilder.bestSelector(node));
     }
   });
 
@@ -319,11 +323,13 @@ define([
       self.fileManager = new FileManager(self.$fileManager, self.options.filemanagerConfig);
       self.fileManager.setUploadUrl();
 
+      self.btns = {};
+      self.menus = {};
       self.setupButtons();
 
       self.ruleBuilder = new RuleBuilder(self, self.ruleBuilderCallback);
 
-      self.fileManager.on("fileChange", function() {
+      self.fileManager.on('fileChange', function() {
         var node = self.fileManager.getSelectedNode();
         self.setLessPaths(node);
       });
@@ -339,9 +345,7 @@ define([
         ruleBuilder: self.ruleBuilder,
         url: self.options.unthemedUrl,
       });
-      self.fileManager.$tree.bind('tree.click', function(e){
-      });
-      self.buildLessButton.disable();
+      self.btns.buildLessButton.disable();
 
       if( !self.editable ) {
         if( self.fileManager.toolbar ) {
@@ -369,39 +373,39 @@ define([
       })
     },
     setSavePath: function() {
-        var self = this;
-        var filename = self.lessbuilderView.$filename.val()
+      var self = this;
+      var filename = self.lessbuilderView.$filename.val();
 
-        if( filename == "" ) {
-            filename = self.lessbuilderView.$filename.attr('placeholder');
-        }
+      if(filename === '') {
+        filename = self.lessbuilderView.$filename.attr('placeholder');
+      }
 
-        var s = self.lessPaths['save'];
-        var folder = s.substr(0, s.lastIndexOf('/'));
+      var s = self.lessPaths['save'];
+      var folder = s.substr(0, s.lastIndexOf('/'));
 
-        var savePath = folder + '/' + filename;
-        self.lessPaths['save'] = savePath;
+      var savePath = folder + '/' + filename;
+      self.lessPaths['save'] = savePath;
     },
     setLessPaths: function(node) {
       var self = this;
 
-      if( node.fileType == "less" ){
-        self.buildLessButton.enable();
+      if(node.fileType === 'less'){
+        self.btns.buildLessButton.enable();
       }
-      else{
-        self.buildLessButton.disable();
+      else {
+        self.btns.buildLessButton.disable();
       }
 
-      if( node.path != "" ) {
-        var reg = new RegExp("/(.*\\.)less$", "m");
+      if (node.path !== '') {
+        var reg = new RegExp('/(.*\\.)less$', 'm');
         var path = reg.exec(node.path);
 
         if( path === null ) {
           self.lessPaths = {};
           return false;
         }
-        var lessPath = path[1] + "less";
-        var cssPath = path[1] + "css";
+        var lessPath = path[1] + 'less';
+        var cssPath = path[1] + 'css';
 
         //file paths should be in the form of:
         // "[directory/]filename.less"
@@ -419,8 +423,8 @@ define([
     },
     setDefaultPaths: function(manifest) {
       var self = this;
-      var dev = new RegExp("development-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)");
-      var prod = new RegExp("production-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)");
+      var dev = new RegExp('development-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)');
+      var prod = new RegExp('production-css\\s*=\\s*\\/\\+\\+theme\\+\\+.*?\\/(.*)');
 
       var devUrl = dev.exec(manifest.contents)[1];
       var prodUrl = prod.exec(manifest.contents)[1];
@@ -432,7 +436,7 @@ define([
     saveThemeCSS: function(styles) {
       var self = this.env;
 
-      if( styles === "" || styles === undefined ) {
+      if(styles === '' || styles === undefined) {
         //There was probably a problem during compilation
         return false;
       }
@@ -465,8 +469,8 @@ define([
       var $parent = self.$mockupInspector.parent();
       $parent.slideDown();
       self.hidden = false;
-      self.showInspectorsButton.options.title = 'Hide inspectors';
-      self.showInspectorsButton.applyTemplate();
+      self.btns.showInspectorsButton.options.title = 'Hide inspectors';
+      self.btns.showInspectorsButton.applyTemplate();
       $('html, body').animate({
         scrollTop: $parent.offset().top - 50
       }, 500);
@@ -476,43 +480,43 @@ define([
       var $parent = self.$mockupInspector.parent();
       $parent.slideUp();
       self.hidden = true;
-      self.showInspectorsButton.options.title = 'Show inspectors';
-      self.showInspectorsButton.applyTemplate();
+      self.btns.showInspectorsButton.options.title = 'Show inspectors';
+      self.btns.showInspectorsButton.applyTemplate();
     },
     setupButtons: function(){
       var self = this;
-      self.showInspectorsButton = new ButtonView({
+      self.btns.showInspectorsButton = new ButtonView({
         id: 'showinspectors',
         title: _t('Show inspectors'),
         icon: 'search',
         tooltip: _t('Show inspector panels'),
         context: 'default'
       });
-      self.showInspectorsButton.on('button:click', function(){
+      self.btns.showInspectorsButton.on('button:click', function(){
         if (self.hidden) {
           self.showInspectors();
         } else {
           self.hideInspectors();
         }
       });
-
-      self.buildRuleButton = new ButtonView({
+      
+      self.btns.buildRuleButton = new AnchorView({
         id: 'buildrule',
         title: _t('Build rule'),
         icon: 'wrench',
         tooltip: _t('rule building wizard'),
         context: 'default'
       });
-      self.fullscreenButton = new ButtonView({
+      self.btns.fullscreenButton = new ButtonView({
         id: 'fullscreenEditor',
         title: _t('Fullscreen'),
         icon: 'fullscreen',
         tooltip: _t('view the editor in fullscreen'),
         context: 'default'
       });
-      self.fullscreenButton.on('button:click', function() {
+      self.btns.fullscreenButton.on('button:click', function() {
         var btn = $('<a href="#">'+
-            '<span class="btn btn-danger closeeditor">' + _t("Close Fullscreen") + '</span>'+
+            '<span class="btn btn-danger closeeditor">' + _t('Close Fullscreen') + '</span>'+
             '</a>').prependTo($('.tree'));
 
         $(btn).click(function() {
@@ -532,62 +536,75 @@ define([
       self.previewThemeButton.on('button:click', function(){
         window.open(self.options.previewUrl);
       });
-      self.buildLessButton = new ButtonView({
+      self.btns.buildLessButton = new AnchorView({
         id: 'buildless',
         title: _t('Build CSS'),
         icon: 'cog',
         tooltip: _t('Compile LESS file'),
         context: 'default'
       });
-      self.refreshButton = new ButtonView({
+      self.btns.refreshButton = new ButtonView({
         id: 'refreshButton ',
         title: _t('Refresh'),
         icon: 'refresh',
         tooltip: _t('Reload the current file'),
         context: 'default'
       });
-      self.refreshButton.on("button:click", function() {
+      self.btns.refreshButton.on('button:click', function() {
         self.fileManager.refreshFile();
       });
-      self.cacheButton = new ButtonView({
+      self.btns.cacheButton = new ButtonView({
         id: 'cachebutton',
         title: _t('Clear cache'),
         icon: 'floppy-remove',
         tooltip: _t('Clear site\'s theme cache'),
         context: 'default'
       });
-      self.helpButton = new ButtonView({
+      self.btns.helpButton = new ButtonView({
         id: 'helpbutton',
         title: _t('Help'),
         icon: 'question-sign',
         tooltip: _t('Show help'),
         context: 'default'
       });
-      self.helpButton.on('button:click', function(){
+      self.btns.helpButton.on('button:click', function(){
         window.open(self.options.helpUrl);
       });
       self.rulebuilderView = new RuleBuilderView({
-        triggerView: self.buildRuleButton,
+        triggerView: self.btns.buildRuleButton,
         app: self
       });
       self.cacheView = new CacheView({
-        triggerView: self.cacheButton,
+        triggerView: self.btns.cacheButton,
         app: self
-      })
+      });
       self.lessbuilderView = new LessBuilderView({
-        triggerView: self.buildLessButton,
+        triggerView: self.btns.buildLessButton,
         app: self
       });
+      
+
+      self.menus.tools = new DropdownView({
+        title: _t('Tools'),
+        items: [
+          self.btns.buildRuleButton,
+          self.btns.buildLessButton,
+        ],
+        id: 'file_menu',
+        app: self,
+        icon: 'file',
+        disable: function() {}
+      });
+      
       self.buttonGroup = new ButtonGroup({
         items: [
-          self.showInspectorsButton,
-          self.buildRuleButton,
+          self.menus.tools,
+          self.btns.showInspectorsButton,
           self.previewThemeButton,
-          self.fullscreenButton,
-          self.buildLessButton,
-          self.refreshButton,
-          self.cacheButton,
-          self.helpButton
+          self.btns.fullscreenButton,
+          self.btns.refreshButton,
+          self.btns.cacheButton,
+          self.btns.helpButton
         ],
         id: 'mapper'
       });
diff --git a/mockup/patterns/thememapper/pattern.thememapper.less b/mockup/patterns/thememapper/pattern.thememapper.less
index b5ae8500..7666065a 100644
--- a/mockup/patterns/thememapper/pattern.thememapper.less
+++ b/mockup/patterns/thememapper/pattern.thememapper.less
@@ -326,11 +326,13 @@ body.plone-toolbar-left-default {
     }
 
     .pat-filemanager .navbar .btn-group > a.btn {
+        float: none;
+        display: inline-block;
         line-height: 10px;
         padding: 5px;
         font-size: small;
         padding-bottom: 8px;
-        margin-bottom: -15px;
+        margin-bottom: 0.5em;
     }
 
     .btn-group {
diff --git a/mockup/tests/pattern-filemanager-test.js b/mockup/tests/pattern-filemanager-test.js
index 1789b425..9b230d39 100644
--- a/mockup/tests/pattern-filemanager-test.js
+++ b/mockup/tests/pattern-filemanager-test.js
@@ -40,6 +40,8 @@ define([
       registry.scan(this.$el);
       this.clock.tick(1000);
       expect(this.$el.find('.tree ul').length).to.be.equal(2);
+      // New File, New Folder, Rename, Delete, Upload Here
+      expect($('#contextual-menu li').length).to.be.equal(5);
     });
   });
 
diff --git a/mockup/tests/pattern-thememapper-test.js b/mockup/tests/pattern-thememapper-test.js
index 78576912..f7362f7c 100644
--- a/mockup/tests/pattern-thememapper-test.js
+++ b/mockup/tests/pattern-thememapper-test.js
@@ -39,7 +39,9 @@ define([
       expect($('.pat-filemanager', this.$el).length > 0).to.be.equal(true);
       expect($('#btngroup-mapper', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-showinspectors', this.$el).length > 0).to.be.equal(true);
-      expect($('#btn-buildrule', this.$el).length > 0).to.be.equal(true);
+      expect($('#dropdown-menu-', this.$el).length > 0).to.be.equal(true);
+      expect($('.btn-group-dropdown #alink-buildrule', this.$el).length > 0).to.be.equal(true);
+      expect($('.btn-group-dropdown #alink-buildless', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-previewtheme', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-fullscreenEditor', this.$el).length > 0).to.be.equal(true);
       expect($('#btn-helpbutton', this.$el).length > 0).to.be.equal(true);


