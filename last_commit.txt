Repository: mockup


Branch: refs/heads/master
Date: 2016-03-16T14:01:39-05:00
Author: nathan.vangheem () <nathan.vangheem@wildcardcorp.com>
Commit: https://github.com/plone/mockup/commit/efd02e50904f55299eb7f00eddc6c9fcf762ffb1

Fix TinyMCE to work with Safari when using inline mode. This fixes bug where Safari
  would not work with mosaic

Files changed:
M CHANGES.rst
M mockup/patterns/tinymce/js/links.js
M mockup/patterns/tinymce/pattern.js
M mockup/tests/pattern-tinymce-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 351d8a2..026e031 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -43,6 +43,9 @@ Fixes:
 
 - ``.jscs.json`` format fixes for newer jscs versions.
   [thet]
+- Fix TinyMCE to work with Safari when using inline mode. This fixes bug where Safari
+  would not work with mosaic
+  [vangheem]
 
 - Fix ``Makefile`` to use ``mockup/build`` instead of ``build``.
   [thet]
diff --git a/mockup/patterns/tinymce/js/links.js b/mockup/patterns/tinymce/js/links.js
index 24485bd..81cccda 100644
--- a/mockup/patterns/tinymce/js/links.js
+++ b/mockup/patterns/tinymce/js/links.js
@@ -41,7 +41,9 @@ define([
     },
 
     set: function(val) {
-      this.getEl().attr('value', val);
+      var $el = this.getEl();
+      $el.attr('value', val);
+      $el.val(val);
     },
 
     attributes: function() {
@@ -114,6 +116,7 @@ define([
       $el.removeData('pattern-relateditems'); // reset the pattern
       $el.parent().replaceWith($el);
       $el.attr('value', val);
+      $el.val(val);
       this.createRelatedItems();
     },
 
@@ -405,6 +408,38 @@ define([
       self.dom = self.tiny.dom;
       self.linkType = self.options.initialLinkType;
       self.linkTypes = {};
+
+      self.data = {};
+      // get selection BEFORE..
+      // This is pulled from TinyMCE link plugin
+      self.initialText = null;
+      var value;
+      self.rng = self.tiny.selection.getRng();
+      self.selectedElm = self.tiny.selection.getNode();
+      self.anchorElm = self.tiny.dom.getParent(self.selectedElm, 'a[href]');
+      self.onlyText = self.isOnlyTextSelected();
+
+      self.data.text = self.initialText = self.anchorElm ? (self.anchorElm.innerText || self.anchorElm.textContent) : self.tiny.selection.getContent({format: 'text'});
+      self.data.href = self.anchorElm ? self.tiny.dom.getAttrib(self.anchorElm, 'href') : '';
+
+      if (self.anchorElm) {
+        self.data.target = self.tiny.dom.getAttrib(self.anchorElm, 'target');
+      } else if (self.tiny.settings.default_link_target) {
+        self.data.target = self.tiny.settings.default_link_target;
+      }
+
+      if ((value = self.tiny.dom.getAttrib(self.anchorElm, 'rel'))) {
+        self.data.rel = value;
+      }
+
+      if ((value = self.tiny.dom.getAttrib(self.anchorElm, 'class'))) {
+        self.data['class'] = value;
+      }
+
+      if ((value = self.tiny.dom.getAttrib(self.anchorElm, 'title'))) {
+        self.data.title = value;
+      }
+
       self.modal = registry.patterns['plone-modal'].init(self.$el, {
         html: self.generateModalHtml(),
         content: null,
@@ -415,6 +450,32 @@ define([
       });
     },
 
+    isOnlyTextSelected: function() {
+      /* pulled from TinyMCE link plugin */
+      var html = this.tiny.selection.getContent();
+
+      // Partial html and not a fully selected anchor element
+      if (/</.test(html) && (!/^<a [^>]+>[^<]+<\/a>$/.test(html) || html.indexOf('href=') === -1)) {
+        return false;
+      }
+
+      if (this.anchorElm) {
+        var nodes = this.anchorElm.childNodes, i;
+
+        if (nodes.length === 0) {
+          return false;
+        }
+
+        for (var ii = nodes.length - 1; ii >= 0; ii--) {
+          if (nodes[ii].nodeType !== 3) {
+            return false;
+          }
+        }
+      }
+
+      return true;
+    },
+
     generateModalHtml: function() {
       return this.template({
         options: this.options,
@@ -483,15 +544,41 @@ define([
 
     updateAnchor: function(href) {
       var self = this;
+
+      self.tiny.focus();
+      self.tiny.selection.setRng(self.rng);
+
       var target = self.$target.val();
       var title = self.$title.val();
-      var data = $.extend(true, {}, {
+      var linkAttrs = $.extend(true, self.data, {
         title: title ? title : null,
         target: target ? target : null,
         'data-linkType': self.linkType,
         href: href
       }, self.linkTypes[self.linkType].attributes());
-      self.tiny.execCommand('mceInsertLink', false, data);
+      if (self.anchorElm) {
+
+        if (self.onlyText && linkAttrs.text !== self.initialText) {
+          if ("innerText" in self.anchorElm) {
+            self.anchorElm.innerText = self.data.text;
+          } else {
+            self.anchorElm.textContent = self.data.text;
+          }
+        }
+
+        self.tiny.dom.setAttribs(self.anchorElm, linkAttrs);
+
+        self.tiny.selection.select(self.anchorElm);
+        self.tiny.undoManager.add();
+      } else {
+        if (self.onlyText) {
+          self.tiny.insertContent(
+            self.tiny.dom.createHTML('a', linkAttrs,
+                                     self.tiny.dom.encode(self.data.text)));
+        } else {
+          self.tiny.execCommand('mceInsertLink', false, linkAttrs);
+        }
+      }
     },
 
     focusElement: function(elm) {
@@ -503,6 +590,10 @@ define([
     updateImage: function(src) {
       var self = this;
       var title = self.$title.val();
+
+      self.tiny.focus();
+      self.tiny.selection.setRng(self.rng);
+
       var data = $.extend(true, {}, {
         src: src,
         title: title ? title : null,
@@ -567,30 +658,31 @@ define([
         self.linkType = self.modal.$modal.find('fieldset.active').data('linktype');
 
         if(self.linkType === 'uploadImage' || self.linkType === 'upload'){
-            var patUpload = self.$upload.data().patternUpload;
-            if(patUpload.dropzone.files.length > 0){
-                patUpload.processUpload();
-                self.$upload.on('uploadAllCompleted', function(evt, data) {
-                    var counter = 0;
-                    var checkUpload = function(){
-                        if(counter < 5 && !self.linkTypes[self.linkType].value()){
-                            counter += 1;
-                            setTimeout(checkUpload, 100);
-                            return
-                        }else{
-                            var href = self.getLinkUrl();
-                            self.updateImage(href);
-                            self.hide();
-                        }
-                    }
-                    checkUpload();
-                });
-            }
+          var patUpload = self.$upload.data().patternUpload;
+          if(patUpload.dropzone.files.length > 0){
+            patUpload.processUpload();
+            self.$upload.on('uploadAllCompleted', function(evt, data) {
+              var counter = 0;
+              var checkUpload = function(){
+                if(counter < 5 && !self.linkTypes[self.linkType].value()){
+                  counter += 1;
+                  setTimeout(checkUpload, 100);
+                  return;
+                }else{
+                  var href = self.getLinkUrl();
+                  self.updateImage(href);
+                  self.hide();
+                }
+              };
+              checkUpload();
+            });
+          }
         }
+        var href;
         try{
-            var href = self.getLinkUrl();
-        }catch(e){
-            return // just cut out if no url
+            href = self.getLinkUrl();
+        }catch(error){
+            return;  // just cut out if no url
         }
         if (!href) {
           return; // just cut out if no url
diff --git a/mockup/patterns/tinymce/pattern.js b/mockup/patterns/tinymce/pattern.js
index 14e9dfe..009e43d 100644
--- a/mockup/patterns/tinymce/pattern.js
+++ b/mockup/patterns/tinymce/pattern.js
@@ -401,7 +401,7 @@ define([
         if(tinyOptions.importcss_file_filter && tinyOptions.importcss_file_filter.indexOf(',') !== -1){
           // need a custom function to check now
           var files = tinyOptions.importcss_file_filter.split(',');
-          
+
           tinyOptions.importcss_file_filter = function(value) {
             for(var i=0; i<files.length; i++){
               if(value.indexOf(files[i]) !== -1){
@@ -412,6 +412,9 @@ define([
           };
         }
 
+        tinyOptions.plugins.push('link');
+        tinyOptions.toolbar += ' link';
+
         tinymce.init(tinyOptions);
         self.tiny = tinymce.get(self.tinyId);
 
diff --git a/mockup/tests/pattern-tinymce-test.js b/mockup/tests/pattern-tinymce-test.js
index 756ac31..5a208d1 100644
--- a/mockup/tests/pattern-tinymce-test.js
+++ b/mockup/tests/pattern-tinymce-test.js
@@ -316,7 +316,9 @@ define([
     it('test adds data attributes', function() {
       var pattern = createTinymce();
       pattern.tiny.setContent('<p>blah</p>');
+      pattern.tiny.selection.select(pattern.tiny.dom.getRoot().getElementsByTagName('p')[0]);
       pattern.addLinkClicked();
+
       pattern.linkModal.linkTypes.internal.getEl().select2('data', {
         UID: 'foobar',
         portal_type: 'Document',
@@ -324,7 +326,6 @@ define([
         path: '/foobar',
         getIcon: ''
       });
-      pattern.linkModal.focusElement(pattern.tiny.dom.getRoot().getElementsByTagName('p')[0]);
       pattern.linkModal.$button.trigger('click');
       expect(pattern.tiny.getContent()).to.contain('data-val="foobar"');
       expect(pattern.tiny.getContent()).to.contain('data-linktype="internal"');


Repository: mockup


Branch: refs/heads/master
Date: 2016-03-16T17:00:52-05:00
Author: Nathan Van Gheem (vangheem) <vangheem@gmail.com>
Commit: https://github.com/plone/mockup/commit/f8fb2519c45b784771cb181e4f7a872219208d6b

Merge pull request #644 from plone/fix-tinymce-inline-safari

Fix TinyMCE to work with Safari when using inline mode

Files changed:
M CHANGES.rst
M mockup/patterns/tinymce/js/links.js
M mockup/patterns/tinymce/pattern.js
M mockup/tests/pattern-tinymce-test.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 351d8a2..026e031 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -43,6 +43,9 @@ Fixes:
 
 - ``.jscs.json`` format fixes for newer jscs versions.
   [thet]
+- Fix TinyMCE to work with Safari when using inline mode. This fixes bug where Safari
+  would not work with mosaic
+  [vangheem]
 
 - Fix ``Makefile`` to use ``mockup/build`` instead of ``build``.
   [thet]
diff --git a/mockup/patterns/tinymce/js/links.js b/mockup/patterns/tinymce/js/links.js
index 24485bd..81cccda 100644
--- a/mockup/patterns/tinymce/js/links.js
+++ b/mockup/patterns/tinymce/js/links.js
@@ -41,7 +41,9 @@ define([
     },
 
     set: function(val) {
-      this.getEl().attr('value', val);
+      var $el = this.getEl();
+      $el.attr('value', val);
+      $el.val(val);
     },
 
     attributes: function() {
@@ -114,6 +116,7 @@ define([
       $el.removeData('pattern-relateditems'); // reset the pattern
       $el.parent().replaceWith($el);
       $el.attr('value', val);
+      $el.val(val);
       this.createRelatedItems();
     },
 
@@ -405,6 +408,38 @@ define([
       self.dom = self.tiny.dom;
       self.linkType = self.options.initialLinkType;
       self.linkTypes = {};
+
+      self.data = {};
+      // get selection BEFORE..
+      // This is pulled from TinyMCE link plugin
+      self.initialText = null;
+      var value;
+      self.rng = self.tiny.selection.getRng();
+      self.selectedElm = self.tiny.selection.getNode();
+      self.anchorElm = self.tiny.dom.getParent(self.selectedElm, 'a[href]');
+      self.onlyText = self.isOnlyTextSelected();
+
+      self.data.text = self.initialText = self.anchorElm ? (self.anchorElm.innerText || self.anchorElm.textContent) : self.tiny.selection.getContent({format: 'text'});
+      self.data.href = self.anchorElm ? self.tiny.dom.getAttrib(self.anchorElm, 'href') : '';
+
+      if (self.anchorElm) {
+        self.data.target = self.tiny.dom.getAttrib(self.anchorElm, 'target');
+      } else if (self.tiny.settings.default_link_target) {
+        self.data.target = self.tiny.settings.default_link_target;
+      }
+
+      if ((value = self.tiny.dom.getAttrib(self.anchorElm, 'rel'))) {
+        self.data.rel = value;
+      }
+
+      if ((value = self.tiny.dom.getAttrib(self.anchorElm, 'class'))) {
+        self.data['class'] = value;
+      }
+
+      if ((value = self.tiny.dom.getAttrib(self.anchorElm, 'title'))) {
+        self.data.title = value;
+      }
+
       self.modal = registry.patterns['plone-modal'].init(self.$el, {
         html: self.generateModalHtml(),
         content: null,
@@ -415,6 +450,32 @@ define([
       });
     },
 
+    isOnlyTextSelected: function() {
+      /* pulled from TinyMCE link plugin */
+      var html = this.tiny.selection.getContent();
+
+      // Partial html and not a fully selected anchor element
+      if (/</.test(html) && (!/^<a [^>]+>[^<]+<\/a>$/.test(html) || html.indexOf('href=') === -1)) {
+        return false;
+      }
+
+      if (this.anchorElm) {
+        var nodes = this.anchorElm.childNodes, i;
+
+        if (nodes.length === 0) {
+          return false;
+        }
+
+        for (var ii = nodes.length - 1; ii >= 0; ii--) {
+          if (nodes[ii].nodeType !== 3) {
+            return false;
+          }
+        }
+      }
+
+      return true;
+    },
+
     generateModalHtml: function() {
       return this.template({
         options: this.options,
@@ -483,15 +544,41 @@ define([
 
     updateAnchor: function(href) {
       var self = this;
+
+      self.tiny.focus();
+      self.tiny.selection.setRng(self.rng);
+
       var target = self.$target.val();
       var title = self.$title.val();
-      var data = $.extend(true, {}, {
+      var linkAttrs = $.extend(true, self.data, {
         title: title ? title : null,
         target: target ? target : null,
         'data-linkType': self.linkType,
         href: href
       }, self.linkTypes[self.linkType].attributes());
-      self.tiny.execCommand('mceInsertLink', false, data);
+      if (self.anchorElm) {
+
+        if (self.onlyText && linkAttrs.text !== self.initialText) {
+          if ("innerText" in self.anchorElm) {
+            self.anchorElm.innerText = self.data.text;
+          } else {
+            self.anchorElm.textContent = self.data.text;
+          }
+        }
+
+        self.tiny.dom.setAttribs(self.anchorElm, linkAttrs);
+
+        self.tiny.selection.select(self.anchorElm);
+        self.tiny.undoManager.add();
+      } else {
+        if (self.onlyText) {
+          self.tiny.insertContent(
+            self.tiny.dom.createHTML('a', linkAttrs,
+                                     self.tiny.dom.encode(self.data.text)));
+        } else {
+          self.tiny.execCommand('mceInsertLink', false, linkAttrs);
+        }
+      }
     },
 
     focusElement: function(elm) {
@@ -503,6 +590,10 @@ define([
     updateImage: function(src) {
       var self = this;
       var title = self.$title.val();
+
+      self.tiny.focus();
+      self.tiny.selection.setRng(self.rng);
+
       var data = $.extend(true, {}, {
         src: src,
         title: title ? title : null,
@@ -567,30 +658,31 @@ define([
         self.linkType = self.modal.$modal.find('fieldset.active').data('linktype');
 
         if(self.linkType === 'uploadImage' || self.linkType === 'upload'){
-            var patUpload = self.$upload.data().patternUpload;
-            if(patUpload.dropzone.files.length > 0){
-                patUpload.processUpload();
-                self.$upload.on('uploadAllCompleted', function(evt, data) {
-                    var counter = 0;
-                    var checkUpload = function(){
-                        if(counter < 5 && !self.linkTypes[self.linkType].value()){
-                            counter += 1;
-                            setTimeout(checkUpload, 100);
-                            return
-                        }else{
-                            var href = self.getLinkUrl();
-                            self.updateImage(href);
-                            self.hide();
-                        }
-                    }
-                    checkUpload();
-                });
-            }
+          var patUpload = self.$upload.data().patternUpload;
+          if(patUpload.dropzone.files.length > 0){
+            patUpload.processUpload();
+            self.$upload.on('uploadAllCompleted', function(evt, data) {
+              var counter = 0;
+              var checkUpload = function(){
+                if(counter < 5 && !self.linkTypes[self.linkType].value()){
+                  counter += 1;
+                  setTimeout(checkUpload, 100);
+                  return;
+                }else{
+                  var href = self.getLinkUrl();
+                  self.updateImage(href);
+                  self.hide();
+                }
+              };
+              checkUpload();
+            });
+          }
         }
+        var href;
         try{
-            var href = self.getLinkUrl();
-        }catch(e){
-            return // just cut out if no url
+            href = self.getLinkUrl();
+        }catch(error){
+            return;  // just cut out if no url
         }
         if (!href) {
           return; // just cut out if no url
diff --git a/mockup/patterns/tinymce/pattern.js b/mockup/patterns/tinymce/pattern.js
index 14e9dfe..009e43d 100644
--- a/mockup/patterns/tinymce/pattern.js
+++ b/mockup/patterns/tinymce/pattern.js
@@ -401,7 +401,7 @@ define([
         if(tinyOptions.importcss_file_filter && tinyOptions.importcss_file_filter.indexOf(',') !== -1){
           // need a custom function to check now
           var files = tinyOptions.importcss_file_filter.split(',');
-          
+
           tinyOptions.importcss_file_filter = function(value) {
             for(var i=0; i<files.length; i++){
               if(value.indexOf(files[i]) !== -1){
@@ -412,6 +412,9 @@ define([
           };
         }
 
+        tinyOptions.plugins.push('link');
+        tinyOptions.toolbar += ' link';
+
         tinymce.init(tinyOptions);
         self.tiny = tinymce.get(self.tinyId);
 
diff --git a/mockup/tests/pattern-tinymce-test.js b/mockup/tests/pattern-tinymce-test.js
index 756ac31..5a208d1 100644
--- a/mockup/tests/pattern-tinymce-test.js
+++ b/mockup/tests/pattern-tinymce-test.js
@@ -316,7 +316,9 @@ define([
     it('test adds data attributes', function() {
       var pattern = createTinymce();
       pattern.tiny.setContent('<p>blah</p>');
+      pattern.tiny.selection.select(pattern.tiny.dom.getRoot().getElementsByTagName('p')[0]);
       pattern.addLinkClicked();
+
       pattern.linkModal.linkTypes.internal.getEl().select2('data', {
         UID: 'foobar',
         portal_type: 'Document',
@@ -324,7 +326,6 @@ define([
         path: '/foobar',
         getIcon: ''
       });
-      pattern.linkModal.focusElement(pattern.tiny.dom.getRoot().getElementsByTagName('p')[0]);
       pattern.linkModal.$button.trigger('click');
       expect(pattern.tiny.getContent()).to.contain('data-val="foobar"');
       expect(pattern.tiny.getContent()).to.contain('data-linktype="internal"');


