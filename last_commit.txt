Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-15T17:42:48+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/c8ee296255da04bbe10f93bd84c4cbcd3885f86c

PEP 8, UTF 8 headers. reformatings

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/batching/__init__.py
M plone/batching/batch.py
M plone/batching/browser.py
M plone/batching/configure.zcml
M plone/batching/interfaces.py
M plone/batching/tests.py
M plone/batching/utils.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index adf9aec..e3d5fe6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- PEP 8, UTF 8 headers.
+  [thet]
 
 
 1.0.5 (2015-07-18)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/batching/__init__.py b/plone/batching/__init__.py
index d949e29..f075161 100644
--- a/plone/batching/__init__.py
+++ b/plone/batching/__init__.py
@@ -1,7 +1,7 @@
-from plone.batching.batch import Batch
-
+# -*- coding: utf-8 -*-
 from AccessControl import allow_class
 from AccessControl import allow_module
+from plone.batching.batch import Batch
 
 allow_module('plone.batching')
 allow_class(Batch)
diff --git a/plone/batching/batch.py b/plone/batching/batch.py
index da15cdc..833fa0d 100644
--- a/plone/batching/batch.py
+++ b/plone/batching/batch.py
@@ -1,8 +1,10 @@
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from plone.batching.interfaces import IBatch
-from plone.batching.utils import (
-    opt, calculate_leapback, calculate_leapforward, calculate_pagenumber)
+from plone.batching.utils import calculate_leapback
+from plone.batching.utils import calculate_leapforward
+from plone.batching.utils import calculate_pagenumber
+from plone.batching.utils import opt
+from zope.interface import implements
 
 
 class BaseBatch(object):
@@ -117,8 +119,14 @@ def next(self):
         """
         if self.end >= (self.last + self.pagesize):
             return None
-        return Batch(self._sequence, self._size, self.end - self.overlap,
-            0, self.orphan, self.overlap)
+        return Batch(
+            self._sequence,
+            self._size,
+            self.end - self.overlap,
+            0,
+            self.orphan,
+            self.overlap
+        )
 
     @property
     def previous(self):
@@ -126,16 +134,21 @@ def previous(self):
         """
         if not self.first:
             return None
-        return Batch(self._sequence, self._size,
-            self.first - self._size + self.overlap, 0, self.orphan,
-            self.overlap)
+        return Batch(
+            self._sequence,
+            self._size,
+            self.first - self._size + self.overlap,
+            0,
+            self.orphan,
+            self.overlap
+        )
 
     def __getitem__(self, index):
         """ Get item from batch
         """
         actual = getattr(self._sequence, 'actual_result_count', None)
         if (actual is not None and actual != len(self._sequence)
-            and index < self.length):
+                and index < self.length):
             # optmized batch that contains only the wanted items in the
             # sequence
             return self._sequence[index]
diff --git a/plone/batching/browser.py b/plone/batching/browser.py
index 9b79c07..d0e42a3 100644
--- a/plone/batching/browser.py
+++ b/plone/batching/browser.py
@@ -1,11 +1,14 @@
+# -*- coding: utf-8 -*-
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from ZTUtils import  make_query
+from ZTUtils import make_query
 
 BatchTemplate = ViewPageTemplateFile("batchnavigation.pt")
 BootstrapBatchTemplate = ViewPageTemplateFile("batchnavigation_bootstrap.pt")
 
+
 class BatchMacrosView(BrowserView):
+
     @property
     def macros(self):
         return self.template.macros
@@ -34,6 +37,7 @@ class BootstrapBatchView(BatchView):
 
 
 class PloneBatchView(BatchView):
+
     def make_link(self, pagenumber=None):
         form = self.request.form
         if self.batchformkeys:
@@ -44,8 +48,13 @@ def make_link(self, pagenumber=None):
             batchlinkparams = form.copy()
 
         start = max(pagenumber - 1, 0) * self.batch.pagesize
-        return '%s?%s' % (self.request.ACTUAL_URL, make_query(batchlinkparams,
-                         {self.batch.b_start_str: start}))
+        return "{0}{1}".format(
+            self.request.ACTUAL_URL,
+            make_query(
+                batchlinkparams,
+                {self.batch.b_start_str: start}
+            )
+        )
 
 
 class PloneBootstrapBatchView(BootstrapBatchView, PloneBatchView):
diff --git a/plone/batching/configure.zcml b/plone/batching/configure.zcml
index de1467b..c35317d 100644
--- a/plone/batching/configure.zcml
+++ b/plone/batching/configure.zcml
@@ -4,22 +4,22 @@
     xmlns:browser="http://namespaces.zope.org/browser"
     i18n_domain="plone">
 
-    <five:registerPackage package="." />
+  <five:registerPackage package="." />
 
-    <browser:page
-        name="batch_macros"
-        for="*"
-        permission="zope.Public"
-        class=".browser.BatchMacrosView"
-        template="batch_macros.pt"
-        />
+  <browser:page
+      name="batch_macros"
+      for="*"
+      class=".browser.BatchMacrosView"
+      template="batch_macros.pt"
+      permission="zope.Public"
+      />
 
-    <browser:page
-        name="batchnavigation"
-        for="*"
-        permission="zope.Public"
-        class=".browser.PloneBatchView"
-        template="batchnavigation.pt"
-        />
+  <browser:page
+      name="batchnavigation"
+      for="*"
+      class=".browser.PloneBatchView"
+      template="batchnavigation.pt"
+      permission="zope.Public"
+      />
 
 </configure>
diff --git a/plone/batching/interfaces.py b/plone/batching/interfaces.py
index 0ed1c5d..45b91bc 100644
--- a/plone/batching/interfaces.py
+++ b/plone/batching/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 import zope.schema
 
diff --git a/plone/batching/tests.py b/plone/batching/tests.py
index 8c9a42d..6d7667e 100644
--- a/plone/batching/tests.py
+++ b/plone/batching/tests.py
@@ -1,12 +1,19 @@
-from zope.component.testing import setUp, tearDown
-import unittest
+# -*- coding: utf-8 -*-
+from plone.batching.batch import BaseBatch
+from plone.batching.batch import QuantumBatch
+from plone.batching.browser import BatchMacrosView
+from plone.batching.browser import BatchView
+from plone.batching.browser import PloneBatchView
+from plone.batching.utils import calculate_leapback
+from plone.batching.utils import calculate_leapforward
+from plone.batching.utils import calculate_pagenumber
+from plone.batching.utils import calculate_pagerange
+from plone.batching.utils import calculate_quantum_leap_gap
+from plone.batching.utils import opt
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 import doctest
-
-from plone.batching.batch import BaseBatch, QuantumBatch
-from plone.batching.browser import BatchMacrosView, BatchView, PloneBatchView
-from plone.batching.utils import (
-    calculate_pagenumber, calculate_pagerange, opt, calculate_quantum_leap_gap,
-    calculate_leapback, calculate_leapforward)
+import unittest
 
 
 class TestUtilsOpt(unittest.TestCase):
diff --git a/plone/batching/utils.py b/plone/batching/utils.py
index 82446fa..4d6546b 100644
--- a/plone/batching/utils.py
+++ b/plone/batching/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 def opt(start, end, size, orphan, sequence_length):
     """ Calculate start, end, batchsize
     """
@@ -62,8 +63,11 @@ def calculate_leapback(pagenumber, numpages, pagerange):
     if num_back_leaps:
         pagerange, pagerangestart, pagerangeend = calculate_pagerange(
             pagenumber, numpages, pagerange)
-        leapback = range(pagerangestart - num_back_leaps * quantum_leap_gap,
-            pagerangestart, quantum_leap_gap)
+        leapback = range(
+            pagerangestart - num_back_leaps * quantum_leap_gap,
+            pagerangestart,
+            quantum_leap_gap
+        )
     return leapback
 
 
@@ -77,7 +81,9 @@ def calculate_leapforward(pagenumber, numpages, pagerange):
     if num_forward_leaps:
         pagerange, pagerangestart, pagerangeend = calculate_pagerange(
             pagenumber, numpages, pagerange)
-        leapforward = range(pagerangeend - 1 + quantum_leap_gap,
+        leapforward = range(
+            pagerangeend - 1 + quantum_leap_gap,
             pagerangeend - 1 + (num_forward_leaps + 1) * quantum_leap_gap,
-            quantum_leap_gap)
+            quantum_leap_gap
+        )
     return leapforward
diff --git a/setup.py b/setup.py
index f748f79..429bf87 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,6 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '1.0.6.dev0'
 
@@ -6,10 +8,12 @@
     name='plone.batching',
     version=version,
     description="Batching facilities used in Plone.",
-    long_description=open("README.rst").read() + "\n" +
-                     open("CHANGES.rst").read() + "\n" +
-                     open("plone/batching/batching.rst").read() + "\n" +
-                     open("USAGE.rst").read(),
+    long_description=u'\n'.join([
+        open("README.rst").read(),
+        open("CHANGES.rst").read(),
+        open("plone/batching/batching.rst").read(),
+        open("USAGE.rst").read(),
+    ]),
     classifiers=[
         'Framework :: Plone :: 4.3',
         'Framework :: Zope2',
@@ -24,9 +28,11 @@
     namespace_packages=['plone'],
     include_package_data=True,
     zip_safe=False,
-    install_requires=['setuptools'],
-    entry_points='''
-          [z3c.autoinclude.plugin]
-          target = plone
-      ''',
+    install_requires=[
+        'setuptools'
+    ],
+    entry_points="""
+    [z3c.autoinclude.plugin]
+    target = plone
+    """,
 )


Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-16T00:40:31+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/1dd65897df9ceb72d134ea0e72ec44ce8b833e72

doctest formating

Files changed:
M USAGE.rst
M plone/batching/batching.rst

diff --git a/USAGE.rst b/USAGE.rst
index 17ff2f2..e6e1d9a 100644
--- a/USAGE.rst
+++ b/USAGE.rst
@@ -1,36 +1,36 @@
 A batch defined in plone.batching usually consists of two things:
 
- 1. A batch object. This is usually a wrapper for a sequence, which
-    provides slices of information
- #. A batch view. This is needed for display. It contains links to
-    navigate to the slices defined in 1.
+ 1. A batch object.
+    This is usually a wrapper for a sequence, which provides slices of information.
+
+ #. A batch view.
+    This is needed for display.
+    It contains links to navigate to the slices defined in 1.
 
 Both elements can be defined and accessed in Python code AND pagetemplates.
 
 Batch navigation in templates
 -----------------------------
 
-For the use of batching features in Page Templates *plone.batching*
-the first thing you have to do is to create a sequence batch and put
-it in a template variable named *batch*.
-You should do this in a view class if possible ::
+For the use of batching features in Page Templates *plone.batching* the first thing you have to do is to create a sequence batch and put it in a template variable named *batch*.
+You should do this in a view class if possible::
 
   <div tal:define="batch view/batchresults;">
 
-or you can do it in the template itself if necessary  ::
+or you can do it in the template itself if necessary::
 
   <div tal:define="Batch python:modules['plone.batching'].Batch;
                    b_size python:30;b_start python:0;b_start request/b_start | b_start;
                    batch python:Batch(results, b_size, int(b_start), orphan=1);">
 
-For the navigation you add the following snippet to your template ::
+For the navigation you add the following snippet to your template::
 
  <tal:batchnavigation
      define="batchnavigation nocall:context/@@batchnavigation"
      replace="structure python:batchnavigation(batch)" />
 
-For backwards compatibility *plone.batching* provides a drop in metal macro
-*navigation* in the *batch_macros* template. Add it to the template like this::
+For backwards compatibility *plone.batching* provides a drop in metal macro *navigation* in the *batch_macros* template.
+Add it to the template like this::
 
  <div metal:use-macro="context/batch_macros/macros/navigation" />
 
@@ -38,26 +38,25 @@ For backwards compatibility *plone.batching* provides a drop in metal macro
 Usage in Python code
 --------------------
 
-A batch is instantiated like this: ::
+A batch is instantiated like this::
 
   >>> from plone.batching import Batch
   >>> batch = Batch(range(100), size=15, orphan=10)
 
-This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99]
-and one subbatch with the last 25 items (including 10 orphaned items).
-For a detailed description of available parameters for a batch
-look at the API of the BaseBatch class.
+This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99] and one subbatch with the last 25 items (including 10 orphaned items).
+For a detailed description of available parameters for a batch look at the API of the BaseBatch class.
 
-Another way to instaniate a batch is like this: ::
+Another way to instaniate a batch is like this::
 
   >>> batch = Batch.fromPagenumber(range(100), pagesize=15, pagenumber=1)
 
 This results in 6 batches with 15 items and one batch with the last 10 items.
-This way of creating a batch is meant as a short cut and does not support
-all the options the canonical constructor supports.
+This way of creating a batch is meant as a short cut and does not support all the options the canonical constructor supports.
+
+For big sequences there is another base class provided by the package: *QuantumBatch*.
+This batch generates quantum leaps for quicker navigation.
 
-For big sequences there is another base class provided by the package:
-*QuantumBatch*. This batch generates quantum leaps for quicker navigation. ::
+::
 
   >>> from plone.batching.batch import QuantumBatch
   >>> qb = QuantumBatch(range(1000), 10, start=500, quantumleap=1)
@@ -66,18 +65,16 @@ For big sequences there is another base class provided by the package:
   >>> qb.leapback
   [18, 33]
 
-It is possible to navigate the batch stored in the two attributes
-*leapback* and *leapforward* with 5 clicks.
+It is possible to navigate the batch stored in the two attributes *leapback* and *leapforward* with 5 clicks.
 
 Usage in Views
 --------------
 
-Plone.batching comes with a customizable batch View *batchnavigation* with
-the view class *BatchView*. The view comes with a template. All you have to
-do, if you want to customize it, is to override the make_link-method.
+Plone.batching comes with a customizable batch View *batchnavigation* with the view class *BatchView*.
+The view comes with a template.
+All you have to do, if you want to customize it, is to override the make_link-method.
 This method should return a string with the link to the given *pagenumber*.
-Here is an example from the folder_contents implementation in
-plone.app.content: ::
+Here is an example from the folder_contents implementation in plone.app.content::
 
   >>> from plone.batching.browser import BatchView
   >>> from ZTUtils import make_query
@@ -88,8 +85,9 @@ plone.app.content: ::
   ...         return '%s?%s' % (self.request.ACTUAL_URL,
   ...                 make_query(batchlinkparams, {'pagenumber': pagenumber}))
 
-One thing you have to keep in mind is to call the batch view with a batch as
-the first argument. ::
+One thing you have to keep in mind is to call the batch view with a batch as the first argument.
+
+::
 
   >>> class MyContentView(BrowserView):
   ...     def batch(self):
@@ -98,7 +96,9 @@ the first argument. ::
   ...     def batching(self):
   ...         return MyBatchView(self.context, self.request)(self.batch)
 
-Now you can use this in the template of your view. ::
+Now you can use this in the template of your view.
+
+::
 
    <div tal:replace="structure view/batching" />
 
diff --git a/plone/batching/batching.rst b/plone/batching/batching.rst
index ea2a38a..e76932b 100644
--- a/plone/batching/batching.rst
+++ b/plone/batching/batching.rst
@@ -1,12 +1,13 @@
 Batching
 ========
 
-Batching is the mechanism with which you split up a large dataset over multiple
-pages. The batching implementation discussed here has many features to help
-with constructing templates.
+Batching is the mechanism with which you split up a large dataset over multiple pages.
+The batching implementation discussed here has many features to help with constructing templates.
 
 A basic batch is created using a few paramenters.
 
+::
+
   >>> from plone.batching.batch import Batch
   >>> batch = Batch.fromPagenumber(
   ... items=range(333), pagesize=10, pagenumber=1, navlistsize=5)
@@ -15,13 +16,18 @@ A basic batch is created using a few paramenters.
 Items on page
 -------------
 
-The batch is iterable. It will only return the items for the current page.
+The batch is iterable.
+It will only return the items for the current page.
+
+::
 
  >>> list(batch)
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 
 If we change to a different page it will change the result set to that page.
 
+::
+
   >>> batch.pagenumber = 3
   >>> list(batch)
   [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
@@ -29,28 +35,39 @@ If we change to a different page it will change the result set to that page.
 Batch size
 ----------
 
-We can ask a batch for its size using two different methods. The first is to use the normal Python style.
+We can ask a batch for its size using two different methods.
+The first is to use the normal Python style.
+
+::
 
   >>> len(batch)
   333
 
 The other is more convenient for use with template.
 
+::
+
   >>> batch.sequence_length
   333
 
 It is also possible to ask for the items on the current page.
 
+::
+
   >>> batch.items_on_page
   10
 
-We can get the number of pages in a batch. This is actually the same as requesting the number of the last page.
+We can get the number of pages in a batch.
+This is actually the same as requesting the number of the last page.
+
+::
 
   >>> batch.lastpage
   34
 
-If we switch to this page the `items_on_page` attribute should be different
-(because our items are indivisible by ten).
+If we switch to this page the `items_on_page` attribute should be different (because our items are indivisible by ten).
+
+::
 
   >>> batch.pagenumber = batch.lastpage
   >>> batch.items_on_page
@@ -59,11 +76,12 @@ If we switch to this page the `items_on_page` attribute should be different
 Navigation
 ----------
 
-Because the batch implementation is geared towards templates it also provides a
-few navigation related methods.
+Because the batch implementation is geared towards templates it also provides a few navigation related methods.
 
 The first thing we can check is whether our batch spans over multiple pages.
 
+::
+
   >>> batch = Batch.fromPagenumber(
   ...          items=range(333), pagesize=10, navlistsize=5)
   >>> batch.multiple_pages
@@ -76,6 +94,8 @@ The first thing we can check is whether our batch spans over multiple pages.
 
 It will also do simple math for giving the next and previous page numbers.
 
+::
+
   >>> batch.nextpage
   2
 
@@ -85,6 +105,8 @@ It will also do simple math for giving the next and previous page numbers.
 
 We can also ask if there are any next or previous pages.
 
+::
+
   >>> batch.has_next
   True
 
@@ -99,15 +121,19 @@ We can also ask if there are any next or previous pages.
   >>> batch.has_previous
   False
 
-You might want to display the next item count. This can be usefull in case the
-batch is not exactly divisible by the pagesize.
+You might want to display the next item count.
+This can be usefull in case the batch is not exactly divisible by the pagesize.
+
+::
 
   >>> batch.pagenumber = batch.lastpage - 1
   >>> batch.next_item_count
   3
 
-The system maintains a navigation list as well. This is normally used to
-display numbers at the bottom of the screen for quick access to those pages.
+The system maintains a navigation list as well.
+This is normally used to display numbers at the bottom of the screen for quick access to those pages.
+
+::
 
   >>> batch.pagenumber = 1
   >>> batch.navlist
@@ -115,27 +141,33 @@ display numbers at the bottom of the screen for quick access to those pages.
 
 Keep in mind that the navlist centers around the current page when it can.
 
+::
+
   >>> batch.pagenumber = 10
   >>> batch.navlist
   [8, 9, 10, 11, 12]
 
 You can specify the navlist size to be any size you want.
 
+::
+
   >>> other_batch = Batch.fromPagenumber(items=range(333), pagesize=10, pagenumber=10,
   ...                     navlistsize=12)
   >>> other_batch.navlist
   [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 
-We have already seen the `lastpage` property. There is also the equivalent
-`firstpage` property.
+We have already seen the `lastpage` property.
+There is also the equivalent `firstpage` property.
+
+::
 
   >>> batch.firstpage
   1
 
-Normally you would want to provide your users with a quick way to jump the the
-first or last page from anywhere in the batch. To make sure you will not show
-the links twice (once in the navlist and once for quick access) you can use the
-special helpers.
+Normally you would want to provide your users with a quick way to jump the the first or last page from anywhere in the batch.
+To make sure you will not show the links twice (once in the navlist and once for quick access) you can use the special helpers.
+
+::
 
   >>> batch.pagenumber = 1
   >>> batch.show_link_to_first
@@ -153,8 +185,9 @@ special helpers.
   >>> batch.show_link_to_last
   False
 
-For extra visual smoothness you might also want to display an elipses next to
-your quicklink to the first page.
+For extra visual smoothness you might also want to display an elipses next to your quicklink to the first page.
+
+::
 
   >>> batch.pagenumber = 15
   >>> batch.second_page_not_in_navlist
@@ -162,6 +195,8 @@ your quicklink to the first page.
 
 This should only be done in case the second page is not in the navigation list.
 
+::
+
   >>> batch.pagenumber = 4
   >>> batch.navlist
   [2, 3, 4, 5, 6]
@@ -170,6 +205,8 @@ This should only be done in case the second page is not in the navigation list.
 
 The same goes for the showing an elipses before the last link.
 
+::
+
   >>> batch.pagenumber = 15
   >>> batch.before_last_page_not_in_navlist
   True
@@ -178,8 +215,9 @@ The same goes for the showing an elipses before the last link.
   >>> batch.before_last_page_not_in_navlist
   False
 
-To make displaying the links to next and previous pages even easier you can
-also get two seperate navlist for both of them.
+To make displaying the links to next and previous pages even easier you can also get two seperate navlist for both of them.
+
+::
 
   >>> batch.pagenumber = 1
   >>> batch.next_pages
@@ -197,3 +235,4 @@ also get two seperate navlist for both of them.
   >>> batch.pagenumber = batch.firstpage + 1
   >>> batch.previous_pages
   [1]
+


Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-16T00:45:55+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/60ee288634ce202f78d624ac7a8345251822100f

fix broken through cleanup

Files changed:
M plone/batching/browser.py

diff --git a/plone/batching/browser.py b/plone/batching/browser.py
index d0e42a3..13a007e 100644
--- a/plone/batching/browser.py
+++ b/plone/batching/browser.py
@@ -48,7 +48,7 @@ def make_link(self, pagenumber=None):
             batchlinkparams = form.copy()
 
         start = max(pagenumber - 1, 0) * self.batch.pagesize
-        return "{0}{1}".format(
+        return "{0}?{1}".format(
             self.request.ACTUAL_URL,
             make_query(
                 batchlinkparams,


Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-16T00:46:09+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/7d271955292fad02569fe51472779494b79d08d6

add USAGE.rst to tests and fix it

Files changed:
M USAGE.rst
M plone/batching/tests.py

diff --git a/USAGE.rst b/USAGE.rst
index e6e1d9a..6e89303 100644
--- a/USAGE.rst
+++ b/USAGE.rst
@@ -89,6 +89,7 @@ One thing you have to keep in mind is to call the batch view with a batch as the
 
 ::
 
+  >>> from Products.Five import BrowserView
   >>> class MyContentView(BrowserView):
   ...     def batch(self):
   ...         " "  # see above how a batch is defined
diff --git a/plone/batching/tests.py b/plone/batching/tests.py
index 6d7667e..4a388f8 100644
--- a/plone/batching/tests.py
+++ b/plone/batching/tests.py
@@ -233,5 +233,11 @@ def test_suite():
                              optionflags=doctest.ELLIPSIS |
                              doctest.REPORT_ONLY_FIRST_FAILURE,
                              setUp=setUp, tearDown=tearDown),
+        doctest.DocFileSuite('../../USAGE.rst',
+                             package='plone.batching',
+                             optionflags=doctest.ELLIPSIS |
+                             doctest.REPORT_ONLY_FIRST_FAILURE,
+                             setUp=setUp, tearDown=tearDown),
+
     ])
     return suite


Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-16T00:48:37+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/edc8488536688f497ff8b63434a95590d066e4f9

move usage.rst to plone/batching

Files changed:
A plone/batching/usage.rst
M plone/batching/tests.py
M setup.py
D USAGE.rst

diff --git a/USAGE.rst b/USAGE.rst
deleted file mode 100644
index 6e89303..0000000
--- a/USAGE.rst
+++ /dev/null
@@ -1,110 +0,0 @@
-A batch defined in plone.batching usually consists of two things:
-
- 1. A batch object.
-    This is usually a wrapper for a sequence, which provides slices of information.
-
- #. A batch view.
-    This is needed for display.
-    It contains links to navigate to the slices defined in 1.
-
-Both elements can be defined and accessed in Python code AND pagetemplates.
-
-Batch navigation in templates
------------------------------
-
-For the use of batching features in Page Templates *plone.batching* the first thing you have to do is to create a sequence batch and put it in a template variable named *batch*.
-You should do this in a view class if possible::
-
-  <div tal:define="batch view/batchresults;">
-
-or you can do it in the template itself if necessary::
-
-  <div tal:define="Batch python:modules['plone.batching'].Batch;
-                   b_size python:30;b_start python:0;b_start request/b_start | b_start;
-                   batch python:Batch(results, b_size, int(b_start), orphan=1);">
-
-For the navigation you add the following snippet to your template::
-
- <tal:batchnavigation
-     define="batchnavigation nocall:context/@@batchnavigation"
-     replace="structure python:batchnavigation(batch)" />
-
-For backwards compatibility *plone.batching* provides a drop in metal macro *navigation* in the *batch_macros* template.
-Add it to the template like this::
-
- <div metal:use-macro="context/batch_macros/macros/navigation" />
-
-
-Usage in Python code
---------------------
-
-A batch is instantiated like this::
-
-  >>> from plone.batching import Batch
-  >>> batch = Batch(range(100), size=15, orphan=10)
-
-This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99] and one subbatch with the last 25 items (including 10 orphaned items).
-For a detailed description of available parameters for a batch look at the API of the BaseBatch class.
-
-Another way to instaniate a batch is like this::
-
-  >>> batch = Batch.fromPagenumber(range(100), pagesize=15, pagenumber=1)
-
-This results in 6 batches with 15 items and one batch with the last 10 items.
-This way of creating a batch is meant as a short cut and does not support all the options the canonical constructor supports.
-
-For big sequences there is another base class provided by the package: *QuantumBatch*.
-This batch generates quantum leaps for quicker navigation.
-
-::
-
-  >>> from plone.batching.batch import QuantumBatch
-  >>> qb = QuantumBatch(range(1000), 10, start=500, quantumleap=1)
-  >>> qb.leapforward
-  [69, 84]
-  >>> qb.leapback
-  [18, 33]
-
-It is possible to navigate the batch stored in the two attributes *leapback* and *leapforward* with 5 clicks.
-
-Usage in Views
---------------
-
-Plone.batching comes with a customizable batch View *batchnavigation* with the view class *BatchView*.
-The view comes with a template.
-All you have to do, if you want to customize it, is to override the make_link-method.
-This method should return a string with the link to the given *pagenumber*.
-Here is an example from the folder_contents implementation in plone.app.content::
-
-  >>> from plone.batching.browser import BatchView
-  >>> from ZTUtils import make_query
-
-  >>> class MyBatchView(BatchView):
-  ...     def make_link(self, pagenumber):
-  ...         batchlinkparams = self.request.form.copy()
-  ...         return '%s?%s' % (self.request.ACTUAL_URL,
-  ...                 make_query(batchlinkparams, {'pagenumber': pagenumber}))
-
-One thing you have to keep in mind is to call the batch view with a batch as the first argument.
-
-::
-
-  >>> from Products.Five import BrowserView
-  >>> class MyContentView(BrowserView):
-  ...     def batch(self):
-  ...         " "  # see above how a batch is defined
-  ...
-  ...     def batching(self):
-  ...         return MyBatchView(self.context, self.request)(self.batch)
-
-Now you can use this in the template of your view.
-
-::
-
-   <div tal:replace="structure view/batching" />
-
-Incompatibilities
------------------
-
-XXX __len__ method
-
diff --git a/plone/batching/tests.py b/plone/batching/tests.py
index 4a388f8..3475012 100644
--- a/plone/batching/tests.py
+++ b/plone/batching/tests.py
@@ -233,7 +233,7 @@ def test_suite():
                              optionflags=doctest.ELLIPSIS |
                              doctest.REPORT_ONLY_FIRST_FAILURE,
                              setUp=setUp, tearDown=tearDown),
-        doctest.DocFileSuite('../../USAGE.rst',
+        doctest.DocFileSuite('usage.rst',
                              package='plone.batching',
                              optionflags=doctest.ELLIPSIS |
                              doctest.REPORT_ONLY_FIRST_FAILURE,
diff --git a/plone/batching/usage.rst b/plone/batching/usage.rst
new file mode 100644
index 0000000..6e89303
--- /dev/null
+++ b/plone/batching/usage.rst
@@ -0,0 +1,110 @@
+A batch defined in plone.batching usually consists of two things:
+
+ 1. A batch object.
+    This is usually a wrapper for a sequence, which provides slices of information.
+
+ #. A batch view.
+    This is needed for display.
+    It contains links to navigate to the slices defined in 1.
+
+Both elements can be defined and accessed in Python code AND pagetemplates.
+
+Batch navigation in templates
+-----------------------------
+
+For the use of batching features in Page Templates *plone.batching* the first thing you have to do is to create a sequence batch and put it in a template variable named *batch*.
+You should do this in a view class if possible::
+
+  <div tal:define="batch view/batchresults;">
+
+or you can do it in the template itself if necessary::
+
+  <div tal:define="Batch python:modules['plone.batching'].Batch;
+                   b_size python:30;b_start python:0;b_start request/b_start | b_start;
+                   batch python:Batch(results, b_size, int(b_start), orphan=1);">
+
+For the navigation you add the following snippet to your template::
+
+ <tal:batchnavigation
+     define="batchnavigation nocall:context/@@batchnavigation"
+     replace="structure python:batchnavigation(batch)" />
+
+For backwards compatibility *plone.batching* provides a drop in metal macro *navigation* in the *batch_macros* template.
+Add it to the template like this::
+
+ <div metal:use-macro="context/batch_macros/macros/navigation" />
+
+
+Usage in Python code
+--------------------
+
+A batch is instantiated like this::
+
+  >>> from plone.batching import Batch
+  >>> batch = Batch(range(100), size=15, orphan=10)
+
+This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99] and one subbatch with the last 25 items (including 10 orphaned items).
+For a detailed description of available parameters for a batch look at the API of the BaseBatch class.
+
+Another way to instaniate a batch is like this::
+
+  >>> batch = Batch.fromPagenumber(range(100), pagesize=15, pagenumber=1)
+
+This results in 6 batches with 15 items and one batch with the last 10 items.
+This way of creating a batch is meant as a short cut and does not support all the options the canonical constructor supports.
+
+For big sequences there is another base class provided by the package: *QuantumBatch*.
+This batch generates quantum leaps for quicker navigation.
+
+::
+
+  >>> from plone.batching.batch import QuantumBatch
+  >>> qb = QuantumBatch(range(1000), 10, start=500, quantumleap=1)
+  >>> qb.leapforward
+  [69, 84]
+  >>> qb.leapback
+  [18, 33]
+
+It is possible to navigate the batch stored in the two attributes *leapback* and *leapforward* with 5 clicks.
+
+Usage in Views
+--------------
+
+Plone.batching comes with a customizable batch View *batchnavigation* with the view class *BatchView*.
+The view comes with a template.
+All you have to do, if you want to customize it, is to override the make_link-method.
+This method should return a string with the link to the given *pagenumber*.
+Here is an example from the folder_contents implementation in plone.app.content::
+
+  >>> from plone.batching.browser import BatchView
+  >>> from ZTUtils import make_query
+
+  >>> class MyBatchView(BatchView):
+  ...     def make_link(self, pagenumber):
+  ...         batchlinkparams = self.request.form.copy()
+  ...         return '%s?%s' % (self.request.ACTUAL_URL,
+  ...                 make_query(batchlinkparams, {'pagenumber': pagenumber}))
+
+One thing you have to keep in mind is to call the batch view with a batch as the first argument.
+
+::
+
+  >>> from Products.Five import BrowserView
+  >>> class MyContentView(BrowserView):
+  ...     def batch(self):
+  ...         " "  # see above how a batch is defined
+  ...
+  ...     def batching(self):
+  ...         return MyBatchView(self.context, self.request)(self.batch)
+
+Now you can use this in the template of your view.
+
+::
+
+   <div tal:replace="structure view/batching" />
+
+Incompatibilities
+-----------------
+
+XXX __len__ method
+
diff --git a/setup.py b/setup.py
index 429bf87..93940d5 100644
--- a/setup.py
+++ b/setup.py
@@ -12,7 +12,7 @@
         open("README.rst").read(),
         open("CHANGES.rst").read(),
         open("plone/batching/batching.rst").read(),
-        open("USAGE.rst").read(),
+        open("plone/batching/usage.rst").read(),
     ]),
     classifiers=[
         'Framework :: Plone :: 4.3',


Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-16T00:53:02+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/8240c74933570f1e51efd474659f067a55f91311

docs/index, heading for usage

Files changed:
A docs/index.rst
M plone/batching/usage.rst

diff --git a/docs/index.rst b/docs/index.rst
new file mode 100644
index 0000000..f4ca0ab
--- /dev/null
+++ b/docs/index.rst
@@ -0,0 +1,12 @@
+==============
+plone.batching
+==============
+
+Documentation for plone.batching.
+
+.. toctree::
+    :maxdepth: 2
+
+    ../plone/batching/batching.rst
+    ../plone/batching/usage.rst
+
diff --git a/plone/batching/usage.rst b/plone/batching/usage.rst
index 6e89303..f19e0dd 100644
--- a/plone/batching/usage.rst
+++ b/plone/batching/usage.rst
@@ -1,3 +1,6 @@
+Usage
+=====
+
 A batch defined in plone.batching usually consists of two things:
 
  1. A batch object.


Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-21T13:26:57+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.batching/commit/f701e057d3fa1818f8398366493bb066a54e7802

re-move usage.rst to docs folder

Files changed:
A docs/usage.rst
M CHANGES.rst
M docs/index.rst
M plone/batching/tests.py
M setup.py
D plone/batching/usage.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index e3d5fe6..82324e8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ New:
 
 Fixes:
 
-- PEP 8, UTF 8 headers.
+- PEP 8, UTF 8 headers, docs cleanup.
   [thet]
 
 
diff --git a/docs/index.rst b/docs/index.rst
index f4ca0ab..f53022c 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -7,6 +7,5 @@ Documentation for plone.batching.
 .. toctree::
     :maxdepth: 2
 
-    ../plone/batching/batching.rst
-    ../plone/batching/usage.rst
+    usage.rst
 
diff --git a/docs/usage.rst b/docs/usage.rst
new file mode 100644
index 0000000..f19e0dd
--- /dev/null
+++ b/docs/usage.rst
@@ -0,0 +1,113 @@
+Usage
+=====
+
+A batch defined in plone.batching usually consists of two things:
+
+ 1. A batch object.
+    This is usually a wrapper for a sequence, which provides slices of information.
+
+ #. A batch view.
+    This is needed for display.
+    It contains links to navigate to the slices defined in 1.
+
+Both elements can be defined and accessed in Python code AND pagetemplates.
+
+Batch navigation in templates
+-----------------------------
+
+For the use of batching features in Page Templates *plone.batching* the first thing you have to do is to create a sequence batch and put it in a template variable named *batch*.
+You should do this in a view class if possible::
+
+  <div tal:define="batch view/batchresults;">
+
+or you can do it in the template itself if necessary::
+
+  <div tal:define="Batch python:modules['plone.batching'].Batch;
+                   b_size python:30;b_start python:0;b_start request/b_start | b_start;
+                   batch python:Batch(results, b_size, int(b_start), orphan=1);">
+
+For the navigation you add the following snippet to your template::
+
+ <tal:batchnavigation
+     define="batchnavigation nocall:context/@@batchnavigation"
+     replace="structure python:batchnavigation(batch)" />
+
+For backwards compatibility *plone.batching* provides a drop in metal macro *navigation* in the *batch_macros* template.
+Add it to the template like this::
+
+ <div metal:use-macro="context/batch_macros/macros/navigation" />
+
+
+Usage in Python code
+--------------------
+
+A batch is instantiated like this::
+
+  >>> from plone.batching import Batch
+  >>> batch = Batch(range(100), size=15, orphan=10)
+
+This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99] and one subbatch with the last 25 items (including 10 orphaned items).
+For a detailed description of available parameters for a batch look at the API of the BaseBatch class.
+
+Another way to instaniate a batch is like this::
+
+  >>> batch = Batch.fromPagenumber(range(100), pagesize=15, pagenumber=1)
+
+This results in 6 batches with 15 items and one batch with the last 10 items.
+This way of creating a batch is meant as a short cut and does not support all the options the canonical constructor supports.
+
+For big sequences there is another base class provided by the package: *QuantumBatch*.
+This batch generates quantum leaps for quicker navigation.
+
+::
+
+  >>> from plone.batching.batch import QuantumBatch
+  >>> qb = QuantumBatch(range(1000), 10, start=500, quantumleap=1)
+  >>> qb.leapforward
+  [69, 84]
+  >>> qb.leapback
+  [18, 33]
+
+It is possible to navigate the batch stored in the two attributes *leapback* and *leapforward* with 5 clicks.
+
+Usage in Views
+--------------
+
+Plone.batching comes with a customizable batch View *batchnavigation* with the view class *BatchView*.
+The view comes with a template.
+All you have to do, if you want to customize it, is to override the make_link-method.
+This method should return a string with the link to the given *pagenumber*.
+Here is an example from the folder_contents implementation in plone.app.content::
+
+  >>> from plone.batching.browser import BatchView
+  >>> from ZTUtils import make_query
+
+  >>> class MyBatchView(BatchView):
+  ...     def make_link(self, pagenumber):
+  ...         batchlinkparams = self.request.form.copy()
+  ...         return '%s?%s' % (self.request.ACTUAL_URL,
+  ...                 make_query(batchlinkparams, {'pagenumber': pagenumber}))
+
+One thing you have to keep in mind is to call the batch view with a batch as the first argument.
+
+::
+
+  >>> from Products.Five import BrowserView
+  >>> class MyContentView(BrowserView):
+  ...     def batch(self):
+  ...         " "  # see above how a batch is defined
+  ...
+  ...     def batching(self):
+  ...         return MyBatchView(self.context, self.request)(self.batch)
+
+Now you can use this in the template of your view.
+
+::
+
+   <div tal:replace="structure view/batching" />
+
+Incompatibilities
+-----------------
+
+XXX __len__ method
+
diff --git a/plone/batching/tests.py b/plone/batching/tests.py
index 3475012..aabc749 100644
--- a/plone/batching/tests.py
+++ b/plone/batching/tests.py
@@ -233,7 +233,7 @@ def test_suite():
                              optionflags=doctest.ELLIPSIS |
                              doctest.REPORT_ONLY_FIRST_FAILURE,
                              setUp=setUp, tearDown=tearDown),
-        doctest.DocFileSuite('usage.rst',
+        doctest.DocFileSuite('../../docs/usage.rst',
                              package='plone.batching',
                              optionflags=doctest.ELLIPSIS |
                              doctest.REPORT_ONLY_FIRST_FAILURE,
diff --git a/plone/batching/usage.rst b/plone/batching/usage.rst
deleted file mode 100644
index f19e0dd..0000000
--- a/plone/batching/usage.rst
+++ /dev/null
@@ -1,113 +0,0 @@
-Usage
-=====
-
-A batch defined in plone.batching usually consists of two things:
-
- 1. A batch object.
-    This is usually a wrapper for a sequence, which provides slices of information.
-
- #. A batch view.
-    This is needed for display.
-    It contains links to navigate to the slices defined in 1.
-
-Both elements can be defined and accessed in Python code AND pagetemplates.
-
-Batch navigation in templates
------------------------------
-
-For the use of batching features in Page Templates *plone.batching* the first thing you have to do is to create a sequence batch and put it in a template variable named *batch*.
-You should do this in a view class if possible::
-
-  <div tal:define="batch view/batchresults;">
-
-or you can do it in the template itself if necessary::
-
-  <div tal:define="Batch python:modules['plone.batching'].Batch;
-                   b_size python:30;b_start python:0;b_start request/b_start | b_start;
-                   batch python:Batch(results, b_size, int(b_start), orphan=1);">
-
-For the navigation you add the following snippet to your template::
-
- <tal:batchnavigation
-     define="batchnavigation nocall:context/@@batchnavigation"
-     replace="structure python:batchnavigation(batch)" />
-
-For backwards compatibility *plone.batching* provides a drop in metal macro *navigation* in the *batch_macros* template.
-Add it to the template like this::
-
- <div metal:use-macro="context/batch_macros/macros/navigation" />
-
-
-Usage in Python code
---------------------
-
-A batch is instantiated like this::
-
-  >>> from plone.batching import Batch
-  >>> batch = Batch(range(100), size=15, orphan=10)
-
-This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99] and one subbatch with the last 25 items (including 10 orphaned items).
-For a detailed description of available parameters for a batch look at the API of the BaseBatch class.
-
-Another way to instaniate a batch is like this::
-
-  >>> batch = Batch.fromPagenumber(range(100), pagesize=15, pagenumber=1)
-
-This results in 6 batches with 15 items and one batch with the last 10 items.
-This way of creating a batch is meant as a short cut and does not support all the options the canonical constructor supports.
-
-For big sequences there is another base class provided by the package: *QuantumBatch*.
-This batch generates quantum leaps for quicker navigation.
-
-::
-
-  >>> from plone.batching.batch import QuantumBatch
-  >>> qb = QuantumBatch(range(1000), 10, start=500, quantumleap=1)
-  >>> qb.leapforward
-  [69, 84]
-  >>> qb.leapback
-  [18, 33]
-
-It is possible to navigate the batch stored in the two attributes *leapback* and *leapforward* with 5 clicks.
-
-Usage in Views
---------------
-
-Plone.batching comes with a customizable batch View *batchnavigation* with the view class *BatchView*.
-The view comes with a template.
-All you have to do, if you want to customize it, is to override the make_link-method.
-This method should return a string with the link to the given *pagenumber*.
-Here is an example from the folder_contents implementation in plone.app.content::
-
-  >>> from plone.batching.browser import BatchView
-  >>> from ZTUtils import make_query
-
-  >>> class MyBatchView(BatchView):
-  ...     def make_link(self, pagenumber):
-  ...         batchlinkparams = self.request.form.copy()
-  ...         return '%s?%s' % (self.request.ACTUAL_URL,
-  ...                 make_query(batchlinkparams, {'pagenumber': pagenumber}))
-
-One thing you have to keep in mind is to call the batch view with a batch as the first argument.
-
-::
-
-  >>> from Products.Five import BrowserView
-  >>> class MyContentView(BrowserView):
-  ...     def batch(self):
-  ...         " "  # see above how a batch is defined
-  ...
-  ...     def batching(self):
-  ...         return MyBatchView(self.context, self.request)(self.batch)
-
-Now you can use this in the template of your view.
-
-::
-
-   <div tal:replace="structure view/batching" />
-
-Incompatibilities
------------------
-
-XXX __len__ method
-
diff --git a/setup.py b/setup.py
index 93940d5..224771b 100644
--- a/setup.py
+++ b/setup.py
@@ -11,8 +11,7 @@
     long_description=u'\n'.join([
         open("README.rst").read(),
         open("CHANGES.rst").read(),
-        open("plone/batching/batching.rst").read(),
-        open("plone/batching/usage.rst").read(),
+        open("docs/usage.rst").read(),
     ]),
     classifiers=[
         'Framework :: Plone :: 4.3',


Repository: plone.batching


Branch: refs/heads/master
Date: 2015-12-22T15:38:56+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.batching/commit/ea556ae7b58d6ef0c9f014a7b4408d1e490fbd2b

Merge pull request #11 from plone/thet-reformat

doc reformat, pep8

Files changed:
A docs/index.rst
A docs/usage.rst
M CHANGES.rst
M plone/__init__.py
M plone/batching/__init__.py
M plone/batching/batch.py
M plone/batching/batching.rst
M plone/batching/browser.py
M plone/batching/configure.zcml
M plone/batching/interfaces.py
M plone/batching/tests.py
M plone/batching/utils.py
M setup.py
D USAGE.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index adf9aec..82324e8 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- PEP 8, UTF 8 headers, docs cleanup.
+  [thet]
 
 
 1.0.5 (2015-07-18)
diff --git a/USAGE.rst b/USAGE.rst
deleted file mode 100644
index 17ff2f2..0000000
--- a/USAGE.rst
+++ /dev/null
@@ -1,109 +0,0 @@
-A batch defined in plone.batching usually consists of two things:
-
- 1. A batch object. This is usually a wrapper for a sequence, which
-    provides slices of information
- #. A batch view. This is needed for display. It contains links to
-    navigate to the slices defined in 1.
-
-Both elements can be defined and accessed in Python code AND pagetemplates.
-
-Batch navigation in templates
------------------------------
-
-For the use of batching features in Page Templates *plone.batching*
-the first thing you have to do is to create a sequence batch and put
-it in a template variable named *batch*.
-You should do this in a view class if possible ::
-
-  <div tal:define="batch view/batchresults;">
-
-or you can do it in the template itself if necessary  ::
-
-  <div tal:define="Batch python:modules['plone.batching'].Batch;
-                   b_size python:30;b_start python:0;b_start request/b_start | b_start;
-                   batch python:Batch(results, b_size, int(b_start), orphan=1);">
-
-For the navigation you add the following snippet to your template ::
-
- <tal:batchnavigation
-     define="batchnavigation nocall:context/@@batchnavigation"
-     replace="structure python:batchnavigation(batch)" />
-
-For backwards compatibility *plone.batching* provides a drop in metal macro
-*navigation* in the *batch_macros* template. Add it to the template like this::
-
- <div metal:use-macro="context/batch_macros/macros/navigation" />
-
-
-Usage in Python code
---------------------
-
-A batch is instantiated like this: ::
-
-  >>> from plone.batching import Batch
-  >>> batch = Batch(range(100), size=15, orphan=10)
-
-This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99]
-and one subbatch with the last 25 items (including 10 orphaned items).
-For a detailed description of available parameters for a batch
-look at the API of the BaseBatch class.
-
-Another way to instaniate a batch is like this: ::
-
-  >>> batch = Batch.fromPagenumber(range(100), pagesize=15, pagenumber=1)
-
-This results in 6 batches with 15 items and one batch with the last 10 items.
-This way of creating a batch is meant as a short cut and does not support
-all the options the canonical constructor supports.
-
-For big sequences there is another base class provided by the package:
-*QuantumBatch*. This batch generates quantum leaps for quicker navigation. ::
-
-  >>> from plone.batching.batch import QuantumBatch
-  >>> qb = QuantumBatch(range(1000), 10, start=500, quantumleap=1)
-  >>> qb.leapforward
-  [69, 84]
-  >>> qb.leapback
-  [18, 33]
-
-It is possible to navigate the batch stored in the two attributes
-*leapback* and *leapforward* with 5 clicks.
-
-Usage in Views
---------------
-
-Plone.batching comes with a customizable batch View *batchnavigation* with
-the view class *BatchView*. The view comes with a template. All you have to
-do, if you want to customize it, is to override the make_link-method.
-This method should return a string with the link to the given *pagenumber*.
-Here is an example from the folder_contents implementation in
-plone.app.content: ::
-
-  >>> from plone.batching.browser import BatchView
-  >>> from ZTUtils import make_query
-
-  >>> class MyBatchView(BatchView):
-  ...     def make_link(self, pagenumber):
-  ...         batchlinkparams = self.request.form.copy()
-  ...         return '%s?%s' % (self.request.ACTUAL_URL,
-  ...                 make_query(batchlinkparams, {'pagenumber': pagenumber}))
-
-One thing you have to keep in mind is to call the batch view with a batch as
-the first argument. ::
-
-  >>> class MyContentView(BrowserView):
-  ...     def batch(self):
-  ...         " "  # see above how a batch is defined
-  ...
-  ...     def batching(self):
-  ...         return MyBatchView(self.context, self.request)(self.batch)
-
-Now you can use this in the template of your view. ::
-
-   <div tal:replace="structure view/batching" />
-
-Incompatibilities
------------------
-
-XXX __len__ method
-
diff --git a/docs/index.rst b/docs/index.rst
new file mode 100644
index 0000000..f53022c
--- /dev/null
+++ b/docs/index.rst
@@ -0,0 +1,11 @@
+==============
+plone.batching
+==============
+
+Documentation for plone.batching.
+
+.. toctree::
+    :maxdepth: 2
+
+    usage.rst
+
diff --git a/docs/usage.rst b/docs/usage.rst
new file mode 100644
index 0000000..f19e0dd
--- /dev/null
+++ b/docs/usage.rst
@@ -0,0 +1,113 @@
+Usage
+=====
+
+A batch defined in plone.batching usually consists of two things:
+
+ 1. A batch object.
+    This is usually a wrapper for a sequence, which provides slices of information.
+
+ #. A batch view.
+    This is needed for display.
+    It contains links to navigate to the slices defined in 1.
+
+Both elements can be defined and accessed in Python code AND pagetemplates.
+
+Batch navigation in templates
+-----------------------------
+
+For the use of batching features in Page Templates *plone.batching* the first thing you have to do is to create a sequence batch and put it in a template variable named *batch*.
+You should do this in a view class if possible::
+
+  <div tal:define="batch view/batchresults;">
+
+or you can do it in the template itself if necessary::
+
+  <div tal:define="Batch python:modules['plone.batching'].Batch;
+                   b_size python:30;b_start python:0;b_start request/b_start | b_start;
+                   batch python:Batch(results, b_size, int(b_start), orphan=1);">
+
+For the navigation you add the following snippet to your template::
+
+ <tal:batchnavigation
+     define="batchnavigation nocall:context/@@batchnavigation"
+     replace="structure python:batchnavigation(batch)" />
+
+For backwards compatibility *plone.batching* provides a drop in metal macro *navigation* in the *batch_macros* template.
+Add it to the template like this::
+
+ <div metal:use-macro="context/batch_macros/macros/navigation" />
+
+
+Usage in Python code
+--------------------
+
+A batch is instantiated like this::
+
+  >>> from plone.batching import Batch
+  >>> batch = Batch(range(100), size=15, orphan=10)
+
+This generates 5 subbatches with 15 items from the sequence [0, 1, ..., 99] and one subbatch with the last 25 items (including 10 orphaned items).
+For a detailed description of available parameters for a batch look at the API of the BaseBatch class.
+
+Another way to instaniate a batch is like this::
+
+  >>> batch = Batch.fromPagenumber(range(100), pagesize=15, pagenumber=1)
+
+This results in 6 batches with 15 items and one batch with the last 10 items.
+This way of creating a batch is meant as a short cut and does not support all the options the canonical constructor supports.
+
+For big sequences there is another base class provided by the package: *QuantumBatch*.
+This batch generates quantum leaps for quicker navigation.
+
+::
+
+  >>> from plone.batching.batch import QuantumBatch
+  >>> qb = QuantumBatch(range(1000), 10, start=500, quantumleap=1)
+  >>> qb.leapforward
+  [69, 84]
+  >>> qb.leapback
+  [18, 33]
+
+It is possible to navigate the batch stored in the two attributes *leapback* and *leapforward* with 5 clicks.
+
+Usage in Views
+--------------
+
+Plone.batching comes with a customizable batch View *batchnavigation* with the view class *BatchView*.
+The view comes with a template.
+All you have to do, if you want to customize it, is to override the make_link-method.
+This method should return a string with the link to the given *pagenumber*.
+Here is an example from the folder_contents implementation in plone.app.content::
+
+  >>> from plone.batching.browser import BatchView
+  >>> from ZTUtils import make_query
+
+  >>> class MyBatchView(BatchView):
+  ...     def make_link(self, pagenumber):
+  ...         batchlinkparams = self.request.form.copy()
+  ...         return '%s?%s' % (self.request.ACTUAL_URL,
+  ...                 make_query(batchlinkparams, {'pagenumber': pagenumber}))
+
+One thing you have to keep in mind is to call the batch view with a batch as the first argument.
+
+::
+
+  >>> from Products.Five import BrowserView
+  >>> class MyContentView(BrowserView):
+  ...     def batch(self):
+  ...         " "  # see above how a batch is defined
+  ...
+  ...     def batching(self):
+  ...         return MyBatchView(self.context, self.request)(self.batch)
+
+Now you can use this in the template of your view.
+
+::
+
+   <div tal:replace="structure view/batching" />
+
+Incompatibilities
+-----------------
+
+XXX __len__ method
+
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/batching/__init__.py b/plone/batching/__init__.py
index d949e29..f075161 100644
--- a/plone/batching/__init__.py
+++ b/plone/batching/__init__.py
@@ -1,7 +1,7 @@
-from plone.batching.batch import Batch
-
+# -*- coding: utf-8 -*-
 from AccessControl import allow_class
 from AccessControl import allow_module
+from plone.batching.batch import Batch
 
 allow_module('plone.batching')
 allow_class(Batch)
diff --git a/plone/batching/batch.py b/plone/batching/batch.py
index da15cdc..833fa0d 100644
--- a/plone/batching/batch.py
+++ b/plone/batching/batch.py
@@ -1,8 +1,10 @@
-from zope.interface import implements
-
+# -*- coding: utf-8 -*-
 from plone.batching.interfaces import IBatch
-from plone.batching.utils import (
-    opt, calculate_leapback, calculate_leapforward, calculate_pagenumber)
+from plone.batching.utils import calculate_leapback
+from plone.batching.utils import calculate_leapforward
+from plone.batching.utils import calculate_pagenumber
+from plone.batching.utils import opt
+from zope.interface import implements
 
 
 class BaseBatch(object):
@@ -117,8 +119,14 @@ def next(self):
         """
         if self.end >= (self.last + self.pagesize):
             return None
-        return Batch(self._sequence, self._size, self.end - self.overlap,
-            0, self.orphan, self.overlap)
+        return Batch(
+            self._sequence,
+            self._size,
+            self.end - self.overlap,
+            0,
+            self.orphan,
+            self.overlap
+        )
 
     @property
     def previous(self):
@@ -126,16 +134,21 @@ def previous(self):
         """
         if not self.first:
             return None
-        return Batch(self._sequence, self._size,
-            self.first - self._size + self.overlap, 0, self.orphan,
-            self.overlap)
+        return Batch(
+            self._sequence,
+            self._size,
+            self.first - self._size + self.overlap,
+            0,
+            self.orphan,
+            self.overlap
+        )
 
     def __getitem__(self, index):
         """ Get item from batch
         """
         actual = getattr(self._sequence, 'actual_result_count', None)
         if (actual is not None and actual != len(self._sequence)
-            and index < self.length):
+                and index < self.length):
             # optmized batch that contains only the wanted items in the
             # sequence
             return self._sequence[index]
diff --git a/plone/batching/batching.rst b/plone/batching/batching.rst
index ea2a38a..e76932b 100644
--- a/plone/batching/batching.rst
+++ b/plone/batching/batching.rst
@@ -1,12 +1,13 @@
 Batching
 ========
 
-Batching is the mechanism with which you split up a large dataset over multiple
-pages. The batching implementation discussed here has many features to help
-with constructing templates.
+Batching is the mechanism with which you split up a large dataset over multiple pages.
+The batching implementation discussed here has many features to help with constructing templates.
 
 A basic batch is created using a few paramenters.
 
+::
+
   >>> from plone.batching.batch import Batch
   >>> batch = Batch.fromPagenumber(
   ... items=range(333), pagesize=10, pagenumber=1, navlistsize=5)
@@ -15,13 +16,18 @@ A basic batch is created using a few paramenters.
 Items on page
 -------------
 
-The batch is iterable. It will only return the items for the current page.
+The batch is iterable.
+It will only return the items for the current page.
+
+::
 
  >>> list(batch)
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 
 If we change to a different page it will change the result set to that page.
 
+::
+
   >>> batch.pagenumber = 3
   >>> list(batch)
   [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
@@ -29,28 +35,39 @@ If we change to a different page it will change the result set to that page.
 Batch size
 ----------
 
-We can ask a batch for its size using two different methods. The first is to use the normal Python style.
+We can ask a batch for its size using two different methods.
+The first is to use the normal Python style.
+
+::
 
   >>> len(batch)
   333
 
 The other is more convenient for use with template.
 
+::
+
   >>> batch.sequence_length
   333
 
 It is also possible to ask for the items on the current page.
 
+::
+
   >>> batch.items_on_page
   10
 
-We can get the number of pages in a batch. This is actually the same as requesting the number of the last page.
+We can get the number of pages in a batch.
+This is actually the same as requesting the number of the last page.
+
+::
 
   >>> batch.lastpage
   34
 
-If we switch to this page the `items_on_page` attribute should be different
-(because our items are indivisible by ten).
+If we switch to this page the `items_on_page` attribute should be different (because our items are indivisible by ten).
+
+::
 
   >>> batch.pagenumber = batch.lastpage
   >>> batch.items_on_page
@@ -59,11 +76,12 @@ If we switch to this page the `items_on_page` attribute should be different
 Navigation
 ----------
 
-Because the batch implementation is geared towards templates it also provides a
-few navigation related methods.
+Because the batch implementation is geared towards templates it also provides a few navigation related methods.
 
 The first thing we can check is whether our batch spans over multiple pages.
 
+::
+
   >>> batch = Batch.fromPagenumber(
   ...          items=range(333), pagesize=10, navlistsize=5)
   >>> batch.multiple_pages
@@ -76,6 +94,8 @@ The first thing we can check is whether our batch spans over multiple pages.
 
 It will also do simple math for giving the next and previous page numbers.
 
+::
+
   >>> batch.nextpage
   2
 
@@ -85,6 +105,8 @@ It will also do simple math for giving the next and previous page numbers.
 
 We can also ask if there are any next or previous pages.
 
+::
+
   >>> batch.has_next
   True
 
@@ -99,15 +121,19 @@ We can also ask if there are any next or previous pages.
   >>> batch.has_previous
   False
 
-You might want to display the next item count. This can be usefull in case the
-batch is not exactly divisible by the pagesize.
+You might want to display the next item count.
+This can be usefull in case the batch is not exactly divisible by the pagesize.
+
+::
 
   >>> batch.pagenumber = batch.lastpage - 1
   >>> batch.next_item_count
   3
 
-The system maintains a navigation list as well. This is normally used to
-display numbers at the bottom of the screen for quick access to those pages.
+The system maintains a navigation list as well.
+This is normally used to display numbers at the bottom of the screen for quick access to those pages.
+
+::
 
   >>> batch.pagenumber = 1
   >>> batch.navlist
@@ -115,27 +141,33 @@ display numbers at the bottom of the screen for quick access to those pages.
 
 Keep in mind that the navlist centers around the current page when it can.
 
+::
+
   >>> batch.pagenumber = 10
   >>> batch.navlist
   [8, 9, 10, 11, 12]
 
 You can specify the navlist size to be any size you want.
 
+::
+
   >>> other_batch = Batch.fromPagenumber(items=range(333), pagesize=10, pagenumber=10,
   ...                     navlistsize=12)
   >>> other_batch.navlist
   [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
 
-We have already seen the `lastpage` property. There is also the equivalent
-`firstpage` property.
+We have already seen the `lastpage` property.
+There is also the equivalent `firstpage` property.
+
+::
 
   >>> batch.firstpage
   1
 
-Normally you would want to provide your users with a quick way to jump the the
-first or last page from anywhere in the batch. To make sure you will not show
-the links twice (once in the navlist and once for quick access) you can use the
-special helpers.
+Normally you would want to provide your users with a quick way to jump the the first or last page from anywhere in the batch.
+To make sure you will not show the links twice (once in the navlist and once for quick access) you can use the special helpers.
+
+::
 
   >>> batch.pagenumber = 1
   >>> batch.show_link_to_first
@@ -153,8 +185,9 @@ special helpers.
   >>> batch.show_link_to_last
   False
 
-For extra visual smoothness you might also want to display an elipses next to
-your quicklink to the first page.
+For extra visual smoothness you might also want to display an elipses next to your quicklink to the first page.
+
+::
 
   >>> batch.pagenumber = 15
   >>> batch.second_page_not_in_navlist
@@ -162,6 +195,8 @@ your quicklink to the first page.
 
 This should only be done in case the second page is not in the navigation list.
 
+::
+
   >>> batch.pagenumber = 4
   >>> batch.navlist
   [2, 3, 4, 5, 6]
@@ -170,6 +205,8 @@ This should only be done in case the second page is not in the navigation list.
 
 The same goes for the showing an elipses before the last link.
 
+::
+
   >>> batch.pagenumber = 15
   >>> batch.before_last_page_not_in_navlist
   True
@@ -178,8 +215,9 @@ The same goes for the showing an elipses before the last link.
   >>> batch.before_last_page_not_in_navlist
   False
 
-To make displaying the links to next and previous pages even easier you can
-also get two seperate navlist for both of them.
+To make displaying the links to next and previous pages even easier you can also get two seperate navlist for both of them.
+
+::
 
   >>> batch.pagenumber = 1
   >>> batch.next_pages
@@ -197,3 +235,4 @@ also get two seperate navlist for both of them.
   >>> batch.pagenumber = batch.firstpage + 1
   >>> batch.previous_pages
   [1]
+
diff --git a/plone/batching/browser.py b/plone/batching/browser.py
index 9b79c07..13a007e 100644
--- a/plone/batching/browser.py
+++ b/plone/batching/browser.py
@@ -1,11 +1,14 @@
+# -*- coding: utf-8 -*-
 from Products.Five import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from ZTUtils import  make_query
+from ZTUtils import make_query
 
 BatchTemplate = ViewPageTemplateFile("batchnavigation.pt")
 BootstrapBatchTemplate = ViewPageTemplateFile("batchnavigation_bootstrap.pt")
 
+
 class BatchMacrosView(BrowserView):
+
     @property
     def macros(self):
         return self.template.macros
@@ -34,6 +37,7 @@ class BootstrapBatchView(BatchView):
 
 
 class PloneBatchView(BatchView):
+
     def make_link(self, pagenumber=None):
         form = self.request.form
         if self.batchformkeys:
@@ -44,8 +48,13 @@ def make_link(self, pagenumber=None):
             batchlinkparams = form.copy()
 
         start = max(pagenumber - 1, 0) * self.batch.pagesize
-        return '%s?%s' % (self.request.ACTUAL_URL, make_query(batchlinkparams,
-                         {self.batch.b_start_str: start}))
+        return "{0}?{1}".format(
+            self.request.ACTUAL_URL,
+            make_query(
+                batchlinkparams,
+                {self.batch.b_start_str: start}
+            )
+        )
 
 
 class PloneBootstrapBatchView(BootstrapBatchView, PloneBatchView):
diff --git a/plone/batching/configure.zcml b/plone/batching/configure.zcml
index de1467b..c35317d 100644
--- a/plone/batching/configure.zcml
+++ b/plone/batching/configure.zcml
@@ -4,22 +4,22 @@
     xmlns:browser="http://namespaces.zope.org/browser"
     i18n_domain="plone">
 
-    <five:registerPackage package="." />
+  <five:registerPackage package="." />
 
-    <browser:page
-        name="batch_macros"
-        for="*"
-        permission="zope.Public"
-        class=".browser.BatchMacrosView"
-        template="batch_macros.pt"
-        />
+  <browser:page
+      name="batch_macros"
+      for="*"
+      class=".browser.BatchMacrosView"
+      template="batch_macros.pt"
+      permission="zope.Public"
+      />
 
-    <browser:page
-        name="batchnavigation"
-        for="*"
-        permission="zope.Public"
-        class=".browser.PloneBatchView"
-        template="batchnavigation.pt"
-        />
+  <browser:page
+      name="batchnavigation"
+      for="*"
+      class=".browser.PloneBatchView"
+      template="batchnavigation.pt"
+      permission="zope.Public"
+      />
 
 </configure>
diff --git a/plone/batching/interfaces.py b/plone/batching/interfaces.py
index 0ed1c5d..45b91bc 100644
--- a/plone/batching/interfaces.py
+++ b/plone/batching/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 import zope.schema
 
diff --git a/plone/batching/tests.py b/plone/batching/tests.py
index 8c9a42d..aabc749 100644
--- a/plone/batching/tests.py
+++ b/plone/batching/tests.py
@@ -1,12 +1,19 @@
-from zope.component.testing import setUp, tearDown
-import unittest
+# -*- coding: utf-8 -*-
+from plone.batching.batch import BaseBatch
+from plone.batching.batch import QuantumBatch
+from plone.batching.browser import BatchMacrosView
+from plone.batching.browser import BatchView
+from plone.batching.browser import PloneBatchView
+from plone.batching.utils import calculate_leapback
+from plone.batching.utils import calculate_leapforward
+from plone.batching.utils import calculate_pagenumber
+from plone.batching.utils import calculate_pagerange
+from plone.batching.utils import calculate_quantum_leap_gap
+from plone.batching.utils import opt
+from zope.component.testing import setUp
+from zope.component.testing import tearDown
 import doctest
-
-from plone.batching.batch import BaseBatch, QuantumBatch
-from plone.batching.browser import BatchMacrosView, BatchView, PloneBatchView
-from plone.batching.utils import (
-    calculate_pagenumber, calculate_pagerange, opt, calculate_quantum_leap_gap,
-    calculate_leapback, calculate_leapforward)
+import unittest
 
 
 class TestUtilsOpt(unittest.TestCase):
@@ -226,5 +233,11 @@ def test_suite():
                              optionflags=doctest.ELLIPSIS |
                              doctest.REPORT_ONLY_FIRST_FAILURE,
                              setUp=setUp, tearDown=tearDown),
+        doctest.DocFileSuite('../../docs/usage.rst',
+                             package='plone.batching',
+                             optionflags=doctest.ELLIPSIS |
+                             doctest.REPORT_ONLY_FIRST_FAILURE,
+                             setUp=setUp, tearDown=tearDown),
+
     ])
     return suite
diff --git a/plone/batching/utils.py b/plone/batching/utils.py
index 82446fa..4d6546b 100644
--- a/plone/batching/utils.py
+++ b/plone/batching/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 def opt(start, end, size, orphan, sequence_length):
     """ Calculate start, end, batchsize
     """
@@ -62,8 +63,11 @@ def calculate_leapback(pagenumber, numpages, pagerange):
     if num_back_leaps:
         pagerange, pagerangestart, pagerangeend = calculate_pagerange(
             pagenumber, numpages, pagerange)
-        leapback = range(pagerangestart - num_back_leaps * quantum_leap_gap,
-            pagerangestart, quantum_leap_gap)
+        leapback = range(
+            pagerangestart - num_back_leaps * quantum_leap_gap,
+            pagerangestart,
+            quantum_leap_gap
+        )
     return leapback
 
 
@@ -77,7 +81,9 @@ def calculate_leapforward(pagenumber, numpages, pagerange):
     if num_forward_leaps:
         pagerange, pagerangestart, pagerangeend = calculate_pagerange(
             pagenumber, numpages, pagerange)
-        leapforward = range(pagerangeend - 1 + quantum_leap_gap,
+        leapforward = range(
+            pagerangeend - 1 + quantum_leap_gap,
             pagerangeend - 1 + (num_forward_leaps + 1) * quantum_leap_gap,
-            quantum_leap_gap)
+            quantum_leap_gap
+        )
     return leapforward
diff --git a/setup.py b/setup.py
index f748f79..224771b 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,6 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
 
 version = '1.0.6.dev0'
 
@@ -6,10 +8,11 @@
     name='plone.batching',
     version=version,
     description="Batching facilities used in Plone.",
-    long_description=open("README.rst").read() + "\n" +
-                     open("CHANGES.rst").read() + "\n" +
-                     open("plone/batching/batching.rst").read() + "\n" +
-                     open("USAGE.rst").read(),
+    long_description=u'\n'.join([
+        open("README.rst").read(),
+        open("CHANGES.rst").read(),
+        open("docs/usage.rst").read(),
+    ]),
     classifiers=[
         'Framework :: Plone :: 4.3',
         'Framework :: Zope2',
@@ -24,9 +27,11 @@
     namespace_packages=['plone'],
     include_package_data=True,
     zip_safe=False,
-    install_requires=['setuptools'],
-    entry_points='''
-          [z3c.autoinclude.plugin]
-          target = plone
-      ''',
+    install_requires=[
+        'setuptools'
+    ],
+    entry_points="""
+    [z3c.autoinclude.plugin]
+    target = plone
+    """,
 )


