Repository: icalendar


Branch: refs/heads/master
Date: 2017-09-28T18:45:43+02:00
Author: Christian Geier (geier) <geier@lostpackets.de>
Commit: https://github.com/collective/icalendar/commit/043cf5a40053f9b8191d712807b049f5f82460bd

Accept Windows timezone identifiers as valid.

Currently we accept Olson timezone identifiers (tzids) as valid, even
when no matching VTIMEZONE component is present.  Windows tzids are
different from Olson tzids, but also far spread.  Some software produces
.ics files using those Windows tzids with missing VTIMEZONE components.
While in general our stance is to only support standard compliant .ics
files and try to get the issuer of the invalid .ics files to fix their
software, I believe our chances here are very slim.  On the other hand,
a lot of those .ics files exist in the wild and not supporting those
Windows tzids is a source of major inconvenience for our users.  We
should there accept Windows tzids as we do for Olson tzids.  The unicode
consortium has a suggested mapping from Windows tzids to Olson tzids
[0], which we now make use of.

[0] http://www.unicode.org/cldr/charts/29/supplemental/zone_tzid.html

Files changed:
A src/icalendar/windows_to_olson.py
M CHANGES.rst
M src/icalendar/prop.py
M src/icalendar/tests/test_unit_prop.py

diff --git a/CHANGES.rst b/CHANGES.rst
index f27fa0b..36c3bb2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Accept Windows timezone identifiers as valid [geier]
 
 Bug fixes:
 
diff --git a/src/icalendar/prop.py b/src/icalendar/prop.py
index 5c705c2..57965fa 100644
--- a/src/icalendar/prop.py
+++ b/src/icalendar/prop.py
@@ -56,6 +56,7 @@
 from icalendar.parser_tools import SEQUENCE_TYPES
 from icalendar.parser_tools import to_unicode
 from icalendar.timezone_cache import _timezone_cache
+from icalendar.windows_to_olson import WINDOWS_TO_OLSON
 
 import base64
 import binascii
@@ -399,7 +400,10 @@ def from_ical(ical, timezone=None):
             try:
                 tzinfo = pytz.timezone(timezone)
             except pytz.UnknownTimeZoneError:
-                tzinfo = _timezone_cache.get(timezone, None)
+                if timezone in WINDOWS_TO_OLSON:
+                    tzinfo = pytz.timezone(WINDOWS_TO_OLSON.get(timezone))
+                else:
+                    tzinfo = _timezone_cache.get(timezone, None)
 
         try:
             timetuple = (
diff --git a/src/icalendar/tests/test_unit_prop.py b/src/icalendar/tests/test_unit_prop.py
index ae86227..2357efb 100644
--- a/src/icalendar/tests/test_unit_prop.py
+++ b/src/icalendar/tests/test_unit_prop.py
@@ -5,6 +5,8 @@
 from datetime import timedelta
 from icalendar.parser import Parameters
 from icalendar.tests import unittest
+from icalendar.prop import vDatetime
+from icalendar.windows_to_olson import WINDOWS_TO_OLSON
 
 import pytz
 
@@ -495,3 +497,19 @@ def test_vDDDLists_timezone(self):
             b'RDATE;TZID=Europe/Vienna:20130101T000000,20130102T000000' in ical
         )
         self.assertTrue(b'EXDATE;TZID=Europe/Vienna:20130103T000000' in ical)
+
+
+class TestWindowsOlsonMapping(unittest.TestCase):
+    """Test the mappings from windows to olson tzids"""
+
+    def test_windows_timezone(self):
+        """test that an example"""
+        self.assertEqual(
+            vDatetime.from_ical('20170507T181920', 'Eastern Standard Time'),
+            pytz.timezone('America/New_York').localize(datetime(2017, 5, 7, 18, 19, 20))
+        )
+
+    def test_all(self):
+        """test if all mappings actually map to valid pytz tzids"""
+        for olson in WINDOWS_TO_OLSON.values():
+            pytz.timezone(olson)
diff --git a/src/icalendar/windows_to_olson.py b/src/icalendar/windows_to_olson.py
new file mode 100644
index 0000000..0cc8ef9
--- /dev/null
+++ b/src/icalendar/windows_to_olson.py
@@ -0,0 +1,119 @@
+"""This module contains mappings from Windows timezone identifiers to
+Olson timezone identifiers.
+
+The data is taken from the unicode consortium [0], the proposal and rationale
+for this mapping is also available at the unicode consortium [1].
+
+
+[0] http://www.unicode.org/cldr/charts/29/supplemental/zone_tzid.html
+[1] http://cldr.unicode.org/development/development-process/design-proposals/extended-windows-olson-zid-mapping  # noqa
+"""
+
+WINDOWS_TO_OLSON = {
+    'AUS Central Standard Time': 'Australia/Darwin',
+    'AUS Eastern Standard Time': 'Australia/Sydney',
+    'Afghanistan Standard Time': 'Asia/Kabul',
+    'Alaskan Standard Time': 'America/Anchorage',
+    'Arab Standard Time': 'Asia/Riyadh',
+    'Arabian Standard Time': 'Asia/Dubai',
+    'Arabic Standard Time': 'Asia/Baghdad',
+    'Argentina Standard Time': 'America/Buenos_Aires',
+    'Atlantic Standard Time': 'America/Halifax',
+    'Azerbaijan Standard Time': 'Asia/Baku',
+    'Azores Standard Time': 'Atlantic/Azores',
+    'Bahia Standard Time': 'America/Bahia',
+    'Bangladesh Standard Time': 'Asia/Dhaka',
+    'Belarus Standard Time': 'Europe/Minsk',
+    'Canada Central Standard Time': 'America/Regina',
+    'Cape Verde Standard Time': 'Atlantic/Cape_Verde',
+    'Caucasus Standard Time': 'Asia/Yerevan',
+    'Cen. Australia Standard Time': 'Australia/Adelaide',
+    'Central America Standard Time': 'America/Guatemala',
+    'Central Asia Standard Time': 'Asia/Almaty',
+    'Central Brazilian Standard Time': 'America/Cuiaba',
+    'Central Europe Standard Time': 'Europe/Budapest',
+    'Central European Standard Time': 'Europe/Warsaw',
+    'Central Pacific Standard Time': 'Pacific/Guadalcanal',
+    'Central Standard Time': 'America/Chicago',
+    'Central Standard Time (Mexico)': 'America/Mexico_City',
+    'China Standard Time': 'Asia/Shanghai',
+    'Dateline Standard Time': 'Etc/GMT+12',
+    'E. Africa Standard Time': 'Africa/Nairobi',
+    'E. Australia Standard Time': 'Australia/Brisbane',
+    'E. Europe Standard Time': 'Europe/Chisinau',
+    'E. South America Standard Time': 'America/Sao_Paulo',
+    'Eastern Standard Time': 'America/New_York',
+    'Eastern Standard Time (Mexico)': 'America/Cancun',
+    'Egypt Standard Time': 'Africa/Cairo',
+    'Ekaterinburg Standard Time': 'Asia/Yekaterinburg',
+    'FLE Standard Time': 'Europe/Kiev',
+    'Fiji Standard Time': 'Pacific/Fiji',
+    'GMT Standard Time': 'Europe/London',
+    'GTB Standard Time': 'Europe/Bucharest',
+    'Georgian Standard Time': 'Asia/Tbilisi',
+    'Greenland Standard Time': 'America/Godthab',
+    'Greenwich Standard Time': 'Atlantic/Reykjavik',
+    'Hawaiian Standard Time': 'Pacific/Honolulu',
+    'India Standard Time': 'Asia/Calcutta',
+    'Iran Standard Time': 'Asia/Tehran',
+    'Israel Standard Time': 'Asia/Jerusalem',
+    'Jordan Standard Time': 'Asia/Amman',
+    'Kaliningrad Standard Time': 'Europe/Kaliningrad',
+    'Korea Standard Time': 'Asia/Seoul',
+    'Libya Standard Time': 'Africa/Tripoli',
+    'Line Islands Standard Time': 'Pacific/Kiritimati',
+    'Magadan Standard Time': 'Asia/Magadan',
+    'Mauritius Standard Time': 'Indian/Mauritius',
+    'Middle East Standard Time': 'Asia/Beirut',
+    'Montevideo Standard Time': 'America/Montevideo',
+    'Morocco Standard Time': 'Africa/Casablanca',
+    'Mountain Standard Time': 'America/Denver',
+    'Mountain Standard Time (Mexico)': 'America/Chihuahua',
+    'Myanmar Standard Time': 'Asia/Rangoon',
+    'N. Central Asia Standard Time': 'Asia/Novosibirsk',
+    'Namibia Standard Time': 'Africa/Windhoek',
+    'Nepal Standard Time': 'Asia/Katmandu',
+    'New Zealand Standard Time': 'Pacific/Auckland',
+    'Newfoundland Standard Time': 'America/St_Johns',
+    'North Asia East Standard Time': 'Asia/Irkutsk',
+    'North Asia Standard Time': 'Asia/Krasnoyarsk',
+    'North Korea Standard Time': 'Asia/Pyongyang',
+    'Pacific SA Standard Time': 'America/Santiago',
+    'Pacific Standard Time': 'America/Los_Angeles',
+    'Pakistan Standard Time': 'Asia/Karachi',
+    'Paraguay Standard Time': 'America/Asuncion',
+    'Romance Standard Time': 'Europe/Paris',
+    'Russia Time Zone 10': 'Asia/Srednekolymsk',
+    'Russia Time Zone 11': 'Asia/Kamchatka',
+    'Russia Time Zone 3': 'Europe/Samara',
+    'Russian Standard Time': 'Europe/Moscow',
+    'SA Eastern Standard Time': 'America/Cayenne',
+    'SA Pacific Standard Time': 'America/Bogota',
+    'SA Western Standard Time': 'America/La_Paz',
+    'SE Asia Standard Time': 'Asia/Bangkok',
+    'Samoa Standard Time': 'Pacific/Apia',
+    'Singapore Standard Time': 'Asia/Singapore',
+    'South Africa Standard Time': 'Africa/Johannesburg',
+    'Sri Lanka Standard Time': 'Asia/Colombo',
+    'Syria Standard Time': 'Asia/Damascus',
+    'Taipei Standard Time': 'Asia/Taipei',
+    'Tasmania Standard Time': 'Australia/Hobart',
+    'Tokyo Standard Time': 'Asia/Tokyo',
+    'Tonga Standard Time': 'Pacific/Tongatapu',
+    'Turkey Standard Time': 'Europe/Istanbul',
+    'US Eastern Standard Time': 'America/Indianapolis',
+    'US Mountain Standard Time': 'America/Phoenix',
+    'UTC': 'Etc/GMT',
+    'UTC+12': 'Etc/GMT-12',
+    'UTC-02': 'Etc/GMT+2',
+    'UTC-11': 'Etc/GMT+11',
+    'Ulaanbaatar Standard Time': 'Asia/Ulaanbaatar',
+    'Venezuela Standard Time': 'America/Caracas',
+    'Vladivostok Standard Time': 'Asia/Vladivostok',
+    'W. Australia Standard Time': 'Australia/Perth',
+    'W. Central Africa Standard Time': 'Africa/Lagos',
+    'W. Europe Standard Time': 'Europe/Berlin',
+    'West Asia Standard Time': 'Asia/Tashkent',
+    'West Pacific Standard Time': 'Pacific/Port_Moresby',
+    'Yakutsk Standard Time': 'Asia/Yakutsk',
+}


Repository: icalendar


Branch: refs/heads/master
Date: 2017-09-28T21:49:05+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/icalendar/commit/720dd8be81dd5ba8d26936fc8891920d1b792b73

Merge pull request #242 from collective/MStimezones

Accept Windows timezone identifiers as valid.

Files changed:
A src/icalendar/windows_to_olson.py
M CHANGES.rst
M src/icalendar/prop.py
M src/icalendar/tests/test_unit_prop.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 58e276d..9f00b6c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Accept Windows timezone identifiers as valid [geier]
 
 Bug fixes:
 
diff --git a/src/icalendar/prop.py b/src/icalendar/prop.py
index 5c705c2..57965fa 100644
--- a/src/icalendar/prop.py
+++ b/src/icalendar/prop.py
@@ -56,6 +56,7 @@
 from icalendar.parser_tools import SEQUENCE_TYPES
 from icalendar.parser_tools import to_unicode
 from icalendar.timezone_cache import _timezone_cache
+from icalendar.windows_to_olson import WINDOWS_TO_OLSON
 
 import base64
 import binascii
@@ -399,7 +400,10 @@ def from_ical(ical, timezone=None):
             try:
                 tzinfo = pytz.timezone(timezone)
             except pytz.UnknownTimeZoneError:
-                tzinfo = _timezone_cache.get(timezone, None)
+                if timezone in WINDOWS_TO_OLSON:
+                    tzinfo = pytz.timezone(WINDOWS_TO_OLSON.get(timezone))
+                else:
+                    tzinfo = _timezone_cache.get(timezone, None)
 
         try:
             timetuple = (
diff --git a/src/icalendar/tests/test_unit_prop.py b/src/icalendar/tests/test_unit_prop.py
index ae86227..2357efb 100644
--- a/src/icalendar/tests/test_unit_prop.py
+++ b/src/icalendar/tests/test_unit_prop.py
@@ -5,6 +5,8 @@
 from datetime import timedelta
 from icalendar.parser import Parameters
 from icalendar.tests import unittest
+from icalendar.prop import vDatetime
+from icalendar.windows_to_olson import WINDOWS_TO_OLSON
 
 import pytz
 
@@ -495,3 +497,19 @@ def test_vDDDLists_timezone(self):
             b'RDATE;TZID=Europe/Vienna:20130101T000000,20130102T000000' in ical
         )
         self.assertTrue(b'EXDATE;TZID=Europe/Vienna:20130103T000000' in ical)
+
+
+class TestWindowsOlsonMapping(unittest.TestCase):
+    """Test the mappings from windows to olson tzids"""
+
+    def test_windows_timezone(self):
+        """test that an example"""
+        self.assertEqual(
+            vDatetime.from_ical('20170507T181920', 'Eastern Standard Time'),
+            pytz.timezone('America/New_York').localize(datetime(2017, 5, 7, 18, 19, 20))
+        )
+
+    def test_all(self):
+        """test if all mappings actually map to valid pytz tzids"""
+        for olson in WINDOWS_TO_OLSON.values():
+            pytz.timezone(olson)
diff --git a/src/icalendar/windows_to_olson.py b/src/icalendar/windows_to_olson.py
new file mode 100644
index 0000000..0cc8ef9
--- /dev/null
+++ b/src/icalendar/windows_to_olson.py
@@ -0,0 +1,119 @@
+"""This module contains mappings from Windows timezone identifiers to
+Olson timezone identifiers.
+
+The data is taken from the unicode consortium [0], the proposal and rationale
+for this mapping is also available at the unicode consortium [1].
+
+
+[0] http://www.unicode.org/cldr/charts/29/supplemental/zone_tzid.html
+[1] http://cldr.unicode.org/development/development-process/design-proposals/extended-windows-olson-zid-mapping  # noqa
+"""
+
+WINDOWS_TO_OLSON = {
+    'AUS Central Standard Time': 'Australia/Darwin',
+    'AUS Eastern Standard Time': 'Australia/Sydney',
+    'Afghanistan Standard Time': 'Asia/Kabul',
+    'Alaskan Standard Time': 'America/Anchorage',
+    'Arab Standard Time': 'Asia/Riyadh',
+    'Arabian Standard Time': 'Asia/Dubai',
+    'Arabic Standard Time': 'Asia/Baghdad',
+    'Argentina Standard Time': 'America/Buenos_Aires',
+    'Atlantic Standard Time': 'America/Halifax',
+    'Azerbaijan Standard Time': 'Asia/Baku',
+    'Azores Standard Time': 'Atlantic/Azores',
+    'Bahia Standard Time': 'America/Bahia',
+    'Bangladesh Standard Time': 'Asia/Dhaka',
+    'Belarus Standard Time': 'Europe/Minsk',
+    'Canada Central Standard Time': 'America/Regina',
+    'Cape Verde Standard Time': 'Atlantic/Cape_Verde',
+    'Caucasus Standard Time': 'Asia/Yerevan',
+    'Cen. Australia Standard Time': 'Australia/Adelaide',
+    'Central America Standard Time': 'America/Guatemala',
+    'Central Asia Standard Time': 'Asia/Almaty',
+    'Central Brazilian Standard Time': 'America/Cuiaba',
+    'Central Europe Standard Time': 'Europe/Budapest',
+    'Central European Standard Time': 'Europe/Warsaw',
+    'Central Pacific Standard Time': 'Pacific/Guadalcanal',
+    'Central Standard Time': 'America/Chicago',
+    'Central Standard Time (Mexico)': 'America/Mexico_City',
+    'China Standard Time': 'Asia/Shanghai',
+    'Dateline Standard Time': 'Etc/GMT+12',
+    'E. Africa Standard Time': 'Africa/Nairobi',
+    'E. Australia Standard Time': 'Australia/Brisbane',
+    'E. Europe Standard Time': 'Europe/Chisinau',
+    'E. South America Standard Time': 'America/Sao_Paulo',
+    'Eastern Standard Time': 'America/New_York',
+    'Eastern Standard Time (Mexico)': 'America/Cancun',
+    'Egypt Standard Time': 'Africa/Cairo',
+    'Ekaterinburg Standard Time': 'Asia/Yekaterinburg',
+    'FLE Standard Time': 'Europe/Kiev',
+    'Fiji Standard Time': 'Pacific/Fiji',
+    'GMT Standard Time': 'Europe/London',
+    'GTB Standard Time': 'Europe/Bucharest',
+    'Georgian Standard Time': 'Asia/Tbilisi',
+    'Greenland Standard Time': 'America/Godthab',
+    'Greenwich Standard Time': 'Atlantic/Reykjavik',
+    'Hawaiian Standard Time': 'Pacific/Honolulu',
+    'India Standard Time': 'Asia/Calcutta',
+    'Iran Standard Time': 'Asia/Tehran',
+    'Israel Standard Time': 'Asia/Jerusalem',
+    'Jordan Standard Time': 'Asia/Amman',
+    'Kaliningrad Standard Time': 'Europe/Kaliningrad',
+    'Korea Standard Time': 'Asia/Seoul',
+    'Libya Standard Time': 'Africa/Tripoli',
+    'Line Islands Standard Time': 'Pacific/Kiritimati',
+    'Magadan Standard Time': 'Asia/Magadan',
+    'Mauritius Standard Time': 'Indian/Mauritius',
+    'Middle East Standard Time': 'Asia/Beirut',
+    'Montevideo Standard Time': 'America/Montevideo',
+    'Morocco Standard Time': 'Africa/Casablanca',
+    'Mountain Standard Time': 'America/Denver',
+    'Mountain Standard Time (Mexico)': 'America/Chihuahua',
+    'Myanmar Standard Time': 'Asia/Rangoon',
+    'N. Central Asia Standard Time': 'Asia/Novosibirsk',
+    'Namibia Standard Time': 'Africa/Windhoek',
+    'Nepal Standard Time': 'Asia/Katmandu',
+    'New Zealand Standard Time': 'Pacific/Auckland',
+    'Newfoundland Standard Time': 'America/St_Johns',
+    'North Asia East Standard Time': 'Asia/Irkutsk',
+    'North Asia Standard Time': 'Asia/Krasnoyarsk',
+    'North Korea Standard Time': 'Asia/Pyongyang',
+    'Pacific SA Standard Time': 'America/Santiago',
+    'Pacific Standard Time': 'America/Los_Angeles',
+    'Pakistan Standard Time': 'Asia/Karachi',
+    'Paraguay Standard Time': 'America/Asuncion',
+    'Romance Standard Time': 'Europe/Paris',
+    'Russia Time Zone 10': 'Asia/Srednekolymsk',
+    'Russia Time Zone 11': 'Asia/Kamchatka',
+    'Russia Time Zone 3': 'Europe/Samara',
+    'Russian Standard Time': 'Europe/Moscow',
+    'SA Eastern Standard Time': 'America/Cayenne',
+    'SA Pacific Standard Time': 'America/Bogota',
+    'SA Western Standard Time': 'America/La_Paz',
+    'SE Asia Standard Time': 'Asia/Bangkok',
+    'Samoa Standard Time': 'Pacific/Apia',
+    'Singapore Standard Time': 'Asia/Singapore',
+    'South Africa Standard Time': 'Africa/Johannesburg',
+    'Sri Lanka Standard Time': 'Asia/Colombo',
+    'Syria Standard Time': 'Asia/Damascus',
+    'Taipei Standard Time': 'Asia/Taipei',
+    'Tasmania Standard Time': 'Australia/Hobart',
+    'Tokyo Standard Time': 'Asia/Tokyo',
+    'Tonga Standard Time': 'Pacific/Tongatapu',
+    'Turkey Standard Time': 'Europe/Istanbul',
+    'US Eastern Standard Time': 'America/Indianapolis',
+    'US Mountain Standard Time': 'America/Phoenix',
+    'UTC': 'Etc/GMT',
+    'UTC+12': 'Etc/GMT-12',
+    'UTC-02': 'Etc/GMT+2',
+    'UTC-11': 'Etc/GMT+11',
+    'Ulaanbaatar Standard Time': 'Asia/Ulaanbaatar',
+    'Venezuela Standard Time': 'America/Caracas',
+    'Vladivostok Standard Time': 'Asia/Vladivostok',
+    'W. Australia Standard Time': 'Australia/Perth',
+    'W. Central Africa Standard Time': 'Africa/Lagos',
+    'W. Europe Standard Time': 'Europe/Berlin',
+    'West Asia Standard Time': 'Asia/Tashkent',
+    'West Pacific Standard Time': 'Pacific/Port_Moresby',
+    'Yakutsk Standard Time': 'Asia/Yakutsk',
+}


