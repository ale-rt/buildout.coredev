Repository: Products.ATContentTypes


Branch: refs/heads/2.1.x
Date: 2016-05-04T13:40:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.ATContentTypes/commit/4f1b6c082d21c2f2dc30aae1ea11fc2cd1a0bc89

Removed docstrings from some methods to avoid publishing them.

Files changed:
M CHANGES.rst
M Products/ATContentTypes/content/base.py
M Products/ATContentTypes/content/document.py
M Products/ATContentTypes/content/event.py
M Products/ATContentTypes/content/file.py
M Products/ATContentTypes/content/folder.py
M Products/ATContentTypes/content/image.py
M Products/ATContentTypes/content/link.py
M Products/ATContentTypes/content/newsitem.py
M Products/ATContentTypes/content/topic.py
M Products/ATContentTypes/criteria/base.py
M Products/ATContentTypes/criteria/date.py
M Products/ATContentTypes/criteria/portaltype.py
M Products/ATContentTypes/criteria/simpleint.py
M Products/ATContentTypes/tool/atct.py
M Products/ATContentTypes/tool/topic.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 4b0ae30..73ecd66 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ New:
 
 Fixes:
 
-- *add item here*
+- Removed docstrings from some methods to avoid publishing them.  [maurits]
 
 
 2.1.18 (2016-02-24)
diff --git a/Products/ATContentTypes/content/base.py b/Products/ATContentTypes/content/base.py
index b608b64..e511b51 100644
--- a/Products/ATContentTypes/content/base.py
+++ b/Products/ATContentTypes/content/base.py
@@ -111,11 +111,10 @@ class ATCTMixin(BrowserDefaultMixin):
     security.declareProtected(ModifyPortalContent,
                               'initializeArchetype')
     def initializeArchetype(self, **kwargs):
-        """called by the generated add* factory in types tool
-
-        Overwritten to call edit() instead of update() to have the cmf
-        compatibility method.
-        """
+        # Called by the generated add* factory in types tool.
+        #
+        # Overwritten to call edit() instead of update() to have the cmf
+        # compatibility method.
         try:
             self.initializeLayers()
             self.markCreationFlag()
@@ -136,7 +135,7 @@ def initializeArchetype(self, **kwargs):
 
     security.declarePrivate('copyLayoutFromParent')
     def copyLayoutFromParent(self):
-        """Copies the layout from the parent object if it's of the same type."""
+        # Copies the layout from the parent object if it's of the same type.
         parent = aq_parent(aq_inner(self))
         if parent is not None:
             # Only set the layout if we are the same type as out parent object
@@ -151,9 +150,8 @@ def copyLayoutFromParent(self):
 
     security.declareProtected(ModifyPortalContent, 'edit')
     def edit(self, *args, **kwargs):
-        """Reimplementing edit() to have a compatibility method for the old
-        cmf edit() method
-        """
+        # Reimplementing edit() to have a compatibility method for the old
+        # cmf edit() method
         initializing = kwargs.get('_initializing_', False)
         if initializing:
             del kwargs['_initializing_']
@@ -175,14 +173,12 @@ def edit(self, *args, **kwargs):
 
     security.declarePrivate('cmf_edit')
     def cmf_edit(self, *args, **kwargs):
-        """Overwrite this method to make AT compatible with the crappy
-        CMF edit()
-        """
+        # Overwrite this method to make AT compatible with the crappy
+        # CMF edit()
         raise NotImplementedError("cmf_edit method isn't implemented")
 
     def exclude_from_nav(self):
-        """Accessor for excludeFromNav field
-        """
+        # Accessor for excludeFromNav field.
         field = self.getField('excludeFromNav')
         if field is not None:
             return field.get(self)
@@ -191,8 +187,7 @@ def exclude_from_nav(self):
 
     security.declareProtected(View, 'get_size')
     def get_size(self):
-        """ZMI / Plone get size method
-        """
+        # ZMI / Plone get size method.
         f = self.getPrimaryField()
         if f is None:
             return 0
@@ -209,10 +204,8 @@ class ATCTContent(ATCTMixin, BaseContent):
     security.declarePrivate('manage_afterPUT')
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
-        """After webdav/ftp PUT method
-
-        Set title according to the id on webdav/ftp PUTs.
-        """
+        # After webdav/ftp PUT method.
+        # Set title according to the id on webdav/ftp PUTs.
         id = self.getId()
         title = self.Title()
         if not title:
@@ -269,8 +262,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
 
     security.declareProtected(View, 'get_data')
     def get_data(self):
-        """CMF compatibility method
-        """
+        # CMF compatibility method.
         data = aq_base(self.getPrimaryField().getAccessor(self)())
         return str(getattr(data, 'data', data))
 
@@ -278,14 +270,12 @@ def get_data(self):
 
     security.declareProtected(View, 'size')
     def size(self):
-        """Get size (image_view.pt)
-        """
+        # Get size (image_view.pt).
         return self.get_size()
 
     security.declareProtected(View, 'get_content_type')
     def get_content_type(self):
-        """CMF compatibility method
-        """
+        # CMF compatibility method.
         f = self.getPrimaryField().getAccessor(self)()
         return f and f.getContentType() or 'text/plain'  # 'application/octet-stream'
 
@@ -316,8 +306,7 @@ def manage_edit(self, title, content_type, precondition='',
             return self.manage_main(self, REQUEST, manage_tabs_message=message)
 
     def _cleanupFilename(self, filename, request=None):
-        """Cleans the filename from unwanted or evil chars
-        """
+        # Cleans the filename from unwanted or evil chars.
         if filename and not isinstance(filename, unicode):
             encoding = self.getCharset()
             filename = unicode(filename, encoding)
@@ -326,7 +315,9 @@ def _cleanupFilename(self, filename, request=None):
         return filename and filename.encode(encoding) or None
 
     def _setATCTFileContent(self, value, **kwargs):
-        """Set ID based on name of uploaded file, Title, or possibly other conditions."""
+        # Set ID based on name of uploaded file, Title.
+        # Or possibly other conditions.
+        # Set ID based on name of uploaded file, Title, or possibly other conditions.
         field = self.getPrimaryField()
         # set first then get the filename
         field.set(self, value, **kwargs)  # set is ok
@@ -367,8 +358,7 @@ def _should_set_id_to_filename(self, filename, title):
 
     security.declareProtected(View, 'post_validate')
     def post_validate(self, REQUEST=None, errors=None):
-        """Validates upload file and id
-        """
+        # Validates upload file and id.
         id = REQUEST.form.get('id')
         field = self.getPrimaryField()
         f_name = field.getName()
@@ -407,11 +397,9 @@ def post_validate(self, REQUEST=None, errors=None):
     security.declarePrivate('manage_afterPUT')
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
-        """After webdav/ftp PUT method
-
-        Set the title according to the uploaded filename if the title
-        is empty or set it to the id if no filename is given.
-        """
+        # After webdav/ftp PUT method.
+        # Set the title according to the uploaded filename if the title
+        # is empty or set it to the id if no filename is given.
         id = self.getId()
         title = self.Title()
         if not title:
@@ -442,7 +430,7 @@ class ATCTFolder(ATCTMixin, BaseFolder):
 
     security.declareProtected(View, 'get_size')
     def get_size(self):
-        """Returns 1 as folders have no size."""
+        # Returns 1 as folders have no size.
         return 1
 
 InitializeClass(ATCTFolder)
@@ -462,15 +450,13 @@ def __browser_default__(self, request):
 
     security.declareProtected(View, 'get_size')
     def get_size(self):
-        """Returns 1 as folders have no size."""
+        # Returns 1 as folders have no size.
         return 1
 
     security.declarePrivate('manage_afterMKCOL')
     def manage_afterMKCOL(self, id, result, REQUEST=None, RESPONSE=None):
-        """After MKCOL handler
-
-        Set title according to the id
-        """
+        # After MKCOL handler.
+        # Set title according to the id.
         # manage_afterMKCOL is called in the context of the parent
         # folder, *not* in the context of the new folder!
         new = getattr(self, id)
diff --git a/Products/ATContentTypes/content/document.py b/Products/ATContentTypes/content/document.py
index 317f318..da4e7f8 100644
--- a/Products/ATContentTypes/content/document.py
+++ b/Products/ATContentTypes/content/document.py
@@ -94,28 +94,24 @@ class ATDocumentBase(ATCTContent, HistoryAwareMixin):
 
     security.declareProtected(View, 'CookedBody')
     def CookedBody(self, stx_level='ignored'):
-        """CMF compatibility method
-        """
+        # CMF compatibility method.
         return self.getText()
 
     security.declareProtected(ModifyPortalContent, 'EditableBody')
     def EditableBody(self):
-        """CMF compatibility method
-        """
+        # CMF compatibility method.
         return self.getRawText()
 
     security.declareProtected(ModifyPortalContent, 'setFormat')
     def setFormat(self, value):
-        """CMF compatibility method
-
-        The default mutator is overwritten to:
-
-          o add a conversion from stupid CMF content type (e.g. structured-text)
-            to real mime types used by MTR.
-
-          o Set format to default format if value is empty
-
-        """
+        # CMF compatibility method.
+        #
+        # The default mutator is overwritten to:
+        #
+        #   o add a conversion from stupid CMF content type
+        #     (e.g. structured-text) to real mime types used by MTR.
+        #
+        #   o Set format to default format if value is empty
         if not value:
             value = zconf.ATDocument.default_content_type
         else:
@@ -124,10 +120,8 @@ def setFormat(self, value):
 
     security.declareProtected(ModifyPortalContent, 'setText')
     def setText(self, value, **kwargs):
-        """Body text mutator
-
-        * hook into mxTidy an replace the value with the tidied value
-        """
+        # Body text mutator.
+        # hook into mxTidy an replace the value with the tidied value
         field = self.getField('text')
 
         # When an object is initialized the first time we have to
@@ -149,8 +143,7 @@ def setText(self, value, **kwargs):
 
     security.declarePrivate('guessMimetypeOfText')
     def guessMimetypeOfText(self):
-        """For ftp/webdav upload: get the mimetype from the id and data
-        """
+        # For ftp/webdav upload: get the mimetype from the id and data.
         mtr = getToolByName(self, 'mimetypes_registry')
         id = self.getId()
         data = self.getRawText()
@@ -172,9 +165,8 @@ def guessMimetypeOfText(self):
 
     security.declarePrivate('getTidyOutput')
     def getTidyOutput(self, field):
-        """Get the tidied output for a specific field from the request
-        if available
-        """
+        # Get the tidied output for a specific field from the request
+        # if available.
         request = getattr(self, 'REQUEST', None)
         if request is not None and isinstance(request, HTTPRequest):
             tidyAttribute = '%s_tidier_data' % field.getName()
@@ -190,9 +182,8 @@ def _notifyOfCopyTo(self, container, op=0):
 
     security.declarePrivate('manage_afterAdd')
     def manage_afterAdd(self, item, container):
-        """Fix text when created througt webdav
-        Guess the right mimetype from the id/data
-        """
+        # Fix text when created through webdav.
+        # Guess the right mimetype from the id/data.
         ATCTContent.manage_afterAdd(self, item, container)
         field = self.getField('text')
 
@@ -218,11 +209,8 @@ def cmf_edit(self, text_format, text, file='', safety_belt='', **kwargs):
     security.declarePrivate('manage_afterPUT')
     def manage_afterPUT(self, data, marshall_data, file, context, mimetype,
                         filename, REQUEST, RESPONSE):
-        """After webdav/ftp PUT method
-
-        Set title according to the id on webdav/ftp PUTs.
-        """
-
+        # After webdav/ftp PUT method.
+        # Set title according to the id on webdav/ftp PUTs.
         if '' == data:
             file.seek(0)
             content = file.read(65536)
diff --git a/Products/ATContentTypes/content/event.py b/Products/ATContentTypes/content/event.py
index 354862d..c6cf2fd 100644
--- a/Products/ATContentTypes/content/event.py
+++ b/Products/ATContentTypes/content/event.py
@@ -208,10 +208,8 @@ def cmf_edit(
 
     security.declareProtected(View, 'post_validate')
     def post_validate(self, REQUEST=None, errors=None):
-        """Validates start and end date
-
-        End date must be after start date
-        """
+        # Validates start and end date.
+        # End date must be after start date.
         if 'startDate' in errors or 'endDate' in errors:
             # No point in validating bad input
             return
diff --git a/Products/ATContentTypes/content/file.py b/Products/ATContentTypes/content/file.py
index 403784d..06a0f7c 100644
--- a/Products/ATContentTypes/content/file.py
+++ b/Products/ATContentTypes/content/file.py
@@ -97,8 +97,7 @@ def index_html(self, REQUEST=None, RESPONSE=None):
 
     security.declareProtected(ModifyPortalContent, 'setFile')
     def setFile(self, value, **kwargs):
-        """Set id to uploaded id
-        """
+        # Set id to uploaded id.
         self._setATCTFileContent(value, **kwargs)
 
     def __str__(self):
@@ -108,8 +107,7 @@ def __str__(self):
 
     security.declarePublic('getIcon')
     def getIcon(self, relative_to_portal=0):
-        """Calculate the icon using the mime type of the file
-        """
+        # Calculate the icon using the mime type of the file.
         field = self.getField('file')
         if not field or not self.get_size():
             # field is empty
@@ -146,8 +144,7 @@ def getIcon(self, relative_to_portal=0):
 
     security.declareProtected(View, 'icon')
     def icon(self):
-        """for ZMI
-        """
+        # for ZMI
         return self.getIcon()
 
     security.declarePrivate('cmf_edit')
diff --git a/Products/ATContentTypes/content/folder.py b/Products/ATContentTypes/content/folder.py
index e547132..15886ec 100644
--- a/Products/ATContentTypes/content/folder.py
+++ b/Products/ATContentTypes/content/folder.py
@@ -53,10 +53,9 @@ class ObsoleteATFolder(ATCTOrderedFolder):
 
     security.declareProtected(View, 'getNextPreviousParentValue')
     def getNextPreviousParentValue(self):
-        """If the parent node is also an IATFolder and has next/previous
-        navigation enabled, then let this folder have it enabled by
-        default as well.
-        """
+        # If the parent node is also an IATFolder and has next/previous
+        # navigation enabled, then let this folder have it enabled by
+        # default as well.
         parent = self.__parent__
         if IATFolder.providedBy(parent):
             return parent.getNextPreviousEnabled()
diff --git a/Products/ATContentTypes/content/image.py b/Products/ATContentTypes/content/image.py
index e23bd96..f517da9 100644
--- a/Products/ATContentTypes/content/image.py
+++ b/Products/ATContentTypes/content/image.py
@@ -88,7 +88,7 @@ def exportImage(self, format, width, height):
 
     security.declareProtected(ModifyPortalContent, 'setImage')
     def setImage(self, value, refresh_exif=True, **kwargs):
-        """Set ID to uploaded file name if Title is empty."""
+        # Set ID to uploaded file name if Title is empty.
         # set exif first because rotation might screw up the exif data
         # the exif methods can handle str, Pdata, OFSImage and file
         # like objects
@@ -96,14 +96,14 @@ def setImage(self, value, refresh_exif=True, **kwargs):
         self._setATCTFileContent(value, **kwargs)
 
     def _should_set_id_to_filename(self, filename, title):
-        """If title is blank, have the caller set my ID to the uploaded file's name."""
-        # When the title is blank, sometimes the filename is returned as the title.
+        # If title is blank, have the caller set my ID to the file's name.
+        # When the title is blank, sometimes the filename is returned as the
+        # title.
         return filename == title or not title
 
     security.declareProtected(View, 'tag')
     def tag(self, **kwargs):
-        """Generate image tag using the api of the ImageField
-        """
+        # Generate image tag using the api of the ImageField.
         return self.getField('image').tag(self, **kwargs)
 
     def __str__(self):
@@ -113,11 +113,9 @@ def __str__(self):
 
     security.declareProtected(View, 'get_size')
     def get_size(self):
-        """ZMI / Plone get size method
-
-        BBB: ImageField.get_size() returns the size of the original image + all
-        scales but we want only the size of the original image.
-        """
+        # ZMI / Plone get size method.
+        # BBB: ImageField.get_size() returns the size of the original image +
+        # all scales but we want only the size of the original image.
         img = self.getImage()
         if not getattr(aq_base(img), 'get_size', False):
             return 0
diff --git a/Products/ATContentTypes/content/link.py b/Products/ATContentTypes/content/link.py
index fb7ed41..353f8f2 100644
--- a/Products/ATContentTypes/content/link.py
+++ b/Products/ATContentTypes/content/link.py
@@ -55,19 +55,16 @@ class ATLink(ATCTContent):
 
     security.declareProtected(ModifyPortalContent, 'setRemoteUrl')
     def setRemoteUrl(self, value, **kwargs):
-        """remute url mutator
-
-        Use urlparse to sanify the url
-        Also see http://dev.plone.org/plone/ticket/3296
-        """
+        # Remute url mutator.
+        # Use urlparse to sanify the url
+        # Also see http://dev.plone.org/plone/ticket/3296
         if value:
             value = urlparse.urlunparse(urlparse.urlparse(value))
         self.getField('remoteUrl').set(self, value, **kwargs)
 
     security.declareProtected(View, 'remote_url')
     def remote_url(self):
-        """CMF compatibility method
-        """
+        # CMF compatibility method.
         return self.getRemoteUrl()
 
     security.declarePrivate('cmf_edit')
@@ -78,8 +75,7 @@ def cmf_edit(self, remote_url=None, **kwargs):
 
     security.declareProtected(View, 'getRemoteUrl')
     def getRemoteUrl(self):
-        """Sanitize output
-        """
+        # Sanitize output.
         value = self.Schema()['remoteUrl'].get(self)
         if not value: value = ''  # ensure we have a string
         return quote(value, safe='?$#@/:=+;$,&%')
diff --git a/Products/ATContentTypes/content/newsitem.py b/Products/ATContentTypes/content/newsitem.py
index b72e9e3..37cd110 100644
--- a/Products/ATContentTypes/content/newsitem.py
+++ b/Products/ATContentTypes/content/newsitem.py
@@ -106,8 +106,7 @@ class ATNewsItem(ATDocumentBase, ATCTImageTransform):
 
     security.declareProtected(View, 'tag')
     def tag(self, **kwargs):
-        """Generate image tag using the api of the ImageField
-        """
+        # Generate image tag using the api of the ImageField.
         if 'title' not in kwargs:
             kwargs['title'] = self.getImageCaption()
         return self.getField('image').tag(self, **kwargs)
diff --git a/Products/ATContentTypes/content/topic.py b/Products/ATContentTypes/content/topic.py
index e161e3e..c503f2a 100644
--- a/Products/ATContentTypes/content/topic.py
+++ b/Products/ATContentTypes/content/topic.py
@@ -166,8 +166,7 @@ def initializeArchetype(self, **kwargs):
 
     security.declareProtected(ChangeTopics, 'validateAddCriterion')
     def validateAddCriterion(self, indexId, criteriaType):
-        """Is criteriaType acceptable criteria for indexId
-        """
+        # Is criteriaType acceptable criteria for indexId.
         return criteriaType in self.criteriaByIndexId(indexId)
 
     security.declareProtected(ChangeTopics, 'criteriaByIndexId')
@@ -179,76 +178,66 @@ def criteriaByIndexId(self, indexId):
 
     security.declareProtected(ChangeTopics, 'listCriteriaTypes')
     def listCriteriaTypes(self):
-        """List available criteria types as dict
-        """
+        # List available criteria types as dict.
         return [{'name': ctype,
                  'description':_criterionRegistry[ctype].shortDesc}
                 for ctype in self.listCriteriaMetaTypes()]
 
     security.declareProtected(ChangeTopics, 'listCriteriaMetaTypes')
     def listCriteriaMetaTypes(self):
-        """List available criteria
-        """
+        # List available criteria.
         val = _criterionRegistry.listTypes()
         val.sort()
         return val
 
     security.declareProtected(ChangeTopics, 'listSearchCriteriaTypes')
     def listSearchCriteriaTypes(self):
-        """List available search criteria types as dict
-        """
+        # List available search criteria types as dict.
         return [{'name': ctype,
                  'description':_criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSearchCriteriaMetaTypes()]
 
     security.declareProtected(ChangeTopics, 'listSearchCriteriaMetaTypes')
     def listSearchCriteriaMetaTypes(self):
-        """List available search criteria
-        """
+        # List available search criteria.
         val = _criterionRegistry.listSearchTypes()
         val.sort()
         return val
 
     security.declareProtected(ChangeTopics, 'listSortCriteriaTypes')
     def listSortCriteriaTypes(self):
-        """List available sort criteria types as dict
-        """
+        # List available sort criteria types as dict.
         return [{'name': ctype,
                  'description':_criterionRegistry[ctype].shortDesc}
                 for ctype in self.listSortCriteriaMetaTypes()]
 
     security.declareProtected(ChangeTopics, 'listSortCriteriaMetaTypes')
     def listSortCriteriaMetaTypes(self):
-        """List available sort criteria
-        """
+        # List available sort criteria.
         val = _criterionRegistry.listSortTypes()
         val.sort()
         return val
 
     security.declareProtected(View, 'listCriteria')
     def listCriteria(self):
-        """Return a list of our criteria objects.
-        """
+        # Return a list of our criteria objects.
         val = self.objectValues(self.listCriteriaMetaTypes())
         return val
 
     security.declareProtected(View, 'listSearchCriteria')
     def listSearchCriteria(self):
-        """Return a list of our search criteria objects.
-        """
+        # Return a list of our search criteria objects.
         return [val for val in self.listCriteria() if
              IATTopicSearchCriterion.providedBy(val)]
 
     security.declareProtected(ChangeTopics, 'hasSortCriterion')
     def hasSortCriterion(self):
-        """Tells if a sort criterai is already setup.
-        """
+        # Tells if a sort criteria is already setup.
         return not self.getSortCriterion() is None
 
     security.declareProtected(ChangeTopics, 'getSortCriterion')
     def getSortCriterion(self):
-        """Return the Sort criterion if setup.
-        """
+        # Return the Sort criterion if setup.
         for criterion in self.listCriteria():
             if IATTopicSortCriterion.providedBy(criterion):
                 return criterion
@@ -256,35 +245,30 @@ def getSortCriterion(self):
 
     security.declareProtected(ChangeTopics, 'removeSortCriterion')
     def removeSortCriterion(self):
-        """remove the Sort criterion.
-        """
+        # Remove the Sort criterion.
         if self.hasSortCriterion():
             self.deleteCriterion(self.getSortCriterion().getId())
 
     security.declareProtected(ChangeTopics, 'setSortCriterion')
     def setSortCriterion(self, field, reversed):
-        """Set the Sort criterion.
-        """
+        # Set the Sort criterion.
         self.removeSortCriterion()
         self.addCriterion(field, 'ATSortCriterion')
         self.getSortCriterion().setReversed(reversed)
 
     security.declareProtected(ChangeTopics, 'listIndicesByCriterion')
     def listIndicesByCriterion(self, criterion):
-        """
-        """
         return _criterionRegistry.indicesByCriterion(criterion)
 
     security.declareProtected(ChangeTopics, 'listFields')
     def listFields(self):
-        """Return a list of fields from portal_catalog.
-        """
+        # Return a list of fields from portal_catalog.
         tool = getToolByName(self, TOOLNAME)
         return tool.getEnabledFields()
 
     security.declareProtected(ChangeTopics, 'listSortFields')
     def listSortFields(self):
-        """Return a list of available fields for sorting."""
+        # Return a list of available fields for sorting.
         fields = [field
                     for field in self.listFields()
                     if self.validateAddCriterion(field[0], 'ATSortCriterion')]
@@ -292,8 +276,7 @@ def listSortFields(self):
 
     security.declareProtected(ChangeTopics, 'listAvailableFields')
     def listAvailableFields(self):
-        """Return a list of available fields for new criteria.
-        """
+        # Return a list of available fields for new criteria.
         current = [crit.Field() for crit in self.listCriteria()
                       if not IATTopicSortCriterion.providedBy(crit)]
         fields = self.listFields()
@@ -305,8 +288,7 @@ def listAvailableFields(self):
 
     security.declareProtected(View, 'listSubtopics')
     def listSubtopics(self):
-        """Return a list of our subtopics.
-        """
+        # Return a list of our subtopics.
         val = self.objectValues(self.meta_type)
         check_p = getToolByName(self, 'portal_membership').checkPermission
         tops = []
@@ -319,23 +301,21 @@ def listSubtopics(self):
 
     security.declareProtected(View, 'hasSubtopics')
     def hasSubtopics(self):
-        """Returns true if subtopics have been created on this topic.
-        """
+        # Returns true if subtopics have been created on this topic.
         val = self.objectIds(self.meta_type)
         return not not val
 
     security.declareProtected(View, 'listMetaDataFields')
     def listMetaDataFields(self, exclude=True):
-        """Return a list of metadata fields from portal_catalog.
-        """
+        # Return a list of metadata fields from portal_catalog.
         tool = getToolByName(self, TOOLNAME)
         return tool.getMetadataDisplay(exclude)
 
     security.declareProtected(View, 'allowedCriteriaForField')
     def allowedCriteriaForField(self, field, display_list=False):
-        """ Return all valid criteria for a given field.  Optionally include
-            descriptions in list in format [(desc1, val1) , (desc2, val2)] for
-            javascript selector."""
+        # Return all valid criteria for a given field.  Optionally include
+        # descriptions in list in format [(desc1, val1) , (desc2, val2)] for
+        # javascript selector.
         tool = getToolByName(self, TOOLNAME)
         criteria = tool.getIndex(field).criteria
         allowed = [crit for crit in criteria
@@ -350,8 +330,7 @@ def allowedCriteriaForField(self, field, display_list=False):
 
     security.declareProtected(View, 'buildQuery')
     def buildQuery(self):
-        """Construct a catalog query using our criterion objects.
-        """
+        # Construct a catalog query using our criterion objects.
         result = {}
         clear_start = False
         criteria = self.listCriteria()
@@ -444,8 +423,7 @@ def queryCatalog(self, REQUEST=None, batch=False, b_size=None,
 
     security.declareProtected(ChangeTopics, 'addCriterion')
     def addCriterion(self, field, criterion_type):
-        """Add a new search criterion. Return the resulting object.
-        """
+        # Add a new search criterion. Return the resulting object.
         newid = 'crit__%s_%s' % (field, criterion_type)
         ct = _criterionRegistry[criterion_type]
         crit = ct(newid, field)
@@ -455,8 +433,7 @@ def addCriterion(self, field, criterion_type):
 
     security.declareProtected(ChangeTopics, 'deleteCriterion')
     def deleteCriterion(self, criterion_id):
-        """Delete selected criterion.
-        """
+        # Delete selected criterion.
         if type(criterion_id) is StringType:
             self._delObject(criterion_id)
         elif type(criterion_id) in (ListType, TupleType):
@@ -465,8 +442,7 @@ def deleteCriterion(self, criterion_id):
 
     security.declareProtected(View, 'getCriterion')
     def getCriterion(self, criterion_id):
-        """Get the criterion object.
-        """
+        # Get the criterion object.
         try:
             return self._getOb('crit__%s' % criterion_id)
         except AttributeError:
@@ -474,32 +450,28 @@ def getCriterion(self, criterion_id):
 
     security.declareProtected(AddPortalContent, 'addSubtopic')
     def addSubtopic(self, id):
-        """Add a new subtopic.
-        """
+        # Add a new subtopic.
         ti = self.getTypeInfo()
         ti.constructInstance(self, id)
         return self._getOb(id)
 
     security.declareProtected(View, 'synContentValues')
     def synContentValues(self):
-        """Getter for syndacation support
-        """
+        # Getter for syndication support.
         syn_tool = getToolByName(self, 'portal_syndication')
         limit = int(syn_tool.getMaxItems(self))
         return self.queryCatalog(sort_limit=limit)[:limit]
 
     security.declarePublic('canSetDefaultPage')
     def canSetDefaultPage(self):
-        """
-        Override BrowserDefaultMixin because default page stuff doesn't make
-        sense for topics.
-        """
+        # Override BrowserDefaultMixin because default page stuff doesn't make
+        # sense for topics.
         return False
 
     security.declarePublic('getCriterionUniqueWidgetAttr')
     def getCriteriaUniqueWidgetAttr(self, attr):
-        """Get a unique list values for a specific attribute for all widgets
-           on all criteria"""
+        # Get a unique list values for a specific attribute for all widgets
+        # on all criteria.
         criteria = self.listCriteria()
         order = []
         for crit in criteria:
@@ -520,10 +492,8 @@ def HEAD(self, REQUEST, RESPONSE):
 
     security.declareProtected(ChangeTopics, 'setText')
     def setText(self, value, **kwargs):
-        """Body text mutator
-
-        * hook into mxTidy an replace the value with the tidied value
-        """
+        # Body text mutator.
+        # Hook into mxTidy and replace the value with the tidied value.
         field = self.getField('text')
 
         # When an object is initialized the first time we have to
@@ -543,9 +513,8 @@ def setText(self, value, **kwargs):
 
     security.declarePrivate('getTidyOutput')
     def getTidyOutput(self, field):
-        """Get the tidied output for a specific field from the request
-        if available
-        """
+        # Get the tidied output for a specific field from the request
+        # if available.
         request = getattr(self, 'REQUEST', None)
         if request is not None and isinstance(request, HTTPRequest):
             tidyAttribute = '%s_tidier_data' % field.getName()
diff --git a/Products/ATContentTypes/criteria/base.py b/Products/ATContentTypes/criteria/base.py
index 462852f..3a4f20a 100644
--- a/Products/ATContentTypes/criteria/base.py
+++ b/Products/ATContentTypes/criteria/base.py
@@ -59,12 +59,11 @@ def __init__(self, id=None, field=None, oid=None):
 
     security.declareProtected(View, 'getId')
     def getId(self):
-        """Get the object id"""
+        # Get the object id.
         return str(self.id)
 
     def setId(self, value, *kw):
-        """Setting a new ID isn't allowed
-        """
+        # Setting a new ID isn't allowed.
         assert value == self.getId(), 'You are not allowed to change the id'
 
     security.declareProtected(View, 'Type')
@@ -78,8 +77,7 @@ def Description(self):
 
     security.declareProtected(View, 'getCriteriaItems')
     def getCriteriaItems(self):
-        """Return a sequence of items to be used to build the catalog query.
-        """
+        # Return a sequence of items to be used to build the catalog query.
         return ()
 
 # because I don't register the class I've to generator it on my own. Otherwise
diff --git a/Products/ATContentTypes/criteria/date.py b/Products/ATContentTypes/criteria/date.py
index a54b2fa..f16c020 100644
--- a/Products/ATContentTypes/criteria/date.py
+++ b/Products/ATContentTypes/criteria/date.py
@@ -103,8 +103,7 @@ class ATDateCriteria(ATBaseCriterion):
 
     security.declareProtected(View, 'getCriteriaItems')
     def getCriteriaItems(self):
-        """Return a sequence of items to be used to build the catalog query.
-        """
+        # Return a sequence of items to be used to build the catalog query.
         if self.value is not None:
             field = self.Field()
             value = self.Value()
diff --git a/Products/ATContentTypes/criteria/portaltype.py b/Products/ATContentTypes/criteria/portaltype.py
index 05de4c9..e0b7300 100644
--- a/Products/ATContentTypes/criteria/portaltype.py
+++ b/Products/ATContentTypes/criteria/portaltype.py
@@ -39,7 +39,7 @@ class ATPortalTypeCriterion(ATSelectionCriterion):
 
     security.declareProtected(View, 'getCurrentValues')
     def getCurrentValues(self):
-        """Return enabled portal types"""
+        # Return enabled portal types.
         vocab = queryUtility(IVocabularyFactory, name=VOCAB_ID)(self)
         portal_types = getToolByName(self, 'portal_types', None)
         result = []
diff --git a/Products/ATContentTypes/criteria/simpleint.py b/Products/ATContentTypes/criteria/simpleint.py
index 72fbef2..d77cc6e 100644
--- a/Products/ATContentTypes/criteria/simpleint.py
+++ b/Products/ATContentTypes/criteria/simpleint.py
@@ -99,7 +99,7 @@ def getCriteriaItems(self):
 
     security.declareProtected(View, 'post_validate')
     def post_validate(self, REQUEST, errors):
-        """Check that Value2 is set if range is set to min:max"""
+        # Check that Value2 is set if range is set to min:max.
         direction = REQUEST.get('direction', self.getDirection())
         val2 = REQUEST.get('value2', self.Value2())
         if direction == 'min:max' and not val2 and not val2 == 0:
diff --git a/Products/ATContentTypes/tool/atct.py b/Products/ATContentTypes/tool/atct.py
index f5542fe..de4552f 100644
--- a/Products/ATContentTypes/tool/atct.py
+++ b/Products/ATContentTypes/tool/atct.py
@@ -74,8 +74,7 @@ def om_icons(self):
 
     security.declareProtected(ManagePortal, 'recreateImageScales')
     def recreateImageScales(self, portal_type=None):
-        """Recreates AT Image scales (doesn't remove unused!)
-        """
+        # Recreates AT Image scales (doesn't remove unused!)
         if portal_type is None:
             portal_type = tuple(self.image_types)
         out = StringIO()
@@ -110,8 +109,7 @@ def recreateImageScales(self, portal_type=None):
 
     security.declareProtected(ManagePortal, 'listContentTypes')
     def listContentTypes(self):
-        """List all content types. Used for image/folder_types property.
-        """
+        # List all content types. Used for image/folder_types property.
         ttool = getToolByName(self, 'portal_types')
         return ttool.listContentTypes()
 
diff --git a/Products/ATContentTypes/tool/topic.py b/Products/ATContentTypes/tool/topic.py
index e95b4bc..b33de3f 100644
--- a/Products/ATContentTypes/tool/topic.py
+++ b/Products/ATContentTypes/tool/topic.py
@@ -48,7 +48,7 @@ def __init__(self):
         self.allowed_portal_types = []
 
     def getCriteriaForIndex(self, index, as_dict=False):
-        """ Returns the valid criteria for a given index """
+        # Returns the valid criteria for a given index.
         catalog_tool = getToolByName(self, 'portal_catalog')
         try:
             indexObj = catalog_tool.Indexes[index]
@@ -66,8 +66,8 @@ def getCriteriaForIndex(self, index, as_dict=False):
 
     security.declareProtected(ManagePortal, 'addIndex')
     def addIndex(self, index, friendlyName='', description='', enabled=False, criteria=None):
-        """ Add a new index along with descriptive information to the index
-            registry """
+        # Add a new index along with descriptive information to the index
+        # registry.
         if criteria is None:
             criteria = self.getCriteriaForIndex(index)
         if index in self.topic_indexes:
@@ -84,8 +84,8 @@ def addIndex(self, index, friendlyName='', description='', enabled=False, criter
 
     security.declareProtected(ManagePortal, 'addMetadata')
     def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
-        """ Add a new metadata field along with descriptive information to the
-            metadata registry """
+        # Add a new metadata field along with descriptive information to the
+        # metadata registry.
         if metadata in self.topic_metadata:
             objMeta = self.topic_metadata[metadata]
             objMeta.friendlyName = friendlyName
@@ -99,8 +99,8 @@ def addMetadata(self, metadata, friendlyName='', description='', enabled=False):
 
     security.declareProtected(ManagePortal, 'updateIndex')
     def updateIndex(self, index, friendlyName=None, description=None, enabled=None, criteria=None):
-        """ Updates an existing index in the registry, unrecognized values are
-            added """
+        # Updates an existing index in the registry, unrecognized values are
+        # added.
         indexes = self.topic_indexes
         if friendlyName == None:
             friendlyName = indexes[index].friendlyName
@@ -115,8 +115,8 @@ def updateIndex(self, index, friendlyName=None, description=None, enabled=None,
 
     security.declareProtected(ManagePortal, 'updateMetadata')
     def updateMetadata(self, metadata, friendlyName=None, description=None, enabled=None):
-        """ Updates an existing metadata field in the registry, unrecognized values are
-            added """
+        # Updates an existing metadata field in the registry, unrecognized
+        # values are added.
         meta = self.topic_metadata
         if friendlyName == None:
             friendlyName = meta[metadata].friendlyName
@@ -128,21 +128,21 @@ def updateMetadata(self, metadata, friendlyName=None, description=None, enabled=
 
     security.declareProtected(ManagePortal, 'removeIndex')
     def removeIndex(self, index):
-        """ Removes an existing index from the registry """
+        # Removes an existing index from the registry.
         if index in self.topic_indexes:
             del self.topic_indexes[index]
             self._p_changed = True
 
     security.declareProtected(ManagePortal, 'removeMetadata')
     def removeMetadata(self, metadata):
-        """ Removes an existing metadata field from the registry """
+        # Removes an existing metadata field from the registry.
         if metadata in self.topic_metadata:
             del self.topic_metadata[metadata]
             self._p_changed = True
 
     security.declareProtected(ManagePortal, 'createInitialIndexes')
     def createInitialIndexes(self):
-        """ create indexes for all indexes in the catalog """
+        # Create indexes for all indexes in the catalog.
         indexes = self.listCatalogFields()
         for i in indexes:
             if i not in self.topic_indexes:
@@ -152,7 +152,7 @@ def createInitialIndexes(self):
 
     security.declareProtected(ManagePortal, 'createInitialMetadata')
     def createInitialMetadata(self):
-        """ create metadata for all indexes in the catalog """
+        # Create metadata for all indexes in the catalog.
         metas = self.listCatalogMetadata()
         for i in metas:
             if i not in self.topic_metadata:
@@ -162,7 +162,7 @@ def createInitialMetadata(self):
 
     security.declarePrivate('listCatalogFields')
     def listCatalogFields(self):
-        """ Return a list of fields from portal_catalog. """
+        # Return a list of fields from portal_catalog.
         pcatalog = getToolByName(self, 'portal_catalog')
         available = pcatalog.indexes()
         val = [field for field in available]
@@ -171,7 +171,7 @@ def listCatalogFields(self):
 
     security.declarePrivate('listCatalogMetadata')
     def listCatalogMetadata(self):
-        """ Return a list of columns from portal_catalog. """
+        # Return a list of columns from portal_catalog.
         pcatalog = getToolByName(self, 'portal_catalog')
         available = pcatalog.schema()
         val = [field for field in available]
@@ -179,7 +179,7 @@ def listCatalogMetadata(self):
         return val
 
     def getAllPortalTypes(self):
-        """ returns a list of (id, title)-tuples for each type """
+        # Returns a list of (id, title)-tuples for each type.
         types_tool = getToolByName(self, 'portal_types')
         types = types_tool.listTypeInfo()
 
@@ -187,8 +187,8 @@ def getAllPortalTypes(self):
         return all_types
 
     def getAllowedPortalTypes(self, populate_for_end_usage=1):
-        """ Return all portal_types as an (id,title) tuple that are allowed
-            to search with """
+        # Return all portal_types as an (id,title) tuple that are allowed
+        # to search with.
         all_types = self.getAllPortalTypes()
 
         if populate_for_end_usage == 0:
@@ -203,19 +203,19 @@ def getAllowedPortalTypes(self, populate_for_end_usage=1):
         return filtered_types
 
     def getEnabledIndexes(self):
-        """ Returns all TopicIndex objects for enabled indexes """
+        # Returns all TopicIndex objects for enabled indexes.
         indexes = self.topic_indexes
         results = [i for i in indexes.values() if i.enabled]
         return results
 
     def getEnabledMetadata(self):
-        """ Returns all TopicIndex objects for enabled metadata """
+        # Returns all TopicIndex objects for enabled metadata.
         meta = self.topic_metadata
         results = [i for i in meta.values() if i.enabled]
         return results
 
     def getIndexDisplay(self, enabled=True):
-        """ Return DisplayList of Indexes and their friendly names """
+        # Return DisplayList of Indexes and their friendly names.
         if enabled:
             index_names = self.getIndexes(True)
         else:
@@ -226,7 +226,7 @@ def getIndexDisplay(self, enabled=True):
         return DisplayList(field_list)
 
     def getMetadataDisplay(self, enabled=True):
-        """ Return DisplayList of Metadata and their friendly names """
+        # Return DisplayList of Metadata and their friendly names.
         if enabled:
             meta_names = self.getAllMetadata(True)
         else:
@@ -237,8 +237,8 @@ def getMetadataDisplay(self, enabled=True):
         return DisplayList(field_list)
 
     def getEnabledFields(self):
-        """ Returns a list of tuples containing the index name, friendly name,
-            and description for each enabled index. """
+        # Returns a list of tuples containing the index name, friendly name,
+        # and description for each enabled index.
         enabledIndexes = self.getEnabledIndexes()
         dec_fields = [(i.friendlyName.lower() or \
                        i.index.lower(), i.index, i.friendlyName or \
@@ -248,9 +248,8 @@ def getEnabledFields(self):
         return fields
 
     def getFriendlyName(self, index):
-        """ Returns the friendly name for a given index name, or the given
-            index if the firendlyname is empty or the index is not recognized
-        """
+        # Returns the friendly name for a given index name, or the given
+        # index if the firendlyname is empty or the index is not recognized.
         if index in self.topic_indexes:
             return self.getIndex(index).friendlyName or index
         else:
@@ -258,8 +257,8 @@ def getFriendlyName(self, index):
 
     security.declareProtected(ManagePortal, 'getIndexes')
     def getIndexes(self, enabledOnly=False):
-        """ Returns the full list of available indexes, optionally filtering
-            out those that are not marked enabled """
+        # Returns the full list of available indexes, optionally filtering
+        # out those that are not marked enabled.
         if enabledOnly:
             indexes_dec = [(i.index.lower(), i.index) for i in self.getEnabledIndexes()]
         else:
@@ -272,8 +271,8 @@ def getIndexes(self, enabledOnly=False):
 
     security.declareProtected(ManagePortal, 'getAllMetadata')
     def getAllMetadata(self, enabledOnly=False):
-        """ Returns the full list of available metadata fields, optionally
-            filtering out those that are not marked enabled """
+        # Returns the full list of available metadata fields, optionally
+        # filtering out those that are not marked enabled.
         if enabledOnly:
             meta_dec = [(i.index.lower(), i.index) for i in self.getEnabledMetadata()]
         else:
@@ -285,14 +284,14 @@ def getAllMetadata(self, enabledOnly=False):
         return metadata
 
     def getIndex(self, index):
-        """ Returns the TopicIndex object for a given index name """
+        # Returns the TopicIndex object for a given index name.
         if index in self.topic_indexes:
             return self.topic_indexes[index]
         else:
             raise AttributeError('Index ' + str(index) + ' not found')
 
     def getMetadata(self, metadata):
-        """ Returns the TopicIndex object for a given metadata name """
+        # Returns the TopicIndex object for a given metadata name.
         if metadata in self.topic_metadata:
             return self.topic_metadata[metadata]
         else:
@@ -300,7 +299,7 @@ def getMetadata(self, metadata):
 
     security.declareProtected(ManagePortal, 'manage_saveTopicSetup')
     def manage_saveTopicSetup(self, REQUEST=None):
-        """ Set indexes and metadata from form """
+        # Set indexes and metadata from form.
         if REQUEST == None:
             return  'Nothing saved.'
 
@@ -318,7 +317,7 @@ def manage_saveTopicSetup(self, REQUEST=None):
 
     security.declareProtected(ManagePortal, 'manage_saveTopicSetupTypes')
     def manage_saveTopicSetupTypes(self, REQUEST=None):
-        """ Set portal types from form """
+        # Set portal types from form.
         if REQUEST == None:
             return  'Nothing saved.'
 


