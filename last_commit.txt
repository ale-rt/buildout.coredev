Repository: plone.app.users


Branch: refs/heads/master
Date: 2017-04-24T15:51:53+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/913d75c067ac3031281e0f612100739f30a4ebb0

Code cleanup

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/users/__init__.py
M plone/app/users/browser/__init__.py
M plone/app/users/browser/account.py
M plone/app/users/browser/configure.zcml
M plone/app/users/browser/membersearch.py
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/browser/register.py
M plone/app/users/browser/registersettingspanel.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/configure.zcml
M plone/app/users/field_extender.py
M plone/app/users/schema.py
M plone/app/users/setuphandlers.py
M plone/app/users/testing.py
M plone/app/users/tests/__init__.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_robot.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/tests/test_user_data_panel.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/upgrades.py
M plone/app/users/vocabularies.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8042fe9..9317146 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Code cleanup.
+  [thet]
 
 
 2.3.8 (2016-09-23)
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index 85880ef..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/users/__init__.py b/plone/app/users/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/users/__init__.py
+++ b/plone/app/users/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/users/browser/__init__.py b/plone/app/users/browser/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/users/browser/__init__.py
+++ b/plone/app/users/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py
index d782ed6..f06f9fd 100644
--- a/plone/app/users/browser/account.py
+++ b/plone/app/users/browser/account.py
@@ -1,21 +1,20 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from Acquisition import aq_inner
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import ISecuritySchema
-from Products.CMFPlone.utils import safe_unicode
-from Products.PlonePAS.tools.membership import default_portrait
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.statusmessages.interfaces import IStatusMessage
-from ZTUtils import make_query
-from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent
 from plone.app.users.browser.interfaces import IAccountPanelForm
 from plone.app.users.utils import notifyWidgetActionExecutionError
 from plone.autoform.form import AutoExtensibleForm
 from plone.namedfile.file import NamedBlobImage
 from plone.protect import CheckAuthenticator
 from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent
+from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.utils import safe_unicode
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.PlonePAS.tools.membership import default_portrait
+from Products.statusmessages.interfaces import IStatusMessage
 from z3c.form import button
 from z3c.form import form
 from zope import schema
@@ -24,6 +23,7 @@
 from zope.component import getUtility
 from zope.event import notify
 from zope.interface import implementer
+from ZTUtils import make_query
 
 
 MESSAGE_EMAIL_CANNOT_CHANGE = \
@@ -69,7 +69,7 @@ def _getProperty(self, name):
         return value
 
     def _setProperty(self, name, value):
-        if type(value) is set:
+        if isinstance(value, set):
             value = list(value)
         if value and isinstance(self.schema[name], schema.Choice):
             value = str(value)
diff --git a/plone/app/users/browser/configure.zcml b/plone/app/users/browser/configure.zcml
index 68f656e..9f9b6c3 100644
--- a/plone/app/users/browser/configure.zcml
+++ b/plone/app/users/browser/configure.zcml
@@ -4,71 +4,71 @@
     xmlns:five="http://namespaces.zope.org/five"
     i18n_domain="plone">
 
-    <include package="plone.autoform" />
-    <include package="plone.app.controlpanel" />
+  <include package="plone.autoform" />
+  <include package="plone.app.controlpanel" />
 
-    <browser:page
+  <browser:page
       name="member-registration"
       for="Products.CMFPlone.interfaces.IPloneSiteRoot"
       class=".registersettingspanel.RegistrationControlPanel"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
+  <browser:page
       name="register"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".register.RegistrationForm"
       permission="cmf.AddPortalMember"
       />
 
-    <browser:page
+  <browser:page
       name="new-user"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".register.AddUserForm"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="change-password"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".passwordpanel.PasswordPanel"
       permission="cmf.SetOwnPassword"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="personal-preferences"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".personalpreferences.PersonalPreferencesPanel"
       permission="cmf.SetOwnProperties"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="user-preferences"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".personalpreferences.PersonalPreferencesConfiglet"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
-        for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="personal-information"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".userdatapanel.UserDataPanel"
       permission="cmf.SetOwnProperties"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="user-information"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".userdatapanel.UserDataConfiglet"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
-        name="member-fields"
-        for="*"
-        class=".schemaeditor.MemberSchemaContext"
-        permission="plone.app.controlpanel.UsersAndGroups"
-        allowed_interface="OFS.interfaces.IItem" />
+  <browser:page
+      name="member-fields"
+      for="*"
+      class=".schemaeditor.MemberSchemaContext"
+      permission="plone.app.controlpanel.UsersAndGroups"
+      allowed_interface="OFS.interfaces.IItem" />
 
   <browser:page
       name="edit"
@@ -76,29 +76,29 @@
       class=".schemaeditor.SchemaListingPage"
       permission="zope2.View" />
 
-    <browser:page
+  <browser:page
       name="member-search"
       for="*"
       class=".membersearch.MemberSearchForm"
       permission="zope2.View"
       />
 
-    <adapter
+  <adapter
       provides=".personalpreferences.IPersonalPreferences"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       factory=".personalpreferences.PersonalPreferencesPanelAdapter"
       />
 
-    <adapter
+  <adapter
       provides=".passwordpanel.IPasswordSchema"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       factory=".passwordpanel.PasswordPanelAdapter"
       />
 
-    <subscriber
-        for="plone.app.users.browser.schemaeditor.IMemberSchemaContext
-             plone.schemaeditor.interfaces.ISchemaModifiedEvent"
-        handler="plone.app.users.browser.schemaeditor.updateSchema"
-        />
+  <subscriber
+      for="plone.app.users.browser.schemaeditor.IMemberSchemaContext
+           plone.schemaeditor.interfaces.ISchemaModifiedEvent"
+      handler="plone.app.users.browser.schemaeditor.updateSchema"
+      />
 
 </configure>
diff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py
index ec2ad14..4f3eb6c 100644
--- a/plone/app/users/browser/membersearch.py
+++ b/plone/app/users/browser/membersearch.py
@@ -1,9 +1,8 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.users.schema import checkEmailAddress
 from plone.autoform.form import AutoExtensibleForm
 from plone.supermodel import model
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from z3c.form import button
 from z3c.form import form
 from zope import schema
diff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py
index 536e47b..83f59f8 100644
--- a/plone/app/users/browser/passwordpanel.py
+++ b/plone/app/users/browser/passwordpanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_inner
+from plone.app.users.browser.account import AccountPanelForm
+from plone.app.users.utils import notifyWidgetActionExecutionError
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.statusmessages.interfaces import IStatusMessage
-from plone.app.users.browser.account import AccountPanelForm
-from plone.app.users.utils import notifyWidgetActionExecutionError
 from z3c.form import button
 from zope import schema
 from zope.interface import Interface
@@ -43,7 +43,7 @@ def __init__(self, context):
         self.context = getToolByName(context, 'portal_membership')
 
     def get_dummy(self):
-        """ We don't actually need to 'get' anything ..."""
+        """We don't actually need to 'get' anything ..."""
         return ''
 
     current_password = property(get_dummy)
diff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py
index 94f11fc..6102e96 100644
--- a/plone/app/users/browser/personalpreferences.py
+++ b/plone/app/users/browser/personalpreferences.py
@@ -1,13 +1,14 @@
 # -*- coding: utf-8 -*-
+from plone.app.users.browser.account import AccountPanelForm
+from plone.app.users.browser.account import AccountPanelSchemaAdapter
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.utils import getFSVersionTuple
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.users.browser.account import AccountPanelForm
-from plone.app.users.browser.account import AccountPanelSchemaAdapter
 from zope.interface import Interface
 from zope.schema import Choice
 
+
 try:
     import plone.app.event  # noqa
     HAS_PAE = True
diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index fc8aa8d..3faa3af 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -1,5 +1,17 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
+from plone.app.users.browser.account import AccountPanelSchemaAdapter
+from plone.app.users.browser.interfaces import ILoginNameGenerator
+from plone.app.users.browser.interfaces import IUserIdGenerator
+from plone.app.users.browser.schemaeditor import getFromBaseSchema
+from plone.app.users.schema import IAddUserSchema
+from plone.app.users.schema import ICombinedRegisterSchema
+from plone.app.users.schema import IRegisterSchema
+from plone.app.users.utils import notifyWidgetActionExecutionError
+from plone.app.users.utils import uuid_userid_generator
+from plone.autoform.form import AutoExtensibleForm
+from plone.protect import CheckAuthenticator
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
@@ -9,41 +21,23 @@
 from Products.CMFPlone.utils import normalizeString
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-from ZODB.POSException import ConflictError
-from plone.autoform.form import AutoExtensibleForm
-from plone.autoform.interfaces import OMITTED_KEY
-from plone.protect import CheckAuthenticator
-from plone.registry.interfaces import IRegistry
 from z3c.form import button
 from z3c.form import field
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
 from z3c.form.interfaces import DISPLAY_MODE
 from zExceptions import Forbidden
-from zope.component import (
-    getUtility,
-    queryUtility,
-    getAdapter,
-    provideAdapter,
-    getMultiAdapter)
+from ZODB.POSException import ConflictError
+from zope.component import getAdapter
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component import provideAdapter
+from zope.component import queryUtility
 from zope.component.hooks import getSite
 from zope.schema import getFieldNames
+
 import logging
 
-from ..schema import (
-    IRegisterSchema,
-    IAddUserSchema,
-    ICombinedRegisterSchema
-)
-from ..utils import (
-    notifyWidgetActionExecutionError,
-    uuid_userid_generator,
-)
-from .account import AccountPanelSchemaAdapter
-from .schemaeditor import getFromBaseSchema
-
-from plone.app.users.browser.interfaces import ILoginNameGenerator
-from plone.app.users.browser.interfaces import IUserIdGenerator
 
 # Number of retries for creating a user id like bob-jones-42:
 RENAME_AFTER_CREATION_ATTEMPTS = 100
@@ -70,7 +64,6 @@ class BaseRegistrationForm(AutoExtensibleForm, form.Form):
     formErrorsMessage = _('There were errors.')
     ignoreContext = True
     enableCSRFProtection = True
-    schema = ICombinedRegisterSchema
 
     # this attribute indicates if user was successfully registered
     _finishedRegister = False
@@ -302,7 +295,7 @@ def validate_registration(self, action, data):
 
         # passwords should match
         if 'password' in form_field_names:
-            assert('password_ctl' in form_field_names)
+            assert 'password_ctl' in form_field_names
             # Skip this check if password fields already have an error
             if not ('password' in error_keys or 'password_ctl' in error_keys):
                 password = data.get('password')
@@ -644,10 +637,8 @@ def updateFields(self):
             defaultFields['password'].field.required = False
             defaultFields['password_ctl'].field.required = False
             settings = self._get_security_settings()
-            if not settings.enable_user_pwd_choice:
-                defaultFields['mail_me'].field.default = True
-            else:
-                defaultFields['mail_me'].field.default = False
+            defaultFields['mail_me'].field.default =\
+                not settings.enable_user_pwd_choice
 
         # Append the manager-focused fields
         portal_props = getToolByName(self.context, 'portal_properties')
diff --git a/plone/app/users/browser/registersettingspanel.py b/plone/app/users/browser/registersettingspanel.py
index ada65e0..92d890b 100644
--- a/plone/app/users/browser/registersettingspanel.py
+++ b/plone/app/users/browser/registersettingspanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
+from plone.app.users.schema import IRegistrationSettingsSchema
+from plone.protect import CheckAuthenticator
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-from plone.app.users.schema import IRegistrationSettingsSchema
-from plone.protect import CheckAuthenticator
 from z3c.form import button
 from z3c.form import field
 from z3c.form import form
@@ -28,7 +28,10 @@ def getContent(self):
         return {'user_registration_fields': props.getProperty(
             'user_registration_fields', [])}
 
-    @button.buttonAndHandler(_(u'label_apply_changes', default=u'Apply Changes'), name='save')
+    @button.buttonAndHandler(
+        _(u'label_apply_changes', default=u'Apply Changes'),
+        name='save'
+    )
     def action_save(self, action):
         # CSRF protection
         CheckAuthenticator(self.request)
diff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py
index 2445ae5..2ea713e 100644
--- a/plone/app/users/browser/schemaeditor.py
+++ b/plone/app/users/browser/schemaeditor.py
@@ -1,33 +1,32 @@
-import copy
-import re
-import logging
-
-from zope.component import getGlobalSiteManager
-from zope.component.hooks import getSite
-from zope.annotation.interfaces import IAnnotations
-from zope.interface import Interface, implementer
-
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.CMFCore.utils import getToolByName
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
-# from plone.memoize import volatile
-from plone.schemaeditor.browser.schema.traversal import SchemaContext
+# -*- coding: utf-8 -*-
+from plone.app.users.schema import IRegisterSchema
+from plone.app.users.schema import IUserDataSchema
+from plone.app.users.schema import SCHEMA_ANNOTATION
+from plone.app.users.schema import SCHEMATA_KEY
 from plone.schemaeditor.browser.schema.listing import SchemaListing
-from plone.supermodel.model import Model, finalizeSchemas, SchemaClass
+from plone.schemaeditor.browser.schema.traversal import SchemaContext
+from plone.supermodel import loadString
+from plone.supermodel.model import finalizeSchemas
+from plone.supermodel.model import Model
+from plone.supermodel.model import SchemaClass
 from plone.supermodel.parser import IFieldMetadataHandler
 from plone.supermodel.serializer import serialize
 from plone.supermodel.utils import ns
-from plone.supermodel import loadString
 from plone.z3cform.layout import FormWrapper
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from zope.annotation.interfaces import IAnnotations
+from zope.component import getGlobalSiteManager
+from zope.component.hooks import getSite
+from zope.interface import implementer
+from zope.interface import Interface
+
+import copy
+import logging
+import re
 
-from ..schema import (
-    IUserDataSchema,
-    IRegisterSchema,
-    SCHEMA_ANNOTATION,
-    SCHEMATA_KEY,
-)
 
 USERS_NAMESPACE = 'http://namespaces.plone.org/supermodel/users'
 USERS_PREFIX = 'users'
@@ -73,7 +72,8 @@
 
 
 def log(message,
-        level='info', id='plone.app.users.browser.schemaeditor'):
+        level='info',
+        id='plone.app.users.browser.schemaeditor'):
     logger = logging.getLogger(id)
     getattr(logger, level)(message)
 
diff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py
index 2b6f827..17f8e35 100644
--- a/plone/app/users/browser/userdatapanel.py
+++ b/plone/app/users/browser/userdatapanel.py
@@ -1,25 +1,23 @@
 # -*- coding: utf-8 -*-
-from zope.component import getUtility
-from zope.component import provideAdapter
-from zope.component.hooks import getSite
+from plone.app.users.browser.account import AccountPanelForm
+from plone.app.users.browser.account import AccountPanelSchemaAdapter
+from plone.app.users.browser.schemaeditor import getFromBaseSchema
+from plone.app.users.schema import IUserDataSchema
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.interfaces import ISecuritySchema
 from Products.CMFPlone.utils import set_own_login_name
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.users.browser.account import AccountPanelForm
-from plone.app.users.browser.account import AccountPanelSchemaAdapter
-from plone.registry.interfaces import IRegistry
 from zExceptions import NotFound
-
-from ..schema import IUserDataSchema
-from .schemaeditor import getFromBaseSchema
+from zope.component import getUtility
+from zope.component import provideAdapter
+from zope.component.hooks import getSite
 
 import cgi
 
 
-
 class UserDataPanelAdapter(AccountPanelSchemaAdapter):
     """One does not simply set portrait, email might be used to login with.
     """
diff --git a/plone/app/users/configure.zcml b/plone/app/users/configure.zcml
index 049c409..8846fce 100644
--- a/plone/app/users/configure.zcml
+++ b/plone/app/users/configure.zcml
@@ -3,79 +3,98 @@
     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
     i18n_domain="plone.app.users">
 
-    <include package="plone.supermodel" />
-    <include package="plone.autoform" />
-    <include package="plone.namedfile" />
-    <include package="plone.schema" />
-    <include package="plone.formwidget.namedfile" />
-    <include package="Products.CMFCore" file="permissions.zcml" />
-    <include package=".browser" />
-
-    <utility component=".vocabularies.UserRegistrationFieldsVocabularyFactory"
-             name="plone.app.users.user_registration_fields" />
-    <utility provides="zope.schema.interfaces.IVocabularyFactory"
-             component=".vocabularies.GroupIdVocabularyFactory"
-             name="plone.app.users.group_ids"/>
-
-    <genericsetup:registerProfile
-          name='default'
-          title='Import User Data'
-          directory='profiles/default'
-          description='Import default schema'
-          provides='Products.GenericSetup.interfaces.EXTENSION'
-        />
-
-    <genericsetup:exportStep
-          name="usersschema"
-          title="Export member custom TTW schema"
-          description="Export member custom TTW schema"
-          handler="plone.app.users.setuphandlers.export_schema">
-    </genericsetup:exportStep>
-    <genericsetup:importStep
-          name="usersschema"
-          title="Import member custom TTW schema"
-          description="Import member custom TTW schema"
-          handler="plone.app.users.setuphandlers.import_schema">
-    </genericsetup:importStep>
-
-    <genericsetup:upgradeStep
-        title="Upgrade to TTW Schema editing for user information form"
-        description=""
-        source="*"
-        destination="1"
-        handler=".upgrades.upgrade_to_ttw"
-        profile="plone.app.users:default" />
-
-    <adapter
-      factory=".field_extender.UserFormSelectionAdapter"
-      for="zope.schema.interfaces.IField"
-      provides=".field_extender.IUserFormSelection"
-      />
+  <include package="plone.supermodel" />
+  <include package="plone.autoform" />
+  <include package="plone.namedfile" />
+  <include package="plone.schema" />
+  <include package="plone.formwidget.namedfile" />
+  <include package="Products.CMFCore" file="permissions.zcml" />
+  <include package=".browser" />
 
-    <utility
-      factory=".field_extender.UserFormSelectionMetadata"
+
+  <!-- utilities -->
+  <utility
       name='plone.app.users.forms'
+      factory=".field_extender.UserFormSelectionMetadata"
       />
 
-    <adapter
-      factory=".field_extender.get_user_form_selection"
+  <utility
+      name="plone.app.users.user_registration_fields"
+      component=".vocabularies.UserRegistrationFieldsVocabularyFactory"
+      />
+
+  <utility
+      name="plone.app.users.group_ids"
+      provides="zope.schema.interfaces.IVocabularyFactory"
+      component=".vocabularies.GroupIdVocabularyFactory"
+      />
+
+  <utility
+      name="plone.app.users.schema.ProtectedTextLine"
+      provides="plone.schemaeditor.interfaces.IFieldFactory"
+      component=".schema.FullnameFieldFactory"
+      />
+
+  <utility
+      name="plone.app.users.schema.ProtectedEmail"
+      provides="plone.schemaeditor.interfaces.IFieldFactory"
+      component=".schema.EmailFieldFactory"
+      />
+
+
+  <!-- adapters -->
+  <adapter
+      for="zope.schema.interfaces.IField"
+      provides=".field_extender.IUserFormSelection"
+      factory=".field_extender.UserFormSelectionAdapter"
+      />
+
+  <adapter
+      name='plone.app.users.userformselection'
       for=".browser.schemaeditor.IMemberSchemaContext
-        zope.schema.interfaces.IField"
+           zope.schema.interfaces.IField"
       provides="plone.schemaeditor.interfaces.IFieldEditorExtender"
-      name='plone.app.users.userformselection'
+      factory=".field_extender.get_user_form_selection"
       />
 
-    <adapter
-      factory=".field_extender.get_user_addform_selection"
+  <adapter
+      name='plone.app.users.useraddformselection'
       for=".browser.schemaeditor.IMemberSchemaContext"
       provides="plone.schemaeditor.interfaces.IFieldEditorExtender"
-      name='plone.app.users.useraddformselection'
+      factory=".field_extender.get_user_addform_selection"
+      />
+
+
+  <!-- generic setup -->
+  <genericsetup:registerProfile
+      name='default'
+      title='Import User Data'
+      directory='profiles/default'
+      description='Import default schema'
+      provides='Products.GenericSetup.interfaces.EXTENSION'
+      />
+
+  <genericsetup:exportStep
+      name="usersschema"
+      title="Export member custom TTW schema"
+      description="Export member custom TTW schema"
+      handler="plone.app.users.setuphandlers.export_schema">
+  </genericsetup:exportStep>
+
+  <genericsetup:importStep
+      name="usersschema"
+      title="Import member custom TTW schema"
+      description="Import member custom TTW schema"
+      handler="plone.app.users.setuphandlers.import_schema">
+  </genericsetup:importStep>
+
+  <genericsetup:upgradeStep
+      title="Upgrade to TTW Schema editing for user information form"
+      description=""
+      source="*"
+      destination="1"
+      handler=".upgrades.upgrade_to_ttw"
+      profile="plone.app.users:default"
       />
 
-    <utility name="plone.app.users.schema.ProtectedTextLine"
-             provides="plone.schemaeditor.interfaces.IFieldFactory"
-             component=".schema.FullnameFieldFactory" />
-    <utility name="plone.app.users.schema.ProtectedEmail"
-             provides="plone.schemaeditor.interfaces.IFieldFactory"
-             component=".schema.EmailFieldFactory" />
 </configure>
diff --git a/plone/app/users/field_extender.py b/plone/app/users/field_extender.py
index 690a423..36156ae 100644
--- a/plone/app/users/field_extender.py
+++ b/plone/app/users/field_extender.py
@@ -1,19 +1,19 @@
-from zope.interface import Interface, implementer
-from zope import schema
-
-from zope.component import adapts
-from zope.schema.interfaces import IField
+# -*- coding: utf-8 -*-
+from plone.app.users.browser.schemaeditor import USERS_NAMESPACE
+from plone.app.users.browser.schemaeditor import USERS_PREFIX
+from plone.autoform import directives as form
 from plone.supermodel.interfaces import IFieldMetadataHandler
 from plone.supermodel.utils import ns
+from z3c.form.browser.checkbox import CheckBoxFieldWidget
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.schema.interfaces import IField
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 
-from .browser.schemaeditor import USERS_NAMESPACE, USERS_PREFIX
-
-from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
-
-from plone.autoform import directives as form
-
+import zope.schema
 
-from z3c.form.browser.checkbox import CheckBoxFieldWidget
 
 form_vocab = SimpleVocabulary([
     SimpleTerm(value=u'On Registration',
@@ -25,11 +25,11 @@
 
 class IUserFormSelection(Interface):
     form.widget(forms=CheckBoxFieldWidget)
-    forms = schema.List(
+    forms = zope.schema.List(
         title=u"Where should this field be shown",
         description=u"Does not apply to username or to email fields",
         required=True,
-        value_type=schema.Choice(vocabulary=form_vocab),
+        value_type=zope.schema.Choice(vocabulary=form_vocab),
     )
 
 
diff --git a/plone/app/users/schema.py b/plone/app/users/schema.py
index cfb4329..a28d75a 100644
--- a/plone/app/users/schema.py
+++ b/plone/app/users/schema.py
@@ -1,22 +1,23 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.RegistrationTool import EmailAddressInvalid
-from Products.CMFPlone import PloneMessageFactory as _
-from zope import schema
-from zope.component import getUtility
-from zope.interface import Interface, implementer, implementer
-from ZTUtils import make_query
 from plone.formwidget.namedfile.widget import NamedImageWidget
 from plone.namedfile.interfaces import INamedImageField
+from plone.schema.email import Email
 from plone.schemaeditor.fields import FieldFactory
 from plone.schemaeditor.interfaces import IFieldFactory
+from Products.CMFCore.interfaces import ISiteRoot
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.RegistrationTool import EmailAddressInvalid
 from z3c.form.interfaces import IFieldWidget
 from z3c.form.interfaces import IFormLayer
 from z3c.form.widget import FieldWidget
+from zope import schema
 from zope.component import adapter
+from zope.component import getUtility
+from zope.interface import implementer
+from zope.interface import Interface
+from ZTUtils import make_query
 
-from plone.schema.email import Email
 
 SCHEMA_ANNOTATION = "plone.app.users.schema"
 # must match the browser view name !
diff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py
index 719a3f2..4583030 100644
--- a/plone/app/users/setuphandlers.py
+++ b/plone/app/users/setuphandlers.py
@@ -1,7 +1,8 @@
+# -*- coding: utf-8 -*-
 import logging
-
 import plone.app.users.browser.schemaeditor as ttw
 
+
 logger = logging.getLogger('plone.app.users.setuphandlers')
 
 FILE = 'userschema.xml'
diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index c658aff..9ff4f83 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -7,6 +7,7 @@
 
 import doctest
 
+
 PLONE_APP_USERS_FIXTURE = PTC_FIXTURE
 PLONE_APP_USERS_FUNCTIONAL_TESTING = PTC_FUNCTIONAL_TESTING
 
diff --git a/plone/app/users/tests/__init__.py b/plone/app/users/tests/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/users/tests/__init__.py
+++ b/plone/app/users/tests/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index 8558ef5..2c1ad86 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -7,24 +7,23 @@
 """
 from AccessControl.SecurityInfo import ClassSecurityInfo
 from Acquisition import aq_base
-from Products.CMFPlone.interfaces.controlpanel import IMailSchema
+from OFS.Cache import Cacheable
+from plone.app.testing.bbb import PloneTestCase
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from plone.registry.interfaces import IRegistry
+from plone.testing.z2 import Browser
 from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-from plone.app.testing.bbb import PloneTestCase
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
 from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
 from Products.PluggableAuthService.utils import classImplements
-from plone.registry.interfaces import IRegistry
-from OFS.Cache import Cacheable
+from transaction import commit
 from zope.component import getSiteManager
 from zope.component import getUtility
 
-from plone.testing.z2 import Browser
-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
-from transaction import commit
-
 
 class BaseTestCase(PloneTestCase):
     """ base test case which adds amin user """
@@ -37,7 +36,7 @@ def afterSetUp(self):
         self.membership = self.portal.portal_membership
         self.security_settings = get_security_settings()
 
-        self.browser = Browser(self.layer['app']) 
+        self.browser = Browser(self.layer['app'])
         self.request = self.layer['request']
 
     def beforeTearDown(self):
@@ -87,6 +86,7 @@ def setMailHost():
     mail_settings.email_from_address = 'admin@foo.com'
     commit()
 
+
 def unsetMailHost():
     registry = getUtility(IRegistry)
     mail_settings = registry.forInterface(IMailSchema, prefix='plone')
@@ -94,11 +94,13 @@ def unsetMailHost():
     mail_settings.email_from_address = ''
     commit()
 
+
 def activateDefaultPasswordPolicy(portal):
     uf = portal.acl_users
     for policy in uf.objectIds(['Default Plone Password Policy']):
         activatePluginInterfaces(portal, policy)
 
+
 def addParrotPasswordPolicy(portal):
     # remove default policy
     uf = portal.acl_users
@@ -110,18 +112,21 @@ def addParrotPasswordPolicy(portal):
     obj = uf[obj.getId()]
     activatePluginInterfaces(portal, obj.getId())
 
-    #portal = getUtility(ISiteRoot)
+    # portal = getUtility(ISiteRoot)
     plugins = uf._getOb('plugins')
     validators = plugins.listPlugins(IValidationPlugin)
     assert validators
     commit()
 
+
 classImplements(DeadParrotPassword, IValidationPlugin)
 
+
 def get_security_settings():
     registry = getUtility(IRegistry)
     return registry.forInterface(ISecuritySchema, prefix="plone")
 
+
 def set_mock_mailhost(portal):
     portal._original_MailHost = portal.MailHost
     portal.MailHost = mailhost = MockMailHost('MailHost')
@@ -129,9 +134,9 @@ def set_mock_mailhost(portal):
     sm.unregisterUtility(provided=IMailHost)
     sm.registerUtility(mailhost, provided=IMailHost)
 
+
 def unset_mock_mailhost(portal):
     portal.MailHost = portal._original_MailHost
     sm = getSiteManager(context=portal)
     sm.unregisterUtility(provided=IMailHost)
     sm.registerUtility(aq_base(portal._original_MailHost), provided=IMailHost)
-
diff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py
index e5ad00d..21a35cd 100644
--- a/plone/app/users/tests/test_doctests.py
+++ b/plone/app/users/tests/test_doctests.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.app.users.testing import optionflags
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.testing import layered
 
 import doctest
diff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py
index 80a6eb2..ddad27f 100644
--- a/plone/app/users/tests/test_exportimport.py
+++ b/plone/app/users/tests/test_exportimport.py
@@ -1,11 +1,13 @@
-from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.tests.common import DummyImportContext
-from Products.GenericSetup.tests.common import DummyExportContext
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
 from plone.app.users.browser.userdatapanel import getUserDataSchema
-from plone.app.users.setuphandlers import import_schema, export_schema
+from plone.app.users.setuphandlers import export_schema
+from plone.app.users.setuphandlers import import_schema
 from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.namedfile.field import NamedBlobImage
+from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.tests.common import DummyExportContext
+from Products.GenericSetup.tests.common import DummyImportContext
 from zope import schema
 
 
diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index 298755f..5be5d1c 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.users.tests.base import BaseTestCase
-from Products.CMFCore.utils import getToolByName
 from plone.app.users.utils import uuid_userid_generator
+from Products.CMFCore.utils import getToolByName
 
 import transaction
 
@@ -42,7 +42,7 @@ def afterSetUp(self):
         self.portal.acl_users._doAddUser(
             'siteadmin', 'secret', ['Site Administrator'], []
         )
-        transaction.commit() 
+        transaction.commit()
         self.browser.addHeader('Authorization', 'Basic siteadmin:secret')
 
     def test_uuid_disabled_email_as_login_disabled(self):
diff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py
index 6311320..8b7a9f6 100644
--- a/plone/app/users/tests/test_robot.py
+++ b/plone/app/users/tests/test_robot.py
@@ -1,9 +1,11 @@
-import unittest
-import os
-import robotsuite
+# -*- coding: utf-8 -*-
 from plone.app.users.testing import PLONE_APP_USERS_ROBOT
 from plone.testing import layered
 
+import os
+import robotsuite
+import unittest
+
 
 def test_suite():
     suite = unittest.TestSuite()
diff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py
index 03b2ca9..529104f 100644
--- a/plone/app/users/tests/test_schema_types.py
+++ b/plone/app/users/tests/test_schema_types.py
@@ -1,10 +1,14 @@
+# -*- coding: utf-8 -*-
 from pkg_resources import resource_stream
-from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD, TEST_USER_ID
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing.bbb import PloneTestCase
 from plone.app.users.setuphandlers import import_schema
 from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
 from Products.GenericSetup.tests.common import DummyImportContext
+
 import transaction
 
 
diff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py
index a9aa7e0..dd3ec3f 100644
--- a/plone/app/users/tests/test_user_data_panel.py
+++ b/plone/app/users/tests/test_user_data_panel.py
@@ -1,6 +1,7 @@
-from zExceptions import NotFound
+# -*- coding: utf-8 -*-
 from plone.app.users.browser.userdatapanel import UserDataPanel
 from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from zExceptions import NotFound
 from zope.i18n import translate
 
 import unittest
diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index ab1d267..50ab33f 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -1,13 +1,10 @@
 # -*- coding: utf-8 -*-
 # Note: test setup somehow fails when only tests from this file are run.
-from Products.CMFPlone.interfaces import ISecuritySchema
 from plone.app.users.browser.interfaces import IUserIdGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
 from plone.app.users.tests.base import BaseTestCase
 from plone.app.users.utils import uuid_userid_generator
-from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
-from zope.component import getUtility
 
 
 class TestGenerateUserId(BaseTestCase):
diff --git a/plone/app/users/upgrades.py b/plone/app/users/upgrades.py
index 7d874bb..a268934 100644
--- a/plone/app/users/upgrades.py
+++ b/plone/app/users/upgrades.py
@@ -1,14 +1,19 @@
-import copy
+# -*- coding: utf-8 -*-
 from plone.app.users.browser import schemaeditor
 from plone.namedfile.field import NamedBlobImage
 from plone.schemaeditor.interfaces import IEditableSchema
-from plone.supermodel.model import finalizeSchemas, Schema, SchemaClass
+from plone.supermodel.model import finalizeSchemas
+from plone.supermodel.model import Schema
+from plone.supermodel.model import SchemaClass
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from zope import schema
 from zope.interface import Interface
 
+import copy
 import logging
+
+
 log = logging.getLogger("plone.app.users:upgrade")
 
 
diff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py
index 023a2d7..6681f7c 100644
--- a/plone/app/users/vocabularies.py
+++ b/plone/app/users/vocabularies.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
+from browser.schemaeditor import getFromBaseSchema
+from plone.app.users.schema import ICombinedRegisterSchema
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.utils import normalizeString
@@ -7,12 +9,10 @@
 from zope.interface import implementer
 from zope.schema import getFieldNames
 from zope.schema.interfaces import IVocabularyFactory
-from zope.schema.vocabulary import SimpleVocabulary
 from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 from zope.site.hooks import getSite
 
-from browser.schemaeditor import getFromBaseSchema
-from .schema import ICombinedRegisterSchema
 
 # Define constants from the Join schema that should be added to the
 # vocab of the join fields setting in usergroupssettings controlpanel.
@@ -59,6 +59,7 @@ def __call__(self, context):
 
         return SimpleVocabulary([SimpleTerm(v, v, v) for v in values])
 
+
 UserRegistrationFieldsVocabularyFactory = UserRegistrationFieldsVocabulary()
 
 
diff --git a/setup.py b/setup.py
index d5f1cd2..a6f8aa2 100644
--- a/setup.py
+++ b/setup.py
@@ -4,9 +4,10 @@
 
 version = '2.3.9.dev0'
 
-long_description = '{0}\n{1}'.format(open('README.rst').read(),
-                                     open('CHANGES.rst').read())
-
+long_description = u'{0}\n\n{1}'.format(
+    open('README.rst').read(),
+    open('CHANGES.rst').read()
+)
 
 extras_require = {
     'test': [


Repository: plone.app.users


Branch: refs/heads/master
Date: 2017-04-24T22:45:50+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/9d7de45c2e0480bfd8941f1604e7a7891c868abf

Remove dependency on ``zope.site``.

Files changed:
M CHANGES.rst
M plone/app/users/vocabularies.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9317146..5a2aca0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Remove dependency on ``zope.site``.
+  [thet]
+
 - Code cleanup.
   [thet]
 
diff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py
index 6681f7c..73ad41b 100644
--- a/plone/app/users/vocabularies.py
+++ b/plone/app/users/vocabularies.py
@@ -11,7 +11,7 @@
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
-from zope.site.hooks import getSite
+from zope.component.hooks import getSite
 
 
 # Define constants from the Join schema that should be added to the
@@ -70,7 +70,7 @@ class GroupIdVocabulary(object):
 
       >>> from zope.component import queryUtility
       >>> from zope.schema.interfaces import IVocabularyFactory
-      >>> from zope.site.hooks import getSite
+      >>> from zope.component.hooks import getSite
       >>> from Products.CMFCore.utils import getToolByName
 
       >>> groups_tool = getToolByName(getSite(), 'portal_groups')
diff --git a/setup.py b/setup.py
index a6f8aa2..5b8fb4a 100644
--- a/setup.py
+++ b/setup.py
@@ -67,7 +67,6 @@
         'zope.event',
         'zope.interface',
         'zope.schema',
-        'zope.site',
     ],
     entry_points="""
     [z3c.autoinclude.plugin]


Repository: plone.app.users


Branch: refs/heads/master
Date: 2017-04-25T00:07:45+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.users/commit/c6ee84bda062d6710a3190695bbd0e2112cd7287

Use ``get_portal`` from Products.CMFPlone.utils instead of ``getSite``.
For plone.app.users we always want the Plone portal object until this package is fixed to support individual subsite settings.

Files changed:
M CHANGES.rst
M plone/app/users/browser/register.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/setuphandlers.py
M plone/app/users/vocabularies.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 5a2aca0..c16edfb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,8 @@
 CHANGES
 =======
 
-2.3.9 (unreleased)
-------------------
+2.4 (unreleased)
+----------------
 
 Breaking changes:
 
@@ -14,6 +14,10 @@ New features:
 
 Bug fixes:
 
+- Use ``get_portal`` from Products.CMFPlone.utils instead of ``getSite``.
+  For plone.app.users we always want the Plone portal object until this package is fixed to support individual subsite settings.
+  [thet]
+
 - Remove dependency on ``zope.site``.
   [thet]
 
diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index 3faa3af..993a98e 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -18,6 +18,7 @@
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.utils import get_portal
 from Products.CMFPlone.utils import normalizeString
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
@@ -33,7 +34,6 @@
 from zope.component import getUtility
 from zope.component import provideAdapter
 from zope.component import queryUtility
-from zope.component.hooks import getSite
 from zope.schema import getFieldNames
 
 import logging
@@ -44,7 +44,7 @@
 
 
 def getRegisterSchema():
-    portal = getSite()
+    portal = get_portal()
     schema = getattr(portal, '_v_register_schema', None)
     if schema is None:
         portal._v_register_schema = schema = getFromBaseSchema(
diff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py
index 2ea713e..ddcedf6 100644
--- a/plone/app/users/browser/schemaeditor.py
+++ b/plone/app/users/browser/schemaeditor.py
@@ -16,10 +16,10 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
+from Products.CMFPlone.utils import get_portal
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from zope.annotation.interfaces import IAnnotations
 from zope.component import getGlobalSiteManager
-from zope.component.hooks import getSite
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -118,7 +118,7 @@ def updateSchema(object, event):
 
 
 def applySchema(snew_schema):
-    site = getSite()
+    site = get_portal()
 
     # get the old schema (currently stored in the annotation)
     old_schema = get_ttw_edited_schema()
@@ -277,14 +277,14 @@ def load_ttw_schema(string=None):
 
 def get_schema(site=None):
     if site is None:
-        site = getSite()
+        site = get_portal()
     annotations = IAnnotations(site)
     return annotations.get(SCHEMA_ANNOTATION, '')
 
 
 def set_schema(string, site=None):
     if site is None:
-        site = getSite()
+        site = get_portal()
     annotations = IAnnotations(site)
     annotations[SCHEMA_ANNOTATION] = string
 
diff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py
index 17f8e35..d6bc76a 100644
--- a/plone/app/users/browser/userdatapanel.py
+++ b/plone/app/users/browser/userdatapanel.py
@@ -8,12 +8,12 @@
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.utils import get_portal
 from Products.CMFPlone.utils import set_own_login_name
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from zExceptions import NotFound
 from zope.component import getUtility
 from zope.component import provideAdapter
-from zope.component.hooks import getSite
 
 import cgi
 
@@ -94,7 +94,7 @@ def __call__(self):
 
 
 def getUserDataSchema():
-    portal = getSite()
+    portal = get_portal()
     schema = getattr(portal, '_v_userdata_schema', None)
     if schema is None:
         portal._v_userdata_schema = schema = getFromBaseSchema(
diff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py
index 4583030..4b93a2b 100644
--- a/plone/app/users/setuphandlers.py
+++ b/plone/app/users/setuphandlers.py
@@ -9,12 +9,12 @@
 
 
 def import_schema(context):
-    """Import TTW Schema """
+    """Import TTW Schema
+    """
     data = context.readDataFile(FILE)
     if data is None:
         return
     ttw.applySchema(data)
-
     logger.info('Imported schema')
 
 
@@ -22,5 +22,5 @@ def export_schema(context):
     """Export TTW schema
     """
     schema = ttw.serialize_ttw_schema()
-    logger.info('Exported schema')
     context.writeDataFile(FILE, schema, 'text/xml')
+    logger.info('Exported schema')
diff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py
index 73ad41b..aa617cc 100644
--- a/plone/app/users/vocabularies.py
+++ b/plone/app/users/vocabularies.py
@@ -4,6 +4,7 @@
 from plone.app.users.schema import ICombinedRegisterSchema
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import get_portal
 from Products.CMFPlone.utils import normalizeString
 from Products.CMFPlone.utils import safe_unicode
 from zope.interface import implementer
@@ -11,7 +12,6 @@
 from zope.schema.interfaces import IVocabularyFactory
 from zope.schema.vocabulary import SimpleTerm
 from zope.schema.vocabulary import SimpleVocabulary
-from zope.component.hooks import getSite
 
 
 # Define constants from the Join schema that should be added to the
@@ -70,10 +70,10 @@ class GroupIdVocabulary(object):
 
       >>> from zope.component import queryUtility
       >>> from zope.schema.interfaces import IVocabularyFactory
-      >>> from zope.component.hooks import getSite
+      >>> from Products.CMFPlone.utils import get_portal
       >>> from Products.CMFCore.utils import getToolByName
 
-      >>> groups_tool = getToolByName(getSite(), 'portal_groups')
+      >>> groups_tool = getToolByName(get_portal(), 'portal_groups')
       >>> groups_tool.addGroup(
       ...     'fancygroup', [], [],
       ...     title='Group Title',
@@ -84,7 +84,7 @@ class GroupIdVocabulary(object):
       >>> name = 'plone.app.users.group_ids'
       >>> util = queryUtility(IVocabularyFactory, name)
 
-      >>> fields = util(getSite())
+      >>> fields = util(get_portal())
       >>> fields
       <zope.schema.vocabulary.SimpleVocabulary object at ...>
 
@@ -96,7 +96,7 @@ class GroupIdVocabulary(object):
     """
 
     def __call__(self, context):
-        site = getSite()
+        site = get_portal()
         groups_tool = getToolByName(site, 'portal_groups')
         is_zope_manager = getSecurityManager().checkPermission(
             ManagePortal, context)
diff --git a/setup.py b/setup.py
index 5b8fb4a..83d20a4 100644
--- a/setup.py
+++ b/setup.py
@@ -2,7 +2,7 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.3.9.dev0'
+version = '2.4.dev0'
 
 long_description = u'{0}\n\n{1}'.format(
     open('README.rst').read(),


Repository: plone.app.users


Branch: refs/heads/master
Date: 2017-05-23T12:20:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.users/commit/7e79d0cbd6ca43fa691e1201b3ce4b37c9bfc150

Merge pull request #63 from plone/thet-upd

Bind views always to Portal

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/users/__init__.py
M plone/app/users/browser/__init__.py
M plone/app/users/browser/account.py
M plone/app/users/browser/configure.zcml
M plone/app/users/browser/membersearch.py
M plone/app/users/browser/passwordpanel.py
M plone/app/users/browser/personalpreferences.py
M plone/app/users/browser/register.py
M plone/app/users/browser/registersettingspanel.py
M plone/app/users/browser/schemaeditor.py
M plone/app/users/browser/userdatapanel.py
M plone/app/users/configure.zcml
M plone/app/users/field_extender.py
M plone/app/users/schema.py
M plone/app/users/setuphandlers.py
M plone/app/users/testing.py
M plone/app/users/tests/__init__.py
M plone/app/users/tests/base.py
M plone/app/users/tests/test_doctests.py
M plone/app/users/tests/test_exportimport.py
M plone/app/users/tests/test_new_user.py
M plone/app/users/tests/test_robot.py
M plone/app/users/tests/test_schema_types.py
M plone/app/users/tests/test_user_data_panel.py
M plone/app/users/tests/test_userid_generator.py
M plone/app/users/upgrades.py
M plone/app/users/vocabularies.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8042fe9..c16edfb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,8 @@
 CHANGES
 =======
 
-2.3.9 (unreleased)
-------------------
+2.4 (unreleased)
+----------------
 
 Breaking changes:
 
@@ -14,7 +14,15 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Use ``get_portal`` from Products.CMFPlone.utils instead of ``getSite``.
+  For plone.app.users we always want the Plone portal object until this package is fixed to support individual subsite settings.
+  [thet]
+
+- Remove dependency on ``zope.site``.
+  [thet]
+
+- Code cleanup.
+  [thet]
 
 
 2.3.8 (2016-09-23)
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index 85880ef..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/users/__init__.py b/plone/app/users/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/users/__init__.py
+++ b/plone/app/users/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/users/browser/__init__.py b/plone/app/users/browser/__init__.py
index e69de29..40a96af 100644
--- a/plone/app/users/browser/__init__.py
+++ b/plone/app/users/browser/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/app/users/browser/account.py b/plone/app/users/browser/account.py
index d782ed6..f06f9fd 100644
--- a/plone/app/users/browser/account.py
+++ b/plone/app/users/browser/account.py
@@ -1,21 +1,20 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
 from Acquisition import aq_inner
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import ISecuritySchema
-from Products.CMFPlone.utils import safe_unicode
-from Products.PlonePAS.tools.membership import default_portrait
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.statusmessages.interfaces import IStatusMessage
-from ZTUtils import make_query
-from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent
 from plone.app.users.browser.interfaces import IAccountPanelForm
 from plone.app.users.utils import notifyWidgetActionExecutionError
 from plone.autoform.form import AutoExtensibleForm
 from plone.namedfile.file import NamedBlobImage
 from plone.protect import CheckAuthenticator
 from plone.registry.interfaces import IRegistry
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.controlpanel.events import ConfigurationChangedEvent
+from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.utils import safe_unicode
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from Products.PlonePAS.tools.membership import default_portrait
+from Products.statusmessages.interfaces import IStatusMessage
 from z3c.form import button
 from z3c.form import form
 from zope import schema
@@ -24,6 +23,7 @@
 from zope.component import getUtility
 from zope.event import notify
 from zope.interface import implementer
+from ZTUtils import make_query
 
 
 MESSAGE_EMAIL_CANNOT_CHANGE = \
@@ -69,7 +69,7 @@ def _getProperty(self, name):
         return value
 
     def _setProperty(self, name, value):
-        if type(value) is set:
+        if isinstance(value, set):
             value = list(value)
         if value and isinstance(self.schema[name], schema.Choice):
             value = str(value)
diff --git a/plone/app/users/browser/configure.zcml b/plone/app/users/browser/configure.zcml
index 68f656e..9f9b6c3 100644
--- a/plone/app/users/browser/configure.zcml
+++ b/plone/app/users/browser/configure.zcml
@@ -4,71 +4,71 @@
     xmlns:five="http://namespaces.zope.org/five"
     i18n_domain="plone">
 
-    <include package="plone.autoform" />
-    <include package="plone.app.controlpanel" />
+  <include package="plone.autoform" />
+  <include package="plone.app.controlpanel" />
 
-    <browser:page
+  <browser:page
       name="member-registration"
       for="Products.CMFPlone.interfaces.IPloneSiteRoot"
       class=".registersettingspanel.RegistrationControlPanel"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
+  <browser:page
       name="register"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".register.RegistrationForm"
       permission="cmf.AddPortalMember"
       />
 
-    <browser:page
+  <browser:page
       name="new-user"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".register.AddUserForm"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="change-password"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".passwordpanel.PasswordPanel"
       permission="cmf.SetOwnPassword"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="personal-preferences"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".personalpreferences.PersonalPreferencesPanel"
       permission="cmf.SetOwnProperties"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="user-preferences"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".personalpreferences.PersonalPreferencesConfiglet"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
-        for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="personal-information"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".userdatapanel.UserDataPanel"
       permission="cmf.SetOwnProperties"
       />
 
-    <browser:page
-      for="plone.app.layout.navigation.interfaces.INavigationRoot"
+  <browser:page
       name="user-information"
+      for="plone.app.layout.navigation.interfaces.INavigationRoot"
       class=".userdatapanel.UserDataConfiglet"
       permission="plone.app.controlpanel.UsersAndGroups"
       />
 
-    <browser:page
-        name="member-fields"
-        for="*"
-        class=".schemaeditor.MemberSchemaContext"
-        permission="plone.app.controlpanel.UsersAndGroups"
-        allowed_interface="OFS.interfaces.IItem" />
+  <browser:page
+      name="member-fields"
+      for="*"
+      class=".schemaeditor.MemberSchemaContext"
+      permission="plone.app.controlpanel.UsersAndGroups"
+      allowed_interface="OFS.interfaces.IItem" />
 
   <browser:page
       name="edit"
@@ -76,29 +76,29 @@
       class=".schemaeditor.SchemaListingPage"
       permission="zope2.View" />
 
-    <browser:page
+  <browser:page
       name="member-search"
       for="*"
       class=".membersearch.MemberSearchForm"
       permission="zope2.View"
       />
 
-    <adapter
+  <adapter
       provides=".personalpreferences.IPersonalPreferences"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       factory=".personalpreferences.PersonalPreferencesPanelAdapter"
       />
 
-    <adapter
+  <adapter
       provides=".passwordpanel.IPasswordSchema"
       for="plone.app.layout.navigation.interfaces.INavigationRoot"
       factory=".passwordpanel.PasswordPanelAdapter"
       />
 
-    <subscriber
-        for="plone.app.users.browser.schemaeditor.IMemberSchemaContext
-             plone.schemaeditor.interfaces.ISchemaModifiedEvent"
-        handler="plone.app.users.browser.schemaeditor.updateSchema"
-        />
+  <subscriber
+      for="plone.app.users.browser.schemaeditor.IMemberSchemaContext
+           plone.schemaeditor.interfaces.ISchemaModifiedEvent"
+      handler="plone.app.users.browser.schemaeditor.updateSchema"
+      />
 
 </configure>
diff --git a/plone/app/users/browser/membersearch.py b/plone/app/users/browser/membersearch.py
index ec2ad14..4f3eb6c 100644
--- a/plone/app/users/browser/membersearch.py
+++ b/plone/app/users/browser/membersearch.py
@@ -1,9 +1,8 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.users.schema import checkEmailAddress
 from plone.autoform.form import AutoExtensibleForm
 from plone.supermodel import model
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from z3c.form import button
 from z3c.form import form
 from zope import schema
diff --git a/plone/app/users/browser/passwordpanel.py b/plone/app/users/browser/passwordpanel.py
index 536e47b..83f59f8 100644
--- a/plone/app/users/browser/passwordpanel.py
+++ b/plone/app/users/browser/passwordpanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_inner
+from plone.app.users.browser.account import AccountPanelForm
+from plone.app.users.utils import notifyWidgetActionExecutionError
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.statusmessages.interfaces import IStatusMessage
-from plone.app.users.browser.account import AccountPanelForm
-from plone.app.users.utils import notifyWidgetActionExecutionError
 from z3c.form import button
 from zope import schema
 from zope.interface import Interface
@@ -43,7 +43,7 @@ def __init__(self, context):
         self.context = getToolByName(context, 'portal_membership')
 
     def get_dummy(self):
-        """ We don't actually need to 'get' anything ..."""
+        """We don't actually need to 'get' anything ..."""
         return ''
 
     current_password = property(get_dummy)
diff --git a/plone/app/users/browser/personalpreferences.py b/plone/app/users/browser/personalpreferences.py
index 94f11fc..6102e96 100644
--- a/plone/app/users/browser/personalpreferences.py
+++ b/plone/app/users/browser/personalpreferences.py
@@ -1,13 +1,14 @@
 # -*- coding: utf-8 -*-
+from plone.app.users.browser.account import AccountPanelForm
+from plone.app.users.browser.account import AccountPanelSchemaAdapter
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.utils import getFSVersionTuple
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.users.browser.account import AccountPanelForm
-from plone.app.users.browser.account import AccountPanelSchemaAdapter
 from zope.interface import Interface
 from zope.schema import Choice
 
+
 try:
     import plone.app.event  # noqa
     HAS_PAE = True
diff --git a/plone/app/users/browser/register.py b/plone/app/users/browser/register.py
index fc8aa8d..993a98e 100644
--- a/plone/app/users/browser/register.py
+++ b/plone/app/users/browser/register.py
@@ -1,56 +1,50 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
+from plone.app.users.browser.account import AccountPanelSchemaAdapter
+from plone.app.users.browser.interfaces import ILoginNameGenerator
+from plone.app.users.browser.interfaces import IUserIdGenerator
+from plone.app.users.browser.schemaeditor import getFromBaseSchema
+from plone.app.users.schema import IAddUserSchema
+from plone.app.users.schema import ICombinedRegisterSchema
+from plone.app.users.schema import IRegisterSchema
+from plone.app.users.utils import notifyWidgetActionExecutionError
+from plone.app.users.utils import uuid_userid_generator
+from plone.autoform.form import AutoExtensibleForm
+from plone.protect import CheckAuthenticator
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.utils import get_portal
 from Products.CMFPlone.utils import normalizeString
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-from ZODB.POSException import ConflictError
-from plone.autoform.form import AutoExtensibleForm
-from plone.autoform.interfaces import OMITTED_KEY
-from plone.protect import CheckAuthenticator
-from plone.registry.interfaces import IRegistry
 from z3c.form import button
 from z3c.form import field
 from z3c.form import form
 from z3c.form.browser.checkbox import CheckBoxFieldWidget
 from z3c.form.interfaces import DISPLAY_MODE
 from zExceptions import Forbidden
-from zope.component import (
-    getUtility,
-    queryUtility,
-    getAdapter,
-    provideAdapter,
-    getMultiAdapter)
-from zope.component.hooks import getSite
+from ZODB.POSException import ConflictError
+from zope.component import getAdapter
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component import provideAdapter
+from zope.component import queryUtility
 from zope.schema import getFieldNames
+
 import logging
 
-from ..schema import (
-    IRegisterSchema,
-    IAddUserSchema,
-    ICombinedRegisterSchema
-)
-from ..utils import (
-    notifyWidgetActionExecutionError,
-    uuid_userid_generator,
-)
-from .account import AccountPanelSchemaAdapter
-from .schemaeditor import getFromBaseSchema
-
-from plone.app.users.browser.interfaces import ILoginNameGenerator
-from plone.app.users.browser.interfaces import IUserIdGenerator
 
 # Number of retries for creating a user id like bob-jones-42:
 RENAME_AFTER_CREATION_ATTEMPTS = 100
 
 
 def getRegisterSchema():
-    portal = getSite()
+    portal = get_portal()
     schema = getattr(portal, '_v_register_schema', None)
     if schema is None:
         portal._v_register_schema = schema = getFromBaseSchema(
@@ -70,7 +64,6 @@ class BaseRegistrationForm(AutoExtensibleForm, form.Form):
     formErrorsMessage = _('There were errors.')
     ignoreContext = True
     enableCSRFProtection = True
-    schema = ICombinedRegisterSchema
 
     # this attribute indicates if user was successfully registered
     _finishedRegister = False
@@ -302,7 +295,7 @@ def validate_registration(self, action, data):
 
         # passwords should match
         if 'password' in form_field_names:
-            assert('password_ctl' in form_field_names)
+            assert 'password_ctl' in form_field_names
             # Skip this check if password fields already have an error
             if not ('password' in error_keys or 'password_ctl' in error_keys):
                 password = data.get('password')
@@ -644,10 +637,8 @@ def updateFields(self):
             defaultFields['password'].field.required = False
             defaultFields['password_ctl'].field.required = False
             settings = self._get_security_settings()
-            if not settings.enable_user_pwd_choice:
-                defaultFields['mail_me'].field.default = True
-            else:
-                defaultFields['mail_me'].field.default = False
+            defaultFields['mail_me'].field.default =\
+                not settings.enable_user_pwd_choice
 
         # Append the manager-focused fields
         portal_props = getToolByName(self.context, 'portal_properties')
diff --git a/plone/app/users/browser/registersettingspanel.py b/plone/app/users/browser/registersettingspanel.py
index ada65e0..92d890b 100644
--- a/plone/app/users/browser/registersettingspanel.py
+++ b/plone/app/users/browser/registersettingspanel.py
@@ -1,10 +1,10 @@
 # -*- coding: utf-8 -*-
+from plone.app.users.schema import IRegistrationSettingsSchema
+from plone.protect import CheckAuthenticator
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-from plone.app.users.schema import IRegistrationSettingsSchema
-from plone.protect import CheckAuthenticator
 from z3c.form import button
 from z3c.form import field
 from z3c.form import form
@@ -28,7 +28,10 @@ def getContent(self):
         return {'user_registration_fields': props.getProperty(
             'user_registration_fields', [])}
 
-    @button.buttonAndHandler(_(u'label_apply_changes', default=u'Apply Changes'), name='save')
+    @button.buttonAndHandler(
+        _(u'label_apply_changes', default=u'Apply Changes'),
+        name='save'
+    )
     def action_save(self, action):
         # CSRF protection
         CheckAuthenticator(self.request)
diff --git a/plone/app/users/browser/schemaeditor.py b/plone/app/users/browser/schemaeditor.py
index 2445ae5..ddcedf6 100644
--- a/plone/app/users/browser/schemaeditor.py
+++ b/plone/app/users/browser/schemaeditor.py
@@ -1,33 +1,32 @@
-import copy
-import re
-import logging
-
-from zope.component import getGlobalSiteManager
-from zope.component.hooks import getSite
-from zope.annotation.interfaces import IAnnotations
-from zope.interface import Interface, implementer
-
-from Products.CMFPlone import PloneMessageFactory as _
-from Products.CMFPlone.interfaces import IPloneSiteRoot
-from Products.CMFCore.utils import getToolByName
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
-# from plone.memoize import volatile
-from plone.schemaeditor.browser.schema.traversal import SchemaContext
+# -*- coding: utf-8 -*-
+from plone.app.users.schema import IRegisterSchema
+from plone.app.users.schema import IUserDataSchema
+from plone.app.users.schema import SCHEMA_ANNOTATION
+from plone.app.users.schema import SCHEMATA_KEY
 from plone.schemaeditor.browser.schema.listing import SchemaListing
-from plone.supermodel.model import Model, finalizeSchemas, SchemaClass
+from plone.schemaeditor.browser.schema.traversal import SchemaContext
+from plone.supermodel import loadString
+from plone.supermodel.model import finalizeSchemas
+from plone.supermodel.model import Model
+from plone.supermodel.model import SchemaClass
 from plone.supermodel.parser import IFieldMetadataHandler
 from plone.supermodel.serializer import serialize
 from plone.supermodel.utils import ns
-from plone.supermodel import loadString
 from plone.z3cform.layout import FormWrapper
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.interfaces import IPloneSiteRoot
+from Products.CMFPlone.utils import get_portal
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from zope.annotation.interfaces import IAnnotations
+from zope.component import getGlobalSiteManager
+from zope.interface import implementer
+from zope.interface import Interface
+
+import copy
+import logging
+import re
 
-from ..schema import (
-    IUserDataSchema,
-    IRegisterSchema,
-    SCHEMA_ANNOTATION,
-    SCHEMATA_KEY,
-)
 
 USERS_NAMESPACE = 'http://namespaces.plone.org/supermodel/users'
 USERS_PREFIX = 'users'
@@ -73,7 +72,8 @@
 
 
 def log(message,
-        level='info', id='plone.app.users.browser.schemaeditor'):
+        level='info',
+        id='plone.app.users.browser.schemaeditor'):
     logger = logging.getLogger(id)
     getattr(logger, level)(message)
 
@@ -118,7 +118,7 @@ def updateSchema(object, event):
 
 
 def applySchema(snew_schema):
-    site = getSite()
+    site = get_portal()
 
     # get the old schema (currently stored in the annotation)
     old_schema = get_ttw_edited_schema()
@@ -277,14 +277,14 @@ def load_ttw_schema(string=None):
 
 def get_schema(site=None):
     if site is None:
-        site = getSite()
+        site = get_portal()
     annotations = IAnnotations(site)
     return annotations.get(SCHEMA_ANNOTATION, '')
 
 
 def set_schema(string, site=None):
     if site is None:
-        site = getSite()
+        site = get_portal()
     annotations = IAnnotations(site)
     annotations[SCHEMA_ANNOTATION] = string
 
diff --git a/plone/app/users/browser/userdatapanel.py b/plone/app/users/browser/userdatapanel.py
index 2b6f827..d6bc76a 100644
--- a/plone/app/users/browser/userdatapanel.py
+++ b/plone/app/users/browser/userdatapanel.py
@@ -1,25 +1,23 @@
 # -*- coding: utf-8 -*-
-from zope.component import getUtility
-from zope.component import provideAdapter
-from zope.component.hooks import getSite
+from plone.app.users.browser.account import AccountPanelForm
+from plone.app.users.browser.account import AccountPanelSchemaAdapter
+from plone.app.users.browser.schemaeditor import getFromBaseSchema
+from plone.app.users.schema import IUserDataSchema
+from plone.registry.interfaces import IRegistry
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.utils import get_portal
 from Products.CMFPlone.utils import set_own_login_name
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.app.users.browser.account import AccountPanelForm
-from plone.app.users.browser.account import AccountPanelSchemaAdapter
-from plone.registry.interfaces import IRegistry
 from zExceptions import NotFound
-
-from ..schema import IUserDataSchema
-from .schemaeditor import getFromBaseSchema
+from zope.component import getUtility
+from zope.component import provideAdapter
 
 import cgi
 
 
-
 class UserDataPanelAdapter(AccountPanelSchemaAdapter):
     """One does not simply set portrait, email might be used to login with.
     """
@@ -96,7 +94,7 @@ def __call__(self):
 
 
 def getUserDataSchema():
-    portal = getSite()
+    portal = get_portal()
     schema = getattr(portal, '_v_userdata_schema', None)
     if schema is None:
         portal._v_userdata_schema = schema = getFromBaseSchema(
diff --git a/plone/app/users/configure.zcml b/plone/app/users/configure.zcml
index 049c409..8846fce 100644
--- a/plone/app/users/configure.zcml
+++ b/plone/app/users/configure.zcml
@@ -3,79 +3,98 @@
     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
     i18n_domain="plone.app.users">
 
-    <include package="plone.supermodel" />
-    <include package="plone.autoform" />
-    <include package="plone.namedfile" />
-    <include package="plone.schema" />
-    <include package="plone.formwidget.namedfile" />
-    <include package="Products.CMFCore" file="permissions.zcml" />
-    <include package=".browser" />
-
-    <utility component=".vocabularies.UserRegistrationFieldsVocabularyFactory"
-             name="plone.app.users.user_registration_fields" />
-    <utility provides="zope.schema.interfaces.IVocabularyFactory"
-             component=".vocabularies.GroupIdVocabularyFactory"
-             name="plone.app.users.group_ids"/>
-
-    <genericsetup:registerProfile
-          name='default'
-          title='Import User Data'
-          directory='profiles/default'
-          description='Import default schema'
-          provides='Products.GenericSetup.interfaces.EXTENSION'
-        />
-
-    <genericsetup:exportStep
-          name="usersschema"
-          title="Export member custom TTW schema"
-          description="Export member custom TTW schema"
-          handler="plone.app.users.setuphandlers.export_schema">
-    </genericsetup:exportStep>
-    <genericsetup:importStep
-          name="usersschema"
-          title="Import member custom TTW schema"
-          description="Import member custom TTW schema"
-          handler="plone.app.users.setuphandlers.import_schema">
-    </genericsetup:importStep>
-
-    <genericsetup:upgradeStep
-        title="Upgrade to TTW Schema editing for user information form"
-        description=""
-        source="*"
-        destination="1"
-        handler=".upgrades.upgrade_to_ttw"
-        profile="plone.app.users:default" />
-
-    <adapter
-      factory=".field_extender.UserFormSelectionAdapter"
-      for="zope.schema.interfaces.IField"
-      provides=".field_extender.IUserFormSelection"
-      />
+  <include package="plone.supermodel" />
+  <include package="plone.autoform" />
+  <include package="plone.namedfile" />
+  <include package="plone.schema" />
+  <include package="plone.formwidget.namedfile" />
+  <include package="Products.CMFCore" file="permissions.zcml" />
+  <include package=".browser" />
 
-    <utility
-      factory=".field_extender.UserFormSelectionMetadata"
+
+  <!-- utilities -->
+  <utility
       name='plone.app.users.forms'
+      factory=".field_extender.UserFormSelectionMetadata"
       />
 
-    <adapter
-      factory=".field_extender.get_user_form_selection"
+  <utility
+      name="plone.app.users.user_registration_fields"
+      component=".vocabularies.UserRegistrationFieldsVocabularyFactory"
+      />
+
+  <utility
+      name="plone.app.users.group_ids"
+      provides="zope.schema.interfaces.IVocabularyFactory"
+      component=".vocabularies.GroupIdVocabularyFactory"
+      />
+
+  <utility
+      name="plone.app.users.schema.ProtectedTextLine"
+      provides="plone.schemaeditor.interfaces.IFieldFactory"
+      component=".schema.FullnameFieldFactory"
+      />
+
+  <utility
+      name="plone.app.users.schema.ProtectedEmail"
+      provides="plone.schemaeditor.interfaces.IFieldFactory"
+      component=".schema.EmailFieldFactory"
+      />
+
+
+  <!-- adapters -->
+  <adapter
+      for="zope.schema.interfaces.IField"
+      provides=".field_extender.IUserFormSelection"
+      factory=".field_extender.UserFormSelectionAdapter"
+      />
+
+  <adapter
+      name='plone.app.users.userformselection'
       for=".browser.schemaeditor.IMemberSchemaContext
-        zope.schema.interfaces.IField"
+           zope.schema.interfaces.IField"
       provides="plone.schemaeditor.interfaces.IFieldEditorExtender"
-      name='plone.app.users.userformselection'
+      factory=".field_extender.get_user_form_selection"
       />
 
-    <adapter
-      factory=".field_extender.get_user_addform_selection"
+  <adapter
+      name='plone.app.users.useraddformselection'
       for=".browser.schemaeditor.IMemberSchemaContext"
       provides="plone.schemaeditor.interfaces.IFieldEditorExtender"
-      name='plone.app.users.useraddformselection'
+      factory=".field_extender.get_user_addform_selection"
+      />
+
+
+  <!-- generic setup -->
+  <genericsetup:registerProfile
+      name='default'
+      title='Import User Data'
+      directory='profiles/default'
+      description='Import default schema'
+      provides='Products.GenericSetup.interfaces.EXTENSION'
+      />
+
+  <genericsetup:exportStep
+      name="usersschema"
+      title="Export member custom TTW schema"
+      description="Export member custom TTW schema"
+      handler="plone.app.users.setuphandlers.export_schema">
+  </genericsetup:exportStep>
+
+  <genericsetup:importStep
+      name="usersschema"
+      title="Import member custom TTW schema"
+      description="Import member custom TTW schema"
+      handler="plone.app.users.setuphandlers.import_schema">
+  </genericsetup:importStep>
+
+  <genericsetup:upgradeStep
+      title="Upgrade to TTW Schema editing for user information form"
+      description=""
+      source="*"
+      destination="1"
+      handler=".upgrades.upgrade_to_ttw"
+      profile="plone.app.users:default"
       />
 
-    <utility name="plone.app.users.schema.ProtectedTextLine"
-             provides="plone.schemaeditor.interfaces.IFieldFactory"
-             component=".schema.FullnameFieldFactory" />
-    <utility name="plone.app.users.schema.ProtectedEmail"
-             provides="plone.schemaeditor.interfaces.IFieldFactory"
-             component=".schema.EmailFieldFactory" />
 </configure>
diff --git a/plone/app/users/field_extender.py b/plone/app/users/field_extender.py
index 690a423..36156ae 100644
--- a/plone/app/users/field_extender.py
+++ b/plone/app/users/field_extender.py
@@ -1,19 +1,19 @@
-from zope.interface import Interface, implementer
-from zope import schema
-
-from zope.component import adapts
-from zope.schema.interfaces import IField
+# -*- coding: utf-8 -*-
+from plone.app.users.browser.schemaeditor import USERS_NAMESPACE
+from plone.app.users.browser.schemaeditor import USERS_PREFIX
+from plone.autoform import directives as form
 from plone.supermodel.interfaces import IFieldMetadataHandler
 from plone.supermodel.utils import ns
+from z3c.form.browser.checkbox import CheckBoxFieldWidget
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.schema.interfaces import IField
+from zope.schema.vocabulary import SimpleTerm
+from zope.schema.vocabulary import SimpleVocabulary
 
-from .browser.schemaeditor import USERS_NAMESPACE, USERS_PREFIX
-
-from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm
-
-from plone.autoform import directives as form
-
+import zope.schema
 
-from z3c.form.browser.checkbox import CheckBoxFieldWidget
 
 form_vocab = SimpleVocabulary([
     SimpleTerm(value=u'On Registration',
@@ -25,11 +25,11 @@
 
 class IUserFormSelection(Interface):
     form.widget(forms=CheckBoxFieldWidget)
-    forms = schema.List(
+    forms = zope.schema.List(
         title=u"Where should this field be shown",
         description=u"Does not apply to username or to email fields",
         required=True,
-        value_type=schema.Choice(vocabulary=form_vocab),
+        value_type=zope.schema.Choice(vocabulary=form_vocab),
     )
 
 
diff --git a/plone/app/users/schema.py b/plone/app/users/schema.py
index cfb4329..a28d75a 100644
--- a/plone/app/users/schema.py
+++ b/plone/app/users/schema.py
@@ -1,22 +1,23 @@
 # -*- coding: utf-8 -*-
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.CMFCore.utils import getToolByName
-from Products.CMFPlone.RegistrationTool import EmailAddressInvalid
-from Products.CMFPlone import PloneMessageFactory as _
-from zope import schema
-from zope.component import getUtility
-from zope.interface import Interface, implementer, implementer
-from ZTUtils import make_query
 from plone.formwidget.namedfile.widget import NamedImageWidget
 from plone.namedfile.interfaces import INamedImageField
+from plone.schema.email import Email
 from plone.schemaeditor.fields import FieldFactory
 from plone.schemaeditor.interfaces import IFieldFactory
+from Products.CMFCore.interfaces import ISiteRoot
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone import PloneMessageFactory as _
+from Products.CMFPlone.RegistrationTool import EmailAddressInvalid
 from z3c.form.interfaces import IFieldWidget
 from z3c.form.interfaces import IFormLayer
 from z3c.form.widget import FieldWidget
+from zope import schema
 from zope.component import adapter
+from zope.component import getUtility
+from zope.interface import implementer
+from zope.interface import Interface
+from ZTUtils import make_query
 
-from plone.schema.email import Email
 
 SCHEMA_ANNOTATION = "plone.app.users.schema"
 # must match the browser view name !
diff --git a/plone/app/users/setuphandlers.py b/plone/app/users/setuphandlers.py
index 719a3f2..4b93a2b 100644
--- a/plone/app/users/setuphandlers.py
+++ b/plone/app/users/setuphandlers.py
@@ -1,19 +1,20 @@
+# -*- coding: utf-8 -*-
 import logging
-
 import plone.app.users.browser.schemaeditor as ttw
 
+
 logger = logging.getLogger('plone.app.users.setuphandlers')
 
 FILE = 'userschema.xml'
 
 
 def import_schema(context):
-    """Import TTW Schema """
+    """Import TTW Schema
+    """
     data = context.readDataFile(FILE)
     if data is None:
         return
     ttw.applySchema(data)
-
     logger.info('Imported schema')
 
 
@@ -21,5 +22,5 @@ def export_schema(context):
     """Export TTW schema
     """
     schema = ttw.serialize_ttw_schema()
-    logger.info('Exported schema')
     context.writeDataFile(FILE, schema, 'text/xml')
+    logger.info('Exported schema')
diff --git a/plone/app/users/testing.py b/plone/app/users/testing.py
index c658aff..9ff4f83 100644
--- a/plone/app/users/testing.py
+++ b/plone/app/users/testing.py
@@ -7,6 +7,7 @@
 
 import doctest
 
+
 PLONE_APP_USERS_FIXTURE = PTC_FIXTURE
 PLONE_APP_USERS_FUNCTIONAL_TESTING = PTC_FUNCTIONAL_TESTING
 
diff --git a/plone/app/users/tests/__init__.py b/plone/app/users/tests/__init__.py
index 792d600..40a96af 100644
--- a/plone/app/users/tests/__init__.py
+++ b/plone/app/users/tests/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/app/users/tests/base.py b/plone/app/users/tests/base.py
index 8558ef5..2c1ad86 100644
--- a/plone/app/users/tests/base.py
+++ b/plone/app/users/tests/base.py
@@ -7,24 +7,23 @@
 """
 from AccessControl.SecurityInfo import ClassSecurityInfo
 from Acquisition import aq_base
-from Products.CMFPlone.interfaces.controlpanel import IMailSchema
+from OFS.Cache import Cacheable
+from plone.app.testing.bbb import PloneTestCase
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from plone.registry.interfaces import IRegistry
+from plone.testing.z2 import Browser
 from Products.CMFPlone.interfaces import ISecuritySchema
+from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
 from Products.PlonePAS.Extensions.Install import activatePluginInterfaces
-from plone.app.testing.bbb import PloneTestCase
 from Products.PluggableAuthService.interfaces.plugins import IValidationPlugin
 from Products.PluggableAuthService.plugins.BasePlugin import BasePlugin
 from Products.PluggableAuthService.utils import classImplements
-from plone.registry.interfaces import IRegistry
-from OFS.Cache import Cacheable
+from transaction import commit
 from zope.component import getSiteManager
 from zope.component import getUtility
 
-from plone.testing.z2 import Browser
-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
-from transaction import commit
-
 
 class BaseTestCase(PloneTestCase):
     """ base test case which adds amin user """
@@ -37,7 +36,7 @@ def afterSetUp(self):
         self.membership = self.portal.portal_membership
         self.security_settings = get_security_settings()
 
-        self.browser = Browser(self.layer['app']) 
+        self.browser = Browser(self.layer['app'])
         self.request = self.layer['request']
 
     def beforeTearDown(self):
@@ -87,6 +86,7 @@ def setMailHost():
     mail_settings.email_from_address = 'admin@foo.com'
     commit()
 
+
 def unsetMailHost():
     registry = getUtility(IRegistry)
     mail_settings = registry.forInterface(IMailSchema, prefix='plone')
@@ -94,11 +94,13 @@ def unsetMailHost():
     mail_settings.email_from_address = ''
     commit()
 
+
 def activateDefaultPasswordPolicy(portal):
     uf = portal.acl_users
     for policy in uf.objectIds(['Default Plone Password Policy']):
         activatePluginInterfaces(portal, policy)
 
+
 def addParrotPasswordPolicy(portal):
     # remove default policy
     uf = portal.acl_users
@@ -110,18 +112,21 @@ def addParrotPasswordPolicy(portal):
     obj = uf[obj.getId()]
     activatePluginInterfaces(portal, obj.getId())
 
-    #portal = getUtility(ISiteRoot)
+    # portal = getUtility(ISiteRoot)
     plugins = uf._getOb('plugins')
     validators = plugins.listPlugins(IValidationPlugin)
     assert validators
     commit()
 
+
 classImplements(DeadParrotPassword, IValidationPlugin)
 
+
 def get_security_settings():
     registry = getUtility(IRegistry)
     return registry.forInterface(ISecuritySchema, prefix="plone")
 
+
 def set_mock_mailhost(portal):
     portal._original_MailHost = portal.MailHost
     portal.MailHost = mailhost = MockMailHost('MailHost')
@@ -129,9 +134,9 @@ def set_mock_mailhost(portal):
     sm.unregisterUtility(provided=IMailHost)
     sm.registerUtility(mailhost, provided=IMailHost)
 
+
 def unset_mock_mailhost(portal):
     portal.MailHost = portal._original_MailHost
     sm = getSiteManager(context=portal)
     sm.unregisterUtility(provided=IMailHost)
     sm.registerUtility(aq_base(portal._original_MailHost), provided=IMailHost)
-
diff --git a/plone/app/users/tests/test_doctests.py b/plone/app/users/tests/test_doctests.py
index e5ad00d..21a35cd 100644
--- a/plone/app/users/tests/test_doctests.py
+++ b/plone/app/users/tests/test_doctests.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
-from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.app.users.testing import optionflags
+from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.testing import layered
 
 import doctest
diff --git a/plone/app/users/tests/test_exportimport.py b/plone/app/users/tests/test_exportimport.py
index 80a6eb2..ddad27f 100644
--- a/plone/app/users/tests/test_exportimport.py
+++ b/plone/app/users/tests/test_exportimport.py
@@ -1,11 +1,13 @@
-from Products.CMFCore.utils import getToolByName
-from Products.GenericSetup.tests.common import DummyImportContext
-from Products.GenericSetup.tests.common import DummyExportContext
+# -*- coding: utf-8 -*-
 from plone.app.testing.bbb import PloneTestCase
 from plone.app.users.browser.userdatapanel import getUserDataSchema
-from plone.app.users.setuphandlers import import_schema, export_schema
+from plone.app.users.setuphandlers import export_schema
+from plone.app.users.setuphandlers import import_schema
 from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.namedfile.field import NamedBlobImage
+from Products.CMFCore.utils import getToolByName
+from Products.GenericSetup.tests.common import DummyExportContext
+from Products.GenericSetup.tests.common import DummyImportContext
 from zope import schema
 
 
diff --git a/plone/app/users/tests/test_new_user.py b/plone/app/users/tests/test_new_user.py
index 298755f..5be5d1c 100644
--- a/plone/app/users/tests/test_new_user.py
+++ b/plone/app/users/tests/test_new_user.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from plone.app.users.tests.base import BaseTestCase
-from Products.CMFCore.utils import getToolByName
 from plone.app.users.utils import uuid_userid_generator
+from Products.CMFCore.utils import getToolByName
 
 import transaction
 
@@ -42,7 +42,7 @@ def afterSetUp(self):
         self.portal.acl_users._doAddUser(
             'siteadmin', 'secret', ['Site Administrator'], []
         )
-        transaction.commit() 
+        transaction.commit()
         self.browser.addHeader('Authorization', 'Basic siteadmin:secret')
 
     def test_uuid_disabled_email_as_login_disabled(self):
diff --git a/plone/app/users/tests/test_robot.py b/plone/app/users/tests/test_robot.py
index 6311320..8b7a9f6 100644
--- a/plone/app/users/tests/test_robot.py
+++ b/plone/app/users/tests/test_robot.py
@@ -1,9 +1,11 @@
-import unittest
-import os
-import robotsuite
+# -*- coding: utf-8 -*-
 from plone.app.users.testing import PLONE_APP_USERS_ROBOT
 from plone.testing import layered
 
+import os
+import robotsuite
+import unittest
+
 
 def test_suite():
     suite = unittest.TestSuite()
diff --git a/plone/app/users/tests/test_schema_types.py b/plone/app/users/tests/test_schema_types.py
index 03b2ca9..529104f 100644
--- a/plone/app/users/tests/test_schema_types.py
+++ b/plone/app/users/tests/test_schema_types.py
@@ -1,10 +1,14 @@
+# -*- coding: utf-8 -*-
 from pkg_resources import resource_stream
-from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD, TEST_USER_ID
+from plone.app.testing import TEST_USER_ID
+from plone.app.testing import TEST_USER_NAME
+from plone.app.testing import TEST_USER_PASSWORD
 from plone.app.testing.bbb import PloneTestCase
 from plone.app.users.setuphandlers import import_schema
 from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
 from Products.GenericSetup.tests.common import DummyImportContext
+
 import transaction
 
 
diff --git a/plone/app/users/tests/test_user_data_panel.py b/plone/app/users/tests/test_user_data_panel.py
index a9aa7e0..dd3ec3f 100644
--- a/plone/app/users/tests/test_user_data_panel.py
+++ b/plone/app/users/tests/test_user_data_panel.py
@@ -1,6 +1,7 @@
-from zExceptions import NotFound
+# -*- coding: utf-8 -*-
 from plone.app.users.browser.userdatapanel import UserDataPanel
 from plone.app.users.testing import PLONE_APP_USERS_FUNCTIONAL_TESTING
+from zExceptions import NotFound
 from zope.i18n import translate
 
 import unittest
diff --git a/plone/app/users/tests/test_userid_generator.py b/plone/app/users/tests/test_userid_generator.py
index ab1d267..50ab33f 100644
--- a/plone/app/users/tests/test_userid_generator.py
+++ b/plone/app/users/tests/test_userid_generator.py
@@ -1,13 +1,10 @@
 # -*- coding: utf-8 -*-
 # Note: test setup somehow fails when only tests from this file are run.
-from Products.CMFPlone.interfaces import ISecuritySchema
 from plone.app.users.browser.interfaces import IUserIdGenerator
 from plone.app.users.browser.register import BaseRegistrationForm
 from plone.app.users.tests.base import BaseTestCase
 from plone.app.users.utils import uuid_userid_generator
-from plone.registry.interfaces import IRegistry
 from zope.component import getSiteManager
-from zope.component import getUtility
 
 
 class TestGenerateUserId(BaseTestCase):
diff --git a/plone/app/users/upgrades.py b/plone/app/users/upgrades.py
index 7d874bb..a268934 100644
--- a/plone/app/users/upgrades.py
+++ b/plone/app/users/upgrades.py
@@ -1,14 +1,19 @@
-import copy
+# -*- coding: utf-8 -*-
 from plone.app.users.browser import schemaeditor
 from plone.namedfile.field import NamedBlobImage
 from plone.schemaeditor.interfaces import IEditableSchema
-from plone.supermodel.model import finalizeSchemas, Schema, SchemaClass
+from plone.supermodel.model import finalizeSchemas
+from plone.supermodel.model import Schema
+from plone.supermodel.model import SchemaClass
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from zope import schema
 from zope.interface import Interface
 
+import copy
 import logging
+
+
 log = logging.getLogger("plone.app.users:upgrade")
 
 
diff --git a/plone/app/users/vocabularies.py b/plone/app/users/vocabularies.py
index 023a2d7..aa617cc 100644
--- a/plone/app/users/vocabularies.py
+++ b/plone/app/users/vocabularies.py
@@ -1,18 +1,18 @@
 # -*- coding: utf-8 -*-
 from AccessControl import getSecurityManager
+from browser.schemaeditor import getFromBaseSchema
+from plone.app.users.schema import ICombinedRegisterSchema
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import get_portal
 from Products.CMFPlone.utils import normalizeString
 from Products.CMFPlone.utils import safe_unicode
 from zope.interface import implementer
 from zope.schema import getFieldNames
 from zope.schema.interfaces import IVocabularyFactory
-from zope.schema.vocabulary import SimpleVocabulary
 from zope.schema.vocabulary import SimpleTerm
-from zope.site.hooks import getSite
+from zope.schema.vocabulary import SimpleVocabulary
 
-from browser.schemaeditor import getFromBaseSchema
-from .schema import ICombinedRegisterSchema
 
 # Define constants from the Join schema that should be added to the
 # vocab of the join fields setting in usergroupssettings controlpanel.
@@ -59,6 +59,7 @@ def __call__(self, context):
 
         return SimpleVocabulary([SimpleTerm(v, v, v) for v in values])
 
+
 UserRegistrationFieldsVocabularyFactory = UserRegistrationFieldsVocabulary()
 
 
@@ -69,10 +70,10 @@ class GroupIdVocabulary(object):
 
       >>> from zope.component import queryUtility
       >>> from zope.schema.interfaces import IVocabularyFactory
-      >>> from zope.site.hooks import getSite
+      >>> from Products.CMFPlone.utils import get_portal
       >>> from Products.CMFCore.utils import getToolByName
 
-      >>> groups_tool = getToolByName(getSite(), 'portal_groups')
+      >>> groups_tool = getToolByName(get_portal(), 'portal_groups')
       >>> groups_tool.addGroup(
       ...     'fancygroup', [], [],
       ...     title='Group Title',
@@ -83,7 +84,7 @@ class GroupIdVocabulary(object):
       >>> name = 'plone.app.users.group_ids'
       >>> util = queryUtility(IVocabularyFactory, name)
 
-      >>> fields = util(getSite())
+      >>> fields = util(get_portal())
       >>> fields
       <zope.schema.vocabulary.SimpleVocabulary object at ...>
 
@@ -95,7 +96,7 @@ class GroupIdVocabulary(object):
     """
 
     def __call__(self, context):
-        site = getSite()
+        site = get_portal()
         groups_tool = getToolByName(site, 'portal_groups')
         is_zope_manager = getSecurityManager().checkPermission(
             ManagePortal, context)
diff --git a/setup.py b/setup.py
index d5f1cd2..83d20a4 100644
--- a/setup.py
+++ b/setup.py
@@ -2,11 +2,12 @@
 from setuptools import find_packages
 from setuptools import setup
 
-version = '2.3.9.dev0'
-
-long_description = '{0}\n{1}'.format(open('README.rst').read(),
-                                     open('CHANGES.rst').read())
+version = '2.4.dev0'
 
+long_description = u'{0}\n\n{1}'.format(
+    open('README.rst').read(),
+    open('CHANGES.rst').read()
+)
 
 extras_require = {
     'test': [
@@ -66,7 +67,6 @@
         'zope.event',
         'zope.interface',
         'zope.schema',
-        'zope.site',
     ],
     entry_points="""
     [z3c.autoinclude.plugin]


