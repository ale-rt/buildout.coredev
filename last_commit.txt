Repository: plone.memoize


Branch: refs/heads/master
Date: 2015-12-14T14:14:39+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/51bb4b88f58afb5056ced481a73220365e96c4a8

minor pep8

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/memoize/__init__.py
M plone/memoize/compress.py
M plone/memoize/forever.py
M plone/memoize/instance.py
M plone/memoize/interfaces.py
M plone/memoize/ram.py
M plone/memoize/request.py
M plone/memoize/tests.py
M plone/memoize/view.py
M plone/memoize/volatile.py
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index cbb74d3..3f25b90 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*"
+- Minor PEP 8.
+  [thet]
 
 
 1.1.1 (2011-05-12)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/memoize/__init__.py b/plone/memoize/__init__.py
index 792d600..40a96af 100644
--- a/plone/memoize/__init__.py
+++ b/plone/memoize/__init__.py
@@ -1 +1 @@
-#
+# -*- coding: utf-8 -*-
diff --git a/plone/memoize/compress.py b/plone/memoize/compress.py
index 59986be..2b7f00f 100644
--- a/plone/memoize/compress.py
+++ b/plone/memoize/compress.py
@@ -1,5 +1,5 @@
-"""
-In order to use Peter Bengtsson's slimmer library available from
+# -*- coding: utf-8 -*-
+"""In order to use Peter Bengtsson's slimmer library available from
 http://www.issuetrackerproduct.com/Download#slimmer
 you need to register the XHTMLSlimmer utility like this:
 
@@ -35,11 +35,10 @@
    u'<html><body><span>hello.</span></body><html>'
 """
 
+from plone.memoize.interfaces import IXHTMLCompressor
 from zope.component import queryUtility
 from zope.interface import implements
 
-from plone.memoize.interfaces import IXHTMLCompressor
-
 SLIMMER = True
 try:
     from slimmer import xhtml_slimmer
diff --git a/plone/memoize/forever.py b/plone/memoize/forever.py
index 16fb739..5e020e6 100644
--- a/plone/memoize/forever.py
+++ b/plone/memoize/forever.py
@@ -1,5 +1,5 @@
-"""
-Memo decorators for globals - memoized values survive for as long as the
+# -*- coding: utf-8 -*-
+"""Memo decorators for globals - memoized values survive for as long as the
 process lives.
 
 Stores values in a module-level variable.
diff --git a/plone/memoize/instance.py b/plone/memoize/instance.py
index f61cd9b..7310bb9 100644
--- a/plone/memoize/instance.py
+++ b/plone/memoize/instance.py
@@ -1,5 +1,5 @@
-"""
-Memo decorators for instances.
+# -*- coding: utf-8 -*-
+"""Memo decorators for instances.
 
 Stores values in an attribute on the instance. See instance.rst.
 
@@ -19,7 +19,7 @@ def clear(self, inst):
     def clearbefore(self, func):
 
         def clear(*args, **kwargs):
-            inst=args[0]
+            inst = args[0]
             self.clear(inst)
             return func(*args, **kwargs)
         return clear
@@ -27,7 +27,7 @@ def clear(*args, **kwargs):
     def clearafter(self, func):
 
         def clear(*args, **kwargs):
-            inst=args[0]
+            inst = args[0]
             val = func(*args, **kwargs)
             self.clear(inst)
             return val
@@ -48,8 +48,8 @@ def memogetter(*args, **kwargs):
             key = (func.__name__, args, frozenset(kwargs.items()))
             val = cache.get(key, _marker)
             if val is _marker:
-                val=func(*args, **kwargs)
-                cache[key]=val
+                val = func(*args, **kwargs)
+                cache[key] = val
                 setattr(inst, self.propname, cache)
             return val
         return memogetter
diff --git a/plone/memoize/interfaces.py b/plone/memoize/interfaces.py
index 5168bcd..3bae4df 100644
--- a/plone/memoize/interfaces.py
+++ b/plone/memoize/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope.interface import Interface
 
 
diff --git a/plone/memoize/ram.py b/plone/memoize/ram.py
index e4a3624..c5f1a76 100644
--- a/plone/memoize/ram.py
+++ b/plone/memoize/ram.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """A cache decorator that uses RAMCache by default.
 
 See README.rst and the `volatile` module for more details.
@@ -94,15 +95,13 @@
   1
 """
 
-import cPickle
-
-from zope import interface
+from plone.memoize import volatile
+from plone.memoize.interfaces import ICacheChooser
 from zope import component
-from zope.ramcache.interfaces.ram import IRAMCache
+from zope import interface
 from zope.ramcache import ram
-
-from plone.memoize.interfaces import ICacheChooser
-from plone.memoize import volatile
+from zope.ramcache.interfaces.ram import IRAMCache
+import cPickle
 
 try:
     from hashlib import md5
diff --git a/plone/memoize/request.py b/plone/memoize/request.py
index aac2232..b910325 100644
--- a/plone/memoize/request.py
+++ b/plone/memoize/request.py
@@ -1,14 +1,12 @@
-"""
-Memoize decorator for methods.
+# -*- coding: utf-8 -*-
+"""Memoize decorator for methods.
 
 Stores values in an annotation of the request.
 """
 
-import inspect
-
-from zope.annotation.interfaces import IAnnotations
-
 from plone.memoize import volatile
+from zope.annotation.interfaces import IAnnotations
+import inspect
 
 _marker = object()
 
@@ -60,14 +58,14 @@ def _store_in_annotation(fun, *args, **kwargs):
         if spec[3] is not None:
             expected_num_args = len(spec[0]) - len(spec[3])
         if num_args != expected_num_args:
-            raise TypeError("%s() takes exactly %s arguments (%s given)" \
-                % (fun.func_name, expected_num_args, num_args))
+            raise TypeError("%s() takes exactly %s arguments (%s given)"
+                            % (fun.func_name, expected_num_args, num_args))
 
         for index, name in enumerate(spec[0]):
             if index < num_args:
                 vars[name] = args[index]
             else:
-                vars[name] = kwargs.get(name, spec[3][index-num_args])
+                vars[name] = kwargs.get(name, spec[3][index - num_args])
         request = eval(expr, {}, vars)
         return IAnnotations(request)
     return _store_in_annotation
diff --git a/plone/memoize/tests.py b/plone/memoize/tests.py
index d822362..629392b 100644
--- a/plone/memoize/tests.py
+++ b/plone/memoize/tests.py
@@ -1,8 +1,8 @@
-import unittest
-
+# -*- coding: utf-8 -*-
 from zope.component.testing import setUp, tearDown
 from zope.configuration.xmlconfig import XMLConfig
 from zope.testing import doctest
+import unittest
 
 optionflags = doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS
 
@@ -46,6 +46,6 @@ def test_suite():
                              setUp=configurationSetUp,
                              tearDown=tearDown,
                              optionflags=optionflags),
-        )
+    )
 
     return unittest.TestSuite(tests)
diff --git a/plone/memoize/view.py b/plone/memoize/view.py
index 342b5cc..da1e5cd 100644
--- a/plone/memoize/view.py
+++ b/plone/memoize/view.py
@@ -1,5 +1,5 @@
-"""
-Memoize decorator for views.
+# -*- coding: utf-8 -*-
+"""Memoize decorator for views.
 
 Stores values in an annotation of the request. See view.rst.
 """
diff --git a/plone/memoize/volatile.py b/plone/memoize/volatile.py
index 5be121f..641c8b9 100644
--- a/plone/memoize/volatile.py
+++ b/plone/memoize/volatile.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """A flexible caching decorator.
 
 This module provides a cache decorator `cache` that you can use to
@@ -200,6 +201,7 @@ class again, this time with a cached `pow` method:
 
 
 class CleanupDict(dict):
+
     """A dict that automatically cleans up items that haven't been
     accessed in a given timespan on *set*.
 
@@ -224,7 +226,7 @@ class CleanupDict(dict):
       ...
       KeyError: 'spam'
     """
-    cleanup_period = 60 * 60 * 24 * 3 # 3 days
+    cleanup_period = 60 * 60 * 24 * 3  # 3 days
 
     def __init__(self, cleanup_period=None):
         super(CleanupDict, self).__init__()
diff --git a/setup.py b/setup.py
index 8dc1fb8..bcba279 100644
--- a/setup.py
+++ b/setup.py
@@ -6,51 +6,50 @@ def read(*rnames):
     return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
 
 
-version = '1.1.2'
+version = '1.1.2.dev0'
 
-long_description = (
-    read('README.rst')
-    + '\n' +
-    read('plone', 'memoize', 'README.rst')
-    + '\n' +
-    read('CHANGES.rst')
-    + '\n'
-    )
+long_description = u"\n".join([
+    read('README.rst'),
+    read('plone', 'memoize', 'README.rst'),
+    read('CHANGES.rst'),
+])
 
-setup(name='plone.memoize',
-      version=version,
-      description="Decorators for caching the values of functions and methods",
-      long_description=long_description,
-      classifiers=[
-          "Development Status :: 5 - Production/Stable",
-          "Environment :: Web Environment",
-          "Framework :: Plone",
-          "Framework :: Zope2",
-          "License :: OSI Approved :: GNU General Public License (GPL)",
-          "Operating System :: OS Independent",
-          "Programming Language :: Python",
-        ],
-      keywords='plone memoize decorator cache',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='http://pypi.python.org/pypi/plone.memoize',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      extras_require=dict(
-          test=[
+
+setup(
+    name='plone.memoize',
+    version=version,
+    description="Decorators for caching the values of functions and methods",
+    long_description=long_description,
+    classifiers=[
+        "Development Status :: 5 - Production/Stable",
+        "Environment :: Web Environment",
+        "Framework :: Plone",
+        "Framework :: Zope2",
+        "License :: OSI Approved :: GNU General Public License (GPL)",
+        "Operating System :: OS Independent",
+        "Programming Language :: Python",
+    ],
+    keywords='plone memoize decorator cache',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='http://pypi.python.org/pypi/plone.memoize',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    extras_require=dict(
+        test=[
             'zope.configuration',
             'zope.publisher',
             'zope.testing',
-          ]
-      ),
-      install_requires=[
+        ]
+    ),
+    install_requires=[
         'setuptools',
         'zope.annotation',
         'zope.component',
         'zope.interface',
         'zope.ramcache',
-      ],
-      )
+    ],
+)


