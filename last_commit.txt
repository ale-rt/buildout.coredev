Repository: plone.i18n


Branch: refs/heads/master
Date: 2016-07-05T23:16:36+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.i18n/commit/40fafb0de9aa8b755f17fd5554e5aa00618d1ae1

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/languages.py
M plone/i18n/negotiate/negotiate.py
M plone/i18n/normalizer/__init__.py
M plone/i18n/normalizer/adapters.py
M plone/i18n/normalizer/bg.py
M plone/i18n/normalizer/de.py
M plone/i18n/normalizer/el.py
M plone/i18n/normalizer/es.py
M plone/i18n/normalizer/fr.py
M plone/i18n/utility.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6692fa3..f9c2c21 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 3.0.4 (2016-03-31)
diff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py
index af24f0b..9d5815b 100644
--- a/plone/i18n/locales/cctld.py
+++ b/plone/i18n/locales/cctld.py
@@ -7,15 +7,14 @@
 # http://en.wikipedia.org/wiki/List_of_Internet_top-level_domains
 
 from plone.i18n.locales.interfaces import ICcTLDInformation
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ICcTLDInformation)
 class CcTLDInformation(object):
     """A list of country code top level domains their relevant languages.
     """
 
-    implements(ICcTLDInformation)
-
     def getAvailableTLDs(self):
         """Return a sequence of country code top level domains.
         """
diff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py
index 82e06ad..eda81b5 100644
--- a/plone/i18n/locales/countries.py
+++ b/plone/i18n/locales/countries.py
@@ -1,13 +1,13 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.locales.interfaces import ICountryAvailability
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ICountryAvailability)
 class CountryAvailability(object):
     """A list of available coutries.
     """
-    implements(ICountryAvailability)
 
     def getAvailableCountries(self):
         """Return a sequence of country tags for available countries.
diff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py
index 7c518b5..4424ffc 100644
--- a/plone/i18n/locales/languages.py
+++ b/plone/i18n/locales/languages.py
@@ -3,13 +3,13 @@
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
 from plone.i18n.locales.interfaces import IMetadataLanguageAvailability
 from plone.i18n.locales.interfaces import ILanguageAvailability
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ILanguageAvailability)
 class LanguageAvailability(object):
     """A list of available languages.
     """
-    implements(ILanguageAvailability)
 
     def getAvailableLanguages(self, combined=False):
         """Return a sequence of language tags for available languages.
@@ -36,18 +36,18 @@ def getLanguageListing(self, combined=False):
         return [(code, languages[code][u'name']) for code in languages]
 
 
+@implementer(IContentLanguageAvailability)
 class ContentLanguageAvailability(LanguageAvailability):
     """A list of available content languages.
     """
-    implements(IContentLanguageAvailability)
 
 contentlanguages = ContentLanguageAvailability()
 
 
+@implementer(IMetadataLanguageAvailability)
 class MetadataLanguageAvailability(LanguageAvailability):
     """A list of available metadata languages.
     """
-    implements(IMetadataLanguageAvailability)
 
 metadatalanguages = MetadataLanguageAvailability()
 
diff --git a/plone/i18n/negotiate/negotiate.py b/plone/i18n/negotiate/negotiate.py
index c2d9e7d..5f55c09 100644
--- a/plone/i18n/negotiate/negotiate.py
+++ b/plone/i18n/negotiate/negotiate.py
@@ -1,12 +1,12 @@
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.interfaces import INegotiateLanguage
 from zope.component import getUtility
 from plone.i18n.interfaces import ILanguageUtility
 
 
+@implementer(INegotiateLanguage)
 class NegotiateLanguage(object):
     """Perform default language negotiation"""
-    implements(INegotiateLanguage)
 
     def __init__(self, site, request):
         """Setup the current language stuff."""
diff --git a/plone/i18n/normalizer/__init__.py b/plone/i18n/normalizer/__init__.py
index 39565f1..ef7a191 100644
--- a/plone/i18n/normalizer/__init__.py
+++ b/plone/i18n/normalizer/__init__.py
@@ -6,7 +6,7 @@
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 # Define and compile static regexes
 FILENAME_REGEX = re.compile(r"^(.+)\.(\w{,4})$")
@@ -40,6 +40,7 @@ def cropName(base, maxLength=MAX_LENGTH):
     return base
 
 
+@implementer(IIDNormalizer)
 class IDNormalizer(object):
     """
     This normalizer can normalize any unicode string and returns a
@@ -53,7 +54,6 @@ class IDNormalizer(object):
       >>> verifyClass(IIDNormalizer, IDNormalizer)
       True
     """
-    implements(IIDNormalizer)
 
     def normalize(self, text, locale=None, max_length=MAX_LENGTH):
         """
@@ -87,6 +87,7 @@ def normalize(self, text, locale=None, max_length=MAX_LENGTH):
         return cropName(text, maxLength=max_length)
 
 
+@implementer(IFileNameNormalizer)
 class FileNameNormalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -98,7 +99,6 @@ class FileNameNormalizer(object):
       >>> verifyClass(IFileNameNormalizer, FileNameNormalizer)
       True
     """
-    implements(IFileNameNormalizer)
 
     def normalize(self, text, locale=None, max_length=MAX_FILENAME_LENGTH):
         """
@@ -148,6 +148,7 @@ def normalize(self, text, locale=None, max_length=MAX_FILENAME_LENGTH):
         return base
 
 
+@implementer(IURLNormalizer)
 class URLNormalizer(object):
     """
     This normalizer can normalize any unicode string and returns a URL-safe
@@ -159,7 +160,6 @@ class URLNormalizer(object):
       >>> verifyClass(IURLNormalizer, URLNormalizer)
       True
     """
-    implements(IURLNormalizer)
 
     def normalize(self, text, locale=None, max_length=MAX_URL_LENGTH):
         """
diff --git a/plone/i18n/normalizer/adapters.py b/plone/i18n/normalizer/adapters.py
index 798fc74..b05b4b3 100644
--- a/plone/i18n/normalizer/adapters.py
+++ b/plone/i18n/normalizer/adapters.py
@@ -4,10 +4,11 @@
 from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer
 
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 from zope.i18n.interfaces import IUserPreferredLanguages
 
 
+@implementer(IUserPreferredFileNameNormalizer)
 class UserPreferredFileNameNormalizer(object):
     """
     An adapter for the HTTPRequest to provide user preferred language
@@ -19,7 +20,6 @@ class UserPreferredFileNameNormalizer(object):
       >>> verifyClass(IUserPreferredFileNameNormalizer, UserPreferredFileNameNormalizer)
       True
     """
-    implements(IUserPreferredFileNameNormalizer)
 
     def __init__(self, context):
         self.context = context # the context must be the request
@@ -35,6 +35,7 @@ def normalize(self, text):
         return util.normalize(text, locale=locale)
 
 
+@implementer(IUserPreferredURLNormalizer)
 class UserPreferredURLNormalizer(object):
     """
     An adapter for the HTTPRequest to provide user preferred language
@@ -46,7 +47,6 @@ class UserPreferredURLNormalizer(object):
       >>> verifyClass(IUserPreferredURLNormalizer, UserPreferredURLNormalizer)
       True
     """
-    implements(IUserPreferredURLNormalizer)
 
     def __init__(self, context):
         self.context = context # the context must be the request
diff --git a/plone/i18n/normalizer/bg.py b/plone/i18n/normalizer/bg.py
index 4448fcf..013a914 100644
--- a/plone/i18n/normalizer/bg.py
+++ b/plone/i18n/normalizer/bg.py
@@ -1,43 +1,43 @@
-# -*- coding: UTF-8 -*-
-
-from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
-from plone.i18n.normalizer.base import mapUnicode
-
-# Bulgarian character mapping
-mapping = {1040: 'A', 1041: 'B', 1042: 'V', 1043: 'G', 1044: 'D', 1045: 'E',
-           1046: 'ZH', 1047: 'Z', 1048: 'I', 1049: 'Y', 1050: 'K', 1051: 'L',
-           1052: 'M', 1053: 'N', 1054: 'O', 1055: 'P', 1056: 'R', 1057: 'S',
-           1058: 'T', 1059: 'U', 1060: 'F', 1061: 'H', 1062: 'TS', 1063: 'CH',
-           1064: 'SH', 1065: 'SHT', 1066: 'A', 1068: 'Y', 1070: 'YU',
-           1071: 'YA', 1072: 'a', 1073: 'b', 1074: 'v', 1075: 'g', 1076: 'd',
-           1077: 'e', 1078: 'zh', 1079: 'z', 1080: 'i', 1081: 'y', 1082: 'k',
-           1083: 'l', 1084: 'm', 1085: 'n', 1086: 'o', 1087: 'p', 1088: 'r',
-           1089: 's', 1090: 't', 1091: 'u', 1092: 'f', 1093: 'h', 1094: 'ts',
-           1095: 'ch', 1096: 'sh', 1097: 'sht', 1098: 'a', 1100: 'y',
-           1102: 'yu', 1103: 'ya'}
-
-class Normalizer(object):
-    """
-    This normalizer can normalize any unicode string and returns a version
-    that only contains of ASCII characters.
-
-    Let's make sure that this implementation actually fulfills the API.
-
-      >>> from zope.interface.verify import verifyClass
-      >>> verifyClass(INormalizer, Normalizer)
-      True
-
-      >>> norm = Normalizer()
-      >>> norm.normalize(u'\u0429')
-      'SHT'
-    """
-    implements(INormalizer)
-
-    def normalize(self, text, locale=None, max_length=None):
-        """
-        Returns a normalized text. text has to be a unicode string.
-        """
-        return mapUnicode(text, mapping=mapping)
-
-normalizer = Normalizer()
+# -*- coding: UTF-8 -*-
+
+from plone.i18n.normalizer.interfaces import INormalizer
+from zope.interface import implementer
+from plone.i18n.normalizer.base import mapUnicode
+
+# Bulgarian character mapping
+mapping = {1040: 'A', 1041: 'B', 1042: 'V', 1043: 'G', 1044: 'D', 1045: 'E',
+           1046: 'ZH', 1047: 'Z', 1048: 'I', 1049: 'Y', 1050: 'K', 1051: 'L',
+           1052: 'M', 1053: 'N', 1054: 'O', 1055: 'P', 1056: 'R', 1057: 'S',
+           1058: 'T', 1059: 'U', 1060: 'F', 1061: 'H', 1062: 'TS', 1063: 'CH',
+           1064: 'SH', 1065: 'SHT', 1066: 'A', 1068: 'Y', 1070: 'YU',
+           1071: 'YA', 1072: 'a', 1073: 'b', 1074: 'v', 1075: 'g', 1076: 'd',
+           1077: 'e', 1078: 'zh', 1079: 'z', 1080: 'i', 1081: 'y', 1082: 'k',
+           1083: 'l', 1084: 'm', 1085: 'n', 1086: 'o', 1087: 'p', 1088: 'r',
+           1089: 's', 1090: 't', 1091: 'u', 1092: 'f', 1093: 'h', 1094: 'ts',
+           1095: 'ch', 1096: 'sh', 1097: 'sht', 1098: 'a', 1100: 'y',
+           1102: 'yu', 1103: 'ya'}
+
+@implementer(INormalizer)
+class Normalizer(object):
+    """
+    This normalizer can normalize any unicode string and returns a version
+    that only contains of ASCII characters.
+
+    Let's make sure that this implementation actually fulfills the API.
+
+      >>> from zope.interface.verify import verifyClass
+      >>> verifyClass(INormalizer, Normalizer)
+      True
+
+      >>> norm = Normalizer()
+      >>> norm.normalize(u'\u0429')
+      'SHT'
+    """
+
+    def normalize(self, text, locale=None, max_length=None):
+        """
+        Returns a normalized text. text has to be a unicode string.
+        """
+        return mapUnicode(text, mapping=mapping)
+
+normalizer = Normalizer()
diff --git a/plone/i18n/normalizer/de.py b/plone/i18n/normalizer/de.py
index 20ca79d..2fa0655 100644
--- a/plone/i18n/normalizer/de.py
+++ b/plone/i18n/normalizer/de.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # German character mapping
@@ -23,6 +23,7 @@
     8364: 'euro'
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -38,7 +39,6 @@ class Normalizer(object):
       >>> norm.normalize(u'\xe4')
       'ae'
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/normalizer/el.py b/plone/i18n/normalizer/el.py
index 89a8c76..5baf133 100644
--- a/plone/i18n/normalizer/el.py
+++ b/plone/i18n/normalizer/el.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # Greek character mapping
@@ -18,6 +18,7 @@
     969: 'o', 970: 'i', 971: 'y', 972: 'o', 973: 'y', 974: 'o',
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -33,7 +34,6 @@ class Normalizer(object):
       >>> norm.normalize(u'\u03b9')
       'i'
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/normalizer/es.py b/plone/i18n/normalizer/es.py
index 723b667..51bd45b 100644
--- a/plone/i18n/normalizer/es.py
+++ b/plone/i18n/normalizer/es.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # Spanish character mapping
@@ -22,6 +22,7 @@
     231: u'c',
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -37,7 +38,6 @@ class Normalizer(object):
       >>> norm.normalize(u'\xf1')
       'n'
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/normalizer/fr.py b/plone/i18n/normalizer/fr.py
index 3e39dc1..401c9f7 100644
--- a/plone/i18n/normalizer/fr.py
+++ b/plone/i18n/normalizer/fr.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # French character mapping
@@ -9,6 +9,7 @@
     339: 'oe'
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -20,7 +21,6 @@ class Normalizer(object):
       >>> verifyClass(INormalizer, Normalizer)
       True
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/utility.py b/plone/i18n/utility.py
index ecaf185..6cf7795 100644
--- a/plone/i18n/utility.py
+++ b/plone/i18n/utility.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.interfaces import ILanguageUtility, INegotiateLanguage
 from zope.component import queryUtility
 from plone.i18n.locales.interfaces import ICountryAvailability
@@ -66,8 +66,8 @@ def onRequest(object, event):
     return setLanguageBinding(request)
 
 
+@implementer(ILanguageUtility)
 class LanguageUtility(object):
-    implements(ILanguageUtility)
 
     # resources that must not use language specific URLs
     exclude_paths = frozenset((


Repository: plone.i18n


Branch: refs/heads/master
Date: 2016-07-07T00:58:05+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.i18n/commit/7b859ce79404af7aeee89f9b2b3f5b2785d97596

Merge pull request #14 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.rst
M plone/i18n/locales/cctld.py
M plone/i18n/locales/countries.py
M plone/i18n/locales/languages.py
M plone/i18n/negotiate/negotiate.py
M plone/i18n/normalizer/__init__.py
M plone/i18n/normalizer/adapters.py
M plone/i18n/normalizer/bg.py
M plone/i18n/normalizer/de.py
M plone/i18n/normalizer/el.py
M plone/i18n/normalizer/es.py
M plone/i18n/normalizer/fr.py
M plone/i18n/utility.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 6692fa3..f9c2c21 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 3.0.4 (2016-03-31)
diff --git a/plone/i18n/locales/cctld.py b/plone/i18n/locales/cctld.py
index af24f0b..9d5815b 100644
--- a/plone/i18n/locales/cctld.py
+++ b/plone/i18n/locales/cctld.py
@@ -7,15 +7,14 @@
 # http://en.wikipedia.org/wiki/List_of_Internet_top-level_domains
 
 from plone.i18n.locales.interfaces import ICcTLDInformation
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ICcTLDInformation)
 class CcTLDInformation(object):
     """A list of country code top level domains their relevant languages.
     """
 
-    implements(ICcTLDInformation)
-
     def getAvailableTLDs(self):
         """Return a sequence of country code top level domains.
         """
diff --git a/plone/i18n/locales/countries.py b/plone/i18n/locales/countries.py
index 82e06ad..eda81b5 100644
--- a/plone/i18n/locales/countries.py
+++ b/plone/i18n/locales/countries.py
@@ -1,13 +1,13 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.locales.interfaces import ICountryAvailability
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ICountryAvailability)
 class CountryAvailability(object):
     """A list of available coutries.
     """
-    implements(ICountryAvailability)
 
     def getAvailableCountries(self):
         """Return a sequence of country tags for available countries.
diff --git a/plone/i18n/locales/languages.py b/plone/i18n/locales/languages.py
index 7c518b5..4424ffc 100644
--- a/plone/i18n/locales/languages.py
+++ b/plone/i18n/locales/languages.py
@@ -3,13 +3,13 @@
 from plone.i18n.locales.interfaces import IContentLanguageAvailability
 from plone.i18n.locales.interfaces import IMetadataLanguageAvailability
 from plone.i18n.locales.interfaces import ILanguageAvailability
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(ILanguageAvailability)
 class LanguageAvailability(object):
     """A list of available languages.
     """
-    implements(ILanguageAvailability)
 
     def getAvailableLanguages(self, combined=False):
         """Return a sequence of language tags for available languages.
@@ -36,18 +36,18 @@ def getLanguageListing(self, combined=False):
         return [(code, languages[code][u'name']) for code in languages]
 
 
+@implementer(IContentLanguageAvailability)
 class ContentLanguageAvailability(LanguageAvailability):
     """A list of available content languages.
     """
-    implements(IContentLanguageAvailability)
 
 contentlanguages = ContentLanguageAvailability()
 
 
+@implementer(IMetadataLanguageAvailability)
 class MetadataLanguageAvailability(LanguageAvailability):
     """A list of available metadata languages.
     """
-    implements(IMetadataLanguageAvailability)
 
 metadatalanguages = MetadataLanguageAvailability()
 
diff --git a/plone/i18n/negotiate/negotiate.py b/plone/i18n/negotiate/negotiate.py
index c2d9e7d..5f55c09 100644
--- a/plone/i18n/negotiate/negotiate.py
+++ b/plone/i18n/negotiate/negotiate.py
@@ -1,12 +1,12 @@
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.interfaces import INegotiateLanguage
 from zope.component import getUtility
 from plone.i18n.interfaces import ILanguageUtility
 
 
+@implementer(INegotiateLanguage)
 class NegotiateLanguage(object):
     """Perform default language negotiation"""
-    implements(INegotiateLanguage)
 
     def __init__(self, site, request):
         """Setup the current language stuff."""
diff --git a/plone/i18n/normalizer/__init__.py b/plone/i18n/normalizer/__init__.py
index 39565f1..ef7a191 100644
--- a/plone/i18n/normalizer/__init__.py
+++ b/plone/i18n/normalizer/__init__.py
@@ -6,7 +6,7 @@
 from plone.i18n.normalizer.interfaces import IURLNormalizer
 
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 # Define and compile static regexes
 FILENAME_REGEX = re.compile(r"^(.+)\.(\w{,4})$")
@@ -40,6 +40,7 @@ def cropName(base, maxLength=MAX_LENGTH):
     return base
 
 
+@implementer(IIDNormalizer)
 class IDNormalizer(object):
     """
     This normalizer can normalize any unicode string and returns a
@@ -53,7 +54,6 @@ class IDNormalizer(object):
       >>> verifyClass(IIDNormalizer, IDNormalizer)
       True
     """
-    implements(IIDNormalizer)
 
     def normalize(self, text, locale=None, max_length=MAX_LENGTH):
         """
@@ -87,6 +87,7 @@ def normalize(self, text, locale=None, max_length=MAX_LENGTH):
         return cropName(text, maxLength=max_length)
 
 
+@implementer(IFileNameNormalizer)
 class FileNameNormalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -98,7 +99,6 @@ class FileNameNormalizer(object):
       >>> verifyClass(IFileNameNormalizer, FileNameNormalizer)
       True
     """
-    implements(IFileNameNormalizer)
 
     def normalize(self, text, locale=None, max_length=MAX_FILENAME_LENGTH):
         """
@@ -148,6 +148,7 @@ def normalize(self, text, locale=None, max_length=MAX_FILENAME_LENGTH):
         return base
 
 
+@implementer(IURLNormalizer)
 class URLNormalizer(object):
     """
     This normalizer can normalize any unicode string and returns a URL-safe
@@ -159,7 +160,6 @@ class URLNormalizer(object):
       >>> verifyClass(IURLNormalizer, URLNormalizer)
       True
     """
-    implements(IURLNormalizer)
 
     def normalize(self, text, locale=None, max_length=MAX_URL_LENGTH):
         """
diff --git a/plone/i18n/normalizer/adapters.py b/plone/i18n/normalizer/adapters.py
index 798fc74..b05b4b3 100644
--- a/plone/i18n/normalizer/adapters.py
+++ b/plone/i18n/normalizer/adapters.py
@@ -4,10 +4,11 @@
 from plone.i18n.normalizer.interfaces import IUserPreferredURLNormalizer
 
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 from zope.i18n.interfaces import IUserPreferredLanguages
 
 
+@implementer(IUserPreferredFileNameNormalizer)
 class UserPreferredFileNameNormalizer(object):
     """
     An adapter for the HTTPRequest to provide user preferred language
@@ -19,7 +20,6 @@ class UserPreferredFileNameNormalizer(object):
       >>> verifyClass(IUserPreferredFileNameNormalizer, UserPreferredFileNameNormalizer)
       True
     """
-    implements(IUserPreferredFileNameNormalizer)
 
     def __init__(self, context):
         self.context = context # the context must be the request
@@ -35,6 +35,7 @@ def normalize(self, text):
         return util.normalize(text, locale=locale)
 
 
+@implementer(IUserPreferredURLNormalizer)
 class UserPreferredURLNormalizer(object):
     """
     An adapter for the HTTPRequest to provide user preferred language
@@ -46,7 +47,6 @@ class UserPreferredURLNormalizer(object):
       >>> verifyClass(IUserPreferredURLNormalizer, UserPreferredURLNormalizer)
       True
     """
-    implements(IUserPreferredURLNormalizer)
 
     def __init__(self, context):
         self.context = context # the context must be the request
diff --git a/plone/i18n/normalizer/bg.py b/plone/i18n/normalizer/bg.py
index 4448fcf..013a914 100644
--- a/plone/i18n/normalizer/bg.py
+++ b/plone/i18n/normalizer/bg.py
@@ -1,43 +1,43 @@
-# -*- coding: UTF-8 -*-
-
-from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
-from plone.i18n.normalizer.base import mapUnicode
-
-# Bulgarian character mapping
-mapping = {1040: 'A', 1041: 'B', 1042: 'V', 1043: 'G', 1044: 'D', 1045: 'E',
-           1046: 'ZH', 1047: 'Z', 1048: 'I', 1049: 'Y', 1050: 'K', 1051: 'L',
-           1052: 'M', 1053: 'N', 1054: 'O', 1055: 'P', 1056: 'R', 1057: 'S',
-           1058: 'T', 1059: 'U', 1060: 'F', 1061: 'H', 1062: 'TS', 1063: 'CH',
-           1064: 'SH', 1065: 'SHT', 1066: 'A', 1068: 'Y', 1070: 'YU',
-           1071: 'YA', 1072: 'a', 1073: 'b', 1074: 'v', 1075: 'g', 1076: 'd',
-           1077: 'e', 1078: 'zh', 1079: 'z', 1080: 'i', 1081: 'y', 1082: 'k',
-           1083: 'l', 1084: 'm', 1085: 'n', 1086: 'o', 1087: 'p', 1088: 'r',
-           1089: 's', 1090: 't', 1091: 'u', 1092: 'f', 1093: 'h', 1094: 'ts',
-           1095: 'ch', 1096: 'sh', 1097: 'sht', 1098: 'a', 1100: 'y',
-           1102: 'yu', 1103: 'ya'}
-
-class Normalizer(object):
-    """
-    This normalizer can normalize any unicode string and returns a version
-    that only contains of ASCII characters.
-
-    Let's make sure that this implementation actually fulfills the API.
-
-      >>> from zope.interface.verify import verifyClass
-      >>> verifyClass(INormalizer, Normalizer)
-      True
-
-      >>> norm = Normalizer()
-      >>> norm.normalize(u'\u0429')
-      'SHT'
-    """
-    implements(INormalizer)
-
-    def normalize(self, text, locale=None, max_length=None):
-        """
-        Returns a normalized text. text has to be a unicode string.
-        """
-        return mapUnicode(text, mapping=mapping)
-
-normalizer = Normalizer()
+# -*- coding: UTF-8 -*-
+
+from plone.i18n.normalizer.interfaces import INormalizer
+from zope.interface import implementer
+from plone.i18n.normalizer.base import mapUnicode
+
+# Bulgarian character mapping
+mapping = {1040: 'A', 1041: 'B', 1042: 'V', 1043: 'G', 1044: 'D', 1045: 'E',
+           1046: 'ZH', 1047: 'Z', 1048: 'I', 1049: 'Y', 1050: 'K', 1051: 'L',
+           1052: 'M', 1053: 'N', 1054: 'O', 1055: 'P', 1056: 'R', 1057: 'S',
+           1058: 'T', 1059: 'U', 1060: 'F', 1061: 'H', 1062: 'TS', 1063: 'CH',
+           1064: 'SH', 1065: 'SHT', 1066: 'A', 1068: 'Y', 1070: 'YU',
+           1071: 'YA', 1072: 'a', 1073: 'b', 1074: 'v', 1075: 'g', 1076: 'd',
+           1077: 'e', 1078: 'zh', 1079: 'z', 1080: 'i', 1081: 'y', 1082: 'k',
+           1083: 'l', 1084: 'm', 1085: 'n', 1086: 'o', 1087: 'p', 1088: 'r',
+           1089: 's', 1090: 't', 1091: 'u', 1092: 'f', 1093: 'h', 1094: 'ts',
+           1095: 'ch', 1096: 'sh', 1097: 'sht', 1098: 'a', 1100: 'y',
+           1102: 'yu', 1103: 'ya'}
+
+@implementer(INormalizer)
+class Normalizer(object):
+    """
+    This normalizer can normalize any unicode string and returns a version
+    that only contains of ASCII characters.
+
+    Let's make sure that this implementation actually fulfills the API.
+
+      >>> from zope.interface.verify import verifyClass
+      >>> verifyClass(INormalizer, Normalizer)
+      True
+
+      >>> norm = Normalizer()
+      >>> norm.normalize(u'\u0429')
+      'SHT'
+    """
+
+    def normalize(self, text, locale=None, max_length=None):
+        """
+        Returns a normalized text. text has to be a unicode string.
+        """
+        return mapUnicode(text, mapping=mapping)
+
+normalizer = Normalizer()
diff --git a/plone/i18n/normalizer/de.py b/plone/i18n/normalizer/de.py
index 20ca79d..2fa0655 100644
--- a/plone/i18n/normalizer/de.py
+++ b/plone/i18n/normalizer/de.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # German character mapping
@@ -23,6 +23,7 @@
     8364: 'euro'
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -38,7 +39,6 @@ class Normalizer(object):
       >>> norm.normalize(u'\xe4')
       'ae'
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/normalizer/el.py b/plone/i18n/normalizer/el.py
index 89a8c76..5baf133 100644
--- a/plone/i18n/normalizer/el.py
+++ b/plone/i18n/normalizer/el.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # Greek character mapping
@@ -18,6 +18,7 @@
     969: 'o', 970: 'i', 971: 'y', 972: 'o', 973: 'y', 974: 'o',
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -33,7 +34,6 @@ class Normalizer(object):
       >>> norm.normalize(u'\u03b9')
       'i'
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/normalizer/es.py b/plone/i18n/normalizer/es.py
index 723b667..51bd45b 100644
--- a/plone/i18n/normalizer/es.py
+++ b/plone/i18n/normalizer/es.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # Spanish character mapping
@@ -22,6 +22,7 @@
     231: u'c',
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -37,7 +38,6 @@ class Normalizer(object):
       >>> norm.normalize(u'\xf1')
       'n'
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/normalizer/fr.py b/plone/i18n/normalizer/fr.py
index 3e39dc1..401c9f7 100644
--- a/plone/i18n/normalizer/fr.py
+++ b/plone/i18n/normalizer/fr.py
@@ -1,7 +1,7 @@
 # -*- coding: UTF-8 -*-
 
 from plone.i18n.normalizer.interfaces import INormalizer
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.normalizer.base import mapUnicode
 
 # French character mapping
@@ -9,6 +9,7 @@
     339: 'oe'
 }
 
+@implementer(INormalizer)
 class Normalizer(object):
     """
     This normalizer can normalize any unicode string and returns a version
@@ -20,7 +21,6 @@ class Normalizer(object):
       >>> verifyClass(INormalizer, Normalizer)
       True
     """
-    implements(INormalizer)
 
     def normalize(self, text, locale=None, max_length=None):
         """
diff --git a/plone/i18n/utility.py b/plone/i18n/utility.py
index ecaf185..6cf7795 100644
--- a/plone/i18n/utility.py
+++ b/plone/i18n/utility.py
@@ -1,4 +1,4 @@
-from zope.interface import implements
+from zope.interface import implementer
 from plone.i18n.interfaces import ILanguageUtility, INegotiateLanguage
 from zope.component import queryUtility
 from plone.i18n.locales.interfaces import ICountryAvailability
@@ -66,8 +66,8 @@ def onRequest(object, event):
     return setLanguageBinding(request)
 
 
+@implementer(ILanguageUtility)
 class LanguageUtility(object):
-    implements(ILanguageUtility)
 
     # resources that must not use language specific URLs
     exclude_paths = frozenset((


