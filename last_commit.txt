Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2016-03-09T10:50:59+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.vocabularies/commit/a27acc40ac7ecf61a4f8bd44c0fc41c7ab722392

increase readability of code

Files changed:
M CHANGES.rst
M plone/app/vocabularies/catalog.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d099601..3d203ec 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- increase readability of code in CatalogSource.
+  [jensens]
 
 
 2.2.3 (2016-03-03)
diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py
index 23a0092..d77a9a5 100644
--- a/plone/app/vocabularies/catalog.py
+++ b/plone/app/vocabularies/catalog.py
@@ -634,20 +634,27 @@ def __init__(self, context=None, **query):
         self.query = query
 
     def __contains__(self, value):
-        if isinstance(value, basestring):
-            uid = value
-        else:
-            uid = IUUID(value)
-        if uid[0] == '/':
+        """used during validation to make sure the selected item is found with
+        the specified query.
+
+        value can be either a string (hex value of uuid or path) or a plone
+        content object.
+        """
+        if not isinstance(value, basestring):
+            # here we have a content and fetch the uuid as hex value
+            value = IUUID(value)
+        # else we have uuid hex value or path
+
+        if value.startswith('/'):
             # it is a path query
             site = getSite()
             site_path = '/'.join(site.getPhysicalPath())
-            path = os.path.join(site_path, uid.lstrip('/'))
-            if self.search_catalog({'path': {'query': path, 'depth': 0}}):
-                return True
+            path = os.path.join(site_path, value.lstrip('/'))
+            query = {'path': {'query': path, 'depth': 0}}
         else:
-            if self.search_catalog({'UID': uid}):
-                return True
+            # its a uuid
+            query = {'UID': value}
+        return bool(self.search_catalog(query))
 
     def search_catalog(self, user_query):
         query = user_query.copy()


Repository: plone.app.vocabularies


Branch: refs/heads/master
Date: 2016-03-09T13:21:40+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.vocabularies/commit/d4b743c4d641c0e829a5b6764a2ba9d2c9d6bc09

Merge pull request #28 from plone/readablecatalogsource

increase readability of code

Files changed:
M CHANGES.rst
M plone/app/vocabularies/catalog.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d099601..3d203ec 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- increase readability of code in CatalogSource.
+  [jensens]
 
 
 2.2.3 (2016-03-03)
diff --git a/plone/app/vocabularies/catalog.py b/plone/app/vocabularies/catalog.py
index 23a0092..d77a9a5 100644
--- a/plone/app/vocabularies/catalog.py
+++ b/plone/app/vocabularies/catalog.py
@@ -634,20 +634,27 @@ def __init__(self, context=None, **query):
         self.query = query
 
     def __contains__(self, value):
-        if isinstance(value, basestring):
-            uid = value
-        else:
-            uid = IUUID(value)
-        if uid[0] == '/':
+        """used during validation to make sure the selected item is found with
+        the specified query.
+
+        value can be either a string (hex value of uuid or path) or a plone
+        content object.
+        """
+        if not isinstance(value, basestring):
+            # here we have a content and fetch the uuid as hex value
+            value = IUUID(value)
+        # else we have uuid hex value or path
+
+        if value.startswith('/'):
             # it is a path query
             site = getSite()
             site_path = '/'.join(site.getPhysicalPath())
-            path = os.path.join(site_path, uid.lstrip('/'))
-            if self.search_catalog({'path': {'query': path, 'depth': 0}}):
-                return True
+            path = os.path.join(site_path, value.lstrip('/'))
+            query = {'path': {'query': path, 'depth': 0}}
         else:
-            if self.search_catalog({'UID': uid}):
-                return True
+            # its a uuid
+            query = {'UID': value}
+        return bool(self.search_catalog(query))
 
     def search_catalog(self, user_query):
         query = user_query.copy()


