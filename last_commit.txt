Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-02-04T20:49:34+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/e5aae9d2426b66debd03d94c70cd787df3c5a211

align package.json with master

Files changed:
M package.json

diff --git a/package.json b/package.json
index 168201e..f00842c 100644
--- a/package.json
+++ b/package.json
@@ -4,37 +4,37 @@
   "description": "A collection of client side patterns for faster and easier web development",
   "homepage": "http://plone.github.io/mockup",
   "devDependencies": {
-    "bower": "~1.4.1",
-    "chai": "^2.3.0",
-    "coveralls": "~2.11.2",
-    "extend": "~2.0.1",
-    "grunt": "~0.4.5",
-    "grunt-cli": "~0.1.13",
-    "grunt-contrib-copy": "~0.8.0",
-    "grunt-contrib-jshint": "~0.11.2",
-    "grunt-contrib-less": "~1.0.1",
-    "grunt-contrib-requirejs": "~0.4.4",
-    "grunt-contrib-uglify": "~0.9.1",
-    "grunt-contrib-watch": "~0.6.1",
-    "grunt-karma": "~0.10.1",
-    "grunt-sed": "~0.1.1",
-    "karma": "~0.12.31",
+    "bower": "~1.7.9",
+    "chai": "^3.5.0",
+    "coveralls": "~2.11.9",
+    "extend": "~3.0.0",
+    "grunt": "~1.0.1",
+    "grunt-cli": "~1.2.0",
+    "grunt-contrib-copy": "~1.0.0",
+    "grunt-contrib-jshint": "~1.0.0",
+    "grunt-contrib-less": "~1.3.0",
+    "grunt-contrib-requirejs": "~1.0.0",
+    "grunt-contrib-uglify": "~1.0.1",
+    "grunt-contrib-watch": "~1.0.0",
+    "grunt-karma": "~1.0.0",
+    "grunt-sed": "collective/grunt-sed#e625902539f5c29f1246228270a0330c1097b1e4",
+    "karma": "~0.13.22",
     "karma-chai": "^0.1.0",
-    "karma-chrome-launcher": "~0.1.8",
-    "karma-coverage": "~0.3.1",
-    "karma-firefox-launcher": "~0.1.4",
-    "karma-junit-reporter": "~0.2.2",
-    "karma-mocha": "~0.1.10",
-    "karma-phantomjs-launcher": "~0.2.1",
-    "karma-requirejs": "~0.2.2",
-    "karma-sauce-launcher": "~0.2.10",
-    "karma-script-launcher": "~0.1.0",
-    "karma-spec-reporter": "0.0.19",
-    "lcov-result-merger": "~1.0.2",
-  	"less": "~1.7.0",
-    "mocha": "~2.2.4",
-    "phantomjs": "^1.9.18",
-    "requirejs": "~2.1.17"
+    "karma-chrome-launcher": "~1.0.1",
+    "karma-coverage": "~1.0.0",
+    "karma-firefox-launcher": "~1.0.0",
+    "karma-junit-reporter": "~1.0.0",
+    "karma-mocha": "~1.0.1",
+    "karma-phantomjs-launcher": "~1.0.0",
+    "karma-requirejs": "~1.0.0",
+    "karma-sauce-launcher": "~1.0.0",
+    "karma-script-launcher": "~1.0.0",
+    "karma-spec-reporter": "0.0.26",
+    "lcov-result-merger": "~1.2.0",
+    "less": "~1.7.0",
+    "mocha": "~2.5.3",
+    "phantomjs-prebuilt": "^2.1.7",
+    "requirejs": "~2.2.0"
   },
   "maintainers": [
     {


Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-02-04T21:06:21+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/a6fc7b5bed5b7bc2acd52478a8aa47cde0d87ead

Fix the tests for 2.1.x by aligning package.json to master and reverting commit 3f1b741 as it was reverted in master also.

Revert "provide selector option to markspeciallinks pattern"

This reverts commit 3f1b7413f07084a3602272672c6c4e378c187a41.

Files changed:
M CHANGES.rst
M mockup/patterns/markspeciallinks/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index 201659e..91963c4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Fix the tests for 2.1.x by aligning package.json to master and reverting commit 3f1b741 as it was reverted in master also.
+  [thet]
+
 - Move tooltip pattern definition after bootstrapTooltip function definition.
   This should fix `bootstrapTooltip is not a constructor errors`.
   [vangheem]
diff --git a/mockup/patterns/markspeciallinks/pattern.js b/mockup/patterns/markspeciallinks/pattern.js
index fb990fa..6a0217f 100644
--- a/mockup/patterns/markspeciallinks/pattern.js
+++ b/mockup/patterns/markspeciallinks/pattern.js
@@ -3,7 +3,6 @@
  * Options:
  *    external_links_open_new_window(boolean): Open external links in a new window. (false)
  *    mark_special_links(boolean): Marks external or special protocl links with class. (true)
- *    selector(string): Select an area of the page to enable this feature on (#main-container)
  *
  * Documentation:
  *   # General
@@ -91,8 +90,7 @@ define([
     parser: 'mockup',
     defaults: {
       external_links_open_new_window: false,
-      mark_special_links: true,
-      selector: '#main-container'
+      mark_special_links: true
     },
     init: function () {
       var self = this, $el = self.$el;
@@ -107,49 +105,46 @@ define([
           res;
 
       if (typeof self.options.external_links_open_new_window === 'string') {
-        elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
+          elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
       } else if (typeof self.options.external_links_open_new_window === 'boolean') {
-        elonw = self.options.external_links_open_new_window;
+          elonw = self.options.external_links_open_new_window;
       }
 
       if (typeof self.options.mark_special_links === 'string') {
-        msl = self.options.mark_special_links.toLowerCase() === 'true';
+          msl = self.options.mark_special_links.toLowerCase() === 'true';
       } else if (typeof self.options.mark_special_links === 'boolean') {
-        msl = self.options.mark_special_links;
+          msl = self.options.mark_special_links;
       }
 
       url = window.location.protocol + '//' + window.location.host;
       protocols = /^(mailto|ftp|news|irc|h323|sip|callto|https|feed|webcal)/;
       contentarea = $el;
-      if(self.options.selector){
-        contentarea = $(self.options.selector, contentarea);
-      }
 
       if (elonw) {
-        // all http links (without the link-plain class), not within this site
-        contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])').attr('target', '_blank');
+          // all http links (without the link-plain class), not within this site
+          contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])')
+                     .attr('target', '_blank');
       }
 
       if (msl) {
         // All links with an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-external span
         contentarea.find(
-          'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-          .before('<i class="glyphicon link-external"></i>');
+            'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+            .before('<i class="glyphicon link-external"></i>');
         // All links without an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-[protocol] span
         contentarea.find(
-          'a[href]:not([href^="http"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-          .each(function() {
-            // those without a http link may have another interesting protocol
-            // wrap these in a link-[protocol] span
-            var href = $(this).attr('href');
-            res = protocols.exec(href);
-            if(res) {
-              var iconclass = 'glyphicon link-' + res[0];
-              $(this).before('<i class="' + iconclass + '"></i>');
+            'a[href]:not([href^="http:"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+            .each(function() {
+                // those without a http link may have another interesting protocol
+                // wrap these in a link-[protocol] span
+                res = protocols.exec(this.href);
+                if (res) {
+                    var iconclass = 'glyphicon link-' + res[0];
+                    $(this).before('<i class="' + iconclass + '"></i>');
+                }
             }
-          }
         );
       }
     }


Repository: mockup


Branch: refs/heads/2.1.x
Date: 2017-02-04T21:09:22+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/5fed6c0c35f17a05f258db99a99675a737968142

Merge pull request #738 from plone/thet-fixtests-2.1.x

fix tests for 2.1.x

Files changed:
M CHANGES.rst
M mockup/patterns/markspeciallinks/pattern.js
M package.json

diff --git a/CHANGES.rst b/CHANGES.rst
index 201659e..91963c4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New features:
 
 Bug fixes:
 
+- Fix the tests for 2.1.x by aligning package.json to master and reverting commit 3f1b741 as it was reverted in master also.
+  [thet]
+
 - Move tooltip pattern definition after bootstrapTooltip function definition.
   This should fix `bootstrapTooltip is not a constructor errors`.
   [vangheem]
diff --git a/mockup/patterns/markspeciallinks/pattern.js b/mockup/patterns/markspeciallinks/pattern.js
index fb990fa..6a0217f 100644
--- a/mockup/patterns/markspeciallinks/pattern.js
+++ b/mockup/patterns/markspeciallinks/pattern.js
@@ -3,7 +3,6 @@
  * Options:
  *    external_links_open_new_window(boolean): Open external links in a new window. (false)
  *    mark_special_links(boolean): Marks external or special protocl links with class. (true)
- *    selector(string): Select an area of the page to enable this feature on (#main-container)
  *
  * Documentation:
  *   # General
@@ -91,8 +90,7 @@ define([
     parser: 'mockup',
     defaults: {
       external_links_open_new_window: false,
-      mark_special_links: true,
-      selector: '#main-container'
+      mark_special_links: true
     },
     init: function () {
       var self = this, $el = self.$el;
@@ -107,49 +105,46 @@ define([
           res;
 
       if (typeof self.options.external_links_open_new_window === 'string') {
-        elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
+          elonw = self.options.external_links_open_new_window.toLowerCase() === 'true';
       } else if (typeof self.options.external_links_open_new_window === 'boolean') {
-        elonw = self.options.external_links_open_new_window;
+          elonw = self.options.external_links_open_new_window;
       }
 
       if (typeof self.options.mark_special_links === 'string') {
-        msl = self.options.mark_special_links.toLowerCase() === 'true';
+          msl = self.options.mark_special_links.toLowerCase() === 'true';
       } else if (typeof self.options.mark_special_links === 'boolean') {
-        msl = self.options.mark_special_links;
+          msl = self.options.mark_special_links;
       }
 
       url = window.location.protocol + '//' + window.location.host;
       protocols = /^(mailto|ftp|news|irc|h323|sip|callto|https|feed|webcal)/;
       contentarea = $el;
-      if(self.options.selector){
-        contentarea = $(self.options.selector, contentarea);
-      }
 
       if (elonw) {
-        // all http links (without the link-plain class), not within this site
-        contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])').attr('target', '_blank');
+          // all http links (without the link-plain class), not within this site
+          contentarea.find('a[href^="http"]:not(.link-plain):not([href^="' + url + '"])')
+                     .attr('target', '_blank');
       }
 
       if (msl) {
         // All links with an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-external span
         contentarea.find(
-          'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-          .before('<i class="glyphicon link-external"></i>');
+            'a[href^="http:"]:not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+            .before('<i class="glyphicon link-external"></i>');
         // All links without an http href (without the link-plain class), not within this site,
         // and no img children should be wrapped in a link-[protocol] span
         contentarea.find(
-          'a[href]:not([href^="http"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
-          .each(function() {
-            // those without a http link may have another interesting protocol
-            // wrap these in a link-[protocol] span
-            var href = $(this).attr('href');
-            res = protocols.exec(href);
-            if(res) {
-              var iconclass = 'glyphicon link-' + res[0];
-              $(this).before('<i class="' + iconclass + '"></i>');
+            'a[href]:not([href^="http:"]):not(.link-plain):not([href^="' + url + '"]):not(:has(img))')
+            .each(function() {
+                // those without a http link may have another interesting protocol
+                // wrap these in a link-[protocol] span
+                res = protocols.exec(this.href);
+                if (res) {
+                    var iconclass = 'glyphicon link-' + res[0];
+                    $(this).before('<i class="' + iconclass + '"></i>');
+                }
             }
-          }
         );
       }
     }
diff --git a/package.json b/package.json
index 168201e..f00842c 100644
--- a/package.json
+++ b/package.json
@@ -4,37 +4,37 @@
   "description": "A collection of client side patterns for faster and easier web development",
   "homepage": "http://plone.github.io/mockup",
   "devDependencies": {
-    "bower": "~1.4.1",
-    "chai": "^2.3.0",
-    "coveralls": "~2.11.2",
-    "extend": "~2.0.1",
-    "grunt": "~0.4.5",
-    "grunt-cli": "~0.1.13",
-    "grunt-contrib-copy": "~0.8.0",
-    "grunt-contrib-jshint": "~0.11.2",
-    "grunt-contrib-less": "~1.0.1",
-    "grunt-contrib-requirejs": "~0.4.4",
-    "grunt-contrib-uglify": "~0.9.1",
-    "grunt-contrib-watch": "~0.6.1",
-    "grunt-karma": "~0.10.1",
-    "grunt-sed": "~0.1.1",
-    "karma": "~0.12.31",
+    "bower": "~1.7.9",
+    "chai": "^3.5.0",
+    "coveralls": "~2.11.9",
+    "extend": "~3.0.0",
+    "grunt": "~1.0.1",
+    "grunt-cli": "~1.2.0",
+    "grunt-contrib-copy": "~1.0.0",
+    "grunt-contrib-jshint": "~1.0.0",
+    "grunt-contrib-less": "~1.3.0",
+    "grunt-contrib-requirejs": "~1.0.0",
+    "grunt-contrib-uglify": "~1.0.1",
+    "grunt-contrib-watch": "~1.0.0",
+    "grunt-karma": "~1.0.0",
+    "grunt-sed": "collective/grunt-sed#e625902539f5c29f1246228270a0330c1097b1e4",
+    "karma": "~0.13.22",
     "karma-chai": "^0.1.0",
-    "karma-chrome-launcher": "~0.1.8",
-    "karma-coverage": "~0.3.1",
-    "karma-firefox-launcher": "~0.1.4",
-    "karma-junit-reporter": "~0.2.2",
-    "karma-mocha": "~0.1.10",
-    "karma-phantomjs-launcher": "~0.2.1",
-    "karma-requirejs": "~0.2.2",
-    "karma-sauce-launcher": "~0.2.10",
-    "karma-script-launcher": "~0.1.0",
-    "karma-spec-reporter": "0.0.19",
-    "lcov-result-merger": "~1.0.2",
-  	"less": "~1.7.0",
-    "mocha": "~2.2.4",
-    "phantomjs": "^1.9.18",
-    "requirejs": "~2.1.17"
+    "karma-chrome-launcher": "~1.0.1",
+    "karma-coverage": "~1.0.0",
+    "karma-firefox-launcher": "~1.0.0",
+    "karma-junit-reporter": "~1.0.0",
+    "karma-mocha": "~1.0.1",
+    "karma-phantomjs-launcher": "~1.0.0",
+    "karma-requirejs": "~1.0.0",
+    "karma-sauce-launcher": "~1.0.0",
+    "karma-script-launcher": "~1.0.0",
+    "karma-spec-reporter": "0.0.26",
+    "lcov-result-merger": "~1.2.0",
+    "less": "~1.7.0",
+    "mocha": "~2.5.3",
+    "phantomjs-prebuilt": "^2.1.7",
+    "requirejs": "~2.2.0"
   },
   "maintainers": [
     {


