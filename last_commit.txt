Repository: plone.app.caching


Branch: refs/heads/master
Date: 2017-01-12T14:18:00-02:00
Author: hvelarde (hvelarde) <hector.velarde@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/f017c2a18442ee1d7df68357d2c988941fda62d6

Remove dependency on unittest2

Fix tests assertions.

Files changed:
M CHANGES.rst
M plone/app/caching/tests/test_etags.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_lastmodified.py
M plone/app/caching/tests/test_lookup.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fdfceb3..1226619 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,6 +6,9 @@ Changelog
 
 Bug fixes:
 
+- Remove dependency on unittest2; fix tests assertions.
+  [hvelarde]
+
 - Fixed tests when using ZODB 4.
   [davisagli]
 
diff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py
index 7de8085..aae3ae6 100644
--- a/plone/app/caching/tests/test_etags.py
+++ b/plone/app/caching/tests/test_etags.py
@@ -15,7 +15,7 @@
 from ZPublisher.HTTPResponse import HTTPResponse
 
 import time
-import unittest2 as unittest
+import unittest
 
 
 @implementer(IContentish)
@@ -60,7 +60,7 @@ def member(self):
 
         etag = UserID(published, request)
 
-        self.assertEqual(None, etag())
+        self.assertIsNone(etag())
 
     def test_UserID_member(self):
         from plone.app.caching.operations.etags import UserID
@@ -218,7 +218,7 @@ def test_LastModified_no_adapter(self):
 
         etag = LastModified(published, request)
 
-        self.assertEqual(None, etag())
+        self.assertIsNone(etag())
 
     def test_LastModified_None(self):
         from plone.app.caching.operations.etags import LastModified
@@ -242,7 +242,7 @@ def __call__(self):
 
         etag = LastModified(published, request)
 
-        self.assertEqual(None, etag())
+        self.assertIsNone(etag())
 
     def test_LastModified(self):
         from plone.app.caching.operations.etags import LastModified
diff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py
index cef39c2..8c217b2 100644
--- a/plone/app/caching/tests/test_integration.py
+++ b/plone/app/caching/tests/test_integration.py
@@ -19,7 +19,7 @@
 
 import OFS.Image
 import pkg_resources
-import unittest2 as unittest
+import unittest
 
 
 TEST_IMAGE = pkg_resources.resource_filename(
@@ -138,25 +138,25 @@ def test_disabled(self):
 
         # Check that we can open all without errors and without cache headers
         browser.open(self.portal.absolute_url())
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1'].absolute_url())
-        self.assertTrue('Folder one description' in browser.contents)
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertIn('Folder one description', browser.contents)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1']['d1'].absolute_url())
-        self.assertTrue('Document one description' in browser.contents)
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertIn('Document one description', browser.contents)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1']['i1'].absolute_url())
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1']['f1'].absolute_url())
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(
             self.portal.absolute_url() + '/portal_skins/custom/test.gif')
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(
             self.portal.absolute_url() + '/++resource++plone.app.caching.gif')
diff --git a/plone/app/caching/tests/test_lastmodified.py b/plone/app/caching/tests/test_lastmodified.py
index 387d24c..3b5739e 100644
--- a/plone/app/caching/tests/test_lastmodified.py
+++ b/plone/app/caching/tests/test_lastmodified.py
@@ -10,7 +10,7 @@
 import DateTime
 import os
 import time
-import unittest2 as unittest
+import unittest
 
 
 class FauxDataManager(object):
@@ -51,7 +51,7 @@ class Dummy(Persistent, Explicit):
 
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
         zpt = ZopePageTemplate('zpt').__of__(d)
-        self.assertEqual(None, ILastModified(zpt)())
+        self.assertIsNone(ILastModified(zpt)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         # equivalent in local time, which is what the last-modified adapter
@@ -74,7 +74,7 @@ class Dummy(Persistent, Explicit):
 
         from Products.CMFCore.FSPageTemplate import FSPageTemplate
         zpt = FSPageTemplate('zpt', __file__).__of__(d)
-        self.assertEqual(None, ILastModified(zpt)())
+        self.assertIsNone(ILastModified(zpt)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         # equivalent in local time, which is what the last-modified adapter
@@ -88,7 +88,7 @@ def test_OFSFileLastModified_File(self):
         from OFS.Image import File
 
         dummy = File('dummy', 'Dummy', 'data')
-        self.assertEqual(None, ILastModified(dummy)())
+        self.assertIsNone(ILastModified(dummy)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         ts = TimeStamp(*time.gmtime(timestamp)[:6])  # corresponding TimeStamp
@@ -105,7 +105,7 @@ def test_OFSFileLastModified_Image(self):
         from OFS.Image import Image
 
         dummy = Image('dummy', 'Dummy', 'data')
-        self.assertEqual(None, ILastModified(dummy)())
+        self.assertIsNone(ILastModified(dummy)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         ts = TimeStamp(*time.gmtime(timestamp)[:6])  # corresponding TimeStamp
@@ -160,7 +160,7 @@ def modified(self):
 
         d = Dummy()
 
-        self.assertEqual(None, ILastModified(d)())
+        self.assertIsNone(ILastModified(d)())
 
         d._mod = datetime.datetime(2001, 4, 19, 12, 25, 21, 120000)
         self.assertEqual(d._mod, ILastModified(d)())
@@ -183,7 +183,7 @@ def modified(self):
 
         d = Dummy()
 
-        self.assertEqual(None, ILastModified(d)())
+        self.assertIsNone(ILastModified(d)())
 
         d._mod = datetime.datetime(2001, 4, 19, 12, 25, 21, 120000)
         self.assertEqual(d._mod, ILastModified(d)())
diff --git a/plone/app/caching/tests/test_lookup.py b/plone/app/caching/tests/test_lookup.py
index 282d967..84773f5 100644
--- a/plone/app/caching/tests/test_lookup.py
+++ b/plone/app/caching/tests/test_lookup.py
@@ -15,7 +15,7 @@
 from zope.component import provideUtility
 from zope.interface import implementer
 
-import unittest2 as unittest
+import unittest
 import z3c.caching.registry
 
 
@@ -92,7 +92,7 @@ def test_no_registry(self):
         published = ZopePageTemplate('someView')
         request = DummyRequest(published, DummyResponse())
 
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_no_mappings(self):
         provideUtility(Registry(), IRegistry)
@@ -101,7 +101,7 @@ def test_no_mappings(self):
 
         published = ZopePageTemplate('someView')
         request = DummyRequest(published, DummyResponse())
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_template_lookup(self):
         provideUtility(Registry(), IRegistry)
@@ -201,7 +201,7 @@ def test_contenttype_not_default_view(self):
 
         published = ZopePageTemplate('someView').__of__(DummyContent())
         request = DummyRequest(published, DummyResponse())
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_parent_not_content(self):
         provideUtility(Registry(), IRegistry)
@@ -214,7 +214,7 @@ def test_parent_not_content(self):
 
         published = ZopePageTemplate('defaultView').__of__(DummyNotContent())
         request = DummyRequest(published, DummyResponse())
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_parent_not_IBrowserDefault_methodid(self):
         provideUtility(Registry(), IRegistry)
diff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py
index b098994..ac9c5a2 100644
--- a/plone/app/caching/tests/test_operation_default.py
+++ b/plone/app/caching/tests/test_operation_default.py
@@ -11,7 +11,7 @@
 from zope.component import getUtility
 from zope.globalrequest import setRequest
 
-import unittest2 as unittest
+import unittest
 
 
 class TestOperationDefault(unittest.TestCase):
@@ -67,7 +67,7 @@ def test_last_modified_no_etags(self):
         browser.getControl(
             name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
-        self.assertFalse('Etag' in browser.headers)
+        self.assertNotIn('Etag', browser.headers)
 
         # now set up etags and make sure that a header is added
         self.registry['plone.app.caching.weakCaching.etags'] = (
@@ -81,4 +81,4 @@ def test_last_modified_no_etags(self):
         browser.getControl(
             name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
-        self.assertTrue('Etag' in browser.headers)
+        self.assertIn('Etag', browser.headers)
diff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py
index 5bded43..fbca715 100644
--- a/plone/app/caching/tests/test_operation_parameters.py
+++ b/plone/app/caching/tests/test_operation_parameters.py
@@ -12,7 +12,7 @@
 from zope.globalrequest import setRequest
 
 import transaction
-import unittest2 as unittest
+import unittest
 
 
 class TestOperationParameters(unittest.TestCase):
@@ -74,7 +74,7 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
 
@@ -96,11 +96,11 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, s-maxage=60, must-revalidate',
                          browser.headers['Cache-Control'])
         self.assertEqual('X-Anonymous', browser.headers['Vary'])
-        self.assertFalse('Etag' in browser.headers)
+        self.assertNotIn('Etag', browser.headers)
 
         # View the page as logged-in
         browser = Browser(self.app)
@@ -113,10 +113,10 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertTrue('Etag' in browser.headers)
+        self.assertIn('Etag', browser.headers)
 
         # Set pages to have strong caching so that we can see the difference
         # between logged in and anonymous
@@ -134,11 +134,11 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.strongCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         self.assertEqual('X-Anonymous', browser.headers['Vary'])
-        self.assertFalse('Etag' in browser.headers)
+        self.assertNotIn('Etag', browser.headers)
 
         # View the page as logged-in
         browser = Browser(self.app)
@@ -151,10 +151,10 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.strongCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertTrue('Etag' in browser.headers)
+        self.assertIn('Etag', browser.headers)
 
         # Check an edge case that has had a problem in the past:
         # setting strongCaching maxage to zero.
diff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py
index 1115f2b..d162f05 100644
--- a/plone/app/caching/tests/test_operation_utils.py
+++ b/plone/app/caching/tests/test_operation_utils.py
@@ -22,7 +22,7 @@
 import dateutil.parser
 import dateutil.tz
 import time
-import unittest2 as unittest
+import unittest
 import wsgiref.handlers
 
 
@@ -65,10 +65,10 @@ def test_doNotCache(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_doNotCache_deletes_last_modified(self):
         from plone.app.caching.operations.utils import doNotCache
@@ -89,10 +89,10 @@ def test_doNotCache_deletes_last_modified(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     # cacheInBrowser()
 
@@ -111,11 +111,11 @@ def test_cacheInBrowser_no_etag_no_last_modified(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInBrowser_etag(self):
         from plone.app.caching.operations.utils import cacheInBrowser
@@ -133,11 +133,11 @@ def test_cacheInBrowser_etag(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
         self.assertEqual('"|foo|bar|"', response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInBrowser_lastModified(self):
         from plone.app.caching.operations.utils import cacheInBrowser
@@ -157,10 +157,10 @@ def test_cacheInBrowser_lastModified(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
         self.assertEqual(nowFormatted, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInBrowser_lastModified_and_etag(self):
         from plone.app.caching.operations.utils import cacheInBrowser
@@ -186,7 +186,7 @@ def test_cacheInBrowser_lastModified_and_etag(self):
         self.assertEqual('"|foo|bar|"', response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     # cacheInProxy()
 
@@ -205,12 +205,12 @@ def test_cacheInProxy_minimal(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, s-maxage=60, must-revalidate',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
-        self.assertEqual(None, response.getHeader('Vary'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('Vary'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInProxy_full(self):
         from plone.app.caching.operations.utils import cacheInProxy
@@ -238,7 +238,7 @@ def test_cacheInProxy_full(self):
         self.assertEqual('Accept-Language', response.getHeader('Vary'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     # cacheInBrowserAndProxy()
 
@@ -257,13 +257,13 @@ def test_cacheInBrowserAndProxy_minimal(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=60, proxy-revalidate, public',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
-        self.assertEqual(None, response.getHeader('Vary'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('Vary'))
 
         timedelta = dateutil.parser.parse(response.getHeader('Expires')) - now
-        self.assertFalse(timedelta < datetime.timedelta(seconds=59))
-        self.assertFalse(timedelta > datetime.timedelta(seconds=60))
+        self.assertGreaterEqual(timedelta, datetime.timedelta(seconds=59))
+        self.assertLessEqual(timedelta, datetime.timedelta(seconds=60))
 
     def test_cacheInBrowserAndProxy_full(self):
         from plone.app.caching.operations.utils import cacheInBrowserAndProxy
@@ -523,9 +523,9 @@ def test_notModified_full(self):
 
         self.assertEqual(u"", body)
         self.assertEqual(etag, response.getHeader('ETag', literal=1))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('Expires'))
-        self.assertEqual(None, response.getHeader('Cache-Control'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Expires'))
+        self.assertIsNone(response.getHeader('Cache-Control'))
         self.assertEqual(304, response.getStatus())
 
 
@@ -546,7 +546,7 @@ def test_isModified_no_headers_no_keys(self):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        self.assertEqual(True, isModified(request))
+        self.assertTrue(isModified(request))
 
     def test_isModified_no_headers_with_keys(self):
         from plone.app.caching.operations.utils import isModified
@@ -559,7 +559,7 @@ def test_isModified_no_headers_with_keys(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(
+        self.assertTrue(isModified(
             request, etag=etag, lastModified=lastModified))
 
     def test_isModified_ims_invalid_date(self):
@@ -574,7 +574,7 @@ def test_isModified_ims_invalid_date(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(request, lastModified=lastModified))
+        self.assertTrue(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_modified(self):
         from plone.app.caching.operations.utils import isModified
@@ -589,7 +589,7 @@ def test_isModified_ims_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(request, lastModified=lastModified))
+        self.assertTrue(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_not_modified(self):
         from plone.app.caching.operations.utils import isModified
@@ -604,7 +604,7 @@ def test_isModified_ims_not_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(False, isModified(request, lastModified=lastModified))
+        self.assertFalse(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_not_modified_two_dates(self):
         from plone.app.caching.operations.utils import isModified
@@ -619,7 +619,7 @@ def test_isModified_ims_not_modified_two_dates(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(False, isModified(request, lastModified=lastModified))
+        self.assertFalse(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_not_modified_etag_no_inm_header(self):
         from plone.app.caching.operations.utils import isModified
@@ -635,7 +635,7 @@ def test_isModified_ims_not_modified_etag_no_inm_header(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(
+        self.assertTrue(isModified(
             request, etag=etag, lastModified=lastModified))
 
     def test_isModified_inm_no_tags(self):
@@ -647,7 +647,7 @@ def test_isModified_inm_no_tags(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_one_tag_no_match(self):
         from plone.app.caching.operations.utils import isModified
@@ -660,7 +660,7 @@ def test_isModified_inm_one_tag_no_match(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_multiple_tags_no_match(self):
         from plone.app.caching.operations.utils import isModified
@@ -673,7 +673,7 @@ def test_isModified_inm_multiple_tags_no_match(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_invalid_tag(self):
         from plone.app.caching.operations.utils import isModified
@@ -686,7 +686,7 @@ def test_isModified_inm_invalid_tag(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_star(self):
         from plone.app.caching.operations.utils import isModified
@@ -699,7 +699,7 @@ def test_isModified_inm_star(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_single(self):
         from plone.app.caching.operations.utils import isModified
@@ -712,7 +712,7 @@ def test_isModified_inm_match_single(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_update(self):
         """
@@ -736,7 +736,7 @@ def test_isModified_inm_match_update(self):
 
         etag = None
 
-        self.assertEqual(True, isModified(request, etag=etag,
+        self.assertTrue(isModified(request, etag=etag,
                                           lastModified='doesnt_really_matter'))
 
     def test_isModified_inm_match_multiple(self):
@@ -750,7 +750,7 @@ def test_isModified_inm_match_multiple(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_weak(self):
         from plone.app.caching.operations.utils import isModified
@@ -763,7 +763,7 @@ def test_isModified_inm_match_weak(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_ignores_ims_if_no_last_modified_date(self):
         from plone.app.caching.operations.utils import isModified
@@ -778,7 +778,7 @@ def test_isModified_inm_match_ignores_ims_if_no_last_modified_date(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_modified(self):
         from plone.app.caching.operations.utils import isModified
@@ -795,7 +795,7 @@ def test_isModified_inm_match_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(
+        self.assertTrue(isModified(
             request, etag=etag, lastModified=lastModified))
 
     def test_isModified_inm_match_not_modified(self):
@@ -813,7 +813,7 @@ def test_isModified_inm_match_not_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(False, isModified(
+        self.assertFalse(isModified(
             request, etag=etag, lastModified=lastModified))
 
     # visibleToRole()
@@ -821,7 +821,7 @@ def test_isModified_inm_match_not_modified(self):
     def test_visibleToRole_not_real(self):
         from plone.app.caching.operations.utils import visibleToRole
         published = DummyPublished()
-        self.assertEqual(False, visibleToRole(published, role='Anonymous'))
+        self.assertFalse(visibleToRole(published, role='Anonymous'))
 
     def test_visibleToRole_permission(self):
         from plone.app.caching.operations.utils import visibleToRole
@@ -829,10 +829,10 @@ def test_visibleToRole_permission(self):
         s = SimpleItem()
 
         s.manage_permission('View', ('Member', 'Manager',))
-        self.assertEqual(False, visibleToRole(s, role='Anonymous'))
+        self.assertFalse(visibleToRole(s, role='Anonymous'))
 
         s.manage_permission('View', ('Member', 'Manager', 'Anonymous',))
-        self.assertEqual(True, visibleToRole(s, role='Anonymous'))
+        self.assertTrue(visibleToRole(s, role='Anonymous'))
 
 
 class MiscHelpersTest(unittest.TestCase):
@@ -898,7 +898,7 @@ def test_formatDateTime_local(self):
 
         # Who knows what your local timezone is :-)
         self.assertTrue(inGMT.endswith(' GMT'))
-        self.assertTrue('Nov 2010' in inGMT)
+        self.assertIn('Nov 2010', inGMT)
 
         # We lose microseconds. Big whoop.
         p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())
@@ -914,7 +914,7 @@ def test_formatDateTime_naive(self):
 
         # Who knows what your local timezone is :-)
         self.assertTrue(inGMT.endswith(' GMT'))
-        self.assertTrue('Nov 2010' in inGMT)
+        self.assertIn('Nov 2010', inGMT)
 
         # Can't compare offset aware and naive
         p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())
@@ -926,7 +926,7 @@ def test_formatDateTime_naive(self):
     def test_parseDateTime_invalid(self):
         from plone.app.caching.operations.utils import parseDateTime
 
-        self.assertEqual(None, parseDateTime('foo'))
+        self.assertIsNone(parseDateTime('foo'))
 
     def test_parseDateTime_rfc1123(self):
         from plone.app.caching.operations.utils import parseDateTime
@@ -948,7 +948,7 @@ def test_getLastModified_no_adaper(self):
         from plone.app.caching.operations.utils import getLastModified
 
         published = DummyPublished()
-        self.assertEqual(None, getLastModified(published))
+        self.assertIsNone(getLastModified(published))
 
     def test_getLastModified_none(self):
         from plone.app.caching.operations.utils import getLastModified
@@ -966,7 +966,7 @@ def __call__(self):
         provideAdapter(DummyLastModified)
 
         published = DummyPublished()
-        self.assertEqual(None, getLastModified(published))
+        self.assertIsNone(getLastModified(published))
 
     def test_getLastModified_missing_timezone(self):
         from plone.app.caching.operations.utils import getLastModified
@@ -1047,7 +1047,7 @@ def test_getExpiration_future(self):
         difference = val - now
 
         # give the test two seconds' leeway
-        self.assertTrue(difference >= datetime.timedelta(seconds=58))
+        self.assertGreaterEqual(difference, datetime.timedelta(seconds=58))
 
     # getETag()
 
@@ -1070,8 +1070,7 @@ def test_getETag_key_not_found(self):
         request = HTTPRequest(StringIO(), environ, response)
         published = DummyPublished()
 
-        self.assertEqual(None, getETag(
-            published, request, keys=('foo', 'bar',)))
+        self.assertIsNone(getETag(published, request, keys=('foo', 'bar',)))
 
     def test_getETag_adapter_returns_none(self):
         from plone.app.caching.operations.utils import getETag
@@ -1235,7 +1234,7 @@ def setUp(self):
 
     def test_getRAMCache_no_chooser(self):
         from plone.app.caching.operations.utils import getRAMCache
-        self.assertEqual(None, getRAMCache())
+        self.assertIsNone(getRAMCache())
 
     def test_getRAMCache_custom_global_key(self):
         from plone.app.caching.operations.utils import getRAMCache
@@ -1469,7 +1468,7 @@ def test_fetchFromRAMCache_no_cache(self):
         request.environ['PATH_INFO'] = '/foo/bar'
         request.environ['QUERY_STRING'] = ''
 
-        self.assertEqual(None, fetchFromRAMCache(request))
+        self.assertIsNone(fetchFromRAMCache(request))
 
     def test_fetchFromRAMCache_minimal(self):
         from plone.app.caching.operations.utils import fetchFromRAMCache
@@ -1590,7 +1589,7 @@ def __call__(self, key):
 
         cached = normalize_response_cache(
             fetchFromRAMCache(request, etag='|foo'))
-        self.assertEqual(None, cached)
+        self.assertIsNone(cached)
 
     def test_fetchFromRAMCache_miss_custom_default(self):
         from plone.app.caching.operations.utils import fetchFromRAMCache
@@ -1621,4 +1620,4 @@ def __call__(self, key):
         marker = object()
         cached = normalize_response_cache(
             fetchFromRAMCache(request, etag='|foo', default=marker))
-        self.assertTrue(cached is marker)
+        self.assertIs(cached, marker)
diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py
index 8098527..eec9ffb 100644
--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py
@@ -26,7 +26,7 @@
 import dateutil.tz
 import os
 import pkg_resources
-import unittest2 as unittest
+import unittest
 
 
 TEST_FILE = pkg_resources.resource_filename(
@@ -149,7 +149,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"|test_user_1_|%d|en|%s|0|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Set the copy/cut cookie and then request the folder view again
@@ -173,7 +173,7 @@ def test_composite_views(self):
             'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
         )
         browser.open(self.portal['f1']['d1'].absolute_url())
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -183,7 +183,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"|test_user_1_|%d|en|%s|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated page again -- to test RAM cache.
@@ -198,7 +198,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
         # Request the authenticated page again -- with an INM header to test
         # 304
@@ -228,7 +228,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"||%d|en|%s|0|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page
@@ -239,13 +239,13 @@ def test_composite_views(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         self.assertEqual('"||%d|en|%s|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- to test RAM cache.
@@ -260,12 +260,12 @@ def test_composite_views(self):
         # This should come from RAM cache
         self.assertEqual('plone.app.caching.operations.ramcache',
                          browser.headers['X-RAMCache'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         self.assertEqual('"||%d|en|%s|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- with an INM header to test 304.
@@ -305,7 +305,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # The etag has changed so we should get a fresh page.
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
         self.assertEqual('200 Ok', browser.headers['Status'])
 
     def test_content_feeds(self):
@@ -337,7 +337,7 @@ def test_content_feeds(self):
             skins_tool.default_skin,
         )
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- to test RAM cache
@@ -359,7 +359,7 @@ def test_content_feeds(self):
             skins_tool.default_skin,
         )
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- with an INM header to test 304.
@@ -394,7 +394,7 @@ def test_content_feeds(self):
             skins_tool.default_skin,
         )
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
@@ -408,7 +408,7 @@ def test_content_feeds(self):
         self.assertEqual('plone.app.caching.moderateCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
     def test_content_files(self):
 
@@ -446,7 +446,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request an image scale with Manager role
@@ -468,7 +468,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Publish the folder
@@ -489,7 +489,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the image again -- with an IMS header to test 304
@@ -518,7 +518,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
     def test_resources(self):
@@ -541,7 +541,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
         # Request the skin image again -- with an IMS header to test 304
         lastmodified = browser.headers['Last-Modified']
@@ -580,7 +580,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
     def test_stable_resources(self):
         # This is a clone of the same test for 'without-caching-proxy'
diff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py
index bf0d2b9..51d2634 100644
--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py
@@ -23,7 +23,7 @@
 import dateutil.tz
 import os
 import pkg_resources
-import unittest2 as unittest
+import unittest
 
 
 TEST_FILE = pkg_resources.resource_filename(
@@ -144,7 +144,7 @@ def test_composite_views(self):
             default_skin,
         )
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Set the copy/cut cookie and then request the folder view again
@@ -171,7 +171,7 @@ def test_composite_views(self):
             'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
         )
         browser.open(self.portal['f1']['d1'].absolute_url())
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -184,7 +184,7 @@ def test_composite_views(self):
             default_skin,
         )
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated page again -- to test RAM cache.
@@ -199,7 +199,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
         # Request the authenticated page again -- with an INM header to test
         # 304
@@ -229,7 +229,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}|0|0'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page
@@ -240,13 +240,13 @@ def test_composite_views(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- to test RAM cache.
@@ -261,12 +261,12 @@ def test_composite_views(self):
         # This should come from RAM cache
         self.assertEqual('plone.app.caching.operations.ramcache',
                          browser.headers['X-RAMCache'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- with an INM header to test 304.
@@ -305,7 +305,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # The etag has changed so we should get a fresh page.
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
         self.assertEqual('200 Ok', browser.headers['Status'])
 
     def test_content_feeds(self):
@@ -334,7 +334,7 @@ def test_content_feeds(self):
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- to test RAM cache
@@ -353,7 +353,7 @@ def test_content_feeds(self):
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- with an INM header to test 304.
@@ -387,7 +387,7 @@ def test_content_feeds(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"|test_user_1_|{0}|en|{1}"'.format(
             catalog.getCounter(), default_skin), browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
@@ -403,7 +403,7 @@ def test_content_feeds(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
     def test_content_files(self):
 
@@ -439,7 +439,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the image again -- with an IMS header to test 304
@@ -468,7 +468,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
     def test_resources(self):
@@ -489,7 +489,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
         # Request the skin image again -- with an IMS header to test 304
         lastmodified = browser.headers['Last-Modified']
@@ -528,7 +528,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
     def test_stable_resources(self):
         # We don't actually have any non-RR stable resources yet
diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py
index cea2089..bbc0a38 100644
--- a/plone/app/caching/tests/test_purge.py
+++ b/plone/app/caching/tests/test_purge.py
@@ -32,7 +32,7 @@
 from zope.lifecycleevent import ObjectMovedEvent
 from zope.lifecycleevent import ObjectRemovedEvent
 
-import unittest2 as unittest
+import unittest
 
 
 class Handler(object):
diff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py
index ef64189..a95b2ea 100644
--- a/plone/app/caching/tests/test_utils.py
+++ b/plone/app/caching/tests/test_utils.py
@@ -16,7 +16,7 @@
 from zope.interface import implementer
 
 import pytz
-import unittest2 as unittest
+import unittest
 
 
 TEST_TIMEZONE = 'Europe/Vienna'
@@ -85,12 +85,12 @@ def setUp(self):
 
     def test_no_registry(self):
         content = DummyContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_no_settings(self):
         provideUtility(Registry(), IRegistry)
         content = DummyContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_no_portal_type(self):
         provideUtility(Registry(), IRegistry)
@@ -101,7 +101,7 @@ def test_no_portal_type(self):
         ploneSettings.purgedContentTypes = ('testtype',)
 
         content = DummyNotContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_not_listed(self):
         provideUtility(Registry(), IRegistry)
@@ -112,7 +112,7 @@ def test_not_listed(self):
         ploneSettings.purgedContentTypes = ('File', 'Image',)
 
         content = DummyContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_listed(self):
         provideUtility(Registry(), IRegistry)
@@ -123,7 +123,7 @@ def test_listed(self):
         ploneSettings.purgedContentTypes = ('File', 'Image', 'testtype',)
 
         content = DummyContent()
-        self.assertEqual(True, isPurged(content))
+        self.assertTrue(isPurged(content))
 
 
 class TestGetObjectDefaultPath(unittest.TestCase):
@@ -132,7 +132,7 @@ class TestGetObjectDefaultPath(unittest.TestCase):
 
     def test_not_content(self):
         context = DummyNotContent()
-        self.assertEqual(None, getObjectDefaultView(context))
+        self.assertIsNone(getObjectDefaultView(context))
 
     def test_browserdefault(self):
         context = DummyContent()


Repository: plone.app.caching


Branch: refs/heads/master
Date: 2017-01-12T21:21:52+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/0dbad2c3b058105cb920cc2d6247caa0718fdcdb

Merge pull request #32 from plone/hvelarde-unittest2

Remove dependency on unittest2

Files changed:
M CHANGES.rst
M plone/app/caching/tests/test_etags.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_lastmodified.py
M plone/app/caching/tests/test_lookup.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fdfceb3..1226619 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,6 +6,9 @@ Changelog
 
 Bug fixes:
 
+- Remove dependency on unittest2; fix tests assertions.
+  [hvelarde]
+
 - Fixed tests when using ZODB 4.
   [davisagli]
 
diff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py
index 7de8085..aae3ae6 100644
--- a/plone/app/caching/tests/test_etags.py
+++ b/plone/app/caching/tests/test_etags.py
@@ -15,7 +15,7 @@
 from ZPublisher.HTTPResponse import HTTPResponse
 
 import time
-import unittest2 as unittest
+import unittest
 
 
 @implementer(IContentish)
@@ -60,7 +60,7 @@ def member(self):
 
         etag = UserID(published, request)
 
-        self.assertEqual(None, etag())
+        self.assertIsNone(etag())
 
     def test_UserID_member(self):
         from plone.app.caching.operations.etags import UserID
@@ -218,7 +218,7 @@ def test_LastModified_no_adapter(self):
 
         etag = LastModified(published, request)
 
-        self.assertEqual(None, etag())
+        self.assertIsNone(etag())
 
     def test_LastModified_None(self):
         from plone.app.caching.operations.etags import LastModified
@@ -242,7 +242,7 @@ def __call__(self):
 
         etag = LastModified(published, request)
 
-        self.assertEqual(None, etag())
+        self.assertIsNone(etag())
 
     def test_LastModified(self):
         from plone.app.caching.operations.etags import LastModified
diff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py
index cef39c2..8c217b2 100644
--- a/plone/app/caching/tests/test_integration.py
+++ b/plone/app/caching/tests/test_integration.py
@@ -19,7 +19,7 @@
 
 import OFS.Image
 import pkg_resources
-import unittest2 as unittest
+import unittest
 
 
 TEST_IMAGE = pkg_resources.resource_filename(
@@ -138,25 +138,25 @@ def test_disabled(self):
 
         # Check that we can open all without errors and without cache headers
         browser.open(self.portal.absolute_url())
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1'].absolute_url())
-        self.assertTrue('Folder one description' in browser.contents)
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertIn('Folder one description', browser.contents)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1']['d1'].absolute_url())
-        self.assertTrue('Document one description' in browser.contents)
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertIn('Document one description', browser.contents)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1']['i1'].absolute_url())
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(self.portal['f1']['f1'].absolute_url())
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(
             self.portal.absolute_url() + '/portal_skins/custom/test.gif')
-        self.assertFalse('Cache-Control' in browser.headers)
+        self.assertNotIn('Cache-Control', browser.headers)
 
         browser.open(
             self.portal.absolute_url() + '/++resource++plone.app.caching.gif')
diff --git a/plone/app/caching/tests/test_lastmodified.py b/plone/app/caching/tests/test_lastmodified.py
index 387d24c..3b5739e 100644
--- a/plone/app/caching/tests/test_lastmodified.py
+++ b/plone/app/caching/tests/test_lastmodified.py
@@ -10,7 +10,7 @@
 import DateTime
 import os
 import time
-import unittest2 as unittest
+import unittest
 
 
 class FauxDataManager(object):
@@ -51,7 +51,7 @@ class Dummy(Persistent, Explicit):
 
         from Products.PageTemplates.ZopePageTemplate import ZopePageTemplate
         zpt = ZopePageTemplate('zpt').__of__(d)
-        self.assertEqual(None, ILastModified(zpt)())
+        self.assertIsNone(ILastModified(zpt)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         # equivalent in local time, which is what the last-modified adapter
@@ -74,7 +74,7 @@ class Dummy(Persistent, Explicit):
 
         from Products.CMFCore.FSPageTemplate import FSPageTemplate
         zpt = FSPageTemplate('zpt', __file__).__of__(d)
-        self.assertEqual(None, ILastModified(zpt)())
+        self.assertIsNone(ILastModified(zpt)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         # equivalent in local time, which is what the last-modified adapter
@@ -88,7 +88,7 @@ def test_OFSFileLastModified_File(self):
         from OFS.Image import File
 
         dummy = File('dummy', 'Dummy', 'data')
-        self.assertEqual(None, ILastModified(dummy)())
+        self.assertIsNone(ILastModified(dummy)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         ts = TimeStamp(*time.gmtime(timestamp)[:6])  # corresponding TimeStamp
@@ -105,7 +105,7 @@ def test_OFSFileLastModified_Image(self):
         from OFS.Image import Image
 
         dummy = Image('dummy', 'Dummy', 'data')
-        self.assertEqual(None, ILastModified(dummy)())
+        self.assertIsNone(ILastModified(dummy)())
 
         timestamp = 987654321.0  # time stamp (in UTC)
         ts = TimeStamp(*time.gmtime(timestamp)[:6])  # corresponding TimeStamp
@@ -160,7 +160,7 @@ def modified(self):
 
         d = Dummy()
 
-        self.assertEqual(None, ILastModified(d)())
+        self.assertIsNone(ILastModified(d)())
 
         d._mod = datetime.datetime(2001, 4, 19, 12, 25, 21, 120000)
         self.assertEqual(d._mod, ILastModified(d)())
@@ -183,7 +183,7 @@ def modified(self):
 
         d = Dummy()
 
-        self.assertEqual(None, ILastModified(d)())
+        self.assertIsNone(ILastModified(d)())
 
         d._mod = datetime.datetime(2001, 4, 19, 12, 25, 21, 120000)
         self.assertEqual(d._mod, ILastModified(d)())
diff --git a/plone/app/caching/tests/test_lookup.py b/plone/app/caching/tests/test_lookup.py
index 282d967..84773f5 100644
--- a/plone/app/caching/tests/test_lookup.py
+++ b/plone/app/caching/tests/test_lookup.py
@@ -15,7 +15,7 @@
 from zope.component import provideUtility
 from zope.interface import implementer
 
-import unittest2 as unittest
+import unittest
 import z3c.caching.registry
 
 
@@ -92,7 +92,7 @@ def test_no_registry(self):
         published = ZopePageTemplate('someView')
         request = DummyRequest(published, DummyResponse())
 
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_no_mappings(self):
         provideUtility(Registry(), IRegistry)
@@ -101,7 +101,7 @@ def test_no_mappings(self):
 
         published = ZopePageTemplate('someView')
         request = DummyRequest(published, DummyResponse())
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_template_lookup(self):
         provideUtility(Registry(), IRegistry)
@@ -201,7 +201,7 @@ def test_contenttype_not_default_view(self):
 
         published = ZopePageTemplate('someView').__of__(DummyContent())
         request = DummyRequest(published, DummyResponse())
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_parent_not_content(self):
         provideUtility(Registry(), IRegistry)
@@ -214,7 +214,7 @@ def test_parent_not_content(self):
 
         published = ZopePageTemplate('defaultView').__of__(DummyNotContent())
         request = DummyRequest(published, DummyResponse())
-        self.assertEqual(None, ContentItemLookup(published, request)())
+        self.assertIsNone(ContentItemLookup(published, request)())
 
     def test_parent_not_IBrowserDefault_methodid(self):
         provideUtility(Registry(), IRegistry)
diff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py
index b098994..ac9c5a2 100644
--- a/plone/app/caching/tests/test_operation_default.py
+++ b/plone/app/caching/tests/test_operation_default.py
@@ -11,7 +11,7 @@
 from zope.component import getUtility
 from zope.globalrequest import setRequest
 
-import unittest2 as unittest
+import unittest
 
 
 class TestOperationDefault(unittest.TestCase):
@@ -67,7 +67,7 @@ def test_last_modified_no_etags(self):
         browser.getControl(
             name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
-        self.assertFalse('Etag' in browser.headers)
+        self.assertNotIn('Etag', browser.headers)
 
         # now set up etags and make sure that a header is added
         self.registry['plone.app.caching.weakCaching.etags'] = (
@@ -81,4 +81,4 @@ def test_last_modified_no_etags(self):
         browser.getControl(
             name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
-        self.assertTrue('Etag' in browser.headers)
+        self.assertIn('Etag', browser.headers)
diff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py
index 5bded43..fbca715 100644
--- a/plone/app/caching/tests/test_operation_parameters.py
+++ b/plone/app/caching/tests/test_operation_parameters.py
@@ -12,7 +12,7 @@
 from zope.globalrequest import setRequest
 
 import transaction
-import unittest2 as unittest
+import unittest
 
 
 class TestOperationParameters(unittest.TestCase):
@@ -74,7 +74,7 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
 
@@ -96,11 +96,11 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, s-maxage=60, must-revalidate',
                          browser.headers['Cache-Control'])
         self.assertEqual('X-Anonymous', browser.headers['Vary'])
-        self.assertFalse('Etag' in browser.headers)
+        self.assertNotIn('Etag', browser.headers)
 
         # View the page as logged-in
         browser = Browser(self.app)
@@ -113,10 +113,10 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.moderateCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertTrue('Etag' in browser.headers)
+        self.assertIn('Etag', browser.headers)
 
         # Set pages to have strong caching so that we can see the difference
         # between logged in and anonymous
@@ -134,11 +134,11 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.strongCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=86400, proxy-revalidate, public',
                          browser.headers['Cache-Control'])
         self.assertEqual('X-Anonymous', browser.headers['Vary'])
-        self.assertFalse('Etag' in browser.headers)
+        self.assertNotIn('Etag', browser.headers)
 
         # View the page as logged-in
         browser = Browser(self.app)
@@ -151,10 +151,10 @@ def test_anon_only(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.strongCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
-        self.assertTrue('Etag' in browser.headers)
+        self.assertIn('Etag', browser.headers)
 
         # Check an edge case that has had a problem in the past:
         # setting strongCaching maxage to zero.
diff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py
index 1115f2b..d162f05 100644
--- a/plone/app/caching/tests/test_operation_utils.py
+++ b/plone/app/caching/tests/test_operation_utils.py
@@ -22,7 +22,7 @@
 import dateutil.parser
 import dateutil.tz
 import time
-import unittest2 as unittest
+import unittest
 import wsgiref.handlers
 
 
@@ -65,10 +65,10 @@ def test_doNotCache(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_doNotCache_deletes_last_modified(self):
         from plone.app.caching.operations.utils import doNotCache
@@ -89,10 +89,10 @@ def test_doNotCache_deletes_last_modified(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     # cacheInBrowser()
 
@@ -111,11 +111,11 @@ def test_cacheInBrowser_no_etag_no_last_modified(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInBrowser_etag(self):
         from plone.app.caching.operations.utils import cacheInBrowser
@@ -133,11 +133,11 @@ def test_cacheInBrowser_etag(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
         self.assertEqual('"|foo|bar|"', response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInBrowser_lastModified(self):
         from plone.app.caching.operations.utils import cacheInBrowser
@@ -157,10 +157,10 @@ def test_cacheInBrowser_lastModified(self):
         self.assertEqual('max-age=0, must-revalidate, private',
                          response.getHeader('Cache-Control'))
         self.assertEqual(nowFormatted, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInBrowser_lastModified_and_etag(self):
         from plone.app.caching.operations.utils import cacheInBrowser
@@ -186,7 +186,7 @@ def test_cacheInBrowser_lastModified_and_etag(self):
         self.assertEqual('"|foo|bar|"', response.getHeader('ETag', literal=1))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     # cacheInProxy()
 
@@ -205,12 +205,12 @@ def test_cacheInProxy_minimal(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=0, s-maxage=60, must-revalidate',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
-        self.assertEqual(None, response.getHeader('Vary'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('Vary'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     def test_cacheInProxy_full(self):
         from plone.app.caching.operations.utils import cacheInProxy
@@ -238,7 +238,7 @@ def test_cacheInProxy_full(self):
         self.assertEqual('Accept-Language', response.getHeader('Vary'))
 
         expires = dateutil.parser.parse(response.getHeader('Expires'))
-        self.assertTrue(now > expires)
+        self.assertGreater(now, expires)
 
     # cacheInBrowserAndProxy()
 
@@ -257,13 +257,13 @@ def test_cacheInBrowserAndProxy_minimal(self):
         self.assertEqual(200, response.getStatus())
         self.assertEqual('max-age=60, proxy-revalidate, public',
                          response.getHeader('Cache-Control'))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('ETag', literal=1))
-        self.assertEqual(None, response.getHeader('Vary'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('ETag', literal=1))
+        self.assertIsNone(response.getHeader('Vary'))
 
         timedelta = dateutil.parser.parse(response.getHeader('Expires')) - now
-        self.assertFalse(timedelta < datetime.timedelta(seconds=59))
-        self.assertFalse(timedelta > datetime.timedelta(seconds=60))
+        self.assertGreaterEqual(timedelta, datetime.timedelta(seconds=59))
+        self.assertLessEqual(timedelta, datetime.timedelta(seconds=60))
 
     def test_cacheInBrowserAndProxy_full(self):
         from plone.app.caching.operations.utils import cacheInBrowserAndProxy
@@ -523,9 +523,9 @@ def test_notModified_full(self):
 
         self.assertEqual(u"", body)
         self.assertEqual(etag, response.getHeader('ETag', literal=1))
-        self.assertEqual(None, response.getHeader('Last-Modified'))
-        self.assertEqual(None, response.getHeader('Expires'))
-        self.assertEqual(None, response.getHeader('Cache-Control'))
+        self.assertIsNone(response.getHeader('Last-Modified'))
+        self.assertIsNone(response.getHeader('Expires'))
+        self.assertIsNone(response.getHeader('Cache-Control'))
         self.assertEqual(304, response.getStatus())
 
 
@@ -546,7 +546,7 @@ def test_isModified_no_headers_no_keys(self):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        self.assertEqual(True, isModified(request))
+        self.assertTrue(isModified(request))
 
     def test_isModified_no_headers_with_keys(self):
         from plone.app.caching.operations.utils import isModified
@@ -559,7 +559,7 @@ def test_isModified_no_headers_with_keys(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(
+        self.assertTrue(isModified(
             request, etag=etag, lastModified=lastModified))
 
     def test_isModified_ims_invalid_date(self):
@@ -574,7 +574,7 @@ def test_isModified_ims_invalid_date(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(request, lastModified=lastModified))
+        self.assertTrue(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_modified(self):
         from plone.app.caching.operations.utils import isModified
@@ -589,7 +589,7 @@ def test_isModified_ims_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(request, lastModified=lastModified))
+        self.assertTrue(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_not_modified(self):
         from plone.app.caching.operations.utils import isModified
@@ -604,7 +604,7 @@ def test_isModified_ims_not_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(False, isModified(request, lastModified=lastModified))
+        self.assertFalse(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_not_modified_two_dates(self):
         from plone.app.caching.operations.utils import isModified
@@ -619,7 +619,7 @@ def test_isModified_ims_not_modified_two_dates(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(False, isModified(request, lastModified=lastModified))
+        self.assertFalse(isModified(request, lastModified=lastModified))
 
     def test_isModified_ims_not_modified_etag_no_inm_header(self):
         from plone.app.caching.operations.utils import isModified
@@ -635,7 +635,7 @@ def test_isModified_ims_not_modified_etag_no_inm_header(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(
+        self.assertTrue(isModified(
             request, etag=etag, lastModified=lastModified))
 
     def test_isModified_inm_no_tags(self):
@@ -647,7 +647,7 @@ def test_isModified_inm_no_tags(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_one_tag_no_match(self):
         from plone.app.caching.operations.utils import isModified
@@ -660,7 +660,7 @@ def test_isModified_inm_one_tag_no_match(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_multiple_tags_no_match(self):
         from plone.app.caching.operations.utils import isModified
@@ -673,7 +673,7 @@ def test_isModified_inm_multiple_tags_no_match(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_invalid_tag(self):
         from plone.app.caching.operations.utils import isModified
@@ -686,7 +686,7 @@ def test_isModified_inm_invalid_tag(self):
 
         etag = '|foo'
 
-        self.assertEqual(True, isModified(request, etag=etag))
+        self.assertTrue(isModified(request, etag=etag))
 
     def test_isModified_inm_star(self):
         from plone.app.caching.operations.utils import isModified
@@ -699,7 +699,7 @@ def test_isModified_inm_star(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_single(self):
         from plone.app.caching.operations.utils import isModified
@@ -712,7 +712,7 @@ def test_isModified_inm_match_single(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_update(self):
         """
@@ -736,7 +736,7 @@ def test_isModified_inm_match_update(self):
 
         etag = None
 
-        self.assertEqual(True, isModified(request, etag=etag,
+        self.assertTrue(isModified(request, etag=etag,
                                           lastModified='doesnt_really_matter'))
 
     def test_isModified_inm_match_multiple(self):
@@ -750,7 +750,7 @@ def test_isModified_inm_match_multiple(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_weak(self):
         from plone.app.caching.operations.utils import isModified
@@ -763,7 +763,7 @@ def test_isModified_inm_match_weak(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_ignores_ims_if_no_last_modified_date(self):
         from plone.app.caching.operations.utils import isModified
@@ -778,7 +778,7 @@ def test_isModified_inm_match_ignores_ims_if_no_last_modified_date(self):
 
         etag = '|foo'
 
-        self.assertEqual(False, isModified(request, etag=etag))
+        self.assertFalse(isModified(request, etag=etag))
 
     def test_isModified_inm_match_modified(self):
         from plone.app.caching.operations.utils import isModified
@@ -795,7 +795,7 @@ def test_isModified_inm_match_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(True, isModified(
+        self.assertTrue(isModified(
             request, etag=etag, lastModified=lastModified))
 
     def test_isModified_inm_match_not_modified(self):
@@ -813,7 +813,7 @@ def test_isModified_inm_match_not_modified(self):
         lastModified = datetime.datetime(
             2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc())
 
-        self.assertEqual(False, isModified(
+        self.assertFalse(isModified(
             request, etag=etag, lastModified=lastModified))
 
     # visibleToRole()
@@ -821,7 +821,7 @@ def test_isModified_inm_match_not_modified(self):
     def test_visibleToRole_not_real(self):
         from plone.app.caching.operations.utils import visibleToRole
         published = DummyPublished()
-        self.assertEqual(False, visibleToRole(published, role='Anonymous'))
+        self.assertFalse(visibleToRole(published, role='Anonymous'))
 
     def test_visibleToRole_permission(self):
         from plone.app.caching.operations.utils import visibleToRole
@@ -829,10 +829,10 @@ def test_visibleToRole_permission(self):
         s = SimpleItem()
 
         s.manage_permission('View', ('Member', 'Manager',))
-        self.assertEqual(False, visibleToRole(s, role='Anonymous'))
+        self.assertFalse(visibleToRole(s, role='Anonymous'))
 
         s.manage_permission('View', ('Member', 'Manager', 'Anonymous',))
-        self.assertEqual(True, visibleToRole(s, role='Anonymous'))
+        self.assertTrue(visibleToRole(s, role='Anonymous'))
 
 
 class MiscHelpersTest(unittest.TestCase):
@@ -898,7 +898,7 @@ def test_formatDateTime_local(self):
 
         # Who knows what your local timezone is :-)
         self.assertTrue(inGMT.endswith(' GMT'))
-        self.assertTrue('Nov 2010' in inGMT)
+        self.assertIn('Nov 2010', inGMT)
 
         # We lose microseconds. Big whoop.
         p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())
@@ -914,7 +914,7 @@ def test_formatDateTime_naive(self):
 
         # Who knows what your local timezone is :-)
         self.assertTrue(inGMT.endswith(' GMT'))
-        self.assertTrue('Nov 2010' in inGMT)
+        self.assertIn('Nov 2010', inGMT)
 
         # Can't compare offset aware and naive
         p = dateutil.parser.parse(inGMT).astimezone(dateutil.tz.tzlocal())
@@ -926,7 +926,7 @@ def test_formatDateTime_naive(self):
     def test_parseDateTime_invalid(self):
         from plone.app.caching.operations.utils import parseDateTime
 
-        self.assertEqual(None, parseDateTime('foo'))
+        self.assertIsNone(parseDateTime('foo'))
 
     def test_parseDateTime_rfc1123(self):
         from plone.app.caching.operations.utils import parseDateTime
@@ -948,7 +948,7 @@ def test_getLastModified_no_adaper(self):
         from plone.app.caching.operations.utils import getLastModified
 
         published = DummyPublished()
-        self.assertEqual(None, getLastModified(published))
+        self.assertIsNone(getLastModified(published))
 
     def test_getLastModified_none(self):
         from plone.app.caching.operations.utils import getLastModified
@@ -966,7 +966,7 @@ def __call__(self):
         provideAdapter(DummyLastModified)
 
         published = DummyPublished()
-        self.assertEqual(None, getLastModified(published))
+        self.assertIsNone(getLastModified(published))
 
     def test_getLastModified_missing_timezone(self):
         from plone.app.caching.operations.utils import getLastModified
@@ -1047,7 +1047,7 @@ def test_getExpiration_future(self):
         difference = val - now
 
         # give the test two seconds' leeway
-        self.assertTrue(difference >= datetime.timedelta(seconds=58))
+        self.assertGreaterEqual(difference, datetime.timedelta(seconds=58))
 
     # getETag()
 
@@ -1070,8 +1070,7 @@ def test_getETag_key_not_found(self):
         request = HTTPRequest(StringIO(), environ, response)
         published = DummyPublished()
 
-        self.assertEqual(None, getETag(
-            published, request, keys=('foo', 'bar',)))
+        self.assertIsNone(getETag(published, request, keys=('foo', 'bar',)))
 
     def test_getETag_adapter_returns_none(self):
         from plone.app.caching.operations.utils import getETag
@@ -1235,7 +1234,7 @@ def setUp(self):
 
     def test_getRAMCache_no_chooser(self):
         from plone.app.caching.operations.utils import getRAMCache
-        self.assertEqual(None, getRAMCache())
+        self.assertIsNone(getRAMCache())
 
     def test_getRAMCache_custom_global_key(self):
         from plone.app.caching.operations.utils import getRAMCache
@@ -1469,7 +1468,7 @@ def test_fetchFromRAMCache_no_cache(self):
         request.environ['PATH_INFO'] = '/foo/bar'
         request.environ['QUERY_STRING'] = ''
 
-        self.assertEqual(None, fetchFromRAMCache(request))
+        self.assertIsNone(fetchFromRAMCache(request))
 
     def test_fetchFromRAMCache_minimal(self):
         from plone.app.caching.operations.utils import fetchFromRAMCache
@@ -1590,7 +1589,7 @@ def __call__(self, key):
 
         cached = normalize_response_cache(
             fetchFromRAMCache(request, etag='|foo'))
-        self.assertEqual(None, cached)
+        self.assertIsNone(cached)
 
     def test_fetchFromRAMCache_miss_custom_default(self):
         from plone.app.caching.operations.utils import fetchFromRAMCache
@@ -1621,4 +1620,4 @@ def __call__(self, key):
         marker = object()
         cached = normalize_response_cache(
             fetchFromRAMCache(request, etag='|foo', default=marker))
-        self.assertTrue(cached is marker)
+        self.assertIs(cached, marker)
diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py
index 8098527..eec9ffb 100644
--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py
@@ -26,7 +26,7 @@
 import dateutil.tz
 import os
 import pkg_resources
-import unittest2 as unittest
+import unittest
 
 
 TEST_FILE = pkg_resources.resource_filename(
@@ -149,7 +149,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"|test_user_1_|%d|en|%s|0|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Set the copy/cut cookie and then request the folder view again
@@ -173,7 +173,7 @@ def test_composite_views(self):
             'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
         )
         browser.open(self.portal['f1']['d1'].absolute_url())
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -183,7 +183,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"|test_user_1_|%d|en|%s|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated page again -- to test RAM cache.
@@ -198,7 +198,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
         # Request the authenticated page again -- with an INM header to test
         # 304
@@ -228,7 +228,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"||%d|en|%s|0|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page
@@ -239,13 +239,13 @@ def test_composite_views(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         self.assertEqual('"||%d|en|%s|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- to test RAM cache.
@@ -260,12 +260,12 @@ def test_composite_views(self):
         # This should come from RAM cache
         self.assertEqual('plone.app.caching.operations.ramcache',
                          browser.headers['X-RAMCache'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         self.assertEqual('"||%d|en|%s|0' % (catalog.getCounter(
         ), skins_tool.default_skin), _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- with an INM header to test 304.
@@ -305,7 +305,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # The etag has changed so we should get a fresh page.
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
         self.assertEqual('200 Ok', browser.headers['Status'])
 
     def test_content_feeds(self):
@@ -337,7 +337,7 @@ def test_content_feeds(self):
             skins_tool.default_skin,
         )
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- to test RAM cache
@@ -359,7 +359,7 @@ def test_content_feeds(self):
             skins_tool.default_skin,
         )
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- with an INM header to test 304.
@@ -394,7 +394,7 @@ def test_content_feeds(self):
             skins_tool.default_skin,
         )
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
@@ -408,7 +408,7 @@ def test_content_feeds(self):
         self.assertEqual('plone.app.caching.moderateCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
     def test_content_files(self):
 
@@ -446,7 +446,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request an image scale with Manager role
@@ -468,7 +468,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Publish the folder
@@ -489,7 +489,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the image again -- with an IMS header to test 304
@@ -518,7 +518,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
     def test_resources(self):
@@ -541,7 +541,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
         # Request the skin image again -- with an IMS header to test 304
         lastmodified = browser.headers['Last-Modified']
@@ -580,7 +580,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
     def test_stable_resources(self):
         # This is a clone of the same test for 'without-caching-proxy'
diff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py
index bf0d2b9..51d2634 100644
--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py
@@ -23,7 +23,7 @@
 import dateutil.tz
 import os
 import pkg_resources
-import unittest2 as unittest
+import unittest
 
 
 TEST_FILE = pkg_resources.resource_filename(
@@ -144,7 +144,7 @@ def test_composite_views(self):
             default_skin,
         )
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Set the copy/cut cookie and then request the folder view again
@@ -171,7 +171,7 @@ def test_composite_views(self):
             'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
         )
         browser.open(self.portal['f1']['d1'].absolute_url())
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('plone.content.itemView',
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
@@ -184,7 +184,7 @@ def test_composite_views(self):
             default_skin,
         )
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated page again -- to test RAM cache.
@@ -199,7 +199,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
         # Request the authenticated page again -- with an INM header to test
         # 304
@@ -229,7 +229,7 @@ def test_composite_views(self):
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}|0|0'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page
@@ -240,13 +240,13 @@ def test_composite_views(self):
                          browser.headers['X-Cache-Rule'])
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         # This should use cacheInBrowser
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- to test RAM cache.
@@ -261,12 +261,12 @@ def test_composite_views(self):
         # This should come from RAM cache
         self.assertEqual('plone.app.caching.operations.ramcache',
                          browser.headers['X-RAMCache'])
-        self.assertTrue(testText in browser.contents)
+        self.assertIn(testText, browser.contents)
         self.assertEqual('max-age=0, must-revalidate, private',
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}|0'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, _normalize_etag(browser.headers['ETag']))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the anonymous page again -- with an INM header to test 304.
@@ -305,7 +305,7 @@ def test_composite_views(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # The etag has changed so we should get a fresh page.
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
         self.assertEqual('200 Ok', browser.headers['Status'])
 
     def test_content_feeds(self):
@@ -334,7 +334,7 @@ def test_content_feeds(self):
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- to test RAM cache
@@ -353,7 +353,7 @@ def test_content_feeds(self):
                          browser.headers['Cache-Control'])
         tag = '"||{0}|en|{1}"'.format(catalog.getCounter(), default_skin)
         self.assertEqual(tag, browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the rss feed again -- with an INM header to test 304.
@@ -387,7 +387,7 @@ def test_content_feeds(self):
                          browser.headers['Cache-Control'])
         self.assertEqual('"|test_user_1_|{0}|en|{1}"'.format(
             catalog.getCounter(), default_skin), browser.headers['ETag'])
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the authenticated rss feed again -- to test RAM cache
@@ -403,7 +403,7 @@ def test_content_feeds(self):
         self.assertEqual('plone.app.caching.weakCaching',
                          browser.headers['X-Cache-Operation'])
         # Authenticated should NOT be RAM cached
-        self.assertEqual(None, browser.headers.get('X-RAMCache'))
+        self.assertIsNone(browser.headers.get('X-RAMCache'))
 
     def test_content_files(self):
 
@@ -439,7 +439,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
         # Request the image again -- with an IMS header to test 304
@@ -468,7 +468,7 @@ def test_content_files(self):
                          browser.headers['Cache-Control'])
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
-        self.assertTrue(now > dateutil.parser.parse(
+        self.assertGreater(now, dateutil.parser.parse(
             browser.headers['Expires']))
 
     def test_resources(self):
@@ -489,7 +489,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
         # Request the skin image again -- with an IMS header to test 304
         lastmodified = browser.headers['Last-Modified']
@@ -528,7 +528,7 @@ def test_resources(self):
         # remove this when the next line works
         self.assertIsNotNone(browser.headers.get('Last-Modified'))
         timedelta = dateutil.parser.parse(browser.headers['Expires']) - now
-        self.assertTrue(timedelta > datetime.timedelta(seconds=86390))
+        self.assertGreater(timedelta, datetime.timedelta(seconds=86390))
 
     def test_stable_resources(self):
         # We don't actually have any non-RR stable resources yet
diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py
index cea2089..bbc0a38 100644
--- a/plone/app/caching/tests/test_purge.py
+++ b/plone/app/caching/tests/test_purge.py
@@ -32,7 +32,7 @@
 from zope.lifecycleevent import ObjectMovedEvent
 from zope.lifecycleevent import ObjectRemovedEvent
 
-import unittest2 as unittest
+import unittest
 
 
 class Handler(object):
diff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py
index ef64189..a95b2ea 100644
--- a/plone/app/caching/tests/test_utils.py
+++ b/plone/app/caching/tests/test_utils.py
@@ -16,7 +16,7 @@
 from zope.interface import implementer
 
 import pytz
-import unittest2 as unittest
+import unittest
 
 
 TEST_TIMEZONE = 'Europe/Vienna'
@@ -85,12 +85,12 @@ def setUp(self):
 
     def test_no_registry(self):
         content = DummyContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_no_settings(self):
         provideUtility(Registry(), IRegistry)
         content = DummyContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_no_portal_type(self):
         provideUtility(Registry(), IRegistry)
@@ -101,7 +101,7 @@ def test_no_portal_type(self):
         ploneSettings.purgedContentTypes = ('testtype',)
 
         content = DummyNotContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_not_listed(self):
         provideUtility(Registry(), IRegistry)
@@ -112,7 +112,7 @@ def test_not_listed(self):
         ploneSettings.purgedContentTypes = ('File', 'Image',)
 
         content = DummyContent()
-        self.assertEqual(False, isPurged(content))
+        self.assertFalse(isPurged(content))
 
     def test_listed(self):
         provideUtility(Registry(), IRegistry)
@@ -123,7 +123,7 @@ def test_listed(self):
         ploneSettings.purgedContentTypes = ('File', 'Image', 'testtype',)
 
         content = DummyContent()
-        self.assertEqual(True, isPurged(content))
+        self.assertTrue(isPurged(content))
 
 
 class TestGetObjectDefaultPath(unittest.TestCase):
@@ -132,7 +132,7 @@ class TestGetObjectDefaultPath(unittest.TestCase):
 
     def test_not_content(self):
         context = DummyNotContent()
-        self.assertEqual(None, getObjectDefaultView(context))
+        self.assertIsNone(getObjectDefaultView(context))
 
     def test_browserdefault(self):
         context = DummyContent()


