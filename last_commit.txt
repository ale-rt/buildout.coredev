Repository: plone.app.imaging


Branch: refs/heads/master
Date: 2016-06-03T01:29:07+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.imaging/commit/0b5901e2df061cde5f9a5392f0f10131abf37fb0

test fixes according to plone.scale gif handling
Fix tests to not scale ``gif`` images, which were converted to ``jpeg`` imaged until ``plone.scale`` version &lt; 2.
Use ``png`` images for testing instead, which works for all versions of plone.scale.

Files changed:
A src/plone/app/imaging/tests/image.png
M CHANGES.rst
M src/plone/app/imaging/tests/base.py
M src/plone/app/imaging/tests/test_new_scaling.py
M src/plone/app/imaging/tests/test_scaling.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 832d43d..269ee65 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix tests to not scale ``gif`` images, which were converted to ``jpeg`` imaged until ``plone.scale`` version < 2.
+  Use ``png`` images for testing instead, which works for all versions of plone.scale.
+  [thet]
 
 
 2.0.3 (2016-02-20)
diff --git a/src/plone/app/imaging/tests/base.py b/src/plone/app/imaging/tests/base.py
index 07f4ecb..c61765c 100644
--- a/src/plone/app/imaging/tests/base.py
+++ b/src/plone/app/imaging/tests/base.py
@@ -26,7 +26,7 @@ class ImagingTestCase(PloneTestCase):
 
     layer = testing.imaging
 
-    def getImage(self, name='image.gif'):
+    def getImage(self, name='image.png'):
         return getData(name)
 
     def assertImage(self, data, format, size):
diff --git a/src/plone/app/imaging/tests/image.png b/src/plone/app/imaging/tests/image.png
new file mode 100644
index 0000000..8b59091
Binary files /dev/null and b/src/plone/app/imaging/tests/image.png differ
diff --git a/src/plone/app/imaging/tests/test_new_scaling.py b/src/plone/app/imaging/tests/test_new_scaling.py
index 175b47c..4062154 100644
--- a/src/plone/app/imaging/tests/test_new_scaling.py
+++ b/src/plone/app/imaging/tests/test_new_scaling.py
@@ -44,7 +44,7 @@ def testImageThumb(self):
         self.assertTrue('thumb' in self.available.keys())
         uid, ext, width, height = self.traverse('image/thumb')
         self.assertEqual((width, height), self.available['thumb'])
-        self.assertEqual(ext, 'jpeg')
+        self.assertEqual(ext, 'png')
 
     def testCustomSizes(self):
         # set custom image sizes
@@ -150,8 +150,8 @@ def testPublishScaleViaUID(self):
         url = scale.url.replace('http://nohost', '')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 200)
-        self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
-        self.assertImage(response.getBody(), 'JPEG', (64, 64))
+        self.assertEqual(response.getHeader('Content-Type'), 'image/png')
+        self.assertImage(response.getBody(), 'PNG', (64, 64))
 
     def testPublishWebDavScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -163,7 +163,7 @@ def testPublishWebDavScaleViaUID(self):
         self.assertTrue(
             'text/plain; charset=' in response.getHeader('Content-Type')
         )
-        self.assertImage(response.getBody(), 'JPEG', (64, 64))
+        self.assertImage(response.getBody(), 'PNG', (64, 64))
 
     def testPublishFTPScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -175,7 +175,7 @@ def testPublishFTPScaleViaUID(self):
         self.assertTrue(
             'text/plain; charset=' in response.getHeader('Content-Type')
         )
-        self.assertImage(response.getBody(), 'JPEG', (64, 64))
+        self.assertImage(response.getBody(), 'PNG', (64, 64))
 
     def testPublishThumbViaUID(self):
         scale = self.view.scale('image', 'thumb')
@@ -183,8 +183,8 @@ def testPublishThumbViaUID(self):
         url = scale.url.replace('http://nohost', '')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 200)
-        self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
-        self.assertImage(response.getBody(), 'JPEG', (128, 128))
+        self.assertEqual(response.getHeader('Content-Type'), 'image/png')
+        self.assertImage(response.getBody(), 'PNG', (128, 128))
 
     def testPublishCustomSizeViaUID(self):
         # set custom image sizes
@@ -195,8 +195,8 @@ def testPublishCustomSizeViaUID(self):
         url = scale.url.replace('http://nohost', '')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 200)
-        self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
-        self.assertImage(response.getBody(), 'JPEG', (23, 23))
+        self.assertEqual(response.getHeader('Content-Type'), 'image/png')
+        self.assertImage(response.getBody(), 'PNG', (23, 23))
 
     def testPublishThumbViaName(self):
         # make sure traversing works as is and with scaling
@@ -206,12 +206,12 @@ def testPublishThumbViaName(self):
         browser.open(base + '/foo/@@images/image')
         self.assertEqual(browser.headers['status'], '200 Ok')
         self.assertEqual(browser.contents, self.getImage())
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # and last a scaled version
         browser.open(base + '/foo/@@images/image/thumb')
         self.assertEqual(browser.headers['status'], '200 Ok')
-        self.assertImage(browser.contents, 'JPEG', (128, 128))
-        self.assertEqual(browser.headers['Content-Type'], 'image/jpeg')
+        self.assertImage(browser.contents, 'PNG', (128, 128))
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
 
     def testPublishCustomSizeViaName(self):
         # set custom image sizes
@@ -223,13 +223,13 @@ def testPublishCustomSizeViaName(self):
         response = self.publish(base + '/foo/@@images/image/foo',
                                 basic=credentials)
         self.assertEqual(response.getStatus(), 200)
-        self.assertImage(response.getBody(), 'JPEG', (23, 23))
+        self.assertImage(response.getBody(), 'PNG', (23, 23))
 
     def testPublishScaleWithInvalidUID(self):
         scale = self.view.scale('image', width=64, height=64)
         url = scale.url.replace('http://nohost', '')
         # change the url so it's invalid...
-        url = url.replace('.jpeg', 'x.jpeg')
+        url = url.replace('.png', 'x.png')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 404)
 
@@ -258,10 +258,10 @@ def afterSetUp(self):
     def testCreateScale(self):
         foo = self.adapter.scale('image', width=100, height=80)
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 80)
         self.assertEqual(foo.height, 80)
-        self.assertImage(foo.data, 'JPEG', (80, 80))
+        self.assertImage(foo.data, 'PNG', (80, 80))
 
     def testCreateScaleWithoutData(self):
         folder = self.folder
@@ -286,10 +286,10 @@ def testCreateScaleWithPdata(self):
     def testGetScaleByName(self):
         foo = self.adapter.scale('image', scale='foo')
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
-        self.assertImage(foo.data, 'JPEG', (60, 60))
+        self.assertImage(foo.data, 'PNG', (60, 60))
 
     def testGetUnknownScale(self):
         foo = self.adapter.scale('image', scale='foo?')
diff --git a/src/plone/app/imaging/tests/test_scaling.py b/src/plone/app/imaging/tests/test_scaling.py
index 875457b..56b5b87 100644
--- a/src/plone/app/imaging/tests/test_scaling.py
+++ b/src/plone/app/imaging/tests/test_scaling.py
@@ -34,8 +34,8 @@ def testImageThumb(self):
         sizes = image.getField('image').getAvailableSizes(image)
         self.assertTrue('thumb' in sizes.keys())
         thumb = traverse(image, 'image_thumb')
-        self.assertEqual(thumb.getContentType(), 'image/gif')
-        self.assertEqual(thumb.data[:6], 'GIF87a')
+        self.assertEqual(thumb.getContentType(), 'image/png')
+        self.assertEqual(thumb.data[1:4], 'PNG')
         width, height = sizes['thumb']
         self.assertEqual(thumb.width, width)
         self.assertEqual(thumb.height, height)
@@ -58,8 +58,8 @@ def testCustomSizes(self):
         # make sure traversing works with the new sizes
         traverse = folder.REQUEST.traverseName
         foo = traverse(image, 'image_foo')
-        self.assertEqual(foo.getContentType(), 'image/gif')
-        self.assertEqual(foo.data[:6], 'GIF87a')
+        self.assertEqual(foo.getContentType(), 'image/png')
+        self.assertEqual(foo.data[1:4], 'PNG')
         self.assertEqual(foo.width, 23)
         self.assertEqual(foo.height, 23)
         # also check the generated tag
@@ -68,8 +68,8 @@ def testCustomSizes(self):
         self.assertEqual(foo.tag(), tag % url)
         # and the other specified size
         bar = traverse(image, 'image_bar')
-        self.assertEqual(bar.getContentType(), 'image/gif')
-        self.assertEqual(bar.data[:6], 'GIF87a')
+        self.assertEqual(bar.getContentType(), 'image/png')
+        self.assertEqual(bar.data[1:4], 'PNG')
         self.assertEqual(bar.width, 6)
         self.assertEqual(bar.height, 6)
         # make sure the traversal adapter was called in fact
@@ -86,8 +86,8 @@ def testCustomSizesForNewsItems(self):
         # make sure traversing works with the new sizes
         traverse = folder.REQUEST.traverseName
         foo = traverse(newsitem, 'image_foo')
-        self.assertEqual(foo.getContentType(), 'image/gif')
-        self.assertEqual(foo.data[:6], 'GIF87a')
+        self.assertEqual(foo.getContentType(), 'image/png')
+        self.assertEqual(foo.data[1:4], 'PNG')
         self.assertEqual(foo.width, 23)
         self.assertEqual(foo.height, 23)
 
@@ -101,8 +101,8 @@ def testCustomSizesWithSpaces(self):
         # make sure traversing works with the new sizes
         traverse = folder.REQUEST.traverseName
         foo_bar = traverse(image, 'image_foo_bar')
-        self.assertEqual(foo_bar.getContentType(), 'image/gif')
-        self.assertEqual(foo_bar.data[:6], 'GIF87a')
+        self.assertEqual(foo_bar.getContentType(), 'image/png')
+        self.assertEqual(foo_bar.data[1:4], 'PNG')
         self.assertEqual(foo_bar.width, 23)
         self.assertEqual(foo_bar.height, 23)
         # also check the generated tag
@@ -163,19 +163,19 @@ def testPublishThumb(self):
         browser.open(base + '/foo')
         self.assertEqual(browser.headers['status'], '200 Ok')
         self.assertEqual(browser.contents, data)
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # then the field without a scale name
         browser.open(base + '/foo/image')
         self.assertEqual(browser.headers['status'], '200 Ok')
         self.assertEqual(browser.contents, data)
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # and last a scaled version
         # get a authenticated browser session
         browser = self.getBrowser()
         browser.open(base + '/foo/image_thumb')
         self.assertEqual(browser.headers['status'], '200 Ok')
-        self.assertEqual(browser.contents[:6], 'GIF87a')
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.contents[1:4], 'PNG')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # make sure the traversal adapter was call in fact
         self.assertEqual(self.counter, 9)
 
@@ -192,7 +192,7 @@ def testPublishCustomSize(self):
         response = self.publish(base + '/foo/image_foo', basic=credentials)
         self.assertEqual(response.getStatus(), 200)
         foo = open(StringIO(response.getBody()))
-        self.assertEqual(foo.format, 'GIF')
+        self.assertEqual(foo.format, 'PNG')
         self.assertEqual(foo.size, (23, 23))
         # make sure the traversal adapter was call in fact
         self.assertEqual(self.counter, 3)
@@ -212,8 +212,8 @@ def afterSetUp(self):
     def testCreateScale(self):
         foo = self.handler.createScale(self.image, 'foo', 100, 80)
         self.assertEqual(foo['id'], 'image_foo')
-        self.assertEqual(foo['content_type'], 'image/gif')
-        self.assertEqual(foo['data'][:6], 'GIF87a')
+        self.assertEqual(foo['content_type'], 'image/png')
+        self.assertEqual(foo['data'][1:4], 'PNG')
 
     def testCreateScaleWithZeroWidth(self):
         foo = self.handler.createScale(self.image, 'foo', 100, 0)
@@ -230,8 +230,8 @@ def testCreateScaleWithoutData(self):
     def testGetScale(self):
         foo = self.handler.getScale(self.image, 'foo')
         self.assertEqual(foo.getId(), 'image_foo')
-        self.assertEqual(foo.getContentType(), 'image/gif')
-        self.assertEqual(foo.data[:6], 'GIF87a')
+        self.assertEqual(foo.getContentType(), 'image/png')
+        self.assertEqual(foo.data[1:4], 'PNG')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
 


Repository: plone.app.imaging


Branch: refs/heads/master
Date: 2016-06-03T13:26:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.imaging/commit/732ee89cda54f67e522ecc1a0a4ff7c876e9b1c1

Merge pull request #26 from plone/thet-fixtests

test fixes according to plone.scale gif handling

Files changed:
A src/plone/app/imaging/tests/image.png
M CHANGES.rst
M src/plone/app/imaging/tests/base.py
M src/plone/app/imaging/tests/test_new_scaling.py
M src/plone/app/imaging/tests/test_scaling.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 832d43d..269ee65 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ New:
 
 Fixes:
 
-- *add item here*
+- Fix tests to not scale ``gif`` images, which were converted to ``jpeg`` imaged until ``plone.scale`` version < 2.
+  Use ``png`` images for testing instead, which works for all versions of plone.scale.
+  [thet]
 
 
 2.0.3 (2016-02-20)
diff --git a/src/plone/app/imaging/tests/base.py b/src/plone/app/imaging/tests/base.py
index 07f4ecb..c61765c 100644
--- a/src/plone/app/imaging/tests/base.py
+++ b/src/plone/app/imaging/tests/base.py
@@ -26,7 +26,7 @@ class ImagingTestCase(PloneTestCase):
 
     layer = testing.imaging
 
-    def getImage(self, name='image.gif'):
+    def getImage(self, name='image.png'):
         return getData(name)
 
     def assertImage(self, data, format, size):
diff --git a/src/plone/app/imaging/tests/image.png b/src/plone/app/imaging/tests/image.png
new file mode 100644
index 0000000..8b59091
Binary files /dev/null and b/src/plone/app/imaging/tests/image.png differ
diff --git a/src/plone/app/imaging/tests/test_new_scaling.py b/src/plone/app/imaging/tests/test_new_scaling.py
index 175b47c..4062154 100644
--- a/src/plone/app/imaging/tests/test_new_scaling.py
+++ b/src/plone/app/imaging/tests/test_new_scaling.py
@@ -44,7 +44,7 @@ def testImageThumb(self):
         self.assertTrue('thumb' in self.available.keys())
         uid, ext, width, height = self.traverse('image/thumb')
         self.assertEqual((width, height), self.available['thumb'])
-        self.assertEqual(ext, 'jpeg')
+        self.assertEqual(ext, 'png')
 
     def testCustomSizes(self):
         # set custom image sizes
@@ -150,8 +150,8 @@ def testPublishScaleViaUID(self):
         url = scale.url.replace('http://nohost', '')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 200)
-        self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
-        self.assertImage(response.getBody(), 'JPEG', (64, 64))
+        self.assertEqual(response.getHeader('Content-Type'), 'image/png')
+        self.assertImage(response.getBody(), 'PNG', (64, 64))
 
     def testPublishWebDavScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -163,7 +163,7 @@ def testPublishWebDavScaleViaUID(self):
         self.assertTrue(
             'text/plain; charset=' in response.getHeader('Content-Type')
         )
-        self.assertImage(response.getBody(), 'JPEG', (64, 64))
+        self.assertImage(response.getBody(), 'PNG', (64, 64))
 
     def testPublishFTPScaleViaUID(self):
         scale = self.view.scale('image', width=64, height=64)
@@ -175,7 +175,7 @@ def testPublishFTPScaleViaUID(self):
         self.assertTrue(
             'text/plain; charset=' in response.getHeader('Content-Type')
         )
-        self.assertImage(response.getBody(), 'JPEG', (64, 64))
+        self.assertImage(response.getBody(), 'PNG', (64, 64))
 
     def testPublishThumbViaUID(self):
         scale = self.view.scale('image', 'thumb')
@@ -183,8 +183,8 @@ def testPublishThumbViaUID(self):
         url = scale.url.replace('http://nohost', '')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 200)
-        self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
-        self.assertImage(response.getBody(), 'JPEG', (128, 128))
+        self.assertEqual(response.getHeader('Content-Type'), 'image/png')
+        self.assertImage(response.getBody(), 'PNG', (128, 128))
 
     def testPublishCustomSizeViaUID(self):
         # set custom image sizes
@@ -195,8 +195,8 @@ def testPublishCustomSizeViaUID(self):
         url = scale.url.replace('http://nohost', '')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 200)
-        self.assertEqual(response.getHeader('Content-Type'), 'image/jpeg')
-        self.assertImage(response.getBody(), 'JPEG', (23, 23))
+        self.assertEqual(response.getHeader('Content-Type'), 'image/png')
+        self.assertImage(response.getBody(), 'PNG', (23, 23))
 
     def testPublishThumbViaName(self):
         # make sure traversing works as is and with scaling
@@ -206,12 +206,12 @@ def testPublishThumbViaName(self):
         browser.open(base + '/foo/@@images/image')
         self.assertEqual(browser.headers['status'], '200 Ok')
         self.assertEqual(browser.contents, self.getImage())
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # and last a scaled version
         browser.open(base + '/foo/@@images/image/thumb')
         self.assertEqual(browser.headers['status'], '200 Ok')
-        self.assertImage(browser.contents, 'JPEG', (128, 128))
-        self.assertEqual(browser.headers['Content-Type'], 'image/jpeg')
+        self.assertImage(browser.contents, 'PNG', (128, 128))
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
 
     def testPublishCustomSizeViaName(self):
         # set custom image sizes
@@ -223,13 +223,13 @@ def testPublishCustomSizeViaName(self):
         response = self.publish(base + '/foo/@@images/image/foo',
                                 basic=credentials)
         self.assertEqual(response.getStatus(), 200)
-        self.assertImage(response.getBody(), 'JPEG', (23, 23))
+        self.assertImage(response.getBody(), 'PNG', (23, 23))
 
     def testPublishScaleWithInvalidUID(self):
         scale = self.view.scale('image', width=64, height=64)
         url = scale.url.replace('http://nohost', '')
         # change the url so it's invalid...
-        url = url.replace('.jpeg', 'x.jpeg')
+        url = url.replace('.png', 'x.png')
         response = self.publish(url, basic=self.getCredentials())
         self.assertEqual(response.getStatus(), 404)
 
@@ -258,10 +258,10 @@ def afterSetUp(self):
     def testCreateScale(self):
         foo = self.adapter.scale('image', width=100, height=80)
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 80)
         self.assertEqual(foo.height, 80)
-        self.assertImage(foo.data, 'JPEG', (80, 80))
+        self.assertImage(foo.data, 'PNG', (80, 80))
 
     def testCreateScaleWithoutData(self):
         folder = self.folder
@@ -286,10 +286,10 @@ def testCreateScaleWithPdata(self):
     def testGetScaleByName(self):
         foo = self.adapter.scale('image', scale='foo')
         self.assertTrue(foo.uid)
-        self.assertEqual(foo.mimetype, 'image/jpeg')
+        self.assertEqual(foo.mimetype, 'image/png')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
-        self.assertImage(foo.data, 'JPEG', (60, 60))
+        self.assertImage(foo.data, 'PNG', (60, 60))
 
     def testGetUnknownScale(self):
         foo = self.adapter.scale('image', scale='foo?')
diff --git a/src/plone/app/imaging/tests/test_scaling.py b/src/plone/app/imaging/tests/test_scaling.py
index 875457b..56b5b87 100644
--- a/src/plone/app/imaging/tests/test_scaling.py
+++ b/src/plone/app/imaging/tests/test_scaling.py
@@ -34,8 +34,8 @@ def testImageThumb(self):
         sizes = image.getField('image').getAvailableSizes(image)
         self.assertTrue('thumb' in sizes.keys())
         thumb = traverse(image, 'image_thumb')
-        self.assertEqual(thumb.getContentType(), 'image/gif')
-        self.assertEqual(thumb.data[:6], 'GIF87a')
+        self.assertEqual(thumb.getContentType(), 'image/png')
+        self.assertEqual(thumb.data[1:4], 'PNG')
         width, height = sizes['thumb']
         self.assertEqual(thumb.width, width)
         self.assertEqual(thumb.height, height)
@@ -58,8 +58,8 @@ def testCustomSizes(self):
         # make sure traversing works with the new sizes
         traverse = folder.REQUEST.traverseName
         foo = traverse(image, 'image_foo')
-        self.assertEqual(foo.getContentType(), 'image/gif')
-        self.assertEqual(foo.data[:6], 'GIF87a')
+        self.assertEqual(foo.getContentType(), 'image/png')
+        self.assertEqual(foo.data[1:4], 'PNG')
         self.assertEqual(foo.width, 23)
         self.assertEqual(foo.height, 23)
         # also check the generated tag
@@ -68,8 +68,8 @@ def testCustomSizes(self):
         self.assertEqual(foo.tag(), tag % url)
         # and the other specified size
         bar = traverse(image, 'image_bar')
-        self.assertEqual(bar.getContentType(), 'image/gif')
-        self.assertEqual(bar.data[:6], 'GIF87a')
+        self.assertEqual(bar.getContentType(), 'image/png')
+        self.assertEqual(bar.data[1:4], 'PNG')
         self.assertEqual(bar.width, 6)
         self.assertEqual(bar.height, 6)
         # make sure the traversal adapter was called in fact
@@ -86,8 +86,8 @@ def testCustomSizesForNewsItems(self):
         # make sure traversing works with the new sizes
         traverse = folder.REQUEST.traverseName
         foo = traverse(newsitem, 'image_foo')
-        self.assertEqual(foo.getContentType(), 'image/gif')
-        self.assertEqual(foo.data[:6], 'GIF87a')
+        self.assertEqual(foo.getContentType(), 'image/png')
+        self.assertEqual(foo.data[1:4], 'PNG')
         self.assertEqual(foo.width, 23)
         self.assertEqual(foo.height, 23)
 
@@ -101,8 +101,8 @@ def testCustomSizesWithSpaces(self):
         # make sure traversing works with the new sizes
         traverse = folder.REQUEST.traverseName
         foo_bar = traverse(image, 'image_foo_bar')
-        self.assertEqual(foo_bar.getContentType(), 'image/gif')
-        self.assertEqual(foo_bar.data[:6], 'GIF87a')
+        self.assertEqual(foo_bar.getContentType(), 'image/png')
+        self.assertEqual(foo_bar.data[1:4], 'PNG')
         self.assertEqual(foo_bar.width, 23)
         self.assertEqual(foo_bar.height, 23)
         # also check the generated tag
@@ -163,19 +163,19 @@ def testPublishThumb(self):
         browser.open(base + '/foo')
         self.assertEqual(browser.headers['status'], '200 Ok')
         self.assertEqual(browser.contents, data)
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # then the field without a scale name
         browser.open(base + '/foo/image')
         self.assertEqual(browser.headers['status'], '200 Ok')
         self.assertEqual(browser.contents, data)
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # and last a scaled version
         # get a authenticated browser session
         browser = self.getBrowser()
         browser.open(base + '/foo/image_thumb')
         self.assertEqual(browser.headers['status'], '200 Ok')
-        self.assertEqual(browser.contents[:6], 'GIF87a')
-        self.assertEqual(browser.headers['Content-Type'], 'image/gif')
+        self.assertEqual(browser.contents[1:4], 'PNG')
+        self.assertEqual(browser.headers['Content-Type'], 'image/png')
         # make sure the traversal adapter was call in fact
         self.assertEqual(self.counter, 9)
 
@@ -192,7 +192,7 @@ def testPublishCustomSize(self):
         response = self.publish(base + '/foo/image_foo', basic=credentials)
         self.assertEqual(response.getStatus(), 200)
         foo = open(StringIO(response.getBody()))
-        self.assertEqual(foo.format, 'GIF')
+        self.assertEqual(foo.format, 'PNG')
         self.assertEqual(foo.size, (23, 23))
         # make sure the traversal adapter was call in fact
         self.assertEqual(self.counter, 3)
@@ -212,8 +212,8 @@ def afterSetUp(self):
     def testCreateScale(self):
         foo = self.handler.createScale(self.image, 'foo', 100, 80)
         self.assertEqual(foo['id'], 'image_foo')
-        self.assertEqual(foo['content_type'], 'image/gif')
-        self.assertEqual(foo['data'][:6], 'GIF87a')
+        self.assertEqual(foo['content_type'], 'image/png')
+        self.assertEqual(foo['data'][1:4], 'PNG')
 
     def testCreateScaleWithZeroWidth(self):
         foo = self.handler.createScale(self.image, 'foo', 100, 0)
@@ -230,8 +230,8 @@ def testCreateScaleWithoutData(self):
     def testGetScale(self):
         foo = self.handler.getScale(self.image, 'foo')
         self.assertEqual(foo.getId(), 'image_foo')
-        self.assertEqual(foo.getContentType(), 'image/gif')
-        self.assertEqual(foo.data[:6], 'GIF87a')
+        self.assertEqual(foo.getContentType(), 'image/png')
+        self.assertEqual(foo.data[1:4], 'PNG')
         self.assertEqual(foo.width, 60)
         self.assertEqual(foo.height, 60)
 


