Repository: mockup


Branch: refs/heads/master
Date: 2016-03-20T23:04:41+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/mockup/commit/556179ace193e96380a3a1772c16c15ff91b9382

JSHint fixes and jscs formatings for structure pattern.

Files changed:
M CHANGES.rst
M mockup/patterns/structure/js/actionmenu.js
M mockup/patterns/structure/js/actions.js
M mockup/patterns/structure/js/collections/result.js
M mockup/patterns/structure/js/collections/selected.js
M mockup/patterns/structure/js/navigation.js
M mockup/patterns/structure/js/views/actionmenu.js
M mockup/patterns/structure/js/views/addmenu.js
M mockup/patterns/structure/js/views/app.js
M mockup/patterns/structure/js/views/columns.js
M mockup/patterns/structure/js/views/generic-popover.js
M mockup/patterns/structure/js/views/paging.js
M mockup/patterns/structure/js/views/rearrange.js
M mockup/patterns/structure/js/views/selectionbutton.js
M mockup/patterns/structure/js/views/selectionwell.js
M mockup/patterns/structure/js/views/table.js
M mockup/patterns/structure/js/views/tablerow.js
M mockup/patterns/structure/less/pattern.structure.less
M mockup/patterns/structure/pattern.js

diff --git a/CHANGES.rst b/CHANGES.rst
index a34f1b8..0d60b7d 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -41,6 +41,9 @@ New:
 
 Fixes:
 
+- JSHint fixes and jscs formatings for structure pattern.
+  [thet]
+
 - Cleanup RequireJS dependencies.
   [thet]
 
diff --git a/mockup/patterns/structure/js/actionmenu.js b/mockup/patterns/structure/js/actionmenu.js
index 8d3b86a..cc71bd0 100644
--- a/mockup/patterns/structure/js/actionmenu.js
+++ b/mockup/patterns/structure/js/actionmenu.js
@@ -1,5 +1,4 @@
-define([
-], function() {
+define([], function() {
   'use strict';
 
   var menuOptions = {
@@ -67,10 +66,10 @@ define([
     }
 
     var result = {};
-    result['cutItem'] = menuOptions['cutItem'];
-    result['copyItem'] = menuOptions['copyItem'];
+    result.cutItem = menuOptions.cutItem;
+    result.copyItem = menuOptions.copyItem;
     if (menu.app.pasteAllowed && menu.model.attributes.is_folderish) {
-      result['pasteItem'] = menuOptions['pasteItem'];
+      result.pasteItem = menuOptions.pasteItem;
     }
     if (!menu.app.inQueryMode() && menu.options.canMove !== false) {
       result['move-top'] = menuOptions['move-top'];
@@ -80,12 +79,12 @@ define([
       result['set-default-page'] = menuOptions['set-default-page'];
     }
     if (menu.model.attributes.is_folderish) {
-      result['selectAll'] = menuOptions['selectAll'];
+      result.selectAll = menuOptions.selectAll;
     }
     if (menu.options.header) {
-      result['openItem'] = menuOptions['openItem'];
+      result.openItem = menuOptions.openItem;
     }
-    result['editItem'] = menuOptions['editItem'];
+    result.editItem = menuOptions.editItem;
     return result;
   };
 
diff --git a/mockup/patterns/structure/js/actions.js b/mockup/patterns/structure/js/actions.js
index be5f990..c5eb403 100644
--- a/mockup/patterns/structure/js/actions.js
+++ b/mockup/patterns/structure/js/actions.js
@@ -16,7 +16,7 @@ define([
       this.model = options.model;
       this.selectedCollection = this.app.selectedCollection;
     },
-    selectAll: function(e){
+    selectAll: function(e) {
       // This implementation is very specific to the default collection
       // with the reliance on its queryParser and queryHelper.  Custom
       // collection (Backbone.Paginator.requestPager implementation)
@@ -25,7 +25,7 @@ define([
       var self = this;
       var page = 1;
       var count = 0;
-      var getPage = function(){
+      var getPage = function() {
         self.app.loading.show();
         $.ajax({
           url: self.app.collection.url,
@@ -42,16 +42,16 @@ define([
             attributes: JSON.stringify(
               self.app.collection.queryHelper.options.attributes)
           }
-        }).done(function(data){
+        }).done(function(data) {
           var items = self.app.collection.parse(data, count);
           count += items.length;
-          _.each(items, function(item){
+          _.each(items, function(item) {
             self.app.selectedCollection.add(new Result(item));
           });
           page += 1;
-          if(data.total > count){
+          if (data.total > count) {
             getPage();
-          }else{
+          } else {
             self.app.loading.hide();
             self.app.tableView.render();
           }
@@ -60,7 +60,7 @@ define([
       getPage();
     },
 
-    doAction: function(buttonName, successMsg, failMsg){
+    doAction: function(buttonName, successMsg, failMsg) {
       var self = this;
       $.ajax({
         url: self.app.buttons.get(buttonName).options.url,
@@ -71,12 +71,12 @@ define([
         },
         dataType: 'json',
         type: 'POST'
-      }).done(function(data){
-        if(data.status === 'success'){
+      }).done(function(data) {
+        if (data.status === 'success') {
           self.app.setStatus(_t(successMsg + ' "' + self.model.attributes.Title + '"'));
           self.app.collection.pager();
           self.app.updateButtons();
-        }else{
+        } else {
           self.app.setStatus(_t('Error ' + failMsg + ' "' + self.model.attributes.Title + '"'));
         }
       });
diff --git a/mockup/patterns/structure/js/collections/result.js b/mockup/patterns/structure/js/collections/result.js
index 74ca8fd..b781a2a 100644
--- a/mockup/patterns/structure/js/collections/result.js
+++ b/mockup/patterns/structure/js/collections/result.js
@@ -1,10 +1,11 @@
 define([
+  'jquery',
   'underscore',
   'backbone',
   'mockup-patterns-structure-url/js/models/result',
   'mockup-utils',
   'backbone.paginator'
-], function(_, Backbone, Result, Utils) {
+], function($, _, Backbone, Result, Utils) {
   'use strict';
 
   var ResultCollection = Backbone.Paginator.requestPager.extend({
@@ -16,11 +17,12 @@ define([
 
       this.queryHelper = Utils.QueryHelper(
         $.extend(true, {}, this.view.options, {
-          attributes: this.view.options.queryHelperAttributes}));
+          attributes: this.view.options.queryHelperAttributes
+        }));
 
       this.queryParser = function(options) {
         var self = this;
-        if(options === undefined){
+        if (options === undefined) {
           options = {};
         }
         var term = null;
@@ -39,7 +41,7 @@ define([
           sort_on: sortOn,
           sort_order: sortOrder
         });
-      }
+      };
 
       // check and see if a hash is provided for initial path
       if (window.location.hash.substring(0, 2) === '#/') {
@@ -91,8 +93,8 @@ define([
         return JSON.stringify(this.queryHelper.options.attributes);
       }
     },
-    parse: function (response, baseSortIdx) {
-      if(baseSortIdx === undefined){
+    parse: function(response, baseSortIdx) {
+      if (baseSortIdx === undefined) {
         baseSortIdx = 0;
       }
       this.totalRecords = response.total;
diff --git a/mockup/patterns/structure/js/collections/selected.js b/mockup/patterns/structure/js/collections/selected.js
index 7223617..f983091 100644
--- a/mockup/patterns/structure/js/collections/selected.js
+++ b/mockup/patterns/structure/js/collections/selected.js
@@ -23,4 +23,3 @@ define([
 
   return SelectedCollection;
 });
-
diff --git a/mockup/patterns/structure/js/navigation.js b/mockup/patterns/structure/js/navigation.js
index 882a11e..76675e3 100644
--- a/mockup/patterns/structure/js/navigation.js
+++ b/mockup/patterns/structure/js/navigation.js
@@ -17,7 +17,6 @@ define([
       return self.model.attributes.getURL;
     },
     openUrl: function(url) {
-      var self = this;
       var win = utils.getWindow();
       var keyEvent = this.app.keyEvent;
       if (keyEvent && keyEvent.ctrlKey) {
diff --git a/mockup/patterns/structure/js/views/actionmenu.js b/mockup/patterns/structure/js/views/actionmenu.js
index f9f5fc1..e0c2585 100644
--- a/mockup/patterns/structure/js/views/actionmenu.js
+++ b/mockup/patterns/structure/js/views/actionmenu.js
@@ -24,7 +24,7 @@ define([
     eventConstructor: function(definition) {
       var self = this;
       var libName = definition[0],
-          method = definition[1];
+        method = definition[1];
 
       if (!((typeof libName === 'string') && (typeof method === 'string'))) {
         return false;
@@ -32,7 +32,7 @@ define([
 
       var doEvent = function(e) {
         var libCls = require(libName);
-        var lib = new libCls(self)
+        var lib = new libCls(self);
         return lib[method] && lib[method](e);
       };
       return doEvent;
@@ -86,7 +86,7 @@ define([
       self.$dropdown = self.$('.dropdown-toggle');
       self.$dropdown.dropdown();
 
-      if (self.options.className){
+      if (self.options.className) {
         self.$el.addClass(self.options.className);
       }
       return this;
diff --git a/mockup/patterns/structure/js/views/addmenu.js b/mockup/patterns/structure/js/views/addmenu.js
index c4ed050..c05f7de 100644
--- a/mockup/patterns/structure/js/views/addmenu.js
+++ b/mockup/patterns/structure/js/views/addmenu.js
@@ -10,8 +10,7 @@ define([
   var AddMenu = ButtonGroup.extend({
     title: 'Add',
     className: 'btn-group addnew',
-    events: {
-    },
+    events: {},
     initialize: function(options) {
       var self = this;
       ButtonGroup.prototype.initialize.apply(self, [options]);
@@ -101,13 +100,13 @@ define([
 
       self.$el.append(
         '<a class="btn dropdown-toggle btn-default" data-toggle="dropdown" href="#">' +
-          '<span class="glyphicon glyphicon-plus"></span>' +
-          self.title +
-          '<span class="caret"></span>' +
+        '<span class="glyphicon glyphicon-plus"></span>' +
+        self.title +
+        '<span class="caret"></span>' +
         '</a>' +
         '<ul class="dropdown-menu">' +
         '</ul>' +
-      '</div>');
+        '</div>');
 
       self.$items = self.$('.dropdown-menu');
       self.$dropdown = self.$('.dropdown-toggle');
diff --git a/mockup/patterns/structure/js/views/app.js b/mockup/patterns/structure/js/views/app.js
index c88f96b..87825a7 100644
--- a/mockup/patterns/structure/js/views/app.js
+++ b/mockup/patterns/structure/js/views/app.js
@@ -21,10 +21,10 @@ define([
   'pat-logger',
   'jquery.cookie'
 ], function($, _, Toolbar, ButtonGroup, ButtonView, BaseView,
-            TableView, SelectionWellView,
-            GenericPopover, RearrangeView, SelectionButtonView,
-            PagingView, ColumnsView, TextFilterView, UploadView,
-            _ResultCollection, SelectedCollection, utils, _t, logger) {
+  TableView, SelectionWellView,
+  GenericPopover, RearrangeView, SelectionButtonView,
+  PagingView, ColumnsView, TextFilterView, UploadView,
+  _ResultCollection, SelectedCollection, utils, _t, logger) {
   'use strict';
 
   var log = logger.getLogger('pat-structure');
@@ -46,19 +46,19 @@ define([
       self.pasteAllowed = $.cookie('__cp');
 
       /* close popovers when clicking away */
-      $(document).click(function(e){
+      $(document).click(function(e) {
         var $el = $(e.target);
-        if(!$el.is(':visible')){
+        if (!$el.is(':visible')) {
           // ignore this, fake event trigger to element that is not visible
           return;
         }
-        if($el.is('a') || $el.parent().is('a')){
+        if ($el.is('a') || $el.parent().is('a')) {
           return;
         }
         var $popover = $('.popover:visible');
-        if($popover.length > 0 && !$.contains($popover[0], $el[0])){
+        if ($popover.length > 0 && !$.contains($popover[0], $el[0])) {
           var popover = $popover.data('component');
-          if(popover){
+          if (popover) {
             popover.hide();
           }
         }
@@ -77,7 +77,6 @@ define([
 
       self.selectedCollection = new SelectedCollection();
       self.tableView = new TableView({app: self});
-
       self.pagingView = new PagingView({app: self});
 
       /* initialize buttons */
@@ -93,10 +92,10 @@ define([
       self.buttons.disable();
 
       var timeout = 0;
-      self.selectedCollection.on('add remove reset', function(/*modal, collection*/) {
+      self.selectedCollection.on('add remove reset', function( /*modal, collection*/ ) {
         /* delay rendering since this can happen in batching */
         clearTimeout(timeout);
-        timeout = setTimeout(function(){
+        timeout = setTimeout(function() {
           self.updateButtons();
         }, 100);
       }, self);
@@ -127,7 +126,7 @@ define([
         // the remaining calls are related to window.pushstate.
         // abort if feature unavailable.
         if (!(window.history && window.history.pushState)) {
-          return
+          return;
         }
 
         // undo the flag set by popState to prevent the push state
@@ -135,11 +134,12 @@ define([
         // function to not execute the folowing pushState logic.
         if (self.doNotPushState) {
           self.doNotPushState = false;
-          return
+          return;
         }
 
         var path = self.getCurrentPath();
-        if (path === '/'){
+        var url;
+        if (path === '/') {
           path = '';
         }
         /* maintain history here */
@@ -148,11 +148,11 @@ define([
           // as path always will be prefixed with a `/`
           var pushStateUrl = self.options.pushStateUrl.replace(
             '/{path}', '{path}');
-          var url = pushStateUrl.replace('{path}', path);
+          url = pushStateUrl.replace('{path}', path);
           window.history.pushState(null, null, url);
         } else if (self.options.urlStructure) {
           // fallback to urlStructure specification
-          var url = self.options.urlStructure.base + path + self.options.urlStructure.appended;
+          url = self.options.urlStructure.base + path + self.options.urlStructure.appended;
           window.history.pushState(null, null, url);
         }
 
@@ -169,17 +169,16 @@ define([
 
       });
 
-      if ((self.options.pushStateUrl || self.options.urlStructure)
-          && utils.featureSupport.history()){
-        $(window).bind('popstate', function () {
+      if ((self.options.pushStateUrl || self.options.urlStructure) && utils.featureSupport.history()) {
+        $(window).bind('popstate', function() {
           /* normalize this url first... */
           var win = utils.getWindow();
           var url = win.location.href;
           var base, appended;
-          if(url.indexOf('?') !== -1){
+          if (url.indexOf('?') !== -1) {
             url = url.split('?')[0];
           }
-          if(url.indexOf('#') !== -1){
+          if (url.indexOf('#') !== -1) {
             url = url.split('#')[0];
           }
           if (self.options.pushStateUrl) {
@@ -192,11 +191,11 @@ define([
           }
           // take off the base url
           var path = url.substring(base.length);
-          if(path.substring(path.length - appended.length) === appended){
+          if (path.substring(path.length - appended.length) === appended) {
             /* check that it ends with appended value */
             path = path.substring(0, path.length - appended.length);
           }
-          if(!path){
+          if (!path) {
             path = '/';
           }
           self.setCurrentPath(path);
@@ -211,7 +210,7 @@ define([
         });
       }
     },
-    updateButtons: function(){
+    updateButtons: function() {
       var self = this;
       if (self.selectedCollection.length) {
         self.toolbar.get('selected-items').enable();
@@ -225,7 +224,7 @@ define([
         self.pasteAllowed = !!$.cookie('__cp');
         if (self.pasteAllowed) {
           self.buttons.get('paste').enable();
-        }else{
+        } else {
           self.buttons.get('paste').disable();
         }
       }
@@ -234,10 +233,10 @@ define([
       if (this.additionalCriterias.length > 0) {
         return true;
       }
-      if (this['sort_on'] && this['sort_on'] !== 'getObjPositionInParent') { // jshint ignore:line
+      if (this.sort_on && this.sort_on !== 'getObjPositionInParent') { // jshint ignore:line
         return true;
       }
-      if (this['sort_order'] !== 'ascending') { // jshint ignore:line
+      if (this.sort_order !== 'ascending') { // jshint ignore:line
         return true;
       }
       return false;
@@ -264,7 +263,8 @@ define([
     },
     buttonClickEvent: function(button) {
       var self = this;
-      var data = null, callback = null;
+      var data = null;
+      var callback = null;
 
       if (button.url) {
         self.loading.show();
@@ -384,19 +384,19 @@ define([
 
       var buttons = [];
       _.each(self.options.buttons, function(buttonOptions) {
-        try{
+        try {
           var button = new ButtonView(buttonOptions);
           buttons.push(button);
 
-          if(button.form){
+          if (button.form) {
             buttonOptions.triggerView = button;
             buttonOptions.app = self;
             var view = new GenericPopover(buttonOptions);
             self.$el.append(view.el);
-          }else{
+          } else {
             button.on('button:click', self.buttonClickEvent, self);
           }
-        }catch(err){
+        } catch (err) {
           log.error('Error initializing button ' + buttonOptions.title + ' ' + err);
         }
       });
@@ -430,7 +430,7 @@ define([
         success: function(data) {
           if (data.msg) {
             self.setStatus(data.msg);
-          }else if (data.status !== 'success') {
+          } else if (data.status !== 'success') {
             // XXX handle error here with something?
             self.setStatus('error moving item');
           }
@@ -493,14 +493,18 @@ define([
     },
     setCookieSetting: function(name, val) {
       $.cookie(this.cookieSettingPrefix + name,
-               JSON.stringify({'value': val})
+        JSON.stringify({
+          'value': val
+        })
       );
     },
     setAllCookieSettings: function() {
-      this.activeColumns = this.getCookieSetting(this['activeColumnsCookie'],
-                                                 this.activeColumns);
+      this.activeColumns = this.getCookieSetting(
+        this.activeColumnsCookie,
+        this.activeColumns
+      );
       var perPage = this.getCookieSetting('perPage', 15);
-      if(typeof(perPage) === 'string'){
+      if (typeof(perPage) === 'string') {
         perPage = parseInt(perPage);
       }
       this.collection.howManyPer(perPage);
diff --git a/mockup/patterns/structure/js/views/columns.js b/mockup/patterns/structure/js/views/columns.js
index 5844863..3c18b98 100644
--- a/mockup/patterns/structure/js/views/columns.js
+++ b/mockup/patterns/structure/js/views/columns.js
@@ -42,13 +42,14 @@ define([
         $el.find('input')[0].checked = true;
         self.$container.append($el);
       });
-      _.each(_.omit(self.app.availableColumns, self.app.activeColumns), function(name, id) {
-        var $el = $(self.itemTemplate({
-          title: name,
-          id: id
-        }));
-        self.$container.append($el);
-      });
+      _.each(_.omit(self.app.availableColumns, self.app.activeColumns),
+        function(name, id) {
+          var $el = $(self.itemTemplate({
+            title: name,
+            id: id
+          }));
+          self.$container.append($el);
+        });
 
       var dd = new Sortable(self.$container, {
         selector: 'li'
diff --git a/mockup/patterns/structure/js/views/generic-popover.js b/mockup/patterns/structure/js/views/generic-popover.js
index a7b7bdc..ea28bbd 100644
--- a/mockup/patterns/structure/js/views/generic-popover.js
+++ b/mockup/patterns/structure/js/views/generic-popover.js
@@ -27,19 +27,19 @@ define([
 
       PopoverView.prototype.initialize.apply(this, [options]);
     },
-    setContent: function(content){
+    setContent: function(content) {
       var self = this;
       var html = '<form>' + content + '</form>';
       html += '<button class="btn btn-block btn-' + self.submitContext + ' applyBtn">' + self.submitText + ' </button>';
-      if(self.options.form.closeText){
+      if (self.options.form.closeText) {
         html += '<button class="btn btn-block btn-default closeBtn">' + self.options.form.closeText + ' </button>';
       }
       this.content = _.template(html);
     },
-    getTemplateOptions: function(){
+    getTemplateOptions: function() {
       var self = this;
       var items = [];
-      self.app.selectedCollection.each(function(item){
+      self.app.selectedCollection.each(function(item) {
         items.push(item.toJSON());
       });
       return $.extend({}, true, self.options, {
@@ -50,16 +50,16 @@ define([
     applyButtonClicked: function() {
       var self = this;
       var data = {};
-      _.each(self.$el.find('form').serializeArray(), function(param){
+      _.each(self.$el.find('form').serializeArray(), function(param) {
         data[param.name] = param.value;
       });
 
       self.app.buttonClickEvent(this.triggerView, data);
       self.hide();
     },
-    afterRender: function(){
+    afterRender: function() {
       var self = this;
-      if(self.options.form.dataUrl){
+      if (self.options.form.dataUrl) {
         self.$('.popover-content').html(_t('Loading...'));
         self.app.loading.show();
         $.ajax({
@@ -72,21 +72,21 @@ define([
             transitions: true,
             render: 'yes'
           }
-        }).done(function(result){
+        }).done(function(result) {
           self.data = result.data || result;
           self.renderContent();
           registry.scan(self.$el);
-        }).fail(function(){
+        }).fail(function() {
           /* we temporarily set original html to a value here so we can
              render the updated content and then put the original back */
           var originalContent = self.content;
           self.setContent('<p>' + _t('Error loading popover from server.') + '</p>', false);
           self.renderContent();
           self.content = originalContent;
-        }).always(function(){
+        }).always(function() {
           self.app.loading.hide();
         });
-      }else{
+      } else {
         registry.scan(self.$el);
       }
     },
@@ -95,7 +95,7 @@ define([
       var self = this;
       if (!self.opened) {
         return;
-      }else{
+      } else {
         this.$el.replaceWith(this.render().el);
       }
     }
diff --git a/mockup/patterns/structure/js/views/paging.js b/mockup/patterns/structure/js/views/paging.js
index 77b8e38..4221be9 100644
--- a/mockup/patterns/structure/js/views/paging.js
+++ b/mockup/patterns/structure/js/views/paging.js
@@ -7,7 +7,6 @@ define([
 ], function($, _, Backbone, PagingTemplate, _t) {
   'use strict';
 
-
   var PagingView = Backbone.View.extend({
     events: {
       'click a.servernext': 'nextResultPage',
@@ -22,7 +21,7 @@ define([
     tagName: 'aside',
     template: _.template(PagingTemplate),
     maxPages: 7,
-    initialize: function (options) {
+    initialize: function(options) {
       this.options = options;
       this.app = this.options.app;
       this.collection = this.app.collection;
@@ -32,10 +31,12 @@ define([
       this.$el.appendTo('#pagination');
     },
 
-    render: function () {
+    render: function() {
       var data = this.collection.info();
       data.pages = this.getPages(data);
-      var html = this.template($.extend({ _t: _t}, data));
+      var html = this.template($.extend({
+        _t: _t
+      }, data));
       this.$el.html(html);
       return this;
     },
@@ -75,28 +76,28 @@ define([
       }
       return pages;
     },
-    nextResultPage: function (e) {
+    nextResultPage: function(e) {
       e.preventDefault();
       this.collection.requestNextPage();
     },
-    previousResultPage: function (e) {
+    previousResultPage: function(e) {
       e.preventDefault();
       this.collection.requestPreviousPage();
     },
-    gotoFirst: function (e) {
+    gotoFirst: function(e) {
       e.preventDefault();
       this.collection.goTo(this.collection.information.firstPage);
     },
-    gotoLast: function (e) {
+    gotoLast: function(e) {
       e.preventDefault();
       this.collection.goTo(this.collection.information.totalPages);
     },
-    gotoPage: function (e) {
+    gotoPage: function(e) {
       e.preventDefault();
       var page = $(e.target).text();
       this.collection.goTo(page);
     },
-    changeCount: function (e) {
+    changeCount: function(e) {
       e.preventDefault();
       var per = $(e.target).text();
       this.collection.howManyPer(per);
diff --git a/mockup/patterns/structure/js/views/rearrange.js b/mockup/patterns/structure/js/views/rearrange.js
index f6ec027..63601d7 100644
--- a/mockup/patterns/structure/js/views/rearrange.js
+++ b/mockup/patterns/structure/js/views/rearrange.js
@@ -20,7 +20,7 @@ define([
           '<b><%- _t("This permanently changes the order of items in this folder. This operation may take a long time depending on the size of the folder.") %></b>' +
         '</p>' +
       '</div>' +
-      '<div>' + 
+      '<div>' +
         '<label> <input type="checkbox" name="reversed" /> <%- _t("Reverse") %></label>' +
       '</div>' +
       '<button class="btn btn-block btn-primary"><%- _t("Rearrange") %></button>'
@@ -40,10 +40,11 @@ define([
       return this;
     },
     rearrangeButtonClicked: function() {
-      if(this.app.queryHelper.getCurrentPath() === '/'){
-        if(!window.confirm(_t('Sorting the content on the base of the site ' +
-                              'could affect your navigation order. ' +
-                              'Are you certain you want to do this?'))){
+      if (this.app.queryHelper.getCurrentPath() === '/') {
+        if (!window.confirm(_t(
+          'Sorting the content on the base of the site ' +
+          'could affect your navigation order. ' +
+          'Are you certain you want to do this?'))) {
           return;
         }
       }
diff --git a/mockup/patterns/structure/js/views/selectionbutton.js b/mockup/patterns/structure/js/views/selectionbutton.js
index cd8e988..c864c3f 100644
--- a/mockup/patterns/structure/js/views/selectionbutton.js
+++ b/mockup/patterns/structure/js/views/selectionbutton.js
@@ -15,7 +15,7 @@ define([
         this.collection.on('add remove reset', function() {
           /* delay it */
           clearTimeout(self.timeout);
-          self.timeout = setTimeout(function(){
+          self.timeout = setTimeout(function() {
             self.render();
             if (self.collection.length === 0) {
               self.$el.removeClass('active');
@@ -25,7 +25,11 @@ define([
       }
     },
     serializedModel: function() {
-      var obj = {icon: '', title: this.options.title, length: 0};
+      var obj = {
+        icon: '',
+        title: this.options.title,
+        length: 0
+      };
       if (this.collection !== null) {
         obj.length = this.collection.length;
       }
diff --git a/mockup/patterns/structure/js/views/selectionwell.js b/mockup/patterns/structure/js/views/selectionwell.js
index 8ba768f..cb5020f 100644
--- a/mockup/patterns/structure/js/views/selectionwell.js
+++ b/mockup/patterns/structure/js/views/selectionwell.js
@@ -8,9 +8,11 @@ define([
 
   var WellView = PopoverView.extend({
     className: 'popover selected-items',
-    title: _.template('<input type="text" class="filter" placeholder="Filter" />' +
-                      '<a href="#" class=" remove-all">' +
-                        '<span class="glyphicon glyphicon-remove-circle"></span> <%- _t("remove all") %></a>'),
+    title: _.template(
+      '<input type="text" class="filter" placeholder="Filter" />' +
+      '<a href="#" class=" remove-all">' +
+      '<span class="glyphicon glyphicon-remove-circle"></span> <%- _t("remove all") %></a>'
+    ),
     content: _.template(
       '<% collection.each(function(item) { %>' +
       '<%= item_template(item.toJSON()) %>' +
@@ -25,15 +27,15 @@ define([
       PopoverView.prototype.initialize.apply(this, [options]);
       var self = this;
       var timeout = 0;
-      this.listenTo(this.collection, 'reset all add remove', function(){
+      this.listenTo(this.collection, 'reset all add remove', function() {
         clearTimeout(timeout);
-        timeout = setTimeout(function(){
+        timeout = setTimeout(function() {
           self.render();
         }, 50);
       });
       this.options['item_template'] = _.template(ItemTemplate); // jshint ignore:line
     },
-    render: function () {
+    render: function() {
       PopoverView.prototype.render.call(this);
       if (this.collection.length === 0) {
         this.$el.removeClass('active');
diff --git a/mockup/patterns/structure/js/views/table.js b/mockup/patterns/structure/js/views/table.js
index ff5df8a..85a4125 100644
--- a/mockup/patterns/structure/js/views/table.js
+++ b/mockup/patterns/structure/js/views/table.js
@@ -192,7 +192,7 @@ define([
     storeOrder: function() {
       var self = this;
       var subsetIds = [];
-      self.$('tbody tr.itemRow').each(function(idx) {
+      self.$('tbody tr.itemRow').each(function() {
         subsetIds.push($(this).attr('data-id'));
       });
       self.subsetIds = subsetIds;
diff --git a/mockup/patterns/structure/js/views/tablerow.js b/mockup/patterns/structure/js/views/tablerow.js
index 5cda20e..d82b0f0 100644
--- a/mockup/patterns/structure/js/views/tablerow.js
+++ b/mockup/patterns/structure/js/views/tablerow.js
@@ -83,7 +83,7 @@ define([
       // Resolve the correct handler based on these keys.
       // Default handlers live in ../navigation.js (bound to Nav)
       if (keyEvent && keyEvent.ctrlKey ||
-          !(this.model.attributes['is_folderish'])) {
+          !(this.model.attributes.is_folderish)) {
         // middle/ctrl-click or not a folder content
         key = 'other';  // default Nav.openClicked
       } else {
diff --git a/mockup/patterns/structure/less/pattern.structure.less b/mockup/patterns/structure/less/pattern.structure.less
index 229fd76..5a2ba8d 100644
--- a/mockup/patterns/structure/less/pattern.structure.less
+++ b/mockup/patterns/structure/less/pattern.structure.less
@@ -358,4 +358,4 @@ table.structure-dragging{
             padding: 5px;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/mockup/patterns/structure/pattern.js b/mockup/patterns/structure/pattern.js
index e50ea26..d481d67 100644
--- a/mockup/patterns/structure/pattern.js
+++ b/mockup/patterns/structure/pattern.js
@@ -19,15 +19,14 @@
  *                             moveUrl:/moveitem;
  *                             indexOptionsUrl:/tests/json/queryStringCriteria.json;
  *                             contextInfoUrl:{path}/context-info;"></div>
- * 
  */
 
-
 define([
   'jquery',
+  'underscore',
   'pat-base',
   'mockup-patterns-structure-url/js/views/app'
-], function($, Base, AppView) {
+], function($, _, Base, AppView) {
   'use strict';
 
   var Structure = Base.extend({


