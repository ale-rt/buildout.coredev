Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2016-09-27T16:30:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/e728cc7b49ea78bf2e77bdc8cde09d81b97461c1

isort

Files changed:
M plone/cachepurging/browser.py
M plone/cachepurging/hooks.py
M plone/cachepurging/interfaces.py
M plone/cachepurging/paths.py
M plone/cachepurging/purger.py
M plone/cachepurging/rewrite.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_purger.py
M plone/cachepurging/tests/test_rewrite.py
M plone/cachepurging/tests/test_traversable_paths.py
M plone/cachepurging/tests/test_utils.py
M plone/cachepurging/tests/test_views.py
M plone/cachepurging/utils.py
M setup.cfg

diff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py
index 2d02eb9..441b0ca 100644
--- a/plone/cachepurging/browser.py
+++ b/plone/cachepurging/browser.py
@@ -1,18 +1,14 @@
-from StringIO import StringIO
-
-from zope.component import getUtility
-from zope.event import notify
-
-from plone.registry.interfaces import IRegistry
-
-from plone.cachepurging.interfaces import IPurger
 from plone.cachepurging.interfaces import ICachePurgingSettings
-
-from z3c.caching.purge import Purge
-
+from plone.cachepurging.interfaces import IPurger
 from plone.cachepurging.utils import getPathsToPurge
 from plone.cachepurging.utils import getURLsToPurge
 from plone.cachepurging.utils import isCachePurgingEnabled
+from plone.registry.interfaces import IRegistry
+from StringIO import StringIO
+from z3c.caching.purge import Purge
+from zope.component import getUtility
+from zope.event import notify
+
 
 class QueuePurge(object):
     """Manually initiate a purge
@@ -56,4 +52,3 @@ def __call__(self):
                 print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror
 
         return out.getvalue()
-
diff --git a/plone/cachepurging/hooks.py b/plone/cachepurging/hooks.py
index 9a7f879..3816281 100644
--- a/plone/cachepurging/hooks.py
+++ b/plone/cachepurging/hooks.py
@@ -1,21 +1,17 @@
-from zope.component import adapter, queryUtility
-from zope.annotation.interfaces import IAnnotations
-
-from zope.globalrequest import getRequest
-
-from z3c.caching.interfaces import IPurgeEvent
-
-from plone.registry.interfaces import IRegistry
-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurger
-
 from plone.cachepurging.utils import getPathsToPurge
-from plone.cachepurging.utils import isCachePurgingEnabled
 from plone.cachepurging.utils import getURLsToPurge
-
+from plone.cachepurging.utils import isCachePurgingEnabled
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgeEvent
+from zope.annotation.interfaces import IAnnotations
+from zope.component import adapter
+from zope.component import queryUtility
+from zope.globalrequest import getRequest
 from ZPublisher.interfaces import IPubSuccess
 
+
 KEY = "plone.cachepurging.urls"
 
 @adapter(IPurgeEvent)
diff --git a/plone/cachepurging/interfaces.py b/plone/cachepurging/interfaces.py
index 3a09bd7..5409439 100644
--- a/plone/cachepurging/interfaces.py
+++ b/plone/cachepurging/interfaces.py
@@ -1,7 +1,7 @@
-from zope.interface import Interface
 from zope import schema
-
 from zope.i18nmessageid import MessageFactory
+from zope.interface import Interface
+
 
 _ = MessageFactory('plone')
 
diff --git a/plone/cachepurging/paths.py b/plone/cachepurging/paths.py
index 2972526..de80ef1 100644
--- a/plone/cachepurging/paths.py
+++ b/plone/cachepurging/paths.py
@@ -1,9 +1,8 @@
-from zope.interface import implements
-from zope.component import adapts
-
+from OFS.interfaces import ITraversable
 from z3c.caching.interfaces import IPurgePaths
+from zope.component import adapts
+from zope.interface import implements
 
-from OFS.interfaces import ITraversable
 
 class TraversablePurgePaths(object):
     """Default purge for OFS.Traversable-style objects
diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py
index ab69e44..f95fda8 100644
--- a/plone/cachepurging/purger.py
+++ b/plone/cachepurging/purger.py
@@ -11,6 +11,11 @@
   thread again waits until a connection can be re-established.
 """
 
+from App.config import getConfiguration
+from plone.cachepurging.interfaces import IPurger
+from zope.interface import implements
+from zope.testing.cleanup import addCleanUp
+
 import atexit
 import httplib
 import logging
@@ -21,10 +26,6 @@
 import time
 import urlparse
 
-from App.config import getConfiguration
-from zope.interface import implements
-
-from plone.cachepurging.interfaces import IPurger
 
 logger = logging.getLogger('plone.cachepurging')
 
@@ -332,6 +333,5 @@ def stopThreads():
     purger = DEFAULT_PURGER
     purger.stopThreads()
 
-from zope.testing.cleanup import addCleanUp
 addCleanUp(stopThreads)
 del addCleanUp
diff --git a/plone/cachepurging/rewrite.py b/plone/cachepurging/rewrite.py
index f2360bc..c7d1164 100644
--- a/plone/cachepurging/rewrite.py
+++ b/plone/cachepurging/rewrite.py
@@ -1,12 +1,13 @@
-import urlparse
-
-from zope.interface import Interface, implements
-from zope.component import adapts, queryUtility
-
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurgePathRewriter
 from plone.registry.interfaces import IRegistry
+from zope.component import adapts
+from zope.component import queryUtility
+from zope.interface import implements
+from zope.interface import Interface
+
+import urlparse
 
-from plone.cachepurging.interfaces import IPurgePathRewriter
-from plone.cachepurging.interfaces import ICachePurgingSettings
 
 class DefaultRewriter(object):
     """Default rewriter, which is aware of virtual hosting
diff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py
index 1024703..f095976 100644
--- a/plone/cachepurging/tests/test_hooks.py
+++ b/plone/cachepurging/tests/test_hooks.py
@@ -1,36 +1,28 @@
-import unittest
-import zope.component.testing
-
-from zope.interface import implements
-from zope.interface import alsoProvides
-
+from plone.cachepurging.hooks import purge
+from plone.cachepurging.hooks import queuePurge
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurger
+from plone.registry import Registry
+from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgePaths
+from z3c.caching.purge import Purge
+from zope.annotation.attribute import AttributeAnnotations
+from zope.annotation.interfaces import IAnnotations
+from zope.annotation.interfaces import IAttributeAnnotatable
 from zope.component import adapts
-from zope.component import provideUtility
 from zope.component import provideAdapter
 from zope.component import provideHandler
-
+from zope.component import provideUtility
 from zope.event import notify
-
-from zope.annotation.attribute import AttributeAnnotations
-from zope.annotation.interfaces import IAnnotations
-from zope.annotation.interfaces import IAttributeAnnotatable
-
 from zope.globalrequest import setRequest
+from zope.interface import alsoProvides
+from zope.interface import implements
+from ZPublisher.pubevents import PubSuccess
 
-from z3c.caching.interfaces import IPurgePaths
-from z3c.caching.purge import Purge
-
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry
-
-from plone.registry.fieldfactory import persistentFieldAdapter
-
-from plone.cachepurging.interfaces import IPurger
-from plone.cachepurging.interfaces import ICachePurgingSettings
-
-from plone.cachepurging.hooks import queuePurge, purge
+import unittest
+import zope.component.testing
 
-from ZPublisher.pubevents import PubSuccess
 
 class FauxContext(dict):
     pass
@@ -429,4 +421,3 @@ def purgeAsync(self, url, httpVerb='PURGE'):
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
-
diff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py
index ffb6422..dc604b8 100644
--- a/plone/cachepurging/tests/test_purger.py
+++ b/plone/cachepurging/tests/test_purger.py
@@ -2,15 +2,16 @@
 licensed.
 """
 
+from BaseHTTPServer import BaseHTTPRequestHandler
+from BaseHTTPServer import HTTPServer
+from plone.cachepurging.purger import DefaultPurger
+
 import os
-import threading
-import unittest
 import Queue
+import threading
 import time
+import unittest
 
-from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
-
-from plone.cachepurging.purger import DefaultPurger
 
 # Define a test HTTP server that returns canned responses
 
@@ -228,4 +229,3 @@ def testConnectionFailure(self):
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
-
diff --git a/plone/cachepurging/tests/test_rewrite.py b/plone/cachepurging/tests/test_rewrite.py
index 1dff885..8d75de2 100644
--- a/plone/cachepurging/tests/test_rewrite.py
+++ b/plone/cachepurging/tests/test_rewrite.py
@@ -1,16 +1,14 @@
-import unittest
-import zope.component.testing
-
-from zope.component import provideUtility
-from zope.component import provideAdapter
-
-from plone.registry.interfaces import IRegistry
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.rewrite import DefaultRewriter
 from plone.registry import Registry
-
 from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from zope.component import provideAdapter
+from zope.component import provideUtility
+
+import unittest
+import zope.component.testing
 
-from plone.cachepurging.interfaces import ICachePurgingSettings
-from plone.cachepurging.rewrite import DefaultRewriter
 
 class FauxRequest(dict):
     pass
diff --git a/plone/cachepurging/tests/test_traversable_paths.py b/plone/cachepurging/tests/test_traversable_paths.py
index 88c3d34..332fbae 100644
--- a/plone/cachepurging/tests/test_traversable_paths.py
+++ b/plone/cachepurging/tests/test_traversable_paths.py
@@ -1,9 +1,9 @@
-import unittest
-
+from OFS.interfaces import ITraversable
+from plone.cachepurging.paths import TraversablePurgePaths
 from zope.interface import implements
 
-from plone.cachepurging.paths import TraversablePurgePaths
-from OFS.interfaces import ITraversable
+import unittest
+
 
 class FauxTraversable(object):
     implements(ITraversable)
diff --git a/plone/cachepurging/tests/test_utils.py b/plone/cachepurging/tests/test_utils.py
index ba3d603..2802dfd 100644
--- a/plone/cachepurging/tests/test_utils.py
+++ b/plone/cachepurging/tests/test_utils.py
@@ -1,22 +1,18 @@
-import unittest
-import zope.component.testing
-
-from zope.interface import implements
-from zope.component import provideUtility
-from zope.component import provideAdapter
-from zope.component import adapts
-
-from z3c.caching.interfaces import IPurgePaths
-
-from plone.registry.interfaces import IRegistry
+from plone.cachepurging import utils
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurgePathRewriter
 from plone.registry import Registry
-
 from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgePaths
+from zope.component import adapts
+from zope.component import provideAdapter
+from zope.component import provideUtility
+from zope.interface import implements
 
-from plone.cachepurging.interfaces import ICachePurgingSettings
-from plone.cachepurging.interfaces import IPurgePathRewriter
+import unittest
+import zope.component.testing
 
-from plone.cachepurging import utils
 
 class FauxContext(object):
     pass
diff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py
index 41d7c0b..edfa424 100644
--- a/plone/cachepurging/tests/test_views.py
+++ b/plone/cachepurging/tests/test_views.py
@@ -1,25 +1,22 @@
-import unittest
-import zope.component.testing
-
-from zope.interface import implements
-from zope.component import adapts
+from plone.cachepurging.browser import PurgeImmediately
+from plone.cachepurging.browser import QueuePurge
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurger
+from plone.registry import Registry
+from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgeEvent
+from z3c.caching.interfaces import IPurgePaths
 from zope.component import adapter
-from zope.component import provideUtility
+from zope.component import adapts
 from zope.component import provideAdapter
 from zope.component import provideHandler
+from zope.component import provideUtility
+from zope.interface import implements
 
-from z3c.caching.interfaces import IPurgePaths
-from z3c.caching.interfaces import IPurgeEvent
-
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry
-
-from plone.registry.fieldfactory import persistentFieldAdapter
-
-from plone.cachepurging.interfaces import IPurger
-from plone.cachepurging.interfaces import ICachePurgingSettings
+import unittest
+import zope.component.testing
 
-from plone.cachepurging.browser import QueuePurge, PurgeImmediately
 
 class FauxContext(object):
     pass
diff --git a/plone/cachepurging/utils.py b/plone/cachepurging/utils.py
index d58d3fe..9aa3083 100644
--- a/plone/cachepurging/utils.py
+++ b/plone/cachepurging/utils.py
@@ -1,12 +1,10 @@
-from zope.component import queryUtility
-from zope.component import getAdapters
-
-from z3c.caching.interfaces import IPurgePaths
-
-from plone.registry.interfaces import IRegistry
-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurgePathRewriter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgePaths
+from zope.component import getAdapters
+from zope.component import queryUtility
+
 
 def isCachePurgingEnabled(registry=None):
     """Return True if caching is enabled
diff --git a/setup.cfg b/setup.cfg
index 8263512..35fdb6d 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -2,3 +2,10 @@
 ignore =
     *.cfg
     bootstrap.py
+
+[isort]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py


Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2016-09-27T16:31:16+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/8b9f36944a953b4480d5a704cbe5c3e6ad4d3f5f

autopep8 -ir

Files changed:
M plone/cachepurging/browser.py
M plone/cachepurging/hooks.py
M plone/cachepurging/interfaces.py
M plone/cachepurging/purger.py
M plone/cachepurging/rewrite.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_purger.py
M plone/cachepurging/tests/test_rewrite.py
M plone/cachepurging/tests/test_traversable_paths.py
M plone/cachepurging/tests/test_utils.py
M plone/cachepurging/tests/test_views.py
M plone/cachepurging/utils.py

diff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py
index 441b0ca..d2d76c8 100644
--- a/plone/cachepurging/browser.py
+++ b/plone/cachepurging/browser.py
@@ -26,6 +26,7 @@ def __call__(self):
         notify(Purge(self.context))
         return 'Queued'
 
+
 class PurgeImmediately(object):
     """Purge immediately
     """
diff --git a/plone/cachepurging/hooks.py b/plone/cachepurging/hooks.py
index 3816281..e7fce4d 100644
--- a/plone/cachepurging/hooks.py
+++ b/plone/cachepurging/hooks.py
@@ -14,6 +14,7 @@
 
 KEY = "plone.cachepurging.urls"
 
+
 @adapter(IPurgeEvent)
 def queuePurge(event):
     """Find URLs to purge and queue them for later
@@ -33,6 +34,7 @@ def queuePurge(event):
     paths = annotations.setdefault(KEY, set())
     paths.update(getPathsToPurge(event.object, request))
 
+
 @adapter(IPubSuccess)
 def purge(event):
     """Asynchronously send PURGE requests
diff --git a/plone/cachepurging/interfaces.py b/plone/cachepurging/interfaces.py
index 5409439..bb0212b 100644
--- a/plone/cachepurging/interfaces.py
+++ b/plone/cachepurging/interfaces.py
@@ -5,6 +5,7 @@
 
 _ = MessageFactory('plone')
 
+
 class ICachePurgingSettings(Interface):
     """Settings used by the purging algorithm.
 
@@ -12,57 +13,58 @@ class ICachePurgingSettings(Interface):
     """
 
     enabled = schema.Bool(
-            title=_(u"Enable purging"),
-            description=_(u"If disabled, no purging will take place"),
-            default=True,
-        )
+        title=_(u"Enable purging"),
+        description=_(u"If disabled, no purging will take place"),
+        default=True,
+    )
 
     cachingProxies = schema.Tuple(
-            title=_(u"Caching proxies"),
-            description=_(u"Provide the URLs of each proxy to which PURGE "
-                          u"requests should be sent."),
-            value_type=schema.URI(),
-        )
+        title=_(u"Caching proxies"),
+        description=_(u"Provide the URLs of each proxy to which PURGE "
+                      u"requests should be sent."),
+        value_type=schema.URI(),
+    )
 
     virtualHosting = schema.Bool(
-            title=_(u"Send PURGE requests with virtual hosting paths"),
-            description=_(u"This option is only relevant if you are using "
-                          u"virtual hosting with Zope's VirtualHostMonster. "
-                          u"This relies on special tokens (VirtualHostBase "
-                          u"and VirtualHostRoot) in the URL to instruct "
-                          u"Zope about the types of URLs that the user sees. "
-                          u"If virtual host URLs are in use and this option "
-                          u"is set, PURGE requests will be sent to the "
-                          u"caching proxy with the virtual hosting tokens "
-                          u"in place. This makes sense if there is a web "
-                          u"server in front of your caching proxy performing "
-                          u"the rewrites necessary to translate a user-"
-                          u"facing URL into a virtual hosting URL, so that "
-                          u"the requests the caching proxy sees have the "
-                          u"rewrite information in them. Conversely, if the "
-                          u"rewrite is done in or behind the caching proxy, "
-                          u"you want to disable this option, so that the "
-                          u"PURGE requests use URLs that match those seen "
-                          u"by the caching proxy as they come from the "
-                          u"client."),
-            required=True,
-            default=False,
-        )
+        title=_(u"Send PURGE requests with virtual hosting paths"),
+        description=_(u"This option is only relevant if you are using "
+                      u"virtual hosting with Zope's VirtualHostMonster. "
+                      u"This relies on special tokens (VirtualHostBase "
+                      u"and VirtualHostRoot) in the URL to instruct "
+                      u"Zope about the types of URLs that the user sees. "
+                      u"If virtual host URLs are in use and this option "
+                      u"is set, PURGE requests will be sent to the "
+                      u"caching proxy with the virtual hosting tokens "
+                      u"in place. This makes sense if there is a web "
+                      u"server in front of your caching proxy performing "
+                      u"the rewrites necessary to translate a user-"
+                      u"facing URL into a virtual hosting URL, so that "
+                      u"the requests the caching proxy sees have the "
+                      u"rewrite information in them. Conversely, if the "
+                      u"rewrite is done in or behind the caching proxy, "
+                      u"you want to disable this option, so that the "
+                      u"PURGE requests use URLs that match those seen "
+                      u"by the caching proxy as they come from the "
+                      u"client."),
+        required=True,
+        default=False,
+    )
 
     domains = schema.Tuple(
-            title=_(u"Domains"),
-            description=_(u"This option is only relevant if you are using "
-                          u"virtual hosting and you have enabled the option "
-                          u"to send PURGE requests with virtual hosting URLs "
-                          u"above. If you your site is served on multiple "
-                          u"domains e.g. http://example.org and "
-                          u"http://www.example.org you may wish to purge "
-                          u"both. If so, list all your domains here"),
-            required=False,
-            default=(),
-            missing_value=(),
-            value_type=schema.URI(),
-        )
+        title=_(u"Domains"),
+        description=_(u"This option is only relevant if you are using "
+                      u"virtual hosting and you have enabled the option "
+                      u"to send PURGE requests with virtual hosting URLs "
+                      u"above. If you your site is served on multiple "
+                      u"domains e.g. http://example.org and "
+                      u"http://www.example.org you may wish to purge "
+                      u"both. If so, list all your domains here"),
+        required=False,
+        default=(),
+        missing_value=(),
+        value_type=schema.URI(),
+    )
+
 
 class IPurgePathRewriter(Interface):
     """Used to rewrite paths for purging. This should be registered as an
@@ -78,6 +80,7 @@ def __call__(path):
         /path/to/view. Return an empty list if there is nothing to purge.
         """
 
+
 class IPurger(Interface):
     """A utility used to manage the purging process.
     """
@@ -106,12 +109,12 @@ def stopThreads(wait=False):
         """
 
     errorHeaders = schema.Tuple(
-            title=u"Error header names",
-            value_type=schema.ASCIILine(),
-            default=('x-squid-error',)
-        )
+        title=u"Error header names",
+        value_type=schema.ASCIILine(),
+        default=('x-squid-error',)
+    )
 
     http_1_1 = schema.Bool(
-            title=u"Use HTTP 1.1 for PURGE request",
-            default=True,
-        )
+        title=u"Use HTTP 1.1 for PURGE request",
+        default=True,
+    )
diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py
index f95fda8..12ad23c 100644
--- a/plone/cachepurging/purger.py
+++ b/plone/cachepurging/purger.py
@@ -43,17 +43,17 @@ def __init__(self, host, port=None, strict=None, scheme="http", timeout=5):
         else:
             raise ValueError("Invalid scheme '%s'" % scheme)
         httplib.HTTPConnection.__init__(self, host, port, strict,
-            timeout=timeout)
+                                        timeout=timeout)
         self.timeout = timeout
 
     def connect(self):
         if self.scheme == "http":
             httplib.HTTPConnection.connect(self)
         elif self.scheme == "https":
-            import ssl # import here in case python has no ssl support
+            import ssl  # import here in case python has no ssl support
             # Clone of httplib.HTTPSConnection.connect
             sock = socket.create_connection((self.host, self.port),
-                timeout=self.timeout)
+                                            timeout=self.timeout)
             key_file = cert_file = None
             self.sock = ssl.wrap_socket(sock, key_file, cert_file)
         else:
@@ -65,7 +65,7 @@ class DefaultPurger(object):
     implements(IPurger)
 
     def __init__(self, factory=Connection, timeout=30, backlog=200,
-            errorHeaders=('x-squid-error', ), http_1_1=True):
+                 errorHeaders=('x-squid-error', ), http_1_1=True):
         self.factory = factory
         self.timeout = timeout
         self.queues = {}
@@ -198,7 +198,7 @@ def _purgeSync(self, conn, url, httpVerb):
         purge_path = urlparse.urlunparse(
             ('', '', path, params, query, fragment))
         logger.debug('making %s request to %s for %s.',
-            httpVerb, host, purge_path)
+                     httpVerb, host, purge_path)
         conn.putrequest(httpVerb, purge_path, skip_accept_encoding=True)
         conn.endheaders()
         resp = conn.getresponse()
@@ -212,7 +212,7 @@ def _purgeSync(self, conn, url, httpVerb):
                 break
         resp.read()
         logger.debug("%s of %s: %s %s",
-            httpVerb, url, resp.status, resp.reason)
+                     httpVerb, url, resp.status, resp.reason)
         return resp, xcache, xerror
 
 
@@ -241,7 +241,7 @@ def run(self):
         try:
             while not self.stopping:
                 item = q.get()
-                if self.stopping or item is None: # Shut down thread signal
+                if self.stopping or item is None:  # Shut down thread signal
                     logger.debug('Stopping worker thread for '
                                  '(%s, %s).' % (self.host, self.scheme))
                     break
@@ -255,12 +255,12 @@ def run(self):
                     # Get a connection.
                     if connection is None:
                         connection = self.getConnection(url)
-                        if connection is None: # stopping
+                        if connection is None:  # stopping
                             break
                     # Got an item, purge it!
                     try:
                         resp, msg, err = self.producer._purgeSync(connection,
-                                                                 url, httpVerb)
+                                                                  url, httpVerb)
                         # worked! See if we can leave the connection open for
                         # the next item we need to process
                         # NOTE: If we make a HTTP 1.0 request to IIS, it
@@ -273,7 +273,7 @@ def run(self):
                         if not self.producer.http_1_1 or resp.will_close:
                             connection.close()
                             connection = None
-                        break # all done with this item!
+                        break  # all done with this item!
 
                     except (httplib.HTTPException, socket.error), e:
                         # All errors 'connection' related errors are treated
@@ -324,7 +324,7 @@ def getConnection(self, url):
                     if self.stopping:
                         break
                     time.sleep(1)
-        return None # must be stopping!
+        return None  # must be stopping!
 
 DEFAULT_PURGER = DefaultPurger()
 
diff --git a/plone/cachepurging/rewrite.py b/plone/cachepurging/rewrite.py
index c7d1164..842ccf5 100644
--- a/plone/cachepurging/rewrite.py
+++ b/plone/cachepurging/rewrite.py
@@ -64,7 +64,8 @@ def __call__(self, path):
         # Prefix, e.g. /_vh_foo/_vh_bar. Clear if we don't have any.
         pathPrefix = len(virtualUrlParts) == 3 and virtualUrlParts[1] or ''
         if pathPrefix:
-            pathPrefix = '/' + '/'.join(['_vh_%s' % p for p in pathPrefix.split('/')])
+            pathPrefix = '/' + \
+                '/'.join(['_vh_%s' % p for p in pathPrefix.split('/')])
 
         # Path, e.g. /front-page
         if len(path) > 0 and not path.startswith('/'):
@@ -80,5 +81,5 @@ def __call__(self, path):
                     'root':    virtualRoot,
                     'prefix':  pathPrefix,
                     'path':    path}
-                )
+            )
         return paths
diff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py
index f095976..aa6ca66 100644
--- a/plone/cachepurging/tests/test_hooks.py
+++ b/plone/cachepurging/tests/test_hooks.py
@@ -27,9 +27,11 @@
 class FauxContext(dict):
     pass
 
+
 class FauxRequest(dict):
     pass
 
+
 class TestQueueHandler(unittest.TestCase):
 
     def setUp(self):
@@ -106,7 +108,6 @@ def getAbsolutePaths(self):
         except:
             self.fail()
 
-
     def test_no_registry(self):
         context = FauxContext()
 
@@ -185,7 +186,7 @@ def test_enabled_no_paths(self):
         notify(Purge(context))
 
         self.assertEqual({'plone.cachepurging.urls': set()},
-                          dict(IAnnotations(request)))
+                         dict(IAnnotations(request)))
 
     def test_enabled(self):
         context = FauxContext()
@@ -220,7 +221,8 @@ def getAbsolutePaths(self):
         notify(Purge(context))
 
         self.assertEqual({'plone.cachepurging.urls': set(['/foo', '/bar'])},
-                          dict(IAnnotations(request)))
+                         dict(IAnnotations(request)))
+
 
 class TestPurgeHandler(unittest.TestCase):
 
@@ -321,7 +323,8 @@ def test_no_registry(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
         class FauxPurger(object):
             implements(IPurger)
@@ -343,7 +346,8 @@ def test_caching_disabled(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
         registry = Registry()
         registry.registerInterface(ICachePurgingSettings)
@@ -373,7 +377,8 @@ def test_no_purger(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
         registry = Registry()
         registry.registerInterface(ICachePurgingSettings)
@@ -392,7 +397,8 @@ def test_purge(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
         registry = Registry()
         registry.registerInterface(ICachePurgingSettings)
@@ -417,7 +423,8 @@ def purgeAsync(self, url, httpVerb='PURGE'):
         notify(PubSuccess(request))
 
         self.assertEqual(['http://localhost:1234/foo', 'http://localhost:1234/bar'],
-                          purger.purged)
+                         purger.purged)
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py
index dc604b8..f83172b 100644
--- a/plone/cachepurging/tests/test_purger.py
+++ b/plone/cachepurging/tests/test_purger.py
@@ -31,7 +31,7 @@ def do_PURGE(self):
             print "Unexpected connection from the purge tool"
             print self.command, self.path, self.protocol_version
             for h, v in self.headers.items():
-                print "%s: %s" % (h,v)
+                print "%s: %s" % (h, v)
             raise RuntimeError, "Unexpected connection"
 
         # We may have a function to call to check things.
@@ -62,6 +62,7 @@ def do_PURGE(self):
         self.end_headers()
         self.wfile.write(data)
 
+
 class TestHTTPServer(HTTPServer):
 
     def __init__(self, address, handler):
@@ -73,6 +74,7 @@ def queue_response(self, **kw):
 
 # Finally the test suites.
 
+
 class TestCase(unittest.TestCase):
 
     def setUp(self):
@@ -88,7 +90,8 @@ def tearDown(self):
                     if self.httpd.response_queue.empty():
                         break
                     time.sleep(0.1)
-                self.assertTrue(self.httpd.response_queue.empty(), "response queue not consumed")
+                self.assertTrue(self.httpd.response_queue.empty(),
+                                "response queue not consumed")
             if not self.purger.stopThreads(wait=True):
                 self.fail("The purge threads did not stop")
         finally:
@@ -115,6 +118,7 @@ def startServer(self, port=SERVER_PORT, start=True):
             t.start()
         return httpd, t
 
+
 class TestSync(TestCase):
 
     def setUp(self):
@@ -136,7 +140,7 @@ def testSimpleSync(self):
     def testHeaders(self):
         headers = {'X-Squid-Error': 'error text',
                    'X-Cache': 'a message',
-        }
+                   }
         self.httpd.queue_response(response=200, headers=headers)
         status, msg, err = self.dispatchURL("/foo")
         self.assertEqual(msg, 'a message')
@@ -148,12 +152,14 @@ def testError(self):
         status, msg, err = self.dispatchURL("/foo")
         self.assertEqual(status, 'ERROR')
 
+
 class TestSyncHTTP10(TestSync):
 
     def setUp(self):
         super(TestSync, self).setUp()
         self.purger.http_1_1 = False
 
+
 class TestAsync(TestCase):
 
     def dispatchURL(self, path, method="PURGE", port=SERVER_PORT):
@@ -182,8 +188,9 @@ def testAsyncError(self):
         self.httpd.queue_response(response=200)
         self.httpd.queue_response(response=None)
         self.httpd.queue_response(response=200)
-        self.dispatchURL("/foo") # will consume first.
-        self.dispatchURL("/bar") # will consume error, then retry
+        self.dispatchURL("/foo")  # will consume first.
+        self.dispatchURL("/bar")  # will consume error, then retry
+
 
 class TestAsyncConnectionFailure(TestCase):
 
@@ -227,5 +234,6 @@ def testConnectionFailure(self):
             time.sleep(0.1)
         # else - our tearDown will complain about the queue
 
+
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_rewrite.py b/plone/cachepurging/tests/test_rewrite.py
index 8d75de2..45e00cf 100644
--- a/plone/cachepurging/tests/test_rewrite.py
+++ b/plone/cachepurging/tests/test_rewrite.py
@@ -13,6 +13,7 @@
 class FauxRequest(dict):
     pass
 
+
 class TestRewrite(unittest.TestCase):
 
     def setUp(self):
@@ -28,7 +29,8 @@ def _prepareVHMRequest(self, path, domain='example.com', root='/plone', prefix='
         translatedPrefix = '/'.join(['_vh_%s' % p for p in prefix.split('/')])
 
         self.request['URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
-        self.request['ACTUAL_URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
+        self.request[
+            'ACTUAL_URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
         self.request['SERVER_URL'] = '%s://%s' % (protocol, domain,)
         self.request['PATH_INFO'] = '/VirtualHostBase/%s/%s:80%s/VirtualHostRoot%s%s' % (
             protocol, domain, root, translatedPrefix, path,)
@@ -38,7 +40,8 @@ def _prepareVHMRequest(self, path, domain='example.com', root='/plone', prefix='
             self.request['VIRTUAL_URL_PARTS'] = (
                 '%s://%s' % (protocol, domain,), prefix[1:], path[1:])
         else:
-            self.request['VIRTUAL_URL_PARTS'] = ('%s://%s' % (protocol, domain,), path[1:])
+            self.request['VIRTUAL_URL_PARTS'] = (
+                '%s://%s' % (protocol, domain,), path[1:])
 
         self.request['VirtualRootPhysicalPath'] = tuple(root.split('/'))
 
@@ -120,7 +123,8 @@ def test_malformed_virtual_url_parts(self):
         self.request['VIRTUAL_URL_PARTS'] = ()
         self.assertEqual(['/foo'], self.rewriter('/foo'))
 
-        self.request['VIRTUAL_URL_PARTS'] = ('http://example.com', '', '/foo', 'x')
+        self.request['VIRTUAL_URL_PARTS'] = (
+            'http://example.com', '', '/foo', 'x')
         self.assertEqual(['/foo'], self.rewriter('/foo'))
 
         self.request['VIRTUAL_URL_PARTS'] = 'foo'
@@ -241,7 +245,8 @@ def test_https(self):
         settings = registry.forInterface(ICachePurgingSettings)
         settings.virtualHosting = True
 
-        self._prepareVHMRequest('/foo', domain='example.com:81', protocol='https')
+        self._prepareVHMRequest(
+            '/foo', domain='example.com:81', protocol='https')
         self.assertEqual(['/VirtualHostBase/https/example.com:81/plone/VirtualHostRoot/foo'],
                          self.rewriter('/foo'))
 
@@ -253,7 +258,8 @@ def test_domains(self):
         settings.virtualHosting = True
         settings.domains = ('http://example.org:81', 'https://example.com:82')
 
-        self._prepareVHMRequest('/foo', domain='example.com:81', protocol='https')
+        self._prepareVHMRequest(
+            '/foo', domain='example.com:81', protocol='https')
         self.assertEqual(['/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/foo',
                           '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/foo'],
                          self.rewriter('/foo'))
@@ -266,10 +272,12 @@ def test_domains_w_different_path_in_request(self):
         settings.virtualHosting = True
         settings.domains = ('http://example.org:81', 'https://example.com:82')
 
-        self._prepareVHMRequest('/bar', domain='example.com:81', protocol='https')
+        self._prepareVHMRequest(
+            '/bar', domain='example.com:81', protocol='https')
         self.assertEqual(['/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/foo',
                           '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/foo'],
                          self.rewriter('/foo'))
 
+
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_traversable_paths.py b/plone/cachepurging/tests/test_traversable_paths.py
index 332fbae..f4c33b9 100644
--- a/plone/cachepurging/tests/test_traversable_paths.py
+++ b/plone/cachepurging/tests/test_traversable_paths.py
@@ -11,6 +11,7 @@ class FauxTraversable(object):
     def virtual_url_path(self):
         return 'foo'
 
+
 class TestTraversablePaths(unittest.TestCase):
 
     def test_traversable_paths(self):
@@ -21,5 +22,6 @@ def test_traversable_paths(self):
         self.assertEqual(['/foo'], paths.getRelativePaths())
         self.assertEqual([], paths.getAbsolutePaths())
 
+
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_utils.py b/plone/cachepurging/tests/test_utils.py
index 2802dfd..df68e7a 100644
--- a/plone/cachepurging/tests/test_utils.py
+++ b/plone/cachepurging/tests/test_utils.py
@@ -17,9 +17,11 @@
 class FauxContext(object):
     pass
 
+
 class FauxRequest(dict):
     pass
 
+
 class TestIsCachingEnabled(unittest.TestCase):
 
     def setUp(self):
@@ -82,6 +84,7 @@ def test_passed_registry(self):
         self.assertEqual(False, utils.isCachePurgingEnabled())
         self.assertEqual(True, utils.isCachePurgingEnabled(registry))
 
+
 class TestGetPathsToPurge(unittest.TestCase):
 
     def setUp(self):
@@ -92,7 +95,8 @@ def tearDown(self):
         zope.component.testing.tearDown()
 
     def test_no_purge_paths(self):
-        self.assertEqual([], list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            [], list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_empty_relative_paths(self):
 
@@ -111,7 +115,8 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths, name="test1")
 
-        self.assertEqual([], list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            [], list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_no_rewriter(self):
         class FauxPurgePaths(object):
@@ -130,7 +135,7 @@ def getAbsolutePaths(self):
         provideAdapter(FauxPurgePaths, name="test1")
 
         self.assertEqual(['/foo', '/bar', '/baz'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+                         list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_test_rewriter(self):
         class FauxPurgePaths(object):
@@ -161,9 +166,9 @@ def __call__(self, path):
         provideAdapter(DefaultRewriter)
 
         self.assertEqual(['/vhm1/foo', '/vhm2/foo',
-                           '/vhm1/bar', '/vhm2/bar',
-                           '/baz'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+                          '/vhm1/bar', '/vhm2/bar',
+                          '/baz'],
+                         list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_multiple_purge_paths(self):
         class FauxPurgePaths1(object):
@@ -209,8 +214,8 @@ def __call__(self, path):
         provideAdapter(DefaultRewriter)
 
         self.assertEqual(['/vhm1/foo', '/vhm2/foo', '/vhm1/bar', '/vhm2/bar', '/baz',
-                           '/vhm1/foo/view', '/vhm2/foo/view', '/quux'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+                          '/vhm1/foo/view', '/vhm2/foo/view', '/quux'],
+                         list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_rewriter_abort(self):
         class FauxPurgePaths1(object):
@@ -256,7 +261,8 @@ def __call__(self, path):
         provideAdapter(DefaultRewriter)
 
         self.assertEqual(['/baz', '/quux'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+                         list(utils.getPathsToPurge(self.context, self.request)))
+
 
 class TestGetURLsToPurge(unittest.TestCase):
 
@@ -265,11 +271,12 @@ def test_no_proxies(self):
 
     def test_absolute_path(self):
         self.assertEqual(['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
-            list(utils.getURLsToPurge('/foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
+                         list(utils.getURLsToPurge('/foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
 
     def test_relative_path(self):
         self.assertEqual(['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
-            list(utils.getURLsToPurge('foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
+                         list(utils.getURLsToPurge('foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py
index edfa424..7eba655 100644
--- a/plone/cachepurging/tests/test_views.py
+++ b/plone/cachepurging/tests/test_views.py
@@ -21,9 +21,11 @@
 class FauxContext(object):
     pass
 
+
 class FauxRequest(dict):
     pass
 
+
 class Handler(object):
 
     def __init__(self):
@@ -33,6 +35,7 @@ def __init__(self):
     def handler(self, event):
         self.invocations.append(event)
 
+
 class TestQueuePurge(unittest.TestCase):
 
     def setUp(self):
@@ -67,6 +70,7 @@ def test_enabled(self):
         self.assertEqual(1, len(self.handler.invocations))
         self.assertTrue(self.handler.invocations[0].object is context)
 
+
 class TestPurgeImmediately(unittest.TestCase):
 
     def setUp(self):
@@ -113,8 +117,9 @@ def test_disabled(self):
     def test_purge(self):
         view = PurgeImmediately(FauxContext(), FauxRequest())
         self.assertEqual("Purged http://localhost:1234/foo Status 200 OK X-Cache cached Error: None\n"
-                          "Purged http://localhost:1234/bar Status 200 OK X-Cache cached Error: None\n",
-                          view())
+                         "Purged http://localhost:1234/bar Status 200 OK X-Cache cached Error: None\n",
+                         view())
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/utils.py b/plone/cachepurging/utils.py
index 9aa3083..bdaa117 100644
--- a/plone/cachepurging/utils.py
+++ b/plone/cachepurging/utils.py
@@ -18,6 +18,7 @@ def isCachePurgingEnabled(registry=None):
     settings = registry.forInterface(ICachePurgingSettings, check=False)
     return (settings.enabled and bool(settings.cachingProxies))
 
+
 def getPathsToPurge(context, request):
     """Given the current request and an object, look up paths to purge for
     the object and yield them one by one. An IPurgePathRewriter adapter may
@@ -34,7 +35,7 @@ def getPathsToPurge(context, request):
                 if rewriter is None:
                     yield relativePath
                 else:
-                    rewrittenPaths = rewriter(relativePath) or [] # None -> []
+                    rewrittenPaths = rewriter(relativePath) or []  # None -> []
                     for rewrittenPath in rewrittenPaths:
                         yield rewrittenPath
 
@@ -44,6 +45,7 @@ def getPathsToPurge(context, request):
             for absolutePath in absolutePaths:
                 yield absolutePath
 
+
 def getURLsToPurge(path, proxies):
     """Yield full purge URLs for a given path, taking the caching proxies
     listed in the registry into account.


Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2016-09-27T16:31:30+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/e39271e41b423bd2d56171cd1b5afca73b0196a6

utf8 headers

Files changed:
M plone/__init__.py
M plone/cachepurging/browser.py
M plone/cachepurging/hooks.py
M plone/cachepurging/interfaces.py
M plone/cachepurging/paths.py
M plone/cachepurging/purger.py
M plone/cachepurging/rewrite.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_purger.py
M plone/cachepurging/tests/test_rewrite.py
M plone/cachepurging/tests/test_traversable_paths.py
M plone/cachepurging/tests/test_utils.py
M plone/cachepurging/tests/test_views.py
M plone/cachepurging/utils.py

diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..85880ef 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py
index d2d76c8..5f8fb4c 100644
--- a/plone/cachepurging/browser.py
+++ b/plone/cachepurging/browser.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurger
 from plone.cachepurging.utils import getPathsToPurge
diff --git a/plone/cachepurging/hooks.py b/plone/cachepurging/hooks.py
index e7fce4d..7253ed9 100644
--- a/plone/cachepurging/hooks.py
+++ b/plone/cachepurging/hooks.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurger
 from plone.cachepurging.utils import getPathsToPurge
diff --git a/plone/cachepurging/interfaces.py b/plone/cachepurging/interfaces.py
index bb0212b..b65bab1 100644
--- a/plone/cachepurging/interfaces.py
+++ b/plone/cachepurging/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope import schema
 from zope.i18nmessageid import MessageFactory
 from zope.interface import Interface
diff --git a/plone/cachepurging/paths.py b/plone/cachepurging/paths.py
index de80ef1..22b5fad 100644
--- a/plone/cachepurging/paths.py
+++ b/plone/cachepurging/paths.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.interfaces import ITraversable
 from z3c.caching.interfaces import IPurgePaths
 from zope.component import adapts
diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py
index 12ad23c..76564b7 100644
--- a/plone/cachepurging/purger.py
+++ b/plone/cachepurging/purger.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """The following is borrowed heavily from Products.CMFSquidTool. That code
 is ZPL licensed.
 
diff --git a/plone/cachepurging/rewrite.py b/plone/cachepurging/rewrite.py
index 842ccf5..c7b2ad9 100644
--- a/plone/cachepurging/rewrite.py
+++ b/plone/cachepurging/rewrite.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurgePathRewriter
 from plone.registry.interfaces import IRegistry
diff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py
index aa6ca66..c03b2f3 100644
--- a/plone/cachepurging/tests/test_hooks.py
+++ b/plone/cachepurging/tests/test_hooks.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging.hooks import purge
 from plone.cachepurging.hooks import queuePurge
 from plone.cachepurging.interfaces import ICachePurgingSettings
diff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py
index f83172b..8460af7 100644
--- a/plone/cachepurging/tests/test_purger.py
+++ b/plone/cachepurging/tests/test_purger.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """This test is borrwed heavily from Products.CMFSquidTool. That code is ZPL
 licensed.
 """
diff --git a/plone/cachepurging/tests/test_rewrite.py b/plone/cachepurging/tests/test_rewrite.py
index 45e00cf..2d73019 100644
--- a/plone/cachepurging/tests/test_rewrite.py
+++ b/plone/cachepurging/tests/test_rewrite.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.rewrite import DefaultRewriter
 from plone.registry import Registry
diff --git a/plone/cachepurging/tests/test_traversable_paths.py b/plone/cachepurging/tests/test_traversable_paths.py
index f4c33b9..48862f8 100644
--- a/plone/cachepurging/tests/test_traversable_paths.py
+++ b/plone/cachepurging/tests/test_traversable_paths.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from OFS.interfaces import ITraversable
 from plone.cachepurging.paths import TraversablePurgePaths
 from zope.interface import implements
diff --git a/plone/cachepurging/tests/test_utils.py b/plone/cachepurging/tests/test_utils.py
index df68e7a..aa03a9e 100644
--- a/plone/cachepurging/tests/test_utils.py
+++ b/plone/cachepurging/tests/test_utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging import utils
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurgePathRewriter
diff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py
index 7eba655..b0f098f 100644
--- a/plone/cachepurging/tests/test_views.py
+++ b/plone/cachepurging/tests/test_views.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging.browser import PurgeImmediately
 from plone.cachepurging.browser import QueuePurge
 from plone.cachepurging.interfaces import ICachePurgingSettings
diff --git a/plone/cachepurging/utils.py b/plone/cachepurging/utils.py
index bdaa117..e323f0b 100644
--- a/plone/cachepurging/utils.py
+++ b/plone/cachepurging/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurgePathRewriter
 from plone.registry.interfaces import IRegistry


Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2016-09-28T07:47:59+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/4aa7d08b2f6a20579b2385cf42498d42167e3259

manual cleanup

Files changed:
A bootstrap.sh
M .gitignore
M CHANGES.rst
M buildout.cfg
M plone/__init__.py
M plone/cachepurging/browser.py
M plone/cachepurging/paths.py
M plone/cachepurging/purger.py
M plone/cachepurging/rewrite.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_purger.py
M plone/cachepurging/tests/test_rewrite.py
M plone/cachepurging/tests/test_traversable_paths.py
M plone/cachepurging/tests/test_utils.py
M plone/cachepurging/tests/test_views.py
M setup.py

diff --git a/.gitignore b/.gitignore
index 206bfb5..be792e4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,6 +7,7 @@
 /var
 /build
 /dist
+/local
 /local.cfg
 .coverage
 /*.egg-info
diff --git a/CHANGES.rst b/CHANGES.rst
index 7fbbf32..336e031 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,14 +4,19 @@ Changelog
 1.0.12 (unreleased)
 -------------------
 
-New:
+Breaking changes:
 
 - *add item here*
 
-Fixes:
+New features:
 
 - *add item here*
 
+Bug fixes:
+
+- Code-Style: isort, utf8-headers, zca-decorators, manual cleanup.
+  [jensens]
+
 
 1.0.11 (2016-01-08)
 -------------------
diff --git a/bootstrap.sh b/bootstrap.sh
new file mode 100755
index 0000000..d764997
--- /dev/null
+++ b/bootstrap.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+
+# see https://community.plone.org/t/not-using-bootstrap-py-as-default/620
+rm -r ./lib ./include ./local ./bin
+virtualenv --clear .
+./bin/pip install --upgrade pip setuptools zc.buildout
+./bin/buildout
diff --git a/buildout.cfg b/buildout.cfg
index e7133b1..52c130a 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -3,7 +3,7 @@ parts = test
         omelette
 versions = versions
 
-extends = http://dist.plone.org/release/4.3.6/versions.cfg
+extends = http://dist.plone.org/release/5.1-latest/versions.cfg
 develop = .
 
 [versions]
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py
index 5f8fb4c..af41219 100644
--- a/plone/cachepurging/browser.py
+++ b/plone/cachepurging/browser.py
@@ -51,6 +51,6 @@ def __call__(self):
         for path in getPathsToPurge(self.context, self.request):
             for url in getURLsToPurge(path, settings.cachingProxies):
                 status, xcache, xerror = purger.purgeSync(url)
-                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror
+                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror  # noqa
 
         return out.getvalue()
diff --git a/plone/cachepurging/paths.py b/plone/cachepurging/paths.py
index 22b5fad..b67c583 100644
--- a/plone/cachepurging/paths.py
+++ b/plone/cachepurging/paths.py
@@ -1,17 +1,16 @@
 # -*- coding: utf-8 -*-
 from OFS.interfaces import ITraversable
 from z3c.caching.interfaces import IPurgePaths
-from zope.component import adapts
-from zope.interface import implements
+from zope.component import adapter
+from zope.interface import implementer
 
 
+@implementer(IPurgePaths)
+@adapter(ITraversable)
 class TraversablePurgePaths(object):
     """Default purge for OFS.Traversable-style objects
     """
 
-    implements(IPurgePaths)
-    adapts(ITraversable)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py
index 76564b7..3e298b4 100644
--- a/plone/cachepurging/purger.py
+++ b/plone/cachepurging/purger.py
@@ -14,7 +14,7 @@
 
 from App.config import getConfiguration
 from plone.cachepurging.interfaces import IPurger
-from zope.interface import implements
+from zope.interface import implementer
 from zope.testing.cleanup import addCleanUp
 
 import atexit
@@ -61,10 +61,9 @@ def connect(self):
             raise ValueError("Invalid scheme '%s'" % self.scheme)
 
 
+@implementer(IPurger)
 class DefaultPurger(object):
 
-    implements(IPurger)
-
     def __init__(self, factory=Connection, timeout=30, backlog=200,
                  errorHeaders=('x-squid-error', ), http_1_1=True):
         self.factory = factory
@@ -260,8 +259,11 @@ def run(self):
                             break
                     # Got an item, purge it!
                     try:
-                        resp, msg, err = self.producer._purgeSync(connection,
-                                                                  url, httpVerb)
+                        resp, msg, err = self.producer._purgeSync(
+                            connection,
+                            url,
+                            httpVerb
+                        )
                         # worked! See if we can leave the connection open for
                         # the next item we need to process
                         # NOTE: If we make a HTTP 1.0 request to IIS, it
@@ -327,6 +329,7 @@ def getConnection(self, url):
                     time.sleep(1)
         return None  # must be stopping!
 
+
 DEFAULT_PURGER = DefaultPurger()
 
 
@@ -334,5 +337,6 @@ def stopThreads():
     purger = DEFAULT_PURGER
     purger.stopThreads()
 
+
 addCleanUp(stopThreads)
 del addCleanUp
diff --git a/plone/cachepurging/rewrite.py b/plone/cachepurging/rewrite.py
index c7b2ad9..c5e3e8b 100644
--- a/plone/cachepurging/rewrite.py
+++ b/plone/cachepurging/rewrite.py
@@ -2,21 +2,20 @@
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurgePathRewriter
 from plone.registry.interfaces import IRegistry
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import queryUtility
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 
 import urlparse
 
 
+@implementer(IPurgePathRewriter)
+@adapter(Interface)
 class DefaultRewriter(object):
     """Default rewriter, which is aware of virtual hosting
     """
 
-    implements(IPurgePathRewriter)
-    adapts(Interface)
-
     def __init__(self, request):
         self.request = request
 
@@ -45,12 +44,14 @@ def __call__(self, path):
         virtualRootPhysicalPath = request.get('VirtualRootPhysicalPath')
 
         # Make sure request is compliant
-        if (not virtualUrlParts
-                or not virtualRootPhysicalPath
-                or not isinstance(virtualUrlParts, (list, tuple,))
-                or not isinstance(virtualRootPhysicalPath, (list, tuple,))
-                or len(virtualUrlParts) < 2
-                or len(virtualUrlParts) > 3):
+        if (
+            not virtualUrlParts or
+            not virtualRootPhysicalPath or
+            not isinstance(virtualUrlParts, (list, tuple,)) or
+            not isinstance(virtualRootPhysicalPath, (list, tuple,)) or
+            len(virtualUrlParts) < 2 or
+            len(virtualUrlParts) > 3
+        ):
             return [path]
 
         domains = settings.domains
@@ -76,11 +77,13 @@ def __call__(self, path):
         for domain in domains:
             scheme, host = urlparse.urlparse(domain)[:2]
             paths.append(
-                '/VirtualHostBase/%(scheme)s/%(host)s%(root)s/VirtualHostRoot%(prefix)s%(path)s' % {
-                    'scheme':  scheme,
-                    'host':    host,
-                    'root':    virtualRoot,
-                    'prefix':  pathPrefix,
-                    'path':    path}
+                '/VirtualHostBase/%(scheme)s/%(host)s%(root)s/'
+                'VirtualHostRoot%(prefix)s%(path)s' % {
+                    'scheme': scheme,
+                    'host': host,
+                    'root': virtualRoot,
+                    'prefix': pathPrefix,
+                    'path': path
+                }
             )
         return paths
diff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py
index c03b2f3..9c9d4fc 100644
--- a/plone/cachepurging/tests/test_hooks.py
+++ b/plone/cachepurging/tests/test_hooks.py
@@ -11,14 +11,14 @@
 from zope.annotation.attribute import AttributeAnnotations
 from zope.annotation.interfaces import IAnnotations
 from zope.annotation.interfaces import IAttributeAnnotatable
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import provideAdapter
 from zope.component import provideHandler
 from zope.component import provideUtility
 from zope.event import notify
 from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
-from zope.interface import implements
+from zope.interface import implementer
 from ZPublisher.pubevents import PubSuccess
 
 import unittest
@@ -55,9 +55,9 @@ def test_no_request(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -89,9 +89,9 @@ def test_request_not_annotatable(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -116,9 +116,9 @@ def test_no_registry(self):
         alsoProvides(request, IAttributeAnnotatable)
         setRequest(request)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -150,9 +150,9 @@ def test_caching_disabled(self):
         settings.enabled = False
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -204,9 +204,9 @@ def test_enabled(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -246,8 +246,8 @@ def test_request_not_annotatable(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -274,8 +274,8 @@ def test_no_path_key(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -304,8 +304,8 @@ def test_no_paths(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -327,8 +327,8 @@ def test_no_registry(self):
         IAnnotations(request)['plone.cachepurging.urls'] = set(
             ['/foo', '/bar'])
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -358,8 +358,8 @@ def test_caching_disabled(self):
         settings.enabled = False
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -409,8 +409,8 @@ def test_purge(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -423,8 +423,10 @@ def purgeAsync(self, url, httpVerb='PURGE'):
 
         notify(PubSuccess(request))
 
-        self.assertEqual(['http://localhost:1234/foo', 'http://localhost:1234/bar'],
-                         purger.purged)
+        self.assertEqual(
+            ['http://localhost:1234/foo', 'http://localhost:1234/bar'],
+            purger.purged
+        )
 
 
 def test_suite():
diff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py
index 8460af7..0e2d719 100644
--- a/plone/cachepurging/tests/test_purger.py
+++ b/plone/cachepurging/tests/test_purger.py
@@ -33,7 +33,7 @@ def do_PURGE(self):
             print self.command, self.path, self.protocol_version
             for h, v in self.headers.items():
                 print "%s: %s" % (h, v)
-            raise RuntimeError, "Unexpected connection"
+            raise RuntimeError('Unexpected connection')
 
         # We may have a function to call to check things.
         validator = nr.get('validator')
diff --git a/plone/cachepurging/tests/test_rewrite.py b/plone/cachepurging/tests/test_rewrite.py
index 2d73019..238bc26 100644
--- a/plone/cachepurging/tests/test_rewrite.py
+++ b/plone/cachepurging/tests/test_rewrite.py
@@ -25,16 +25,26 @@ def setUp(self):
     def tearDown(self):
         zope.component.testing.tearDown()
 
-    def _prepareVHMRequest(self, path, domain='example.com', root='/plone', prefix='',
-                           protocol='http'):
+    def _prepareVHMRequest(
+        self,
+        path,
+        domain='example.com',
+        root='/plone',
+        prefix='',
+        protocol='http'
+    ):
         translatedPrefix = '/'.join(['_vh_%s' % p for p in prefix.split('/')])
 
         self.request['URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
         self.request[
             'ACTUAL_URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
         self.request['SERVER_URL'] = '%s://%s' % (protocol, domain,)
-        self.request['PATH_INFO'] = '/VirtualHostBase/%s/%s:80%s/VirtualHostRoot%s%s' % (
-            protocol, domain, root, translatedPrefix, path,)
+        self.request['PATH_INFO'] = (
+            '/VirtualHostBase/%s/%s:80%s/'
+            'VirtualHostRoot%s%s' % (
+                protocol, domain, root, translatedPrefix, path,
+            )
+        )
         self.request['VIRTUAL_URL'] = '%s://%s%s' % (protocol, domain, path)
 
         if prefix:
@@ -139,8 +149,10 @@ def test_standard_vhm(self):
         settings.virtualHosting = True
 
         self._prepareVHMRequest('/foo')
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_virtual_root_is_app_root(self):
         registry = Registry()
@@ -151,8 +163,10 @@ def test_virtual_root_is_app_root(self):
 
         self._prepareVHMRequest('/foo', root='/')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_virtual_root_is_deep(self):
         registry = Registry()
@@ -163,8 +177,11 @@ def test_virtual_root_is_deep(self):
 
         self._prepareVHMRequest('/foo', root='/bar/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/bar/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/bar/plone/'
+             'VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_inside_out_hosting(self):
         registry = Registry()
@@ -176,7 +193,8 @@ def test_inside_out_hosting(self):
         self._prepareVHMRequest('/foo', root='/bar/plone', prefix='/foo/bar')
 
         self.assertEqual(
-            ['/VirtualHostBase/http/example.com/bar/plone/VirtualHostRoot/_vh_foo/_vh_bar/foo'],
+            ['/VirtualHostBase/http/example.com/bar/plone/'
+             'VirtualHostRoot/_vh_foo/_vh_bar/foo'],
             self.rewriter('/foo'))
 
     def test_inside_out_hosting_root_empty_path(self):
@@ -189,7 +207,8 @@ def test_inside_out_hosting_root_empty_path(self):
         self._prepareVHMRequest('/', root='/plone', prefix='/plone')
 
         self.assertEqual(
-            ['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/_vh_plone'],
+            ['/VirtualHostBase/http/example.com/plone/'
+             'VirtualHostRoot/_vh_plone'],
             self.rewriter(''))
 
     def test_virtual_path_is_root(self):
@@ -201,8 +220,10 @@ def test_virtual_path_is_root(self):
 
         self._prepareVHMRequest('/', root='/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/'],
-                         self.rewriter('/'))
+        self.assertEqual([
+            '/VirtualHostBase/http/example.com/plone/VirtualHostRoot/'],
+            self.rewriter('/')
+        )
 
     def test_virtual_path_is_empty(self):
         registry = Registry()
@@ -213,8 +234,10 @@ def test_virtual_path_is_empty(self):
 
         self._prepareVHMRequest('', root='/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot'],
-                         self.rewriter(''))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/plone/VirtualHostRoot'],
+            self.rewriter('')
+        )
 
     def test_virtual_path_is_deep(self):
         registry = Registry()
@@ -225,8 +248,11 @@ def test_virtual_path_is_deep(self):
 
         self._prepareVHMRequest('/foo/bar', root='/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/foo/bar'],
-                         self.rewriter('/foo/bar'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/plone/'
+             'VirtualHostRoot/foo/bar'],
+            self.rewriter('/foo/bar')
+        )
 
     def test_nonstandard_port(self):
         registry = Registry()
@@ -236,8 +262,10 @@ def test_nonstandard_port(self):
         settings.virtualHosting = True
 
         self._prepareVHMRequest('/foo', domain='example.com:81')
-        self.assertEqual(['/VirtualHostBase/http/example.com:81/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com:81/plone/VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_https(self):
         registry = Registry()
@@ -248,8 +276,11 @@ def test_https(self):
 
         self._prepareVHMRequest(
             '/foo', domain='example.com:81', protocol='https')
-        self.assertEqual(['/VirtualHostBase/https/example.com:81/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/https/example.com:81/plone/'
+             'VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_domains(self):
         registry = Registry()
@@ -261,9 +292,15 @@ def test_domains(self):
 
         self._prepareVHMRequest(
             '/foo', domain='example.com:81', protocol='https')
-        self.assertEqual(['/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/foo',
-                          '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            [
+                '/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/'
+                'foo',
+                '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/'
+                'foo'
+            ],
+            self.rewriter('/foo')
+        )
 
     def test_domains_w_different_path_in_request(self):
         registry = Registry()
@@ -275,9 +312,15 @@ def test_domains_w_different_path_in_request(self):
 
         self._prepareVHMRequest(
             '/bar', domain='example.com:81', protocol='https')
-        self.assertEqual(['/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/foo',
-                          '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            [
+                '/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/'
+                'foo',
+                '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/'
+                'foo'
+            ],
+            self.rewriter('/foo')
+        )
 
 
 def test_suite():
diff --git a/plone/cachepurging/tests/test_traversable_paths.py b/plone/cachepurging/tests/test_traversable_paths.py
index 48862f8..cb5fcec 100644
--- a/plone/cachepurging/tests/test_traversable_paths.py
+++ b/plone/cachepurging/tests/test_traversable_paths.py
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
 from OFS.interfaces import ITraversable
 from plone.cachepurging.paths import TraversablePurgePaths
-from zope.interface import implements
+from zope.interface import implementer
 
 import unittest
 
 
+@implementer(ITraversable)
 class FauxTraversable(object):
-    implements(ITraversable)
 
     def virtual_url_path(self):
         return 'foo'
diff --git a/plone/cachepurging/tests/test_utils.py b/plone/cachepurging/tests/test_utils.py
index aa03a9e..3b8e20b 100644
--- a/plone/cachepurging/tests/test_utils.py
+++ b/plone/cachepurging/tests/test_utils.py
@@ -7,9 +7,11 @@
 from plone.registry.interfaces import IRegistry
 from z3c.caching.interfaces import IPurgePaths
 from zope.component import adapts
+from zope.component import adapter
 from zope.component import provideAdapter
 from zope.component import provideUtility
 from zope.interface import implements
+from zope.interface import implementer
 
 import unittest
 import zope.component.testing
@@ -101,9 +103,9 @@ def test_no_purge_paths(self):
 
     def test_empty_relative_paths(self):
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -120,9 +122,9 @@ def getAbsolutePaths(self):
             [], list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_no_rewriter(self):
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -139,9 +141,9 @@ def getAbsolutePaths(self):
                          list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_test_rewriter(self):
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -154,6 +156,8 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths, name="test1")
 
+        @implementer(IPurgePathRewriter)
+        @adapter(FauxRequest)
         class DefaultRewriter(object):
             implements(IPurgePathRewriter)
             adapts(FauxRequest)
@@ -172,9 +176,9 @@ def __call__(self, path):
                          list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_multiple_purge_paths(self):
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths1(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -187,9 +191,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths1, name="test1")
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths2(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -202,9 +206,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths2, name="test2")
 
+        @implementer(IPurgePathRewriter)
+        @adapter(FauxRequest)
         class DefaultRewriter(object):
-            implements(IPurgePathRewriter)
-            adapts(FauxRequest)
 
             def __init__(self, request):
                 self.request = request
@@ -214,9 +218,19 @@ def __call__(self, path):
 
         provideAdapter(DefaultRewriter)
 
-        self.assertEqual(['/vhm1/foo', '/vhm2/foo', '/vhm1/bar', '/vhm2/bar', '/baz',
-                          '/vhm1/foo/view', '/vhm2/foo/view', '/quux'],
-                         list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            [
+                '/vhm1/foo',
+                '/vhm2/foo',
+                '/vhm1/bar',
+                '/vhm2/bar',
+                '/baz',
+                '/vhm1/foo/view',
+                '/vhm2/foo/view',
+                '/quux'
+            ],
+            list(utils.getPathsToPurge(self.context, self.request))
+        )
 
     def test_rewriter_abort(self):
         class FauxPurgePaths1(object):
@@ -234,9 +248,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths1, name="test1")
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths2(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -249,9 +263,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths2, name="test2")
 
+        @implementer(IPurgePathRewriter)
+        @adapter(FauxRequest)
         class DefaultRewriter(object):
-            implements(IPurgePathRewriter)
-            adapts(FauxRequest)
 
             def __init__(self, request):
                 self.request = request
@@ -261,8 +275,10 @@ def __call__(self, path):
 
         provideAdapter(DefaultRewriter)
 
-        self.assertEqual(['/baz', '/quux'],
-                         list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            ['/baz', '/quux'],
+            list(utils.getPathsToPurge(self.context, self.request))
+        )
 
 
 class TestGetURLsToPurge(unittest.TestCase):
@@ -271,12 +287,26 @@ def test_no_proxies(self):
         self.assertEqual([], list(utils.getURLsToPurge('/foo', [])))
 
     def test_absolute_path(self):
-        self.assertEqual(['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
-                         list(utils.getURLsToPurge('/foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
+        self.assertEqual(
+            ['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
+            list(
+                utils.getURLsToPurge(
+                    '/foo/bar',
+                    ['http://localhost:1234', 'http://localhost:2345/']
+                )
+            )
+        )
 
     def test_relative_path(self):
-        self.assertEqual(['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
-                         list(utils.getURLsToPurge('foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
+        self.assertEqual(
+            ['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
+            list(
+                utils.getURLsToPurge(
+                    'foo/bar',
+                    ['http://localhost:1234', 'http://localhost:2345/']
+                )
+            )
+        )
 
 
 def test_suite():
diff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py
index b0f098f..8bb8575 100644
--- a/plone/cachepurging/tests/test_views.py
+++ b/plone/cachepurging/tests/test_views.py
@@ -9,11 +9,10 @@
 from z3c.caching.interfaces import IPurgeEvent
 from z3c.caching.interfaces import IPurgePaths
 from zope.component import adapter
-from zope.component import adapts
 from zope.component import provideAdapter
 from zope.component import provideHandler
 from zope.component import provideUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 import unittest
 import zope.component.testing
@@ -84,9 +83,9 @@ def setUp(self):
         self.settings.enabled = True
         self.settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -99,8 +98,8 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths, name="test1")
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def purgeSync(self, url, httpVerb='PURGE'):
                 return "200 OK", "cached", None
@@ -117,9 +116,13 @@ def test_disabled(self):
 
     def test_purge(self):
         view = PurgeImmediately(FauxContext(), FauxRequest())
-        self.assertEqual("Purged http://localhost:1234/foo Status 200 OK X-Cache cached Error: None\n"
-                         "Purged http://localhost:1234/bar Status 200 OK X-Cache cached Error: None\n",
-                         view())
+        self.assertEqual(
+            'Purged http://localhost:1234/foo Status 200 OK X-Cache cached '
+            'Error: None\n'
+            'Purged http://localhost:1234/bar Status 200 OK X-Cache cached '
+            'Error: None\n',
+            view()
+        )
 
 
 def test_suite():
diff --git a/setup.py b/setup.py
index 2a20528..5631b7e 100644
--- a/setup.py
+++ b/setup.py
@@ -2,48 +2,49 @@
 
 version = '1.0.12.dev0'
 
-setup(name='plone.cachepurging',
-      version=version,
-      description="Cache purging support for Zope 2 applications",
-      long_description=(open('README.rst').read() + '\n' +
-                        open('CHANGES.rst').read()),
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 4.0",
-          "Framework :: Plone :: 4.1",
-          "Framework :: Plone :: 4.2",
-          "Framework :: Plone :: 4.3",
-          "Framework :: Plone :: 5.0",
-          "Framework :: Plone :: 5.1",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.6",
-          "Programming Language :: Python :: 2.7",
-      ],
-      keywords='plone cache purge',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.cachepurging',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'five.globalrequest',
-          'plone.registry',
-          'z3c.caching',
-          'zope.annotation',
-          'zope.component',
-          'zope.event',
-          'zope.i18nmessageid',
-          'zope.interface',
-          'zope.lifecycleevent',
-          'zope.schema',
-          'zope.testing',
-          'Zope2'
-      ],
-      extras_require={
-          'test': ['plone.app.testing'],
-      },
-      )
+setup(
+    name='plone.cachepurging',
+    version=version,
+    description="Cache purging support for Zope 2 applications",
+    long_description=(open('README.rst').read() + '\n' +
+                      open('CHANGES.rst').read()),
+    classifiers=[
+        'Framework :: Plone',
+        'Framework :: Plone :: 4.0',
+        'Framework :: Plone :: 4.1',
+        'Framework :: Plone :: 4.2',
+        'Framework :: Plone :: 4.3',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.6',
+        'Programming Language :: Python :: 2.7',
+    ],
+    keywords='plone cache purge',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.cachepurging',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'setuptools',
+        'five.globalrequest',
+        'plone.registry',
+        'z3c.caching',
+        'zope.annotation',
+        'zope.component',
+        'zope.event',
+        'zope.i18nmessageid',
+        'zope.interface',
+        'zope.lifecycleevent',
+        'zope.schema',
+        'zope.testing',
+        'Zope2'
+    ],
+    extras_require={
+        'test': ['plone.app.testing'],
+    },
+)


Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2016-09-29T12:44:01+02:00
Author: agitator (agitator) <hpeter@agitator.com>
Commit: https://github.com/plone/plone.cachepurging/commit/27c50b84da3bedf1317d72a2dc3ab4be2bbd2d96

Merge pull request #7 from plone/cleanup

Cleanup

Files changed:
A bootstrap.sh
M .gitignore
M CHANGES.rst
M buildout.cfg
M plone/__init__.py
M plone/cachepurging/browser.py
M plone/cachepurging/hooks.py
M plone/cachepurging/interfaces.py
M plone/cachepurging/paths.py
M plone/cachepurging/purger.py
M plone/cachepurging/rewrite.py
M plone/cachepurging/tests/test_hooks.py
M plone/cachepurging/tests/test_purger.py
M plone/cachepurging/tests/test_rewrite.py
M plone/cachepurging/tests/test_traversable_paths.py
M plone/cachepurging/tests/test_utils.py
M plone/cachepurging/tests/test_views.py
M plone/cachepurging/utils.py
M setup.cfg
M setup.py

diff --git a/.gitignore b/.gitignore
index 206bfb5..be792e4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,6 +7,7 @@
 /var
 /build
 /dist
+/local
 /local.cfg
 .coverage
 /*.egg-info
diff --git a/CHANGES.rst b/CHANGES.rst
index 7fbbf32..336e031 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -4,14 +4,19 @@ Changelog
 1.0.12 (unreleased)
 -------------------
 
-New:
+Breaking changes:
 
 - *add item here*
 
-Fixes:
+New features:
 
 - *add item here*
 
+Bug fixes:
+
+- Code-Style: isort, utf8-headers, zca-decorators, manual cleanup.
+  [jensens]
+
 
 1.0.11 (2016-01-08)
 -------------------
diff --git a/bootstrap.sh b/bootstrap.sh
new file mode 100755
index 0000000..d764997
--- /dev/null
+++ b/bootstrap.sh
@@ -0,0 +1,7 @@
+#!/bin/sh
+
+# see https://community.plone.org/t/not-using-bootstrap-py-as-default/620
+rm -r ./lib ./include ./local ./bin
+virtualenv --clear .
+./bin/pip install --upgrade pip setuptools zc.buildout
+./bin/buildout
diff --git a/buildout.cfg b/buildout.cfg
index e7133b1..52c130a 100644
--- a/buildout.cfg
+++ b/buildout.cfg
@@ -3,7 +3,7 @@ parts = test
         omelette
 versions = versions
 
-extends = http://dist.plone.org/release/4.3.6/versions.cfg
+extends = http://dist.plone.org/release/5.1-latest/versions.cfg
 develop = .
 
 [versions]
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py
index 2d02eb9..af41219 100644
--- a/plone/cachepurging/browser.py
+++ b/plone/cachepurging/browser.py
@@ -1,18 +1,15 @@
-from StringIO import StringIO
-
-from zope.component import getUtility
-from zope.event import notify
-
-from plone.registry.interfaces import IRegistry
-
-from plone.cachepurging.interfaces import IPurger
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
-
-from z3c.caching.purge import Purge
-
+from plone.cachepurging.interfaces import IPurger
 from plone.cachepurging.utils import getPathsToPurge
 from plone.cachepurging.utils import getURLsToPurge
 from plone.cachepurging.utils import isCachePurgingEnabled
+from plone.registry.interfaces import IRegistry
+from StringIO import StringIO
+from z3c.caching.purge import Purge
+from zope.component import getUtility
+from zope.event import notify
+
 
 class QueuePurge(object):
     """Manually initiate a purge
@@ -30,6 +27,7 @@ def __call__(self):
         notify(Purge(self.context))
         return 'Queued'
 
+
 class PurgeImmediately(object):
     """Purge immediately
     """
@@ -53,7 +51,6 @@ def __call__(self):
         for path in getPathsToPurge(self.context, self.request):
             for url in getURLsToPurge(path, settings.cachingProxies):
                 status, xcache, xerror = purger.purgeSync(url)
-                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror
+                print >>out, "Purged", url, "Status", status, "X-Cache", xcache, "Error:", xerror  # noqa
 
         return out.getvalue()
-
diff --git a/plone/cachepurging/hooks.py b/plone/cachepurging/hooks.py
index 9a7f879..7253ed9 100644
--- a/plone/cachepurging/hooks.py
+++ b/plone/cachepurging/hooks.py
@@ -1,23 +1,21 @@
-from zope.component import adapter, queryUtility
-from zope.annotation.interfaces import IAnnotations
-
-from zope.globalrequest import getRequest
-
-from z3c.caching.interfaces import IPurgeEvent
-
-from plone.registry.interfaces import IRegistry
-
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurger
-
 from plone.cachepurging.utils import getPathsToPurge
-from plone.cachepurging.utils import isCachePurgingEnabled
 from plone.cachepurging.utils import getURLsToPurge
-
+from plone.cachepurging.utils import isCachePurgingEnabled
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgeEvent
+from zope.annotation.interfaces import IAnnotations
+from zope.component import adapter
+from zope.component import queryUtility
+from zope.globalrequest import getRequest
 from ZPublisher.interfaces import IPubSuccess
 
+
 KEY = "plone.cachepurging.urls"
 
+
 @adapter(IPurgeEvent)
 def queuePurge(event):
     """Find URLs to purge and queue them for later
@@ -37,6 +35,7 @@ def queuePurge(event):
     paths = annotations.setdefault(KEY, set())
     paths.update(getPathsToPurge(event.object, request))
 
+
 @adapter(IPubSuccess)
 def purge(event):
     """Asynchronously send PURGE requests
diff --git a/plone/cachepurging/interfaces.py b/plone/cachepurging/interfaces.py
index 3a09bd7..b65bab1 100644
--- a/plone/cachepurging/interfaces.py
+++ b/plone/cachepurging/interfaces.py
@@ -1,10 +1,12 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
 from zope import schema
-
 from zope.i18nmessageid import MessageFactory
+from zope.interface import Interface
+
 
 _ = MessageFactory('plone')
 
+
 class ICachePurgingSettings(Interface):
     """Settings used by the purging algorithm.
 
@@ -12,57 +14,58 @@ class ICachePurgingSettings(Interface):
     """
 
     enabled = schema.Bool(
-            title=_(u"Enable purging"),
-            description=_(u"If disabled, no purging will take place"),
-            default=True,
-        )
+        title=_(u"Enable purging"),
+        description=_(u"If disabled, no purging will take place"),
+        default=True,
+    )
 
     cachingProxies = schema.Tuple(
-            title=_(u"Caching proxies"),
-            description=_(u"Provide the URLs of each proxy to which PURGE "
-                          u"requests should be sent."),
-            value_type=schema.URI(),
-        )
+        title=_(u"Caching proxies"),
+        description=_(u"Provide the URLs of each proxy to which PURGE "
+                      u"requests should be sent."),
+        value_type=schema.URI(),
+    )
 
     virtualHosting = schema.Bool(
-            title=_(u"Send PURGE requests with virtual hosting paths"),
-            description=_(u"This option is only relevant if you are using "
-                          u"virtual hosting with Zope's VirtualHostMonster. "
-                          u"This relies on special tokens (VirtualHostBase "
-                          u"and VirtualHostRoot) in the URL to instruct "
-                          u"Zope about the types of URLs that the user sees. "
-                          u"If virtual host URLs are in use and this option "
-                          u"is set, PURGE requests will be sent to the "
-                          u"caching proxy with the virtual hosting tokens "
-                          u"in place. This makes sense if there is a web "
-                          u"server in front of your caching proxy performing "
-                          u"the rewrites necessary to translate a user-"
-                          u"facing URL into a virtual hosting URL, so that "
-                          u"the requests the caching proxy sees have the "
-                          u"rewrite information in them. Conversely, if the "
-                          u"rewrite is done in or behind the caching proxy, "
-                          u"you want to disable this option, so that the "
-                          u"PURGE requests use URLs that match those seen "
-                          u"by the caching proxy as they come from the "
-                          u"client."),
-            required=True,
-            default=False,
-        )
+        title=_(u"Send PURGE requests with virtual hosting paths"),
+        description=_(u"This option is only relevant if you are using "
+                      u"virtual hosting with Zope's VirtualHostMonster. "
+                      u"This relies on special tokens (VirtualHostBase "
+                      u"and VirtualHostRoot) in the URL to instruct "
+                      u"Zope about the types of URLs that the user sees. "
+                      u"If virtual host URLs are in use and this option "
+                      u"is set, PURGE requests will be sent to the "
+                      u"caching proxy with the virtual hosting tokens "
+                      u"in place. This makes sense if there is a web "
+                      u"server in front of your caching proxy performing "
+                      u"the rewrites necessary to translate a user-"
+                      u"facing URL into a virtual hosting URL, so that "
+                      u"the requests the caching proxy sees have the "
+                      u"rewrite information in them. Conversely, if the "
+                      u"rewrite is done in or behind the caching proxy, "
+                      u"you want to disable this option, so that the "
+                      u"PURGE requests use URLs that match those seen "
+                      u"by the caching proxy as they come from the "
+                      u"client."),
+        required=True,
+        default=False,
+    )
 
     domains = schema.Tuple(
-            title=_(u"Domains"),
-            description=_(u"This option is only relevant if you are using "
-                          u"virtual hosting and you have enabled the option "
-                          u"to send PURGE requests with virtual hosting URLs "
-                          u"above. If you your site is served on multiple "
-                          u"domains e.g. http://example.org and "
-                          u"http://www.example.org you may wish to purge "
-                          u"both. If so, list all your domains here"),
-            required=False,
-            default=(),
-            missing_value=(),
-            value_type=schema.URI(),
-        )
+        title=_(u"Domains"),
+        description=_(u"This option is only relevant if you are using "
+                      u"virtual hosting and you have enabled the option "
+                      u"to send PURGE requests with virtual hosting URLs "
+                      u"above. If you your site is served on multiple "
+                      u"domains e.g. http://example.org and "
+                      u"http://www.example.org you may wish to purge "
+                      u"both. If so, list all your domains here"),
+        required=False,
+        default=(),
+        missing_value=(),
+        value_type=schema.URI(),
+    )
+
 
 class IPurgePathRewriter(Interface):
     """Used to rewrite paths for purging. This should be registered as an
@@ -78,6 +81,7 @@ def __call__(path):
         /path/to/view. Return an empty list if there is nothing to purge.
         """
 
+
 class IPurger(Interface):
     """A utility used to manage the purging process.
     """
@@ -106,12 +110,12 @@ def stopThreads(wait=False):
         """
 
     errorHeaders = schema.Tuple(
-            title=u"Error header names",
-            value_type=schema.ASCIILine(),
-            default=('x-squid-error',)
-        )
+        title=u"Error header names",
+        value_type=schema.ASCIILine(),
+        default=('x-squid-error',)
+    )
 
     http_1_1 = schema.Bool(
-            title=u"Use HTTP 1.1 for PURGE request",
-            default=True,
-        )
+        title=u"Use HTTP 1.1 for PURGE request",
+        default=True,
+    )
diff --git a/plone/cachepurging/paths.py b/plone/cachepurging/paths.py
index 2972526..b67c583 100644
--- a/plone/cachepurging/paths.py
+++ b/plone/cachepurging/paths.py
@@ -1,17 +1,16 @@
-from zope.interface import implements
-from zope.component import adapts
-
+# -*- coding: utf-8 -*-
+from OFS.interfaces import ITraversable
 from z3c.caching.interfaces import IPurgePaths
+from zope.component import adapter
+from zope.interface import implementer
 
-from OFS.interfaces import ITraversable
 
+@implementer(IPurgePaths)
+@adapter(ITraversable)
 class TraversablePurgePaths(object):
     """Default purge for OFS.Traversable-style objects
     """
 
-    implements(IPurgePaths)
-    adapts(ITraversable)
-
     def __init__(self, context):
         self.context = context
 
diff --git a/plone/cachepurging/purger.py b/plone/cachepurging/purger.py
index ab69e44..3e298b4 100644
--- a/plone/cachepurging/purger.py
+++ b/plone/cachepurging/purger.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 """The following is borrowed heavily from Products.CMFSquidTool. That code
 is ZPL licensed.
 
@@ -11,6 +12,11 @@
   thread again waits until a connection can be re-established.
 """
 
+from App.config import getConfiguration
+from plone.cachepurging.interfaces import IPurger
+from zope.interface import implementer
+from zope.testing.cleanup import addCleanUp
+
 import atexit
 import httplib
 import logging
@@ -21,10 +27,6 @@
 import time
 import urlparse
 
-from App.config import getConfiguration
-from zope.interface import implements
-
-from plone.cachepurging.interfaces import IPurger
 
 logger = logging.getLogger('plone.cachepurging')
 
@@ -42,29 +44,28 @@ def __init__(self, host, port=None, strict=None, scheme="http", timeout=5):
         else:
             raise ValueError("Invalid scheme '%s'" % scheme)
         httplib.HTTPConnection.__init__(self, host, port, strict,
-            timeout=timeout)
+                                        timeout=timeout)
         self.timeout = timeout
 
     def connect(self):
         if self.scheme == "http":
             httplib.HTTPConnection.connect(self)
         elif self.scheme == "https":
-            import ssl # import here in case python has no ssl support
+            import ssl  # import here in case python has no ssl support
             # Clone of httplib.HTTPSConnection.connect
             sock = socket.create_connection((self.host, self.port),
-                timeout=self.timeout)
+                                            timeout=self.timeout)
             key_file = cert_file = None
             self.sock = ssl.wrap_socket(sock, key_file, cert_file)
         else:
             raise ValueError("Invalid scheme '%s'" % self.scheme)
 
 
+@implementer(IPurger)
 class DefaultPurger(object):
 
-    implements(IPurger)
-
     def __init__(self, factory=Connection, timeout=30, backlog=200,
-            errorHeaders=('x-squid-error', ), http_1_1=True):
+                 errorHeaders=('x-squid-error', ), http_1_1=True):
         self.factory = factory
         self.timeout = timeout
         self.queues = {}
@@ -197,7 +198,7 @@ def _purgeSync(self, conn, url, httpVerb):
         purge_path = urlparse.urlunparse(
             ('', '', path, params, query, fragment))
         logger.debug('making %s request to %s for %s.',
-            httpVerb, host, purge_path)
+                     httpVerb, host, purge_path)
         conn.putrequest(httpVerb, purge_path, skip_accept_encoding=True)
         conn.endheaders()
         resp = conn.getresponse()
@@ -211,7 +212,7 @@ def _purgeSync(self, conn, url, httpVerb):
                 break
         resp.read()
         logger.debug("%s of %s: %s %s",
-            httpVerb, url, resp.status, resp.reason)
+                     httpVerb, url, resp.status, resp.reason)
         return resp, xcache, xerror
 
 
@@ -240,7 +241,7 @@ def run(self):
         try:
             while not self.stopping:
                 item = q.get()
-                if self.stopping or item is None: # Shut down thread signal
+                if self.stopping or item is None:  # Shut down thread signal
                     logger.debug('Stopping worker thread for '
                                  '(%s, %s).' % (self.host, self.scheme))
                     break
@@ -254,12 +255,15 @@ def run(self):
                     # Get a connection.
                     if connection is None:
                         connection = self.getConnection(url)
-                        if connection is None: # stopping
+                        if connection is None:  # stopping
                             break
                     # Got an item, purge it!
                     try:
-                        resp, msg, err = self.producer._purgeSync(connection,
-                                                                 url, httpVerb)
+                        resp, msg, err = self.producer._purgeSync(
+                            connection,
+                            url,
+                            httpVerb
+                        )
                         # worked! See if we can leave the connection open for
                         # the next item we need to process
                         # NOTE: If we make a HTTP 1.0 request to IIS, it
@@ -272,7 +276,7 @@ def run(self):
                         if not self.producer.http_1_1 or resp.will_close:
                             connection.close()
                             connection = None
-                        break # all done with this item!
+                        break  # all done with this item!
 
                     except (httplib.HTTPException, socket.error), e:
                         # All errors 'connection' related errors are treated
@@ -323,7 +327,8 @@ def getConnection(self, url):
                     if self.stopping:
                         break
                     time.sleep(1)
-        return None # must be stopping!
+        return None  # must be stopping!
+
 
 DEFAULT_PURGER = DefaultPurger()
 
@@ -332,6 +337,6 @@ def stopThreads():
     purger = DEFAULT_PURGER
     purger.stopThreads()
 
-from zope.testing.cleanup import addCleanUp
+
 addCleanUp(stopThreads)
 del addCleanUp
diff --git a/plone/cachepurging/rewrite.py b/plone/cachepurging/rewrite.py
index f2360bc..c5e3e8b 100644
--- a/plone/cachepurging/rewrite.py
+++ b/plone/cachepurging/rewrite.py
@@ -1,20 +1,21 @@
-import urlparse
-
-from zope.interface import Interface, implements
-from zope.component import adapts, queryUtility
-
+# -*- coding: utf-8 -*-
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurgePathRewriter
 from plone.registry.interfaces import IRegistry
+from zope.component import adapter
+from zope.component import queryUtility
+from zope.interface import implementer
+from zope.interface import Interface
 
-from plone.cachepurging.interfaces import IPurgePathRewriter
-from plone.cachepurging.interfaces import ICachePurgingSettings
+import urlparse
 
+
+@implementer(IPurgePathRewriter)
+@adapter(Interface)
 class DefaultRewriter(object):
     """Default rewriter, which is aware of virtual hosting
     """
 
-    implements(IPurgePathRewriter)
-    adapts(Interface)
-
     def __init__(self, request):
         self.request = request
 
@@ -43,12 +44,14 @@ def __call__(self, path):
         virtualRootPhysicalPath = request.get('VirtualRootPhysicalPath')
 
         # Make sure request is compliant
-        if (not virtualUrlParts
-                or not virtualRootPhysicalPath
-                or not isinstance(virtualUrlParts, (list, tuple,))
-                or not isinstance(virtualRootPhysicalPath, (list, tuple,))
-                or len(virtualUrlParts) < 2
-                or len(virtualUrlParts) > 3):
+        if (
+            not virtualUrlParts or
+            not virtualRootPhysicalPath or
+            not isinstance(virtualUrlParts, (list, tuple,)) or
+            not isinstance(virtualRootPhysicalPath, (list, tuple,)) or
+            len(virtualUrlParts) < 2 or
+            len(virtualUrlParts) > 3
+        ):
             return [path]
 
         domains = settings.domains
@@ -63,7 +66,8 @@ def __call__(self, path):
         # Prefix, e.g. /_vh_foo/_vh_bar. Clear if we don't have any.
         pathPrefix = len(virtualUrlParts) == 3 and virtualUrlParts[1] or ''
         if pathPrefix:
-            pathPrefix = '/' + '/'.join(['_vh_%s' % p for p in pathPrefix.split('/')])
+            pathPrefix = '/' + \
+                '/'.join(['_vh_%s' % p for p in pathPrefix.split('/')])
 
         # Path, e.g. /front-page
         if len(path) > 0 and not path.startswith('/'):
@@ -73,11 +77,13 @@ def __call__(self, path):
         for domain in domains:
             scheme, host = urlparse.urlparse(domain)[:2]
             paths.append(
-                '/VirtualHostBase/%(scheme)s/%(host)s%(root)s/VirtualHostRoot%(prefix)s%(path)s' % {
-                    'scheme':  scheme,
-                    'host':    host,
-                    'root':    virtualRoot,
-                    'prefix':  pathPrefix,
-                    'path':    path}
-                )
+                '/VirtualHostBase/%(scheme)s/%(host)s%(root)s/'
+                'VirtualHostRoot%(prefix)s%(path)s' % {
+                    'scheme': scheme,
+                    'host': host,
+                    'root': virtualRoot,
+                    'prefix': pathPrefix,
+                    'path': path
+                }
+            )
         return paths
diff --git a/plone/cachepurging/tests/test_hooks.py b/plone/cachepurging/tests/test_hooks.py
index 1024703..9c9d4fc 100644
--- a/plone/cachepurging/tests/test_hooks.py
+++ b/plone/cachepurging/tests/test_hooks.py
@@ -1,43 +1,38 @@
-import unittest
-import zope.component.testing
-
-from zope.interface import implements
-from zope.interface import alsoProvides
-
-from zope.component import adapts
-from zope.component import provideUtility
-from zope.component import provideAdapter
-from zope.component import provideHandler
-
-from zope.event import notify
-
+# -*- coding: utf-8 -*-
+from plone.cachepurging.hooks import purge
+from plone.cachepurging.hooks import queuePurge
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurger
+from plone.registry import Registry
+from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgePaths
+from z3c.caching.purge import Purge
 from zope.annotation.attribute import AttributeAnnotations
 from zope.annotation.interfaces import IAnnotations
 from zope.annotation.interfaces import IAttributeAnnotatable
-
+from zope.component import adapter
+from zope.component import provideAdapter
+from zope.component import provideHandler
+from zope.component import provideUtility
+from zope.event import notify
 from zope.globalrequest import setRequest
+from zope.interface import alsoProvides
+from zope.interface import implementer
+from ZPublisher.pubevents import PubSuccess
 
-from z3c.caching.interfaces import IPurgePaths
-from z3c.caching.purge import Purge
-
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry
-
-from plone.registry.fieldfactory import persistentFieldAdapter
-
-from plone.cachepurging.interfaces import IPurger
-from plone.cachepurging.interfaces import ICachePurgingSettings
-
-from plone.cachepurging.hooks import queuePurge, purge
+import unittest
+import zope.component.testing
 
-from ZPublisher.pubevents import PubSuccess
 
 class FauxContext(dict):
     pass
 
+
 class FauxRequest(dict):
     pass
 
+
 class TestQueueHandler(unittest.TestCase):
 
     def setUp(self):
@@ -60,9 +55,9 @@ def test_no_request(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -94,9 +89,9 @@ def test_request_not_annotatable(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -114,7 +109,6 @@ def getAbsolutePaths(self):
         except:
             self.fail()
 
-
     def test_no_registry(self):
         context = FauxContext()
 
@@ -122,9 +116,9 @@ def test_no_registry(self):
         alsoProvides(request, IAttributeAnnotatable)
         setRequest(request)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -156,9 +150,9 @@ def test_caching_disabled(self):
         settings.enabled = False
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -193,7 +187,7 @@ def test_enabled_no_paths(self):
         notify(Purge(context))
 
         self.assertEqual({'plone.cachepurging.urls': set()},
-                          dict(IAnnotations(request)))
+                         dict(IAnnotations(request)))
 
     def test_enabled(self):
         context = FauxContext()
@@ -210,9 +204,9 @@ def test_enabled(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -228,7 +222,8 @@ def getAbsolutePaths(self):
         notify(Purge(context))
 
         self.assertEqual({'plone.cachepurging.urls': set(['/foo', '/bar'])},
-                          dict(IAnnotations(request)))
+                         dict(IAnnotations(request)))
+
 
 class TestPurgeHandler(unittest.TestCase):
 
@@ -251,8 +246,8 @@ def test_request_not_annotatable(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -279,8 +274,8 @@ def test_no_path_key(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -309,8 +304,8 @@ def test_no_paths(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -329,10 +324,11 @@ def test_no_registry(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -351,7 +347,8 @@ def test_caching_disabled(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
         registry = Registry()
         registry.registerInterface(ICachePurgingSettings)
@@ -361,8 +358,8 @@ def test_caching_disabled(self):
         settings.enabled = False
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -381,7 +378,8 @@ def test_no_purger(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
         registry = Registry()
         registry.registerInterface(ICachePurgingSettings)
@@ -400,7 +398,8 @@ def test_purge(self):
         request = FauxRequest()
         alsoProvides(request, IAttributeAnnotatable)
 
-        IAnnotations(request)['plone.cachepurging.urls'] = set(['/foo', '/bar'])
+        IAnnotations(request)['plone.cachepurging.urls'] = set(
+            ['/foo', '/bar'])
 
         registry = Registry()
         registry.registerInterface(ICachePurgingSettings)
@@ -410,8 +409,8 @@ def test_purge(self):
         settings.enabled = True
         settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def __init__(self):
                 self.purged = []
@@ -424,9 +423,11 @@ def purgeAsync(self, url, httpVerb='PURGE'):
 
         notify(PubSuccess(request))
 
-        self.assertEqual(['http://localhost:1234/foo', 'http://localhost:1234/bar'],
-                          purger.purged)
+        self.assertEqual(
+            ['http://localhost:1234/foo', 'http://localhost:1234/bar'],
+            purger.purged
+        )
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
-
diff --git a/plone/cachepurging/tests/test_purger.py b/plone/cachepurging/tests/test_purger.py
index ffb6422..0e2d719 100644
--- a/plone/cachepurging/tests/test_purger.py
+++ b/plone/cachepurging/tests/test_purger.py
@@ -1,16 +1,18 @@
+# -*- coding: utf-8 -*-
 """This test is borrwed heavily from Products.CMFSquidTool. That code is ZPL
 licensed.
 """
 
+from BaseHTTPServer import BaseHTTPRequestHandler
+from BaseHTTPServer import HTTPServer
+from plone.cachepurging.purger import DefaultPurger
+
 import os
-import threading
-import unittest
 import Queue
+import threading
 import time
+import unittest
 
-from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
-
-from plone.cachepurging.purger import DefaultPurger
 
 # Define a test HTTP server that returns canned responses
 
@@ -30,8 +32,8 @@ def do_PURGE(self):
             print "Unexpected connection from the purge tool"
             print self.command, self.path, self.protocol_version
             for h, v in self.headers.items():
-                print "%s: %s" % (h,v)
-            raise RuntimeError, "Unexpected connection"
+                print "%s: %s" % (h, v)
+            raise RuntimeError('Unexpected connection')
 
         # We may have a function to call to check things.
         validator = nr.get('validator')
@@ -61,6 +63,7 @@ def do_PURGE(self):
         self.end_headers()
         self.wfile.write(data)
 
+
 class TestHTTPServer(HTTPServer):
 
     def __init__(self, address, handler):
@@ -72,6 +75,7 @@ def queue_response(self, **kw):
 
 # Finally the test suites.
 
+
 class TestCase(unittest.TestCase):
 
     def setUp(self):
@@ -87,7 +91,8 @@ def tearDown(self):
                     if self.httpd.response_queue.empty():
                         break
                     time.sleep(0.1)
-                self.assertTrue(self.httpd.response_queue.empty(), "response queue not consumed")
+                self.assertTrue(self.httpd.response_queue.empty(),
+                                "response queue not consumed")
             if not self.purger.stopThreads(wait=True):
                 self.fail("The purge threads did not stop")
         finally:
@@ -114,6 +119,7 @@ def startServer(self, port=SERVER_PORT, start=True):
             t.start()
         return httpd, t
 
+
 class TestSync(TestCase):
 
     def setUp(self):
@@ -135,7 +141,7 @@ def testSimpleSync(self):
     def testHeaders(self):
         headers = {'X-Squid-Error': 'error text',
                    'X-Cache': 'a message',
-        }
+                   }
         self.httpd.queue_response(response=200, headers=headers)
         status, msg, err = self.dispatchURL("/foo")
         self.assertEqual(msg, 'a message')
@@ -147,12 +153,14 @@ def testError(self):
         status, msg, err = self.dispatchURL("/foo")
         self.assertEqual(status, 'ERROR')
 
+
 class TestSyncHTTP10(TestSync):
 
     def setUp(self):
         super(TestSync, self).setUp()
         self.purger.http_1_1 = False
 
+
 class TestAsync(TestCase):
 
     def dispatchURL(self, path, method="PURGE", port=SERVER_PORT):
@@ -181,8 +189,9 @@ def testAsyncError(self):
         self.httpd.queue_response(response=200)
         self.httpd.queue_response(response=None)
         self.httpd.queue_response(response=200)
-        self.dispatchURL("/foo") # will consume first.
-        self.dispatchURL("/bar") # will consume error, then retry
+        self.dispatchURL("/foo")  # will consume first.
+        self.dispatchURL("/bar")  # will consume error, then retry
+
 
 class TestAsyncConnectionFailure(TestCase):
 
@@ -226,6 +235,6 @@ def testConnectionFailure(self):
             time.sleep(0.1)
         # else - our tearDown will complain about the queue
 
+
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
-
diff --git a/plone/cachepurging/tests/test_rewrite.py b/plone/cachepurging/tests/test_rewrite.py
index 1dff885..238bc26 100644
--- a/plone/cachepurging/tests/test_rewrite.py
+++ b/plone/cachepurging/tests/test_rewrite.py
@@ -1,20 +1,20 @@
-import unittest
-import zope.component.testing
-
-from zope.component import provideUtility
-from zope.component import provideAdapter
-
-from plone.registry.interfaces import IRegistry
+# -*- coding: utf-8 -*-
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.rewrite import DefaultRewriter
 from plone.registry import Registry
-
 from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from zope.component import provideAdapter
+from zope.component import provideUtility
+
+import unittest
+import zope.component.testing
 
-from plone.cachepurging.interfaces import ICachePurgingSettings
-from plone.cachepurging.rewrite import DefaultRewriter
 
 class FauxRequest(dict):
     pass
 
+
 class TestRewrite(unittest.TestCase):
 
     def setUp(self):
@@ -25,22 +25,34 @@ def setUp(self):
     def tearDown(self):
         zope.component.testing.tearDown()
 
-    def _prepareVHMRequest(self, path, domain='example.com', root='/plone', prefix='',
-                           protocol='http'):
+    def _prepareVHMRequest(
+        self,
+        path,
+        domain='example.com',
+        root='/plone',
+        prefix='',
+        protocol='http'
+    ):
         translatedPrefix = '/'.join(['_vh_%s' % p for p in prefix.split('/')])
 
         self.request['URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
-        self.request['ACTUAL_URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
+        self.request[
+            'ACTUAL_URL'] = '%s://%s%s%s' % (protocol, domain, prefix, path,)
         self.request['SERVER_URL'] = '%s://%s' % (protocol, domain,)
-        self.request['PATH_INFO'] = '/VirtualHostBase/%s/%s:80%s/VirtualHostRoot%s%s' % (
-            protocol, domain, root, translatedPrefix, path,)
+        self.request['PATH_INFO'] = (
+            '/VirtualHostBase/%s/%s:80%s/'
+            'VirtualHostRoot%s%s' % (
+                protocol, domain, root, translatedPrefix, path,
+            )
+        )
         self.request['VIRTUAL_URL'] = '%s://%s%s' % (protocol, domain, path)
 
         if prefix:
             self.request['VIRTUAL_URL_PARTS'] = (
                 '%s://%s' % (protocol, domain,), prefix[1:], path[1:])
         else:
-            self.request['VIRTUAL_URL_PARTS'] = ('%s://%s' % (protocol, domain,), path[1:])
+            self.request['VIRTUAL_URL_PARTS'] = (
+                '%s://%s' % (protocol, domain,), path[1:])
 
         self.request['VirtualRootPhysicalPath'] = tuple(root.split('/'))
 
@@ -122,7 +134,8 @@ def test_malformed_virtual_url_parts(self):
         self.request['VIRTUAL_URL_PARTS'] = ()
         self.assertEqual(['/foo'], self.rewriter('/foo'))
 
-        self.request['VIRTUAL_URL_PARTS'] = ('http://example.com', '', '/foo', 'x')
+        self.request['VIRTUAL_URL_PARTS'] = (
+            'http://example.com', '', '/foo', 'x')
         self.assertEqual(['/foo'], self.rewriter('/foo'))
 
         self.request['VIRTUAL_URL_PARTS'] = 'foo'
@@ -136,8 +149,10 @@ def test_standard_vhm(self):
         settings.virtualHosting = True
 
         self._prepareVHMRequest('/foo')
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_virtual_root_is_app_root(self):
         registry = Registry()
@@ -148,8 +163,10 @@ def test_virtual_root_is_app_root(self):
 
         self._prepareVHMRequest('/foo', root='/')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_virtual_root_is_deep(self):
         registry = Registry()
@@ -160,8 +177,11 @@ def test_virtual_root_is_deep(self):
 
         self._prepareVHMRequest('/foo', root='/bar/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/bar/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/bar/plone/'
+             'VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_inside_out_hosting(self):
         registry = Registry()
@@ -173,7 +193,8 @@ def test_inside_out_hosting(self):
         self._prepareVHMRequest('/foo', root='/bar/plone', prefix='/foo/bar')
 
         self.assertEqual(
-            ['/VirtualHostBase/http/example.com/bar/plone/VirtualHostRoot/_vh_foo/_vh_bar/foo'],
+            ['/VirtualHostBase/http/example.com/bar/plone/'
+             'VirtualHostRoot/_vh_foo/_vh_bar/foo'],
             self.rewriter('/foo'))
 
     def test_inside_out_hosting_root_empty_path(self):
@@ -186,7 +207,8 @@ def test_inside_out_hosting_root_empty_path(self):
         self._prepareVHMRequest('/', root='/plone', prefix='/plone')
 
         self.assertEqual(
-            ['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/_vh_plone'],
+            ['/VirtualHostBase/http/example.com/plone/'
+             'VirtualHostRoot/_vh_plone'],
             self.rewriter(''))
 
     def test_virtual_path_is_root(self):
@@ -198,8 +220,10 @@ def test_virtual_path_is_root(self):
 
         self._prepareVHMRequest('/', root='/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/'],
-                         self.rewriter('/'))
+        self.assertEqual([
+            '/VirtualHostBase/http/example.com/plone/VirtualHostRoot/'],
+            self.rewriter('/')
+        )
 
     def test_virtual_path_is_empty(self):
         registry = Registry()
@@ -210,8 +234,10 @@ def test_virtual_path_is_empty(self):
 
         self._prepareVHMRequest('', root='/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot'],
-                         self.rewriter(''))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/plone/VirtualHostRoot'],
+            self.rewriter('')
+        )
 
     def test_virtual_path_is_deep(self):
         registry = Registry()
@@ -222,8 +248,11 @@ def test_virtual_path_is_deep(self):
 
         self._prepareVHMRequest('/foo/bar', root='/plone')
 
-        self.assertEqual(['/VirtualHostBase/http/example.com/plone/VirtualHostRoot/foo/bar'],
-                         self.rewriter('/foo/bar'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com/plone/'
+             'VirtualHostRoot/foo/bar'],
+            self.rewriter('/foo/bar')
+        )
 
     def test_nonstandard_port(self):
         registry = Registry()
@@ -233,8 +262,10 @@ def test_nonstandard_port(self):
         settings.virtualHosting = True
 
         self._prepareVHMRequest('/foo', domain='example.com:81')
-        self.assertEqual(['/VirtualHostBase/http/example.com:81/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self.assertEqual(
+            ['/VirtualHostBase/http/example.com:81/plone/VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_https(self):
         registry = Registry()
@@ -243,9 +274,13 @@ def test_https(self):
         settings = registry.forInterface(ICachePurgingSettings)
         settings.virtualHosting = True
 
-        self._prepareVHMRequest('/foo', domain='example.com:81', protocol='https')
-        self.assertEqual(['/VirtualHostBase/https/example.com:81/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self._prepareVHMRequest(
+            '/foo', domain='example.com:81', protocol='https')
+        self.assertEqual(
+            ['/VirtualHostBase/https/example.com:81/plone/'
+             'VirtualHostRoot/foo'],
+            self.rewriter('/foo')
+        )
 
     def test_domains(self):
         registry = Registry()
@@ -255,10 +290,17 @@ def test_domains(self):
         settings.virtualHosting = True
         settings.domains = ('http://example.org:81', 'https://example.com:82')
 
-        self._prepareVHMRequest('/foo', domain='example.com:81', protocol='https')
-        self.assertEqual(['/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/foo',
-                          '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self._prepareVHMRequest(
+            '/foo', domain='example.com:81', protocol='https')
+        self.assertEqual(
+            [
+                '/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/'
+                'foo',
+                '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/'
+                'foo'
+            ],
+            self.rewriter('/foo')
+        )
 
     def test_domains_w_different_path_in_request(self):
         registry = Registry()
@@ -268,10 +310,18 @@ def test_domains_w_different_path_in_request(self):
         settings.virtualHosting = True
         settings.domains = ('http://example.org:81', 'https://example.com:82')
 
-        self._prepareVHMRequest('/bar', domain='example.com:81', protocol='https')
-        self.assertEqual(['/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/foo',
-                          '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/foo'],
-                         self.rewriter('/foo'))
+        self._prepareVHMRequest(
+            '/bar', domain='example.com:81', protocol='https')
+        self.assertEqual(
+            [
+                '/VirtualHostBase/http/example.org:81/plone/VirtualHostRoot/'
+                'foo',
+                '/VirtualHostBase/https/example.com:82/plone/VirtualHostRoot/'
+                'foo'
+            ],
+            self.rewriter('/foo')
+        )
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_traversable_paths.py b/plone/cachepurging/tests/test_traversable_paths.py
index 88c3d34..cb5fcec 100644
--- a/plone/cachepurging/tests/test_traversable_paths.py
+++ b/plone/cachepurging/tests/test_traversable_paths.py
@@ -1,16 +1,18 @@
-import unittest
+# -*- coding: utf-8 -*-
+from OFS.interfaces import ITraversable
+from plone.cachepurging.paths import TraversablePurgePaths
+from zope.interface import implementer
 
-from zope.interface import implements
+import unittest
 
-from plone.cachepurging.paths import TraversablePurgePaths
-from OFS.interfaces import ITraversable
 
+@implementer(ITraversable)
 class FauxTraversable(object):
-    implements(ITraversable)
 
     def virtual_url_path(self):
         return 'foo'
 
+
 class TestTraversablePaths(unittest.TestCase):
 
     def test_traversable_paths(self):
@@ -21,5 +23,6 @@ def test_traversable_paths(self):
         self.assertEqual(['/foo'], paths.getRelativePaths())
         self.assertEqual([], paths.getAbsolutePaths())
 
+
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_utils.py b/plone/cachepurging/tests/test_utils.py
index ba3d603..3b8e20b 100644
--- a/plone/cachepurging/tests/test_utils.py
+++ b/plone/cachepurging/tests/test_utils.py
@@ -1,29 +1,30 @@
-import unittest
-import zope.component.testing
-
-from zope.interface import implements
-from zope.component import provideUtility
-from zope.component import provideAdapter
-from zope.component import adapts
-
-from z3c.caching.interfaces import IPurgePaths
-
-from plone.registry.interfaces import IRegistry
+# -*- coding: utf-8 -*-
+from plone.cachepurging import utils
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurgePathRewriter
 from plone.registry import Registry
-
 from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgePaths
+from zope.component import adapts
+from zope.component import adapter
+from zope.component import provideAdapter
+from zope.component import provideUtility
+from zope.interface import implements
+from zope.interface import implementer
 
-from plone.cachepurging.interfaces import ICachePurgingSettings
-from plone.cachepurging.interfaces import IPurgePathRewriter
+import unittest
+import zope.component.testing
 
-from plone.cachepurging import utils
 
 class FauxContext(object):
     pass
 
+
 class FauxRequest(dict):
     pass
 
+
 class TestIsCachingEnabled(unittest.TestCase):
 
     def setUp(self):
@@ -86,6 +87,7 @@ def test_passed_registry(self):
         self.assertEqual(False, utils.isCachePurgingEnabled())
         self.assertEqual(True, utils.isCachePurgingEnabled(registry))
 
+
 class TestGetPathsToPurge(unittest.TestCase):
 
     def setUp(self):
@@ -96,13 +98,14 @@ def tearDown(self):
         zope.component.testing.tearDown()
 
     def test_no_purge_paths(self):
-        self.assertEqual([], list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            [], list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_empty_relative_paths(self):
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -115,12 +118,13 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths, name="test1")
 
-        self.assertEqual([], list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            [], list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_no_rewriter(self):
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -134,12 +138,12 @@ def getAbsolutePaths(self):
         provideAdapter(FauxPurgePaths, name="test1")
 
         self.assertEqual(['/foo', '/bar', '/baz'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+                         list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_test_rewriter(self):
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -152,6 +156,8 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths, name="test1")
 
+        @implementer(IPurgePathRewriter)
+        @adapter(FauxRequest)
         class DefaultRewriter(object):
             implements(IPurgePathRewriter)
             adapts(FauxRequest)
@@ -165,14 +171,14 @@ def __call__(self, path):
         provideAdapter(DefaultRewriter)
 
         self.assertEqual(['/vhm1/foo', '/vhm2/foo',
-                           '/vhm1/bar', '/vhm2/bar',
-                           '/baz'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+                          '/vhm1/bar', '/vhm2/bar',
+                          '/baz'],
+                         list(utils.getPathsToPurge(self.context, self.request)))
 
     def test_multiple_purge_paths(self):
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths1(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -185,9 +191,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths1, name="test1")
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths2(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -200,9 +206,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths2, name="test2")
 
+        @implementer(IPurgePathRewriter)
+        @adapter(FauxRequest)
         class DefaultRewriter(object):
-            implements(IPurgePathRewriter)
-            adapts(FauxRequest)
 
             def __init__(self, request):
                 self.request = request
@@ -212,9 +218,19 @@ def __call__(self, path):
 
         provideAdapter(DefaultRewriter)
 
-        self.assertEqual(['/vhm1/foo', '/vhm2/foo', '/vhm1/bar', '/vhm2/bar', '/baz',
-                           '/vhm1/foo/view', '/vhm2/foo/view', '/quux'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            [
+                '/vhm1/foo',
+                '/vhm2/foo',
+                '/vhm1/bar',
+                '/vhm2/bar',
+                '/baz',
+                '/vhm1/foo/view',
+                '/vhm2/foo/view',
+                '/quux'
+            ],
+            list(utils.getPathsToPurge(self.context, self.request))
+        )
 
     def test_rewriter_abort(self):
         class FauxPurgePaths1(object):
@@ -232,9 +248,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths1, name="test1")
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths2(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -247,9 +263,9 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths2, name="test2")
 
+        @implementer(IPurgePathRewriter)
+        @adapter(FauxRequest)
         class DefaultRewriter(object):
-            implements(IPurgePathRewriter)
-            adapts(FauxRequest)
 
             def __init__(self, request):
                 self.request = request
@@ -259,8 +275,11 @@ def __call__(self, path):
 
         provideAdapter(DefaultRewriter)
 
-        self.assertEqual(['/baz', '/quux'],
-            list(utils.getPathsToPurge(self.context, self.request)))
+        self.assertEqual(
+            ['/baz', '/quux'],
+            list(utils.getPathsToPurge(self.context, self.request))
+        )
+
 
 class TestGetURLsToPurge(unittest.TestCase):
 
@@ -268,12 +287,27 @@ def test_no_proxies(self):
         self.assertEqual([], list(utils.getURLsToPurge('/foo', [])))
 
     def test_absolute_path(self):
-        self.assertEqual(['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
-            list(utils.getURLsToPurge('/foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
+        self.assertEqual(
+            ['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
+            list(
+                utils.getURLsToPurge(
+                    '/foo/bar',
+                    ['http://localhost:1234', 'http://localhost:2345/']
+                )
+            )
+        )
 
     def test_relative_path(self):
-        self.assertEqual(['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
-            list(utils.getURLsToPurge('foo/bar', ['http://localhost:1234', 'http://localhost:2345/'])))
+        self.assertEqual(
+            ['http://localhost:1234/foo/bar', 'http://localhost:2345/foo/bar'],
+            list(
+                utils.getURLsToPurge(
+                    'foo/bar',
+                    ['http://localhost:1234', 'http://localhost:2345/']
+                )
+            )
+        )
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py
index 41d7c0b..8bb8575 100644
--- a/plone/cachepurging/tests/test_views.py
+++ b/plone/cachepurging/tests/test_views.py
@@ -1,32 +1,31 @@
-import unittest
-import zope.component.testing
-
-from zope.interface import implements
-from zope.component import adapts
+# -*- coding: utf-8 -*-
+from plone.cachepurging.browser import PurgeImmediately
+from plone.cachepurging.browser import QueuePurge
+from plone.cachepurging.interfaces import ICachePurgingSettings
+from plone.cachepurging.interfaces import IPurger
+from plone.registry import Registry
+from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgeEvent
+from z3c.caching.interfaces import IPurgePaths
 from zope.component import adapter
-from zope.component import provideUtility
 from zope.component import provideAdapter
 from zope.component import provideHandler
+from zope.component import provideUtility
+from zope.interface import implementer
 
-from z3c.caching.interfaces import IPurgePaths
-from z3c.caching.interfaces import IPurgeEvent
-
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry
-
-from plone.registry.fieldfactory import persistentFieldAdapter
-
-from plone.cachepurging.interfaces import IPurger
-from plone.cachepurging.interfaces import ICachePurgingSettings
+import unittest
+import zope.component.testing
 
-from plone.cachepurging.browser import QueuePurge, PurgeImmediately
 
 class FauxContext(object):
     pass
 
+
 class FauxRequest(dict):
     pass
 
+
 class Handler(object):
 
     def __init__(self):
@@ -36,6 +35,7 @@ def __init__(self):
     def handler(self, event):
         self.invocations.append(event)
 
+
 class TestQueuePurge(unittest.TestCase):
 
     def setUp(self):
@@ -70,6 +70,7 @@ def test_enabled(self):
         self.assertEqual(1, len(self.handler.invocations))
         self.assertTrue(self.handler.invocations[0].object is context)
 
+
 class TestPurgeImmediately(unittest.TestCase):
 
     def setUp(self):
@@ -82,9 +83,9 @@ def setUp(self):
         self.settings.enabled = True
         self.settings.cachingProxies = ('http://localhost:1234',)
 
+        @implementer(IPurgePaths)
+        @adapter(FauxContext)
         class FauxPurgePaths(object):
-            implements(IPurgePaths)
-            adapts(FauxContext)
 
             def __init__(self, context):
                 self.context = context
@@ -97,8 +98,8 @@ def getAbsolutePaths(self):
 
         provideAdapter(FauxPurgePaths, name="test1")
 
+        @implementer(IPurger)
         class FauxPurger(object):
-            implements(IPurger)
 
             def purgeSync(self, url, httpVerb='PURGE'):
                 return "200 OK", "cached", None
@@ -115,9 +116,14 @@ def test_disabled(self):
 
     def test_purge(self):
         view = PurgeImmediately(FauxContext(), FauxRequest())
-        self.assertEqual("Purged http://localhost:1234/foo Status 200 OK X-Cache cached Error: None\n"
-                          "Purged http://localhost:1234/bar Status 200 OK X-Cache cached Error: None\n",
-                          view())
+        self.assertEqual(
+            'Purged http://localhost:1234/foo Status 200 OK X-Cache cached '
+            'Error: None\n'
+            'Purged http://localhost:1234/bar Status 200 OK X-Cache cached '
+            'Error: None\n',
+            view()
+        )
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/cachepurging/utils.py b/plone/cachepurging/utils.py
index d58d3fe..e323f0b 100644
--- a/plone/cachepurging/utils.py
+++ b/plone/cachepurging/utils.py
@@ -1,12 +1,11 @@
-from zope.component import queryUtility
-from zope.component import getAdapters
-
-from z3c.caching.interfaces import IPurgePaths
-
-from plone.registry.interfaces import IRegistry
-
+# -*- coding: utf-8 -*-
 from plone.cachepurging.interfaces import ICachePurgingSettings
 from plone.cachepurging.interfaces import IPurgePathRewriter
+from plone.registry.interfaces import IRegistry
+from z3c.caching.interfaces import IPurgePaths
+from zope.component import getAdapters
+from zope.component import queryUtility
+
 
 def isCachePurgingEnabled(registry=None):
     """Return True if caching is enabled
@@ -20,6 +19,7 @@ def isCachePurgingEnabled(registry=None):
     settings = registry.forInterface(ICachePurgingSettings, check=False)
     return (settings.enabled and bool(settings.cachingProxies))
 
+
 def getPathsToPurge(context, request):
     """Given the current request and an object, look up paths to purge for
     the object and yield them one by one. An IPurgePathRewriter adapter may
@@ -36,7 +36,7 @@ def getPathsToPurge(context, request):
                 if rewriter is None:
                     yield relativePath
                 else:
-                    rewrittenPaths = rewriter(relativePath) or [] # None -> []
+                    rewrittenPaths = rewriter(relativePath) or []  # None -> []
                     for rewrittenPath in rewrittenPaths:
                         yield rewrittenPath
 
@@ -46,6 +46,7 @@ def getPathsToPurge(context, request):
             for absolutePath in absolutePaths:
                 yield absolutePath
 
+
 def getURLsToPurge(path, proxies):
     """Yield full purge URLs for a given path, taking the caching proxies
     listed in the registry into account.
diff --git a/setup.cfg b/setup.cfg
index 8263512..35fdb6d 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -2,3 +2,10 @@
 ignore =
     *.cfg
     bootstrap.py
+
+[isort]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
diff --git a/setup.py b/setup.py
index 2a20528..5631b7e 100644
--- a/setup.py
+++ b/setup.py
@@ -2,48 +2,49 @@
 
 version = '1.0.12.dev0'
 
-setup(name='plone.cachepurging',
-      version=version,
-      description="Cache purging support for Zope 2 applications",
-      long_description=(open('README.rst').read() + '\n' +
-                        open('CHANGES.rst').read()),
-      classifiers=[
-          "Framework :: Plone",
-          "Framework :: Plone :: 4.0",
-          "Framework :: Plone :: 4.1",
-          "Framework :: Plone :: 4.2",
-          "Framework :: Plone :: 4.3",
-          "Framework :: Plone :: 5.0",
-          "Framework :: Plone :: 5.1",
-          "Programming Language :: Python",
-          "Programming Language :: Python :: 2.6",
-          "Programming Language :: Python :: 2.7",
-      ],
-      keywords='plone cache purge',
-      author='Plone Foundation',
-      author_email='plone-developers@lists.sourceforge.net',
-      url='https://pypi.python.org/pypi/plone.cachepurging',
-      license='GPL version 2',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'five.globalrequest',
-          'plone.registry',
-          'z3c.caching',
-          'zope.annotation',
-          'zope.component',
-          'zope.event',
-          'zope.i18nmessageid',
-          'zope.interface',
-          'zope.lifecycleevent',
-          'zope.schema',
-          'zope.testing',
-          'Zope2'
-      ],
-      extras_require={
-          'test': ['plone.app.testing'],
-      },
-      )
+setup(
+    name='plone.cachepurging',
+    version=version,
+    description="Cache purging support for Zope 2 applications",
+    long_description=(open('README.rst').read() + '\n' +
+                      open('CHANGES.rst').read()),
+    classifiers=[
+        'Framework :: Plone',
+        'Framework :: Plone :: 4.0',
+        'Framework :: Plone :: 4.1',
+        'Framework :: Plone :: 4.2',
+        'Framework :: Plone :: 4.3',
+        'Framework :: Plone :: 5.0',
+        'Framework :: Plone :: 5.1',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.6',
+        'Programming Language :: Python :: 2.7',
+    ],
+    keywords='plone cache purge',
+    author='Plone Foundation',
+    author_email='plone-developers@lists.sourceforge.net',
+    url='https://pypi.python.org/pypi/plone.cachepurging',
+    license='GPL version 2',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'setuptools',
+        'five.globalrequest',
+        'plone.registry',
+        'z3c.caching',
+        'zope.annotation',
+        'zope.component',
+        'zope.event',
+        'zope.i18nmessageid',
+        'zope.interface',
+        'zope.lifecycleevent',
+        'zope.schema',
+        'zope.testing',
+        'Zope2'
+    ],
+    extras_require={
+        'test': ['plone.app.testing'],
+    },
+)


