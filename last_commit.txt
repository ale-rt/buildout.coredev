Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2016-08-30T23:59:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/764b910def3461bc70784231a4b4b27f1bf98db1

Apply security hotfix 20160830 for isURLInPortal.

Files changed:
M CHANGES.rst
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/tests/testURLTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3237a02..0d64d6c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,7 +19,7 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for ``isURLInPortal``.  [maurits]
 
 
 5.0.6rc1 (2016-08-23)
diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index 13cc40a..17c7cd3 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -32,8 +32,12 @@ def isURLInPortal(self, url, context=None):
 
         # sanitize url
         url = re.sub('^[\x00-\x20]+', '', url).strip()
-        if ('<script' in url or '%3Cscript' in url or 'javascript:' in url or
-                'javascript%3A' in url):
+        cmp_url = url.lower()
+        if ('\\\\' in cmp_url or
+                '<script' in cmp_url or
+                '%3cscript' in cmp_url or
+                'javascript:' in cmp_url or
+                'javascript%3a' in cmp_url):
             return False
 
         p_url = self()
diff --git a/Products/CMFPlone/tests/testURLTool.py b/Products/CMFPlone/tests/testURLTool.py
index bd25393..afb4919 100644
--- a/Products/CMFPlone/tests/testURLTool.py
+++ b/Products/CMFPlone/tests/testURLTool.py
@@ -54,6 +54,11 @@ def _makeOne(self, *args, **kw):
         return url_tool.__of__(self.site)
 
     def test_isURLInPortal(self):
+        # First test what the absolute url of the site is, otherwise these
+        # tests look really weird.  Apparently our domain is www.foobar.com.
+        self.assertEqual(self.site.absolute_url(),
+                         'http://www.foobar.com/bar/foo')
+
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertTrue(iURLiP('http://www.foobar.com/bar/foo/folder'))
@@ -112,11 +117,21 @@ def test_script_tag_url_not_in_portal(self):
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertFalse(iURLiP('<script>alert("hi");</script>'))
+        self.assertFalse(iURLiP('<sCript>alert("hi");</script>'))
         self.assertFalse(
             iURLiP('%3Cscript%3Ealert(%22hi%22)%3B%3C%2Fscript%3E'))
+        self.assertFalse(
+            iURLiP('%3CsCript%3Ealert(%22hi%22)%3B%3C%2Fscript%3E'))
 
     def test_inline_url_not_in_portal(self):
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertFalse(iURLiP('javascript%3Aalert(3)'))
+        self.assertFalse(iURLiP('jaVascript%3Aalert(3)'))
         self.assertFalse(iURLiP('javascript:alert(3)'))
+        self.assertFalse(iURLiP('jaVascript:alert(3)'))
+
+    def test_double_back_slash(self):
+        url_tool = self._makeOne()
+        iURLiP = url_tool.isURLInPortal
+        self.assertFalse(iURLiP('\\\\www.example.com'))


Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2016-08-31T00:04:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/e95d4537abb3ef32f963769544f18fd2589ce5b4

Apply security hotfix 20160830 for @@plone-root-login.

Files changed:
A Products/CMFPlone/tests/testBrowserAdmin.py
M CHANGES.rst
M Products/CMFPlone/browser/admin.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 0d64d6c..5572190 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,6 +19,8 @@ New features:
 
 Bug fixes:
 
+- Apply security hotfix 20160830 for ``@@plone-root-login``.  [maurits]
+
 - Apply security hotfix 20160830 for ``isURLInPortal``.  [maurits]
 
 
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index 85f85e8..47927c4 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -16,6 +16,8 @@
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.authenticator import check as checkCSRF
 from plone.protect.interfaces import IDisableCSRFProtection
+from urlparse import urljoin
+from urlparse import urlparse
 from zope.component import adapts
 from zope.component import getAllUtilitiesRegisteredFor
 from zope.component import getUtility
@@ -90,6 +92,16 @@ class RootLoginRedirect(BrowserView):
     """
 
     def __call__(self, came_from=None):
+        if came_from is not None:
+            # see if this is a relative url or an absolute
+            if len(urlparse(came_from)[1]) == 0:
+                # No host specified, so url is relative.  Get an absolute url.
+                # Note: '\\domain.org' is not recognised as host, which is good.
+                came_from = urljoin(self.context.absolute_url() + '/', came_from)
+            elif not came_from.startswith(self.context.absolute_url()):
+                # Note: we cannot use portal_url.isURLInPortal here, because we are
+                # not in a Plone portal, but in the Zope root.
+                came_from = None
         if came_from is None:
             came_from = self.context.absolute_url()
         self.request.response.redirect(came_from)
diff --git a/Products/CMFPlone/tests/testBrowserAdmin.py b/Products/CMFPlone/tests/testBrowserAdmin.py
new file mode 100644
index 0000000..22ce9b8
--- /dev/null
+++ b/Products/CMFPlone/tests/testBrowserAdmin.py
@@ -0,0 +1,43 @@
+from AccessControl import getSecurityManager
+from AccessControl import Permissions
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFPlone.tests import PloneTestCase
+from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin
+
+import os
+import urlparse
+
+
+class TestPloneRootLoginURL(PloneTestCase.FunctionalTestCase):
+
+    def test_normal_redirect(self):
+        url = '@@plone-root-login?came_from=%s' % self.portal.absolute_url()
+        response = self.publish(
+            url,
+            basic='%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),
+            handle_errors=False,
+        )
+        self.assertNotEqual(response.headers.get('location'), None)
+        self.assertEqual(response.headers.get('location'),
+                         self.portal.absolute_url())
+
+    def test_attacker_redirect(self):
+        attackers = (
+            'http://attacker.com',
+            '\\attacker.com',
+        )
+        for attacker in attackers:
+            url = '@@plone-root-login?came_from=%s' % attacker
+            response = self.publish(
+                url,
+                basic='%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),
+                handle_errors=False,
+            )
+            self.assertNotEqual(response.headers.get('location'), None)
+            self.assertNotEqual(response.headers.get('location'), attacker)
+            # Whatever the url is, it starts with the Zope root url.
+            self.assertTrue(response.headers.get('location').startswith(
+                self.app.absolute_url()), response.headers.get('location'))


Repository: Products.CMFPlone


Branch: refs/heads/5.0.x
Date: 2016-08-31T11:14:27+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3a5394c299218ef72f42e77dd6426ac1198ffa27

Merge pull request #1737 from plone/apply-hotfix-20168030-50

Apply hotfix 20168030 [5.0]

Files changed:
A Products/CMFPlone/tests/testBrowserAdmin.py
M CHANGES.rst
M Products/CMFPlone/URLTool.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/tests/testURLTool.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3237a02..5572190 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,7 +19,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for ``@@plone-root-login``.  [maurits]
+
+- Apply security hotfix 20160830 for ``isURLInPortal``.  [maurits]
 
 
 5.0.6rc1 (2016-08-23)
diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py
index 13cc40a..17c7cd3 100644
--- a/Products/CMFPlone/URLTool.py
+++ b/Products/CMFPlone/URLTool.py
@@ -32,8 +32,12 @@ def isURLInPortal(self, url, context=None):
 
         # sanitize url
         url = re.sub('^[\x00-\x20]+', '', url).strip()
-        if ('<script' in url or '%3Cscript' in url or 'javascript:' in url or
-                'javascript%3A' in url):
+        cmp_url = url.lower()
+        if ('\\\\' in cmp_url or
+                '<script' in cmp_url or
+                '%3cscript' in cmp_url or
+                'javascript:' in cmp_url or
+                'javascript%3a' in cmp_url):
             return False
 
         p_url = self()
diff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py
index 85f85e8..47927c4 100644
--- a/Products/CMFPlone/browser/admin.py
+++ b/Products/CMFPlone/browser/admin.py
@@ -16,6 +16,8 @@
 from plone.keyring.interfaces import IKeyManager
 from plone.protect.authenticator import check as checkCSRF
 from plone.protect.interfaces import IDisableCSRFProtection
+from urlparse import urljoin
+from urlparse import urlparse
 from zope.component import adapts
 from zope.component import getAllUtilitiesRegisteredFor
 from zope.component import getUtility
@@ -90,6 +92,16 @@ class RootLoginRedirect(BrowserView):
     """
 
     def __call__(self, came_from=None):
+        if came_from is not None:
+            # see if this is a relative url or an absolute
+            if len(urlparse(came_from)[1]) == 0:
+                # No host specified, so url is relative.  Get an absolute url.
+                # Note: '\\domain.org' is not recognised as host, which is good.
+                came_from = urljoin(self.context.absolute_url() + '/', came_from)
+            elif not came_from.startswith(self.context.absolute_url()):
+                # Note: we cannot use portal_url.isURLInPortal here, because we are
+                # not in a Plone portal, but in the Zope root.
+                came_from = None
         if came_from is None:
             came_from = self.context.absolute_url()
         self.request.response.redirect(came_from)
diff --git a/Products/CMFPlone/tests/testBrowserAdmin.py b/Products/CMFPlone/tests/testBrowserAdmin.py
new file mode 100644
index 0000000..22ce9b8
--- /dev/null
+++ b/Products/CMFPlone/tests/testBrowserAdmin.py
@@ -0,0 +1,43 @@
+from AccessControl import getSecurityManager
+from AccessControl import Permissions
+from plone.app.testing import SITE_OWNER_NAME
+from plone.app.testing import SITE_OWNER_PASSWORD
+from Products.CMFCore.permissions import AddPortalContent
+from Products.CMFCore.permissions import ModifyPortalContent
+from Products.CMFPlone.tests import PloneTestCase
+from Products.PluggableAuthService.interfaces.plugins import IChallengePlugin
+
+import os
+import urlparse
+
+
+class TestPloneRootLoginURL(PloneTestCase.FunctionalTestCase):
+
+    def test_normal_redirect(self):
+        url = '@@plone-root-login?came_from=%s' % self.portal.absolute_url()
+        response = self.publish(
+            url,
+            basic='%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),
+            handle_errors=False,
+        )
+        self.assertNotEqual(response.headers.get('location'), None)
+        self.assertEqual(response.headers.get('location'),
+                         self.portal.absolute_url())
+
+    def test_attacker_redirect(self):
+        attackers = (
+            'http://attacker.com',
+            '\\attacker.com',
+        )
+        for attacker in attackers:
+            url = '@@plone-root-login?came_from=%s' % attacker
+            response = self.publish(
+                url,
+                basic='%s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),
+                handle_errors=False,
+            )
+            self.assertNotEqual(response.headers.get('location'), None)
+            self.assertNotEqual(response.headers.get('location'), attacker)
+            # Whatever the url is, it starts with the Zope root url.
+            self.assertTrue(response.headers.get('location').startswith(
+                self.app.absolute_url()), response.headers.get('location'))
diff --git a/Products/CMFPlone/tests/testURLTool.py b/Products/CMFPlone/tests/testURLTool.py
index bd25393..afb4919 100644
--- a/Products/CMFPlone/tests/testURLTool.py
+++ b/Products/CMFPlone/tests/testURLTool.py
@@ -54,6 +54,11 @@ def _makeOne(self, *args, **kw):
         return url_tool.__of__(self.site)
 
     def test_isURLInPortal(self):
+        # First test what the absolute url of the site is, otherwise these
+        # tests look really weird.  Apparently our domain is www.foobar.com.
+        self.assertEqual(self.site.absolute_url(),
+                         'http://www.foobar.com/bar/foo')
+
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertTrue(iURLiP('http://www.foobar.com/bar/foo/folder'))
@@ -112,11 +117,21 @@ def test_script_tag_url_not_in_portal(self):
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertFalse(iURLiP('<script>alert("hi");</script>'))
+        self.assertFalse(iURLiP('<sCript>alert("hi");</script>'))
         self.assertFalse(
             iURLiP('%3Cscript%3Ealert(%22hi%22)%3B%3C%2Fscript%3E'))
+        self.assertFalse(
+            iURLiP('%3CsCript%3Ealert(%22hi%22)%3B%3C%2Fscript%3E'))
 
     def test_inline_url_not_in_portal(self):
         url_tool = self._makeOne()
         iURLiP = url_tool.isURLInPortal
         self.assertFalse(iURLiP('javascript%3Aalert(3)'))
+        self.assertFalse(iURLiP('jaVascript%3Aalert(3)'))
         self.assertFalse(iURLiP('javascript:alert(3)'))
+        self.assertFalse(iURLiP('jaVascript:alert(3)'))
+
+    def test_double_back_slash(self):
+        url_tool = self._makeOne()
+        iURLiP = url_tool.isURLInPortal
+        self.assertFalse(iURLiP('\\\\www.example.com'))


