Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2016-12-19T18:22:17+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.schemaeditor/commit/4f473bf88d9abe169d58f5a1552c2908772d0502

rename doctest .txt to .rst

Files changed:
A plone/schemaeditor/tests/choice.rst
A plone/schemaeditor/tests/editing.rst
A plone/schemaeditor/tests/extending.rst
A plone/schemaeditor/tests/field_schemata.rst
A plone/schemaeditor/tests/minmax.rst
M plone/schemaeditor/tests/tests.py
D plone/schemaeditor/tests/choice.txt
D plone/schemaeditor/tests/editing.txt
D plone/schemaeditor/tests/extending.txt
D plone/schemaeditor/tests/field_schemata.txt
D plone/schemaeditor/tests/minmax.txt

diff --git a/plone/schemaeditor/tests/choice.rst b/plone/schemaeditor/tests/choice.rst
new file mode 100644
index 0000000..0106719
--- /dev/null
+++ b/plone/schemaeditor/tests/choice.rst
@@ -0,0 +1,215 @@
+.. -*-doctest-*-
+
+==========================================
+Choice Fields with Vocabularies or Sources
+==========================================
+
+The schema editor allows the user to add Choice fields while also
+specifying a vocabulary or source of the values which can be
+selected.
+
+Log in as a user who can edit content type schemata and open the
+schema editor.
+
+    >>> user = app.acl_users.userFolderAddUser(
+    ...     'root', 'secret', ['Manager'], [])
+
+    >>> from Products.Five import testbrowser
+    >>> browser = testbrowser.Browser()
+    >>> browser.handleErrors = False
+    >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+Open the schema editor in the browser.
+
+    >>> portal_url = 'http://nohost'
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+Add a Choice field.
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Country'
+    >>> browser.getControl('Short Name').value = 'country'
+    >>> browser.getControl('Field type').getControl(
+    ...     value='label_choice_field').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on Choice]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Open the new fields edit form.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='country').click()
+
+The edit form for choice fields includes a widget for specifying the
+vocabulary.
+
+    >>> ctl = browser.getControl('Possible values')
+    >>> ctl
+    <Control name='form.widgets.values' type='textarea'>
+
+If duplicate values are entered an error is raised.
+
+    >>> ctl.value = '\n'.join(
+    ...     ['Alaska', 'Russia', 'United States', 'United States',
+    ...      'Other'])
+    >>> browser.getControl('Save').click()
+    >>> print browser.contents
+    <...
+      <div class="error">The 'United States' vocabulary value conflicts with 'United States'.</div>
+    ...
+
+Enter valid values and save the field settings.
+
+    >>> browser.getControl('Possible values').value = '\n'.join(
+    ...     ['Alaska', 'Russia', 'United States', "C\xc3\xb4te d'Ivoire", 'Other'])
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Choice]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+When the edit form for the content type is loaded, the vocabulary
+values specified can be selected.
+
+    >>> browser.open(portal_url + '/@@contexteditor')
+    >>> ctl = browser.getControl('Country')
+    >>> item = ctl.getControl('Russia')
+    >>> item
+    <ItemControl name='form.widgets.country:list' type='select'
+    optionValue='Russia' selected=False>
+    >>> item.selected = True
+    >>> ctl.value
+    ['Russia']
+    >>> item = ctl.getControl('Alaska')
+    >>> item.selected
+    False
+    >>> item.selected = True
+    >>> ctl.getControl('Russia').selected
+    False
+    >>> ctl.value
+    ['Alaska']
+
+
+We can select a vocabulary factory instead of values.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='country').click()
+    >>> browser.getControl('Possible values').value = ""
+    >>> voc_name_ctl = browser.getControl('Vocabulary name')
+    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Countries').selected = True
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Choice]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.open(portal_url + '/@@contexteditor')
+
+    >>> '<option id="form-widgets-country-0" value="fr">France' in browser.contents
+    True
+    >>> '<option id="form-widgets-country-1" value="uk">United Kingdom' in browser.contents
+    True
+    >>> '<option id="form-widgets-country-2" value="es">Spain' in browser.contents
+    True
+
+We can't set a vocabulary name AND values.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='country').click()
+    >>> browser.getControl('values').value = "oups"
+    >>> browser.getControl('Save').click()
+    >>> print browser.contents
+    <...
+      <div class="error">You can not set a vocabulary name AND vocabulary values....
+    ...
+
+
+Multiple Choice
+===============
+
+A vocabulary of simple values can also be used with a multiple
+selection field.
+
+Open the schema editor in the browser.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+Add a Choice field.
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Categories'
+    >>> browser.getControl('Short Name').value = 'categories'
+    >>> browser.getControl('Field type').getControl(
+    ...     'Multiple Choice').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on Set]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Open the new fields edit form.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='categories').click()
+
+The edit form for choice fields includes a widget for specifying the
+vocabulary.
+
+    >>> ctl = browser.getControl('Possible values')
+    >>> ctl
+    <Control name='form.widgets.values' type='textarea'>
+
+If duplicate values are entered an error is raised.
+
+    >>> ctl.value = '\n'.join(
+    ...     ['Lisp', 'Plone', 'Python', 'Lisp'])
+    >>> browser.getControl('Save').click()
+    >>> print browser.contents
+    <...
+      <div class="error">The 'Lisp' vocabulary value conflicts with 'Lisp'.</div>
+    ...
+
+Enter unique values and save the field settings.
+
+    >>> browser.getControl('Possible values').value = '\n'.join(
+    ...     ['Plone', 'Python', 'Lisp'])
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Set]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+When the edit form for the content type is loaded, the vocabulary
+values specified can be selected.
+
+    >>> browser.open(portal_url + '/@@contexteditor')
+    >>> browser.getControl('Categories').getControl('Python').selected = True
+    >>> browser.getControl('Categories').value
+    ['Python']
+
+
+We can select a vocabulary factory instead of values.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='categories').click()
+    >>> browser.getControl('Possible values').value = ""
+    >>> voc_name_ctl = browser.getControl('Vocabulary name')
+    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Categories').selected = True
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Set]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.open(portal_url + '/@@contexteditor')
+    >>> '<option id="form-widgets-categories-0" value="php">PHP' in browser.contents
+    True
+    >>> '<option id="form-widgets-categories-1" value="c">C' in browser.contents
+    True
+    >>> '<option id="form-widgets-categories-2" value="ruby">Ruby' in browser.contents
+    True
+
+Back to the edit form, vocabulary name is selected.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='categories').click()
+    >>> print browser.contents
+    <...
+    ... selected>plone.schemaeditor.test.Categories</option...
+    ...
diff --git a/plone/schemaeditor/tests/choice.txt b/plone/schemaeditor/tests/choice.txt
deleted file mode 100644
index 0106719..0000000
--- a/plone/schemaeditor/tests/choice.txt
+++ /dev/null
@@ -1,215 +0,0 @@
-.. -*-doctest-*-
-
-==========================================
-Choice Fields with Vocabularies or Sources
-==========================================
-
-The schema editor allows the user to add Choice fields while also
-specifying a vocabulary or source of the values which can be
-selected.
-
-Log in as a user who can edit content type schemata and open the
-schema editor.
-
-    >>> user = app.acl_users.userFolderAddUser(
-    ...     'root', 'secret', ['Manager'], [])
-
-    >>> from Products.Five import testbrowser
-    >>> browser = testbrowser.Browser()
-    >>> browser.handleErrors = False
-    >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-Open the schema editor in the browser.
-
-    >>> portal_url = 'http://nohost'
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-Add a Choice field.
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Country'
-    >>> browser.getControl('Short Name').value = 'country'
-    >>> browser.getControl('Field type').getControl(
-    ...     value='label_choice_field').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on Choice]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Open the new fields edit form.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='country').click()
-
-The edit form for choice fields includes a widget for specifying the
-vocabulary.
-
-    >>> ctl = browser.getControl('Possible values')
-    >>> ctl
-    <Control name='form.widgets.values' type='textarea'>
-
-If duplicate values are entered an error is raised.
-
-    >>> ctl.value = '\n'.join(
-    ...     ['Alaska', 'Russia', 'United States', 'United States',
-    ...      'Other'])
-    >>> browser.getControl('Save').click()
-    >>> print browser.contents
-    <...
-      <div class="error">The 'United States' vocabulary value conflicts with 'United States'.</div>
-    ...
-
-Enter valid values and save the field settings.
-
-    >>> browser.getControl('Possible values').value = '\n'.join(
-    ...     ['Alaska', 'Russia', 'United States', "C\xc3\xb4te d'Ivoire", 'Other'])
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Choice]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-When the edit form for the content type is loaded, the vocabulary
-values specified can be selected.
-
-    >>> browser.open(portal_url + '/@@contexteditor')
-    >>> ctl = browser.getControl('Country')
-    >>> item = ctl.getControl('Russia')
-    >>> item
-    <ItemControl name='form.widgets.country:list' type='select'
-    optionValue='Russia' selected=False>
-    >>> item.selected = True
-    >>> ctl.value
-    ['Russia']
-    >>> item = ctl.getControl('Alaska')
-    >>> item.selected
-    False
-    >>> item.selected = True
-    >>> ctl.getControl('Russia').selected
-    False
-    >>> ctl.value
-    ['Alaska']
-
-
-We can select a vocabulary factory instead of values.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='country').click()
-    >>> browser.getControl('Possible values').value = ""
-    >>> voc_name_ctl = browser.getControl('Vocabulary name')
-    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Countries').selected = True
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Choice]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.open(portal_url + '/@@contexteditor')
-
-    >>> '<option id="form-widgets-country-0" value="fr">France' in browser.contents
-    True
-    >>> '<option id="form-widgets-country-1" value="uk">United Kingdom' in browser.contents
-    True
-    >>> '<option id="form-widgets-country-2" value="es">Spain' in browser.contents
-    True
-
-We can't set a vocabulary name AND values.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='country').click()
-    >>> browser.getControl('values').value = "oups"
-    >>> browser.getControl('Save').click()
-    >>> print browser.contents
-    <...
-      <div class="error">You can not set a vocabulary name AND vocabulary values....
-    ...
-
-
-Multiple Choice
-===============
-
-A vocabulary of simple values can also be used with a multiple
-selection field.
-
-Open the schema editor in the browser.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-Add a Choice field.
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Categories'
-    >>> browser.getControl('Short Name').value = 'categories'
-    >>> browser.getControl('Field type').getControl(
-    ...     'Multiple Choice').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on Set]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Open the new fields edit form.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='categories').click()
-
-The edit form for choice fields includes a widget for specifying the
-vocabulary.
-
-    >>> ctl = browser.getControl('Possible values')
-    >>> ctl
-    <Control name='form.widgets.values' type='textarea'>
-
-If duplicate values are entered an error is raised.
-
-    >>> ctl.value = '\n'.join(
-    ...     ['Lisp', 'Plone', 'Python', 'Lisp'])
-    >>> browser.getControl('Save').click()
-    >>> print browser.contents
-    <...
-      <div class="error">The 'Lisp' vocabulary value conflicts with 'Lisp'.</div>
-    ...
-
-Enter unique values and save the field settings.
-
-    >>> browser.getControl('Possible values').value = '\n'.join(
-    ...     ['Plone', 'Python', 'Lisp'])
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Set]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-When the edit form for the content type is loaded, the vocabulary
-values specified can be selected.
-
-    >>> browser.open(portal_url + '/@@contexteditor')
-    >>> browser.getControl('Categories').getControl('Python').selected = True
-    >>> browser.getControl('Categories').value
-    ['Python']
-
-
-We can select a vocabulary factory instead of values.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='categories').click()
-    >>> browser.getControl('Possible values').value = ""
-    >>> voc_name_ctl = browser.getControl('Vocabulary name')
-    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Categories').selected = True
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Set]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.open(portal_url + '/@@contexteditor')
-    >>> '<option id="form-widgets-categories-0" value="php">PHP' in browser.contents
-    True
-    >>> '<option id="form-widgets-categories-1" value="c">C' in browser.contents
-    True
-    >>> '<option id="form-widgets-categories-2" value="ruby">Ruby' in browser.contents
-    True
-
-Back to the edit form, vocabulary name is selected.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='categories').click()
-    >>> print browser.contents
-    <...
-    ... selected>plone.schemaeditor.test.Categories</option...
-    ...
diff --git a/plone/schemaeditor/tests/editing.rst b/plone/schemaeditor/tests/editing.rst
new file mode 100644
index 0000000..e2355b2
--- /dev/null
+++ b/plone/schemaeditor/tests/editing.rst
@@ -0,0 +1,444 @@
+Note that for the sake of the test, the test setup has installed a dummy schema
+context that will allow us to demonstrate editing a dummy IDummySchema schema, via the
+/schemaeditor URL.  It also registers an event handler for various schema events that
+will print out the event, so that we can make sure events are getting raised properly.
+
+Let's set up the test browser::
+
+    >>> from Products.Five.testbrowser import Browser
+    >>> browser = Browser()
+    >>> portal_url = 'http://nohost'
+    >>> browser.handleErrors = False
+
+
+Navigating to a schema
+----------------------
+
+If we try to access the schema editor without logging in, we should get an Unauthorized
+error::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
+
+We need to log in as a manager, because by default only managers get the 'Manage Schemata' permission::
+
+    >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
+    >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+Now we should be able to navigate to the IDummySchema schema in the browser::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+
+Adding a field
+--------------
+
+Let's add a 'favorite-color' field to the IDummySchema schema::
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Favorite Color'
+    >>> browser.getControl('Short Name').value = 'favorite_color'
+    >>> browser.getControl(name='form.widgets.description').value = 'Select your favorite color'
+    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
+    >>> browser.getControl(name='form.widgets.required').value = ['true']
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Now the actual IDummySchema schema should have the new field (the field id is a
+normalized form of the title)::
+
+    >>> from plone.schemaeditor.tests.fixtures import IDummySchema
+    >>> 'favorite_color' in IDummySchema
+    True
+    >>> from zope.schema import TextLine
+    >>> isinstance(IDummySchema['favorite_color'], TextLine)
+    True
+    >>> IDummySchema['favorite_color'].title
+    u'Favorite Color'
+    >>> IDummySchema['favorite_color'].required
+    True
+    >>> IDummySchema['favorite_color'].description
+    u'Select your favorite color'
+
+
+Editing a schema field attribute
+--------------------------------
+
+Let's navigate to the 'favorite-color' field we just created::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color'
+    >>> "Edit Field 'favorite_color'" in browser.contents
+    True
+
+Now we can change various attributes.  For instance, let's change the help text
+for the 'color' field::
+
+    >>> browser.getControl('Description').value = 'Enter your favorite color.'
+
+And now click the button to save the change.  This should take us back to the list
+of schema fields, which should reflect the change::
+
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on TextLine]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+
+Let's confirm that the new default value was correctly saved to the actual schema::
+
+    >>> IDummySchema['favorite_color'].description
+    u'Enter your favorite color.'
+
+If the schema is edited to have internationalized attributes::
+
+    >>> from zope.i18nmessageid import Message
+    >>> IDummySchema['favorite_color'].description = Message(
+    ...    'favorite_color', domain='plone')
+
+Then editing the schema will preserve those values and only update their
+default values::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color'
+    >>> "Edit Field 'favorite_color'" in browser.contents
+    True
+    >>> browser.getControl('Description').value
+    'favorite_color'
+    >>> browser.getControl('Description').value = 'Enter your favorite color.'
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on TextLine]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+
+Let's confirm that the message value was preserved and only its default
+value was set::
+
+    >>> type(IDummySchema['favorite_color'].description)
+    <type 'zope.i18nmessageid.message.Message'>
+    >>> IDummySchema['favorite_color'].description
+    u'favorite_color'
+    >>> IDummySchema['favorite_color'].description.domain
+    'plone'
+    >>> IDummySchema['favorite_color'].description.default
+    u'Enter your favorite color.'
+
+Let's also check that the support for editing i18n Message values does not
+persist its marker interface::
+
+    >>> from plone.schemaeditor.browser.field.edit import IFieldProxy
+    >>> IFieldProxy.providedBy(IDummySchema['favorite_color'])
+    False
+
+Let's go back and try to make an invalid change.  The form won't let us::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color'
+    >>> browser.getControl('Minimum length').value = 'asdf'
+    >>> browser.getControl('Save').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+    >>> 'The entered value is not a valid integer literal.' in browser.contents
+    True
+
+We also cannot set the field title to an empty string, even though the field is
+not required in zope.schema.interfaces.IField::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color')
+    >>> browser.getControl('Title').value = ''
+    >>> browser.getControl('Save').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+    >>> 'Required input is missing.' in browser.contents
+    True
+
+We can give up and hit the Cancel button, which should take us back to the schema listing,
+without trying to save changes::
+
+    >>> browser.getControl('Cancel').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor'
+
+
+Re-ordering a field
+-------------------
+
+The field we added was created in a position following the 5 existing fields on the
+interface::
+
+    >>> from zope.schema import getFieldsInOrder
+    >>> getFieldsInOrder(IDummySchema)[5][0]
+    'favorite_color'
+
+Fields can be reordered via drag-and-drop.  Let's simulate the AJAX request that would
+result from dragging the 'favorite_color' field to the 3rd position (since the
+testbrowser doesn't support Javascript)::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=2&fieldset_index=0')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+
+Now the field should be the third field of the schema::
+
+    >>> getFieldsInOrder(IDummySchema)[2][0]
+    'favorite_color'
+
+Now let's move it to be the first field (as there is an edge case in the ordering
+algorithm that we need to test)::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=0')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> getFieldsInOrder(IDummySchema)[0][0]
+    'favorite_color'
+
+
+Moving a field to an other fieldset
+-----------------------------------
+
+Fields can be moved from a fieldset to an other one.
+They are moved to the end of the new fieldset::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@changefieldset?fieldset_index=1')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+
+Now the field should be the seventh field of the schema::
+
+    >>> getFieldsInOrder(IDummySchema)[6][0]
+    'favorite_color'
+    >>> from plone.schemaeditor.utils import get_field_fieldset
+    >>> get_field_fieldset(IDummySchema, 'favorite_color')
+    <Fieldset 'alpha'...of fieldA, favorite_color>
+
+They can be ordered into a fieldset::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=1')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+    >>> get_field_fieldset(IDummySchema, 'favorite_color')
+    <Fieldset 'alpha'...of favorite_color, fieldA>
+
+Now the field should be the sixth field of the schema::
+
+    >>> getFieldsInOrder(IDummySchema)[5][0]
+    'favorite_color'
+
+
+Moving a field into an other fieldset and directly set the position
+-------------------------------------------------------------------
+
+If form tabbing is disabled, you can move a field from a fieldset directly to
+a position in the new fieldset.
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=1&fieldset_index=0')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+Now the field should be the second field of the schema, in the default fieldset ::
+
+    >>> getFieldsInOrder(IDummySchema)[1][0]
+    'favorite_color'
+
+
+Removing a field
+----------------
+
+We can also remove a field::
+
+    >>> browser.open('http://nohost/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color/@@delete').click()
+    [event: ObjectRemovedEvent on TextLine]
+    [event: FieldRemovedEvent on DummySchemaContext]
+
+And confirm that the real schema was updated::
+
+    >>> 'favorite_color' in IDummySchema
+    False
+    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
+    >>> 'favorite_color' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
+    False
+
+
+Removing a field in other fieldset
+----------------------------------
+
+Let's add a 'other_set' field to the IDummySchema schema,
+move it into an other fieldset and remove it::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Other Set'
+    >>> browser.getControl('Short Name').value = 'other_set'
+    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> IDummySchema['other_set'].required
+    False
+    >>> browser.open('http://nohost/@@schemaeditor/other_set/@@changefieldset?fieldset_index=1')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+    >>> browser.open('http://nohost/@@schemaeditor')
+    >>> browser.getLink(url='other_set/@@delete').click()
+    [event: ObjectRemovedEvent on TextLine]
+    [event: FieldRemovedEvent on DummySchemaContext]
+
+And confirm that the real schema was updated::
+
+    >>> 'other_set' in IDummySchema
+    False
+    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
+    >>> 'other_set' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
+    False
+
+
+Adding a fieldset
+-----------------
+
+Let's add a 'extra-info' fieldset to the IDummySchema schema::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink('Add new fieldset').click()
+    >>> browser.getControl('Title').value = 'Extra information'
+    >>> browser.getControl('Short Name').value = 'extra-info'
+    >>> browser.getControl('Add').click()
+    >>> browser.contents
+    '<...Please use only letters, numbers and the following characters...'
+    >>> browser.getControl('Short Name').value = 'extra_info'
+    >>> browser.getControl('Add').click()
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-fieldset'
+
+Now the actual IDummySchema schema should have the new fieldset ::
+
+    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
+    >>> IDummySchema.getTaggedValue(FIELDSETS_KEY)
+    [<Fieldset 'alpha'...of fieldA>, <Fieldset 'extra_info'...of >]
+
+
+Miscellaneous field types
+-------------------------
+
+Demonstrate that all the registered field types can be added edited
+and saved.
+
+    >>> from zope import component
+    >>> from plone.schemaeditor import interfaces
+    >>> schema = IDummySchema
+    >>> start_field_count = len(IDummySchema.names())
+    >>> for name, factory in sorted(component.getUtilitiesFor(
+    ...     interfaces.IFieldFactory)):
+    ...     browser.open(portal_url + '/@@schemaeditor')
+    ...     browser.getLink('Add new field').click()
+    ...     browser.getControl('Title').value = name
+    ...     field_id = name.replace('-', '_')
+    ...     browser.getControl('Short Name').value = field_id
+    ...     browser.getControl('Field type').value = [factory.title]
+    ...     browser.getControl('Add').click()
+    ...     assert browser.url == portal_url + '/@@schemaeditor/@@add-field', (
+    ...         'Failed to create %r' % name)
+    ...     assert field_id in schema, '%r not in %r' % (
+    ...         field_id, schema)
+    ...     assert factory.fieldcls._type is None or isinstance(
+    ...         schema[field_id], factory.fieldcls
+    ...         ), '%r is not an instance of %r' % (
+    ...             schema[field_id], factory.fieldcls)
+    ...     browser.open(portal_url + '/@@schemaeditor')
+    ...     browser.getLink(url=field_id).click()
+    ...     browser.getControl('Title').value += ' '
+    ...     browser.getControl('Save').click()
+    [event: ObjectAddedEvent on Bool]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Int]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Password]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Text]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Choice]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: ObjectModifiedEvent on Choice]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Date]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Datetime]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Float]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Set]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: ObjectModifiedEvent on Set]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+
+
+Reserved field names
+--------------------
+
+Since fields are accessible by names as attributes of a content item, we
+reserve some field names that are already in use by Dublin Core metadata
+attributes. Users cannot add fields with these names.
+
+    >>> for fname in ("subject", "format", "language",
+    ...               "creators", "contributors", "rights",
+    ...               "effective_date", "expiration_date"):
+    ...     browser.open(portal_url + '/@@schemaeditor')
+    ...     browser.getLink('Add new field').click()
+    ...     browser.getControl('Title').value = fname
+    ...     browser.getControl('Short Name').value = fname
+    ...     browser.getControl('Add').click()
+    ...     assert 'is a reserved field name' in browser.contents
+
+The ``title`` and ``description`` field names are also reserved, but since
+it's a common need to customize the wording of the label and help text for
+these fields, they are allowed as long as the field is of the correct type.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'title'
+    >>> browser.getControl('Short Name').value = 'title'
+    >>> browser.getControl('Field type').getControl('Integer').selected = True
+    >>> browser.getControl('Add').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+    >>> browser.getControl('Field type').getControl('String').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
diff --git a/plone/schemaeditor/tests/editing.txt b/plone/schemaeditor/tests/editing.txt
deleted file mode 100644
index e2355b2..0000000
--- a/plone/schemaeditor/tests/editing.txt
+++ /dev/null
@@ -1,444 +0,0 @@
-Note that for the sake of the test, the test setup has installed a dummy schema
-context that will allow us to demonstrate editing a dummy IDummySchema schema, via the
-/schemaeditor URL.  It also registers an event handler for various schema events that
-will print out the event, so that we can make sure events are getting raised properly.
-
-Let's set up the test browser::
-
-    >>> from Products.Five.testbrowser import Browser
-    >>> browser = Browser()
-    >>> portal_url = 'http://nohost'
-    >>> browser.handleErrors = False
-
-
-Navigating to a schema
-----------------------
-
-If we try to access the schema editor without logging in, we should get an Unauthorized
-error::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    Traceback (most recent call last):
-    ...
-    Unauthorized: ...You are not authorized to access this resource...
-
-We need to log in as a manager, because by default only managers get the 'Manage Schemata' permission::
-
-    >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
-    >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-Now we should be able to navigate to the IDummySchema schema in the browser::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-
-Adding a field
---------------
-
-Let's add a 'favorite-color' field to the IDummySchema schema::
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Favorite Color'
-    >>> browser.getControl('Short Name').value = 'favorite_color'
-    >>> browser.getControl(name='form.widgets.description').value = 'Select your favorite color'
-    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
-    >>> browser.getControl(name='form.widgets.required').value = ['true']
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Now the actual IDummySchema schema should have the new field (the field id is a
-normalized form of the title)::
-
-    >>> from plone.schemaeditor.tests.fixtures import IDummySchema
-    >>> 'favorite_color' in IDummySchema
-    True
-    >>> from zope.schema import TextLine
-    >>> isinstance(IDummySchema['favorite_color'], TextLine)
-    True
-    >>> IDummySchema['favorite_color'].title
-    u'Favorite Color'
-    >>> IDummySchema['favorite_color'].required
-    True
-    >>> IDummySchema['favorite_color'].description
-    u'Select your favorite color'
-
-
-Editing a schema field attribute
---------------------------------
-
-Let's navigate to the 'favorite-color' field we just created::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color'
-    >>> "Edit Field 'favorite_color'" in browser.contents
-    True
-
-Now we can change various attributes.  For instance, let's change the help text
-for the 'color' field::
-
-    >>> browser.getControl('Description').value = 'Enter your favorite color.'
-
-And now click the button to save the change.  This should take us back to the list
-of schema fields, which should reflect the change::
-
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on TextLine]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-
-Let's confirm that the new default value was correctly saved to the actual schema::
-
-    >>> IDummySchema['favorite_color'].description
-    u'Enter your favorite color.'
-
-If the schema is edited to have internationalized attributes::
-
-    >>> from zope.i18nmessageid import Message
-    >>> IDummySchema['favorite_color'].description = Message(
-    ...    'favorite_color', domain='plone')
-
-Then editing the schema will preserve those values and only update their
-default values::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color'
-    >>> "Edit Field 'favorite_color'" in browser.contents
-    True
-    >>> browser.getControl('Description').value
-    'favorite_color'
-    >>> browser.getControl('Description').value = 'Enter your favorite color.'
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on TextLine]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-
-Let's confirm that the message value was preserved and only its default
-value was set::
-
-    >>> type(IDummySchema['favorite_color'].description)
-    <type 'zope.i18nmessageid.message.Message'>
-    >>> IDummySchema['favorite_color'].description
-    u'favorite_color'
-    >>> IDummySchema['favorite_color'].description.domain
-    'plone'
-    >>> IDummySchema['favorite_color'].description.default
-    u'Enter your favorite color.'
-
-Let's also check that the support for editing i18n Message values does not
-persist its marker interface::
-
-    >>> from plone.schemaeditor.browser.field.edit import IFieldProxy
-    >>> IFieldProxy.providedBy(IDummySchema['favorite_color'])
-    False
-
-Let's go back and try to make an invalid change.  The form won't let us::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color'
-    >>> browser.getControl('Minimum length').value = 'asdf'
-    >>> browser.getControl('Save').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-    >>> 'The entered value is not a valid integer literal.' in browser.contents
-    True
-
-We also cannot set the field title to an empty string, even though the field is
-not required in zope.schema.interfaces.IField::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color')
-    >>> browser.getControl('Title').value = ''
-    >>> browser.getControl('Save').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-    >>> 'Required input is missing.' in browser.contents
-    True
-
-We can give up and hit the Cancel button, which should take us back to the schema listing,
-without trying to save changes::
-
-    >>> browser.getControl('Cancel').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor'
-
-
-Re-ordering a field
--------------------
-
-The field we added was created in a position following the 5 existing fields on the
-interface::
-
-    >>> from zope.schema import getFieldsInOrder
-    >>> getFieldsInOrder(IDummySchema)[5][0]
-    'favorite_color'
-
-Fields can be reordered via drag-and-drop.  Let's simulate the AJAX request that would
-result from dragging the 'favorite_color' field to the 3rd position (since the
-testbrowser doesn't support Javascript)::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=2&fieldset_index=0')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-
-Now the field should be the third field of the schema::
-
-    >>> getFieldsInOrder(IDummySchema)[2][0]
-    'favorite_color'
-
-Now let's move it to be the first field (as there is an edge case in the ordering
-algorithm that we need to test)::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=0')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> getFieldsInOrder(IDummySchema)[0][0]
-    'favorite_color'
-
-
-Moving a field to an other fieldset
------------------------------------
-
-Fields can be moved from a fieldset to an other one.
-They are moved to the end of the new fieldset::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@changefieldset?fieldset_index=1')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-
-Now the field should be the seventh field of the schema::
-
-    >>> getFieldsInOrder(IDummySchema)[6][0]
-    'favorite_color'
-    >>> from plone.schemaeditor.utils import get_field_fieldset
-    >>> get_field_fieldset(IDummySchema, 'favorite_color')
-    <Fieldset 'alpha'...of fieldA, favorite_color>
-
-They can be ordered into a fieldset::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=1')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-    >>> get_field_fieldset(IDummySchema, 'favorite_color')
-    <Fieldset 'alpha'...of favorite_color, fieldA>
-
-Now the field should be the sixth field of the schema::
-
-    >>> getFieldsInOrder(IDummySchema)[5][0]
-    'favorite_color'
-
-
-Moving a field into an other fieldset and directly set the position
--------------------------------------------------------------------
-
-If form tabbing is disabled, you can move a field from a fieldset directly to
-a position in the new fieldset.
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=1&fieldset_index=0')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-Now the field should be the second field of the schema, in the default fieldset ::
-
-    >>> getFieldsInOrder(IDummySchema)[1][0]
-    'favorite_color'
-
-
-Removing a field
-----------------
-
-We can also remove a field::
-
-    >>> browser.open('http://nohost/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color/@@delete').click()
-    [event: ObjectRemovedEvent on TextLine]
-    [event: FieldRemovedEvent on DummySchemaContext]
-
-And confirm that the real schema was updated::
-
-    >>> 'favorite_color' in IDummySchema
-    False
-    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
-    >>> 'favorite_color' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
-    False
-
-
-Removing a field in other fieldset
-----------------------------------
-
-Let's add a 'other_set' field to the IDummySchema schema,
-move it into an other fieldset and remove it::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Other Set'
-    >>> browser.getControl('Short Name').value = 'other_set'
-    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> IDummySchema['other_set'].required
-    False
-    >>> browser.open('http://nohost/@@schemaeditor/other_set/@@changefieldset?fieldset_index=1')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-    >>> browser.open('http://nohost/@@schemaeditor')
-    >>> browser.getLink(url='other_set/@@delete').click()
-    [event: ObjectRemovedEvent on TextLine]
-    [event: FieldRemovedEvent on DummySchemaContext]
-
-And confirm that the real schema was updated::
-
-    >>> 'other_set' in IDummySchema
-    False
-    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
-    >>> 'other_set' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
-    False
-
-
-Adding a fieldset
------------------
-
-Let's add a 'extra-info' fieldset to the IDummySchema schema::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink('Add new fieldset').click()
-    >>> browser.getControl('Title').value = 'Extra information'
-    >>> browser.getControl('Short Name').value = 'extra-info'
-    >>> browser.getControl('Add').click()
-    >>> browser.contents
-    '<...Please use only letters, numbers and the following characters...'
-    >>> browser.getControl('Short Name').value = 'extra_info'
-    >>> browser.getControl('Add').click()
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-fieldset'
-
-Now the actual IDummySchema schema should have the new fieldset ::
-
-    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
-    >>> IDummySchema.getTaggedValue(FIELDSETS_KEY)
-    [<Fieldset 'alpha'...of fieldA>, <Fieldset 'extra_info'...of >]
-
-
-Miscellaneous field types
--------------------------
-
-Demonstrate that all the registered field types can be added edited
-and saved.
-
-    >>> from zope import component
-    >>> from plone.schemaeditor import interfaces
-    >>> schema = IDummySchema
-    >>> start_field_count = len(IDummySchema.names())
-    >>> for name, factory in sorted(component.getUtilitiesFor(
-    ...     interfaces.IFieldFactory)):
-    ...     browser.open(portal_url + '/@@schemaeditor')
-    ...     browser.getLink('Add new field').click()
-    ...     browser.getControl('Title').value = name
-    ...     field_id = name.replace('-', '_')
-    ...     browser.getControl('Short Name').value = field_id
-    ...     browser.getControl('Field type').value = [factory.title]
-    ...     browser.getControl('Add').click()
-    ...     assert browser.url == portal_url + '/@@schemaeditor/@@add-field', (
-    ...         'Failed to create %r' % name)
-    ...     assert field_id in schema, '%r not in %r' % (
-    ...         field_id, schema)
-    ...     assert factory.fieldcls._type is None or isinstance(
-    ...         schema[field_id], factory.fieldcls
-    ...         ), '%r is not an instance of %r' % (
-    ...             schema[field_id], factory.fieldcls)
-    ...     browser.open(portal_url + '/@@schemaeditor')
-    ...     browser.getLink(url=field_id).click()
-    ...     browser.getControl('Title').value += ' '
-    ...     browser.getControl('Save').click()
-    [event: ObjectAddedEvent on Bool]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Int]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Password]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Text]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Choice]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: ObjectModifiedEvent on Choice]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Date]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Datetime]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Float]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Set]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: ObjectModifiedEvent on Set]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-
-
-Reserved field names
---------------------
-
-Since fields are accessible by names as attributes of a content item, we
-reserve some field names that are already in use by Dublin Core metadata
-attributes. Users cannot add fields with these names.
-
-    >>> for fname in ("subject", "format", "language",
-    ...               "creators", "contributors", "rights",
-    ...               "effective_date", "expiration_date"):
-    ...     browser.open(portal_url + '/@@schemaeditor')
-    ...     browser.getLink('Add new field').click()
-    ...     browser.getControl('Title').value = fname
-    ...     browser.getControl('Short Name').value = fname
-    ...     browser.getControl('Add').click()
-    ...     assert 'is a reserved field name' in browser.contents
-
-The ``title`` and ``description`` field names are also reserved, but since
-it's a common need to customize the wording of the label and help text for
-these fields, they are allowed as long as the field is of the correct type.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'title'
-    >>> browser.getControl('Short Name').value = 'title'
-    >>> browser.getControl('Field type').getControl('Integer').selected = True
-    >>> browser.getControl('Add').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-    >>> browser.getControl('Field type').getControl('String').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
diff --git a/plone/schemaeditor/tests/extending.rst b/plone/schemaeditor/tests/extending.rst
new file mode 100644
index 0000000..de402c4
--- /dev/null
+++ b/plone/schemaeditor/tests/extending.rst
@@ -0,0 +1,78 @@
+Extending the schema editor
+---------------------------
+
+The schema editor is designed to be extensible so that add-ons can support
+editing additional pieces of field metadata.
+
+This can be accomplished by registering an IFieldEditorExtender adapter.
+The schema returned when this adapter is looked up can provide additional
+fields and autoform hints that will be used by the for for editing a field's
+settings.
+
+For example, let's add a setting so that a different color can be specified
+for each field. First we need an interface that provides that setting::
+
+  >>> from zope.interface import Interface
+  >>> from zope import schema
+  >>> class IFieldColor(Interface):
+  ...     color = schema.TextLine(title = u'Color')
+
+We could register this schema directly as a named adapter providing
+IFieldEditorExtender. But if we want to do any additional filtering for which
+fields should have the new setting available, we can instead register a
+separate callable (an "adapter factory") which returns the schema only
+if those filters succeed.  In this case, we limit the extender to
+fields that have 'field' in their name::
+
+  >>> from zope.component import provideAdapter, adapter, adapts
+  >>> from zope.schema.interfaces import IField
+  >>> from plone.schemaeditor.interfaces import ISchemaContext
+  >>> @adapter(ISchemaContext, IField)
+  ... def get_color_schema(schema_context, field):
+  ...     if 'field' in field.__name__:
+  ...         return IFieldColor
+
+  >>> from plone.schemaeditor.interfaces import IFieldEditorExtender
+  >>> provideAdapter(get_color_schema, provides=IFieldEditorExtender, name='plone.schemaeditor.color')
+
+In order to actually get and set values for this field on content items,
+we need an adapter that provides the IFieldColor interface::
+
+  >>> class FieldColorAdapter(object):
+  ...     adapts(IField)
+  ...
+  ...     def __init__(self, field):
+  ...         self.field = field
+  ...
+  ...     def _get_color(self):
+  ...         colors = self.field.interface.queryTaggedValue('color', {})
+  ...         return colors.get(self.field.__name__)
+  ...     def _set_color(self, value):
+  ...         colors = self.field.interface.queryTaggedValue('color', {})
+  ...         colors[self.field.__name__] = value
+  ...         self.field.interface.setTaggedValue('color', colors)
+  ...     color = property(_get_color, _set_color)
+  >>> provideAdapter(FieldColorAdapter, provides=IFieldColor)
+
+Now we can bring up the edit form for one of the test fields, and it should
+have the additional 'color' setting::
+
+  >>> from Products.Five.testbrowser import Browser
+  >>> browser = Browser()
+  >>> browser.handleErrors = False
+  >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
+  >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+  >>> browser.open('http://nohost/@@schemaeditor/field1')
+  >>> color_textbox = browser.getControl('Color')
+
+We can save a color and confirm that it ends up in the schema's tagged values::
+
+  >>> color_textbox.value = 'green'
+  >>> browser.getControl('Title').value = 'test'
+  >>> browser.getControl('Save').click()
+  [event: ObjectModifiedEvent on TextLine]
+  [event: SchemaModifiedEvent on DummySchemaContext]
+  >>> from plone.schemaeditor.tests.fixtures import IDummySchema
+  >>> IDummySchema.getTaggedValue('color')
+  {'field1': u'green'}
diff --git a/plone/schemaeditor/tests/extending.txt b/plone/schemaeditor/tests/extending.txt
deleted file mode 100644
index de402c4..0000000
--- a/plone/schemaeditor/tests/extending.txt
+++ /dev/null
@@ -1,78 +0,0 @@
-Extending the schema editor
----------------------------
-
-The schema editor is designed to be extensible so that add-ons can support
-editing additional pieces of field metadata.
-
-This can be accomplished by registering an IFieldEditorExtender adapter.
-The schema returned when this adapter is looked up can provide additional
-fields and autoform hints that will be used by the for for editing a field's
-settings.
-
-For example, let's add a setting so that a different color can be specified
-for each field. First we need an interface that provides that setting::
-
-  >>> from zope.interface import Interface
-  >>> from zope import schema
-  >>> class IFieldColor(Interface):
-  ...     color = schema.TextLine(title = u'Color')
-
-We could register this schema directly as a named adapter providing
-IFieldEditorExtender. But if we want to do any additional filtering for which
-fields should have the new setting available, we can instead register a
-separate callable (an "adapter factory") which returns the schema only
-if those filters succeed.  In this case, we limit the extender to
-fields that have 'field' in their name::
-
-  >>> from zope.component import provideAdapter, adapter, adapts
-  >>> from zope.schema.interfaces import IField
-  >>> from plone.schemaeditor.interfaces import ISchemaContext
-  >>> @adapter(ISchemaContext, IField)
-  ... def get_color_schema(schema_context, field):
-  ...     if 'field' in field.__name__:
-  ...         return IFieldColor
-
-  >>> from plone.schemaeditor.interfaces import IFieldEditorExtender
-  >>> provideAdapter(get_color_schema, provides=IFieldEditorExtender, name='plone.schemaeditor.color')
-
-In order to actually get and set values for this field on content items,
-we need an adapter that provides the IFieldColor interface::
-
-  >>> class FieldColorAdapter(object):
-  ...     adapts(IField)
-  ...
-  ...     def __init__(self, field):
-  ...         self.field = field
-  ...
-  ...     def _get_color(self):
-  ...         colors = self.field.interface.queryTaggedValue('color', {})
-  ...         return colors.get(self.field.__name__)
-  ...     def _set_color(self, value):
-  ...         colors = self.field.interface.queryTaggedValue('color', {})
-  ...         colors[self.field.__name__] = value
-  ...         self.field.interface.setTaggedValue('color', colors)
-  ...     color = property(_get_color, _set_color)
-  >>> provideAdapter(FieldColorAdapter, provides=IFieldColor)
-
-Now we can bring up the edit form for one of the test fields, and it should
-have the additional 'color' setting::
-
-  >>> from Products.Five.testbrowser import Browser
-  >>> browser = Browser()
-  >>> browser.handleErrors = False
-  >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
-  >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-  >>> browser.open('http://nohost/@@schemaeditor/field1')
-  >>> color_textbox = browser.getControl('Color')
-
-We can save a color and confirm that it ends up in the schema's tagged values::
-
-  >>> color_textbox.value = 'green'
-  >>> browser.getControl('Title').value = 'test'
-  >>> browser.getControl('Save').click()
-  [event: ObjectModifiedEvent on TextLine]
-  [event: SchemaModifiedEvent on DummySchemaContext]
-  >>> from plone.schemaeditor.tests.fixtures import IDummySchema
-  >>> IDummySchema.getTaggedValue('color')
-  {'field1': u'green'}
diff --git a/plone/schemaeditor/tests/field_schemata.rst b/plone/schemaeditor/tests/field_schemata.rst
new file mode 100644
index 0000000..c512fee
--- /dev/null
+++ b/plone/schemaeditor/tests/field_schemata.rst
@@ -0,0 +1,38 @@
+.. -*-doctest-*-
+
+==============
+Field Schemata
+==============
+
+There are several places in the schemaeditor where we need to complete
+and or improve on the schema provided by field instances in order to
+fully support the field edit forms.
+
+The schema used on an edit form for a field is retrieved by
+introspecting the interfaces provided by the field looking for the
+first which is or extends zope.schema.interfaces.IField.
+
+    >>> from zope import schema
+    >>> from plone.schemaeditor.browser.field import traversal, edit
+    >>> field = schema.Field()
+    >>> context = traversal.FieldContext(field, None)
+    >>> form = edit.FieldEditForm(context, None)
+    >>> form._schema
+    <InterfaceClass zope.schema.interfaces.IField>
+
+The default values for fields should generally be the same type as the
+field itself.  The plone.schemaeditor declares that the zope.schema
+field classes implement schemata with correct default types.
+
+Some field types are declared generically as Object fields in zope.schema,
+but we want to use the correct field types for our edit form. For example,
+plone.schemaeditor declares that the min and max fields for Datetime
+fields are also Datetimes.
+
+    >>> field = schema.Datetime()
+    >>> context = traversal.FieldContext(field, None)
+    >>> form = edit.FieldEditForm(context, None)
+    >>> form._schema['min']
+    <zope.schema._field.Datetime object at ...>
+    >>> form._schema['max']
+    <zope.schema._field.Datetime object at ...>
diff --git a/plone/schemaeditor/tests/field_schemata.txt b/plone/schemaeditor/tests/field_schemata.txt
deleted file mode 100644
index c512fee..0000000
--- a/plone/schemaeditor/tests/field_schemata.txt
+++ /dev/null
@@ -1,38 +0,0 @@
-.. -*-doctest-*-
-
-==============
-Field Schemata
-==============
-
-There are several places in the schemaeditor where we need to complete
-and or improve on the schema provided by field instances in order to
-fully support the field edit forms.
-
-The schema used on an edit form for a field is retrieved by
-introspecting the interfaces provided by the field looking for the
-first which is or extends zope.schema.interfaces.IField.
-
-    >>> from zope import schema
-    >>> from plone.schemaeditor.browser.field import traversal, edit
-    >>> field = schema.Field()
-    >>> context = traversal.FieldContext(field, None)
-    >>> form = edit.FieldEditForm(context, None)
-    >>> form._schema
-    <InterfaceClass zope.schema.interfaces.IField>
-
-The default values for fields should generally be the same type as the
-field itself.  The plone.schemaeditor declares that the zope.schema
-field classes implement schemata with correct default types.
-
-Some field types are declared generically as Object fields in zope.schema,
-but we want to use the correct field types for our edit form. For example,
-plone.schemaeditor declares that the min and max fields for Datetime
-fields are also Datetimes.
-
-    >>> field = schema.Datetime()
-    >>> context = traversal.FieldContext(field, None)
-    >>> form = edit.FieldEditForm(context, None)
-    >>> form._schema['min']
-    <zope.schema._field.Datetime object at ...>
-    >>> form._schema['max']
-    <zope.schema._field.Datetime object at ...>
diff --git a/plone/schemaeditor/tests/minmax.rst b/plone/schemaeditor/tests/minmax.rst
new file mode 100644
index 0000000..87629e9
--- /dev/null
+++ b/plone/schemaeditor/tests/minmax.rst
@@ -0,0 +1,63 @@
+.. -*-doctest-*-
+
+=========================
+Numeric fields with range
+=========================
+
+Let's make sure that if a numeric field is configured with a range,
+the endpoints of the range can be adjusted to values outside the
+current range.
+
+Log in as a user who can edit content type schemata and open the
+schema editor.
+
+    >>> user = app.acl_users.userFolderAddUser(
+    ...     'root', 'secret', ['Manager'], [])
+    >>> from Products.Five import testbrowser
+    >>> browser = testbrowser.Browser()
+    >>> browser.handleErrors = False
+    >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+Open the schema editor in the browser.
+
+    >>> portal_url = 'http://nohost'
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+Add an Int field.
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Age'
+    >>> browser.getControl('Short Name').value = 'age'
+    >>> browser.getControl('Field type').getControl('Integer').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on Int]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Open the new fields edit form.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='age').click()
+
+Set the range to 13 to 100.
+
+    >>> browser.getControl(name='form.widgets.min').value = '13'
+    >>> browser.getControl(name='form.widgets.max').value = '100'
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Int]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+Return to the form and set the range to values outside the current range.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='age').click()
+    >>> browser.getControl(name='form.widgets.min').value = '0'
+    >>> browser.getControl(name='form.widgets.max').value = '200'
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Int]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+This should complete without error.
diff --git a/plone/schemaeditor/tests/minmax.txt b/plone/schemaeditor/tests/minmax.txt
deleted file mode 100644
index 87629e9..0000000
--- a/plone/schemaeditor/tests/minmax.txt
+++ /dev/null
@@ -1,63 +0,0 @@
-.. -*-doctest-*-
-
-=========================
-Numeric fields with range
-=========================
-
-Let's make sure that if a numeric field is configured with a range,
-the endpoints of the range can be adjusted to values outside the
-current range.
-
-Log in as a user who can edit content type schemata and open the
-schema editor.
-
-    >>> user = app.acl_users.userFolderAddUser(
-    ...     'root', 'secret', ['Manager'], [])
-    >>> from Products.Five import testbrowser
-    >>> browser = testbrowser.Browser()
-    >>> browser.handleErrors = False
-    >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-Open the schema editor in the browser.
-
-    >>> portal_url = 'http://nohost'
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-Add an Int field.
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Age'
-    >>> browser.getControl('Short Name').value = 'age'
-    >>> browser.getControl('Field type').getControl('Integer').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on Int]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Open the new fields edit form.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='age').click()
-
-Set the range to 13 to 100.
-
-    >>> browser.getControl(name='form.widgets.min').value = '13'
-    >>> browser.getControl(name='form.widgets.max').value = '100'
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Int]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-Return to the form and set the range to values outside the current range.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='age').click()
-    >>> browser.getControl(name='form.widgets.min').value = '0'
-    >>> browser.getControl(name='form.widgets.max').value = '200'
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Int]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-This should complete without error.
diff --git a/plone/schemaeditor/tests/tests.py b/plone/schemaeditor/tests/tests.py
index 8ba92f3..9694314 100644
--- a/plone/schemaeditor/tests/tests.py
+++ b/plone/schemaeditor/tests/tests.py
@@ -48,11 +48,11 @@ def test_suite():
     return unittest.TestSuite([
 
         ztc.FunctionalDocFileSuite(
-            'field_schemata.txt',
-            'editing.txt',
-            'extending.txt',
-            'choice.txt',
-            'minmax.txt',
+            'field_schemata.rst',
+            'editing.rst',
+            'extending.rst',
+            'choice.rst',
+            'minmax.rst',
             setUp=setUp,
             tearDown=tearDown,
             optionflags=optionflags


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2016-12-19T18:24:08+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.schemaeditor/commit/f72e47d737caf7fdcc71b48fe941a171b6dad96a

latest zope.i18nmessageid.message.Message is a class, not a type, support both

Files changed:
M CHANGES.rst
M plone/schemaeditor/tests/editing.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 9756048..7cc4d3b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Test-Fix: Support latest zope.i18nmessageid.
+  [jensens]
 
 
 2.0.12 (2016-11-09)
diff --git a/plone/schemaeditor/tests/editing.rst b/plone/schemaeditor/tests/editing.rst
index e2355b2..d851ae0 100644
--- a/plone/schemaeditor/tests/editing.rst
+++ b/plone/schemaeditor/tests/editing.rst
@@ -127,7 +127,7 @@ Let's confirm that the message value was preserved and only its default
 value was set::
 
     >>> type(IDummySchema['favorite_color'].description)
-    <type 'zope.i18nmessageid.message.Message'>
+    <... 'zope.i18nmessageid.message.Message'>
     >>> IDummySchema['favorite_color'].description
     u'favorite_color'
     >>> IDummySchema['favorite_color'].description.domain


Repository: plone.schemaeditor


Branch: refs/heads/master
Date: 2016-12-19T15:11:23-06:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.schemaeditor/commit/b3ef2630382c517134109bd9139fb6994ed6e9da

Merge pull request #45 from plone/jensens-latest-zope-i18nmessageid-support

Latest zope.i18nmessageid support

Files changed:
A plone/schemaeditor/tests/choice.rst
A plone/schemaeditor/tests/editing.rst
A plone/schemaeditor/tests/extending.rst
A plone/schemaeditor/tests/field_schemata.rst
A plone/schemaeditor/tests/minmax.rst
M CHANGES.rst
M plone/schemaeditor/tests/tests.py
D plone/schemaeditor/tests/choice.txt
D plone/schemaeditor/tests/editing.txt
D plone/schemaeditor/tests/extending.txt
D plone/schemaeditor/tests/field_schemata.txt
D plone/schemaeditor/tests/minmax.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index 9756048..7cc4d3b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Test-Fix: Support latest zope.i18nmessageid.
+  [jensens]
 
 
 2.0.12 (2016-11-09)
diff --git a/plone/schemaeditor/tests/choice.rst b/plone/schemaeditor/tests/choice.rst
new file mode 100644
index 0000000..0106719
--- /dev/null
+++ b/plone/schemaeditor/tests/choice.rst
@@ -0,0 +1,215 @@
+.. -*-doctest-*-
+
+==========================================
+Choice Fields with Vocabularies or Sources
+==========================================
+
+The schema editor allows the user to add Choice fields while also
+specifying a vocabulary or source of the values which can be
+selected.
+
+Log in as a user who can edit content type schemata and open the
+schema editor.
+
+    >>> user = app.acl_users.userFolderAddUser(
+    ...     'root', 'secret', ['Manager'], [])
+
+    >>> from Products.Five import testbrowser
+    >>> browser = testbrowser.Browser()
+    >>> browser.handleErrors = False
+    >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+Open the schema editor in the browser.
+
+    >>> portal_url = 'http://nohost'
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+Add a Choice field.
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Country'
+    >>> browser.getControl('Short Name').value = 'country'
+    >>> browser.getControl('Field type').getControl(
+    ...     value='label_choice_field').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on Choice]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Open the new fields edit form.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='country').click()
+
+The edit form for choice fields includes a widget for specifying the
+vocabulary.
+
+    >>> ctl = browser.getControl('Possible values')
+    >>> ctl
+    <Control name='form.widgets.values' type='textarea'>
+
+If duplicate values are entered an error is raised.
+
+    >>> ctl.value = '\n'.join(
+    ...     ['Alaska', 'Russia', 'United States', 'United States',
+    ...      'Other'])
+    >>> browser.getControl('Save').click()
+    >>> print browser.contents
+    <...
+      <div class="error">The 'United States' vocabulary value conflicts with 'United States'.</div>
+    ...
+
+Enter valid values and save the field settings.
+
+    >>> browser.getControl('Possible values').value = '\n'.join(
+    ...     ['Alaska', 'Russia', 'United States', "C\xc3\xb4te d'Ivoire", 'Other'])
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Choice]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+When the edit form for the content type is loaded, the vocabulary
+values specified can be selected.
+
+    >>> browser.open(portal_url + '/@@contexteditor')
+    >>> ctl = browser.getControl('Country')
+    >>> item = ctl.getControl('Russia')
+    >>> item
+    <ItemControl name='form.widgets.country:list' type='select'
+    optionValue='Russia' selected=False>
+    >>> item.selected = True
+    >>> ctl.value
+    ['Russia']
+    >>> item = ctl.getControl('Alaska')
+    >>> item.selected
+    False
+    >>> item.selected = True
+    >>> ctl.getControl('Russia').selected
+    False
+    >>> ctl.value
+    ['Alaska']
+
+
+We can select a vocabulary factory instead of values.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='country').click()
+    >>> browser.getControl('Possible values').value = ""
+    >>> voc_name_ctl = browser.getControl('Vocabulary name')
+    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Countries').selected = True
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Choice]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.open(portal_url + '/@@contexteditor')
+
+    >>> '<option id="form-widgets-country-0" value="fr">France' in browser.contents
+    True
+    >>> '<option id="form-widgets-country-1" value="uk">United Kingdom' in browser.contents
+    True
+    >>> '<option id="form-widgets-country-2" value="es">Spain' in browser.contents
+    True
+
+We can't set a vocabulary name AND values.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='country').click()
+    >>> browser.getControl('values').value = "oups"
+    >>> browser.getControl('Save').click()
+    >>> print browser.contents
+    <...
+      <div class="error">You can not set a vocabulary name AND vocabulary values....
+    ...
+
+
+Multiple Choice
+===============
+
+A vocabulary of simple values can also be used with a multiple
+selection field.
+
+Open the schema editor in the browser.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+Add a Choice field.
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Categories'
+    >>> browser.getControl('Short Name').value = 'categories'
+    >>> browser.getControl('Field type').getControl(
+    ...     'Multiple Choice').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on Set]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Open the new fields edit form.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='categories').click()
+
+The edit form for choice fields includes a widget for specifying the
+vocabulary.
+
+    >>> ctl = browser.getControl('Possible values')
+    >>> ctl
+    <Control name='form.widgets.values' type='textarea'>
+
+If duplicate values are entered an error is raised.
+
+    >>> ctl.value = '\n'.join(
+    ...     ['Lisp', 'Plone', 'Python', 'Lisp'])
+    >>> browser.getControl('Save').click()
+    >>> print browser.contents
+    <...
+      <div class="error">The 'Lisp' vocabulary value conflicts with 'Lisp'.</div>
+    ...
+
+Enter unique values and save the field settings.
+
+    >>> browser.getControl('Possible values').value = '\n'.join(
+    ...     ['Plone', 'Python', 'Lisp'])
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Set]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+When the edit form for the content type is loaded, the vocabulary
+values specified can be selected.
+
+    >>> browser.open(portal_url + '/@@contexteditor')
+    >>> browser.getControl('Categories').getControl('Python').selected = True
+    >>> browser.getControl('Categories').value
+    ['Python']
+
+
+We can select a vocabulary factory instead of values.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='categories').click()
+    >>> browser.getControl('Possible values').value = ""
+    >>> voc_name_ctl = browser.getControl('Vocabulary name')
+    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Categories').selected = True
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Set]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.open(portal_url + '/@@contexteditor')
+    >>> '<option id="form-widgets-categories-0" value="php">PHP' in browser.contents
+    True
+    >>> '<option id="form-widgets-categories-1" value="c">C' in browser.contents
+    True
+    >>> '<option id="form-widgets-categories-2" value="ruby">Ruby' in browser.contents
+    True
+
+Back to the edit form, vocabulary name is selected.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='categories').click()
+    >>> print browser.contents
+    <...
+    ... selected>plone.schemaeditor.test.Categories</option...
+    ...
diff --git a/plone/schemaeditor/tests/choice.txt b/plone/schemaeditor/tests/choice.txt
deleted file mode 100644
index 0106719..0000000
--- a/plone/schemaeditor/tests/choice.txt
+++ /dev/null
@@ -1,215 +0,0 @@
-.. -*-doctest-*-
-
-==========================================
-Choice Fields with Vocabularies or Sources
-==========================================
-
-The schema editor allows the user to add Choice fields while also
-specifying a vocabulary or source of the values which can be
-selected.
-
-Log in as a user who can edit content type schemata and open the
-schema editor.
-
-    >>> user = app.acl_users.userFolderAddUser(
-    ...     'root', 'secret', ['Manager'], [])
-
-    >>> from Products.Five import testbrowser
-    >>> browser = testbrowser.Browser()
-    >>> browser.handleErrors = False
-    >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-Open the schema editor in the browser.
-
-    >>> portal_url = 'http://nohost'
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-Add a Choice field.
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Country'
-    >>> browser.getControl('Short Name').value = 'country'
-    >>> browser.getControl('Field type').getControl(
-    ...     value='label_choice_field').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on Choice]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Open the new fields edit form.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='country').click()
-
-The edit form for choice fields includes a widget for specifying the
-vocabulary.
-
-    >>> ctl = browser.getControl('Possible values')
-    >>> ctl
-    <Control name='form.widgets.values' type='textarea'>
-
-If duplicate values are entered an error is raised.
-
-    >>> ctl.value = '\n'.join(
-    ...     ['Alaska', 'Russia', 'United States', 'United States',
-    ...      'Other'])
-    >>> browser.getControl('Save').click()
-    >>> print browser.contents
-    <...
-      <div class="error">The 'United States' vocabulary value conflicts with 'United States'.</div>
-    ...
-
-Enter valid values and save the field settings.
-
-    >>> browser.getControl('Possible values').value = '\n'.join(
-    ...     ['Alaska', 'Russia', 'United States', "C\xc3\xb4te d'Ivoire", 'Other'])
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Choice]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-When the edit form for the content type is loaded, the vocabulary
-values specified can be selected.
-
-    >>> browser.open(portal_url + '/@@contexteditor')
-    >>> ctl = browser.getControl('Country')
-    >>> item = ctl.getControl('Russia')
-    >>> item
-    <ItemControl name='form.widgets.country:list' type='select'
-    optionValue='Russia' selected=False>
-    >>> item.selected = True
-    >>> ctl.value
-    ['Russia']
-    >>> item = ctl.getControl('Alaska')
-    >>> item.selected
-    False
-    >>> item.selected = True
-    >>> ctl.getControl('Russia').selected
-    False
-    >>> ctl.value
-    ['Alaska']
-
-
-We can select a vocabulary factory instead of values.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='country').click()
-    >>> browser.getControl('Possible values').value = ""
-    >>> voc_name_ctl = browser.getControl('Vocabulary name')
-    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Countries').selected = True
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Choice]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.open(portal_url + '/@@contexteditor')
-
-    >>> '<option id="form-widgets-country-0" value="fr">France' in browser.contents
-    True
-    >>> '<option id="form-widgets-country-1" value="uk">United Kingdom' in browser.contents
-    True
-    >>> '<option id="form-widgets-country-2" value="es">Spain' in browser.contents
-    True
-
-We can't set a vocabulary name AND values.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='country').click()
-    >>> browser.getControl('values').value = "oups"
-    >>> browser.getControl('Save').click()
-    >>> print browser.contents
-    <...
-      <div class="error">You can not set a vocabulary name AND vocabulary values....
-    ...
-
-
-Multiple Choice
-===============
-
-A vocabulary of simple values can also be used with a multiple
-selection field.
-
-Open the schema editor in the browser.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-Add a Choice field.
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Categories'
-    >>> browser.getControl('Short Name').value = 'categories'
-    >>> browser.getControl('Field type').getControl(
-    ...     'Multiple Choice').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on Set]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Open the new fields edit form.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='categories').click()
-
-The edit form for choice fields includes a widget for specifying the
-vocabulary.
-
-    >>> ctl = browser.getControl('Possible values')
-    >>> ctl
-    <Control name='form.widgets.values' type='textarea'>
-
-If duplicate values are entered an error is raised.
-
-    >>> ctl.value = '\n'.join(
-    ...     ['Lisp', 'Plone', 'Python', 'Lisp'])
-    >>> browser.getControl('Save').click()
-    >>> print browser.contents
-    <...
-      <div class="error">The 'Lisp' vocabulary value conflicts with 'Lisp'.</div>
-    ...
-
-Enter unique values and save the field settings.
-
-    >>> browser.getControl('Possible values').value = '\n'.join(
-    ...     ['Plone', 'Python', 'Lisp'])
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Set]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-When the edit form for the content type is loaded, the vocabulary
-values specified can be selected.
-
-    >>> browser.open(portal_url + '/@@contexteditor')
-    >>> browser.getControl('Categories').getControl('Python').selected = True
-    >>> browser.getControl('Categories').value
-    ['Python']
-
-
-We can select a vocabulary factory instead of values.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='categories').click()
-    >>> browser.getControl('Possible values').value = ""
-    >>> voc_name_ctl = browser.getControl('Vocabulary name')
-    >>> voc_name_ctl.getControl('plone.schemaeditor.test.Categories').selected = True
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Set]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.open(portal_url + '/@@contexteditor')
-    >>> '<option id="form-widgets-categories-0" value="php">PHP' in browser.contents
-    True
-    >>> '<option id="form-widgets-categories-1" value="c">C' in browser.contents
-    True
-    >>> '<option id="form-widgets-categories-2" value="ruby">Ruby' in browser.contents
-    True
-
-Back to the edit form, vocabulary name is selected.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='categories').click()
-    >>> print browser.contents
-    <...
-    ... selected>plone.schemaeditor.test.Categories</option...
-    ...
diff --git a/plone/schemaeditor/tests/editing.rst b/plone/schemaeditor/tests/editing.rst
new file mode 100644
index 0000000..d851ae0
--- /dev/null
+++ b/plone/schemaeditor/tests/editing.rst
@@ -0,0 +1,444 @@
+Note that for the sake of the test, the test setup has installed a dummy schema
+context that will allow us to demonstrate editing a dummy IDummySchema schema, via the
+/schemaeditor URL.  It also registers an event handler for various schema events that
+will print out the event, so that we can make sure events are getting raised properly.
+
+Let's set up the test browser::
+
+    >>> from Products.Five.testbrowser import Browser
+    >>> browser = Browser()
+    >>> portal_url = 'http://nohost'
+    >>> browser.handleErrors = False
+
+
+Navigating to a schema
+----------------------
+
+If we try to access the schema editor without logging in, we should get an Unauthorized
+error::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    Traceback (most recent call last):
+    ...
+    Unauthorized: ...You are not authorized to access this resource...
+
+We need to log in as a manager, because by default only managers get the 'Manage Schemata' permission::
+
+    >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
+    >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+Now we should be able to navigate to the IDummySchema schema in the browser::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+
+Adding a field
+--------------
+
+Let's add a 'favorite-color' field to the IDummySchema schema::
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Favorite Color'
+    >>> browser.getControl('Short Name').value = 'favorite_color'
+    >>> browser.getControl(name='form.widgets.description').value = 'Select your favorite color'
+    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
+    >>> browser.getControl(name='form.widgets.required').value = ['true']
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Now the actual IDummySchema schema should have the new field (the field id is a
+normalized form of the title)::
+
+    >>> from plone.schemaeditor.tests.fixtures import IDummySchema
+    >>> 'favorite_color' in IDummySchema
+    True
+    >>> from zope.schema import TextLine
+    >>> isinstance(IDummySchema['favorite_color'], TextLine)
+    True
+    >>> IDummySchema['favorite_color'].title
+    u'Favorite Color'
+    >>> IDummySchema['favorite_color'].required
+    True
+    >>> IDummySchema['favorite_color'].description
+    u'Select your favorite color'
+
+
+Editing a schema field attribute
+--------------------------------
+
+Let's navigate to the 'favorite-color' field we just created::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color'
+    >>> "Edit Field 'favorite_color'" in browser.contents
+    True
+
+Now we can change various attributes.  For instance, let's change the help text
+for the 'color' field::
+
+    >>> browser.getControl('Description').value = 'Enter your favorite color.'
+
+And now click the button to save the change.  This should take us back to the list
+of schema fields, which should reflect the change::
+
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on TextLine]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+
+Let's confirm that the new default value was correctly saved to the actual schema::
+
+    >>> IDummySchema['favorite_color'].description
+    u'Enter your favorite color.'
+
+If the schema is edited to have internationalized attributes::
+
+    >>> from zope.i18nmessageid import Message
+    >>> IDummySchema['favorite_color'].description = Message(
+    ...    'favorite_color', domain='plone')
+
+Then editing the schema will preserve those values and only update their
+default values::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color'
+    >>> "Edit Field 'favorite_color'" in browser.contents
+    True
+    >>> browser.getControl('Description').value
+    'favorite_color'
+    >>> browser.getControl('Description').value = 'Enter your favorite color.'
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on TextLine]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+
+Let's confirm that the message value was preserved and only its default
+value was set::
+
+    >>> type(IDummySchema['favorite_color'].description)
+    <... 'zope.i18nmessageid.message.Message'>
+    >>> IDummySchema['favorite_color'].description
+    u'favorite_color'
+    >>> IDummySchema['favorite_color'].description.domain
+    'plone'
+    >>> IDummySchema['favorite_color'].description.default
+    u'Enter your favorite color.'
+
+Let's also check that the support for editing i18n Message values does not
+persist its marker interface::
+
+    >>> from plone.schemaeditor.browser.field.edit import IFieldProxy
+    >>> IFieldProxy.providedBy(IDummySchema['favorite_color'])
+    False
+
+Let's go back and try to make an invalid change.  The form won't let us::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color'
+    >>> browser.getControl('Minimum length').value = 'asdf'
+    >>> browser.getControl('Save').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+    >>> 'The entered value is not a valid integer literal.' in browser.contents
+    True
+
+We also cannot set the field title to an empty string, even though the field is
+not required in zope.schema.interfaces.IField::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color')
+    >>> browser.getControl('Title').value = ''
+    >>> browser.getControl('Save').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/favorite_color/@@edit'
+    >>> 'Required input is missing.' in browser.contents
+    True
+
+We can give up and hit the Cancel button, which should take us back to the schema listing,
+without trying to save changes::
+
+    >>> browser.getControl('Cancel').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor'
+
+
+Re-ordering a field
+-------------------
+
+The field we added was created in a position following the 5 existing fields on the
+interface::
+
+    >>> from zope.schema import getFieldsInOrder
+    >>> getFieldsInOrder(IDummySchema)[5][0]
+    'favorite_color'
+
+Fields can be reordered via drag-and-drop.  Let's simulate the AJAX request that would
+result from dragging the 'favorite_color' field to the 3rd position (since the
+testbrowser doesn't support Javascript)::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=2&fieldset_index=0')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+
+Now the field should be the third field of the schema::
+
+    >>> getFieldsInOrder(IDummySchema)[2][0]
+    'favorite_color'
+
+Now let's move it to be the first field (as there is an edge case in the ordering
+algorithm that we need to test)::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=0')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> getFieldsInOrder(IDummySchema)[0][0]
+    'favorite_color'
+
+
+Moving a field to an other fieldset
+-----------------------------------
+
+Fields can be moved from a fieldset to an other one.
+They are moved to the end of the new fieldset::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@changefieldset?fieldset_index=1')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+
+Now the field should be the seventh field of the schema::
+
+    >>> getFieldsInOrder(IDummySchema)[6][0]
+    'favorite_color'
+    >>> from plone.schemaeditor.utils import get_field_fieldset
+    >>> get_field_fieldset(IDummySchema, 'favorite_color')
+    <Fieldset 'alpha'...of fieldA, favorite_color>
+
+They can be ordered into a fieldset::
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=1')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+    >>> get_field_fieldset(IDummySchema, 'favorite_color')
+    <Fieldset 'alpha'...of favorite_color, fieldA>
+
+Now the field should be the sixth field of the schema::
+
+    >>> getFieldsInOrder(IDummySchema)[5][0]
+    'favorite_color'
+
+
+Moving a field into an other fieldset and directly set the position
+-------------------------------------------------------------------
+
+If form tabbing is disabled, you can move a field from a fieldset directly to
+a position in the new fieldset.
+
+    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=1&fieldset_index=0')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+Now the field should be the second field of the schema, in the default fieldset ::
+
+    >>> getFieldsInOrder(IDummySchema)[1][0]
+    'favorite_color'
+
+
+Removing a field
+----------------
+
+We can also remove a field::
+
+    >>> browser.open('http://nohost/@@schemaeditor')
+    >>> browser.getLink(url='favorite_color/@@delete').click()
+    [event: ObjectRemovedEvent on TextLine]
+    [event: FieldRemovedEvent on DummySchemaContext]
+
+And confirm that the real schema was updated::
+
+    >>> 'favorite_color' in IDummySchema
+    False
+    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
+    >>> 'favorite_color' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
+    False
+
+
+Removing a field in other fieldset
+----------------------------------
+
+Let's add a 'other_set' field to the IDummySchema schema,
+move it into an other fieldset and remove it::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Other Set'
+    >>> browser.getControl('Short Name').value = 'other_set'
+    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> IDummySchema['other_set'].required
+    False
+    >>> browser.open('http://nohost/@@schemaeditor/other_set/@@changefieldset?fieldset_index=1')
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.contents
+    ''
+    >>> browser.open('http://nohost/@@schemaeditor')
+    >>> browser.getLink(url='other_set/@@delete').click()
+    [event: ObjectRemovedEvent on TextLine]
+    [event: FieldRemovedEvent on DummySchemaContext]
+
+And confirm that the real schema was updated::
+
+    >>> 'other_set' in IDummySchema
+    False
+    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
+    >>> 'other_set' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
+    False
+
+
+Adding a fieldset
+-----------------
+
+Let's add a 'extra-info' fieldset to the IDummySchema schema::
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink('Add new fieldset').click()
+    >>> browser.getControl('Title').value = 'Extra information'
+    >>> browser.getControl('Short Name').value = 'extra-info'
+    >>> browser.getControl('Add').click()
+    >>> browser.contents
+    '<...Please use only letters, numbers and the following characters...'
+    >>> browser.getControl('Short Name').value = 'extra_info'
+    >>> browser.getControl('Add').click()
+    [event: ContainerModifiedEvent on InterfaceClass]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-fieldset'
+
+Now the actual IDummySchema schema should have the new fieldset ::
+
+    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
+    >>> IDummySchema.getTaggedValue(FIELDSETS_KEY)
+    [<Fieldset 'alpha'...of fieldA>, <Fieldset 'extra_info'...of >]
+
+
+Miscellaneous field types
+-------------------------
+
+Demonstrate that all the registered field types can be added edited
+and saved.
+
+    >>> from zope import component
+    >>> from plone.schemaeditor import interfaces
+    >>> schema = IDummySchema
+    >>> start_field_count = len(IDummySchema.names())
+    >>> for name, factory in sorted(component.getUtilitiesFor(
+    ...     interfaces.IFieldFactory)):
+    ...     browser.open(portal_url + '/@@schemaeditor')
+    ...     browser.getLink('Add new field').click()
+    ...     browser.getControl('Title').value = name
+    ...     field_id = name.replace('-', '_')
+    ...     browser.getControl('Short Name').value = field_id
+    ...     browser.getControl('Field type').value = [factory.title]
+    ...     browser.getControl('Add').click()
+    ...     assert browser.url == portal_url + '/@@schemaeditor/@@add-field', (
+    ...         'Failed to create %r' % name)
+    ...     assert field_id in schema, '%r not in %r' % (
+    ...         field_id, schema)
+    ...     assert factory.fieldcls._type is None or isinstance(
+    ...         schema[field_id], factory.fieldcls
+    ...         ), '%r is not an instance of %r' % (
+    ...             schema[field_id], factory.fieldcls)
+    ...     browser.open(portal_url + '/@@schemaeditor')
+    ...     browser.getLink(url=field_id).click()
+    ...     browser.getControl('Title').value += ' '
+    ...     browser.getControl('Save').click()
+    [event: ObjectAddedEvent on Bool]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Int]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Password]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Text]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Choice]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: ObjectModifiedEvent on Choice]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Date]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Datetime]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Float]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+    [event: ObjectAddedEvent on Set]
+    [event: FieldAddedEvent on DummySchemaContext]
+    [event: ObjectModifiedEvent on Set]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+
+
+Reserved field names
+--------------------
+
+Since fields are accessible by names as attributes of a content item, we
+reserve some field names that are already in use by Dublin Core metadata
+attributes. Users cannot add fields with these names.
+
+    >>> for fname in ("subject", "format", "language",
+    ...               "creators", "contributors", "rights",
+    ...               "effective_date", "expiration_date"):
+    ...     browser.open(portal_url + '/@@schemaeditor')
+    ...     browser.getLink('Add new field').click()
+    ...     browser.getControl('Title').value = fname
+    ...     browser.getControl('Short Name').value = fname
+    ...     browser.getControl('Add').click()
+    ...     assert 'is a reserved field name' in browser.contents
+
+The ``title`` and ``description`` field names are also reserved, but since
+it's a common need to customize the wording of the label and help text for
+these fields, they are allowed as long as the field is of the correct type.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'title'
+    >>> browser.getControl('Short Name').value = 'title'
+    >>> browser.getControl('Field type').getControl('Integer').selected = True
+    >>> browser.getControl('Add').click()
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+    >>> browser.getControl('Field type').getControl('String').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on TextLine]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
diff --git a/plone/schemaeditor/tests/editing.txt b/plone/schemaeditor/tests/editing.txt
deleted file mode 100644
index e2355b2..0000000
--- a/plone/schemaeditor/tests/editing.txt
+++ /dev/null
@@ -1,444 +0,0 @@
-Note that for the sake of the test, the test setup has installed a dummy schema
-context that will allow us to demonstrate editing a dummy IDummySchema schema, via the
-/schemaeditor URL.  It also registers an event handler for various schema events that
-will print out the event, so that we can make sure events are getting raised properly.
-
-Let's set up the test browser::
-
-    >>> from Products.Five.testbrowser import Browser
-    >>> browser = Browser()
-    >>> portal_url = 'http://nohost'
-    >>> browser.handleErrors = False
-
-
-Navigating to a schema
-----------------------
-
-If we try to access the schema editor without logging in, we should get an Unauthorized
-error::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    Traceback (most recent call last):
-    ...
-    Unauthorized: ...You are not authorized to access this resource...
-
-We need to log in as a manager, because by default only managers get the 'Manage Schemata' permission::
-
-    >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
-    >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-Now we should be able to navigate to the IDummySchema schema in the browser::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-
-Adding a field
---------------
-
-Let's add a 'favorite-color' field to the IDummySchema schema::
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Favorite Color'
-    >>> browser.getControl('Short Name').value = 'favorite_color'
-    >>> browser.getControl(name='form.widgets.description').value = 'Select your favorite color'
-    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
-    >>> browser.getControl(name='form.widgets.required').value = ['true']
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Now the actual IDummySchema schema should have the new field (the field id is a
-normalized form of the title)::
-
-    >>> from plone.schemaeditor.tests.fixtures import IDummySchema
-    >>> 'favorite_color' in IDummySchema
-    True
-    >>> from zope.schema import TextLine
-    >>> isinstance(IDummySchema['favorite_color'], TextLine)
-    True
-    >>> IDummySchema['favorite_color'].title
-    u'Favorite Color'
-    >>> IDummySchema['favorite_color'].required
-    True
-    >>> IDummySchema['favorite_color'].description
-    u'Select your favorite color'
-
-
-Editing a schema field attribute
---------------------------------
-
-Let's navigate to the 'favorite-color' field we just created::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color'
-    >>> "Edit Field 'favorite_color'" in browser.contents
-    True
-
-Now we can change various attributes.  For instance, let's change the help text
-for the 'color' field::
-
-    >>> browser.getControl('Description').value = 'Enter your favorite color.'
-
-And now click the button to save the change.  This should take us back to the list
-of schema fields, which should reflect the change::
-
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on TextLine]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-
-Let's confirm that the new default value was correctly saved to the actual schema::
-
-    >>> IDummySchema['favorite_color'].description
-    u'Enter your favorite color.'
-
-If the schema is edited to have internationalized attributes::
-
-    >>> from zope.i18nmessageid import Message
-    >>> IDummySchema['favorite_color'].description = Message(
-    ...    'favorite_color', domain='plone')
-
-Then editing the schema will preserve those values and only update their
-default values::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color'
-    >>> "Edit Field 'favorite_color'" in browser.contents
-    True
-    >>> browser.getControl('Description').value
-    'favorite_color'
-    >>> browser.getControl('Description').value = 'Enter your favorite color.'
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on TextLine]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-
-Let's confirm that the message value was preserved and only its default
-value was set::
-
-    >>> type(IDummySchema['favorite_color'].description)
-    <type 'zope.i18nmessageid.message.Message'>
-    >>> IDummySchema['favorite_color'].description
-    u'favorite_color'
-    >>> IDummySchema['favorite_color'].description.domain
-    'plone'
-    >>> IDummySchema['favorite_color'].description.default
-    u'Enter your favorite color.'
-
-Let's also check that the support for editing i18n Message values does not
-persist its marker interface::
-
-    >>> from plone.schemaeditor.browser.field.edit import IFieldProxy
-    >>> IFieldProxy.providedBy(IDummySchema['favorite_color'])
-    False
-
-Let's go back and try to make an invalid change.  The form won't let us::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color'
-    >>> browser.getControl('Minimum length').value = 'asdf'
-    >>> browser.getControl('Save').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-    >>> 'The entered value is not a valid integer literal.' in browser.contents
-    True
-
-We also cannot set the field title to an empty string, even though the field is
-not required in zope.schema.interfaces.IField::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color')
-    >>> browser.getControl('Title').value = ''
-    >>> browser.getControl('Save').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/favorite_color/@@edit'
-    >>> 'Required input is missing.' in browser.contents
-    True
-
-We can give up and hit the Cancel button, which should take us back to the schema listing,
-without trying to save changes::
-
-    >>> browser.getControl('Cancel').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor'
-
-
-Re-ordering a field
--------------------
-
-The field we added was created in a position following the 5 existing fields on the
-interface::
-
-    >>> from zope.schema import getFieldsInOrder
-    >>> getFieldsInOrder(IDummySchema)[5][0]
-    'favorite_color'
-
-Fields can be reordered via drag-and-drop.  Let's simulate the AJAX request that would
-result from dragging the 'favorite_color' field to the 3rd position (since the
-testbrowser doesn't support Javascript)::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=2&fieldset_index=0')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-
-Now the field should be the third field of the schema::
-
-    >>> getFieldsInOrder(IDummySchema)[2][0]
-    'favorite_color'
-
-Now let's move it to be the first field (as there is an edge case in the ordering
-algorithm that we need to test)::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=0')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> getFieldsInOrder(IDummySchema)[0][0]
-    'favorite_color'
-
-
-Moving a field to an other fieldset
------------------------------------
-
-Fields can be moved from a fieldset to an other one.
-They are moved to the end of the new fieldset::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@changefieldset?fieldset_index=1')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-
-Now the field should be the seventh field of the schema::
-
-    >>> getFieldsInOrder(IDummySchema)[6][0]
-    'favorite_color'
-    >>> from plone.schemaeditor.utils import get_field_fieldset
-    >>> get_field_fieldset(IDummySchema, 'favorite_color')
-    <Fieldset 'alpha'...of fieldA, favorite_color>
-
-They can be ordered into a fieldset::
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=0&fieldset_index=1')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-    >>> get_field_fieldset(IDummySchema, 'favorite_color')
-    <Fieldset 'alpha'...of favorite_color, fieldA>
-
-Now the field should be the sixth field of the schema::
-
-    >>> getFieldsInOrder(IDummySchema)[5][0]
-    'favorite_color'
-
-
-Moving a field into an other fieldset and directly set the position
--------------------------------------------------------------------
-
-If form tabbing is disabled, you can move a field from a fieldset directly to
-a position in the new fieldset.
-
-    >>> browser.open('http://nohost/@@schemaeditor/favorite_color/@@order?pos=1&fieldset_index=0')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-Now the field should be the second field of the schema, in the default fieldset ::
-
-    >>> getFieldsInOrder(IDummySchema)[1][0]
-    'favorite_color'
-
-
-Removing a field
-----------------
-
-We can also remove a field::
-
-    >>> browser.open('http://nohost/@@schemaeditor')
-    >>> browser.getLink(url='favorite_color/@@delete').click()
-    [event: ObjectRemovedEvent on TextLine]
-    [event: FieldRemovedEvent on DummySchemaContext]
-
-And confirm that the real schema was updated::
-
-    >>> 'favorite_color' in IDummySchema
-    False
-    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
-    >>> 'favorite_color' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
-    False
-
-
-Removing a field in other fieldset
-----------------------------------
-
-Let's add a 'other_set' field to the IDummySchema schema,
-move it into an other fieldset and remove it::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Other Set'
-    >>> browser.getControl('Short Name').value = 'other_set'
-    >>> browser.getControl('Field type').displayValue = ['Text line (String)']
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> IDummySchema['other_set'].required
-    False
-    >>> browser.open('http://nohost/@@schemaeditor/other_set/@@changefieldset?fieldset_index=1')
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.contents
-    ''
-    >>> browser.open('http://nohost/@@schemaeditor')
-    >>> browser.getLink(url='other_set/@@delete').click()
-    [event: ObjectRemovedEvent on TextLine]
-    [event: FieldRemovedEvent on DummySchemaContext]
-
-And confirm that the real schema was updated::
-
-    >>> 'other_set' in IDummySchema
-    False
-    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
-    >>> 'other_set' in [i for f in IDummySchema.getTaggedValue(FIELDSETS_KEY) for i in f.fields]
-    False
-
-
-Adding a fieldset
------------------
-
-Let's add a 'extra-info' fieldset to the IDummySchema schema::
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink('Add new fieldset').click()
-    >>> browser.getControl('Title').value = 'Extra information'
-    >>> browser.getControl('Short Name').value = 'extra-info'
-    >>> browser.getControl('Add').click()
-    >>> browser.contents
-    '<...Please use only letters, numbers and the following characters...'
-    >>> browser.getControl('Short Name').value = 'extra_info'
-    >>> browser.getControl('Add').click()
-    [event: ContainerModifiedEvent on InterfaceClass]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-fieldset'
-
-Now the actual IDummySchema schema should have the new fieldset ::
-
-    >>> from plone.supermodel.interfaces import FIELDSETS_KEY
-    >>> IDummySchema.getTaggedValue(FIELDSETS_KEY)
-    [<Fieldset 'alpha'...of fieldA>, <Fieldset 'extra_info'...of >]
-
-
-Miscellaneous field types
--------------------------
-
-Demonstrate that all the registered field types can be added edited
-and saved.
-
-    >>> from zope import component
-    >>> from plone.schemaeditor import interfaces
-    >>> schema = IDummySchema
-    >>> start_field_count = len(IDummySchema.names())
-    >>> for name, factory in sorted(component.getUtilitiesFor(
-    ...     interfaces.IFieldFactory)):
-    ...     browser.open(portal_url + '/@@schemaeditor')
-    ...     browser.getLink('Add new field').click()
-    ...     browser.getControl('Title').value = name
-    ...     field_id = name.replace('-', '_')
-    ...     browser.getControl('Short Name').value = field_id
-    ...     browser.getControl('Field type').value = [factory.title]
-    ...     browser.getControl('Add').click()
-    ...     assert browser.url == portal_url + '/@@schemaeditor/@@add-field', (
-    ...         'Failed to create %r' % name)
-    ...     assert field_id in schema, '%r not in %r' % (
-    ...         field_id, schema)
-    ...     assert factory.fieldcls._type is None or isinstance(
-    ...         schema[field_id], factory.fieldcls
-    ...         ), '%r is not an instance of %r' % (
-    ...             schema[field_id], factory.fieldcls)
-    ...     browser.open(portal_url + '/@@schemaeditor')
-    ...     browser.getLink(url=field_id).click()
-    ...     browser.getControl('Title').value += ' '
-    ...     browser.getControl('Save').click()
-    [event: ObjectAddedEvent on Bool]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Int]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Password]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Text]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Choice]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: ObjectModifiedEvent on Choice]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Date]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Datetime]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Float]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-    [event: ObjectAddedEvent on Set]
-    [event: FieldAddedEvent on DummySchemaContext]
-    [event: ObjectModifiedEvent on Set]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-
-
-Reserved field names
---------------------
-
-Since fields are accessible by names as attributes of a content item, we
-reserve some field names that are already in use by Dublin Core metadata
-attributes. Users cannot add fields with these names.
-
-    >>> for fname in ("subject", "format", "language",
-    ...               "creators", "contributors", "rights",
-    ...               "effective_date", "expiration_date"):
-    ...     browser.open(portal_url + '/@@schemaeditor')
-    ...     browser.getLink('Add new field').click()
-    ...     browser.getControl('Title').value = fname
-    ...     browser.getControl('Short Name').value = fname
-    ...     browser.getControl('Add').click()
-    ...     assert 'is a reserved field name' in browser.contents
-
-The ``title`` and ``description`` field names are also reserved, but since
-it's a common need to customize the wording of the label and help text for
-these fields, they are allowed as long as the field is of the correct type.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'title'
-    >>> browser.getControl('Short Name').value = 'title'
-    >>> browser.getControl('Field type').getControl('Integer').selected = True
-    >>> browser.getControl('Add').click()
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-    >>> browser.getControl('Field type').getControl('String').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on TextLine]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
diff --git a/plone/schemaeditor/tests/extending.rst b/plone/schemaeditor/tests/extending.rst
new file mode 100644
index 0000000..de402c4
--- /dev/null
+++ b/plone/schemaeditor/tests/extending.rst
@@ -0,0 +1,78 @@
+Extending the schema editor
+---------------------------
+
+The schema editor is designed to be extensible so that add-ons can support
+editing additional pieces of field metadata.
+
+This can be accomplished by registering an IFieldEditorExtender adapter.
+The schema returned when this adapter is looked up can provide additional
+fields and autoform hints that will be used by the for for editing a field's
+settings.
+
+For example, let's add a setting so that a different color can be specified
+for each field. First we need an interface that provides that setting::
+
+  >>> from zope.interface import Interface
+  >>> from zope import schema
+  >>> class IFieldColor(Interface):
+  ...     color = schema.TextLine(title = u'Color')
+
+We could register this schema directly as a named adapter providing
+IFieldEditorExtender. But if we want to do any additional filtering for which
+fields should have the new setting available, we can instead register a
+separate callable (an "adapter factory") which returns the schema only
+if those filters succeed.  In this case, we limit the extender to
+fields that have 'field' in their name::
+
+  >>> from zope.component import provideAdapter, adapter, adapts
+  >>> from zope.schema.interfaces import IField
+  >>> from plone.schemaeditor.interfaces import ISchemaContext
+  >>> @adapter(ISchemaContext, IField)
+  ... def get_color_schema(schema_context, field):
+  ...     if 'field' in field.__name__:
+  ...         return IFieldColor
+
+  >>> from plone.schemaeditor.interfaces import IFieldEditorExtender
+  >>> provideAdapter(get_color_schema, provides=IFieldEditorExtender, name='plone.schemaeditor.color')
+
+In order to actually get and set values for this field on content items,
+we need an adapter that provides the IFieldColor interface::
+
+  >>> class FieldColorAdapter(object):
+  ...     adapts(IField)
+  ...
+  ...     def __init__(self, field):
+  ...         self.field = field
+  ...
+  ...     def _get_color(self):
+  ...         colors = self.field.interface.queryTaggedValue('color', {})
+  ...         return colors.get(self.field.__name__)
+  ...     def _set_color(self, value):
+  ...         colors = self.field.interface.queryTaggedValue('color', {})
+  ...         colors[self.field.__name__] = value
+  ...         self.field.interface.setTaggedValue('color', colors)
+  ...     color = property(_get_color, _set_color)
+  >>> provideAdapter(FieldColorAdapter, provides=IFieldColor)
+
+Now we can bring up the edit form for one of the test fields, and it should
+have the additional 'color' setting::
+
+  >>> from Products.Five.testbrowser import Browser
+  >>> browser = Browser()
+  >>> browser.handleErrors = False
+  >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
+  >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+  >>> browser.open('http://nohost/@@schemaeditor/field1')
+  >>> color_textbox = browser.getControl('Color')
+
+We can save a color and confirm that it ends up in the schema's tagged values::
+
+  >>> color_textbox.value = 'green'
+  >>> browser.getControl('Title').value = 'test'
+  >>> browser.getControl('Save').click()
+  [event: ObjectModifiedEvent on TextLine]
+  [event: SchemaModifiedEvent on DummySchemaContext]
+  >>> from plone.schemaeditor.tests.fixtures import IDummySchema
+  >>> IDummySchema.getTaggedValue('color')
+  {'field1': u'green'}
diff --git a/plone/schemaeditor/tests/extending.txt b/plone/schemaeditor/tests/extending.txt
deleted file mode 100644
index de402c4..0000000
--- a/plone/schemaeditor/tests/extending.txt
+++ /dev/null
@@ -1,78 +0,0 @@
-Extending the schema editor
----------------------------
-
-The schema editor is designed to be extensible so that add-ons can support
-editing additional pieces of field metadata.
-
-This can be accomplished by registering an IFieldEditorExtender adapter.
-The schema returned when this adapter is looked up can provide additional
-fields and autoform hints that will be used by the for for editing a field's
-settings.
-
-For example, let's add a setting so that a different color can be specified
-for each field. First we need an interface that provides that setting::
-
-  >>> from zope.interface import Interface
-  >>> from zope import schema
-  >>> class IFieldColor(Interface):
-  ...     color = schema.TextLine(title = u'Color')
-
-We could register this schema directly as a named adapter providing
-IFieldEditorExtender. But if we want to do any additional filtering for which
-fields should have the new setting available, we can instead register a
-separate callable (an "adapter factory") which returns the schema only
-if those filters succeed.  In this case, we limit the extender to
-fields that have 'field' in their name::
-
-  >>> from zope.component import provideAdapter, adapter, adapts
-  >>> from zope.schema.interfaces import IField
-  >>> from plone.schemaeditor.interfaces import ISchemaContext
-  >>> @adapter(ISchemaContext, IField)
-  ... def get_color_schema(schema_context, field):
-  ...     if 'field' in field.__name__:
-  ...         return IFieldColor
-
-  >>> from plone.schemaeditor.interfaces import IFieldEditorExtender
-  >>> provideAdapter(get_color_schema, provides=IFieldEditorExtender, name='plone.schemaeditor.color')
-
-In order to actually get and set values for this field on content items,
-we need an adapter that provides the IFieldColor interface::
-
-  >>> class FieldColorAdapter(object):
-  ...     adapts(IField)
-  ...
-  ...     def __init__(self, field):
-  ...         self.field = field
-  ...
-  ...     def _get_color(self):
-  ...         colors = self.field.interface.queryTaggedValue('color', {})
-  ...         return colors.get(self.field.__name__)
-  ...     def _set_color(self, value):
-  ...         colors = self.field.interface.queryTaggedValue('color', {})
-  ...         colors[self.field.__name__] = value
-  ...         self.field.interface.setTaggedValue('color', colors)
-  ...     color = property(_get_color, _set_color)
-  >>> provideAdapter(FieldColorAdapter, provides=IFieldColor)
-
-Now we can bring up the edit form for one of the test fields, and it should
-have the additional 'color' setting::
-
-  >>> from Products.Five.testbrowser import Browser
-  >>> browser = Browser()
-  >>> browser.handleErrors = False
-  >>> user = self.app.acl_users.userFolderAddUser('root', 'secret', ['Manager'], [])
-  >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-  >>> browser.open('http://nohost/@@schemaeditor/field1')
-  >>> color_textbox = browser.getControl('Color')
-
-We can save a color and confirm that it ends up in the schema's tagged values::
-
-  >>> color_textbox.value = 'green'
-  >>> browser.getControl('Title').value = 'test'
-  >>> browser.getControl('Save').click()
-  [event: ObjectModifiedEvent on TextLine]
-  [event: SchemaModifiedEvent on DummySchemaContext]
-  >>> from plone.schemaeditor.tests.fixtures import IDummySchema
-  >>> IDummySchema.getTaggedValue('color')
-  {'field1': u'green'}
diff --git a/plone/schemaeditor/tests/field_schemata.rst b/plone/schemaeditor/tests/field_schemata.rst
new file mode 100644
index 0000000..c512fee
--- /dev/null
+++ b/plone/schemaeditor/tests/field_schemata.rst
@@ -0,0 +1,38 @@
+.. -*-doctest-*-
+
+==============
+Field Schemata
+==============
+
+There are several places in the schemaeditor where we need to complete
+and or improve on the schema provided by field instances in order to
+fully support the field edit forms.
+
+The schema used on an edit form for a field is retrieved by
+introspecting the interfaces provided by the field looking for the
+first which is or extends zope.schema.interfaces.IField.
+
+    >>> from zope import schema
+    >>> from plone.schemaeditor.browser.field import traversal, edit
+    >>> field = schema.Field()
+    >>> context = traversal.FieldContext(field, None)
+    >>> form = edit.FieldEditForm(context, None)
+    >>> form._schema
+    <InterfaceClass zope.schema.interfaces.IField>
+
+The default values for fields should generally be the same type as the
+field itself.  The plone.schemaeditor declares that the zope.schema
+field classes implement schemata with correct default types.
+
+Some field types are declared generically as Object fields in zope.schema,
+but we want to use the correct field types for our edit form. For example,
+plone.schemaeditor declares that the min and max fields for Datetime
+fields are also Datetimes.
+
+    >>> field = schema.Datetime()
+    >>> context = traversal.FieldContext(field, None)
+    >>> form = edit.FieldEditForm(context, None)
+    >>> form._schema['min']
+    <zope.schema._field.Datetime object at ...>
+    >>> form._schema['max']
+    <zope.schema._field.Datetime object at ...>
diff --git a/plone/schemaeditor/tests/field_schemata.txt b/plone/schemaeditor/tests/field_schemata.txt
deleted file mode 100644
index c512fee..0000000
--- a/plone/schemaeditor/tests/field_schemata.txt
+++ /dev/null
@@ -1,38 +0,0 @@
-.. -*-doctest-*-
-
-==============
-Field Schemata
-==============
-
-There are several places in the schemaeditor where we need to complete
-and or improve on the schema provided by field instances in order to
-fully support the field edit forms.
-
-The schema used on an edit form for a field is retrieved by
-introspecting the interfaces provided by the field looking for the
-first which is or extends zope.schema.interfaces.IField.
-
-    >>> from zope import schema
-    >>> from plone.schemaeditor.browser.field import traversal, edit
-    >>> field = schema.Field()
-    >>> context = traversal.FieldContext(field, None)
-    >>> form = edit.FieldEditForm(context, None)
-    >>> form._schema
-    <InterfaceClass zope.schema.interfaces.IField>
-
-The default values for fields should generally be the same type as the
-field itself.  The plone.schemaeditor declares that the zope.schema
-field classes implement schemata with correct default types.
-
-Some field types are declared generically as Object fields in zope.schema,
-but we want to use the correct field types for our edit form. For example,
-plone.schemaeditor declares that the min and max fields for Datetime
-fields are also Datetimes.
-
-    >>> field = schema.Datetime()
-    >>> context = traversal.FieldContext(field, None)
-    >>> form = edit.FieldEditForm(context, None)
-    >>> form._schema['min']
-    <zope.schema._field.Datetime object at ...>
-    >>> form._schema['max']
-    <zope.schema._field.Datetime object at ...>
diff --git a/plone/schemaeditor/tests/minmax.rst b/plone/schemaeditor/tests/minmax.rst
new file mode 100644
index 0000000..87629e9
--- /dev/null
+++ b/plone/schemaeditor/tests/minmax.rst
@@ -0,0 +1,63 @@
+.. -*-doctest-*-
+
+=========================
+Numeric fields with range
+=========================
+
+Let's make sure that if a numeric field is configured with a range,
+the endpoints of the range can be adjusted to values outside the
+current range.
+
+Log in as a user who can edit content type schemata and open the
+schema editor.
+
+    >>> user = app.acl_users.userFolderAddUser(
+    ...     'root', 'secret', ['Manager'], [])
+    >>> from Products.Five import testbrowser
+    >>> browser = testbrowser.Browser()
+    >>> browser.handleErrors = False
+    >>> browser.addHeader('Authorization', 'Basic root:secret')
+
+Open the schema editor in the browser.
+
+    >>> portal_url = 'http://nohost'
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> 'Edit @@schemaeditor' in browser.contents
+    True
+
+Add an Int field.
+
+    >>> browser.getLink('Add new field').click()
+    >>> browser.getControl('Title').value = 'Age'
+    >>> browser.getControl('Short Name').value = 'age'
+    >>> browser.getControl('Field type').getControl('Integer').selected = True
+    >>> browser.getControl('Add').click()
+    [event: ObjectAddedEvent on Int]
+    [event: FieldAddedEvent on DummySchemaContext]
+    >>> browser.url
+    'http://nohost/@@schemaeditor/@@add-field'
+
+Open the new fields edit form.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='age').click()
+
+Set the range to 13 to 100.
+
+    >>> browser.getControl(name='form.widgets.min').value = '13'
+    >>> browser.getControl(name='form.widgets.max').value = '100'
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Int]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+Return to the form and set the range to values outside the current range.
+
+    >>> browser.open(portal_url + '/@@schemaeditor')
+    >>> browser.getLink(url='age').click()
+    >>> browser.getControl(name='form.widgets.min').value = '0'
+    >>> browser.getControl(name='form.widgets.max').value = '200'
+    >>> browser.getControl('Save').click()
+    [event: ObjectModifiedEvent on Int]
+    [event: SchemaModifiedEvent on DummySchemaContext]
+
+This should complete without error.
diff --git a/plone/schemaeditor/tests/minmax.txt b/plone/schemaeditor/tests/minmax.txt
deleted file mode 100644
index 87629e9..0000000
--- a/plone/schemaeditor/tests/minmax.txt
+++ /dev/null
@@ -1,63 +0,0 @@
-.. -*-doctest-*-
-
-=========================
-Numeric fields with range
-=========================
-
-Let's make sure that if a numeric field is configured with a range,
-the endpoints of the range can be adjusted to values outside the
-current range.
-
-Log in as a user who can edit content type schemata and open the
-schema editor.
-
-    >>> user = app.acl_users.userFolderAddUser(
-    ...     'root', 'secret', ['Manager'], [])
-    >>> from Products.Five import testbrowser
-    >>> browser = testbrowser.Browser()
-    >>> browser.handleErrors = False
-    >>> browser.addHeader('Authorization', 'Basic root:secret')
-
-Open the schema editor in the browser.
-
-    >>> portal_url = 'http://nohost'
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> 'Edit @@schemaeditor' in browser.contents
-    True
-
-Add an Int field.
-
-    >>> browser.getLink('Add new field').click()
-    >>> browser.getControl('Title').value = 'Age'
-    >>> browser.getControl('Short Name').value = 'age'
-    >>> browser.getControl('Field type').getControl('Integer').selected = True
-    >>> browser.getControl('Add').click()
-    [event: ObjectAddedEvent on Int]
-    [event: FieldAddedEvent on DummySchemaContext]
-    >>> browser.url
-    'http://nohost/@@schemaeditor/@@add-field'
-
-Open the new fields edit form.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='age').click()
-
-Set the range to 13 to 100.
-
-    >>> browser.getControl(name='form.widgets.min').value = '13'
-    >>> browser.getControl(name='form.widgets.max').value = '100'
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Int]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-Return to the form and set the range to values outside the current range.
-
-    >>> browser.open(portal_url + '/@@schemaeditor')
-    >>> browser.getLink(url='age').click()
-    >>> browser.getControl(name='form.widgets.min').value = '0'
-    >>> browser.getControl(name='form.widgets.max').value = '200'
-    >>> browser.getControl('Save').click()
-    [event: ObjectModifiedEvent on Int]
-    [event: SchemaModifiedEvent on DummySchemaContext]
-
-This should complete without error.
diff --git a/plone/schemaeditor/tests/tests.py b/plone/schemaeditor/tests/tests.py
index 8ba92f3..9694314 100644
--- a/plone/schemaeditor/tests/tests.py
+++ b/plone/schemaeditor/tests/tests.py
@@ -48,11 +48,11 @@ def test_suite():
     return unittest.TestSuite([
 
         ztc.FunctionalDocFileSuite(
-            'field_schemata.txt',
-            'editing.txt',
-            'extending.txt',
-            'choice.txt',
-            'minmax.txt',
+            'field_schemata.rst',
+            'editing.rst',
+            'extending.rst',
+            'choice.rst',
+            'minmax.rst',
             setUp=setUp,
             tearDown=tearDown,
             optionflags=optionflags


