Repository: plone.app.contentlisting


Branch: refs/heads/master
Date: 2016-05-04T10:41:00+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.contentlisting/commit/36c1466ea0f7f5a571836c2791d0a682f61ade29

Apply hotfix 20160419 (#15)

Removed docstrings from some methods to avoid publishing them.

Files changed:
M CHANGES.rst
M plone/app/contentlisting/catalog.py
M plone/app/contentlisting/contentlisting.py
M plone/app/contentlisting/realobject.py

diff --git a/CHANGES.rst b/CHANGES.rst
index caab42a..f19f2b0 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- Removed docstrings from some methods to avoid publishing them.  From
+  Products.PloneHotfix20160419.  [maurits]
 
 
 1.2.4 (2016-02-08)
diff --git a/plone/app/contentlisting/catalog.py b/plone/app/contentlisting/catalog.py
index f9750dc..1c8adcf 100644
--- a/plone/app/contentlisting/catalog.py
+++ b/plone/app/contentlisting/catalog.py
@@ -47,24 +47,21 @@ def __getattr__(self, name):
             raise AttributeError(name)
 
     def getDataOrigin(self):
-        """The origin of the data for the object.
-
-        Sometimes we just need to know if we are looking at a brain or
-        the real object.
-        """
+        # The origin of the data for the object.
+        # Sometimes we just need to know if we are looking at a brain or
+        # the real object.
         if self._cached_realobject is not None:
             return self._cached_realobject
         else:
             return self._brain
 
     def getObject(self):
-        """Get the real, underlying object.
+        # Get the real, underlying object.
 
-        This is performance intensive compared to just getting the
-        catalog brain, so we don't do it until we need to.  We may
-        even have to log this to notify the developer that this might
-        be an inefficient operation.
-        """
+        # This is performance intensive compared to just getting the
+        # catalog brain, so we don't do it until we need to.  We may
+        # even have to log this to notify the developer that this might
+        # be an inefficient operation.
         if self._cached_realobject is None:
             self._cached_realobject = self._brain.getObject()
         return self._cached_realobject
@@ -181,7 +178,7 @@ def Identifier(self):
         return self.getURL()
 
     def Language(self):
-        """The language of the content"""
+        # The language of the content.
         if hasattr(aq_base(self._brain), 'Language'):
             return self._brain.Language
         else:
diff --git a/plone/app/contentlisting/contentlisting.py b/plone/app/contentlisting/contentlisting.py
index 6e08739..9a1acb1 100644
--- a/plone/app/contentlisting/contentlisting.py
+++ b/plone/app/contentlisting/contentlisting.py
@@ -103,21 +103,19 @@ def __eq__(self, other):
         return self.uuid() == other.uuid()
 
     def ContentTypeClass(self):
-        """A normalised type name that identifies the object in listings.
-        used for CSS styling"""
+        # A normalised type name that identifies the object in listings.
+        # Used for CSS styling.
         return 'contenttype-' + queryUtility(IIDNormalizer).normalize(
             self.PortalType())
 
     def ReviewStateClass(self):
-        """A normalised review state string for CSS styling use in listings.
-        """
+        # A normalised review state string for CSS styling use in listings.
         return 'state-' + queryUtility(IIDNormalizer).normalize(
             self.review_state())
 
     def appendViewAction(self):
-        """Decide whether to produce a string /view to append to links in
-        results listings.
-        """
+        # Decide whether to produce a string /view to append to links in
+        # results listings.
         registry = getUtility(IRegistry)
         types = registry.get('plone.types_use_view_action_in_listings', [])
         if self.portal_type in types:
@@ -125,8 +123,7 @@ def appendViewAction(self):
         return ''
 
     def isVisibleInNav(self):
-        """True, if this item should be visible in navigation trees.
-        """
+        # True, if this item should be visible in navigation trees.
         if hasattr(self, 'exclude_from_nav') and (
                 self.exclude_from_nav()
                 if callable(self.exclude_from_nav)
diff --git a/plone/app/contentlisting/realobject.py b/plone/app/contentlisting/realobject.py
index 68087ca..f55ee6e 100644
--- a/plone/app/contentlisting/realobject.py
+++ b/plone/app/contentlisting/realobject.py
@@ -42,11 +42,9 @@ def getObject(self):
         return self._realobject
 
     def getDataOrigin(self):
-        """The origin of the data for the object.
-
-        Sometimes we just need to know if we are looking at a brain or
-        the real object.
-        """
+        # The origin of the data for the object.
+        # Sometimes we just need to know if we are looking at a brain or
+        # the real object.
         return self.getObject()
 
     # a base set of elements that are needed but not defined in dublin core
@@ -70,7 +68,7 @@ def review_state(self):
         return wftool.getInfoFor(obj, 'review_state')
 
     def Type(self):
-        """Dublin Core element - Object type."""
+        # Dublin Core element - Object type.
         obj = self.getObject()
         typestool = getToolByName(obj, 'portal_types')
         ti = typestool.getTypeInfo(obj)


