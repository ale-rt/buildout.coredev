Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T09:02:48+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/plone.app.contenttypes/commit/08844e7d1e132704286e597b6489fc318e79cb43

Adapted changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index b2d0069..d31cbcb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -41,6 +41,13 @@ Fixes:
 
 - Also remove collections upon uninstalling.
   [pbauer]
+- Various fixes while migrating custom contenttypes :
+  - do not fail if source object does not have a 'excludeFromNav' field;
+  - do not fail if source object field's label contains special characters;
+  - do not try to migrate assigned portlets if source object is not
+    portlet assignable.
+  [gbastien]
+
 
 - No longer try to install ATContentTypes-types on uninstalling.
   [pbauer]


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T09:03:04+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/plone.app.contenttypes/commit/7e80190b661c19567ac9eecc8dac950d76b05d12

Do not fail when migrating portlets if migrated object is not portlet assignable

Files changed:
M plone/app/contenttypes/migration/utils.py

diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index bfac29c..813f533 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -28,6 +28,7 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.portlets.constants import CONTEXT_BLACKLIST_STATUS_KEY
+from plone.portlets.interfaces import ILocalPortletAssignable
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
 from plone.uuid.interfaces import IUUID
@@ -258,6 +259,8 @@ def migrate_portlets(src_obj, dst_obj):
 
     # copy all portlet assignments (visibilty is stored as annotation
     # on the assignments and gets copied here too)
+    if not ILocalPortletAssignable.providedBy(src_obj):
+        return
     for manager in managers:
         column = getUtility(IPortletManager, manager)
         mappings = getMultiAdapter((src_obj, column),


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T09:03:15+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/plone.app.contenttypes/commit/c29df6d7068a8f34eed8dcbbb6296967391b1caa

Do not fail if migrated object does not have the 'excludeFromNav' field

Files changed:
M plone/app/contenttypes/migration/migration.py

diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index 78dffff..1e1121a 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -110,7 +110,8 @@ def beforeChange_store_comments_on_portal(self):
 
     def migrate_atctmetadata(self):
         field = self.old.getField('excludeFromNav')
-        self.new.exclude_from_nav = field.get(self.old)
+        if field:
+            self.new.exclude_from_nav = field.get(self.old)
 
     def migrate_custom(self):
         """Get all ICustomMigrator registered migrators and run the migration.


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T09:03:25+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/plone.app.contenttypes/commit/660f3d0752ee1387c3cc4f003a7a684c5ab70ca5

Do not fail if label of migrated object contains special chars

Files changed:
M plone/app/contenttypes/migration/custom_migration.py

diff --git a/plone/app/contenttypes/migration/custom_migration.py b/plone/app/contenttypes/migration/custom_migration.py
index ad2f6d8..f2cf461 100644
--- a/plone/app/contenttypes/migration/custom_migration.py
+++ b/plone/app/contenttypes/migration/custom_migration.py
@@ -1,6 +1,7 @@
 # -*- coding: UTF-8 -*-
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
@@ -150,7 +151,7 @@ def getFieldsForATTypeWithFTI(self, typename):
             return results
         for field in schema.fields():
             if not field.getName() in self.at_metadata_fields:
-                translated_label = translate(field.widget.label)
+                translated_label = translate(safe_unicode(field.widget.label))
                 results.append(
                     {'id': field.getName(),
                      'title': '%s (%s)' % (translated_label, field.getType()),


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T11:11:33+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/plone.app.contenttypes/commit/2493f2d427c4fe4eba2d450ceb4426299e5d9e23

Do not migrate portlet if not portlet assignable

Files changed:
M plone/app/contenttypes/migration/utils.py

diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index 813f533..71f3950 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -243,6 +243,8 @@ def migrate_portlets(src_obj, dst_obj):
     Also takes blocked portlet settings into account, keeps hidden portlets
     hidden and skips broken assignments.
     """
+    if not ILocalPortletAssignable.providedBy(src_obj):
+        return
 
     # also take custom portlet managers into account
     managers = [reg.name for reg in getSiteManager().registeredUtilities()
@@ -259,8 +261,6 @@ def migrate_portlets(src_obj, dst_obj):
 
     # copy all portlet assignments (visibilty is stored as annotation
     # on the assignments and gets copied here too)
-    if not ILocalPortletAssignable.providedBy(src_obj):
-        return
     for manager in managers:
         column = getUtility(IPortletManager, manager)
         mappings = getMultiAdapter((src_obj, column),


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T11:56:15+01:00
Author: Gauthier Bastien (gbastien) <g.bastien@imio.be>
Commit: https://github.com/plone/plone.app.contenttypes/commit/3ddc6992666faf733efa53494dfa688185916e74

do not migrate portlets if dst_obj is not portlet assignable

Files changed:
M plone/app/contenttypes/migration/utils.py

diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index 71f3950..8524b55 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -243,7 +243,8 @@ def migrate_portlets(src_obj, dst_obj):
     Also takes blocked portlet settings into account, keeps hidden portlets
     hidden and skips broken assignments.
     """
-    if not ILocalPortletAssignable.providedBy(src_obj):
+    if not ILocalPortletAssignable.providedBy(src_obj) or \
+       not ILocalPortletAssignable.providedBy(dst_obj):
         return
 
     # also take custom portlet managers into account


Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2016-03-17T12:09:40+01:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/plone.app.contenttypes/commit/332d4443589d6cdaf301b0e1415f538b6178b063

Merge pull request #335 from gbastien/master

Various fixes while migrating custom contenttypes

Files changed:
M CHANGES.rst
M plone/app/contenttypes/migration/custom_migration.py
M plone/app/contenttypes/migration/migration.py
M plone/app/contenttypes/migration/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index b2d0069..d31cbcb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -41,6 +41,13 @@ Fixes:
 
 - Also remove collections upon uninstalling.
   [pbauer]
+- Various fixes while migrating custom contenttypes :
+  - do not fail if source object does not have a 'excludeFromNav' field;
+  - do not fail if source object field's label contains special characters;
+  - do not try to migrate assigned portlets if source object is not
+    portlet assignable.
+  [gbastien]
+
 
 - No longer try to install ATContentTypes-types on uninstalling.
   [pbauer]
diff --git a/plone/app/contenttypes/migration/custom_migration.py b/plone/app/contenttypes/migration/custom_migration.py
index ad2f6d8..f2cf461 100644
--- a/plone/app/contenttypes/migration/custom_migration.py
+++ b/plone/app/contenttypes/migration/custom_migration.py
@@ -1,6 +1,7 @@
 # -*- coding: UTF-8 -*-
 from Products.ATContentTypes.content.schemata import ATContentTypeSchema
 from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.utils import safe_unicode
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
@@ -150,7 +151,7 @@ def getFieldsForATTypeWithFTI(self, typename):
             return results
         for field in schema.fields():
             if not field.getName() in self.at_metadata_fields:
-                translated_label = translate(field.widget.label)
+                translated_label = translate(safe_unicode(field.widget.label))
                 results.append(
                     {'id': field.getName(),
                      'title': '%s (%s)' % (translated_label, field.getType()),
diff --git a/plone/app/contenttypes/migration/migration.py b/plone/app/contenttypes/migration/migration.py
index 78dffff..1e1121a 100644
--- a/plone/app/contenttypes/migration/migration.py
+++ b/plone/app/contenttypes/migration/migration.py
@@ -110,7 +110,8 @@ def beforeChange_store_comments_on_portal(self):
 
     def migrate_atctmetadata(self):
         field = self.old.getField('excludeFromNav')
-        self.new.exclude_from_nav = field.get(self.old)
+        if field:
+            self.new.exclude_from_nav = field.get(self.old)
 
     def migrate_custom(self):
         """Get all ICustomMigrator registered migrators and run the migration.
diff --git a/plone/app/contenttypes/migration/utils.py b/plone/app/contenttypes/migration/utils.py
index bfac29c..8524b55 100644
--- a/plone/app/contenttypes/migration/utils.py
+++ b/plone/app/contenttypes/migration/utils.py
@@ -28,6 +28,7 @@
 from plone.dexterity.interfaces import IDexterityContent
 from plone.dexterity.interfaces import IDexterityFTI
 from plone.portlets.constants import CONTEXT_BLACKLIST_STATUS_KEY
+from plone.portlets.interfaces import ILocalPortletAssignable
 from plone.portlets.interfaces import IPortletAssignmentMapping
 from plone.portlets.interfaces import IPortletManager
 from plone.uuid.interfaces import IUUID
@@ -242,6 +243,9 @@ def migrate_portlets(src_obj, dst_obj):
     Also takes blocked portlet settings into account, keeps hidden portlets
     hidden and skips broken assignments.
     """
+    if not ILocalPortletAssignable.providedBy(src_obj) or \
+       not ILocalPortletAssignable.providedBy(dst_obj):
+        return
 
     # also take custom portlet managers into account
     managers = [reg.name for reg in getSiteManager().registeredUtilities()


