Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2016-05-02T23:04:02+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.forcada@freitag.de>
Commit: https://github.com/plone/plone.app.dexterity/commit/f8b6ac276724366a0890bbb08a9d306ed88437d7

Minor cleanups

- fix a header
- update a link
- fix a typo

Files changed:
M docs/advanced/custom-add-and-edit-forms.rst

diff --git a/docs/advanced/custom-add-and-edit-forms.rst b/docs/advanced/custom-add-and-edit-forms.rst
index e7c088c..7a7e673 100644
--- a/docs/advanced/custom-add-and-edit-forms.rst
+++ b/docs/advanced/custom-add-and-edit-forms.rst
@@ -1,5 +1,5 @@
 Custom add and edit forms
-============================
+=========================
 
 **Using `z3c.form`_ to build custom forms**
 
@@ -95,15 +95,18 @@ It is even possible to create new types through the web that re-use existing
 classes and factories.
 
 For this reason, add forms are looked up via a namespace traversal
-adapter alled ``++add++``.
+adapter called ``++add++``.
 You may have noticed this in the URLs to add forms already.
 What actually happens is this:
 
 - Plone renders the :guilabel:`add` menu.
+
   - To do so, it looks, among other places, for actions in the *folder/add* category. This category is provided by the ``portal_types`` tool.
   - The *folder/add* action category is constructed by looking up the ``add_view_expr`` property on the FTIs of all addable types. This is a TALES expression telling the add menu which URL to use.
   - The default ``add_view_expr`` in Dexterity (and CMF 2.2) is ``string:${folder_url}/++add++${fti/getId}``. That is, it uses the ``++add++`` traversal namespace with an argument containing the FTI name.
+
 - A user clicks on an entry in the menu and is taken to a URL like ``/path/to/folder/++add++my.type``.
+
     - The ``++add++`` namespace adapter looks up the FTI with the given name, and gets its ``factory`` property.
     - The ``factory`` property of an FTI gives the name of a particular ``zope.component.interfaces.IFactory`` utility, which is used later to construct an instance of the content object.  Dexterity automatically registers a factory instance for each type, with a name that matches the type name, although it is possible to use an existing factory name in a new type.
       This allows administrators to create new “logical” types that are
@@ -121,10 +124,12 @@ What actually happens is this:
       The fallback is an unnamed adapter from ``(context, request, fti)``.
       The default Dexterity add form is registered as such an adapter,
       specific to the ``IDexterityFTI`` interface.
+
 - The form is rendered like any other ``z3c.form`` form instance,
   and is subject to validation,
   which may cause it to be loaded several times.
 - Eventually, the form is successfully submitted. At this point:
+
     - The standard ``AddForm`` base class will look up the factory from the FTI reference it holds and call it to create an instance.
     - The default Dexterity factory looks at the ``klass`` [*]_ attribute of the FTI to determine the actual content class to use, creates an object and initialises it.
     - The ``portal_type`` attribute of the newly created instance is set to
@@ -207,6 +212,6 @@ and `plone.autoform`_ properties and methods.
 See the `z3c.form`_ documentation on add forms for more details.
 
 
-.. _z3c.form: http://docs.zope.org/z3c.form
+.. _z3c.form: http://pythonhosted.org/z3c.form
 .. _plone.z3cform: http://pypi.python.org/pypi/plone.z3cform
 .. _plone.autoform: http://pypi.python.org/pypi/plone.autoform


Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2016-05-03T14:58:53+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.dexterity/commit/ecbc4c16547917437cf0e49879cbc1addbb2d832

Merge pull request #214 from plone/gforcada-patch-1

Minor cleanups

Files changed:
M docs/advanced/custom-add-and-edit-forms.rst

diff --git a/docs/advanced/custom-add-and-edit-forms.rst b/docs/advanced/custom-add-and-edit-forms.rst
index e7c088c..7a7e673 100644
--- a/docs/advanced/custom-add-and-edit-forms.rst
+++ b/docs/advanced/custom-add-and-edit-forms.rst
@@ -1,5 +1,5 @@
 Custom add and edit forms
-============================
+=========================
 
 **Using `z3c.form`_ to build custom forms**
 
@@ -95,15 +95,18 @@ It is even possible to create new types through the web that re-use existing
 classes and factories.
 
 For this reason, add forms are looked up via a namespace traversal
-adapter alled ``++add++``.
+adapter called ``++add++``.
 You may have noticed this in the URLs to add forms already.
 What actually happens is this:
 
 - Plone renders the :guilabel:`add` menu.
+
   - To do so, it looks, among other places, for actions in the *folder/add* category. This category is provided by the ``portal_types`` tool.
   - The *folder/add* action category is constructed by looking up the ``add_view_expr`` property on the FTIs of all addable types. This is a TALES expression telling the add menu which URL to use.
   - The default ``add_view_expr`` in Dexterity (and CMF 2.2) is ``string:${folder_url}/++add++${fti/getId}``. That is, it uses the ``++add++`` traversal namespace with an argument containing the FTI name.
+
 - A user clicks on an entry in the menu and is taken to a URL like ``/path/to/folder/++add++my.type``.
+
     - The ``++add++`` namespace adapter looks up the FTI with the given name, and gets its ``factory`` property.
     - The ``factory`` property of an FTI gives the name of a particular ``zope.component.interfaces.IFactory`` utility, which is used later to construct an instance of the content object.  Dexterity automatically registers a factory instance for each type, with a name that matches the type name, although it is possible to use an existing factory name in a new type.
       This allows administrators to create new “logical” types that are
@@ -121,10 +124,12 @@ What actually happens is this:
       The fallback is an unnamed adapter from ``(context, request, fti)``.
       The default Dexterity add form is registered as such an adapter,
       specific to the ``IDexterityFTI`` interface.
+
 - The form is rendered like any other ``z3c.form`` form instance,
   and is subject to validation,
   which may cause it to be loaded several times.
 - Eventually, the form is successfully submitted. At this point:
+
     - The standard ``AddForm`` base class will look up the factory from the FTI reference it holds and call it to create an instance.
     - The default Dexterity factory looks at the ``klass`` [*]_ attribute of the FTI to determine the actual content class to use, creates an object and initialises it.
     - The ``portal_type`` attribute of the newly created instance is set to
@@ -207,6 +212,6 @@ and `plone.autoform`_ properties and methods.
 See the `z3c.form`_ documentation on add forms for more details.
 
 
-.. _z3c.form: http://docs.zope.org/z3c.form
+.. _z3c.form: http://pythonhosted.org/z3c.form
 .. _plone.z3cform: http://pypi.python.org/pypi/plone.z3cform
 .. _plone.autoform: http://pypi.python.org/pypi/plone.autoform


