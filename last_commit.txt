Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2016-05-02T17:27:20-03:00
Author: Rafael Oliveira (rafaelbco) <rafaelbco@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/620482fd3546d7a0e1d3109243ac5fc9b60a8839

Improve @@version-view to handle more download URL patterns (fix #25)

Files changed:
A plone/app/versioningbehavior/tests/test_browser.py
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/configure.zcml
M plone/app/versioningbehavior/testing.py
M plone/app/versioningbehavior/tests/test_functional.py
M setup.py

diff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py
index 2999e9a..ed80975 100644
--- a/plone/app/versioningbehavior/browser.py
+++ b/plone/app/versioningbehavior/browser.py
@@ -3,53 +3,110 @@
 from Products.CMFCore.utils import getToolByName
 from zope.component import getMultiAdapter
 from zope.publisher.interfaces import NotFound
-
 import re
+from plone.rfc822.interfaces import IPrimaryFieldInfo
+from urllib import urlencode
 
 
 class VersionView(object):
+    """Renders the content-core slot of a version of a content item.
+
+    Currently it works by rendering the @@content-core view of the item and then converting the
+    links that points to files and images to use the @@download-version view.
+
+    Request parameters:
 
-    download_url_patterns = (
-        re.compile(r'/@@download/(?P<field_id>.*?)/(?P<filename>.*?)"'),
+    version_id -- Version ID.
+    """
 
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
+
+    _download_url_patterns = (
         # Behavior name before field name, like "LeadImage.image"
+        # Example: /++widget++form.widgets.my_field/@@download/my_file.txt
+        # Example: /++widget++form.widgets.my_interface.my_field/@@download/my_file.txt
+        # Example: /versions_history_form/++widget++form.widgets.my_field/@@download/my_file.txt
         re.compile(
-            r'/versions_history_form/'
-            r'\+\+widget\+\+form\.widgets\.\S+\.(?P<field_id>.*?)'
-            r'/@@download/(?P<filename>.*?)"'
+            r'/'
+            r'(versions_history_form/)?'
+            r'\+\+widget\+\+form\.widgets\.([a-zA-Z0-9_-]+\.)?(?P<field_id>[a-zA-Z0-9_-]+)'
+            r'/@@download/(?P<filename>[^"\']+)'
         ),
 
-        re.compile(
-            r'/versions_history_form/'
-            r'\+\+widget\+\+form\.widgets\.(?P<field_id>.*?)'
-            r'/@@download/(?P<filename>.*?)"'
-        ),
-    )
+        # Example: /@@download/my_field/my_file.txt
+        re.compile(r'/@@download/(?P<field_id>[a-zA-Z0-9_-]+)/(?P<filename>[^"\']+)'),
 
-    version_of_namedfile_template = (
-        r'/@@download-version?'
-        r'field_id=\g<field_id>&filename=\g<filename>&version_id={version_id}"'
+        # Example: /@@images/aedf-0123.png
+        re.compile(r'/@@images/[0-9a-f\-]+\.[a-z]+'),
     )
 
     def __call__(self):
-        version_id = self.request.version_id
+        version_id = self.request.get('version_id', None)
+        if not version_id:
+            raise ValueError(u'Missing parameter on the request: version_id')
+
         content_core_view = getMultiAdapter((self.context, self.request), name='content-core')
         html = content_core_view()
+        return self._convert_download_links(html, version_id)
+
+    def _convert_download_links(self, html, version_id):
         transformed_html = html
 
-        for pattern in self.download_url_patterns:
-            repl = self.version_of_namedfile_template.format(version_id=version_id)
+        def repl(match):
+            groups = match.groupdict()
+            return self._get_download_version_link(
+                version_id=version_id,
+                field_id=groups.get('field_id'),
+                filename=groups.get('filename'),
+            )
+
+        for pattern in self._download_url_patterns:
             transformed_html = pattern.sub(repl, transformed_html)
 
         return transformed_html
 
+    def _get_download_version_link(self, version_id, field_id=None, filename=None):
+        parameters = [('version_id', version_id)]
+
+        if field_id:
+            parameters.append(('field_id', field_id))
+
+        if filename:
+            parameters.append(('filename', filename))
+
+        query_string = urlencode(parameters)
+        return '/@@download-version?{}'.format(query_string)
+
 
 class DownloadVersion(object):
+    """Downloads a file in a field of a content item at an specific version.
+
+
+    Request parameters:
+
+    version_id -- Version ID.
+    field_id -- (optional) ID of the field (eg.: "file" or "image"). If ommited then the
+                primary field will be used.
+    filename -- (optional) Filename. If ommited then the filename HTTP header won't be set on the
+                response, but the download will occur normally.
+    do_not_stream -- (optional) Do not stream the file.
+    """
+
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
 
     def __call__(self):
-        version_id = self.request.version_id
-        field_id = self.request.field_id
-        filename = self.request.filename
+        version_id = self.request.get('version_id', None)
+        if not version_id:
+            raise ValueError(u'Missing parameter on the request: version_id')
+
+        field_id = self.request.get('field_id', IPrimaryFieldInfo(self.context).fieldname)
+        filename = self.request.get('filename')
+        do_not_stream = self.request.get('do_not_stream')
+
         repository = getToolByName(self.context, 'portal_repository')
         old_obj = repository.retrieve(self.context, version_id).object
 
@@ -62,4 +119,7 @@ def __call__(self):
 
         set_headers(file_, self.request.response, filename=filename)
 
+        if do_not_stream:
+            return file_.data
+
         return stream_data(file_)
diff --git a/plone/app/versioningbehavior/configure.zcml b/plone/app/versioningbehavior/configure.zcml
index a07bd77..cbd30d4 100644
--- a/plone/app/versioningbehavior/configure.zcml
+++ b/plone/app/versioningbehavior/configure.zcml
@@ -12,6 +12,8 @@
 
     <include package="plone.behavior" file="meta.zcml" />
 
+    <include package="plone.rfc822" />
+
     <five:registerPackage package="." initialize=".initialize" />
 
     <include package="plone.app.dexterity" />
diff --git a/plone/app/versioningbehavior/testing.py b/plone/app/versioningbehavior/testing.py
index fe18e4e..3ebcfec 100644
--- a/plone/app/versioningbehavior/testing.py
+++ b/plone/app/versioningbehavior/testing.py
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import applyProfile
+from Products.CMFCore.utils import getToolByName
+from Products.CMFDiffTool.TextDiff import TextDiff
 from plone.app.testing import FunctionalTesting
+from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
+from plone.app.testing import applyProfile
 from plone.dexterity.fti import DexterityFTI
-from Products.CMFCore.utils import getToolByName
-from Products.CMFDiffTool.TextDiff import TextDiff
 from zope.configuration import xmlconfig
 
 # Make it work with plone.protect < 3.0.0 where the `auto` module is not available.
@@ -44,12 +45,18 @@ def registerVersionedDocumentFTI(self, portal):
                 'plone.app.dexterity.behaviors.metadata.IBasic',
             ),
             model_source="""
-                <model xmlns="http://namespaces.plone.org/supermodel/schema">
+                <model xmlns="http://namespaces.plone.org/supermodel/schema"
+                       xmlns:marshal="http://namespaces.plone.org/supermodel/marshal">
                     <schema>
                         <field name="text" type="zope.schema.Text">
                             <title>Text</title>
                             <required>False</required>
                         </field>
+                        <field name="file" type="plone.namedfile.field.NamedBlobFile"
+                            marshal:primary="true">
+                          <title>File</title>
+                          <required>False</required>
+                        </field>
                     </schema>
                 </model>
                 """)
@@ -79,3 +86,6 @@ def testTearDown(self):
 VERSIONING_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(VERSIONING_FIXTURE,),
     name='plone.app.versioningbehavior:functional')
+VERSIONING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(VERSIONING_FIXTURE,),
+    name='plone.app.versioningbehavior:integration')
diff --git a/plone/app/versioningbehavior/tests/test_browser.py b/plone/app/versioningbehavior/tests/test_browser.py
new file mode 100644
index 0000000..a2ec600
--- /dev/null
+++ b/plone/app/versioningbehavior/tests/test_browser.py
@@ -0,0 +1,205 @@
+# -*- coding: utf-8 -*-
+"""Tests for the `browser` module."""
+from .. import browser
+from ..testing import VERSIONING_INTEGRATION_TESTING
+from plone.app.testing import TEST_USER_ID, TEST_USER_ROLES, setRoles
+from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID
+from zope.component import getMultiAdapter
+import unittest
+from plone.namedfile import NamedBlobFile
+
+
+class BaseViewTestCase(unittest.TestCase):
+
+    layer = VERSIONING_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES + ['Manager'])
+        self.portal.invokeFactory(
+            type_name=TEST_CONTENT_TYPE_ID,
+            id='obj1',
+            title=u'Object 1 Title',
+            description=u'Description of obect number 1',
+            text=u'Object 1 some footext.',
+            file=NamedBlobFile(filename=u'object_1_file.txt', data='Object 1 Data'),
+        )
+        self.obj1 = self.portal['obj1']
+
+    def _render_view(self, view, url=None, params=None):
+        if url:
+            self.request.set('ACTUAL_URL', url)
+            self.request.set('URL', url)
+
+        self.request.form.clear()
+        self.request.form.update(params or {})
+        return view()
+
+
+class VersionViewTestCase(BaseViewTestCase):
+    """Tests for the `VersionView` view."""
+
+    def test_version_view_is_registered(self):
+        obj = self.obj1
+        view = getMultiAdapter((obj, self.request), name='version-view')
+        self.assertIsInstance(view, browser.VersionView)
+
+    def test_convert_download_links(self):
+        """Tests for the `_get_download_version_link` method."""
+        obj = self.obj1
+        view = browser.VersionView(obj, self.request)
+        href_template = u'<a href="{}" />'
+
+        def _assert(old_path, version, field=None, filename=None):
+            old_url = obj.absolute_url() + old_path
+            old = href_template.format(old_url)
+            new = view._convert_download_links(old, version)
+            correct_url = obj.absolute_url() + view._get_download_version_link(
+                version_id=version,
+                field_id=field,
+                filename=filename,
+            )
+            correct = href_template.format(correct_url)
+            self.assertEqual(new, correct)
+
+        _assert(
+            '/@@download/my_field/my_file.txt',
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/versions_history_form/++widget++form.widgets.my_interface.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/versions_history_form/++widget++form.widgets.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/++widget++form.widgets.my_interface.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/++widget++form.widgets.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            '/@@images/abde-01fa.png',
+            version='my_version',
+        )
+
+    def test_get_download_version_link(self):
+        """Tests for the `_get_download_version_link` method."""
+        obj = self.obj1
+        view = browser.VersionView(obj, self.request)
+
+        def _assert(version, correct_url, field=None, filename=None):
+            actual = view._get_download_version_link(
+                version_id=version,
+                field_id=field,
+                filename=filename,
+            )
+            self.assertEqual(actual, correct_url)
+
+        _assert(
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+            correct_url=(
+                '/@@download-version?'
+                'version_id=my_version&field_id=my_field&filename=my_file.txt'
+            ),
+        )
+        _assert(
+            version='my_version',
+            filename='my_file.txt',
+            correct_url='/@@download-version?version_id=my_version&filename=my_file.txt',
+        )
+        _assert(
+            version='my_version',
+            field='my_field',
+            correct_url='/@@download-version?version_id=my_version&field_id=my_field',
+        )
+        _assert(
+            version='my_version',
+            correct_url='/@@download-version?version_id=my_version',
+        )
+
+    def test_call(self):
+        """Tests for the `__call__` method."""
+        obj = self.obj1
+        view = browser.VersionView(obj, self.request)
+
+        html = self._render_view(view=obj, url=obj.absolute_url())
+        download_url = '{}/++widget++form.widgets.file/@@download/{}'.format(
+            obj.absolute_url(),
+            obj.file.filename,
+        )
+        self.assertTrue(download_url in html)
+
+        html = self._render_view(view=view, url=obj.absolute_url(), params={'version_id': '0'})
+        download_url = '{}/@@download-version?version_id=0&field_id=file&filename={}'.format(
+            obj.absolute_url(),
+            obj.file.filename,
+        )
+        self.assertTrue(download_url in html)
+
+
+class DownloadViewTestCase(BaseViewTestCase):
+    """Tests for the `VersionView` view."""
+
+    def test_should_download_file_correctly(self):
+        obj = self.obj1
+        view = browser.DownloadVersion(obj, self.request)
+
+        # We're not passing the field name, the view has to find out which is the primary field.
+        data = self._render_view(
+            view,
+            url=obj.absolute_url(),
+            params={'version_id': '0', 'do_not_stream': '1'})
+        self.assertTrue(data)
+        self.assertEqual(obj.file.data, data)
+
+        # Now we pass field name and filename.
+        data = self._render_view(
+            view,
+            url=obj.absolute_url(),
+            params={
+                'version_id': '0',
+                'do_not_stream': '1',
+                'field': 'file',
+                'filename': 'some_file_name.bin',
+            }
+        )
+        self.assertTrue(data)
+        self.assertEqual(obj.file.data, data)
+        self.assertTrue(
+            'some_file_name.bin' in self.request.response.headers['content-disposition']
+        )
diff --git a/plone/app/versioningbehavior/tests/test_functional.py b/plone/app/versioningbehavior/tests/test_functional.py
index e0a02f8..1d09fbf 100644
--- a/plone/app/versioningbehavior/tests/test_functional.py
+++ b/plone/app/versioningbehavior/tests/test_functional.py
@@ -1,17 +1,16 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
+from plone.app.testing import setRoles
 from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID
 from plone.app.versioningbehavior.testing import VERSIONING_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
-from unittest2 import TestCase
-
 import transaction
+import unittest
 
 
-class FunctionalTestCase(TestCase):
+class FunctionalTestCase(unittest.TestCase):
 
     layer = VERSIONING_FUNCTIONAL_TESTING
 
@@ -74,6 +73,7 @@ def _assert_versions_history_form(self, version_id, obj_id, title, text):
             '%s/%s/versions_history_form?version_id=%s'
             % (self.portal_url, obj_id, version_id))
         self.assertIn('Working Copy', self.browser.contents)
+
         if version_id == 0:
             self.assertIn(
                 '/%s/versions_history_form?version_id=%s' % (obj_id, version_id),
diff --git a/setup.py b/setup.py
index fcde346..8ad7b0f 100644
--- a/setup.py
+++ b/setup.py
@@ -47,6 +47,7 @@
         'plone.autoform',
         'plone.dexterity',
         'plone.namedfile[blobs]',
+        'plone.rfc822',
         'Products.CMFEditions>2.2.9',
         'setuptools',
         'zope.container',


Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2016-05-02T18:06:36-03:00
Author: Rafael Oliveira (rafaelbco) <rafaelbco@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/620fdc20505c50e3acfc988fe83975e17c57d9b8

Fix failing tests

Files changed:
M plone/app/versioningbehavior/tests/test_IntegrationTests.py

diff --git a/plone/app/versioningbehavior/tests/test_IntegrationTests.py b/plone/app/versioningbehavior/tests/test_IntegrationTests.py
index d74fad8..b9c39f1 100644
--- a/plone/app/versioningbehavior/tests/test_IntegrationTests.py
+++ b/plone/app/versioningbehavior/tests/test_IntegrationTests.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from ..testing import VERSIONING_INTEGRATION_TESTING
 from plone.dexterity.fti import DexterityFTI
 from Products.CMFCore.utils import getToolByName
 from Products.CMFEditions.tests import test_IntegrationTests
@@ -11,6 +12,8 @@ class TestDexterityIntegration(test_IntegrationTests.TestIntegration):
     dexterity Document and dexterity Folder.
     """
 
+    layer = VERSIONING_INTEGRATION_TESTING
+
     def afterSetUp(self):
         # get some tools
         types_tool = getToolByName(self.portal, 'portal_types')
@@ -46,7 +49,8 @@ def afterSetUp(self):
                 </schema>
             </model>
         """)
-        types_tool._delObject('Document')
+        if 'Document' in types_tool.objectIds():
+            types_tool._delObject('Document')
         types_tool._setObject('Document', document_fti)
 
         # ... and a folder
@@ -61,7 +65,8 @@ def afterSetUp(self):
                 'plone.app.dexterity.behaviors.metadata.IBasic',
                 'plone.app.dexterity.behaviors.metadata.IRelatedItems',
             ))
-        types_tool._delObject('Folder')
+        if 'Folder' in types_tool.objectIds():
+            types_tool._delObject('Folder')
         types_tool._setObject('Folder', folder_fti)
 
         # lets disable versioning while creating, otherwise we'd have to
@@ -86,6 +91,10 @@ def afterSetUp(self):
         vtypes.append('Dpcument')
         repo_tool.setVersionableContentTypes(vtypes)
 
+        # We have a test that fails without workflow.
+        wf_tool = getToolByName(self.portal, 'portal_workflow')
+        wf_tool.setChainForPortalTypes(('Document',), ('simple_publication_workflow',))
+
     def test13_revertUpdatesCatalog(self):
         # This test in CMFEditions uses doc.edit, but we have no archetypes
         # objects so doc.edit is portal.edit (acquisition), which is wrong...


Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2016-05-02T18:14:11-03:00
Author: Rafael Oliveira (rafaelbco) <rafaelbco@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/f47c7f3cde62616dadb621b3c9675cbf61e422ec

Fix failing tests

Files changed:
M plone/app/versioningbehavior/tests/test_modifiers.py

diff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py
index 87c717e..1310135 100644
--- a/plone/app/versioningbehavior/tests/test_modifiers.py
+++ b/plone/app/versioningbehavior/tests/test_modifiers.py
@@ -16,6 +16,7 @@
 from zope.component import getUtility
 from zope.configuration import xmlconfig
 from zope.interface import alsoProvides, Interface
+from ..testing import VERSIONING_INTEGRATION_TESTING
 
 
 class IBlobFile(model.Schema):
@@ -40,6 +41,8 @@ class IRelationsBehavior(model.Schema):
 
 class TestModifiers(CMFEditionsBaseTestCase):
 
+    layer = VERSIONING_INTEGRATION_TESTING
+
     def afterSetUp(self):
         # we need to have the Manager role to be able to add things
         # to the portal root


Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2016-05-03T12:53:22-03:00
Author: Rafael Oliveira (rafaelbco) <rafaelbco@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/cfeae6dc5ab5fa05bf4b715618f3c2d004ad414e

Merge pull request #26 from plone/fix_25_improve_version_view

Fix #25: URLs like `${absolute_url}/@@images/${uuid}.png` are not converted on `@@version-view`

Files changed:
A plone/app/versioningbehavior/tests/test_browser.py
M plone/app/versioningbehavior/browser.py
M plone/app/versioningbehavior/configure.zcml
M plone/app/versioningbehavior/testing.py
M plone/app/versioningbehavior/tests/test_IntegrationTests.py
M plone/app/versioningbehavior/tests/test_functional.py
M plone/app/versioningbehavior/tests/test_modifiers.py
M setup.py

diff --git a/plone/app/versioningbehavior/browser.py b/plone/app/versioningbehavior/browser.py
index 2999e9a..ed80975 100644
--- a/plone/app/versioningbehavior/browser.py
+++ b/plone/app/versioningbehavior/browser.py
@@ -3,53 +3,110 @@
 from Products.CMFCore.utils import getToolByName
 from zope.component import getMultiAdapter
 from zope.publisher.interfaces import NotFound
-
 import re
+from plone.rfc822.interfaces import IPrimaryFieldInfo
+from urllib import urlencode
 
 
 class VersionView(object):
+    """Renders the content-core slot of a version of a content item.
+
+    Currently it works by rendering the @@content-core view of the item and then converting the
+    links that points to files and images to use the @@download-version view.
+
+    Request parameters:
 
-    download_url_patterns = (
-        re.compile(r'/@@download/(?P<field_id>.*?)/(?P<filename>.*?)"'),
+    version_id -- Version ID.
+    """
 
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
+
+    _download_url_patterns = (
         # Behavior name before field name, like "LeadImage.image"
+        # Example: /++widget++form.widgets.my_field/@@download/my_file.txt
+        # Example: /++widget++form.widgets.my_interface.my_field/@@download/my_file.txt
+        # Example: /versions_history_form/++widget++form.widgets.my_field/@@download/my_file.txt
         re.compile(
-            r'/versions_history_form/'
-            r'\+\+widget\+\+form\.widgets\.\S+\.(?P<field_id>.*?)'
-            r'/@@download/(?P<filename>.*?)"'
+            r'/'
+            r'(versions_history_form/)?'
+            r'\+\+widget\+\+form\.widgets\.([a-zA-Z0-9_-]+\.)?(?P<field_id>[a-zA-Z0-9_-]+)'
+            r'/@@download/(?P<filename>[^"\']+)'
         ),
 
-        re.compile(
-            r'/versions_history_form/'
-            r'\+\+widget\+\+form\.widgets\.(?P<field_id>.*?)'
-            r'/@@download/(?P<filename>.*?)"'
-        ),
-    )
+        # Example: /@@download/my_field/my_file.txt
+        re.compile(r'/@@download/(?P<field_id>[a-zA-Z0-9_-]+)/(?P<filename>[^"\']+)'),
 
-    version_of_namedfile_template = (
-        r'/@@download-version?'
-        r'field_id=\g<field_id>&filename=\g<filename>&version_id={version_id}"'
+        # Example: /@@images/aedf-0123.png
+        re.compile(r'/@@images/[0-9a-f\-]+\.[a-z]+'),
     )
 
     def __call__(self):
-        version_id = self.request.version_id
+        version_id = self.request.get('version_id', None)
+        if not version_id:
+            raise ValueError(u'Missing parameter on the request: version_id')
+
         content_core_view = getMultiAdapter((self.context, self.request), name='content-core')
         html = content_core_view()
+        return self._convert_download_links(html, version_id)
+
+    def _convert_download_links(self, html, version_id):
         transformed_html = html
 
-        for pattern in self.download_url_patterns:
-            repl = self.version_of_namedfile_template.format(version_id=version_id)
+        def repl(match):
+            groups = match.groupdict()
+            return self._get_download_version_link(
+                version_id=version_id,
+                field_id=groups.get('field_id'),
+                filename=groups.get('filename'),
+            )
+
+        for pattern in self._download_url_patterns:
             transformed_html = pattern.sub(repl, transformed_html)
 
         return transformed_html
 
+    def _get_download_version_link(self, version_id, field_id=None, filename=None):
+        parameters = [('version_id', version_id)]
+
+        if field_id:
+            parameters.append(('field_id', field_id))
+
+        if filename:
+            parameters.append(('filename', filename))
+
+        query_string = urlencode(parameters)
+        return '/@@download-version?{}'.format(query_string)
+
 
 class DownloadVersion(object):
+    """Downloads a file in a field of a content item at an specific version.
+
+
+    Request parameters:
+
+    version_id -- Version ID.
+    field_id -- (optional) ID of the field (eg.: "file" or "image"). If ommited then the
+                primary field will be used.
+    filename -- (optional) Filename. If ommited then the filename HTTP header won't be set on the
+                response, but the download will occur normally.
+    do_not_stream -- (optional) Do not stream the file.
+    """
+
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
 
     def __call__(self):
-        version_id = self.request.version_id
-        field_id = self.request.field_id
-        filename = self.request.filename
+        version_id = self.request.get('version_id', None)
+        if not version_id:
+            raise ValueError(u'Missing parameter on the request: version_id')
+
+        field_id = self.request.get('field_id', IPrimaryFieldInfo(self.context).fieldname)
+        filename = self.request.get('filename')
+        do_not_stream = self.request.get('do_not_stream')
+
         repository = getToolByName(self.context, 'portal_repository')
         old_obj = repository.retrieve(self.context, version_id).object
 
@@ -62,4 +119,7 @@ def __call__(self):
 
         set_headers(file_, self.request.response, filename=filename)
 
+        if do_not_stream:
+            return file_.data
+
         return stream_data(file_)
diff --git a/plone/app/versioningbehavior/configure.zcml b/plone/app/versioningbehavior/configure.zcml
index a07bd77..cbd30d4 100644
--- a/plone/app/versioningbehavior/configure.zcml
+++ b/plone/app/versioningbehavior/configure.zcml
@@ -12,6 +12,8 @@
 
     <include package="plone.behavior" file="meta.zcml" />
 
+    <include package="plone.rfc822" />
+
     <five:registerPackage package="." initialize=".initialize" />
 
     <include package="plone.app.dexterity" />
diff --git a/plone/app/versioningbehavior/testing.py b/plone/app/versioningbehavior/testing.py
index fe18e4e..3ebcfec 100644
--- a/plone/app/versioningbehavior/testing.py
+++ b/plone/app/versioningbehavior/testing.py
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import applyProfile
+from Products.CMFCore.utils import getToolByName
+from Products.CMFDiffTool.TextDiff import TextDiff
 from plone.app.testing import FunctionalTesting
+from plone.app.testing import IntegrationTesting
 from plone.app.testing import PLONE_FIXTURE
 from plone.app.testing import PloneSandboxLayer
+from plone.app.testing import applyProfile
 from plone.dexterity.fti import DexterityFTI
-from Products.CMFCore.utils import getToolByName
-from Products.CMFDiffTool.TextDiff import TextDiff
 from zope.configuration import xmlconfig
 
 # Make it work with plone.protect < 3.0.0 where the `auto` module is not available.
@@ -44,12 +45,18 @@ def registerVersionedDocumentFTI(self, portal):
                 'plone.app.dexterity.behaviors.metadata.IBasic',
             ),
             model_source="""
-                <model xmlns="http://namespaces.plone.org/supermodel/schema">
+                <model xmlns="http://namespaces.plone.org/supermodel/schema"
+                       xmlns:marshal="http://namespaces.plone.org/supermodel/marshal">
                     <schema>
                         <field name="text" type="zope.schema.Text">
                             <title>Text</title>
                             <required>False</required>
                         </field>
+                        <field name="file" type="plone.namedfile.field.NamedBlobFile"
+                            marshal:primary="true">
+                          <title>File</title>
+                          <required>False</required>
+                        </field>
                     </schema>
                 </model>
                 """)
@@ -79,3 +86,6 @@ def testTearDown(self):
 VERSIONING_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(VERSIONING_FIXTURE,),
     name='plone.app.versioningbehavior:functional')
+VERSIONING_INTEGRATION_TESTING = IntegrationTesting(
+    bases=(VERSIONING_FIXTURE,),
+    name='plone.app.versioningbehavior:integration')
diff --git a/plone/app/versioningbehavior/tests/test_IntegrationTests.py b/plone/app/versioningbehavior/tests/test_IntegrationTests.py
index d74fad8..b9c39f1 100644
--- a/plone/app/versioningbehavior/tests/test_IntegrationTests.py
+++ b/plone/app/versioningbehavior/tests/test_IntegrationTests.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from ..testing import VERSIONING_INTEGRATION_TESTING
 from plone.dexterity.fti import DexterityFTI
 from Products.CMFCore.utils import getToolByName
 from Products.CMFEditions.tests import test_IntegrationTests
@@ -11,6 +12,8 @@ class TestDexterityIntegration(test_IntegrationTests.TestIntegration):
     dexterity Document and dexterity Folder.
     """
 
+    layer = VERSIONING_INTEGRATION_TESTING
+
     def afterSetUp(self):
         # get some tools
         types_tool = getToolByName(self.portal, 'portal_types')
@@ -46,7 +49,8 @@ def afterSetUp(self):
                 </schema>
             </model>
         """)
-        types_tool._delObject('Document')
+        if 'Document' in types_tool.objectIds():
+            types_tool._delObject('Document')
         types_tool._setObject('Document', document_fti)
 
         # ... and a folder
@@ -61,7 +65,8 @@ def afterSetUp(self):
                 'plone.app.dexterity.behaviors.metadata.IBasic',
                 'plone.app.dexterity.behaviors.metadata.IRelatedItems',
             ))
-        types_tool._delObject('Folder')
+        if 'Folder' in types_tool.objectIds():
+            types_tool._delObject('Folder')
         types_tool._setObject('Folder', folder_fti)
 
         # lets disable versioning while creating, otherwise we'd have to
@@ -86,6 +91,10 @@ def afterSetUp(self):
         vtypes.append('Dpcument')
         repo_tool.setVersionableContentTypes(vtypes)
 
+        # We have a test that fails without workflow.
+        wf_tool = getToolByName(self.portal, 'portal_workflow')
+        wf_tool.setChainForPortalTypes(('Document',), ('simple_publication_workflow',))
+
     def test13_revertUpdatesCatalog(self):
         # This test in CMFEditions uses doc.edit, but we have no archetypes
         # objects so doc.edit is portal.edit (acquisition), which is wrong...
diff --git a/plone/app/versioningbehavior/tests/test_browser.py b/plone/app/versioningbehavior/tests/test_browser.py
new file mode 100644
index 0000000..a2ec600
--- /dev/null
+++ b/plone/app/versioningbehavior/tests/test_browser.py
@@ -0,0 +1,205 @@
+# -*- coding: utf-8 -*-
+"""Tests for the `browser` module."""
+from .. import browser
+from ..testing import VERSIONING_INTEGRATION_TESTING
+from plone.app.testing import TEST_USER_ID, TEST_USER_ROLES, setRoles
+from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID
+from zope.component import getMultiAdapter
+import unittest
+from plone.namedfile import NamedBlobFile
+
+
+class BaseViewTestCase(unittest.TestCase):
+
+    layer = VERSIONING_INTEGRATION_TESTING
+
+    def setUp(self):
+        self.portal = self.layer['portal']
+        self.request = self.layer['request']
+        setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES + ['Manager'])
+        self.portal.invokeFactory(
+            type_name=TEST_CONTENT_TYPE_ID,
+            id='obj1',
+            title=u'Object 1 Title',
+            description=u'Description of obect number 1',
+            text=u'Object 1 some footext.',
+            file=NamedBlobFile(filename=u'object_1_file.txt', data='Object 1 Data'),
+        )
+        self.obj1 = self.portal['obj1']
+
+    def _render_view(self, view, url=None, params=None):
+        if url:
+            self.request.set('ACTUAL_URL', url)
+            self.request.set('URL', url)
+
+        self.request.form.clear()
+        self.request.form.update(params or {})
+        return view()
+
+
+class VersionViewTestCase(BaseViewTestCase):
+    """Tests for the `VersionView` view."""
+
+    def test_version_view_is_registered(self):
+        obj = self.obj1
+        view = getMultiAdapter((obj, self.request), name='version-view')
+        self.assertIsInstance(view, browser.VersionView)
+
+    def test_convert_download_links(self):
+        """Tests for the `_get_download_version_link` method."""
+        obj = self.obj1
+        view = browser.VersionView(obj, self.request)
+        href_template = u'<a href="{}" />'
+
+        def _assert(old_path, version, field=None, filename=None):
+            old_url = obj.absolute_url() + old_path
+            old = href_template.format(old_url)
+            new = view._convert_download_links(old, version)
+            correct_url = obj.absolute_url() + view._get_download_version_link(
+                version_id=version,
+                field_id=field,
+                filename=filename,
+            )
+            correct = href_template.format(correct_url)
+            self.assertEqual(new, correct)
+
+        _assert(
+            '/@@download/my_field/my_file.txt',
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/versions_history_form/++widget++form.widgets.my_interface.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/versions_history_form/++widget++form.widgets.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/++widget++form.widgets.my_interface.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            (
+                '/++widget++form.widgets.my_field'
+                '/@@download/my_file.txt'
+            ),
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+        )
+
+        _assert(
+            '/@@images/abde-01fa.png',
+            version='my_version',
+        )
+
+    def test_get_download_version_link(self):
+        """Tests for the `_get_download_version_link` method."""
+        obj = self.obj1
+        view = browser.VersionView(obj, self.request)
+
+        def _assert(version, correct_url, field=None, filename=None):
+            actual = view._get_download_version_link(
+                version_id=version,
+                field_id=field,
+                filename=filename,
+            )
+            self.assertEqual(actual, correct_url)
+
+        _assert(
+            version='my_version',
+            field='my_field',
+            filename='my_file.txt',
+            correct_url=(
+                '/@@download-version?'
+                'version_id=my_version&field_id=my_field&filename=my_file.txt'
+            ),
+        )
+        _assert(
+            version='my_version',
+            filename='my_file.txt',
+            correct_url='/@@download-version?version_id=my_version&filename=my_file.txt',
+        )
+        _assert(
+            version='my_version',
+            field='my_field',
+            correct_url='/@@download-version?version_id=my_version&field_id=my_field',
+        )
+        _assert(
+            version='my_version',
+            correct_url='/@@download-version?version_id=my_version',
+        )
+
+    def test_call(self):
+        """Tests for the `__call__` method."""
+        obj = self.obj1
+        view = browser.VersionView(obj, self.request)
+
+        html = self._render_view(view=obj, url=obj.absolute_url())
+        download_url = '{}/++widget++form.widgets.file/@@download/{}'.format(
+            obj.absolute_url(),
+            obj.file.filename,
+        )
+        self.assertTrue(download_url in html)
+
+        html = self._render_view(view=view, url=obj.absolute_url(), params={'version_id': '0'})
+        download_url = '{}/@@download-version?version_id=0&field_id=file&filename={}'.format(
+            obj.absolute_url(),
+            obj.file.filename,
+        )
+        self.assertTrue(download_url in html)
+
+
+class DownloadViewTestCase(BaseViewTestCase):
+    """Tests for the `VersionView` view."""
+
+    def test_should_download_file_correctly(self):
+        obj = self.obj1
+        view = browser.DownloadVersion(obj, self.request)
+
+        # We're not passing the field name, the view has to find out which is the primary field.
+        data = self._render_view(
+            view,
+            url=obj.absolute_url(),
+            params={'version_id': '0', 'do_not_stream': '1'})
+        self.assertTrue(data)
+        self.assertEqual(obj.file.data, data)
+
+        # Now we pass field name and filename.
+        data = self._render_view(
+            view,
+            url=obj.absolute_url(),
+            params={
+                'version_id': '0',
+                'do_not_stream': '1',
+                'field': 'file',
+                'filename': 'some_file_name.bin',
+            }
+        )
+        self.assertTrue(data)
+        self.assertEqual(obj.file.data, data)
+        self.assertTrue(
+            'some_file_name.bin' in self.request.response.headers['content-disposition']
+        )
diff --git a/plone/app/versioningbehavior/tests/test_functional.py b/plone/app/versioningbehavior/tests/test_functional.py
index e0a02f8..1d09fbf 100644
--- a/plone/app/versioningbehavior/tests/test_functional.py
+++ b/plone/app/versioningbehavior/tests/test_functional.py
@@ -1,17 +1,16 @@
 # -*- coding: utf-8 -*-
-from plone.app.testing import setRoles
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.app.testing import TEST_USER_PASSWORD
+from plone.app.testing import setRoles
 from plone.app.versioningbehavior.testing import TEST_CONTENT_TYPE_ID
 from plone.app.versioningbehavior.testing import VERSIONING_FUNCTIONAL_TESTING
 from plone.testing.z2 import Browser
-from unittest2 import TestCase
-
 import transaction
+import unittest
 
 
-class FunctionalTestCase(TestCase):
+class FunctionalTestCase(unittest.TestCase):
 
     layer = VERSIONING_FUNCTIONAL_TESTING
 
@@ -74,6 +73,7 @@ def _assert_versions_history_form(self, version_id, obj_id, title, text):
             '%s/%s/versions_history_form?version_id=%s'
             % (self.portal_url, obj_id, version_id))
         self.assertIn('Working Copy', self.browser.contents)
+
         if version_id == 0:
             self.assertIn(
                 '/%s/versions_history_form?version_id=%s' % (obj_id, version_id),
diff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py
index 87c717e..1310135 100644
--- a/plone/app/versioningbehavior/tests/test_modifiers.py
+++ b/plone/app/versioningbehavior/tests/test_modifiers.py
@@ -16,6 +16,7 @@
 from zope.component import getUtility
 from zope.configuration import xmlconfig
 from zope.interface import alsoProvides, Interface
+from ..testing import VERSIONING_INTEGRATION_TESTING
 
 
 class IBlobFile(model.Schema):
@@ -40,6 +41,8 @@ class IRelationsBehavior(model.Schema):
 
 class TestModifiers(CMFEditionsBaseTestCase):
 
+    layer = VERSIONING_INTEGRATION_TESTING
+
     def afterSetUp(self):
         # we need to have the Manager role to be able to add things
         # to the portal root
diff --git a/setup.py b/setup.py
index fcde346..8ad7b0f 100644
--- a/setup.py
+++ b/setup.py
@@ -47,6 +47,7 @@
         'plone.autoform',
         'plone.dexterity',
         'plone.namedfile[blobs]',
+        'plone.rfc822',
         'Products.CMFEditions>2.2.9',
         'setuptools',
         'zope.container',


