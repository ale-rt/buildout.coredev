Repository: icalendar


Branch: refs/heads/master
Date: 2017-10-23T14:56:09+02:00
Author: Jon Dufresne (jdufresne) <jon.dufresne@gmail.com>
Commit: https://github.com/collective/icalendar/commit/93e5d7b7c1d8f2aeb4b56d8d009f5ee83ec5abee

Fix invalid escape sequences in string and bytes literals (#245)

Invalid escape sequences have been deprecated in Python 3.6. See:

https://docs.python.org/3/whatsnew/3.6.html#deprecated-python-behavior

&gt; A backslash-character pair that is not a valid escape sequence now
&gt; generates a DeprecationWarning. Although this will eventually become a
&gt; SyntaxError, that will not be for several Python releases.

When warnings are enabled, this appears as:

  DeprecationWarning: invalid escape sequence ...

Sequences discovered through test suite.

Files changed:
M CHANGES.rst
M src/icalendar/parser.py
M src/icalendar/prop.py
M src/icalendar/tests/test_fixed_issues.py
M src/icalendar/tests/test_property_params.py
M src/icalendar/tests/test_unit_cal.py
M src/icalendar/tests/test_unit_prop.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 9f00b6c..9b11988 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -16,6 +16,7 @@ Bug fixes:
 
 - Fix non-ASCII TZID and TZNAME parameter handling #237 [clivest]
 - Wiki: update install instruction
+- Fix invalid escape sequences in string and bytes literals
 - *add item here*
 
 
diff --git a/src/icalendar/parser.py b/src/icalendar/parser.py
index 87587ad..8e3d885 100644
--- a/src/icalendar/parser.py
+++ b/src/icalendar/parser.py
@@ -39,11 +39,11 @@ def unescape_char(text):
                    .replace(u'\\;', u';')\
                    .replace(u'\\\\', u'\\')
     elif isinstance(text, compat.bytes_type):
-        return text.replace(b'\N', b'\n')\
+        return text.replace(b'\\N', b'\\n')\
                    .replace(b'\r\n', b'\n')\
                    .replace(b'\n', b'\n')\
-                   .replace(b'\,', b',')\
-                   .replace(b'\;', b';')\
+                   .replace(b'\\,', b',')\
+                   .replace(b'\\;', b';')\
                    .replace(b'\\\\', b'\\')
 
 
@@ -109,8 +109,8 @@ def param_value(value):
 # Could be improved
 
 # [\w-] because of the iCalendar RFC
-# \. because of the vCard RFC
-NAME = re.compile('[\w\.-]+')
+# . because of the vCard RFC
+NAME = re.compile(r'[\w.-]+')
 
 UNSAFE_CHAR = re.compile('[\x00-\x08\x0a-\x1f\x7F",:;]')
 QUNSAFE_CHAR = re.compile('[\x00-\x08\x0a-\x1f\x7F"]')
diff --git a/src/icalendar/prop.py b/src/icalendar/prop.py
index 57965fa..9fa6112 100644
--- a/src/icalendar/prop.py
+++ b/src/icalendar/prop.py
@@ -71,8 +71,8 @@
 WEEKS_PART = r'(\d+)W'
 DURATION_REGEX = re.compile(r'([-+]?)P(?:%s|%s)$'
                             % (WEEKS_PART, DATETIME_PART))
-WEEKDAY_RULE = re.compile('(?P<signal>[+-]?)(?P<relative>[\d]?)'
-                          '(?P<weekday>[\w]{2})$')
+WEEKDAY_RULE = re.compile(r'(?P<signal>[+-]?)(?P<relative>[\d]?)'
+                          r'(?P<weekday>[\w]{2})$')
 
 
 ####################################################
diff --git a/src/icalendar/tests/test_fixed_issues.py b/src/icalendar/tests/test_fixed_issues.py
index 985f6c2..b60a123 100644
--- a/src/icalendar/tests/test_fixed_issues.py
+++ b/src/icalendar/tests/test_fixed_issues.py
@@ -155,7 +155,7 @@ def test_issue_101(self):
 
         https://github.com/collective/icalendar/issues/101
         """
-        ical_str = """BEGIN:VCALENDAR
+        ical_str = r"""BEGIN:VCALENDAR
 VERSION:2.0
 X-WR-CALNAME:Kalender von acme\, admin
 PRODID:-//The Horde Project//Horde_iCalendar Library\, Horde 3.3.5//EN
diff --git a/src/icalendar/tests/test_property_params.py b/src/icalendar/tests/test_property_params.py
index 34bf9b9..a94ed27 100644
--- a/src/icalendar/tests/test_property_params.py
+++ b/src/icalendar/tests/test_property_params.py
@@ -212,5 +212,5 @@ def test_repr(self):
         """
         it = Parameters(parameter1='Value1')
         self.assertTrue(
-            re.match("Parameters\({u?'PARAMETER1': 'Value1'}\)", str(it))
+            re.match(r"Parameters\({u?'PARAMETER1': 'Value1'}\)", str(it))
         )
diff --git a/src/icalendar/tests/test_unit_cal.py b/src/icalendar/tests/test_unit_cal.py
index 1082ce7..5da47c0 100644
--- a/src/icalendar/tests/test_unit_cal.py
+++ b/src/icalendar/tests/test_unit_cal.py
@@ -322,21 +322,21 @@ def test_repr(self):
         component['key1'] = 'value1'
 
         self.assertTrue(
-            re.match("Component\({u?'KEY1': 'value1'}\)", str(component))
+            re.match(r"Component\({u?'KEY1': 'value1'}\)", str(component))
         )
 
         calendar = Calendar()
         calendar['key1'] = 'value1'
 
         self.assertTrue(
-            re.match("VCALENDAR\({u?'KEY1': 'value1'}\)", str(calendar))
+            re.match(r"VCALENDAR\({u?'KEY1': 'value1'}\)", str(calendar))
         )
 
         event = Event()
         event['key1'] = 'value1'
 
         self.assertTrue(
-            re.match("VEVENT\({u?'KEY1': 'value1'}\)", str(event))
+            re.match(r"VEVENT\({u?'KEY1': 'value1'}\)", str(event))
         )
 
         # Representation of nested Components
@@ -347,7 +347,7 @@ def test_repr(self):
 
         self.assertTrue(
             re.match(
-                "Component\({u?'KEY1': 'VALUE1'}, Component\({u?'KEY1': 'value1'}\), VCALENDAR\({u?'KEY1': 'value1'}, VEVENT\({u?'KEY1': 'value1'}\)\)\)",  # nopep8
+                r"Component\({u?'KEY1': 'VALUE1'}, Component\({u?'KEY1': 'value1'}\), VCALENDAR\({u?'KEY1': 'value1'}, VEVENT\({u?'KEY1': 'value1'}\)\)\)",  # nopep8
                 str(nested)
             )
         )
diff --git a/src/icalendar/tests/test_unit_prop.py b/src/icalendar/tests/test_unit_prop.py
index 2357efb..67f2067 100644
--- a/src/icalendar/tests/test_unit_prop.py
+++ b/src/icalendar/tests/test_unit_prop.py
@@ -354,7 +354,7 @@ def test_prop_vText(self):
                          u'Text ; with escaped, chars')
 
         t = vText.from_ical('A string with\\; some\\\\ characters in\\it')
-        self.assertEqual(t, "A string with; some\\ characters in\it")
+        self.assertEqual(t, "A string with; some\\ characters in\\it")
 
         # We are forgiving to utf-8 encoding errors:
         # We intentionally use a string with unexpected encoding


