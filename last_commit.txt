Repository: plone.app.theming


Branch: refs/heads/master
Date: 2016-11-08T09:47:01+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/2d7a0a6deebe3a32ce3b9588d6da73af1e692513

Remove roman monkey patch

Files changed:
M src/plone/app/theming/__init__.py

diff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py
index c08456a..a3022e6 100644
--- a/src/plone/app/theming/__init__.py
+++ b/src/plone/app/theming/__init__.py
@@ -2,12 +2,3 @@
 # make this a namespace packages (plone.app.theming.plugins is an
 # extensible python namespace
 __import__('pkg_resources').declare_namespace(__name__)
-
-# Some systems have a broken/missing ``roman`` module; monkey patch one in
-# XXX: DO we still need this?
-try:
-    import roman
-except ImportError:
-    from plone.app.theming import _roman
-    import sys
-    sys.modules['roman'] = _roman


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2016-11-08T09:47:31+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/1c02120552a9fefa478d2be29de853673161ae27

Delete _roman.py

Files changed:
D src/plone/app/theming/_roman.py

diff --git a/src/plone/app/theming/_roman.py b/src/plone/app/theming/_roman.py
deleted file mode 100644
index ebe0883..0000000
--- a/src/plone/app/theming/_roman.py
+++ /dev/null
@@ -1,81 +0,0 @@
-"""Convert to and from Roman numerals"""
-
-__author__ = "Mark Pilgrim (f8dy@diveintopython.org)"
-__version__ = "1.4"
-__date__ = "8 August 2001"
-__copyright__ = """Copyright (c) 2001 Mark Pilgrim
-
-This program is part of "Dive Into Python", a free Python tutorial for
-experienced programmers.  Visit http://diveintopython.org/ for the
-latest version.
-
-This program is free software; you can redistribute it and/or modify
-it under the terms of the Python 2.1.1 license, available at
-http://www.python.org/2.1.1/license.html
-"""
-
-import re
-
-#Define exceptions
-class RomanError(Exception): pass
-class OutOfRangeError(RomanError): pass
-class NotIntegerError(RomanError): pass
-class InvalidRomanNumeralError(RomanError): pass
-
-#Define digit mapping
-romanNumeralMap = (('M',  1000),
-                   ('CM', 900),
-                   ('D',  500),
-                   ('CD', 400),
-                   ('C',  100),
-                   ('XC', 90),
-                   ('L',  50),
-                   ('XL', 40),
-                   ('X',  10),
-                   ('IX', 9),
-                   ('V',  5),
-                   ('IV', 4),
-                   ('I',  1))
-
-def toRoman(n):
-    """convert integer to Roman numeral"""
-    if not (0 < n < 5000):
-        raise OutOfRangeError, "number out of range (must be 1..4999)"
-    if int(n) <> n:
-        raise NotIntegerError, "decimals can not be converted"
-
-    result = ""
-    for numeral, integer in romanNumeralMap:
-        while n >= integer:
-            result += numeral
-            n -= integer
-    return result
-
-#Define pattern to detect valid Roman numerals
-romanNumeralPattern = re.compile("""
-    ^                   # beginning of string
-    M{0,4}              # thousands - 0 to 4 M's
-    (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),
-                        #            or 500-800 (D, followed by 0 to 3 C's)
-    (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),
-                        #        or 50-80 (L, followed by 0 to 3 X's)
-    (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),
-                        #        or 5-8 (V, followed by 0 to 3 I's)
-    $                   # end of string
-    """ ,re.VERBOSE)
-
-def fromRoman(s):
-    """convert Roman numeral to integer"""
-    if not s:
-        raise InvalidRomanNumeralError, 'Input can not be blank'
-    if not romanNumeralPattern.search(s):
-        raise InvalidRomanNumeralError, 'Invalid Roman numeral: %s' % s
-
-    result = 0
-    index = 0
-    for numeral, integer in romanNumeralMap:
-        while s[index:index+len(numeral)] == numeral:
-            result += integer
-            index += len(numeral)
-    return result
-


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2016-11-08T09:48:05+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/a94ecf8d1b706deef11e481f3a886c992b644082

Update CHANGES.rst

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 2f32919..59136f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Remove roman monkey patch.
+  [gforcada]
 
 1.3.2 (2016-09-23)
 ------------------


Repository: plone.app.theming


Branch: refs/heads/master
Date: 2016-11-08T12:53:09+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/d80359b3ac7e96c1a8749692c8e5d77f7e349478

Merge pull request #117 from plone/gforcada-patch-1

Remove roman monkey patch

Files changed:
M CHANGES.rst
M src/plone/app/theming/__init__.py
D src/plone/app/theming/_roman.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 2f32919..59136f2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,8 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
-
+- Remove roman monkey patch.
+  [gforcada]
 
 1.3.2 (2016-09-23)
 ------------------
diff --git a/src/plone/app/theming/__init__.py b/src/plone/app/theming/__init__.py
index c08456a..a3022e6 100644
--- a/src/plone/app/theming/__init__.py
+++ b/src/plone/app/theming/__init__.py
@@ -2,12 +2,3 @@
 # make this a namespace packages (plone.app.theming.plugins is an
 # extensible python namespace
 __import__('pkg_resources').declare_namespace(__name__)
-
-# Some systems have a broken/missing ``roman`` module; monkey patch one in
-# XXX: DO we still need this?
-try:
-    import roman
-except ImportError:
-    from plone.app.theming import _roman
-    import sys
-    sys.modules['roman'] = _roman
diff --git a/src/plone/app/theming/_roman.py b/src/plone/app/theming/_roman.py
deleted file mode 100644
index ebe0883..0000000
--- a/src/plone/app/theming/_roman.py
+++ /dev/null
@@ -1,81 +0,0 @@
-"""Convert to and from Roman numerals"""
-
-__author__ = "Mark Pilgrim (f8dy@diveintopython.org)"
-__version__ = "1.4"
-__date__ = "8 August 2001"
-__copyright__ = """Copyright (c) 2001 Mark Pilgrim
-
-This program is part of "Dive Into Python", a free Python tutorial for
-experienced programmers.  Visit http://diveintopython.org/ for the
-latest version.
-
-This program is free software; you can redistribute it and/or modify
-it under the terms of the Python 2.1.1 license, available at
-http://www.python.org/2.1.1/license.html
-"""
-
-import re
-
-#Define exceptions
-class RomanError(Exception): pass
-class OutOfRangeError(RomanError): pass
-class NotIntegerError(RomanError): pass
-class InvalidRomanNumeralError(RomanError): pass
-
-#Define digit mapping
-romanNumeralMap = (('M',  1000),
-                   ('CM', 900),
-                   ('D',  500),
-                   ('CD', 400),
-                   ('C',  100),
-                   ('XC', 90),
-                   ('L',  50),
-                   ('XL', 40),
-                   ('X',  10),
-                   ('IX', 9),
-                   ('V',  5),
-                   ('IV', 4),
-                   ('I',  1))
-
-def toRoman(n):
-    """convert integer to Roman numeral"""
-    if not (0 < n < 5000):
-        raise OutOfRangeError, "number out of range (must be 1..4999)"
-    if int(n) <> n:
-        raise NotIntegerError, "decimals can not be converted"
-
-    result = ""
-    for numeral, integer in romanNumeralMap:
-        while n >= integer:
-            result += numeral
-            n -= integer
-    return result
-
-#Define pattern to detect valid Roman numerals
-romanNumeralPattern = re.compile("""
-    ^                   # beginning of string
-    M{0,4}              # thousands - 0 to 4 M's
-    (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),
-                        #            or 500-800 (D, followed by 0 to 3 C's)
-    (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),
-                        #        or 50-80 (L, followed by 0 to 3 X's)
-    (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),
-                        #        or 5-8 (V, followed by 0 to 3 I's)
-    $                   # end of string
-    """ ,re.VERBOSE)
-
-def fromRoman(s):
-    """convert Roman numeral to integer"""
-    if not s:
-        raise InvalidRomanNumeralError, 'Input can not be blank'
-    if not romanNumeralPattern.search(s):
-        raise InvalidRomanNumeralError, 'Invalid Roman numeral: %s' % s
-
-    result = 0
-    index = 0
-    for numeral, integer in romanNumeralMap:
-        while s[index:index+len(numeral)] == numeral:
-            result += integer
-            index += len(numeral)
-    return result
-


