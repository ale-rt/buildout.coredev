Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2016-04-06T01:31:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/c1046b129202c727a543ac058047c6e27a85554a

Enhance test in order to show problem in RelatedItemsWidget with navigation-roots

Files changed:
M CHANGES.rst
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widget.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 3921200..2b95fb4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -25,6 +25,10 @@ New:
 
 Fixes:
 
+- Enhance test in order to show problem in RelatedItemsWidget with 
+  navigation-roots
+  [jensens]
+
 - Cleanup: pep8, uth8-headers, zca-decorators, ...
   [jensens]
 
diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py
index 137f03f..4db9c61 100644
--- a/plone/app/z3cform/tests/test_widgets.py
+++ b/plone/app/z3cform/tests/test_widgets.py
@@ -943,12 +943,58 @@ class RelatedItemsWidgetTests(unittest.TestCase):
     def setUp(self):
         self.request = TestRequest(environ={'HTTP_ACCEPT_LANGUAGE': 'en'})
 
-    def test_widget(self):
+    @mock.patch('plone.app.widgets.utils.get_portal')
+    @mock.patch('plone.app.widgets.utils.getNavigationRootObject')
+    def test_related_items_widget(
+
+        self,
+        mock_nav_root_ob,
+        mock_get_portal
+    ):
         from plone.app.z3cform.widget import RelatedItemsWidget
+        EXPECTED_PORTAL_ROOT = '', 'site'
+        EXPECTED_NAV_ROOT = '', 'site'
+        EXPECTED_ROOT_PATH = '/site'
+        EXPECTED_BASE_PATH = '/site'
+        EXPECTED_VOCAB_URL = 'portal_url/@@getVocabulary?name=' \
+                             'plone.app.vocabularies.Catalog'
+        EXPECTED_TREE_URL = 'portal_url/@@getVocabulary?name=' \
+                            'plone.app.vocabularies.Catalog'
+
+        portal = mock.MagicMock(name='portal')
+        portal.absolute_url.return_value = 'portal_url'
+        portal.getPhysicalPath.return_value = EXPECTED_PORTAL_ROOT
+        mock_get_portal.return_value = portal
+
+        navroot = mock.MagicMock(name='navroot')
+        navroot.getPhysicalPath.return_value = EXPECTED_NAV_ROOT
+        mock_nav_root_ob.return_value = navroot
+
         widget = RelatedItemsWidget(self.request)
-        widget.context = Mock(absolute_url=lambda: 'fake_url',
-                              getPhysicalPath=lambda: ['', 'site'])
+        widget.context = Mock(
+            name='context',
+            absolute_url=lambda: 'fake_url',
+            getPhysicalPath=lambda: ['', 'site', 'folder', 'item'],
+        )
         widget.update()
+        result = widget._base_args()
+
+        self.assertEqual(
+            EXPECTED_ROOT_PATH,
+            result['pattern_options']['rootPath']
+        )
+        self.assertEqual(
+            EXPECTED_BASE_PATH,
+            result['pattern_options'].get('basePath', None)
+        )
+        self.assertEqual(
+            EXPECTED_VOCAB_URL,
+            result['pattern_options']['vocabularyUrl']
+        )
+        self.assertEqual(
+            EXPECTED_TREE_URL,
+            result['pattern_options']['treeVocabularyUrl']
+        )
         self.assertDictEqual(
             {
                 'name': None,
@@ -960,16 +1006,86 @@ def test_widget(self):
                     'searchAllText': u'Entire site',
                     'searchText': u'Search',
                     'separator': ';',
-                    'vocabularyUrl': 'fake_url/@@getVocabulary?name='
-                                     'plone.app.vocabularies.Catalog',
-                    'rootPath': '/site',
-                    'treeVocabularyUrl':  '/@@getVocabulary?name='
-                                          'plone.app.vocabularies.Catalog',
+                    'vocabularyUrl': EXPECTED_VOCAB_URL,
+                    'rootPath': EXPECTED_ROOT_PATH,
+                    'basePath': EXPECTED_BASE_PATH,
+                    'treeVocabularyUrl':  EXPECTED_TREE_URL,
                     'sort_on': 'sortable_title',
                     'sort_order': 'ascending'
                 },
             },
-            widget._base_args()
+            result
+        )
+
+    @mock.patch('plone.app.widgets.utils.get_portal')
+    @mock.patch('plone.app.widgets.utils.getNavigationRootObject')
+    def test_related_items_widget_nav_root(
+        self,
+        mock_nav_root_ob,
+        mock_get_portal
+    ):
+        from plone.app.z3cform.widget import RelatedItemsWidget
+        EXPECTED_PORTAL_ROOT = '', 'site'
+        EXPECTED_NAV_ROOT = '', 'site', 'nav'
+        EXPECTED_ROOT_PATH = '/site'
+        EXPECTED_BASE_PATH = '/site/nav'
+        EXPECTED_VOCAB_URL = 'portal_url/@@getVocabulary?name=' \
+                             'plone.app.vocabularies.Catalog'
+        EXPECTED_TREE_URL = 'portal_url/@@getVocabulary?name=' \
+                            'plone.app.vocabularies.Catalog'
+
+        portal = mock.MagicMock(name='portal')
+        portal.absolute_url.return_value = 'portal_url'
+        portal.getPhysicalPath.return_value = EXPECTED_PORTAL_ROOT
+        mock_get_portal.return_value = portal
+
+        navroot = mock.MagicMock(name='navroot')
+        navroot.getPhysicalPath.return_value = EXPECTED_NAV_ROOT
+        mock_nav_root_ob.return_value = navroot
+
+        widget = RelatedItemsWidget(self.request)
+        widget.context = Mock(
+            absolute_url=lambda: 'fake_url',
+            getPhysicalPath=lambda: ['', 'site', 'nav', 'folder', 'item']
+        )
+        widget.update()
+        result = widget._base_args()
+        self.assertEqual(
+            EXPECTED_ROOT_PATH,
+            result['pattern_options']['rootPath']
+        )
+        self.assertEqual(
+            EXPECTED_BASE_PATH,
+            result['pattern_options'].get('basePath', None)
+        )
+        self.assertEqual(
+            EXPECTED_VOCAB_URL,
+            result['pattern_options']['vocabularyUrl']
+        )
+        self.assertEqual(
+            EXPECTED_TREE_URL,
+            result['pattern_options']['treeVocabularyUrl']
+        )
+        self.assertDictEqual(
+            {
+                'name': None,
+                'value': u'',
+                'pattern': 'relateditems',
+                'pattern_options': {
+                    'folderTypes': ['Folder'],
+                    'homeText': u'Home',
+                    'searchAllText': u'Entire site',
+                    'searchText': u'Search',
+                    'separator': ';',
+                    'vocabularyUrl': EXPECTED_VOCAB_URL,
+                    'rootPath': EXPECTED_ROOT_PATH,
+                    'basePath': EXPECTED_BASE_PATH,
+                    'treeVocabularyUrl':  EXPECTED_TREE_URL,
+                    'sort_on': 'sortable_title',
+                    'sort_order': 'ascending'
+                },
+            },
+            result
         )
 
     def test_single_selection(self):
diff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py
index 731849f..10f1fb7 100644
--- a/plone/app/z3cform/widget.py
+++ b/plone/app/z3cform/widget.py
@@ -459,7 +459,6 @@ def _base_args(self):
             ),
             args['pattern_options']
         )
-
         if (
             not self.vocabulary_override and
             field and


