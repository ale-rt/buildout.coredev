Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-04-06T00:08:09+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/1e337ee28a42a538f4eeadf88bf49458099ed778

folder contents: fix breadcrumbs and toolbar for subsites and VH
Fix folder contents path and breadcrumbs settings to show correct paths and render the toolbar correctly in navigation root subsites and virtual hosting environments pointing to subsites.

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py
M plone/app/content/tests/test_folder.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8a8a3f1..3a68b92 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New:
 
 Fixes:
 
+- Fix folder contents path and breadcrumbs settings to show correct paths and render the toolbar correctly in navigation root subsites and virtual hosting environments pointing to subsites.
+  [thet]
+
 - Fix test isolation problem and remove an unnecessary test dependency on ``plone.app.widgets``.
   [thet]
 
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index d21143f..7d63e09 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -11,18 +11,20 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone import utils
-from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.Five import BrowserView
+from urlparse import urlparse
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.component import getUtility
 from zope.component.hooks import getSite
+from zope.component.interfaces import ISite
 from zope.i18n import translate
 from zope.interface import implementer
 
 import zope.deferredimport
 
+
 zope.deferredimport.deprecated(
     # remove in Plone 5.1
     'Import from plone.app.content.browser.content.defaultpage instead',
@@ -36,6 +38,30 @@
 )
 
 
+def get_top_site_from_url(context, request):
+    """Find the top-most site, which is in the url path.
+    For this given content structure:
+
+    /Plone/Subsite
+
+    It should return the following in these cases:
+
+    - Naked Plone without virtual hosting, /Plone: Plone
+    - Naked Plone without virtual hosting, /Plone/Subsite: Plone
+    - Virtual hosting which roots to the subsite: Subsite
+    """
+    url_path = urlparse(context.absolute_url()).path.split('/')
+
+    site = getSite()
+    for idx in range(len(url_path)):
+        _path = '/'.join(url_path[:idx + 1]) or '/'
+        site_path = request.physicalPathFromURL(_path)
+        site = context.restrictedTraverse('/'.join(site_path) or '/')
+        if ISite.providedBy(site):
+            break
+    return site
+
+
 class ContentsBaseAction(BrowserView):
 
     success_msg = _('Success')
@@ -177,7 +203,7 @@ def get_columns(self):
         return columns
 
     def get_options(self):
-        site = getSite()
+        site = get_top_site_from_url(self.context, self.request)
         base_url = site.absolute_url()
         base_vocabulary = '%s/@@getVocabulary?name=' % base_url
         site_path = site.getPhysicalPath()
@@ -248,7 +274,8 @@ def __call__(self):
 
         context = aq_inner(self.context)
         crumbs = []
-        while not IPloneSiteRoot.providedBy(context):
+        top_site = get_top_site_from_url(self.context, self.request)
+        while not context == top_site:
             crumbs.append({
                 'id': context.getId(),
                 'title': utils.pretty_title_or_id(context, context)
diff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py
index 4c6f1ce..058b17b 100644
--- a/plone/app/content/tests/test_folder.py
+++ b/plone/app/content/tests/test_folder.py
@@ -7,16 +7,18 @@
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.dexterity.fti import DexterityFTI
+from plone.locking.interfaces import IRefreshableLockable
 from plone.protect.authenticator import createToken
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Testing.makerequest import makerequest
+from urlparse import urlparse
 from zope.annotation.interfaces import IAttributeAnnotatable
 from zope.interface import alsoProvides
 from zope.publisher.browser import TestRequest
+
 import json
 import unittest
-from plone.locking.interfaces import IRefreshableLockable
 
 
 class BaseTest(unittest.TestCase):
@@ -41,6 +43,9 @@ def setUp(self):
             }
         )
         self.request.REQUEST_METHOD = 'POST'
+        # Mock physicalPathFromURL
+        # NOTE: won't return the right path in virtual hosting environments
+        self.request.physicalPathFromURL = lambda url: urlparse(url).path.split('/')  # noqa
         alsoProvides(self.request, IAttributeAnnotatable)
         self.userList = 'one,two'
 


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-04-06T00:18:28+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/ada78d582e41afaf1c9ef0ae6dfad1730bcd43a3

folder contents: fix breadcrumbs and toolbar for subsites and VH

folder contents: fix breadcrumbs and toolbar for subsites and VH

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py
M plone/app/content/tests/test_folder.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 8a8a3f1..3a68b92 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,6 +14,9 @@ New:
 
 Fixes:
 
+- Fix folder contents path and breadcrumbs settings to show correct paths and render the toolbar correctly in navigation root subsites and virtual hosting environments pointing to subsites.
+  [thet]
+
 - Fix test isolation problem and remove an unnecessary test dependency on ``plone.app.widgets``.
   [thet]
 
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index d21143f..7d63e09 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -11,18 +11,20 @@
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneMessageFactory as _
 from Products.CMFPlone import utils
-from Products.CMFPlone.interfaces import IPloneSiteRoot
 from Products.Five import BrowserView
+from urlparse import urlparse
 from zope.browsermenu.interfaces import IBrowserMenu
 from zope.component import getMultiAdapter
 from zope.component import getUtilitiesFor
 from zope.component import getUtility
 from zope.component.hooks import getSite
+from zope.component.interfaces import ISite
 from zope.i18n import translate
 from zope.interface import implementer
 
 import zope.deferredimport
 
+
 zope.deferredimport.deprecated(
     # remove in Plone 5.1
     'Import from plone.app.content.browser.content.defaultpage instead',
@@ -36,6 +38,30 @@
 )
 
 
+def get_top_site_from_url(context, request):
+    """Find the top-most site, which is in the url path.
+    For this given content structure:
+
+    /Plone/Subsite
+
+    It should return the following in these cases:
+
+    - Naked Plone without virtual hosting, /Plone: Plone
+    - Naked Plone without virtual hosting, /Plone/Subsite: Plone
+    - Virtual hosting which roots to the subsite: Subsite
+    """
+    url_path = urlparse(context.absolute_url()).path.split('/')
+
+    site = getSite()
+    for idx in range(len(url_path)):
+        _path = '/'.join(url_path[:idx + 1]) or '/'
+        site_path = request.physicalPathFromURL(_path)
+        site = context.restrictedTraverse('/'.join(site_path) or '/')
+        if ISite.providedBy(site):
+            break
+    return site
+
+
 class ContentsBaseAction(BrowserView):
 
     success_msg = _('Success')
@@ -177,7 +203,7 @@ def get_columns(self):
         return columns
 
     def get_options(self):
-        site = getSite()
+        site = get_top_site_from_url(self.context, self.request)
         base_url = site.absolute_url()
         base_vocabulary = '%s/@@getVocabulary?name=' % base_url
         site_path = site.getPhysicalPath()
@@ -248,7 +274,8 @@ def __call__(self):
 
         context = aq_inner(self.context)
         crumbs = []
-        while not IPloneSiteRoot.providedBy(context):
+        top_site = get_top_site_from_url(self.context, self.request)
+        while not context == top_site:
             crumbs.append({
                 'id': context.getId(),
                 'title': utils.pretty_title_or_id(context, context)
diff --git a/plone/app/content/tests/test_folder.py b/plone/app/content/tests/test_folder.py
index 4c6f1ce..058b17b 100644
--- a/plone/app/content/tests/test_folder.py
+++ b/plone/app/content/tests/test_folder.py
@@ -7,16 +7,18 @@
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
 from plone.dexterity.fti import DexterityFTI
+from plone.locking.interfaces import IRefreshableLockable
 from plone.protect.authenticator import createToken
 from plone.uuid.interfaces import IUUID
 from Products.CMFCore.utils import getToolByName
 from Testing.makerequest import makerequest
+from urlparse import urlparse
 from zope.annotation.interfaces import IAttributeAnnotatable
 from zope.interface import alsoProvides
 from zope.publisher.browser import TestRequest
+
 import json
 import unittest
-from plone.locking.interfaces import IRefreshableLockable
 
 
 class BaseTest(unittest.TestCase):
@@ -41,6 +43,9 @@ def setUp(self):
             }
         )
         self.request.REQUEST_METHOD = 'POST'
+        # Mock physicalPathFromURL
+        # NOTE: won't return the right path in virtual hosting environments
+        self.request.physicalPathFromURL = lambda url: urlparse(url).path.split('/')  # noqa
         alsoProvides(self.request, IAttributeAnnotatable)
         self.userList = 'one,two'
 


