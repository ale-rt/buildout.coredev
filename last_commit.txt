Repository: plone.app.blob


Branch: refs/heads/1.5.x
Date: 2017-06-26T09:55:42+02:00
Author: Bert Vanderbauwhede (batlock666) <batlock666@gmail.com>
Commit: https://github.com/plone/plone.app.blob/commit/233faa2e7fcc7fb15e50a12fd2d1f2fd02ec19ca

Handle ValueError exceptions when doing a range request.

Files changed:
M CHANGES.rst
M src/plone/app/blob/download.py
M src/plone/app/blob/tests/test_integration.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1c8d0f1..4de4de5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ New:
 
 Fixes:
 
-- *add item here*
+- Handle ``ValueError`` exceptions when doing a range request.
+  This fixes `issue #39 <https://github.com/plone/plone.app.blob/issues/39>`_.
+  [batlock666]
 
 
 1.5.17 (2016-02-15)
diff --git a/src/plone/app/blob/download.py b/src/plone/app/blob/download.py
index 52937e1..96cde56 100644
--- a/src/plone/app/blob/download.py
+++ b/src/plone/app/blob/download.py
@@ -71,12 +71,15 @@ def handleRequestRange(instance, length, REQUEST, RESPONSE):
                         ranges = None
             RESPONSE.setHeader('Accept-Ranges', 'bytes')
         if ranges and len(ranges) == 1:
-            [(start, end)] = expandRanges(ranges, length)
-            size = end - start
-            RESPONSE.setHeader('Content-Length', size)
-            RESPONSE.setHeader(
-                'Content-Range',
-                'bytes %d-%d/%d' % (start, end - 1, length))
-            RESPONSE.setStatus(206)  # Partial content
-            return dict(start=start, end=end)
+            try:
+                [(start, end)] = expandRanges(ranges, length)
+                size = end - start
+                RESPONSE.setHeader('Content-Length', size)
+                RESPONSE.setHeader(
+                    'Content-Range',
+                    'bytes %d-%d/%d' % (start, end - 1, length))
+                RESPONSE.setStatus(206)  # Partial content
+                return dict(start=start, end=end)
+            except ValueError:
+                return {}
     return {}
diff --git a/src/plone/app/blob/tests/test_integration.py b/src/plone/app/blob/tests/test_integration.py
index 1f67564..4577ab9 100644
--- a/src/plone/app/blob/tests/test_integration.py
+++ b/src/plone/app/blob/tests/test_integration.py
@@ -149,6 +149,21 @@ def testRangeSupport(self):
         iterator = blob.download(request)
         self.assertEqual(data[-20:], ''.join(iterator))
 
+    def testOutsideRange(self):
+        # ranges outside the file size also have to work
+        blob = self.folder['blob']
+        blob.setTitle('foo')
+        blob.setFile(getData('plone.pdf'))
+        data = blob.getFile().getBlob().open('r').read()
+        l = len(data)
+        request = self.folder.REQUEST
+        request.environ['HTTP_RANGE'] = 'bytes={}-{}'.format(l * 2, l * 3)
+        iterator = blob.download(request)
+        self.assertEqual(data, ''.join(iterator))
+        request.environ['HTTP_RANGE'] = 'bytes={}-'.format(l * 2)
+        iterator = blob.download(request)
+        self.assertEqual(data, ''.join(iterator))
+
     def testIcon(self):
         blob = self.folder.blob
         blob.update(file=getImage())


Repository: plone.app.blob


Branch: refs/heads/1.5.x
Date: 2017-06-29T10:13:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.blob/commit/b51e4ab2db00e162aa18aa64a5efba13b699a67a

Merge pull request #42 from batlock666/1.5.x

Handle ValueError exceptions when doing a range request.

Files changed:
M CHANGES.rst
M src/plone/app/blob/download.py
M src/plone/app/blob/tests/test_integration.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 1c8d0f1..4de4de5 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,9 @@ New:
 
 Fixes:
 
-- *add item here*
+- Handle ``ValueError`` exceptions when doing a range request.
+  This fixes `issue #39 <https://github.com/plone/plone.app.blob/issues/39>`_.
+  [batlock666]
 
 
 1.5.17 (2016-02-15)
diff --git a/src/plone/app/blob/download.py b/src/plone/app/blob/download.py
index 52937e1..96cde56 100644
--- a/src/plone/app/blob/download.py
+++ b/src/plone/app/blob/download.py
@@ -71,12 +71,15 @@ def handleRequestRange(instance, length, REQUEST, RESPONSE):
                         ranges = None
             RESPONSE.setHeader('Accept-Ranges', 'bytes')
         if ranges and len(ranges) == 1:
-            [(start, end)] = expandRanges(ranges, length)
-            size = end - start
-            RESPONSE.setHeader('Content-Length', size)
-            RESPONSE.setHeader(
-                'Content-Range',
-                'bytes %d-%d/%d' % (start, end - 1, length))
-            RESPONSE.setStatus(206)  # Partial content
-            return dict(start=start, end=end)
+            try:
+                [(start, end)] = expandRanges(ranges, length)
+                size = end - start
+                RESPONSE.setHeader('Content-Length', size)
+                RESPONSE.setHeader(
+                    'Content-Range',
+                    'bytes %d-%d/%d' % (start, end - 1, length))
+                RESPONSE.setStatus(206)  # Partial content
+                return dict(start=start, end=end)
+            except ValueError:
+                return {}
     return {}
diff --git a/src/plone/app/blob/tests/test_integration.py b/src/plone/app/blob/tests/test_integration.py
index 1f67564..4577ab9 100644
--- a/src/plone/app/blob/tests/test_integration.py
+++ b/src/plone/app/blob/tests/test_integration.py
@@ -149,6 +149,21 @@ def testRangeSupport(self):
         iterator = blob.download(request)
         self.assertEqual(data[-20:], ''.join(iterator))
 
+    def testOutsideRange(self):
+        # ranges outside the file size also have to work
+        blob = self.folder['blob']
+        blob.setTitle('foo')
+        blob.setFile(getData('plone.pdf'))
+        data = blob.getFile().getBlob().open('r').read()
+        l = len(data)
+        request = self.folder.REQUEST
+        request.environ['HTTP_RANGE'] = 'bytes={}-{}'.format(l * 2, l * 3)
+        iterator = blob.download(request)
+        self.assertEqual(data, ''.join(iterator))
+        request.environ['HTTP_RANGE'] = 'bytes={}-'.format(l * 2)
+        iterator = blob.download(request)
+        self.assertEqual(data, ''.join(iterator))
+
     def testIcon(self):
         blob = self.folder.blob
         blob.update(file=getImage())


