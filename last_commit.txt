Repository: plone.dexterity


Branch: refs/heads/2.2.x
Date: 2016-02-22T18:42:48+01:00
Author: Stephan Geulette (sgeulette) <s.geulette@imio.be>
Commit: https://github.com/plone/plone.dexterity/commit/690396c284fe08231ee3f8e7c570c561d0f44cac

Sync schema when schema_policy name is changed (issue #44)

Files changed:
M CHANGES.rst
M plone/dexterity/fti.py
M plone/dexterity/tests/test_fti.py

diff --git a/CHANGES.rst b/CHANGES.rst
index a5c64fc..8e2bbd6 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,8 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
-
+- Sync schema when schema_policy name is changed (issue #44)
+  [sgeulette]
 
 2.2.5 (2016-02-18)
 ------------------
diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py
index cbb8d6f..4a5668a 100644
--- a/plone/dexterity/fti.py
+++ b/plone/dexterity/fti.py
@@ -529,16 +529,18 @@ def ftiModified(object, event):
     if 'behaviors' in mod \
        or 'schema' in mod \
        or 'model_source' in mod \
-       or 'model_file' in mod:
+       or 'model_file' in mod \
+       or 'schema_policy' in mod:
 
         # Determine if we need to re-sync a dynamic schema
         if (fti.model_source or fti.model_file) \
-           and ('model_source' in mod or 'model_file' in mod):
+           and ('model_source' in mod or 'model_file' in mod or 'schema_policy' in mod):
 
             schemaName = utils.portalTypeToSchemaName(portal_type)
             schema = getattr(plone.dexterity.schema.generated, schemaName)
 
             model = fti.lookupModel()
-            syncSchema(model.schema, schema, overwrite=True)
+            sync_bases = 'schema_policy' in mod
+            syncSchema(model.schema, schema, overwrite=True, sync_bases=sync_bases)
 
         notify(SchemaInvalidatedEvent(portal_type))
diff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py
index 80616bc..7792a99 100644
--- a/plone/dexterity/tests/test_fti.py
+++ b/plone/dexterity/tests/test_fti.py
@@ -867,6 +867,59 @@ class IBlank(Interface):
         self.assertTrue('title' in IBlank)
         self.assertTrue(IBlank['title'].title == u"title")
 
+    def test_dynamic_schema_refreshed_on_modify_schema_policy(self):
+        portal_type = u"testtype"
+        fti = self.mocker.proxy(DexterityFTI(portal_type))
+
+        class INew(Interface):
+            title = zope.schema.TextLine(title=u"title")
+
+        class IBlank(Interface):
+            pass
+
+        class TestSchemaPolicy(DexteritySchemaPolicy):
+            def bases(self, schemaName, tree):
+                return (INew,)
+
+        gsm = getGlobalSiteManager()
+        policy = TestSchemaPolicy()
+        gsm.registerUtility(
+            policy,
+            plone.supermodel.interfaces.ISchemaPolicy,
+            name=u"test"
+        )
+
+        self.expect(fti.schema_policy).passthrough().count(0, None)
+
+        site_dummy = self.create_dummy(
+            getPhysicalPath=lambda: ('', 'siteid')
+        )
+        self.mock_utility(site_dummy, ISiteRoot)
+
+        self.replay()
+
+        # Set source interface
+        schemaName = utils.portalTypeToSchemaName(fti.getId())
+        setattr(plone.dexterity.schema.generated, schemaName, IBlank)
+        original = getattr(plone.dexterity.schema.generated, schemaName)
+        self.assertNotIn(INew, original.__bases__)
+        self.assertNotIn('title', original)
+
+        # Set new schema_policy
+        fti.schema_policy = "test"
+
+        # Sync this with schema
+        ftiModified(
+            fti,
+            ObjectModifiedEvent(
+                fti,
+                DexterityFTIModificationDescription('schema_policy', '')
+            )
+        )
+        updated = getattr(plone.dexterity.schema.generated, schemaName)
+        self.assertIn('title', updated)
+        self.assertIn(INew, updated.__bases__)
+
     def test_concrete_schema_not_refreshed_on_modify_schema(self):
         portal_type = u"testtype"
         fti = self.mocker.proxy(DexterityFTI(portal_type))


