Repository: Products.DateRecurringIndex


Branch: refs/heads/master
Date: 2017-02-01T12:31:06+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/Products.DateRecurringIndex/commit/e08fc4bec0281ed700f754087f3a286fc6d1891c

pep8

Files changed:
A CHANGES.rst
A CONTRIBUTORS.rst
A LICENSE.rst
M setup.py
M src/Products/DateRecurringIndex/__init__.py
M src/Products/DateRecurringIndex/index.py
M src/Products/DateRecurringIndex/testing.py
M src/Products/DateRecurringIndex/tests.py
M src/Products/__init__.py
D docs/HISTORY.rst
D docs/LICENSE.rst
D docs/contributors.rst

diff --git a/docs/HISTORY.rst b/CHANGES.rst
similarity index 98%
rename from docs/HISTORY.rst
rename to CHANGES.rst
index 492ad3b..23ec325 100644
--- a/docs/HISTORY.rst
+++ b/CHANGES.rst
@@ -4,7 +4,8 @@ Changelog
 2.1.1 (unreleased)
 ------------------
 
-- Nothing changed yet.
+- PEP 8.
+  [thet]
 
 
 2.1 (2014-03-02)
diff --git a/docs/contributors.rst b/CONTRIBUTORS.rst
similarity index 100%
rename from docs/contributors.rst
rename to CONTRIBUTORS.rst
diff --git a/docs/LICENSE.rst b/LICENSE.rst
similarity index 100%
rename from docs/LICENSE.rst
rename to LICENSE.rst
diff --git a/setup.py b/setup.py
index aeec447..ccb2338 100644
--- a/setup.py
+++ b/setup.py
@@ -1,17 +1,25 @@
-from setuptools import setup, find_packages
-import os
+# -*- coding: utf-8 -*-
+"""Installer for the bda.aaf.site package."""
+
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '2.1.1.dev0'
-shortdesc = "Zope 2 date index with support for recurring events."
-longdesc = open('README.rst').read() + "\n\n" +\
-    open(os.path.join("docs", "HISTORY.rst")).read()
-license = open(os.path.join("docs", "LICENSE.rst")).read()
+short_description = "Zope 2 date index with support for recurring events."
+long_description = ('\n\n'.join([
+    open('README.rst').read(),
+    open('CONTRIBUTORS.rst').read(),
+    open('CHANGES.rst').read(),
+    open('LICENSE.rst').read(),
+]))
+
 
 setup(
     name='Products.DateRecurringIndex',
     version=version,
-    description=shortdesc,
-    long_description=longdesc + '\n\n' + license,
+    description=short_description,
+    long_description=long_description,
     classifiers=[
         'Development Status :: 5 - Production/Stable',
         'Environment :: Web Environment',
@@ -34,9 +42,10 @@
     zip_safe=False,
     install_requires=[
         'setuptools',
-        'ZODB3',
-        'Zope2',
+        'BTrees',
         'plone.event',
+        'Products.ZCatalog >= 4.0a2',
+        'ZODB',
         'zope.interface',
         'zope.schema',
     ],
@@ -44,5 +53,6 @@
         'test': [
             'pytz',
             'plone.testing'
-        ]},
-    )
+        ]
+    },
+)
diff --git a/src/Products/DateRecurringIndex/__init__.py b/src/Products/DateRecurringIndex/__init__.py
index 57aea69..0a46b50 100644
--- a/src/Products/DateRecurringIndex/__init__.py
+++ b/src/Products/DateRecurringIndex/__init__.py
@@ -1,3 +1,6 @@
+# -*- coding: utf-8 -*-
+
+
 def initialize(context):
     # Products.* initialization code is Automatically called by Zope
     import index
diff --git a/src/Products/DateRecurringIndex/index.py b/src/Products/DateRecurringIndex/index.py
index 3714af2..d3e30f2 100644
--- a/src/Products/DateRecurringIndex/index.py
+++ b/src/Products/DateRecurringIndex/index.py
@@ -1,22 +1,23 @@
-#from BTrees.IIBTree import IIBTree
-#from BTrees.IOBTree import IOBTree
-#from BTrees.Length import Length
-from logging import getLogger
 from App.class_init import InitializeClass
 from App.special_dtml import DTMLFile
+from BTrees.IIBTree import difference
 from BTrees.IIBTree import IISet
-from BTrees.IIBTree import union, multiunion, intersection, difference
-from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from plone.event.utils import dt2int, pydt
+from BTrees.IIBTree import intersection
+from BTrees.IIBTree import multiunion
+from BTrees.IIBTree import union
+from logging import getLogger
 from plone.event.recurrence import recurrence_sequence_ical
+from plone.event.utils import dt2int
+from plone.event.utils import pydt
+from Products.PageTemplates.PageTemplateFile import PageTemplateFile
+from Products.PluginIndexes.common import safe_callable
+from Products.PluginIndexes.common.util import parseIndexRequest
+from Products.PluginIndexes.unindex import UnIndex
 from ZODB.POSException import ConflictError
 from zope.interface import implements
 from zope.interface import Interface
 from zope.schema import Text
 
-from Products.PluginIndexes.common import safe_callable
-from Products.PluginIndexes.common.UnIndex import UnIndex
-from Products.PluginIndexes.common.util import parseIndexRequest
 
 LOG = getLogger('Products.DateRecurringIndex')
 _marker = object()
@@ -45,20 +46,12 @@ class DateRecurringIndex(UnIndex):
 
     # TODO: for that, this has to be a DTMLFile?
     #manage_main._setName( 'manage_main' )
-    manage_options = ( { 'label' : 'Settings'
-                       , 'action' : 'manage_main'
+    manage_options = ({'label': 'Settings', 'action': 'manage_main'
                        },
-                       {'label': 'Browse',
-                        'action': 'manage_browse',
+                      {'label': 'Browse',
+                       'action': 'manage_browse',
                        },
-                     )
-
-    #def clear( self ):
-    #    """ Complete reset """
-    #    self._index = IOBTree()
-    #    self._unindex = IIBTree()
-    #    self._length = Length()
-
+                      )
 
     def __init__(self, id, ignore_ex=None, call_methods=None,
                  extra=None, caller=None):
@@ -71,7 +64,7 @@ def __init__(self, id, ignore_ex=None, call_methods=None,
         self.attr_recurdef = extra.recurdef
         self.attr_until = extra.until
 
-    def index_object( self, documentId, obj, threshold=None ):
+    def index_object(self, documentId, obj, threshold=None):
         """index an object, normalizing the indexed value to an integer
 
            o Normalized value has granularity of one minute.
@@ -85,8 +78,8 @@ def index_object( self, documentId, obj, threshold=None ):
         returnStatus = 0
 
         try:
-            date_attr = getattr( obj, self.id )
-            if safe_callable( date_attr ):
+            date_attr = getattr(obj, self.id)
+            if safe_callable(date_attr):
                 date_attr = date_attr()
         except AttributeError:
             return returnStatus
@@ -102,16 +95,17 @@ def index_object( self, documentId, obj, threshold=None ):
             if safe_callable(until):
                 until = until()
 
-            dates = recurrence_sequence_ical(date_attr, recrule=recurdef, until=until)
+            dates = recurrence_sequence_ical(
+                date_attr, recrule=recurdef, until=until)
 
         newvalues = IISet(map(dt2int, dates))
-        oldvalues = self._unindex.get( documentId, _marker )
+        oldvalues = self._unindex.get(documentId, _marker)
         if oldvalues is not _marker:
             oldvalues = IISet(oldvalues)
 
         if oldvalues is not _marker and newvalues is not _marker\
-            and not difference(newvalues, oldvalues)\
-            and not difference(oldvalues, newvalues):
+                and not difference(newvalues, oldvalues)\
+                and not difference(oldvalues, newvalues):
             # difference is calculated relative to first argument, so we have to
             # use it twice here
             return returnStatus
@@ -126,13 +120,13 @@ def index_object( self, documentId, obj, threshold=None ):
                     raise
                 except:
                     LOG.error("Should not happen: oldvalues was there,"
-                                 " now it's not, for document with id %s" %
-                                   documentId)
+                              " now it's not, for document with id %s" %
+                              documentId)
 
         if newvalues is not _marker:
             inserted = False
             for value in newvalues:
-                self.insertForwardIndexEntry( value, documentId )
+                self.insertForwardIndexEntry(value, documentId)
                 inserted = True
             if inserted:
                 # store tuple values in reverse index entries for sorting
@@ -156,7 +150,7 @@ def unindex_object(self, documentId):
             raise
         except:
             LOG.debug('Attempt to unindex nonexistent document'
-                      ' with id %s' % documentId,exc_info=True)
+                      ' with id %s' % documentId, exc_info=True)
 
     def _apply_index(self, request, resultset=None):
         """Apply the index to query parameters given in the argument
@@ -174,19 +168,19 @@ def _apply_index(self, request, resultset=None):
         r = None
         opr = None
 
-        #experimental code for specifing the operator
-        operator = record.get( 'operator', self.useOperator )
-        if not operator in self.operators :
+        # experimental code for specifing the operator
+        operator = record.get('operator', self.useOperator)
+        if not operator in self.operators:
             raise RuntimeError("operator not valid: %s" % operator)
 
         # depending on the operator we use intersection or union
-        if operator=="or":
+        if operator == "or":
             set_func = union
         else:
             set_func = intersection
 
         # range parameter
-        range_arg = record.get('range',None)
+        range_arg = record.get('range', None)
         if range_arg:
             opr = "range"
             opr_args = []
@@ -195,12 +189,12 @@ def _apply_index(self, request, resultset=None):
             if range_arg.find("max") > -1:
                 opr_args.append("max")
 
-        if record.get('usage',None):
+        if record.get('usage', None):
             # see if any usage params are sent to field
             opr = record.usage.lower().split(':')
             opr, opr_args = opr[0], opr[1:]
 
-        if opr=="range":   # range search
+        if opr == "range":   # range search
             if 'min' in opr_args:
                 lo = min(keys)
             else:
@@ -212,13 +206,13 @@ def _apply_index(self, request, resultset=None):
                 hi = None
 
             if hi:
-                setlist = index.values(lo,hi)
+                setlist = index.values(lo, hi)
             else:
                 setlist = index.values(lo)
 
             r = multiunion(setlist)
 
-        else: # not a range search
+        else:  # not a range search
             for key in keys:
                 set = index.get(key, None)
                 if set is not None:
@@ -238,12 +232,13 @@ def _apply_index(self, request, resultset=None):
             return r, (self.id,)
 
 
-manage_addDRIndexForm = DTMLFile( 'www/addDRIndex', globals() )
+manage_addDRIndexForm = DTMLFile('www/addDRIndex', globals())
+
 
-def manage_addDRIndex( self, id, extra=None, REQUEST=None, RESPONSE=None,
-                       URL3=None):
+def manage_addDRIndex(self, id, extra=None, REQUEST=None, RESPONSE=None,
+                      URL3=None):
     """Add a DateRecurringIndex"""
-    return self.manage_addIndex(id, 'DateRecurringIndex', extra=extra, \
-                    REQUEST=REQUEST, RESPONSE=RESPONSE, URL1=URL3)
+    return self.manage_addIndex(id, 'DateRecurringIndex', extra=extra,
+                                REQUEST=REQUEST, RESPONSE=RESPONSE, URL1=URL3)
 
 InitializeClass(DateRecurringIndex)
diff --git a/src/Products/DateRecurringIndex/testing.py b/src/Products/DateRecurringIndex/testing.py
index 4219c83..4975d87 100644
--- a/src/Products/DateRecurringIndex/testing.py
+++ b/src/Products/DateRecurringIndex/testing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.testing import z2
 from plone.testing import Layer
 
@@ -14,4 +15,5 @@ def tearDown(self):
         with z2.zopeApp() as app:
             z2.uninstallProduct(app, 'Products.DateRecurringIndex')
 
+
 DRI_FIXTURE = DRILayer()
diff --git a/src/Products/DateRecurringIndex/tests.py b/src/Products/DateRecurringIndex/tests.py
index cb20cb5..4415762 100644
--- a/src/Products/DateRecurringIndex/tests.py
+++ b/src/Products/DateRecurringIndex/tests.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 import unittest
 import doctest
 from Testing import ZopeTestCase as ztc
diff --git a/src/Products/__init__.py b/src/Products/__init__.py
index b0d6433..68c04af 100644
--- a/src/Products/__init__.py
+++ b/src/Products/__init__.py
@@ -1 +1,2 @@
-__import__('pkg_resources').declare_namespace(__name__)
\ No newline at end of file
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)


Repository: Products.DateRecurringIndex


Branch: refs/heads/master
Date: 2017-02-01T12:31:06+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/Products.DateRecurringIndex/commit/96632b7d686464e1ff03e509d88217b326de6f20

align changes to latest Products.ZCatalog changes

Files changed:
M CHANGES.rst
M setup.py
M src/Products/DateRecurringIndex/index.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 23ec325..864db31 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,11 @@
 Changelog
 =========
 
-2.1.1 (unreleased)
-------------------
+3.0 (unreleased)
+----------------
+
+- Code alignment to Products.ZCatalog 4.
+  [thet]
 
 - PEP 8.
   [thet]
diff --git a/setup.py b/setup.py
index ccb2338..ef14738 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@
 from setuptools import setup
 
 
-version = '2.1.1.dev0'
+version = '3.0.dev0'
 short_description = "Zope 2 date index with support for recurring events."
 long_description = ('\n\n'.join([
     open('README.rst').read(),
diff --git a/src/Products/DateRecurringIndex/index.py b/src/Products/DateRecurringIndex/index.py
index d3e30f2..71daf4b 100644
--- a/src/Products/DateRecurringIndex/index.py
+++ b/src/Products/DateRecurringIndex/index.py
@@ -2,19 +2,16 @@
 from App.special_dtml import DTMLFile
 from BTrees.IIBTree import difference
 from BTrees.IIBTree import IISet
-from BTrees.IIBTree import intersection
-from BTrees.IIBTree import multiunion
-from BTrees.IIBTree import union
 from logging import getLogger
+from OFS.PropertyManager import PropertyManager
 from plone.event.recurrence import recurrence_sequence_ical
 from plone.event.utils import dt2int
 from plone.event.utils import pydt
 from Products.PageTemplates.PageTemplateFile import PageTemplateFile
-from Products.PluginIndexes.common import safe_callable
-from Products.PluginIndexes.common.util import parseIndexRequest
 from Products.PluginIndexes.unindex import UnIndex
+from Products.PluginIndexes.util import safe_callable
 from ZODB.POSException import ConflictError
-from zope.interface import implements
+from zope.interface import implementer
 from zope.interface import Interface
 from zope.schema import Text
 
@@ -33,25 +30,24 @@ class IDateRecurringIndex(Interface):
     )
 
 
-class DateRecurringIndex(UnIndex):
+@implementer(IDateRecurringIndex)
+class DateRecurringIndex(UnIndex, PropertyManager):
     """Index for dates with recurrence support.
     """
-    implements(IDateRecurringIndex)
 
     meta_type = 'DateRecurringIndex'
-    query_options = ('query', 'range')
+    query_options = ('query', 'range', 'not')
 
     manage_main = PageTemplateFile('www/manageDRIndex', globals())
     manage_browse = DTMLFile('www/browseIndex', globals())
 
     # TODO: for that, this has to be a DTMLFile?
-    #manage_main._setName( 'manage_main' )
-    manage_options = ({'label': 'Settings', 'action': 'manage_main'
-                       },
-                      {'label': 'Browse',
-                       'action': 'manage_browse',
-                       },
-                      )
+    # manage_main._setName('manage_main')
+    manage_options = (
+        {'label': 'Settings', 'action': 'manage_main'},
+        {'label': 'Browse', 'action': 'manage_browse'},
+    ) + PropertyManager.manage_options
+
 
     def __init__(self, id, ignore_ex=None, call_methods=None,
                  extra=None, caller=None):
@@ -106,8 +102,8 @@ def index_object(self, documentId, obj, threshold=None):
         if oldvalues is not _marker and newvalues is not _marker\
                 and not difference(newvalues, oldvalues)\
                 and not difference(oldvalues, newvalues):
-            # difference is calculated relative to first argument, so we have to
-            # use it twice here
+            # difference is calculated relative to first argument, so we have
+            # to use it twice here
             return returnStatus
 
         if oldvalues is not _marker:
@@ -118,7 +114,7 @@ def index_object(self, documentId, obj, threshold=None):
                     del self._unindex[documentId]
                 except ConflictError:
                     raise
-                except:
+                except Exception:
                     LOG.error("Should not happen: oldvalues was there,"
                               " now it's not, for document with id %s" %
                               documentId)
@@ -133,6 +129,9 @@ def index_object(self, documentId, obj, threshold=None):
                 self._unindex[documentId] = tuple(newvalues)
                 returnStatus = 1
 
+        if returnStatus > 0:
+            self._increment_counter()
+
         return returnStatus
 
     def unindex_object(self, documentId):
@@ -148,88 +147,14 @@ def unindex_object(self, documentId):
             del self._unindex[documentId]
         except ConflictError:
             raise
-        except:
+        except Exception:
             LOG.debug('Attempt to unindex nonexistent document'
                       ' with id %s' % documentId, exc_info=True)
 
-    def _apply_index(self, request, resultset=None):
-        """Apply the index to query parameters given in the argument
-
-        Normalize the 'query' arguments into integer values at minute
-        precision before querying.
+    def _convert(self, value, default=None):
+        """Convert record keys/datetimes into int representation.
         """
-        record = parseIndexRequest(request, self.id, self.query_options)
-        if record.keys is None:
-            return None
-
-        keys = map(dt2int, map(pydt, record.keys))
-
-        index = self._index
-        r = None
-        opr = None
-
-        # experimental code for specifing the operator
-        operator = record.get('operator', self.useOperator)
-        if not operator in self.operators:
-            raise RuntimeError("operator not valid: %s" % operator)
-
-        # depending on the operator we use intersection or union
-        if operator == "or":
-            set_func = union
-        else:
-            set_func = intersection
-
-        # range parameter
-        range_arg = record.get('range', None)
-        if range_arg:
-            opr = "range"
-            opr_args = []
-            if range_arg.find("min") > -1:
-                opr_args.append("min")
-            if range_arg.find("max") > -1:
-                opr_args.append("max")
-
-        if record.get('usage', None):
-            # see if any usage params are sent to field
-            opr = record.usage.lower().split(':')
-            opr, opr_args = opr[0], opr[1:]
-
-        if opr == "range":   # range search
-            if 'min' in opr_args:
-                lo = min(keys)
-            else:
-                lo = None
-
-            if 'max' in opr_args:
-                hi = max(keys)
-            else:
-                hi = None
-
-            if hi:
-                setlist = index.values(lo, hi)
-            else:
-                setlist = index.values(lo)
-
-            r = multiunion(setlist)
-
-        else:  # not a range search
-            for key in keys:
-                set = index.get(key, None)
-                if set is not None:
-                    if isinstance(set, int):
-                        set = IISet((set,))
-                    else:
-                        # set can't be bigger than resultset
-                        set = intersection(set, resultset)
-                    r = set_func(r, set)
-
-        if isinstance(r, int):
-            r = IISet((r,))
-
-        if r is None:
-            return IISet(), (self.id,)
-        else:
-            return r, (self.id,)
+        return dt2int(value) or default
 
 
 manage_addDRIndexForm = DTMLFile('www/addDRIndex', globals())
@@ -241,4 +166,5 @@ def manage_addDRIndex(self, id, extra=None, REQUEST=None, RESPONSE=None,
     return self.manage_addIndex(id, 'DateRecurringIndex', extra=extra,
                                 REQUEST=REQUEST, RESPONSE=RESPONSE, URL1=URL3)
 
+
 InitializeClass(DateRecurringIndex)


Repository: Products.DateRecurringIndex


Branch: refs/heads/master
Date: 2017-02-01T14:12:20+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/Products.DateRecurringIndex/commit/0b8a9d11d471edaef2de4fdbbc213e00956ad42e

refactor tests

Files changed:
M src/Products/DateRecurringIndex/tests.py
D src/Products/DateRecurringIndex/index.txt

diff --git a/src/Products/DateRecurringIndex/index.txt b/src/Products/DateRecurringIndex/index.txt
deleted file mode 100644
index 11a26eb..0000000
--- a/src/Products/DateRecurringIndex/index.txt
+++ /dev/null
@@ -1,173 +0,0 @@
-==================
-DateRecurringIndex
-==================
-
--------------
-Overall tests
--------------
-
-iCalendar Recurrence Mode
-=========================
-
-Initialize the catalog with DateRecurringIndex
-
-    >>> from Products.DateRecurringIndex.index import DateRecurringIndex
-    >>> from Products.DateRecurringIndex.tests import DummyExtras
-    >>> dri = DateRecurringIndex('start',
-    ...     extra=DummyExtras(recurrence_type='ical', recurdef='recurdef', 
-    ...                       until='until'))
-
-
-Index must have be the same name as dri's id
-    >>> from Products.ZCatalog.Catalog import Catalog
-    >>> self.app.catalog = Catalog()
-    >>> self.app.catalog.addIndex('start', dri)
-    >>> self.app.catalog.addColumn('id')
-
-Let's define some dummy events and catalog them.
-
-    >>> from datetime import datetime
-    >>> import pytz
-    >>> cet = pytz.timezone('CET')
-
-    >>> from Products.DateRecurringIndex.tests import DummyEvent
-
-
-Index the same event more than once and test if index size changes.
-    >>> test_event = DummyEvent(id='test_event',
-    ...     start=datetime(2001,01,01),
-    ...     recurdef='RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5')
-    >>> self.app.catalog.catalogObject(test_event, 'test_event')
-    1
-    >>> dri.indexSize()
-    5
-
-    >>> test_event = DummyEvent(id='test_event',
-    ...     start=datetime(2001,01,01),
-    ...     recurdef='RRULE:FREQ=DAILY;INTERVAL=1;COUNT=3')
-    >>> self.app.catalog.catalogObject(test_event, 'test_event')
-    1
-    >>> dri.indexSize()
-    3
-
-    >>> test_event = DummyEvent(id='test_event',
-    ...     start=datetime(2001,01,01),
-    ...     recurdef='RRULE:FREQ=DAILY;INTERVAL=1;COUNT=8')
-    >>> self.app.catalog.catalogObject(test_event, 'test_event')
-    1
-    >>> dri.indexSize()
-    8
-
-    >>> self.app.catalog.uncatalogObject('test_event')
-    >>> dri.indexSize()
-    0
-
-
-Index for querying later on...
-    >>> nonr = DummyEvent(id='nonr', start=datetime(2010,10,10,0,0,tzinfo=cet))
-    >>> days = DummyEvent(id='days', start=datetime(2010,10,10,0,0,tzinfo=cet),
-    ...     recurdef='RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5')
-    >>> mins = DummyEvent(id='mins', start=datetime(2010,10,10,0,0,tzinfo=cet),
-    ...     recurdef='RRULE:FREQ=MINUTELY;INTERVAL=10;COUNT=5')
-    >>> dstc = DummyEvent(id='dstc', start=datetime(2010,10,20,0,0,tzinfo=cet),
-    ...     recurdef='RRULE:FREQ=HOURLY;INTERVAL=1;COUNT=7')
-
-
-    >>> self.app.catalog.catalogObject(nonr, 'nonr')
-    1
-    >>> self.app.catalog.catalogObject(days, 'days')
-    1
-    >>> self.app.catalog.catalogObject(mins, 'mins')
-    1
-    >>> self.app.catalog.catalogObject(dstc, 'dstc')
-    1
-
-
-These are the dates indexed:
-    >>> from plone.event.recurrence import recurrence_sequence_ical
-
-    >>> list(recurrence_sequence_ical(start=nonr.start))
-    [datetime.datetime(2010, 10, 10, 0, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>)]
-
-    >>> list(recurrence_sequence_ical(start=days.start, recrule=days.recurdef))
-    [datetime.datetime(2010, 10, 10, 0, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 20, 0, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 30, 0, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 11, 9, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
-        datetime.datetime(2010, 11, 19, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)]
-
-    >>> list(recurrence_sequence_ical(start=mins.start, recrule=mins.recurdef))
-    [datetime.datetime(2010, 10, 10, 0, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 10, 0, 10, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 10, 0, 20, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 10, 0, 30, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 10, 0, 40, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>)]
-
-    >>> list(recurrence_sequence_ical(start=dstc.start, recrule=dstc.recurdef))
-    [datetime.datetime(2010, 10, 20, 0, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 20, 1, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 20, 2, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 20, 3, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 20, 4, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 20, 5, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>),
-        datetime.datetime(2010, 10, 20, 6, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>)]
-
-Query min one specific date
----------------------------
-
-    >>> cat = self.app.catalog
-    >>> query = {
-    ...     'recur_ical': {
-    ...         'query': datetime(2010,10,10,0,0,tzinfo=cet),
-    ...         'range': 'min',
-    ...     },
-    ... }
-    >>> res = cat(**query)
-    >>> sorted([it.id for it in res])
-    ['days', 'dstc', 'mins', 'nonr']
-
-
-Query max one specific date
----------------------------
-
-    >>> cat = self.app.catalog
-    >>> query = {
-    ...     'start': {
-    ...         'query': datetime(2010,10,10,0,0,tzinfo=cet),
-    ...         'range': 'max',
-    ...     },
-    ... }
-    >>> res = cat(**query)
-
-    >>> sorted([it.id for it in res])
-    ['days', 'mins', 'nonr']
-
-
-Query timerange over days and dstc set
---------------------------------------
-
-    >>> query = {
-    ...     'start': {
-    ...         'query': [datetime(2010,10,11,0,0,tzinfo=cet),
-    ...                   datetime(2010,11,20,0,0,tzinfo=cet)],
-    ...         'range': 'min:max',
-    ...     },
-    ... }
-    >>> res = cat(**query)
-    >>> sorted([brain.id for brain in res])
-    ['days', 'dstc']
-
-
-Query timerange over mins set
------------------------------
-
-    >>> query = {
-    ...     'start': {
-    ...         'query': [datetime(2010,10,10,0,10,tzinfo=cet),
-    ...                   datetime(2010,10,10,0,40,tzinfo=cet)],
-    ...         'range': 'min:max',
-    ...     },
-    ... }
-    >>> res = cat(**query)
-    >>> sorted([brain.id for brain in res])
-    ['mins']
diff --git a/src/Products/DateRecurringIndex/tests.py b/src/Products/DateRecurringIndex/tests.py
index 4415762..917a0e5 100644
--- a/src/Products/DateRecurringIndex/tests.py
+++ b/src/Products/DateRecurringIndex/tests.py
@@ -32,14 +32,148 @@ def idsOfBrainsSorted(self, brains):
         return ids
 
 
-TESTFILES = ['index.txt', ]
+class TestIndex(unittest.TestCase):
 
+    def test_index(self):
+        """Test the index in icalendar/rfc5545 recurrence mode.
+        """
 
-def test_suite():
+        # Initialize the catalog with DateRecurringIndex
+        from Products.DateRecurringIndex.index import DateRecurringIndex
 
-    return unittest.TestSuite([
-        ztc.ZopeDocFileSuite(
-            filename,
-            optionflags=optionflags,
-            test_class=DRITestcase
-        ) for filename in TESTFILES])
+        dri = DateRecurringIndex(
+            'start',
+            extra=DummyExtras(
+                recurrence_type='ical',
+                recurdef='recurdef',
+                until='until')
+        )
+
+        # Index must have be the same name as dri's id
+        from Products.ZCatalog.Catalog import Catalog
+
+        cat = Catalog()
+        cat.addIndex('start', dri)
+        cat.addColumn('id')
+
+        # Let's define some dummy events and catalog them.
+        from datetime import datetime
+        import pytz
+        cet = pytz.timezone('CET')
+
+        # Index the same event more than once and test if index size changes.
+        test_event = DummyEvent(
+            id='test_event',
+            start=datetime(2001, 1, 1),
+            recurdef='RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5'
+        )
+        self.assertEqual(
+            cat.catalogObject(test_event, 'test_event'),
+            1
+        )
+        self.assertEqual(dri.indexSize(), 5)
+
+        test_event = DummyEvent(
+            id='test_event',
+            start=datetime(2001, 1, 1),
+            recurdef='RRULE:FREQ=DAILY;INTERVAL=1;COUNT=3'
+        )
+        self.assertEqual(
+            cat.catalogObject(test_event, 'test_event'),
+            1
+        )
+        self.assertEqual(dri.indexSize(), 3)
+
+        test_event = DummyEvent(
+            id='test_event',
+            start=datetime(2001, 1, 1),
+            recurdef='RRULE:FREQ=DAILY;INTERVAL=1;COUNT=8'
+        )
+        self.assertEqual(
+            cat.catalogObject(test_event, 'test_event'),
+            1
+        )
+        self.assertEqual(dri.indexSize(), 8)
+
+        cat.uncatalogObject('test_event')
+        self.assertEqual(dri.indexSize(), 0)
+
+        # Index for querying later on...
+        nonr = DummyEvent(
+            id='nonr', start=datetime(2010, 10, 10, 0, 0, tzinfo=cet)
+        )
+        days = DummyEvent(
+            id='days', start=datetime(2010, 10, 10, 0, 0, tzinfo=cet),
+            recurdef='RRULE:FREQ=DAILY;INTERVAL=10;COUNT=5'
+        )
+        mins = DummyEvent(
+            id='mins', start=datetime(2010, 10, 10, 0, 0, tzinfo=cet),
+            recurdef='RRULE:FREQ=MINUTELY;INTERVAL=10;COUNT=5'
+        )
+        dstc = DummyEvent(
+            id='dstc', start=datetime(2010, 10, 20, 0, 0, tzinfo=cet),
+            recurdef='RRULE:FREQ=HOURLY;INTERVAL=1;COUNT=7'
+        )
+
+        cat.catalogObject(nonr, 'nonr')
+        cat.catalogObject(days, 'days')
+        cat.catalogObject(mins, 'mins')
+        cat.catalogObject(dstc, 'dstc')
+
+        # Query min one specific date
+        query = {
+            'start': {
+                'query': datetime(2010, 10, 10, 0, 0, tzinfo=cet),
+                'range': 'min',
+            },
+        }
+        res = cat(**query)
+        self.assertEqual(
+            sorted([it.id for it in res]),
+            ['days', 'dstc', 'mins', 'nonr']
+        )
+
+        # Query max one specific date
+        query = {
+            'start': {
+                'query': datetime(2010, 10, 10, 0, 0, tzinfo=cet),
+                'range': 'max',
+            },
+        }
+        res = cat(**query)
+        self.assertEqual(
+            sorted([it.id for it in res]),
+            ['days', 'mins', 'nonr']
+        )
+
+        # Query timerange over days and dstc set
+        query = {
+            'start': {
+                'query': [
+                    datetime(2010, 10, 11, 0, 0, tzinfo=cet),
+                    datetime(2010, 11, 20, 0, 0, tzinfo=cet)
+                ],
+                'range': 'min:max',
+            },
+        }
+        res = cat(**query)
+        self.assertEqual(
+            sorted([brain.id for brain in res]),
+            ['days', 'dstc']
+        )
+
+        # Query timerange over mins set
+        query = {
+            'start': {
+                'query': [
+                    datetime(2010, 10, 10, 0, 10, tzinfo=cet),
+                    datetime(2010, 10, 10, 0, 40, tzinfo=cet)
+                ],
+                'range': 'min:max',
+            },
+        }
+        res = cat(**query)
+        self.assertEqual(
+            sorted([brain.id for brain in res]),
+            ['mins']
+        )


Repository: Products.DateRecurringIndex


Branch: refs/heads/master
Date: 2017-02-01T14:12:56+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/Products.DateRecurringIndex/commit/7dd724be4d410765c41f79720f4d2c25b3094be9

fix tests

Files changed:
M src/Products/DateRecurringIndex/tests.py

diff --git a/src/Products/DateRecurringIndex/tests.py b/src/Products/DateRecurringIndex/tests.py
index 917a0e5..413f30d 100644
--- a/src/Products/DateRecurringIndex/tests.py
+++ b/src/Products/DateRecurringIndex/tests.py
@@ -56,6 +56,12 @@ def test_index(self):
         cat.addIndex('start', dri)
         cat.addColumn('id')
 
+        # catalog needs to be contained somewhere, otherwise
+        # aquisition-wrapping of result brains doesn't work
+        from OFS.Folder import Folder
+        portal = Folder(id='portal')
+        cat.__parent__ = portal
+
         # Let's define some dummy events and catalog them.
         from datetime import datetime
         import pytz


Repository: Products.DateRecurringIndex


Branch: refs/heads/master
Date: 2017-02-01T14:27:36+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/Products.DateRecurringIndex/commit/d11a1bd83c17c35d91164ab71c2aff0eadcec751

Products.ZCatalog 4.0a2 &gt; 4.0.dev0 D:

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index ef14738..160af4e 100644
--- a/setup.py
+++ b/setup.py
@@ -44,7 +44,7 @@
         'setuptools',
         'BTrees',
         'plone.event',
-        'Products.ZCatalog >= 4.0a2',
+        'Products.ZCatalog',
         'ZODB',
         'zope.interface',
         'zope.schema',


Repository: Products.DateRecurringIndex


Branch: refs/heads/master
Date: 2017-02-01T20:13:39+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/collective/Products.DateRecurringIndex/commit/a4d01fae615166b4b768feae7bcb479e3f25b80d

remove unused stuff

Files changed:
M src/Products/DateRecurringIndex/tests.py

diff --git a/src/Products/DateRecurringIndex/tests.py b/src/Products/DateRecurringIndex/tests.py
index 413f30d..ce4af3d 100644
--- a/src/Products/DateRecurringIndex/tests.py
+++ b/src/Products/DateRecurringIndex/tests.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 import unittest
 import doctest
-from Testing import ZopeTestCase as ztc
 
 optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS
 
@@ -23,15 +22,6 @@ def __init__(self, recurrence_type=None,
         self.until = until
 
 
-class DRITestcase(ztc.ZopeTestCase):
-    """Base TestCase for DateRecurringIndex."""
-
-    def idsOfBrainsSorted(self, brains):
-        ids = [brain.id for brain in brains]
-        ids.sort()
-        return ids
-
-
 class TestIndex(unittest.TestCase):
 
     def test_index(self):


