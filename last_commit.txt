Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2016-07-05T23:12:29+02:00
Author: Gil Forcada (gforcada) <gforcada@gnome.org>
Commit: https://github.com/plone/plone.app.iterate/commit/72ce424027513137bafebf6b31a890baefe7d060

Use zope.interface decorator

This not only makes code more pleasent to read,
but also makes the code python 3 compatible
(while maintaining python 2 compatibility).

Files changed:
M CHANGES.rst
M plone/app/iterate/archiver.py
M plone/app/iterate/browser/info.py
M plone/app/iterate/containers.py
M plone/app/iterate/copier.py
M plone/app/iterate/dexterity/copier.py
M plone/app/iterate/dexterity/policy.py
M plone/app/iterate/dexterity/relation.py
M plone/app/iterate/event.py
M plone/app/iterate/policy.py
M plone/app/iterate/relation.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 82b7efd..cdd03fb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 3.2.0 (2016-05-26)
diff --git a/plone/app/iterate/archiver.py b/plone/app/iterate/archiver.py
index 451055a..7ffc138 100644
--- a/plone/app/iterate/archiver.py
+++ b/plone/app/iterate/archiver.py
@@ -23,7 +23,7 @@
 $Id: archiver.py 1824 2007-02-08 17:59:41Z hazmat $
 """
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 
 from Products.CMFCore.utils import getToolByName
@@ -31,9 +31,8 @@
 import interfaces
 
 
+@implementer(interfaces.IObjectArchiver)
 class ContentArchiver(object):
-
-    implements(interfaces.IObjectArchiver)
     adapts(interfaces.IIterateAware)
 
     def __init__(self, context):
diff --git a/plone/app/iterate/browser/info.py b/plone/app/iterate/browser/info.py
index f8e7833..0188ccf 100644
--- a/plone/app/iterate/browser/info.py
+++ b/plone/app/iterate/browser/info.py
@@ -13,14 +13,13 @@
 from plone.app.iterate.interfaces import keys, IBaseline
 from plone.app.iterate.permissions import CheckoutPermission
 from plone.memoize.instance import memoize
-from zope.interface import implements
+from zope.interface import implementer
 from zope.viewlet.interfaces import IViewlet
 
 
+@implementer(IViewlet)
 class BaseInfoViewlet(BrowserView):
 
-    implements(IViewlet)
-
     def __init__(self, context, request, view, manager):
         super(BaseInfoViewlet, self).__init__(context, request)
         self.__parent__ = view
diff --git a/plone/app/iterate/containers.py b/plone/app/iterate/containers.py
index 4c15290..1257736 100644
--- a/plone/app/iterate/containers.py
+++ b/plone/app/iterate/containers.py
@@ -20,7 +20,7 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ##################################################################
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 
 from Acquisition import aq_inner, aq_parent
@@ -33,10 +33,10 @@
 from plone.app.iterate.interfaces import IWCContainerLocator
 
 
+@implementer(IWCContainerLocator)
 class HomeFolderLocator(object):
     """Locate the current user's home folder, if possible.
     """
-    implements(IWCContainerLocator)
     adapts(IDynamicType)
 
     def __init__(self, context):
@@ -52,11 +52,11 @@ def __call__(self):
         return getToolByName(self.context, 'portal_membership').getHomeFolder()
 
 
+@implementer(IWCContainerLocator)
 class ParentFolderLocator(object):
     """Locate the parent of the context, if the user has the
     Add portal content permission.
     """
-    implements(IWCContainerLocator)
     adapts(IDynamicType)
 
     def __init__(self, context):
diff --git a/plone/app/iterate/copier.py b/plone/app/iterate/copier.py
index d71c5de..079fe14 100644
--- a/plone/app/iterate/copier.py
+++ b/plone/app/iterate/copier.py
@@ -42,9 +42,8 @@
 from interfaces import CheckinException
 
 
+@interface.implementer(interfaces.IObjectCopier)
 class ContentCopier(object):
-
-    interface.implements(interfaces.IObjectCopier)
     component.adapts(interfaces.IIterateAware)
 
     def __init__(self, context):
diff --git a/plone/app/iterate/dexterity/copier.py b/plone/app/iterate/dexterity/copier.py
index ed7270b..13432ae 100644
--- a/plone/app/iterate/dexterity/copier.py
+++ b/plone/app/iterate/dexterity/copier.py
@@ -13,7 +13,7 @@
 from zope import component
 from zope.annotation.interfaces import IAnnotations
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema import getFieldsInOrder
 
 
@@ -23,8 +23,8 @@
     from zope.app.intid.interfaces import IIntIds
 
 
+@implementer(interfaces.IObjectCopier)
 class ContentCopier(copier.ContentCopier):
-    implements(interfaces.IObjectCopier)
 
     def copyTo(self, container):
         context = aq_inner(self.context)
diff --git a/plone/app/iterate/dexterity/policy.py b/plone/app/iterate/dexterity/policy.py
index a676d84..ab4ddc5 100644
--- a/plone/app/iterate/dexterity/policy.py
+++ b/plone/app/iterate/dexterity/policy.py
@@ -6,14 +6,14 @@
 from plone.app.iterate.util import get_storage
 from zope import component
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(iterate.interfaces.ICheckinCheckoutPolicy)
 class CheckinCheckoutPolicyAdapter(iterate.policy.CheckinCheckoutPolicyAdapter):
     """
     Dexterity Checkin Checkout Policy
     """
-    implements(iterate.interfaces.ICheckinCheckoutPolicy)
 
     def _get_relation_to_baseline(self):
         # do we have a baseline in our relations?
diff --git a/plone/app/iterate/dexterity/relation.py b/plone/app/iterate/dexterity/relation.py
index 547710e..4e8ac0a 100644
--- a/plone/app/iterate/dexterity/relation.py
+++ b/plone/app/iterate/dexterity/relation.py
@@ -3,7 +3,7 @@
 from zc.relation.interfaces import ICatalog
 from zope.annotation.interfaces import IAttributeAnnotatable
 from zope.component import getUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 try:
     from zope.intid.interfaces import IIntIds
@@ -11,8 +11,8 @@
     from zope.app.intid.interfaces import IIntIds
 
 
+@implementer(IStagingRelationValue, IAttributeAnnotatable)
 class StagingRelationValue(relation.RelationValue):
-    implements(IStagingRelationValue, IAttributeAnnotatable)
 
     @classmethod
     def get_relations_of(cls, obj, from_attribute=None):
diff --git a/plone/app/iterate/event.py b/plone/app/iterate/event.py
index ecf99ee..c2b2c77 100644
--- a/plone/app/iterate/event.py
+++ b/plone/app/iterate/event.py
@@ -21,27 +21,25 @@
 ##################################################################
 """
 """
-from zope.interface import implements
+from zope.interface import implementer
 from zope.event import notify
 from zope.component.interfaces import ObjectEvent
 
 import interfaces
 
 
+@implementer(interfaces.ICheckoutEvent)
 class CheckoutEvent(ObjectEvent):
 
-    implements(interfaces.ICheckoutEvent)
-
     def __init__(self, baseline, wc, relation):
         ObjectEvent.__init__(self, baseline)
         self.working_copy = wc
         self.relation = relation
 
 
+@implementer(interfaces.ICheckinEvent)
 class CheckinEvent(ObjectEvent):
 
-    implements(interfaces.ICheckinEvent)
-
     def __init__(self, wc, baseline, relation, message):
         ObjectEvent.__init__(self, wc)
         self.baseline = baseline
@@ -49,37 +47,35 @@ def __init__(self, wc, baseline, relation, message):
         self.message = message
 
 
+@implementer(interfaces.IAfterCheckinEvent)
 class AfterCheckinEvent(ObjectEvent):
 
-    implements(interfaces.IAfterCheckinEvent)
-
     def __init__(self, new_baseline, checkin_message):
         super(AfterCheckinEvent, self).__init__(new_baseline)
         self.message = checkin_message
 
 
+@implementer(interfaces.ICancelCheckoutEvent)
 class CancelCheckoutEvent(ObjectEvent):
 
-    implements(interfaces.ICancelCheckoutEvent)
-
     def __init__(self, wc, baseline):
         ObjectEvent.__init__(self, wc)
         self.baseline = baseline
 
 
+@implementer(interfaces.IWorkingCopyDeletedEvent)
 class WorkingCopyDeletedEvent(ObjectEvent):
 
-    implements(interfaces.IWorkingCopyDeletedEvent)
-
     def __init__(self, wc, baseline, relation):
         ObjectEvent.__init__(self, wc)
         self.baseline = baseline
         self.relation = relation
 
 
+@implementer(interfaces.IBeforeCheckoutEvent)
 class BeforeCheckoutEvent(ObjectEvent):
 
-    implements(interfaces.IBeforeCheckoutEvent)
+    pass
 
 
 def handleDeletion(reference, event):
diff --git a/plone/app/iterate/policy.py b/plone/app/iterate/policy.py
index 249e56b..2674282 100644
--- a/plone/app/iterate/policy.py
+++ b/plone/app/iterate/policy.py
@@ -32,9 +32,10 @@
 from relation import WorkingCopyRelation
 from zope import component
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(interfaces.ICheckinCheckoutPolicy)
 class CheckinCheckoutPolicyAdapter(object):
     """
     Default Checkin Checkout Policy For Content
@@ -47,8 +48,6 @@ class CheckinCheckoutPolicyAdapter(object):
 
     dexterity folder has dexterity compatible one
     """
-
-    implements(interfaces.ICheckinCheckoutPolicy)
     component.adapts(interfaces.IIterateAware)
 
     # used when creating baseline version for first time
diff --git a/plone/app/iterate/relation.py b/plone/app/iterate/relation.py
index 4e2948d..4cb6f62 100644
--- a/plone/app/iterate/relation.py
+++ b/plone/app/iterate/relation.py
@@ -23,7 +23,7 @@
 $Id: relation.py 1392 2006-06-20 01:02:17Z hazmat $
 """
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 from zope.annotation.interfaces import IAttributeAnnotatable
 
@@ -35,6 +35,7 @@
 from interfaces import IIterateAware
 
 
+@implementer(IWorkingCopyRelation, IAttributeAnnotatable)
 class WorkingCopyRelation(Reference):
     """
     Source Object is Working Copy
@@ -43,9 +44,8 @@ class WorkingCopyRelation(Reference):
     """
     relationship = "Working Copy Relation"
 
-    implements(IWorkingCopyRelation, IAttributeAnnotatable)
-
 
+@implementer(ICheckinCheckoutReference)
 class CheckinCheckoutReferenceAdapter(object):
     """
     default adapter for references.
@@ -64,8 +64,6 @@ class CheckinCheckoutReferenceAdapter(object):
     backward refs on baseline are kept by virtue of UID transferance
 
     """
-
-    implements(ICheckinCheckoutReference)
     adapts(IIterateAware)
 
     storage_key = "coci.references"
@@ -84,6 +82,7 @@ def checkin(self, *args):
     checkoutBackReferences = checkinBackReferences = checkin
 
 
+@implementer(ICheckinCheckoutReference)
 class NoCopyReferenceAdapter(object):
     """
     an adapter for references that does not copy them to the wc on checkout.
@@ -91,8 +90,6 @@ class NoCopyReferenceAdapter(object):
     additionally custom reference state is kept when the wc is checked in.
     """
 
-    implements(ICheckinCheckoutReference)
-
     def __init__(self, context):
         self.context = context
 


Repository: plone.app.iterate


Branch: refs/heads/master
Date: 2016-07-09T08:50:42+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.iterate/commit/454d835705bcc919e5a75003c742ba82f0d0ae59

Merge pull request #29 from plone/gforcada-use-zope-decorators

Use zope.interface decorator

Files changed:
M CHANGES.rst
M plone/app/iterate/archiver.py
M plone/app/iterate/browser/info.py
M plone/app/iterate/containers.py
M plone/app/iterate/copier.py
M plone/app/iterate/dexterity/copier.py
M plone/app/iterate/dexterity/policy.py
M plone/app/iterate/dexterity/relation.py
M plone/app/iterate/event.py
M plone/app/iterate/policy.py
M plone/app/iterate/relation.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 82b7efd..cdd03fb 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Use zope.interface decorator.
+  [gforcada]
 
 
 3.2.0 (2016-05-26)
diff --git a/plone/app/iterate/archiver.py b/plone/app/iterate/archiver.py
index 451055a..7ffc138 100644
--- a/plone/app/iterate/archiver.py
+++ b/plone/app/iterate/archiver.py
@@ -23,7 +23,7 @@
 $Id: archiver.py 1824 2007-02-08 17:59:41Z hazmat $
 """
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 
 from Products.CMFCore.utils import getToolByName
@@ -31,9 +31,8 @@
 import interfaces
 
 
+@implementer(interfaces.IObjectArchiver)
 class ContentArchiver(object):
-
-    implements(interfaces.IObjectArchiver)
     adapts(interfaces.IIterateAware)
 
     def __init__(self, context):
diff --git a/plone/app/iterate/browser/info.py b/plone/app/iterate/browser/info.py
index f8e7833..0188ccf 100644
--- a/plone/app/iterate/browser/info.py
+++ b/plone/app/iterate/browser/info.py
@@ -13,14 +13,13 @@
 from plone.app.iterate.interfaces import keys, IBaseline
 from plone.app.iterate.permissions import CheckoutPermission
 from plone.memoize.instance import memoize
-from zope.interface import implements
+from zope.interface import implementer
 from zope.viewlet.interfaces import IViewlet
 
 
+@implementer(IViewlet)
 class BaseInfoViewlet(BrowserView):
 
-    implements(IViewlet)
-
     def __init__(self, context, request, view, manager):
         super(BaseInfoViewlet, self).__init__(context, request)
         self.__parent__ = view
diff --git a/plone/app/iterate/containers.py b/plone/app/iterate/containers.py
index 4c15290..1257736 100644
--- a/plone/app/iterate/containers.py
+++ b/plone/app/iterate/containers.py
@@ -20,7 +20,7 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ##################################################################
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 
 from Acquisition import aq_inner, aq_parent
@@ -33,10 +33,10 @@
 from plone.app.iterate.interfaces import IWCContainerLocator
 
 
+@implementer(IWCContainerLocator)
 class HomeFolderLocator(object):
     """Locate the current user's home folder, if possible.
     """
-    implements(IWCContainerLocator)
     adapts(IDynamicType)
 
     def __init__(self, context):
@@ -52,11 +52,11 @@ def __call__(self):
         return getToolByName(self.context, 'portal_membership').getHomeFolder()
 
 
+@implementer(IWCContainerLocator)
 class ParentFolderLocator(object):
     """Locate the parent of the context, if the user has the
     Add portal content permission.
     """
-    implements(IWCContainerLocator)
     adapts(IDynamicType)
 
     def __init__(self, context):
diff --git a/plone/app/iterate/copier.py b/plone/app/iterate/copier.py
index d71c5de..079fe14 100644
--- a/plone/app/iterate/copier.py
+++ b/plone/app/iterate/copier.py
@@ -42,9 +42,8 @@
 from interfaces import CheckinException
 
 
+@interface.implementer(interfaces.IObjectCopier)
 class ContentCopier(object):
-
-    interface.implements(interfaces.IObjectCopier)
     component.adapts(interfaces.IIterateAware)
 
     def __init__(self, context):
diff --git a/plone/app/iterate/dexterity/copier.py b/plone/app/iterate/dexterity/copier.py
index ed7270b..13432ae 100644
--- a/plone/app/iterate/dexterity/copier.py
+++ b/plone/app/iterate/dexterity/copier.py
@@ -13,7 +13,7 @@
 from zope import component
 from zope.annotation.interfaces import IAnnotations
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 from zope.schema import getFieldsInOrder
 
 
@@ -23,8 +23,8 @@
     from zope.app.intid.interfaces import IIntIds
 
 
+@implementer(interfaces.IObjectCopier)
 class ContentCopier(copier.ContentCopier):
-    implements(interfaces.IObjectCopier)
 
     def copyTo(self, container):
         context = aq_inner(self.context)
diff --git a/plone/app/iterate/dexterity/policy.py b/plone/app/iterate/dexterity/policy.py
index a676d84..ab4ddc5 100644
--- a/plone/app/iterate/dexterity/policy.py
+++ b/plone/app/iterate/dexterity/policy.py
@@ -6,14 +6,14 @@
 from plone.app.iterate.util import get_storage
 from zope import component
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(iterate.interfaces.ICheckinCheckoutPolicy)
 class CheckinCheckoutPolicyAdapter(iterate.policy.CheckinCheckoutPolicyAdapter):
     """
     Dexterity Checkin Checkout Policy
     """
-    implements(iterate.interfaces.ICheckinCheckoutPolicy)
 
     def _get_relation_to_baseline(self):
         # do we have a baseline in our relations?
diff --git a/plone/app/iterate/dexterity/relation.py b/plone/app/iterate/dexterity/relation.py
index 547710e..4e8ac0a 100644
--- a/plone/app/iterate/dexterity/relation.py
+++ b/plone/app/iterate/dexterity/relation.py
@@ -3,7 +3,7 @@
 from zc.relation.interfaces import ICatalog
 from zope.annotation.interfaces import IAttributeAnnotatable
 from zope.component import getUtility
-from zope.interface import implements
+from zope.interface import implementer
 
 try:
     from zope.intid.interfaces import IIntIds
@@ -11,8 +11,8 @@
     from zope.app.intid.interfaces import IIntIds
 
 
+@implementer(IStagingRelationValue, IAttributeAnnotatable)
 class StagingRelationValue(relation.RelationValue):
-    implements(IStagingRelationValue, IAttributeAnnotatable)
 
     @classmethod
     def get_relations_of(cls, obj, from_attribute=None):
diff --git a/plone/app/iterate/event.py b/plone/app/iterate/event.py
index ecf99ee..c2b2c77 100644
--- a/plone/app/iterate/event.py
+++ b/plone/app/iterate/event.py
@@ -21,27 +21,25 @@
 ##################################################################
 """
 """
-from zope.interface import implements
+from zope.interface import implementer
 from zope.event import notify
 from zope.component.interfaces import ObjectEvent
 
 import interfaces
 
 
+@implementer(interfaces.ICheckoutEvent)
 class CheckoutEvent(ObjectEvent):
 
-    implements(interfaces.ICheckoutEvent)
-
     def __init__(self, baseline, wc, relation):
         ObjectEvent.__init__(self, baseline)
         self.working_copy = wc
         self.relation = relation
 
 
+@implementer(interfaces.ICheckinEvent)
 class CheckinEvent(ObjectEvent):
 
-    implements(interfaces.ICheckinEvent)
-
     def __init__(self, wc, baseline, relation, message):
         ObjectEvent.__init__(self, wc)
         self.baseline = baseline
@@ -49,37 +47,35 @@ def __init__(self, wc, baseline, relation, message):
         self.message = message
 
 
+@implementer(interfaces.IAfterCheckinEvent)
 class AfterCheckinEvent(ObjectEvent):
 
-    implements(interfaces.IAfterCheckinEvent)
-
     def __init__(self, new_baseline, checkin_message):
         super(AfterCheckinEvent, self).__init__(new_baseline)
         self.message = checkin_message
 
 
+@implementer(interfaces.ICancelCheckoutEvent)
 class CancelCheckoutEvent(ObjectEvent):
 
-    implements(interfaces.ICancelCheckoutEvent)
-
     def __init__(self, wc, baseline):
         ObjectEvent.__init__(self, wc)
         self.baseline = baseline
 
 
+@implementer(interfaces.IWorkingCopyDeletedEvent)
 class WorkingCopyDeletedEvent(ObjectEvent):
 
-    implements(interfaces.IWorkingCopyDeletedEvent)
-
     def __init__(self, wc, baseline, relation):
         ObjectEvent.__init__(self, wc)
         self.baseline = baseline
         self.relation = relation
 
 
+@implementer(interfaces.IBeforeCheckoutEvent)
 class BeforeCheckoutEvent(ObjectEvent):
 
-    implements(interfaces.IBeforeCheckoutEvent)
+    pass
 
 
 def handleDeletion(reference, event):
diff --git a/plone/app/iterate/policy.py b/plone/app/iterate/policy.py
index 249e56b..2674282 100644
--- a/plone/app/iterate/policy.py
+++ b/plone/app/iterate/policy.py
@@ -32,9 +32,10 @@
 from relation import WorkingCopyRelation
 from zope import component
 from zope.event import notify
-from zope.interface import implements
+from zope.interface import implementer
 
 
+@implementer(interfaces.ICheckinCheckoutPolicy)
 class CheckinCheckoutPolicyAdapter(object):
     """
     Default Checkin Checkout Policy For Content
@@ -47,8 +48,6 @@ class CheckinCheckoutPolicyAdapter(object):
 
     dexterity folder has dexterity compatible one
     """
-
-    implements(interfaces.ICheckinCheckoutPolicy)
     component.adapts(interfaces.IIterateAware)
 
     # used when creating baseline version for first time
diff --git a/plone/app/iterate/relation.py b/plone/app/iterate/relation.py
index 4e2948d..4cb6f62 100644
--- a/plone/app/iterate/relation.py
+++ b/plone/app/iterate/relation.py
@@ -23,7 +23,7 @@
 $Id: relation.py 1392 2006-06-20 01:02:17Z hazmat $
 """
 
-from zope.interface import implements
+from zope.interface import implementer
 from zope.component import adapts
 from zope.annotation.interfaces import IAttributeAnnotatable
 
@@ -35,6 +35,7 @@
 from interfaces import IIterateAware
 
 
+@implementer(IWorkingCopyRelation, IAttributeAnnotatable)
 class WorkingCopyRelation(Reference):
     """
     Source Object is Working Copy
@@ -43,9 +44,8 @@ class WorkingCopyRelation(Reference):
     """
     relationship = "Working Copy Relation"
 
-    implements(IWorkingCopyRelation, IAttributeAnnotatable)
-
 
+@implementer(ICheckinCheckoutReference)
 class CheckinCheckoutReferenceAdapter(object):
     """
     default adapter for references.
@@ -64,8 +64,6 @@ class CheckinCheckoutReferenceAdapter(object):
     backward refs on baseline are kept by virtue of UID transferance
 
     """
-
-    implements(ICheckinCheckoutReference)
     adapts(IIterateAware)
 
     storage_key = "coci.references"
@@ -84,6 +82,7 @@ def checkin(self, *args):
     checkoutBackReferences = checkinBackReferences = checkin
 
 
+@implementer(ICheckinCheckoutReference)
 class NoCopyReferenceAdapter(object):
     """
     an adapter for references that does not copy them to the wc on checkout.
@@ -91,8 +90,6 @@ class NoCopyReferenceAdapter(object):
     additionally custom reference state is kept when the wc is checked in.
     """
 
-    implements(ICheckinCheckoutReference)
-
     def __init__(self, context):
         self.context = context
 


