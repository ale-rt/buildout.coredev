Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2017-04-15T12:32:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/c814f8a39043e57eff66c82c6d129c7426f511f7

isort

Files changed:
M CHANGES.rst
M plone/app/contentrules/__init__.py
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/api.py
M plone/app/contentrules/browser/__init__.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/info.py
M plone/app/contentrules/browser/navigation.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/traversal.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/handlers.py
M plone/app/contentrules/namechooser.py
M plone/app/contentrules/rule.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_modify.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_browser.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_configuration.py
M plone/app/contentrules/tests/test_handlers.py
M plone/app/contentrules/tests/test_rule_assignment_mapping.py
M plone/app/contentrules/tests/test_rule_management_views.py
M plone/app/contentrules/tests/test_setup.py
M plone/app/contentrules/tests/test_traversal.py
M plone/app/contentrules/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 154b0a6..75f2e97 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Bug fixes:
 - Ensure error message is an unicode object
   [mtrebron]
 
+- Cleanup: isort.
+  [jensens]
+
 
 4.0.14 (2017-04-02)
 -------------------
diff --git a/plone/app/contentrules/__init__.py b/plone/app/contentrules/__init__.py
index 730cad8..056463f 100644
--- a/plone/app/contentrules/__init__.py
+++ b/plone/app/contentrules/__init__.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
 # Import PloneMessageFactory to create messages in the plone domain
 from zope.i18nmessageid import MessageFactory
+
+
 PloneMessageFactory = MessageFactory('plone')
diff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py
index 6cf59ea..6b7384b 100644
--- a/plone/app/contentrules/actions/__init__.py
+++ b/plone/app/contentrules/actions/__init__.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
-import os
-from plone.uuid.interfaces import IUUID
-from zope.component.hooks import getSite
+from plone.app.contentrules.browser.formhelper import AddForm
+from plone.app.contentrules.browser.formhelper import EditForm
 from plone.app.uuid.utils import uuidToPhysicalPath
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.uuid.interfaces import IUUID
 from z3c.form import form
+from zope.component.hooks import getSite
+
+import os
 
 
 class ContentWrapper(object):
@@ -55,4 +57,4 @@ def create(self, data):
 
 class ActionEditForm(EditForm):
     def getContent(self):
-        return ContentWrapper(super(ActionEditForm, self).getContent())
\ No newline at end of file
+        return ContentWrapper(super(ActionEditForm, self).getContent())
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index e198ddd..96d28dc 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -1,24 +1,26 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.vocabularies.catalog import CatalogSource
-from zope.component import adapts
-from zope.event import notify
-from zope.interface import implementer, Interface
-from zope.lifecycleevent import ObjectCopiedEvent
-from zope import schema
-
 from Acquisition import aq_base
-import OFS.subscribers
 from OFS.event import ObjectClonedEvent
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.vocabularies.catalog import CatalogSource
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
+from zope import schema
+from zope.component import adapts
+from zope.event import notify
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.lifecycleevent import ObjectCopiedEvent
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+import OFS.subscribers
 
 
 class ICopyAction(Interface):
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index 4bd6803..2dfc291 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -1,17 +1,19 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-import transaction
-from zope.interface import implementer, Interface
-from zope.component import adapts
-
-from Acquisition import aq_inner, aq_parent
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import NullAddForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import NullAddForm
+import transaction
 
 
 class IDeleteAction(Interface):
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index 8a932dc..9d8b7c9 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -1,19 +1,20 @@
 # -*- coding: utf-8 -*-
-import logging
-
+from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from zope import schema
 from zope.component import adapts
 from zope.component.interfaces import IObjectEvent
-from zope.interface import implementer, Interface
-from zope import schema
-
-from OFS.SimpleItem import SimpleItem
+from zope.interface import implementer
+from zope.interface import Interface
 
-from Products.CMFCore.utils import getToolByName
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
+import logging
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules.logger")
 handler = logging.StreamHandler()
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index c688179..c7715ab 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -1,29 +1,31 @@
 # -*- coding: utf-8 -*-
-import logging
-import traceback
-from smtplib import SMTPException
-
-from plone.contentrules.rule.interfaces import IRuleElementData, IExecutable
-from plone.registry.interfaces import IRegistry
-from plone.stringinterp.interfaces import IStringInterpolator
-from zope.component import adapts
-from zope.component import getUtility
-from zope.component.interfaces import ComponentLookupError
-from zope.interface import Interface, implementer
-from zope import schema
-from zope.globalrequest import getRequest
-
 from Acquisition import aq_inner
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from plone.registry.interfaces import IRegistry
+from plone.stringinterp.interfaces import IStringInterpolator
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.MailHost.MailHost import MailHostError
 from Products.statusmessages.interfaces import IStatusMessage
+from smtplib import SMTPException
+from zope import schema
+from zope.component import adapts
+from zope.component import getUtility
+from zope.component.interfaces import ComponentLookupError
+from zope.globalrequest import getRequest
+from zope.interface import implementer
+from zope.interface import Interface
+
+import logging
+import traceback
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules")
 
@@ -190,4 +192,4 @@ class MailEditForm(ActionEditForm):
 
 
 class MailEditFormView(ContentRuleFormWrapper):
-    form = MailEditForm
\ No newline at end of file
+    form = MailEditForm
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index ade841e..b1082c6 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -1,25 +1,28 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.vocabularies.catalog import CatalogSource
-from zope.component import adapts
-from zope.container.contained import notifyContainerModified
-from zope.event import notify
-from zope.interface import implementer, Interface
-from zope.lifecycleevent import ObjectMovedEvent
-from zope import schema
-
-from Acquisition import aq_inner, aq_parent, aq_base
-from OFS.event import ObjectWillBeMovedEvent
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from OFS.CopySupport import sanity_check
+from OFS.event import ObjectWillBeMovedEvent
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.vocabularies.catalog import CatalogSource
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from zope import schema
+from zope.component import adapts
+from zope.container.contained import notifyContainerModified
+from zope.event import notify
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.lifecycleevent import ObjectMovedEvent
 
 
 class IMoveAction(Interface):
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index b07a3f3..4604c43 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -1,16 +1,16 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.contentrules import PloneMessageFactory
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.statusmessages.interfaces import IStatusMessage
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class INotifyAction(Interface):
@@ -60,7 +60,7 @@ def __init__(self, context, element, event):
 
     def __call__(self):
         request = self.context.REQUEST
-        message = PloneMessageFactory(self.element.message)
+        message = _(self.element.message)
         message_type = self.element.message_type
         IStatusMessage(request).addStatusMessage(message, type=message_type)
         return True
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 39d3c60..de85572 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -1,18 +1,19 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.interface import implementer, Interface
-from zope.component import adapts
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IWorkflowAction(Interface):
diff --git a/plone/app/contentrules/api.py b/plone/app/contentrules/api.py
index 374b58a..a093a61 100644
--- a/plone/app/contentrules/api.py
+++ b/plone/app/contentrules/api.py
@@ -1,9 +1,10 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility
+from plone.app.contentrules.rule import get_assignments
+from plone.app.contentrules.rule import insert_assignment
 from plone.contentrules.engine.assignments import RuleAssignment
-from plone.contentrules.engine.interfaces import IRuleStorage, \
-    IRuleAssignmentManager
-from plone.app.contentrules.rule import get_assignments, insert_assignment
+from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import queryUtility
 
 
 def assign_rule(container, rule_id, enabled=True, bubbles=True,
diff --git a/plone/app/contentrules/browser/__init__.py b/plone/app/contentrules/browser/__init__.py
index 4aa11c7..ec51c5a 100644
--- a/plone/app/contentrules/browser/__init__.py
+++ b/plone/app/contentrules/browser/__init__.py
@@ -1,2 +1,2 @@
 # -*- coding: utf-8 -*-
-#
\ No newline at end of file
+#
diff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py
index 76b3d2f..e6f90c9 100644
--- a/plone/app/contentrules/browser/adding.py
+++ b/plone/app/contentrules/browser/adding.py
@@ -1,21 +1,20 @@
 # -*- coding: utf-8 -*-
-from warnings import warn
-
-from zope.interface import implementer
-from zope.component import getMultiAdapter, getUtility
-from zope.container.interfaces import INameChooser
-
-from Acquisition import aq_base, aq_inner, aq_parent
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from OFS.SimpleItem import SimpleItem
-from Products.Five.browser import BrowserView
-
-from Products.statusmessages.interfaces import IStatusMessage
-from plone.contentrules.engine.interfaces import IRuleStorage
-
 from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.interfaces import IRuleActionAdding
 from plone.app.contentrules.browser.interfaces import IRuleAdding
 from plone.app.contentrules.browser.interfaces import IRuleConditionAdding
-from plone.app.contentrules.browser.interfaces import IRuleActionAdding
+from plone.contentrules.engine.interfaces import IRuleStorage
+from Products.Five.browser import BrowserView
+from Products.statusmessages.interfaces import IStatusMessage
+from warnings import warn
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.container.interfaces import INameChooser
+from zope.interface import implementer
 
 
 @implementer(IRuleAdding)
diff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py
index 1f14cac..7eeb945 100644
--- a/plone/app/contentrules/browser/assignments.py
+++ b/plone/app/contentrules/browser/assignments.py
@@ -1,18 +1,18 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.engine.interfaces import IRuleStorage
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules import api
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.memoize.instance import memoize
-from zope.component import getUtility, getMultiAdapter
-from zope.schema.interfaces import IVocabularyFactory
-
-from Acquisition import aq_inner, aq_parent
+from Products.CMFCore.interfaces import ISiteRoot
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.CMFCore.interfaces import ISiteRoot
 from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules import api
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.schema.interfaces import IVocabularyFactory
 
 
 class ManageAssignments(BrowserView):
diff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py
index 9a2142c..c32c377 100644
--- a/plone/app/contentrules/browser/controlpanel.py
+++ b/plone/app/contentrules/browser/controlpanel.py
@@ -1,20 +1,18 @@
 # -*- coding: utf-8 -*-
-from zope.component import getMultiAdapter
 from AccessControl import Unauthorized
-from zope.interface import implementer
-from zope.i18n import translate
-from zope.component import getUtility
-from zope.schema.interfaces import IVocabularyFactory
-
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.interfaces import IContentRulesControlPanel
+from plone.app.contentrules.rule import get_assignments
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.memoize.instance import memoize
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.interfaces import IContentRulesControlPanel
-from plone.app.contentrules.rule import get_assignments
 from Products.statusmessages.interfaces import IStatusMessage
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.i18n import translate
+from zope.interface import implementer
+from zope.schema.interfaces import IVocabularyFactory
 
 
 def get_trigger_class(trigger):
diff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py
index 2f6754b..26be746 100644
--- a/plone/app/contentrules/browser/elements.py
+++ b/plone/app/contentrules/browser/elements.py
@@ -1,23 +1,23 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
-from zope.i18n import translate
-
+from Acquisition import aq_inner
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules import api
+from plone.app.contentrules.rule import get_assignments
+from plone.contentrules.engine import utils
 from plone.contentrules.rule.interfaces import IRuleAction
 from plone.contentrules.rule.interfaces import IRuleCondition
 from plone.contentrules.rule.interfaces import IRuleElementData
-from plone.contentrules.engine import utils
 from plone.memoize.instance import memoize
-from zope.component import getMultiAdapter, getUtilitiesFor, getUtility
-from zope.schema.interfaces import IVocabularyFactory
-
-from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.contentrules import PloneMessageFactory as _, api
-from plone.app.contentrules.rule import get_assignments
+from zope.component import getMultiAdapter
+from zope.component import getUtilitiesFor
+from zope.component import getUtility
+from zope.i18n import translate
+from zope.schema.interfaces import IVocabularyFactory
 
 
 class ManageElements(BrowserView):
diff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py
index a0cba37..857f25d 100644
--- a/plone/app/contentrules/browser/formhelper.py
+++ b/plone/app/contentrules/browser/formhelper.py
@@ -1,19 +1,19 @@
 # -*- coding: utf-8 -*-
-from z3c.form import form, button
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.interfaces import IContentRulesForm
+from plone.autoform.form import AutoExtensibleForm
 from plone.z3cform import layout
+from Products.Five.browser import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from z3c.form import button
+from z3c.form import form
 from zope.component import getMultiAdapter
 from zope.event import notify
 from zope.interface import implementer
-import zope.lifecycleevent
-
-from Acquisition import aq_parent, aq_inner
-from Products.Five.browser import BrowserView
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.interfaces import IContentRulesForm
 
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.autoform.form import AutoExtensibleForm
+import zope.lifecycleevent
 
 
 @implementer(IContentRulesForm)
@@ -141,4 +141,4 @@ def nextURL(self):
 
 class ContentRuleFormWrapper(layout.FormWrapper):
 
-    index = ViewPageTemplateFile('templates/contentrules-pageform.pt')
\ No newline at end of file
+    index = ViewPageTemplateFile('templates/contentrules-pageform.pt')
diff --git a/plone/app/contentrules/browser/info.py b/plone/app/contentrules/browser/info.py
index a56cea3..d223983 100644
--- a/plone/app/contentrules/browser/info.py
+++ b/plone/app/contentrules/browser/info.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.interfaces import IRuleAssignable
-
 from AccessControl import getSecurityManager
+from plone.contentrules.engine.interfaces import IRuleAssignable
+from plone.contentrules.engine.interfaces import IRuleStorage
 from Products.Five.browser import BrowserView
+from zope.component import queryUtility
 
 
 class ContentRulesInfo(BrowserView):
diff --git a/plone/app/contentrules/browser/navigation.py b/plone/app/contentrules/browser/navigation.py
index 6b6d4a9..6c61d84 100644
--- a/plone/app/contentrules/browser/navigation.py
+++ b/plone/app/contentrules/browser/navigation.py
@@ -1,8 +1,7 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs
 
 
 class RuleBreadcrumbs(PhysicalNavigationBreadcrumbs):
diff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py
index 42ee6a9..fa47978 100644
--- a/plone/app/contentrules/browser/rule.py
+++ b/plone/app/contentrules/browser/rule.py
@@ -1,17 +1,15 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IRuleConfiguration
-from zope.component import getMultiAdapter
-
-from Acquisition import aq_parent, aq_inner
-
-from Products.CMFPlone.utils import base_hasattr
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.browser.formhelper import AddForm
-from plone.app.contentrules.browser.formhelper import EditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
-
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.app.contentrules.rule import Rule
+from plone.contentrules.rule.interfaces import IRuleConfiguration
+from Products.CMFPlone.utils import base_hasattr
 from z3c.form.form import applyChanges
+from zope.component import getMultiAdapter
 
 
 class RuleAddForm(AddForm):
@@ -55,4 +53,4 @@ def nextURL(self):
 
 
 class RuleEditFormView(ContentRuleFormWrapper):
-    form = RuleEditForm
\ No newline at end of file
+    form = RuleEditForm
diff --git a/plone/app/contentrules/browser/traversal.py b/plone/app/contentrules/browser/traversal.py
index 94ee857..d6f98d3 100644
--- a/plone/app/contentrules/browser/traversal.py
+++ b/plone/app/contentrules/browser/traversal.py
@@ -1,14 +1,12 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import adapts, getUtility
-
-from zope.traversing.interfaces import ITraversable
-from zope.publisher.interfaces.browser import IBrowserRequest
-
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.rule.interfaces import IRule
-
 from Products.CMFCore.interfaces import ISiteRoot
+from zope.component import adapts
+from zope.component import getUtility
+from zope.interface import implementer
+from zope.publisher.interfaces.browser import IBrowserRequest
+from zope.traversing.interfaces import ITraversable
 
 
 @implementer(ITraversable)
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index eebe094..47af304 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -1,19 +1,23 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
+from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import AddForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from z3c.form import form
-from zope.interface import implementer, Interface
 from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
+
 
-from OFS.SimpleItem import SimpleItem
 try:
     from Products.ATContentTypes.interfaces import IFileContent
 except ImportError:
     IFileContent = None
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 
 class IFileExtensionCondition(Interface):
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index ea4f4db..789efc5 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from z3c.form import form
-from zope.interface import implementer, Interface
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IGroupCondition(Interface):
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index d4bbde2..b0e8503 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -1,20 +1,22 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-from zope.site.hooks import getSite
-from zope.i18n import translate
-
-from Acquisition import aq_inner, aq_base
+from Acquisition import aq_base
+from Acquisition import aq_inner
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.interfaces import ITypesTool
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.interfaces import ITypesTool
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapts
+from zope.i18n import translate
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.site.hooks import getSite
 
 
 class IPortalTypeCondition(Interface):
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index ca9cf46..e3fef2e 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -1,17 +1,18 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-
 from Acquisition import aq_inner
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IRoleCondition(Interface):
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index 3be6eab..a832f0c 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -1,18 +1,19 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
-
-from Products.CMFCore.Expression import Expression, createExprContext
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.Expression import createExprContext
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class ITalesExpressionCondition(Interface):
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index feba51d..0595b19 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
 from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IWorkflowStateCondition(Interface):
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index e4b7cb4..5141289 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from z3c.form import form
-from zope.interface import implementer, Interface
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.interfaces import IActionSucceededEvent
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.interfaces import IActionSucceededEvent
+from z3c.form import form
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IWorkflowTransitionCondition(Interface):
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index 4454335..4f0427f 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -1,35 +1,32 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
+from plone.app.contentrules import api
+from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler
+from plone.app.contentrules.rule import get_assignments
+from plone.app.contentrules.rule import Rule
+from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IRuleAction
+from plone.contentrules.rule.interfaces import IRuleCondition
+from plone.contentrules.rule.interfaces import IRuleElement
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.interfaces import ISiteRoot
+from Products.GenericSetup.interfaces import IBody
+from Products.GenericSetup.interfaces import ISetupEnviron
+from Products.GenericSetup.utils import _getDottedName
+from Products.GenericSetup.utils import _resolveDottedName
+from Products.GenericSetup.utils import XMLAdapterBase
 from zope.component import adapts
 from zope.component import getUtility
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.container.interfaces import INameChooser
-from zope.interface import Interface
 from zope.interface import implementer
-from zope.schema.interfaces import IField
+from zope.interface import Interface
 from zope.schema.interfaces import ICollection
+from zope.schema.interfaces import IField
 from zope.schema.interfaces import IFromUnicode
 
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.GenericSetup.interfaces import IBody
-from Products.GenericSetup.interfaces import ISetupEnviron
-from Products.GenericSetup.utils import XMLAdapterBase
-from Products.GenericSetup.utils import _getDottedName
-from Products.GenericSetup.utils import _resolveDottedName
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.interfaces import IRuleAssignmentManager
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IRuleElement
-from plone.contentrules.rule.interfaces import IRuleElementData
-
-from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler
-from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.rule import get_assignments
-from plone.app.contentrules import api
-
 
 def as_bool(string, default=False):
     if string is None or not str(string):
diff --git a/plone/app/contentrules/handlers.py b/plone/app/contentrules/handlers.py
index 78edd22..d2c2fea 100644
--- a/plone/app/contentrules/handlers.py
+++ b/plone/app/contentrules/handlers.py
@@ -1,22 +1,24 @@
 # -*- coding: utf-8 -*-
-import threading
-
-from zope.component import queryUtility
-from zope.container.interfaces import IObjectAddedEvent, IObjectRemovedEvent, \
-    IContainerModifiedEvent
-from zope.lifecycleevent.interfaces import IObjectCopiedEvent
-from zope.interface import Interface
-from zope.component.hooks import getSite
-
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from plone.app.discussion.interfaces import IComment
 from plone.contentrules.engine.interfaces import IRuleExecutor
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.engine.interfaces import StopRule
-
-from Acquisition import aq_inner, aq_parent
 from plone.uuid.interfaces import IUUID
-from Products.CMFCore.interfaces import ISiteRoot, IContentish
+from Products.CMFCore.interfaces import IContentish
+from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
+from zope.component import queryUtility
+from zope.component.hooks import getSite
+from zope.container.interfaces import IContainerModifiedEvent
+from zope.container.interfaces import IObjectAddedEvent
+from zope.container.interfaces import IObjectRemovedEvent
+from zope.interface import Interface
+from zope.lifecycleevent.interfaces import IObjectCopiedEvent
+
+import threading
+
 
 try:
     from Products.Archetypes.interfaces import IBaseObject
diff --git a/plone/app/contentrules/namechooser.py b/plone/app/contentrules/namechooser.py
index fc2a47d..c415d3b 100644
--- a/plone/app/contentrules/namechooser.py
+++ b/plone/app/contentrules/namechooser.py
@@ -3,6 +3,7 @@
 from zope.container.interfaces import INameChooser
 from zope.interface import implementer
 
+
 ATTEMPTS = 100
 
 
diff --git a/plone/app/contentrules/rule.py b/plone/app/contentrules/rule.py
index 57ca78b..2df5724 100644
--- a/plone/app/contentrules/rule.py
+++ b/plone/app/contentrules/rule.py
@@ -1,17 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility, getUtility
-from zope.annotation.interfaces import IAnnotations
-
 from Acquisition import aq_base
-
-from plone.contentrules.engine.interfaces import IRuleStorage
+from BTrees.OOBTree import OOSet
+from OFS.SimpleItem import SimpleItem
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
-
+from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.rule.rule import Rule as BaseRule
-
-from OFS.SimpleItem import SimpleItem
-from BTrees.OOBTree import OOSet
 from Products.CMFCore.interfaces import ISiteRoot
+from zope.annotation.interfaces import IAnnotations
+from zope.component import getUtility
+from zope.component import queryUtility
+
 
 ANNOTATION_KEY = "plone.app.contentrules.ruleassignments"
 
diff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py
index b7fc7a8..96eb3b9 100644
--- a/plone/app/contentrules/tests/dummy.py
+++ b/plone/app/contentrules/tests/dummy.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-from zope.interface import implementer
 from plone.contentrules.rule.interfaces import IRuleElementData
-from zope.component.interfaces import IObjectEvent
 from plone.uuid.interfaces import IAttributeUUID
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IRuleElementData)
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index b2b3a41..c213b4a 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -1,20 +1,16 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.copy import CopyAction
 from plone.app.contentrules.actions.copy import CopyEditFormView
-
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
 from plone.app.testing import TEST_USER_ID
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py
index 8ea54cb..aac4796 100644
--- a/plone/app/contentrules/tests/test_action_delete.py
+++ b/plone/app/contentrules/tests/test_action_delete.py
@@ -1,18 +1,14 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.delete import DeleteAction
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 8afb75d..4495915 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -1,20 +1,18 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer, Interface
-from zope.component import getUtility, getMultiAdapter
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.logger import LoggerAction
 from plone.app.contentrules.actions.logger import LoggerEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 @implementer(Interface)
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index d652129..1ca5c25 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -1,21 +1,24 @@
 # -*- coding: utf-8 -*-
+from Acquisition import aq_base
 from email import message_from_string
-from zope.component import getUtility, getMultiAdapter, getSiteManager
-from zope.component.interfaces import IObjectEvent
-from zope.interface import implementer
-
+from plone.app.contentrules.actions.mail import MailAction
+from plone.app.contentrules.actions.mail import MailAddFormView
+from plone.app.contentrules.actions.mail import MailEditFormView
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.contentrules.actions.mail import MailAction, MailEditFormView, MailAddFormView
 from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction, IExecutable
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
 from plone.registry.interfaces import IRegistry
-
-from Acquisition import aq_base
 from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
 from Products.MailHost.MailHost import MailHost
+from zope.component import getMultiAdapter
+from zope.component import getSiteManager
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 import unittest
 
diff --git a/plone/app/contentrules/tests/test_action_modify.py b/plone/app/contentrules/tests/test_action_modify.py
index 1e6b8e6..0deb751 100644
--- a/plone/app/contentrules/tests/test_action_modify.py
+++ b/plone/app/contentrules/tests/test_action_modify.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
-from unittest import TestCase
-from zope.lifecycleevent import ObjectAddedEvent, ObjectRemovedEvent
-
 from plone.app.contentrules import handlers
+from unittest import TestCase
+from zope.lifecycleevent import ObjectAddedEvent
+from zope.lifecycleevent import ObjectRemovedEvent
 
 
 class TestModifyAction(TestCase):
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index b7570a8..b240d6d 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -1,21 +1,16 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.move import MoveAction
 from plone.app.contentrules.actions.move import MoveEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
-from zope.component.interfaces import IObjectEvent
-
 from plone.app.testing import TEST_USER_ID as default_user
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py
index cc0251e..47706ad 100644
--- a/plone/app/contentrules/tests/test_action_notify.py
+++ b/plone/app/contentrules/tests/test_action_notify.py
@@ -1,20 +1,17 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer, Interface
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.notify import NotifyAction
 from plone.app.contentrules.actions.notify import NotifyEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
 from Products.statusmessages import STATUSMESSAGEKEY
 from Products.statusmessages.adapter import _decodeCookieValue
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 @implementer(Interface)
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index 5d65152..aa1b0b5 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.workflow import WorkflowAction
 from plone.app.contentrules.actions.workflow import WorkflowEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_browser.py b/plone/app/contentrules/tests/test_browser.py
index a507d4c..031592a 100644
--- a/plone/app/contentrules/tests/test_browser.py
+++ b/plone/app/contentrules/tests/test_browser.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
-import unittest
-import doctest
-
 from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 from plone.testing import layered
 
+import doctest
+import unittest
+
+
 optionflags = (doctest.NORMALIZE_WHITESPACE |
                doctest.ELLIPSIS |
                doctest.REPORT_NDIFF)
diff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py
index e48da57..a19da87 100644
--- a/plone/app/contentrules/tests/test_cascading_rule.py
+++ b/plone/app/contentrules/tests/test_cascading_rule.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from zope.component import getUtility
-
+from plone.app.contentrules.api import edit_rule_assignment
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 from plone.app.contentrules.tests.test_configuration import TestContentrulesGSLayer
-from plone.app.contentrules.api import edit_rule_assignment
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getUtility
 
 
 class TestCascadingRule(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index 2a174cf..1920a6d 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.group import GroupCondition
 from plone.app.contentrules.conditions.group import GroupEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index e41b61d..34cdd40 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.portaltype import PortalTypeCondition
 from plone.app.contentrules.conditions.portaltype import PortalTypeEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index 4889fe9..3204811 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.role import RoleCondition
 from plone.app.contentrules.conditions.role import RoleEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index 2270115..eeefa47 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.talesexpression import TalesExpressionCondition
 from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index d9ddf82..cf8d3e7 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.wfstate import WorkflowStateCondition
 from plone.app.contentrules.conditions.wfstate import WorkflowStateEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
diff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py
index 9e07249..48e5b13 100644
--- a/plone/app/contentrules/tests/test_condition_wftransition.py
+++ b/plone/app/contentrules/tests/test_condition_wftransition.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.wftransition import WorkflowTransitionCondition
 from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
 from Products.CMFCore.interfaces import IActionSucceededEvent
 from Products.CMFCore.WorkflowCore import ActionSucceededEvent
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 
 
 class TestWorkflowTransitionCondition(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_configuration.py b/plone/app/contentrules/tests/test_configuration.py
index f146cff..af68102 100644
--- a/plone/app/contentrules/tests/test_configuration.py
+++ b/plone/app/contentrules/tests/test_configuration.py
@@ -1,19 +1,17 @@
 # -*- coding: utf-8 -*-
 
-import time
-
+from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.app.testing import FunctionalTesting
+from plone.app.testing.bbb import PloneTestCaseFixture
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
 from plone.contentrules.engine.interfaces import IRuleStorage
-from zope.component import getUtility
+from Products.GenericSetup.context import TarballExportContext
+from Products.GenericSetup.interfaces import IBody
 from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.lifecycleevent.interfaces import IObjectModifiedEvent
 
-from Products.GenericSetup.interfaces import IBody
-from Products.GenericSetup.context import TarballExportContext
-
-from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.testing.bbb import PloneTestCaseFixture
-from plone.app.testing import FunctionalTesting
+import time
 
 
 class TestContentrulesGSFixture(PloneTestCaseFixture):
diff --git a/plone/app/contentrules/tests/test_handlers.py b/plone/app/contentrules/tests/test_handlers.py
index fd8f0cf..23ea5a4 100644
--- a/plone/app/contentrules/tests/test_handlers.py
+++ b/plone/app/contentrules/tests/test_handlers.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from zope.event import notify
-from zope.lifecycleevent import ObjectCreatedEvent
-
+from plone.app.contentrules import handlers
 from plone.app.contentrules.tests import base
 from plone.app.contentrules.tests import dummy
-from plone.app.contentrules import handlers
+from zope.event import notify
+from zope.lifecycleevent import ObjectCreatedEvent
 
 
 class TestDuplicateRuleFilter(base.ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_rule_assignment_mapping.py b/plone/app/contentrules/tests/test_rule_assignment_mapping.py
index d311802..c052ad6 100644
--- a/plone/app/contentrules/tests/test_rule_assignment_mapping.py
+++ b/plone/app/contentrules/tests/test_rule_assignment_mapping.py
@@ -1,17 +1,15 @@
 # -*- coding: utf-8 -*-
-import transaction
-from zope.component import getUtility
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.interfaces import IRuleAssignmentManager
-
-from plone.contentrules.engine.assignments import RuleAssignment
-
+from plone.app.contentrules import api
+from plone.app.contentrules.rule import get_assignments
+from plone.app.contentrules.rule import insert_assignment
 from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.rule import get_assignments, insert_assignment
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.contentrules import api
+from plone.contentrules.engine.assignments import RuleAssignment
+from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getUtility
+
+import transaction
 
 
 class TestRuleAssignmentMapping(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index 2bef034..95030ec 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -1,15 +1,13 @@
 # -*- coding: utf-8 -*-
-from zope.component import getMultiAdapter, getUtility
-from zope.lifecycleevent.interfaces import IObjectModifiedEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-
-from plone.app.contentrules.rule import Rule
+from dummy import DummyAction
+from dummy import DummyCondition
 from plone.app.contentrules.browser.rule import RuleEditFormView
-
+from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
-from dummy import DummyCondition, DummyAction
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.lifecycleevent.interfaces import IObjectModifiedEvent
 
 
 class DummyModifiedRule(Rule):
diff --git a/plone/app/contentrules/tests/test_setup.py b/plone/app/contentrules/tests/test_setup.py
index 74f9082..241f8cb 100644
--- a/plone/app/contentrules/tests/test_setup.py
+++ b/plone/app/contentrules/tests/test_setup.py
@@ -1,12 +1,10 @@
 # -*- coding: utf-8 -*-
-from zope.lifecycleevent.interfaces import IObjectModifiedEvent
-from zope.lifecycleevent.interfaces import IObjectAddedEvent
-from zope.lifecycleevent.interfaces import IObjectRemovedEvent
-
+from plone.app.contentrules.tests.base import ContentRulesTestCase
 from plone.contentrules.engine.interfaces import IRuleAssignable
 from plone.contentrules.rule.interfaces import IRuleEventType
-
-from plone.app.contentrules.tests.base import ContentRulesTestCase
+from zope.lifecycleevent.interfaces import IObjectAddedEvent
+from zope.lifecycleevent.interfaces import IObjectModifiedEvent
+from zope.lifecycleevent.interfaces import IObjectRemovedEvent
 
 
 class TestProductInstall(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_traversal.py b/plone/app/contentrules/tests/test_traversal.py
index 35e9e05..249e067 100644
--- a/plone/app/contentrules/tests/test_traversal.py
+++ b/plone/app/contentrules/tests/test_traversal.py
@@ -1,14 +1,12 @@
 # -*- coding: utf-8 -*-
-from zope.component import getUtility
-
-from Acquisition import aq_base, aq_parent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-
+from Acquisition import aq_base
+from Acquisition import aq_parent
+from dummy import DummyAction
+from dummy import DummyCondition
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
-from dummy import DummyCondition, DummyAction
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getUtility
 
 
 class TestTraversal(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/utils.py b/plone/app/contentrules/tests/utils.py
index 2fc56bf..2917409 100644
--- a/plone/app/contentrules/tests/utils.py
+++ b/plone/app/contentrules/tests/utils.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 import doctest
 
+
 # Standard options for DocTests
 optionflags = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE |


Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2017-04-15T12:32:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/1e877896f82616f265b8776aef60dd811a899f5e

autopep8 -ir *

Files changed:
M CHANGES.rst
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/handlers.py
M plone/app/contentrules/tests/base.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_configuration.py
M plone/app/contentrules/tests/test_rule_management_views.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 75f2e97..23f71d4 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,7 +17,7 @@ Bug fixes:
 - Ensure error message is an unicode object
   [mtrebron]
 
-- Cleanup: isort.
+- Cleanup: isort, autopep8.
   [jensens]
 
 
diff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py
index 6b7384b..dbfedb5 100644
--- a/plone/app/contentrules/actions/__init__.py
+++ b/plone/app/contentrules/actions/__init__.py
@@ -14,6 +14,7 @@ class ContentWrapper(object):
     The sole purpose of this is to transform target_folder
     values from UUID to path, which all of content rules expects
     """
+
     def __init__(self, content):
         self.content = content
 
@@ -56,5 +57,6 @@ def create(self, data):
 
 
 class ActionEditForm(EditForm):
+
     def getContent(self):
         return ContentWrapper(super(ActionEditForm, self).getContent())
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index 96d28dc..295da67 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -30,7 +30,8 @@ class ICopyAction(Interface):
     """
 
     target_folder = schema.Choice(title=_(u"Target folder"),
-                                  description=_(u"As a path relative to the portal root."),
+                                  description=_(
+                                      u"As a path relative to the portal root."),
                                   required=True,
                                   source=CatalogSource(is_folderish=True))
 
@@ -73,7 +74,8 @@ def __call__(self):
         target = portal_url.getPortalObject().unrestrictedTraverse(str(path), None)
 
         if target is None:
-            self.error(obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
+            self.error(
+                obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
             return False
 
         try:
@@ -117,7 +119,8 @@ def generate_id(self, target, old_id):
         taken = getattr(aq_base(target), 'has_key', None)
         if taken is None:
             item_ids = set(target.objectIds())
-            taken = lambda x: x in item_ids
+
+            def taken(x): return x in item_ids
         if not taken(old_id):
             return old_id
         idx = 1
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index 9d8b7c9..1b71bbb 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -18,7 +18,8 @@
 
 logger = logging.getLogger("plone.contentrules.logger")
 handler = logging.StreamHandler()
-formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -  %(message)s")
+formatter = logging.Formatter(
+    "%(asctime)s - %(name)s - %(levelname)s -  %(message)s")
 handler.setFormatter(formatter)
 logger.addHandler(handler)
 
@@ -81,7 +82,8 @@ def processedMessage(self):
                 self.event.__class__.__module__, self.event.__class__.__name__))
 
         if "&c" in processedMessage and IObjectEvent.providedBy(self.event):
-            processedMessage = processedMessage.replace("&c", repr(self.event.object))
+            processedMessage = processedMessage.replace(
+                "&c", repr(self.event.object))
 
         if "&u" in processedMessage:
             mtool = getToolByName(self.context, 'portal_membership')
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index c7715ab..b3f2f5f 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -93,7 +93,8 @@ def __init__(self, context, element, event):
     def __call__(self):
         mailhost = getToolByName(aq_inner(self.context), "MailHost")
         if not mailhost:
-            raise ComponentLookupError("You must have a Mailhost utility to execute this action")
+            raise ComponentLookupError(
+                "You must have a Mailhost utility to execute this action")
 
         email_charset = self.mail_settings.email_charset
 
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index b1082c6..61638a0 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -32,7 +32,8 @@ class IMoveAction(Interface):
     """
 
     target_folder = schema.Choice(title=_(u"Target folder"),
-                                  description=_(u"As a path relative to the portal root."),
+                                  description=_(
+                                      u"As a path relative to the portal root."),
                                   required=True,
                                   source=CatalogSource(is_folderish=True))
 
@@ -75,7 +76,8 @@ def __call__(self):
         target = portal_url.getPortalObject().unrestrictedTraverse(str(path), None)
 
         if target is None:
-            self.error(obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
+            self.error(
+                obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
             return False
 
         if target.absolute_url() == parent.absolute_url():
@@ -141,7 +143,8 @@ def generate_id(self, target, old_id):
         taken = getattr(aq_base(target), 'has_key', None)
         if taken is None:
             item_ids = set(target.objectIds())
-            taken = lambda x: x in item_ids
+
+            def taken(x): return x in item_ids
         if not taken(old_id):
             return old_id
         idx = 1
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index 4604c43..b04fc6f 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -20,11 +20,13 @@ class INotifyAction(Interface):
     """
 
     message = schema.TextLine(title=_(u"Message"),
-                              description=_(u"The message to send to the user."),
+                              description=_(
+                                  u"The message to send to the user."),
                               required=True)
 
     message_type = schema.Choice(title=_(u"Message type"),
-                                 description=_(u"Select the type of message to display."),
+                                 description=_(
+                                     u"Select the type of message to display."),
                                  values=("info", "warning", "error"),
                                  required=True,
                                  default="info")
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index de85572..c23dc3f 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -23,7 +23,8 @@ class IWorkflowAction(Interface):
     """
 
     transition = schema.Choice(title=_(u"Transition"),
-                               description=_(u"Select the workflow transition to attempt"),
+                               description=_(
+                                   u"Select the workflow transition to attempt"),
                                required=True,
                                vocabulary='plone.app.vocabularies.WorkflowTransitions')
 
@@ -85,7 +86,8 @@ class WorkflowAddForm(ActionAddForm):
     """
     schema = IWorkflowAction
     label = _(u"Add Workflow Action")
-    description = _(u"A workflow action triggers a workflow transition on an object.")
+    description = _(
+        u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
     Type = WorkflowAction
 
@@ -99,7 +101,8 @@ class WorkflowEditForm(ActionEditForm):
     """
     schema = IWorkflowAction
     label = _(u"Edit Workflow Action")
-    description = _(u"A workflow action triggers a workflow transition on an object.")
+    description = _(
+        u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py
index e6f90c9..fe377e4 100644
--- a/plone/app/contentrules/browser/adding.py
+++ b/plone/app/contentrules/browser/adding.py
@@ -79,7 +79,8 @@ def __init__(self, context, request):
         self.request = request
 
     def nextURL(self):
-        url = str(getMultiAdapter((aq_parent(self.context), self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (aq_parent(self.context), self.request), name=u"absolute_url"))
         return url + "/@@manage-content-rules"
 
     def renderAddButton(self):
diff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py
index 7eeb945..cd7bf2e 100644
--- a/plone/app/contentrules/browser/assignments.py
+++ b/plone/app/contentrules/browser/assignments.py
@@ -69,7 +69,8 @@ def __call__(self):
         elif 'form.button.Bubble' in form:
             rule_ids = form.get('rule_ids', ())
             for r in rule_ids:
-                api.edit_rule_assignment(context, r, bubbles=True, enabled=True)
+                api.edit_rule_assignment(
+                    context, r, bubbles=True, enabled=True)
 
             status.addStatusMessage(_(u"Changes saved."), type='info')
         elif 'form.button.NoBubble' in form:
@@ -144,7 +145,8 @@ def assigned_rules(self):
                 assignments.append(dict(id=key,
                                         title=rule.title,
                                         description=rule.description,
-                                        trigger=events.get(rule.event, "Unknown"),
+                                        trigger=events.get(
+                                            rule.event, "Unknown"),
                                         url=self._rule_url(key),
                                         bubbles=assignment.bubbles,
                                         enabled=assignment.enabled,
@@ -166,7 +168,8 @@ def assignable_rules(self):
 
     @memoize
     def _events(self):
-        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")
+        eventsFactory = getUtility(
+            IVocabularyFactory, name="plone.contentrules.events")
         return dict([(e.value, e.token) for e in eventsFactory(self.context)])
 
     def _rule_url(self, key):
@@ -174,5 +177,6 @@ def _rule_url(self, key):
 
     @memoize
     def _portal_url(self):
-        portal_state = getMultiAdapter((self.context, self.request), name="plone_portal_state")
+        portal_state = getMultiAdapter(
+            (self.context, self.request), name="plone_portal_state")
         return portal_state.portal_url()
diff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py
index c32c377..7965961 100644
--- a/plone/app/contentrules/browser/controlpanel.py
+++ b/plone/app/contentrules/browser/controlpanel.py
@@ -87,7 +87,8 @@ def ruleTypesToShow(self):
             else:
                 continue
 
-            eventname = translate(event.token, context=self.request, domain='plone')
+            eventname = translate(
+                event.token, context=self.request, domain='plone')
             selector.append({'id': get_trigger_class(event.value),
                              'title': eventname})
 
@@ -103,7 +104,8 @@ def _getRules(self):
 
     @memoize
     def _events(self):
-        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")
+        eventsFactory = getUtility(
+            IVocabularyFactory, name="plone.contentrules.events")
         return eventsFactory(self.context)
 
     def delete_rule(self):
diff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py
index 857f25d..9f3b49b 100644
--- a/plone/app/contentrules/browser/formhelper.py
+++ b/plone/app/contentrules/browser/formhelper.py
@@ -46,7 +46,8 @@ def updateActions(self):
     def nextURL(self):
         rule = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(rule))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
 
@@ -94,7 +95,8 @@ def __call__(self):
     def nextURL(self):
         rule = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(rule))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         return '%s/++rule++%s/@@manage-elements' % (url, rule.__name__)
 
     def create(self):
@@ -134,7 +136,8 @@ def nextURL(self):
         element = aq_inner(self.context)
         rule = aq_parent(element)
         context = aq_parent(rule)
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
 
diff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py
index fa47978..d8245d1 100644
--- a/plone/app/contentrules/browser/rule.py
+++ b/plone/app/contentrules/browser/rule.py
@@ -23,7 +23,8 @@ class RuleAddForm(AddForm):
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         if base_hasattr(self.context, '_chosen_name'):
             return '%s/++rule++%s/@@manage-elements' % (url, self.context._chosen_name)
         else:
@@ -48,7 +49,8 @@ class RuleEditForm(EditForm):
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         return url + '/@@rules-controlpanel'
 
 
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index 47af304..ff24e19 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -19,7 +19,6 @@
     IFileContent = None
 
 
-
 class IFileExtensionCondition(Interface):
     """Interface for the configurable aspects of a portal type condition.
 
@@ -27,7 +26,8 @@ class IFileExtensionCondition(Interface):
     """
 
     file_extension = schema.TextLine(title=_(u"File extension"),
-                                     description=_(u"The file extension to check for"),
+                                     description=_(
+                                         u"The file extension to check for"),
                                      required=True)
 
 
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index 789efc5..a81a7c8 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -55,12 +55,14 @@ def __init__(self, context, element, event):
         self.event = event
 
     def __call__(self):
-        portal_membership = getToolByName(self.context, 'portal_membership', None)
+        portal_membership = getToolByName(
+            self.context, 'portal_membership', None)
         portal_groups = getToolByName(self.context, 'portal_groups', None)
         if portal_groups is None or portal_groups is None:
             return False
         member = portal_membership.getAuthenticatedMember()
-        groupIds = [g.getId() for g in portal_groups.getGroupsByUserId(member.getId())]
+        groupIds = [g.getId()
+                    for g in portal_groups.getGroupsByUserId(member.getId())]
         for g in self.element.group_names:
             if g in groupIds:
                 return True
@@ -81,6 +83,7 @@ def create(self, data):
         form.applyChanges(self, c, data)
         return c
 
+
 class GroupAddFormView(ContentRuleFormWrapper):
     form = GroupAddForm
 
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index b0e8503..25be66a 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -87,7 +87,8 @@ class PortalTypeAddForm(AddForm):
     """
     schema = IPortalTypeCondition
     label = _(u"Add Content Type Condition")
-    description = _(u"A portal type condition makes the rule apply only to certain content types.")
+    description = _(
+        u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -105,7 +106,8 @@ class PortalTypeEditForm(EditForm):
     """
     schema = IPortalTypeCondition
     label = _(u"Edit Content Type Condition")
-    description = _(u"A portal type condition makes the rule apply only to certain content types.")
+    description = _(
+        u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index e3fef2e..3b631a9 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -56,11 +56,13 @@ def __init__(self, context, element, event):
         self.event = event
 
     def __call__(self):
-        portal_membership = getToolByName(self.context, 'portal_membership', None)
+        portal_membership = getToolByName(
+            self.context, 'portal_membership', None)
         if portal_membership is None:
             return False
         member = portal_membership.getAuthenticatedMember()
-        roles_in_context = member.getRolesInContext(aq_inner(self.event.object))
+        roles_in_context = member.getRolesInContext(
+            aq_inner(self.event.object))
         for r in self.element.role_names:
             if r in roles_in_context:
                 return True
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index 0595b19..b4ff78c 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -55,7 +55,8 @@ def __call__(self):
         portal_workflow = getToolByName(self.context, 'portal_workflow', None)
         if portal_workflow is None:
             return False
-        state = portal_workflow.getInfoFor(self.event.object, 'review_state', None)
+        state = portal_workflow.getInfoFor(
+            self.event.object, 'review_state', None)
         if state is None:
             return False
         return state in self.element.wf_states
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index 4f0427f..944e276 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -218,7 +218,8 @@ def _initRules(self, node):
 
                     storage[name] = rule
                 else:
-                    # Clear out conditions and actions since we're expecting new ones
+                    # Clear out conditions and actions since we're expecting
+                    # new ones
                     del rule.conditions[:]
                     del rule.actions[:]
 
@@ -244,7 +245,8 @@ def _initRules(self, node):
                                 continue
 
                             type_ = condition_node.getAttribute('type')
-                            element_type = getUtility(IRuleCondition, name=type_)
+                            element_type = getUtility(
+                                IRuleCondition, name=type_)
                             if element_type.factory is None:
                                 continue
 
@@ -253,7 +255,8 @@ def _initRules(self, node):
                             # Aq-wrap in case of complex setters
                             condition = condition.__of__(rule)
 
-                            handler = IRuleElementExportImportHandler(condition)
+                            handler = IRuleElementExportImportHandler(
+                                condition)
                             handler.import_element(condition_node)
 
                             rule.conditions.append(aq_base(condition))
@@ -292,7 +295,8 @@ def _initRules(self, node):
                 api.assign_rule(container, name,
                                 enabled=as_bool(child.getAttribute('enabled')),
                                 bubbles=as_bool(child.getAttribute('bubbles')),
-                                insert_before=child.getAttribute('insert-before'),
+                                insert_before=child.getAttribute(
+                                    'insert-before'),
                                 )
 
     def _extractRules(self):
@@ -372,8 +376,10 @@ def _extractRules(self):
                 assignment_node = self._doc.createElement('assignment')
                 assignment_node.setAttribute('location', location)
                 assignment_node.setAttribute('name', name)
-                assignment_node.setAttribute('enabled', str(assignment.enabled))
-                assignment_node.setAttribute('bubbles', str(assignment.bubbles))
+                assignment_node.setAttribute(
+                    'enabled', str(assignment.enabled))
+                assignment_node.setAttribute(
+                    'bubbles', str(assignment.bubbles))
                 fragment.appendChild(assignment_node)
 
         return fragment
diff --git a/plone/app/contentrules/handlers.py b/plone/app/contentrules/handlers.py
index d2c2fea..2254da2 100644
--- a/plone/app/contentrules/handlers.py
+++ b/plone/app/contentrules/handlers.py
@@ -28,7 +28,6 @@
     class IBaseObject(Interface):
         pass
 
-
     class IObjectInitializedEvent(Interface):
         pass
     HAS_ARCHETYPES = False
@@ -72,6 +71,7 @@ def __call__(self, context, rule, event):
             self.executed.add((uid, rule.__name__, ))
             return True
 
+
 # A thread local for keeping track of rule execution across events
 _status = threading.local()
 
@@ -145,6 +145,7 @@ def execute(context, event):
 
 # Event handlers
 
+
 def is_portal_factory(context):
     """Find out if the given object is in portal_factory
     """
@@ -179,7 +180,8 @@ def added(event):
     # IObjectInitializedEvent
     if IBaseObject.providedBy(obj):
         init()
-        _status.delayed_events['IObjectInitializedEvent-%s' % _get_uid(obj)] = event
+        _status.delayed_events[
+            'IObjectInitializedEvent-%s' % _get_uid(obj)] = event
     elif IContentish.providedBy(obj) or IComment.providedBy(obj):
         execute(event.newParent, event)
     else:
@@ -200,9 +202,10 @@ def archetypes_initialized(event):
 
         init()
         delayed_event = _status.delayed_events.get(
-                               'IObjectInitializedEvent-%s' % _get_uid(obj), None)
+            'IObjectInitializedEvent-%s' % _get_uid(obj), None)
         if delayed_event is not None:
-            _status.delayed_events['IObjectInitializedEvent-%s' % _get_uid(obj)] = None
+            _status.delayed_events[
+                'IObjectInitializedEvent-%s' % _get_uid(obj)] = None
             execute(delayed_event.newParent, delayed_event)
 
 
@@ -230,7 +233,7 @@ def modified(event):
 
     # Let the special handler take care of IObjectInitializedEvent
     for event_if in (IObjectInitializedEvent, IObjectAddedEvent,
-        IObjectRemovedEvent, IContainerModifiedEvent, IObjectCopiedEvent):
+                     IObjectRemovedEvent, IContainerModifiedEvent, IObjectCopiedEvent):
         if event_if.providedBy(event):
             return
 
diff --git a/plone/app/contentrules/tests/base.py b/plone/app/contentrules/tests/base.py
index 723b7ca..771890b 100644
--- a/plone/app/contentrules/tests/base.py
+++ b/plone/app/contentrules/tests/base.py
@@ -15,7 +15,8 @@ class ContentRulesTestCase(PloneTestCase):
     def addAuthToRequest(self):
         portal = self.layer['portal']
         request = self.layer['request']
-        authenticator = getMultiAdapter((portal, request), name=u"authenticator")
+        authenticator = getMultiAdapter(
+            (portal, request), name=u"authenticator")
         auth = authenticator.authenticator().split('value="')[1].rstrip('"/>')
         request.form['_authenticator'] = auth
 
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index c213b4a..c19dde5 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -42,10 +42,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        action = addview.form_instance.create(data={'target_folder': '/target', })
+        action = addview.form_instance.create(
+            data={'target_folder': '/target', })
         addview.form_instance.add(action)
 
         e = rule.actions[0]
@@ -55,14 +57,16 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Copy')
         e = CopyAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, CopyEditFormView))
 
     def testExecute(self):
         e = CopyAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -72,7 +76,8 @@ def testExecuteWithError(self):
         e = CopyAction()
         e.target_folder = '/dummy'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -84,7 +89,8 @@ def testExecuteWithoutPermissionsOnTarget(self):
         e = CopyAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -98,7 +104,8 @@ def testExecuteWithNamingConflict(self):
         e = CopyAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -116,7 +123,8 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):
         e = CopyAction()
         e.target_folder = '/Members/%s/target' % TEST_USER_ID
 
-        ex = getMultiAdapter((self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
diff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py
index aac4796..f778644 100644
--- a/plone/app/contentrules/tests/test_action_delete.py
+++ b/plone/app/contentrules/tests/test_action_delete.py
@@ -37,8 +37,10 @@ def testInvokeAddView(self):
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule.__of__(self.portal), self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding.__of__(rule), self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule.__of__(self.portal), self.portal.REQUEST), name='+action')
+        addview = getMultiAdapter(
+            (adding.__of__(rule), self.portal.REQUEST), name=element.addview)
         addview()
 
         e = rule.actions[0]
@@ -47,7 +49,8 @@ def testInvokeAddView(self):
     def testExecute(self):
         e = DeleteAction()
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 4495915..a2ae186 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -46,10 +46,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
+        content = addview.form_instance.create(
+            data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
         addview.form_instance.add(content)
 
         e = rule.actions[0]
@@ -61,7 +63,8 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Logger')
         e = LoggerAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, LoggerEditFormView))
 
     def testProcessedMessage(self):
@@ -69,7 +72,8 @@ def testProcessedMessage(self):
         e.targetLogger = 'testing'
         e.loggingLevel = 0
         e.message = "Test log event"
-        ex = getMultiAdapter((self.folder, e, DummyObjectEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyObjectEvent(self.folder)), IExecutable)
         self.assertEqual("Test log event", ex.processedMessage())
 
         e.message = "Test log event : &c"
@@ -82,7 +86,8 @@ def testProcessedMessage(self):
             ex.processedMessage())
 
         e.message = "Test log event : &u"
-        self.assertEqual("Test log event : %s" % TEST_USER_NAME, ex.processedMessage())
+        self.assertEqual("Test log event : %s" %
+                         TEST_USER_NAME, ex.processedMessage())
 
     def testExecute(self):
         e = LoggerAction()
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index 1ca5c25..3177f46 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -113,7 +113,8 @@ def testExecute(self):
         e = MailAction()
         e.source = "$user_email"
         e.recipients = "bar@foo.be, bar@foo.be, $reviewer_emails, $manager_emails, $member_emails"   # noqa
-        e.message = "P\xc3\xa4ge '${title}' created in ${url} !".decode('utf-8')
+        e.message = "P\xc3\xa4ge '${title}' created in ${url} !".decode(
+            'utf-8')
         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),
                              IExecutable)
         ex()
@@ -185,13 +186,15 @@ def testExecuteMultiRecipients(self):
                          mailSent.get('Content-Type'))
         self.assertEqual('bar@foo.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
-        self.assertEqual('Document created !', mailSent.get_payload(decode=True))
+        self.assertEqual('Document created !',
+                         mailSent.get_payload(decode=True))
         mailSent = message_from_string(dummyMailHost.messages[1])
         self.assertEqual('text/plain; charset="utf-8"',
                          mailSent.get('Content-Type'))
         self.assertEqual('foo@bar.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
-        self.assertEqual('Document created !', mailSent.get_payload(decode=True))
+        self.assertEqual('Document created !',
+                         mailSent.get_payload(decode=True))
         self._teardown_mockmail()
 
     def testExecuteExcludeActor(self):
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index b240d6d..29ace96 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -42,10 +42,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'target_folder': '/target', })
+        content = addview.form_instance.create(
+            data={'target_folder': '/target', })
         addview.form_instance.add(content)
 
         e = rule.actions[0]
@@ -55,14 +57,16 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Move')
         e = MoveAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, MoveEditFormView))
 
     def testExecute(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
@@ -77,7 +81,8 @@ def testExecuteWithError(self):
         e = MoveAction()
         e.target_folder = '/dummy'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -89,7 +94,8 @@ def testExecuteWithoutPermissionsOnTarget(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
@@ -103,7 +109,8 @@ def testExecuteWithNamingConflict(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
@@ -135,7 +142,8 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):
         e = MoveAction()
         e.target_folder = '/Members/%s/target' % default_user
 
-        ex = getMultiAdapter((self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index aa1b0b5..2317fc5 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -39,10 +39,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'transition': 'publish', })
+        content = addview.form_instance.create(
+            data={'transition': 'publish', })
         addview.form_instance.add(content)
 
         e = rule.actions[0]
@@ -52,27 +54,31 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Workflow')
         e = WorkflowAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, WorkflowEditFormView))
 
     def testExecute(self):
         e = WorkflowAction()
         e.transition = 'publish'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertEqual('published', self.portal.portal_workflow.getInfoFor(self.folder.d1,
-                         'review_state'))
+                                                                             'review_state'))
 
     def testExecuteWithError(self):
         e = WorkflowAction()
         e.transition = 'foobar'
 
-        old_state = self.portal.portal_workflow.getInfoFor(self.folder.d1, 'review_state')
+        old_state = self.portal.portal_workflow.getInfoFor(
+            self.folder.d1, 'review_state')
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
         self.assertEqual(old_state, self.portal.portal_workflow.getInfoFor(self.folder.d1,
-                         'review_state'))
+                                                                           'review_state'))
diff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py
index a19da87..e6fa8f6 100644
--- a/plone/app/contentrules/tests/test_cascading_rule.py
+++ b/plone/app/contentrules/tests/test_cascading_rule.py
@@ -21,7 +21,8 @@ def afterSetUp(self):
             self.portal.invokeFactory('Folder', 'events')
 
         portal_setup = self.portal.portal_setup
-        portal_setup.runAllImportStepsFromProfile('profile-plone.app.contentrules:testing')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.contentrules:testing')
         edit_rule_assignment(self.portal, 'test4', bubbles=1, enabled=1)
         edit_rule_assignment(self.portal, 'test5', bubbles=1, enabled=1)
 
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index 1920a6d..4d38142 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -37,11 +37,14 @@ def testInvokeAddView(self):
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'group_names': ['Manager']})
+        content = addview.form_instance.create(
+            data={'group_names': ['Manager']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -51,18 +54,22 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Group')
         e = GroupCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, GroupEditFormView))
 
     def testExecute(self):
         e = GroupCondition()
         e.group_names = ['Administrators', 'Reviewers']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertFalse(ex())
 
         group = self.portal.portal_groups.getGroupById('Administrators')
-        group.addMember(self.portal.portal_membership.getAuthenticatedMember().getId())
+        group.addMember(
+            self.portal.portal_membership.getAuthenticatedMember().getId())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertTrue(ex())
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index 34cdd40..03f34b4 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -25,23 +25,28 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.PortalType')
         self.assertEqual('plone.conditions.PortalType', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
         self.assertEqual(IObjectEvent, element.event)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.PortalType')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'check_types': ['Folder', 'Image']})
+        content = addview.form_instance.create(
+            data={'check_types': ['Folder', 'Image']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -49,21 +54,26 @@ def testInvokeAddView(self):
         self.assertEqual(['Folder', 'Image'], e.check_types)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.PortalType')
         e = PortalTypeCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, PortalTypeEditFormView))
 
     def testExecute(self):
         e = PortalTypeCondition()
         e.check_types = ['Folder', 'Image']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertTrue(ex())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertFalse(ex())
 
         self.folder.portal_types = None
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertFalse(ex())
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index 3204811..6ad3cdb 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -37,11 +37,14 @@ def testInvokeAddView(self):
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'role_names': ['Manager', 'Member']})
+        content = addview.form_instance.create(
+            data={'role_names': ['Manager', 'Member']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -51,17 +54,20 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Role')
         e = RoleCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, RoleEditFormView))
 
     def testExecute(self):
         e = RoleCondition()
         e.role_names = ['Manager', 'Member']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertTrue(ex())
 
         e.role_names = ['Reviewer']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertFalse(ex())
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index eeefa47..f864f33 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -25,19 +25,23 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.TalesExpression')
         self.assertEqual('plone.conditions.TalesExpression', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.TalesExpression')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
         content = addview.form_instance.create(
@@ -46,30 +50,37 @@ def testInvokeAddView(self):
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, TalesExpressionCondition))
-        self.assertEqual('python:"plone" in object.Subject()', e.tales_expression)
+        self.assertEqual('python:"plone" in object.Subject()',
+                         e.tales_expression)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.TalesExpression')
         e = TalesExpressionCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, TalesExpressionEditFormView))
 
     def testExecute(self):
         e = TalesExpressionCondition()
         e.tales_expression = 'python:"plone" in object.Subject()'
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertEqual(False, ex())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertEqual(False, ex())
 
         self.folder.setSubject(('plone', 'contentrules'))
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertEqual(True, ex())
 
     def testExecuteUnicodeString(self):
         e = TalesExpressionCondition()
         e.tales_expression = u'string:${portal_url}'
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertEqual(True, ex())
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index cf8d3e7..34ee2af 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -25,23 +25,28 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowState')
         self.assertEqual('plone.conditions.WorkflowState', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
         self.assertEqual(IObjectEvent, element.event)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowState')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'wf_states': ['visible', 'published']})
+        content = addview.form_instance.create(
+            data={'wf_states': ['visible', 'published']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -49,22 +54,27 @@ def testInvokeAddView(self):
         self.assertEqual(['visible', 'published'], e.wf_states)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowState')
         e = WorkflowStateCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, WorkflowStateEditFormView))
 
     def testExecute(self):
         e = WorkflowStateCondition()
         e.wf_states = ['visible', 'private']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertTrue(ex())
 
         self.portal.portal_workflow.doActionFor(self.folder, 'publish')
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertFalse(ex())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertFalse(ex())
diff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py
index 48e5b13..bca56c4 100644
--- a/plone/app/contentrules/tests/test_condition_wftransition.py
+++ b/plone/app/contentrules/tests/test_condition_wftransition.py
@@ -18,23 +18,29 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
-        self.assertEqual('plone.conditions.WorkflowTransition', element.addview)
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowTransition')
+        self.assertEqual(
+            'plone.conditions.WorkflowTransition', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
         self.assertEqual(IActionSucceededEvent, element.event)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowTransition')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'wf_transitions': ['publish', 'hide']})
+        content = addview.form_instance.create(
+            data={'wf_transitions': ['publish', 'hide']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -42,9 +48,11 @@ def testInvokeAddView(self):
         self.assertEqual(['publish', 'hide'], e.wf_transitions)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowTransition')
         e = WorkflowTransitionCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, WorkflowTransitionEditFormView))
 
     def testExecute(self):
diff --git a/plone/app/contentrules/tests/test_configuration.py b/plone/app/contentrules/tests/test_configuration.py
index af68102..a2afe4e 100644
--- a/plone/app/contentrules/tests/test_configuration.py
+++ b/plone/app/contentrules/tests/test_configuration.py
@@ -18,10 +18,11 @@ class TestContentrulesGSFixture(PloneTestCaseFixture):
 
     def setUpZope(self, app, configurationContext):
         super(TestContentrulesGSFixture,
-                  self).setUpZope(app, configurationContext)
+              self).setUpZope(app, configurationContext)
         import plone.app.contentrules.tests
         self.loadZCML('testing.zcml', package=plone.app.contentrules.tests)
 
+
 ContentrulesGSFixture = TestContentrulesGSFixture()
 TestContentrulesGSLayer = FunctionalTesting(bases=(ContentrulesGSFixture, ),
                                             name='TestContentRules:Functional')
@@ -38,7 +39,8 @@ def afterSetUp(self):
             self.portal.invokeFactory('Folder', 'news')
 
         portal_setup = self.portal.portal_setup
-        portal_setup.runAllImportStepsFromProfile('profile-plone.app.contentrules:testing')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.contentrules:testing')
 
     def testRuleInstalled(self):
         self.assertTrue('test1' in self.storage)
@@ -53,8 +55,10 @@ def testRulesConfigured(self):
         self.assertEqual(False, rule1.stop)
 
         self.assertEqual(2, len(rule1.conditions))
-        self.assertEqual("plone.conditions.PortalType", rule1.conditions[0].element)
-        self.assertEqual(["Document", "News Item"], list(rule1.conditions[0].check_types))
+        self.assertEqual("plone.conditions.PortalType",
+                         rule1.conditions[0].element)
+        self.assertEqual(["Document", "News Item"],
+                         list(rule1.conditions[0].check_types))
         self.assertEqual("plone.conditions.Role", rule1.conditions[1].element)
         self.assertEqual(["Manager"], list(rule1.conditions[1].role_names))
 
@@ -71,7 +75,8 @@ def testRulesConfigured(self):
         self.assertEqual(True, rule2.stop)
 
         self.assertEqual(1, len(rule2.conditions))
-        self.assertEqual("plone.conditions.PortalType", rule2.conditions[0].element)
+        self.assertEqual("plone.conditions.PortalType",
+                         rule2.conditions[0].element)
         self.assertEqual(["Event"], list(rule2.conditions[0].check_types))
 
         self.assertEqual(1, len(rule2.actions))
@@ -100,7 +105,8 @@ def testImportTwice(self):
         # if the profile is re-imported; see bug #8027.
         portal_setup = self.portal.portal_setup
         time.sleep(1)  # avoid timestamp colission
-        portal_setup.runAllImportStepsFromProfile('profile-plone.app.contentrules:testing')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.contentrules:testing')
 
         # We should get the same results as before
         self.testRuleInstalled()
@@ -110,7 +116,8 @@ def testImportTwice(self):
     def testExport(self):
         site = self.portal
         context = TarballExportContext(self.portal.portal_setup)
-        exporter = getMultiAdapter((site, context), IBody, name=u'plone.contentrules')
+        exporter = getMultiAdapter(
+            (site, context), IBody, name=u'plone.contentrules')
 
         expected = """<?xml version="1.0"?>
 <contentrules>
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index 95030ec..5977b67 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -24,7 +24,8 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRuleAdding(self):
-        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name='+rule')
+        adding = getMultiAdapter(
+            (self.portal, self.portal.REQUEST), name='+rule')
         storage = getUtility(IRuleStorage)
         self.assertEqual(0, len(storage))
         r = Rule()
@@ -33,8 +34,10 @@ def testRuleAdding(self):
         self.assertTrue(storage.values()[0] is r)
 
     def testRuleAddView(self):
-        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name='+rule')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name='plone.ContentRule')
+        adding = getMultiAdapter(
+            (self.portal, self.portal.REQUEST), name='+rule')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name='plone.ContentRule')
         storage = getUtility(IRuleStorage)
         self.assertEqual(0, len(storage))
         addview.form_instance.update()
@@ -74,7 +77,8 @@ def testRuleConditionAdding(self):
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
         d = DummyCondition()
         self.assertEqual(0, len(rule.conditions))
         adding.add(d)
@@ -144,13 +148,16 @@ def testChangeGloballyEnable(self):
         portal = self.portal
         self.addAuthToRequest()
 
-        portal.restrictedTraverse('@@contentrule-globally-enable').globally_enable()
+        portal.restrictedTraverse(
+            '@@contentrule-globally-enable').globally_enable()
         self.assertTrue(storage.active)
 
-        portal.restrictedTraverse('@@contentrule-globally-disable').globally_disable()
+        portal.restrictedTraverse(
+            '@@contentrule-globally-disable').globally_disable()
         self.assertFalse(storage.active)
 
-        portal.restrictedTraverse('@@contentrule-globally-enable').globally_enable()
+        portal.restrictedTraverse(
+            '@@contentrule-globally-enable').globally_enable()
         self.assertTrue(storage.active)
 
         # without ajax


Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2017-04-15T12:32:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentrules/commit/2041e6f3eb64ad60ef509f0bb0ba8ec218757886

code formatting

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/conditions/__init__.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/exportimport/__init__.py
M plone/app/contentrules/exportimport/rules.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 23f71d4..9c8d577 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,7 +17,7 @@ Bug fixes:
 - Ensure error message is an unicode object
   [mtrebron]
 
-- Cleanup: isort, autopep8.
+- Cleanup: isort, autopep8, manual formatting.
   [jensens]
 
 
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index 85880ef..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index b3f2f5f..7c74eb7 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -16,7 +16,7 @@
 from Products.statusmessages.interfaces import IStatusMessage
 from smtplib import SMTPException
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import getUtility
 from zope.component.interfaces import ComponentLookupError
 from zope.globalrequest import getRequest
@@ -24,7 +24,6 @@
 from zope.interface import Interface
 
 import logging
-import traceback
 
 
 logger = logging.getLogger("plone.contentrules")
@@ -33,27 +32,36 @@
 class IMailAction(Interface):
     """Definition of the configuration available for a mail action
     """
-    subject = schema.TextLine(title=_(u"Subject"),
-                              description=_(u"Subject of the message"),
-                              required=True)
-    source = schema.TextLine(title=_(u"Email source"),
-                             description=_("The email address that sends the "
-                                           "email. If no email is provided here, "
-                                           "it will use the portal from address."),
-                             required=False)
+    subject = schema.TextLine(
+        title=_(u'Subject'),
+        description=_(u'Subject of the message'),
+        required=True
+    )
+    source = schema.TextLine(
+        title=_(u'Email source'),
+        description=_(
+            'The email address that sends the email. If no email is provided '
+            'here, it will use the portal from address.'
+        ),
+        required=False
+    )
     recipients = schema.TextLine(
-        title=_(u"Email recipients"),
-        description=_("The email where you want to "
-                      "send this message. To send it to "
-                      "different email addresses, "
-                      "just separate them with ,"),
-        required=True)
-    exclude_actor = schema.Bool(title=_(u"Exclude actor from recipients"),
-                                description=_("Do not send the email to the user "
-                                              "that did the action."))
-    message = schema.Text(title=_(u"Message"),
-                          description=_(u"The message that you want to mail."),
-                          required=True)
+        title=_(u'Email recipients'),
+        description=_(
+            'The email where you want to send this message. To send it to '
+            'different email addresses, just separate them with ,'
+        ),
+        required=True
+    )
+    exclude_actor = schema.Bool(
+        title=_(u'Exclude actor from recipients'),
+        description=_('Do not send the email to the user that did the action.')
+    )
+    message = schema.Text(
+        title=_(u'Message'),
+        description=_(u'The message that you want to mail.'),
+        required=True
+    )
 
 
 @implementer(IMailAction, IRuleElementData)
@@ -77,10 +85,10 @@ def summary(self):
 
 
 @implementer(IExecutable)
+@adapter(Interface, IMailAction, Interface)
 class MailActionExecutor(object):
     """The executor for this action.
     """
-    adapts(Interface, IMailAction, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -91,18 +99,17 @@ def __init__(self, context, element, event):
                                                    prefix='plone')
 
     def __call__(self):
-        mailhost = getToolByName(aq_inner(self.context), "MailHost")
+        mailhost = getToolByName(aq_inner(self.context), 'MailHost')
         if not mailhost:
             raise ComponentLookupError(
-                "You must have a Mailhost utility to execute this action")
+                'You must have a Mailhost utility to execute this action'
+            )
 
         email_charset = self.mail_settings.email_charset
-
         obj = self.event.object
-
         interpolator = IStringInterpolator(obj)
-
         source = self.element.source
+
         if source:
             source = interpolator(source).strip()
 
@@ -115,10 +122,12 @@ def __call__(self):
                 request = getRequest()
                 if request:
                     messages = IStatusMessage(request)
-                    msg = _(u"Error sending email from content rule. You must "
-                            "provide a source address for mail "
-                            "actions or enter an email in the portal properties")
-                    messages.add(msg, type=u"error")
+                    msg = _(
+                        u'Error sending email from content rule. You must '
+                        u'provide a source address for mail '
+                        u'actions or enter an email in the portal properties'
+                    )
+                    messages.add(msg, type=u'error')
                 return False
 
             from_name = self.mail_settings.email_from_name.strip('"')
@@ -126,14 +135,19 @@ def __call__(self):
 
         recip_string = interpolator(self.element.recipients)
         if recip_string:  # check recipient is not None or empty string
-            recipients = set([str(mail.strip()) for mail in recip_string.split(',')
-                              if mail.strip()])
+            recipients = set([
+                str(mail.strip()) for mail in recip_string.split(',')
+                if mail.strip()
+            ])
         else:
             recipients = set()
 
         if self.element.exclude_actor:
             mtool = getToolByName(aq_inner(self.context), "portal_membership")
-            actor_email = mtool.getAuthenticatedMember().getProperty('email', '')
+            actor_email = mtool.getAuthenticatedMember().getProperty(
+                'email',
+                ''
+            )
             if actor_email in recipients:
                 recipients.remove(actor_email)
 
@@ -155,9 +169,9 @@ def __call__(self):
                               subject=subject, charset=email_charset,
                               immediate=not mailhost.smtp_queue)
             except (MailHostError, SMTPException):
-                logger.error(
-                    """mailing error: Attempt to send mail in content rule failed.\n%s""" %
-                    traceback.format_exc())
+                logger.exception(
+                    'mail error: Attempt to send mail in content rule failed'
+                )
 
         return True
 
diff --git a/plone/app/contentrules/conditions/__init__.py b/plone/app/contentrules/conditions/__init__.py
index ec51c5a..40a96af 100644
--- a/plone/app/contentrules/conditions/__init__.py
+++ b/plone/app/contentrules/conditions/__init__.py
@@ -1,2 +1 @@
 # -*- coding: utf-8 -*-
-#
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index ff24e19..2b424da 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -8,7 +8,7 @@
 from plone.contentrules.rule.interfaces import IRuleElementData
 from z3c.form import form
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -25,10 +25,11 @@ class IFileExtensionCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    file_extension = schema.TextLine(title=_(u"File extension"),
-                                     description=_(
-                                         u"The file extension to check for"),
-                                     required=True)
+    file_extension = schema.TextLine(
+        title=_(u"File extension"),
+        description=_(u"The file extension to check for"),
+        required=True
+    )
 
 
 @implementer(IFileExtensionCondition, IRuleElementData)
@@ -43,16 +44,19 @@ class FileExtensionCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"File extension is ${ext}", mapping=dict(ext=self.file_extension))
+        return _(
+            u"File extension is ${ext}",
+            mapping=dict(ext=self.file_extension)
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IFileExtensionCondition, Interface)
 class FileExtensionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IFileExtensionCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -81,8 +85,10 @@ class FileExtensionAddForm(AddForm):
     """
     schema = IFileExtensionCondition
     label = _(u"Add File Extension Condition")
-    description = _(u"A file extension condition can restrict a rule from "
-                    "executing unless the target is a File with a particular extension.")
+    description = _(
+        u"A file extension condition can restrict a rule from "
+        u"executing unless the target is a File with a particular extension."
+    )
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -102,8 +108,10 @@ class FileExtensionEditForm(EditForm):
     """
     schema = IFileExtensionCondition
     label = _(u"Edit File Extension Condition")
-    description = _(u"A file extension condition can restrict a rule from "
-                    "executing unless the target is a File with a particular extension.")
+    description = _(
+        u"A file extension condition can restrict a rule from "
+        u"executing unless the target is a File with a particular extension."
+    )
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index a81a7c8..1de9df2 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.utils import getToolByName
 from z3c.form import form
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -20,10 +20,12 @@ class IGroupCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    group_names = schema.Set(title=_(u"Group name"),
-                             description=_(u"The name of the group."),
-                             required=True,
-                             value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups"))
+    group_names = schema.Set(
+        title=_(u"Group name"),
+        description=_(u"The name of the group."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups")
+    )
 
 
 @implementer(IGroupCondition, IRuleElementData)
@@ -38,16 +40,19 @@ class GroupCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"Groups are: ${names}", mapping=dict(names=", ".join(self.group_names)))
+        return _(
+            u"Groups are: ${names}",
+            mapping=dict(names=", ".join(self.group_names))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IGroupCondition, Interface)
 class GroupConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IGroupCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -74,8 +79,10 @@ class GroupAddForm(AddForm):
     """
     schema = IGroupCondition
     label = _(u"Add Group Condition")
-    description = _(u"A group condition can prevent a rule from executing "
-                    u"unless the current user is a member of a particular group.")
+    description = _(
+        u"A group condition can prevent a rule from executing "
+        u"unless the current user is a member of a particular group."
+    )
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -93,8 +100,10 @@ class GroupEditForm(EditForm):
     """
     schema = IGroupCondition
     label = _(u"Edit Group Condition")
-    description = _(u"A group condition can prevent a rule from executing "
-                    u"unless the current user is a member of a particular group.")
+    description = _(
+        u"A group condition can prevent a rule from executing "
+        u"unless the current user is a member of a particular group."
+    )
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index 25be66a..f58914f 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -12,7 +12,7 @@
 from Products.CMFCore.utils import getToolByName
 from z3c.form import form
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.i18n import translate
 from zope.interface import implementer
 from zope.interface import Interface
@@ -29,7 +29,10 @@ class IPortalTypeCondition(Interface):
         title=_(u"Content type"),
         description=_(u"The content type to check for."),
         required=True,
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
+        value_type=schema.Choice(
+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"
+        )
+    )
 
 
 @implementer(IPortalTypeCondition, IRuleElementData)
@@ -52,16 +55,19 @@ def summary(self):
             if fti is not None:
                 title = translate(fti.Title(), context=portal.REQUEST)
                 titles.append(title)
-        return _(u"Content types are: ${names}", mapping=dict(names=", ".join(titles)))
+        return _(
+            u"Content types are: ${names}",
+            mapping=dict(names=", ".join(titles))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IPortalTypeCondition, Interface)
 class PortalTypeConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IPortalTypeCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index 3b631a9..0536262 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -10,7 +10,7 @@
 from Products.CMFCore.utils import getToolByName
 from z3c.form import form
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -21,10 +21,12 @@ class IRoleCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    role_names = schema.Set(title=_(u"Roles"),
-                            description=_(u"The roles to check for."),
-                            required=True,
-                            value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"))
+    role_names = schema.Set(
+        title=_(u"Roles"),
+        description=_(u"The roles to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles")
+    )
 
 
 @implementer(IRoleCondition, IRuleElementData)
@@ -39,16 +41,19 @@ class RoleCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))
+        return _(
+            u"Roles are: ${names}",
+            mapping=dict(names=", ".join(self.role_names))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IRoleCondition, Interface)
 class RoleConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IRoleCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -74,8 +79,10 @@ class RoleAddForm(AddForm):
     """
     schema = IRoleCondition
     label = _(u"Add Role Condition")
-    description = _(u"A role condition can prevent rules from executing unless "
-                    u"the current user has a particular role.")
+    description = _(
+        u"A role condition can prevent rules from executing unless "
+        u"the current user has a particular role."
+    )
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -93,8 +100,10 @@ class RoleEditForm(EditForm):
     """
     schema = IRoleCondition
     label = _(u"Add Role Condition")
-    description = _(u"A role condition can prevent rules from executing unless "
-                    u"the current user has a particular role.")
+    description = _(
+        u"A role condition can prevent rules from executing unless "
+        u"the current user has a particular role."
+    )
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index a832f0c..a07d862 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -11,7 +11,7 @@
 from Products.CMFCore.utils import getToolByName
 from z3c.form import form
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -30,7 +30,8 @@ class ITalesExpressionCondition(Interface):
 
 @implementer(ITalesExpressionCondition, IRuleElementData)
 class TalesExpressionCondition(SimpleItem):
-    """The actual persistent implementation of the TALES expression condition element.
+    """The actual persistent implementation of the TALES expression condition
+    element.
     """
 
     tales_expression = ''
@@ -43,12 +44,12 @@ def summary(self):
 
 
 @implementer(IExecutable)
+@adapter(Interface, ITalesExpressionCondition, Interface)
 class TalesExpressionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, ITalesExpressionCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index b4ff78c..da9943e 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.utils import getToolByName
 from z3c.form import form
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -21,30 +21,37 @@ class IWorkflowStateCondition(Interface):
     """
 
     wf_states = schema.Set(
-        title=_(u"Workflow state"),
-        description=_(u"The workflow states to check for."),
+        title=_(u'Workflow state'),
+        description=_(u'The workflow states to check for.'),
         required=True,
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
+        value_type=schema.Choice(
+            vocabulary='plone.app.vocabularies.WorkflowStates'
+        )
+    )
 
 
 @implementer(IWorkflowStateCondition, IRuleElementData)
 class WorkflowStateCondition(SimpleItem):
-    """The actual persistent implementation of the workflow state condition element.py.
+    """The actual persistent implementation of the workflow state condition
+    element.py.
     """
 
     wf_states = []
-    element = "plone.conditions.WorkflowState"
+    element = 'plone.conditions.WorkflowState'
 
     @property
     def summary(self):
-        return _(u"Workflow states are: ${states}", mapping=dict(states=", ".join(self.wf_states)))
+        return _(
+            u'Workflow states are: ${states}',
+            mapping=dict(states=', '.join(self.wf_states))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IWorkflowStateCondition, Interface)
 class WorkflowStateConditionExecutor(object):
     """The executor for this condition.
     """
-    adapts(Interface, IWorkflowStateCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index 5141289..49c484d 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -9,7 +9,7 @@
 from Products.CMFCore.interfaces import IActionSucceededEvent
 from z3c.form import form
 from zope import schema
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
@@ -24,12 +24,16 @@ class IWorkflowTransitionCondition(Interface):
         title=_(u"Workflow transition"),
         description=_(u"The workflow transitions to check for."),
         required=True,
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
+        value_type=schema.Choice(
+            vocabulary="plone.app.vocabularies.WorkflowTransitions"
+        )
+    )
 
 
 @implementer(IWorkflowTransitionCondition, IRuleElementData)
 class WorkflowTransitionCondition(SimpleItem):
-    """The actual persistent implementation of the workflow transition condition element.
+    """The actual persistent implementation of the workflow transition
+    condition element.
     """
 
     wf_transitions = []
@@ -42,10 +46,10 @@ def summary(self):
 
 
 @implementer(IExecutable)
+@adapter(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)
 class WorkflowTransitionConditionExecutor(object):
     """The executor for this condition.
     """
-    adapts(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)
 
     def __init__(self, context, element, event):
         self.context = context
diff --git a/plone/app/contentrules/exportimport/__init__.py b/plone/app/contentrules/exportimport/__init__.py
index ec51c5a..40a96af 100644
--- a/plone/app/contentrules/exportimport/__init__.py
+++ b/plone/app/contentrules/exportimport/__init__.py
@@ -1,2 +1 @@
 # -*- coding: utf-8 -*-
-#
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index 944e276..5fd61d8 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
 from plone.app.contentrules import api
-from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler
+from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler  # noqa
 from plone.app.contentrules.rule import get_assignments
 from plone.app.contentrules.rule import Rule
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
@@ -135,7 +135,10 @@ def from_unicode(self, field, value):
         # XXX: Bool incorrectly omits to declare that it implements
         # IFromUnicode, even though it does.
         import zope.schema
-        if IFromUnicode.providedBy(field) or isinstance(field, zope.schema.Bool):
+        if (
+            IFromUnicode.providedBy(field) or
+            isinstance(field, zope.schema.Bool)
+        ):
             return field.fromUnicode(value)
         else:
             return self.field_typecast(field, value)


Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2017-04-15T14:22:07+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/5302bf18b493fdc6e8e059409243fc77de7883c9

Merge pull request #28 from plone/cleanup

Jens cleanup

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/contentrules/__init__.py
M plone/app/contentrules/actions/__init__.py
M plone/app/contentrules/actions/copy.py
M plone/app/contentrules/actions/delete.py
M plone/app/contentrules/actions/logger.py
M plone/app/contentrules/actions/mail.py
M plone/app/contentrules/actions/move.py
M plone/app/contentrules/actions/notify.py
M plone/app/contentrules/actions/workflow.py
M plone/app/contentrules/api.py
M plone/app/contentrules/browser/__init__.py
M plone/app/contentrules/browser/adding.py
M plone/app/contentrules/browser/assignments.py
M plone/app/contentrules/browser/controlpanel.py
M plone/app/contentrules/browser/elements.py
M plone/app/contentrules/browser/formhelper.py
M plone/app/contentrules/browser/info.py
M plone/app/contentrules/browser/navigation.py
M plone/app/contentrules/browser/rule.py
M plone/app/contentrules/browser/traversal.py
M plone/app/contentrules/conditions/__init__.py
M plone/app/contentrules/conditions/fileextension.py
M plone/app/contentrules/conditions/group.py
M plone/app/contentrules/conditions/portaltype.py
M plone/app/contentrules/conditions/role.py
M plone/app/contentrules/conditions/talesexpression.py
M plone/app/contentrules/conditions/wfstate.py
M plone/app/contentrules/conditions/wftransition.py
M plone/app/contentrules/exportimport/__init__.py
M plone/app/contentrules/exportimport/rules.py
M plone/app/contentrules/handlers.py
M plone/app/contentrules/namechooser.py
M plone/app/contentrules/rule.py
M plone/app/contentrules/tests/base.py
M plone/app/contentrules/tests/dummy.py
M plone/app/contentrules/tests/test_action_copy.py
M plone/app/contentrules/tests/test_action_delete.py
M plone/app/contentrules/tests/test_action_logger.py
M plone/app/contentrules/tests/test_action_mail.py
M plone/app/contentrules/tests/test_action_modify.py
M plone/app/contentrules/tests/test_action_move.py
M plone/app/contentrules/tests/test_action_notify.py
M plone/app/contentrules/tests/test_action_workflow.py
M plone/app/contentrules/tests/test_browser.py
M plone/app/contentrules/tests/test_cascading_rule.py
M plone/app/contentrules/tests/test_condition_group.py
M plone/app/contentrules/tests/test_condition_portal_type.py
M plone/app/contentrules/tests/test_condition_role.py
M plone/app/contentrules/tests/test_condition_tales_expression.py
M plone/app/contentrules/tests/test_condition_wfstate.py
M plone/app/contentrules/tests/test_condition_wftransition.py
M plone/app/contentrules/tests/test_configuration.py
M plone/app/contentrules/tests/test_handlers.py
M plone/app/contentrules/tests/test_rule_assignment_mapping.py
M plone/app/contentrules/tests/test_rule_management_views.py
M plone/app/contentrules/tests/test_setup.py
M plone/app/contentrules/tests/test_traversal.py
M plone/app/contentrules/tests/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 154b0a6..9c8d577 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -17,6 +17,9 @@ Bug fixes:
 - Ensure error message is an unicode object
   [mtrebron]
 
+- Cleanup: isort, autopep8, manual formatting.
+  [jensens]
+
 
 4.0.14 (2017-04-02)
 -------------------
diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index 85880ef..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/contentrules/__init__.py b/plone/app/contentrules/__init__.py
index 730cad8..056463f 100644
--- a/plone/app/contentrules/__init__.py
+++ b/plone/app/contentrules/__init__.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
 # Import PloneMessageFactory to create messages in the plone domain
 from zope.i18nmessageid import MessageFactory
+
+
 PloneMessageFactory = MessageFactory('plone')
diff --git a/plone/app/contentrules/actions/__init__.py b/plone/app/contentrules/actions/__init__.py
index 6cf59ea..dbfedb5 100644
--- a/plone/app/contentrules/actions/__init__.py
+++ b/plone/app/contentrules/actions/__init__.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
-import os
-from plone.uuid.interfaces import IUUID
-from zope.component.hooks import getSite
+from plone.app.contentrules.browser.formhelper import AddForm
+from plone.app.contentrules.browser.formhelper import EditForm
 from plone.app.uuid.utils import uuidToPhysicalPath
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.uuid.interfaces import IUUID
 from z3c.form import form
+from zope.component.hooks import getSite
+
+import os
 
 
 class ContentWrapper(object):
@@ -12,6 +14,7 @@ class ContentWrapper(object):
     The sole purpose of this is to transform target_folder
     values from UUID to path, which all of content rules expects
     """
+
     def __init__(self, content):
         self.content = content
 
@@ -54,5 +57,6 @@ def create(self, data):
 
 
 class ActionEditForm(EditForm):
+
     def getContent(self):
-        return ContentWrapper(super(ActionEditForm, self).getContent())
\ No newline at end of file
+        return ContentWrapper(super(ActionEditForm, self).getContent())
diff --git a/plone/app/contentrules/actions/copy.py b/plone/app/contentrules/actions/copy.py
index e198ddd..295da67 100644
--- a/plone/app/contentrules/actions/copy.py
+++ b/plone/app/contentrules/actions/copy.py
@@ -1,24 +1,26 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.vocabularies.catalog import CatalogSource
-from zope.component import adapts
-from zope.event import notify
-from zope.interface import implementer, Interface
-from zope.lifecycleevent import ObjectCopiedEvent
-from zope import schema
-
 from Acquisition import aq_base
-import OFS.subscribers
 from OFS.event import ObjectClonedEvent
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.vocabularies.catalog import CatalogSource
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
+from zope import schema
+from zope.component import adapts
+from zope.event import notify
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.lifecycleevent import ObjectCopiedEvent
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+import OFS.subscribers
 
 
 class ICopyAction(Interface):
@@ -28,7 +30,8 @@ class ICopyAction(Interface):
     """
 
     target_folder = schema.Choice(title=_(u"Target folder"),
-                                  description=_(u"As a path relative to the portal root."),
+                                  description=_(
+                                      u"As a path relative to the portal root."),
                                   required=True,
                                   source=CatalogSource(is_folderish=True))
 
@@ -71,7 +74,8 @@ def __call__(self):
         target = portal_url.getPortalObject().unrestrictedTraverse(str(path), None)
 
         if target is None:
-            self.error(obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
+            self.error(
+                obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
             return False
 
         try:
@@ -115,7 +119,8 @@ def generate_id(self, target, old_id):
         taken = getattr(aq_base(target), 'has_key', None)
         if taken is None:
             item_ids = set(target.objectIds())
-            taken = lambda x: x in item_ids
+
+            def taken(x): return x in item_ids
         if not taken(old_id):
             return old_id
         idx = 1
diff --git a/plone/app/contentrules/actions/delete.py b/plone/app/contentrules/actions/delete.py
index 4bd6803..2dfc291 100644
--- a/plone/app/contentrules/actions/delete.py
+++ b/plone/app/contentrules/actions/delete.py
@@ -1,17 +1,19 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-import transaction
-from zope.interface import implementer, Interface
-from zope.component import adapts
-
-from Acquisition import aq_inner, aq_parent
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import NullAddForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import NullAddForm
+import transaction
 
 
 class IDeleteAction(Interface):
diff --git a/plone/app/contentrules/actions/logger.py b/plone/app/contentrules/actions/logger.py
index 8a932dc..1b71bbb 100644
--- a/plone/app/contentrules/actions/logger.py
+++ b/plone/app/contentrules/actions/logger.py
@@ -1,23 +1,25 @@
 # -*- coding: utf-8 -*-
-import logging
-
+from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from zope import schema
 from zope.component import adapts
 from zope.component.interfaces import IObjectEvent
-from zope.interface import implementer, Interface
-from zope import schema
-
-from OFS.SimpleItem import SimpleItem
+from zope.interface import implementer
+from zope.interface import Interface
 
-from Products.CMFCore.utils import getToolByName
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
+import logging
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules.logger")
 handler = logging.StreamHandler()
-formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -  %(message)s")
+formatter = logging.Formatter(
+    "%(asctime)s - %(name)s - %(levelname)s -  %(message)s")
 handler.setFormatter(formatter)
 logger.addHandler(handler)
 
@@ -80,7 +82,8 @@ def processedMessage(self):
                 self.event.__class__.__module__, self.event.__class__.__name__))
 
         if "&c" in processedMessage and IObjectEvent.providedBy(self.event):
-            processedMessage = processedMessage.replace("&c", repr(self.event.object))
+            processedMessage = processedMessage.replace(
+                "&c", repr(self.event.object))
 
         if "&u" in processedMessage:
             mtool = getToolByName(self.context, 'portal_membership')
diff --git a/plone/app/contentrules/actions/mail.py b/plone/app/contentrules/actions/mail.py
index c688179..7c74eb7 100644
--- a/plone/app/contentrules/actions/mail.py
+++ b/plone/app/contentrules/actions/mail.py
@@ -1,29 +1,30 @@
 # -*- coding: utf-8 -*-
-import logging
-import traceback
-from smtplib import SMTPException
-
-from plone.contentrules.rule.interfaces import IRuleElementData, IExecutable
-from plone.registry.interfaces import IRegistry
-from plone.stringinterp.interfaces import IStringInterpolator
-from zope.component import adapts
-from zope.component import getUtility
-from zope.component.interfaces import ComponentLookupError
-from zope.interface import Interface, implementer
-from zope import schema
-from zope.globalrequest import getRequest
-
 from Acquisition import aq_inner
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from plone.registry.interfaces import IRegistry
+from plone.stringinterp.interfaces import IStringInterpolator
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.MailHost.MailHost import MailHostError
 from Products.statusmessages.interfaces import IStatusMessage
+from smtplib import SMTPException
+from zope import schema
+from zope.component import adapter
+from zope.component import getUtility
+from zope.component.interfaces import ComponentLookupError
+from zope.globalrequest import getRequest
+from zope.interface import implementer
+from zope.interface import Interface
+
+import logging
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
 
 logger = logging.getLogger("plone.contentrules")
 
@@ -31,27 +32,36 @@
 class IMailAction(Interface):
     """Definition of the configuration available for a mail action
     """
-    subject = schema.TextLine(title=_(u"Subject"),
-                              description=_(u"Subject of the message"),
-                              required=True)
-    source = schema.TextLine(title=_(u"Email source"),
-                             description=_("The email address that sends the "
-                                           "email. If no email is provided here, "
-                                           "it will use the portal from address."),
-                             required=False)
+    subject = schema.TextLine(
+        title=_(u'Subject'),
+        description=_(u'Subject of the message'),
+        required=True
+    )
+    source = schema.TextLine(
+        title=_(u'Email source'),
+        description=_(
+            'The email address that sends the email. If no email is provided '
+            'here, it will use the portal from address.'
+        ),
+        required=False
+    )
     recipients = schema.TextLine(
-        title=_(u"Email recipients"),
-        description=_("The email where you want to "
-                      "send this message. To send it to "
-                      "different email addresses, "
-                      "just separate them with ,"),
-        required=True)
-    exclude_actor = schema.Bool(title=_(u"Exclude actor from recipients"),
-                                description=_("Do not send the email to the user "
-                                              "that did the action."))
-    message = schema.Text(title=_(u"Message"),
-                          description=_(u"The message that you want to mail."),
-                          required=True)
+        title=_(u'Email recipients'),
+        description=_(
+            'The email where you want to send this message. To send it to '
+            'different email addresses, just separate them with ,'
+        ),
+        required=True
+    )
+    exclude_actor = schema.Bool(
+        title=_(u'Exclude actor from recipients'),
+        description=_('Do not send the email to the user that did the action.')
+    )
+    message = schema.Text(
+        title=_(u'Message'),
+        description=_(u'The message that you want to mail.'),
+        required=True
+    )
 
 
 @implementer(IMailAction, IRuleElementData)
@@ -75,10 +85,10 @@ def summary(self):
 
 
 @implementer(IExecutable)
+@adapter(Interface, IMailAction, Interface)
 class MailActionExecutor(object):
     """The executor for this action.
     """
-    adapts(Interface, IMailAction, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -89,17 +99,17 @@ def __init__(self, context, element, event):
                                                    prefix='plone')
 
     def __call__(self):
-        mailhost = getToolByName(aq_inner(self.context), "MailHost")
+        mailhost = getToolByName(aq_inner(self.context), 'MailHost')
         if not mailhost:
-            raise ComponentLookupError("You must have a Mailhost utility to execute this action")
+            raise ComponentLookupError(
+                'You must have a Mailhost utility to execute this action'
+            )
 
         email_charset = self.mail_settings.email_charset
-
         obj = self.event.object
-
         interpolator = IStringInterpolator(obj)
-
         source = self.element.source
+
         if source:
             source = interpolator(source).strip()
 
@@ -112,10 +122,12 @@ def __call__(self):
                 request = getRequest()
                 if request:
                     messages = IStatusMessage(request)
-                    msg = _(u"Error sending email from content rule. You must "
-                            "provide a source address for mail "
-                            "actions or enter an email in the portal properties")
-                    messages.add(msg, type=u"error")
+                    msg = _(
+                        u'Error sending email from content rule. You must '
+                        u'provide a source address for mail '
+                        u'actions or enter an email in the portal properties'
+                    )
+                    messages.add(msg, type=u'error')
                 return False
 
             from_name = self.mail_settings.email_from_name.strip('"')
@@ -123,14 +135,19 @@ def __call__(self):
 
         recip_string = interpolator(self.element.recipients)
         if recip_string:  # check recipient is not None or empty string
-            recipients = set([str(mail.strip()) for mail in recip_string.split(',')
-                              if mail.strip()])
+            recipients = set([
+                str(mail.strip()) for mail in recip_string.split(',')
+                if mail.strip()
+            ])
         else:
             recipients = set()
 
         if self.element.exclude_actor:
             mtool = getToolByName(aq_inner(self.context), "portal_membership")
-            actor_email = mtool.getAuthenticatedMember().getProperty('email', '')
+            actor_email = mtool.getAuthenticatedMember().getProperty(
+                'email',
+                ''
+            )
             if actor_email in recipients:
                 recipients.remove(actor_email)
 
@@ -152,9 +169,9 @@ def __call__(self):
                               subject=subject, charset=email_charset,
                               immediate=not mailhost.smtp_queue)
             except (MailHostError, SMTPException):
-                logger.error(
-                    """mailing error: Attempt to send mail in content rule failed.\n%s""" %
-                    traceback.format_exc())
+                logger.exception(
+                    'mail error: Attempt to send mail in content rule failed'
+                )
 
         return True
 
@@ -190,4 +207,4 @@ class MailEditForm(ActionEditForm):
 
 
 class MailEditFormView(ContentRuleFormWrapper):
-    form = MailEditForm
\ No newline at end of file
+    form = MailEditForm
diff --git a/plone/app/contentrules/actions/move.py b/plone/app/contentrules/actions/move.py
index ade841e..61638a0 100644
--- a/plone/app/contentrules/actions/move.py
+++ b/plone/app/contentrules/actions/move.py
@@ -1,25 +1,28 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from plone.app.vocabularies.catalog import CatalogSource
-from zope.component import adapts
-from zope.container.contained import notifyContainerModified
-from zope.event import notify
-from zope.interface import implementer, Interface
-from zope.lifecycleevent import ObjectMovedEvent
-from zope import schema
-
-from Acquisition import aq_inner, aq_parent, aq_base
-from OFS.event import ObjectWillBeMovedEvent
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from OFS.CopySupport import sanity_check
+from OFS.event import ObjectWillBeMovedEvent
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.vocabularies.catalog import CatalogSource
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from zope import schema
+from zope.component import adapts
+from zope.container.contained import notifyContainerModified
+from zope.event import notify
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.lifecycleevent import ObjectMovedEvent
 
 
 class IMoveAction(Interface):
@@ -29,7 +32,8 @@ class IMoveAction(Interface):
     """
 
     target_folder = schema.Choice(title=_(u"Target folder"),
-                                  description=_(u"As a path relative to the portal root."),
+                                  description=_(
+                                      u"As a path relative to the portal root."),
                                   required=True,
                                   source=CatalogSource(is_folderish=True))
 
@@ -72,7 +76,8 @@ def __call__(self):
         target = portal_url.getPortalObject().unrestrictedTraverse(str(path), None)
 
         if target is None:
-            self.error(obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
+            self.error(
+                obj, _(u"Target folder ${target} does not exist.", mapping={'target': path}))
             return False
 
         if target.absolute_url() == parent.absolute_url():
@@ -138,7 +143,8 @@ def generate_id(self, target, old_id):
         taken = getattr(aq_base(target), 'has_key', None)
         if taken is None:
             item_ids = set(target.objectIds())
-            taken = lambda x: x in item_ids
+
+            def taken(x): return x in item_ids
         if not taken(old_id):
             return old_id
         idx = 1
diff --git a/plone/app/contentrules/actions/notify.py b/plone/app/contentrules/actions/notify.py
index b07a3f3..b04fc6f 100644
--- a/plone/app/contentrules/actions/notify.py
+++ b/plone/app/contentrules/actions/notify.py
@@ -1,16 +1,16 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.contentrules import PloneMessageFactory
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.statusmessages.interfaces import IStatusMessage
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class INotifyAction(Interface):
@@ -20,11 +20,13 @@ class INotifyAction(Interface):
     """
 
     message = schema.TextLine(title=_(u"Message"),
-                              description=_(u"The message to send to the user."),
+                              description=_(
+                                  u"The message to send to the user."),
                               required=True)
 
     message_type = schema.Choice(title=_(u"Message type"),
-                                 description=_(u"Select the type of message to display."),
+                                 description=_(
+                                     u"Select the type of message to display."),
                                  values=("info", "warning", "error"),
                                  required=True,
                                  default="info")
@@ -60,7 +62,7 @@ def __init__(self, context, element, event):
 
     def __call__(self):
         request = self.context.REQUEST
-        message = PloneMessageFactory(self.element.message)
+        message = _(self.element.message)
         message_type = self.element.message_type
         IStatusMessage(request).addStatusMessage(message, type=message_type)
         return True
diff --git a/plone/app/contentrules/actions/workflow.py b/plone/app/contentrules/actions/workflow.py
index 39d3c60..c23dc3f 100644
--- a/plone/app/contentrules/actions/workflow.py
+++ b/plone/app/contentrules/actions/workflow.py
@@ -1,18 +1,19 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.interface import implementer, Interface
-from zope.component import adapts
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.actions import ActionAddForm
+from plone.app.contentrules.actions import ActionEditForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import utils
 from Products.statusmessages.interfaces import IStatusMessage
 from ZODB.POSException import ConflictError
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.actions import ActionAddForm, ActionEditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from zope import schema
+from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IWorkflowAction(Interface):
@@ -22,7 +23,8 @@ class IWorkflowAction(Interface):
     """
 
     transition = schema.Choice(title=_(u"Transition"),
-                               description=_(u"Select the workflow transition to attempt"),
+                               description=_(
+                                   u"Select the workflow transition to attempt"),
                                required=True,
                                vocabulary='plone.app.vocabularies.WorkflowTransitions')
 
@@ -84,7 +86,8 @@ class WorkflowAddForm(ActionAddForm):
     """
     schema = IWorkflowAction
     label = _(u"Add Workflow Action")
-    description = _(u"A workflow action triggers a workflow transition on an object.")
+    description = _(
+        u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
     Type = WorkflowAction
 
@@ -98,7 +101,8 @@ class WorkflowEditForm(ActionEditForm):
     """
     schema = IWorkflowAction
     label = _(u"Edit Workflow Action")
-    description = _(u"A workflow action triggers a workflow transition on an object.")
+    description = _(
+        u"A workflow action triggers a workflow transition on an object.")
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/api.py b/plone/app/contentrules/api.py
index 374b58a..a093a61 100644
--- a/plone/app/contentrules/api.py
+++ b/plone/app/contentrules/api.py
@@ -1,9 +1,10 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility
+from plone.app.contentrules.rule import get_assignments
+from plone.app.contentrules.rule import insert_assignment
 from plone.contentrules.engine.assignments import RuleAssignment
-from plone.contentrules.engine.interfaces import IRuleStorage, \
-    IRuleAssignmentManager
-from plone.app.contentrules.rule import get_assignments, insert_assignment
+from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import queryUtility
 
 
 def assign_rule(container, rule_id, enabled=True, bubbles=True,
diff --git a/plone/app/contentrules/browser/__init__.py b/plone/app/contentrules/browser/__init__.py
index 4aa11c7..ec51c5a 100644
--- a/plone/app/contentrules/browser/__init__.py
+++ b/plone/app/contentrules/browser/__init__.py
@@ -1,2 +1,2 @@
 # -*- coding: utf-8 -*-
-#
\ No newline at end of file
+#
diff --git a/plone/app/contentrules/browser/adding.py b/plone/app/contentrules/browser/adding.py
index 76b3d2f..fe377e4 100644
--- a/plone/app/contentrules/browser/adding.py
+++ b/plone/app/contentrules/browser/adding.py
@@ -1,21 +1,20 @@
 # -*- coding: utf-8 -*-
-from warnings import warn
-
-from zope.interface import implementer
-from zope.component import getMultiAdapter, getUtility
-from zope.container.interfaces import INameChooser
-
-from Acquisition import aq_base, aq_inner, aq_parent
+from Acquisition import aq_base
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from OFS.SimpleItem import SimpleItem
-from Products.Five.browser import BrowserView
-
-from Products.statusmessages.interfaces import IStatusMessage
-from plone.contentrules.engine.interfaces import IRuleStorage
-
 from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.interfaces import IRuleActionAdding
 from plone.app.contentrules.browser.interfaces import IRuleAdding
 from plone.app.contentrules.browser.interfaces import IRuleConditionAdding
-from plone.app.contentrules.browser.interfaces import IRuleActionAdding
+from plone.contentrules.engine.interfaces import IRuleStorage
+from Products.Five.browser import BrowserView
+from Products.statusmessages.interfaces import IStatusMessage
+from warnings import warn
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.container.interfaces import INameChooser
+from zope.interface import implementer
 
 
 @implementer(IRuleAdding)
@@ -80,7 +79,8 @@ def __init__(self, context, request):
         self.request = request
 
     def nextURL(self):
-        url = str(getMultiAdapter((aq_parent(self.context), self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (aq_parent(self.context), self.request), name=u"absolute_url"))
         return url + "/@@manage-content-rules"
 
     def renderAddButton(self):
diff --git a/plone/app/contentrules/browser/assignments.py b/plone/app/contentrules/browser/assignments.py
index 1f14cac..cd7bf2e 100644
--- a/plone/app/contentrules/browser/assignments.py
+++ b/plone/app/contentrules/browser/assignments.py
@@ -1,18 +1,18 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.engine.interfaces import IRuleStorage
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules import api
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.memoize.instance import memoize
-from zope.component import getUtility, getMultiAdapter
-from zope.schema.interfaces import IVocabularyFactory
-
-from Acquisition import aq_inner, aq_parent
+from Products.CMFCore.interfaces import ISiteRoot
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from Products.CMFCore.interfaces import ISiteRoot
 from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules import api
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.schema.interfaces import IVocabularyFactory
 
 
 class ManageAssignments(BrowserView):
@@ -69,7 +69,8 @@ def __call__(self):
         elif 'form.button.Bubble' in form:
             rule_ids = form.get('rule_ids', ())
             for r in rule_ids:
-                api.edit_rule_assignment(context, r, bubbles=True, enabled=True)
+                api.edit_rule_assignment(
+                    context, r, bubbles=True, enabled=True)
 
             status.addStatusMessage(_(u"Changes saved."), type='info')
         elif 'form.button.NoBubble' in form:
@@ -144,7 +145,8 @@ def assigned_rules(self):
                 assignments.append(dict(id=key,
                                         title=rule.title,
                                         description=rule.description,
-                                        trigger=events.get(rule.event, "Unknown"),
+                                        trigger=events.get(
+                                            rule.event, "Unknown"),
                                         url=self._rule_url(key),
                                         bubbles=assignment.bubbles,
                                         enabled=assignment.enabled,
@@ -166,7 +168,8 @@ def assignable_rules(self):
 
     @memoize
     def _events(self):
-        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")
+        eventsFactory = getUtility(
+            IVocabularyFactory, name="plone.contentrules.events")
         return dict([(e.value, e.token) for e in eventsFactory(self.context)])
 
     def _rule_url(self, key):
@@ -174,5 +177,6 @@ def _rule_url(self, key):
 
     @memoize
     def _portal_url(self):
-        portal_state = getMultiAdapter((self.context, self.request), name="plone_portal_state")
+        portal_state = getMultiAdapter(
+            (self.context, self.request), name="plone_portal_state")
         return portal_state.portal_url()
diff --git a/plone/app/contentrules/browser/controlpanel.py b/plone/app/contentrules/browser/controlpanel.py
index 9a2142c..7965961 100644
--- a/plone/app/contentrules/browser/controlpanel.py
+++ b/plone/app/contentrules/browser/controlpanel.py
@@ -1,20 +1,18 @@
 # -*- coding: utf-8 -*-
-from zope.component import getMultiAdapter
 from AccessControl import Unauthorized
-from zope.interface import implementer
-from zope.i18n import translate
-from zope.component import getUtility
-from zope.schema.interfaces import IVocabularyFactory
-
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.interfaces import IContentRulesControlPanel
+from plone.app.contentrules.rule import get_assignments
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.memoize.instance import memoize
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.interfaces import IContentRulesControlPanel
-from plone.app.contentrules.rule import get_assignments
 from Products.statusmessages.interfaces import IStatusMessage
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.i18n import translate
+from zope.interface import implementer
+from zope.schema.interfaces import IVocabularyFactory
 
 
 def get_trigger_class(trigger):
@@ -89,7 +87,8 @@ def ruleTypesToShow(self):
             else:
                 continue
 
-            eventname = translate(event.token, context=self.request, domain='plone')
+            eventname = translate(
+                event.token, context=self.request, domain='plone')
             selector.append({'id': get_trigger_class(event.value),
                              'title': eventname})
 
@@ -105,7 +104,8 @@ def _getRules(self):
 
     @memoize
     def _events(self):
-        eventsFactory = getUtility(IVocabularyFactory, name="plone.contentrules.events")
+        eventsFactory = getUtility(
+            IVocabularyFactory, name="plone.contentrules.events")
         return eventsFactory(self.context)
 
     def delete_rule(self):
diff --git a/plone/app/contentrules/browser/elements.py b/plone/app/contentrules/browser/elements.py
index 2f6754b..26be746 100644
--- a/plone/app/contentrules/browser/elements.py
+++ b/plone/app/contentrules/browser/elements.py
@@ -1,23 +1,23 @@
 # -*- coding: utf-8 -*-
 from AccessControl import Unauthorized
-from zope.i18n import translate
-
+from Acquisition import aq_inner
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules import api
+from plone.app.contentrules.rule import get_assignments
+from plone.contentrules.engine import utils
 from plone.contentrules.rule.interfaces import IRuleAction
 from plone.contentrules.rule.interfaces import IRuleCondition
 from plone.contentrules.rule.interfaces import IRuleElementData
-from plone.contentrules.engine import utils
 from plone.memoize.instance import memoize
-from zope.component import getMultiAdapter, getUtilitiesFor, getUtility
-from zope.schema.interfaces import IVocabularyFactory
-
-from Acquisition import aq_inner
 from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.statusmessages.interfaces import IStatusMessage
-
-from plone.app.contentrules import PloneMessageFactory as _, api
-from plone.app.contentrules.rule import get_assignments
+from zope.component import getMultiAdapter
+from zope.component import getUtilitiesFor
+from zope.component import getUtility
+from zope.i18n import translate
+from zope.schema.interfaces import IVocabularyFactory
 
 
 class ManageElements(BrowserView):
diff --git a/plone/app/contentrules/browser/formhelper.py b/plone/app/contentrules/browser/formhelper.py
index a0cba37..9f3b49b 100644
--- a/plone/app/contentrules/browser/formhelper.py
+++ b/plone/app/contentrules/browser/formhelper.py
@@ -1,19 +1,19 @@
 # -*- coding: utf-8 -*-
-from z3c.form import form, button
+from Acquisition import aq_inner
+from Acquisition import aq_parent
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.interfaces import IContentRulesForm
+from plone.autoform.form import AutoExtensibleForm
 from plone.z3cform import layout
+from Products.Five.browser import BrowserView
+from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
+from z3c.form import button
+from z3c.form import form
 from zope.component import getMultiAdapter
 from zope.event import notify
 from zope.interface import implementer
-import zope.lifecycleevent
-
-from Acquisition import aq_parent, aq_inner
-from Products.Five.browser import BrowserView
-
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.interfaces import IContentRulesForm
 
-from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
-from plone.autoform.form import AutoExtensibleForm
+import zope.lifecycleevent
 
 
 @implementer(IContentRulesForm)
@@ -46,7 +46,8 @@ def updateActions(self):
     def nextURL(self):
         rule = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(rule))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
 
@@ -94,7 +95,8 @@ def __call__(self):
     def nextURL(self):
         rule = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(rule))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         return '%s/++rule++%s/@@manage-elements' % (url, rule.__name__)
 
     def create(self):
@@ -134,11 +136,12 @@ def nextURL(self):
         element = aq_inner(self.context)
         rule = aq_parent(element)
         context = aq_parent(rule)
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         focus = self.context.id.strip('+')
         return '%s/++rule++%s/@@manage-elements#%s' % (url, rule.__name__, focus)
 
 
 class ContentRuleFormWrapper(layout.FormWrapper):
 
-    index = ViewPageTemplateFile('templates/contentrules-pageform.pt')
\ No newline at end of file
+    index = ViewPageTemplateFile('templates/contentrules-pageform.pt')
diff --git a/plone/app/contentrules/browser/info.py b/plone/app/contentrules/browser/info.py
index a56cea3..d223983 100644
--- a/plone/app/contentrules/browser/info.py
+++ b/plone/app/contentrules/browser/info.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.interfaces import IRuleAssignable
-
 from AccessControl import getSecurityManager
+from plone.contentrules.engine.interfaces import IRuleAssignable
+from plone.contentrules.engine.interfaces import IRuleStorage
 from Products.Five.browser import BrowserView
+from zope.component import queryUtility
 
 
 class ContentRulesInfo(BrowserView):
diff --git a/plone/app/contentrules/browser/navigation.py b/plone/app/contentrules/browser/navigation.py
index 6b6d4a9..6c61d84 100644
--- a/plone/app/contentrules/browser/navigation.py
+++ b/plone/app/contentrules/browser/navigation.py
@@ -1,8 +1,7 @@
 # -*- coding: utf-8 -*-
-from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory
+from Products.CMFCore.utils import getToolByName
+from Products.CMFPlone.browser.navigation import PhysicalNavigationBreadcrumbs
 
 
 class RuleBreadcrumbs(PhysicalNavigationBreadcrumbs):
diff --git a/plone/app/contentrules/browser/rule.py b/plone/app/contentrules/browser/rule.py
index 42ee6a9..d8245d1 100644
--- a/plone/app/contentrules/browser/rule.py
+++ b/plone/app/contentrules/browser/rule.py
@@ -1,17 +1,15 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IRuleConfiguration
-from zope.component import getMultiAdapter
-
-from Acquisition import aq_parent, aq_inner
-
-from Products.CMFPlone.utils import base_hasattr
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.browser.formhelper import AddForm
-from plone.app.contentrules.browser.formhelper import EditForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
-
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.app.contentrules.rule import Rule
+from plone.contentrules.rule.interfaces import IRuleConfiguration
+from Products.CMFPlone.utils import base_hasattr
 from z3c.form.form import applyChanges
+from zope.component import getMultiAdapter
 
 
 class RuleAddForm(AddForm):
@@ -25,7 +23,8 @@ class RuleAddForm(AddForm):
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         if base_hasattr(self.context, '_chosen_name'):
             return '%s/++rule++%s/@@manage-elements' % (url, self.context._chosen_name)
         else:
@@ -50,9 +49,10 @@ class RuleEditForm(EditForm):
 
     def nextURL(self):
         context = aq_parent(aq_inner(self.context))
-        url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
+        url = str(getMultiAdapter(
+            (context, self.request), name=u"absolute_url"))
         return url + '/@@rules-controlpanel'
 
 
 class RuleEditFormView(ContentRuleFormWrapper):
-    form = RuleEditForm
\ No newline at end of file
+    form = RuleEditForm
diff --git a/plone/app/contentrules/browser/traversal.py b/plone/app/contentrules/browser/traversal.py
index 94ee857..d6f98d3 100644
--- a/plone/app/contentrules/browser/traversal.py
+++ b/plone/app/contentrules/browser/traversal.py
@@ -1,14 +1,12 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import adapts, getUtility
-
-from zope.traversing.interfaces import ITraversable
-from zope.publisher.interfaces.browser import IBrowserRequest
-
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.rule.interfaces import IRule
-
 from Products.CMFCore.interfaces import ISiteRoot
+from zope.component import adapts
+from zope.component import getUtility
+from zope.interface import implementer
+from zope.publisher.interfaces.browser import IBrowserRequest
+from zope.traversing.interfaces import ITraversable
 
 
 @implementer(ITraversable)
diff --git a/plone/app/contentrules/conditions/__init__.py b/plone/app/contentrules/conditions/__init__.py
index ec51c5a..40a96af 100644
--- a/plone/app/contentrules/conditions/__init__.py
+++ b/plone/app/contentrules/conditions/__init__.py
@@ -1,2 +1 @@
 # -*- coding: utf-8 -*-
-#
diff --git a/plone/app/contentrules/conditions/fileextension.py b/plone/app/contentrules/conditions/fileextension.py
index eebe094..2b424da 100644
--- a/plone/app/contentrules/conditions/fileextension.py
+++ b/plone/app/contentrules/conditions/fileextension.py
@@ -1,20 +1,23 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
+from OFS.SimpleItem import SimpleItem
+from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import AddForm
+from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
 from z3c.form import form
-from zope.interface import implementer, Interface
 from zope import schema
+from zope.component import adapter
+from zope.interface import implementer
+from zope.interface import Interface
+
 
-from OFS.SimpleItem import SimpleItem
 try:
     from Products.ATContentTypes.interfaces import IFileContent
 except ImportError:
     IFileContent = None
 
-from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
-from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
-
 
 class IFileExtensionCondition(Interface):
     """Interface for the configurable aspects of a portal type condition.
@@ -22,9 +25,11 @@ class IFileExtensionCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    file_extension = schema.TextLine(title=_(u"File extension"),
-                                     description=_(u"The file extension to check for"),
-                                     required=True)
+    file_extension = schema.TextLine(
+        title=_(u"File extension"),
+        description=_(u"The file extension to check for"),
+        required=True
+    )
 
 
 @implementer(IFileExtensionCondition, IRuleElementData)
@@ -39,16 +44,19 @@ class FileExtensionCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"File extension is ${ext}", mapping=dict(ext=self.file_extension))
+        return _(
+            u"File extension is ${ext}",
+            mapping=dict(ext=self.file_extension)
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IFileExtensionCondition, Interface)
 class FileExtensionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IFileExtensionCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -77,8 +85,10 @@ class FileExtensionAddForm(AddForm):
     """
     schema = IFileExtensionCondition
     label = _(u"Add File Extension Condition")
-    description = _(u"A file extension condition can restrict a rule from "
-                    "executing unless the target is a File with a particular extension.")
+    description = _(
+        u"A file extension condition can restrict a rule from "
+        u"executing unless the target is a File with a particular extension."
+    )
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -98,8 +108,10 @@ class FileExtensionEditForm(EditForm):
     """
     schema = IFileExtensionCondition
     label = _(u"Edit File Extension Condition")
-    description = _(u"A file extension condition can restrict a rule from "
-                    "executing unless the target is a File with a particular extension.")
+    description = _(
+        u"A file extension condition can restrict a rule from "
+        u"executing unless the target is a File with a particular extension."
+    )
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/group.py b/plone/app/contentrules/conditions/group.py
index ea4f4db..1de9df2 100644
--- a/plone/app/contentrules/conditions/group.py
+++ b/plone/app/contentrules/conditions/group.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from z3c.form import form
-from zope.interface import implementer, Interface
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapter
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IGroupCondition(Interface):
@@ -19,10 +20,12 @@ class IGroupCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    group_names = schema.Set(title=_(u"Group name"),
-                             description=_(u"The name of the group."),
-                             required=True,
-                             value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups"))
+    group_names = schema.Set(
+        title=_(u"Group name"),
+        description=_(u"The name of the group."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Groups")
+    )
 
 
 @implementer(IGroupCondition, IRuleElementData)
@@ -37,16 +40,19 @@ class GroupCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"Groups are: ${names}", mapping=dict(names=", ".join(self.group_names)))
+        return _(
+            u"Groups are: ${names}",
+            mapping=dict(names=", ".join(self.group_names))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IGroupCondition, Interface)
 class GroupConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IGroupCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -54,12 +60,14 @@ def __init__(self, context, element, event):
         self.event = event
 
     def __call__(self):
-        portal_membership = getToolByName(self.context, 'portal_membership', None)
+        portal_membership = getToolByName(
+            self.context, 'portal_membership', None)
         portal_groups = getToolByName(self.context, 'portal_groups', None)
         if portal_groups is None or portal_groups is None:
             return False
         member = portal_membership.getAuthenticatedMember()
-        groupIds = [g.getId() for g in portal_groups.getGroupsByUserId(member.getId())]
+        groupIds = [g.getId()
+                    for g in portal_groups.getGroupsByUserId(member.getId())]
         for g in self.element.group_names:
             if g in groupIds:
                 return True
@@ -71,8 +79,10 @@ class GroupAddForm(AddForm):
     """
     schema = IGroupCondition
     label = _(u"Add Group Condition")
-    description = _(u"A group condition can prevent a rule from executing "
-                    u"unless the current user is a member of a particular group.")
+    description = _(
+        u"A group condition can prevent a rule from executing "
+        u"unless the current user is a member of a particular group."
+    )
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -80,6 +90,7 @@ def create(self, data):
         form.applyChanges(self, c, data)
         return c
 
+
 class GroupAddFormView(ContentRuleFormWrapper):
     form = GroupAddForm
 
@@ -89,8 +100,10 @@ class GroupEditForm(EditForm):
     """
     schema = IGroupCondition
     label = _(u"Edit Group Condition")
-    description = _(u"A group condition can prevent a rule from executing "
-                    u"unless the current user is a member of a particular group.")
+    description = _(
+        u"A group condition can prevent a rule from executing "
+        u"unless the current user is a member of a particular group."
+    )
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/portaltype.py b/plone/app/contentrules/conditions/portaltype.py
index d4bbde2..f58914f 100644
--- a/plone/app/contentrules/conditions/portaltype.py
+++ b/plone/app/contentrules/conditions/portaltype.py
@@ -1,20 +1,22 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-from zope.site.hooks import getSite
-from zope.i18n import translate
-
-from Acquisition import aq_inner, aq_base
+from Acquisition import aq_base
+from Acquisition import aq_inner
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-from Products.CMFCore.interfaces import ITypesTool
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.interfaces import ITypesTool
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapter
+from zope.i18n import translate
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.site.hooks import getSite
 
 
 class IPortalTypeCondition(Interface):
@@ -27,7 +29,10 @@ class IPortalTypeCondition(Interface):
         title=_(u"Content type"),
         description=_(u"The content type to check for."),
         required=True,
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"))
+        value_type=schema.Choice(
+            vocabulary="plone.app.vocabularies.ReallyUserFriendlyTypes"
+        )
+    )
 
 
 @implementer(IPortalTypeCondition, IRuleElementData)
@@ -50,16 +55,19 @@ def summary(self):
             if fti is not None:
                 title = translate(fti.Title(), context=portal.REQUEST)
                 titles.append(title)
-        return _(u"Content types are: ${names}", mapping=dict(names=", ".join(titles)))
+        return _(
+            u"Content types are: ${names}",
+            mapping=dict(names=", ".join(titles))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IPortalTypeCondition, Interface)
 class PortalTypeConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IPortalTypeCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -85,7 +93,8 @@ class PortalTypeAddForm(AddForm):
     """
     schema = IPortalTypeCondition
     label = _(u"Add Content Type Condition")
-    description = _(u"A portal type condition makes the rule apply only to certain content types.")
+    description = _(
+        u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -103,7 +112,8 @@ class PortalTypeEditForm(EditForm):
     """
     schema = IPortalTypeCondition
     label = _(u"Edit Content Type Condition")
-    description = _(u"A portal type condition makes the rule apply only to certain content types.")
+    description = _(
+        u"A portal type condition makes the rule apply only to certain content types.")
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/role.py b/plone/app/contentrules/conditions/role.py
index ca9cf46..0536262 100644
--- a/plone/app/contentrules/conditions/role.py
+++ b/plone/app/contentrules/conditions/role.py
@@ -1,17 +1,18 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-
 from Acquisition import aq_inner
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapter
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IRoleCondition(Interface):
@@ -20,10 +21,12 @@ class IRoleCondition(Interface):
     This is also used to create add and edit forms, below.
     """
 
-    role_names = schema.Set(title=_(u"Roles"),
-                            description=_(u"The roles to check for."),
-                            required=True,
-                            value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles"))
+    role_names = schema.Set(
+        title=_(u"Roles"),
+        description=_(u"The roles to check for."),
+        required=True,
+        value_type=schema.Choice(vocabulary="plone.app.vocabularies.Roles")
+    )
 
 
 @implementer(IRoleCondition, IRuleElementData)
@@ -38,16 +41,19 @@ class RoleCondition(SimpleItem):
 
     @property
     def summary(self):
-        return _(u"Roles are: ${names}", mapping=dict(names=", ".join(self.role_names)))
+        return _(
+            u"Roles are: ${names}",
+            mapping=dict(names=", ".join(self.role_names))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IRoleCondition, Interface)
 class RoleConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, IRoleCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -55,11 +61,13 @@ def __init__(self, context, element, event):
         self.event = event
 
     def __call__(self):
-        portal_membership = getToolByName(self.context, 'portal_membership', None)
+        portal_membership = getToolByName(
+            self.context, 'portal_membership', None)
         if portal_membership is None:
             return False
         member = portal_membership.getAuthenticatedMember()
-        roles_in_context = member.getRolesInContext(aq_inner(self.event.object))
+        roles_in_context = member.getRolesInContext(
+            aq_inner(self.event.object))
         for r in self.element.role_names:
             if r in roles_in_context:
                 return True
@@ -71,8 +79,10 @@ class RoleAddForm(AddForm):
     """
     schema = IRoleCondition
     label = _(u"Add Role Condition")
-    description = _(u"A role condition can prevent rules from executing unless "
-                    u"the current user has a particular role.")
+    description = _(
+        u"A role condition can prevent rules from executing unless "
+        u"the current user has a particular role."
+    )
     form_name = _(u"Configure element")
 
     def create(self, data):
@@ -90,8 +100,10 @@ class RoleEditForm(EditForm):
     """
     schema = IRoleCondition
     label = _(u"Add Role Condition")
-    description = _(u"A role condition can prevent rules from executing unless "
-                    u"the current user has a particular role.")
+    description = _(
+        u"A role condition can prevent rules from executing unless "
+        u"the current user has a particular role."
+    )
     form_name = _(u"Configure element")
 
 
diff --git a/plone/app/contentrules/conditions/talesexpression.py b/plone/app/contentrules/conditions/talesexpression.py
index 3be6eab..a07d862 100644
--- a/plone/app/contentrules/conditions/talesexpression.py
+++ b/plone/app/contentrules/conditions/talesexpression.py
@@ -1,18 +1,19 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
-
-from Products.CMFCore.Expression import Expression, createExprContext
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.Expression import createExprContext
+from Products.CMFCore.Expression import Expression
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapter
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class ITalesExpressionCondition(Interface):
@@ -29,7 +30,8 @@ class ITalesExpressionCondition(Interface):
 
 @implementer(ITalesExpressionCondition, IRuleElementData)
 class TalesExpressionCondition(SimpleItem):
-    """The actual persistent implementation of the TALES expression condition element.
+    """The actual persistent implementation of the TALES expression condition
+    element.
     """
 
     tales_expression = ''
@@ -42,12 +44,12 @@ def summary(self):
 
 
 @implementer(IExecutable)
+@adapter(Interface, ITalesExpressionCondition, Interface)
 class TalesExpressionConditionExecutor(object):
     """The executor for this condition.
 
     This is registered as an adapter in configure.zcml
     """
-    adapts(Interface, ITalesExpressionCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
diff --git a/plone/app/contentrules/conditions/wfstate.py b/plone/app/contentrules/conditions/wfstate.py
index feba51d..da9943e 100644
--- a/plone/app/contentrules/conditions/wfstate.py
+++ b/plone/app/contentrules/conditions/wfstate.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from zope.interface import implementer, Interface
-from z3c.form import form
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.utils import getToolByName
-
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
 from plone.app.contentrules import PloneMessageFactory as _
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.utils import getToolByName
+from z3c.form import form
+from zope import schema
+from zope.component import adapter
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IWorkflowStateCondition(Interface):
@@ -20,30 +21,37 @@ class IWorkflowStateCondition(Interface):
     """
 
     wf_states = schema.Set(
-        title=_(u"Workflow state"),
-        description=_(u"The workflow states to check for."),
+        title=_(u'Workflow state'),
+        description=_(u'The workflow states to check for.'),
         required=True,
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowStates"))
+        value_type=schema.Choice(
+            vocabulary='plone.app.vocabularies.WorkflowStates'
+        )
+    )
 
 
 @implementer(IWorkflowStateCondition, IRuleElementData)
 class WorkflowStateCondition(SimpleItem):
-    """The actual persistent implementation of the workflow state condition element.py.
+    """The actual persistent implementation of the workflow state condition
+    element.py.
     """
 
     wf_states = []
-    element = "plone.conditions.WorkflowState"
+    element = 'plone.conditions.WorkflowState'
 
     @property
     def summary(self):
-        return _(u"Workflow states are: ${states}", mapping=dict(states=", ".join(self.wf_states)))
+        return _(
+            u'Workflow states are: ${states}',
+            mapping=dict(states=', '.join(self.wf_states))
+        )
 
 
 @implementer(IExecutable)
+@adapter(Interface, IWorkflowStateCondition, Interface)
 class WorkflowStateConditionExecutor(object):
     """The executor for this condition.
     """
-    adapts(Interface, IWorkflowStateCondition, Interface)
 
     def __init__(self, context, element, event):
         self.context = context
@@ -54,7 +62,8 @@ def __call__(self):
         portal_workflow = getToolByName(self.context, 'portal_workflow', None)
         if portal_workflow is None:
             return False
-        state = portal_workflow.getInfoFor(self.event.object, 'review_state', None)
+        state = portal_workflow.getInfoFor(
+            self.event.object, 'review_state', None)
         if state is None:
             return False
         return state in self.element.wf_states
diff --git a/plone/app/contentrules/conditions/wftransition.py b/plone/app/contentrules/conditions/wftransition.py
index e4b7cb4..49c484d 100644
--- a/plone/app/contentrules/conditions/wftransition.py
+++ b/plone/app/contentrules/conditions/wftransition.py
@@ -1,16 +1,17 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.rule.interfaces import IExecutable, IRuleElementData
-from zope.component import adapts
-from z3c.form import form
-from zope.interface import implementer, Interface
-from zope import schema
-
 from OFS.SimpleItem import SimpleItem
-from Products.CMFCore.interfaces import IActionSucceededEvent
-
 from plone.app.contentrules import PloneMessageFactory as _
-from plone.app.contentrules.browser.formhelper import AddForm, EditForm
+from plone.app.contentrules.browser.formhelper import AddForm
 from plone.app.contentrules.browser.formhelper import ContentRuleFormWrapper
+from plone.app.contentrules.browser.formhelper import EditForm
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.interfaces import IActionSucceededEvent
+from z3c.form import form
+from zope import schema
+from zope.component import adapter
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 class IWorkflowTransitionCondition(Interface):
@@ -23,12 +24,16 @@ class IWorkflowTransitionCondition(Interface):
         title=_(u"Workflow transition"),
         description=_(u"The workflow transitions to check for."),
         required=True,
-        value_type=schema.Choice(vocabulary="plone.app.vocabularies.WorkflowTransitions"))
+        value_type=schema.Choice(
+            vocabulary="plone.app.vocabularies.WorkflowTransitions"
+        )
+    )
 
 
 @implementer(IWorkflowTransitionCondition, IRuleElementData)
 class WorkflowTransitionCondition(SimpleItem):
-    """The actual persistent implementation of the workflow transition condition element.
+    """The actual persistent implementation of the workflow transition
+    condition element.
     """
 
     wf_transitions = []
@@ -41,10 +46,10 @@ def summary(self):
 
 
 @implementer(IExecutable)
+@adapter(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)
 class WorkflowTransitionConditionExecutor(object):
     """The executor for this condition.
     """
-    adapts(Interface, IWorkflowTransitionCondition, IActionSucceededEvent)
 
     def __init__(self, context, element, event):
         self.context = context
diff --git a/plone/app/contentrules/exportimport/__init__.py b/plone/app/contentrules/exportimport/__init__.py
index ec51c5a..40a96af 100644
--- a/plone/app/contentrules/exportimport/__init__.py
+++ b/plone/app/contentrules/exportimport/__init__.py
@@ -1,2 +1 @@
 # -*- coding: utf-8 -*-
-#
diff --git a/plone/app/contentrules/exportimport/rules.py b/plone/app/contentrules/exportimport/rules.py
index 4454335..5fd61d8 100644
--- a/plone/app/contentrules/exportimport/rules.py
+++ b/plone/app/contentrules/exportimport/rules.py
@@ -1,35 +1,32 @@
 # -*- coding: utf-8 -*-
 from Acquisition import aq_base
+from plone.app.contentrules import api
+from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler  # noqa
+from plone.app.contentrules.rule import get_assignments
+from plone.app.contentrules.rule import Rule
+from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IRuleAction
+from plone.contentrules.rule.interfaces import IRuleCondition
+from plone.contentrules.rule.interfaces import IRuleElement
+from plone.contentrules.rule.interfaces import IRuleElementData
+from Products.CMFCore.interfaces import ISiteRoot
+from Products.GenericSetup.interfaces import IBody
+from Products.GenericSetup.interfaces import ISetupEnviron
+from Products.GenericSetup.utils import _getDottedName
+from Products.GenericSetup.utils import _resolveDottedName
+from Products.GenericSetup.utils import XMLAdapterBase
 from zope.component import adapts
 from zope.component import getUtility
 from zope.component import queryMultiAdapter
 from zope.component import queryUtility
 from zope.container.interfaces import INameChooser
-from zope.interface import Interface
 from zope.interface import implementer
-from zope.schema.interfaces import IField
+from zope.interface import Interface
 from zope.schema.interfaces import ICollection
+from zope.schema.interfaces import IField
 from zope.schema.interfaces import IFromUnicode
 
-from Products.CMFCore.interfaces import ISiteRoot
-from Products.GenericSetup.interfaces import IBody
-from Products.GenericSetup.interfaces import ISetupEnviron
-from Products.GenericSetup.utils import XMLAdapterBase
-from Products.GenericSetup.utils import _getDottedName
-from Products.GenericSetup.utils import _resolveDottedName
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.interfaces import IRuleAssignmentManager
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IRuleElement
-from plone.contentrules.rule.interfaces import IRuleElementData
-
-from plone.app.contentrules.exportimport.interfaces import IRuleElementExportImportHandler
-from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.rule import get_assignments
-from plone.app.contentrules import api
-
 
 def as_bool(string, default=False):
     if string is None or not str(string):
@@ -138,7 +135,10 @@ def from_unicode(self, field, value):
         # XXX: Bool incorrectly omits to declare that it implements
         # IFromUnicode, even though it does.
         import zope.schema
-        if IFromUnicode.providedBy(field) or isinstance(field, zope.schema.Bool):
+        if (
+            IFromUnicode.providedBy(field) or
+            isinstance(field, zope.schema.Bool)
+        ):
             return field.fromUnicode(value)
         else:
             return self.field_typecast(field, value)
@@ -221,7 +221,8 @@ def _initRules(self, node):
 
                     storage[name] = rule
                 else:
-                    # Clear out conditions and actions since we're expecting new ones
+                    # Clear out conditions and actions since we're expecting
+                    # new ones
                     del rule.conditions[:]
                     del rule.actions[:]
 
@@ -247,7 +248,8 @@ def _initRules(self, node):
                                 continue
 
                             type_ = condition_node.getAttribute('type')
-                            element_type = getUtility(IRuleCondition, name=type_)
+                            element_type = getUtility(
+                                IRuleCondition, name=type_)
                             if element_type.factory is None:
                                 continue
 
@@ -256,7 +258,8 @@ def _initRules(self, node):
                             # Aq-wrap in case of complex setters
                             condition = condition.__of__(rule)
 
-                            handler = IRuleElementExportImportHandler(condition)
+                            handler = IRuleElementExportImportHandler(
+                                condition)
                             handler.import_element(condition_node)
 
                             rule.conditions.append(aq_base(condition))
@@ -295,7 +298,8 @@ def _initRules(self, node):
                 api.assign_rule(container, name,
                                 enabled=as_bool(child.getAttribute('enabled')),
                                 bubbles=as_bool(child.getAttribute('bubbles')),
-                                insert_before=child.getAttribute('insert-before'),
+                                insert_before=child.getAttribute(
+                                    'insert-before'),
                                 )
 
     def _extractRules(self):
@@ -375,8 +379,10 @@ def _extractRules(self):
                 assignment_node = self._doc.createElement('assignment')
                 assignment_node.setAttribute('location', location)
                 assignment_node.setAttribute('name', name)
-                assignment_node.setAttribute('enabled', str(assignment.enabled))
-                assignment_node.setAttribute('bubbles', str(assignment.bubbles))
+                assignment_node.setAttribute(
+                    'enabled', str(assignment.enabled))
+                assignment_node.setAttribute(
+                    'bubbles', str(assignment.bubbles))
                 fragment.appendChild(assignment_node)
 
         return fragment
diff --git a/plone/app/contentrules/handlers.py b/plone/app/contentrules/handlers.py
index 78edd22..2254da2 100644
--- a/plone/app/contentrules/handlers.py
+++ b/plone/app/contentrules/handlers.py
@@ -1,22 +1,24 @@
 # -*- coding: utf-8 -*-
-import threading
-
-from zope.component import queryUtility
-from zope.container.interfaces import IObjectAddedEvent, IObjectRemovedEvent, \
-    IContainerModifiedEvent
-from zope.lifecycleevent.interfaces import IObjectCopiedEvent
-from zope.interface import Interface
-from zope.component.hooks import getSite
-
+from Acquisition import aq_inner
+from Acquisition import aq_parent
 from plone.app.discussion.interfaces import IComment
 from plone.contentrules.engine.interfaces import IRuleExecutor
 from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.engine.interfaces import StopRule
-
-from Acquisition import aq_inner, aq_parent
 from plone.uuid.interfaces import IUUID
-from Products.CMFCore.interfaces import ISiteRoot, IContentish
+from Products.CMFCore.interfaces import IContentish
+from Products.CMFCore.interfaces import ISiteRoot
 from Products.CMFCore.utils import getToolByName
+from zope.component import queryUtility
+from zope.component.hooks import getSite
+from zope.container.interfaces import IContainerModifiedEvent
+from zope.container.interfaces import IObjectAddedEvent
+from zope.container.interfaces import IObjectRemovedEvent
+from zope.interface import Interface
+from zope.lifecycleevent.interfaces import IObjectCopiedEvent
+
+import threading
+
 
 try:
     from Products.Archetypes.interfaces import IBaseObject
@@ -26,7 +28,6 @@
     class IBaseObject(Interface):
         pass
 
-
     class IObjectInitializedEvent(Interface):
         pass
     HAS_ARCHETYPES = False
@@ -70,6 +71,7 @@ def __call__(self, context, rule, event):
             self.executed.add((uid, rule.__name__, ))
             return True
 
+
 # A thread local for keeping track of rule execution across events
 _status = threading.local()
 
@@ -143,6 +145,7 @@ def execute(context, event):
 
 # Event handlers
 
+
 def is_portal_factory(context):
     """Find out if the given object is in portal_factory
     """
@@ -177,7 +180,8 @@ def added(event):
     # IObjectInitializedEvent
     if IBaseObject.providedBy(obj):
         init()
-        _status.delayed_events['IObjectInitializedEvent-%s' % _get_uid(obj)] = event
+        _status.delayed_events[
+            'IObjectInitializedEvent-%s' % _get_uid(obj)] = event
     elif IContentish.providedBy(obj) or IComment.providedBy(obj):
         execute(event.newParent, event)
     else:
@@ -198,9 +202,10 @@ def archetypes_initialized(event):
 
         init()
         delayed_event = _status.delayed_events.get(
-                               'IObjectInitializedEvent-%s' % _get_uid(obj), None)
+            'IObjectInitializedEvent-%s' % _get_uid(obj), None)
         if delayed_event is not None:
-            _status.delayed_events['IObjectInitializedEvent-%s' % _get_uid(obj)] = None
+            _status.delayed_events[
+                'IObjectInitializedEvent-%s' % _get_uid(obj)] = None
             execute(delayed_event.newParent, delayed_event)
 
 
@@ -228,7 +233,7 @@ def modified(event):
 
     # Let the special handler take care of IObjectInitializedEvent
     for event_if in (IObjectInitializedEvent, IObjectAddedEvent,
-        IObjectRemovedEvent, IContainerModifiedEvent, IObjectCopiedEvent):
+                     IObjectRemovedEvent, IContainerModifiedEvent, IObjectCopiedEvent):
         if event_if.providedBy(event):
             return
 
diff --git a/plone/app/contentrules/namechooser.py b/plone/app/contentrules/namechooser.py
index fc2a47d..c415d3b 100644
--- a/plone/app/contentrules/namechooser.py
+++ b/plone/app/contentrules/namechooser.py
@@ -3,6 +3,7 @@
 from zope.container.interfaces import INameChooser
 from zope.interface import implementer
 
+
 ATTEMPTS = 100
 
 
diff --git a/plone/app/contentrules/rule.py b/plone/app/contentrules/rule.py
index 57ca78b..2df5724 100644
--- a/plone/app/contentrules/rule.py
+++ b/plone/app/contentrules/rule.py
@@ -1,17 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.component import queryUtility, getUtility
-from zope.annotation.interfaces import IAnnotations
-
 from Acquisition import aq_base
-
-from plone.contentrules.engine.interfaces import IRuleStorage
+from BTrees.OOBTree import OOSet
+from OFS.SimpleItem import SimpleItem
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
-
+from plone.contentrules.engine.interfaces import IRuleStorage
 from plone.contentrules.rule.rule import Rule as BaseRule
-
-from OFS.SimpleItem import SimpleItem
-from BTrees.OOBTree import OOSet
 from Products.CMFCore.interfaces import ISiteRoot
+from zope.annotation.interfaces import IAnnotations
+from zope.component import getUtility
+from zope.component import queryUtility
+
 
 ANNOTATION_KEY = "plone.app.contentrules.ruleassignments"
 
diff --git a/plone/app/contentrules/tests/base.py b/plone/app/contentrules/tests/base.py
index 723b7ca..771890b 100644
--- a/plone/app/contentrules/tests/base.py
+++ b/plone/app/contentrules/tests/base.py
@@ -15,7 +15,8 @@ class ContentRulesTestCase(PloneTestCase):
     def addAuthToRequest(self):
         portal = self.layer['portal']
         request = self.layer['request']
-        authenticator = getMultiAdapter((portal, request), name=u"authenticator")
+        authenticator = getMultiAdapter(
+            (portal, request), name=u"authenticator")
         auth = authenticator.authenticator().split('value="')[1].rstrip('"/>')
         request.form['_authenticator'] = auth
 
diff --git a/plone/app/contentrules/tests/dummy.py b/plone/app/contentrules/tests/dummy.py
index b7fc7a8..96eb3b9 100644
--- a/plone/app/contentrules/tests/dummy.py
+++ b/plone/app/contentrules/tests/dummy.py
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
 from OFS.SimpleItem import SimpleItem
-from zope.interface import implementer
 from plone.contentrules.rule.interfaces import IRuleElementData
-from zope.component.interfaces import IObjectEvent
 from plone.uuid.interfaces import IAttributeUUID
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IRuleElementData)
diff --git a/plone/app/contentrules/tests/test_action_copy.py b/plone/app/contentrules/tests/test_action_copy.py
index b2b3a41..c19dde5 100644
--- a/plone/app/contentrules/tests/test_action_copy.py
+++ b/plone/app/contentrules/tests/test_action_copy.py
@@ -1,20 +1,16 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.copy import CopyAction
 from plone.app.contentrules.actions.copy import CopyEditFormView
-
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
 from plone.app.testing import TEST_USER_ID
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -46,10 +42,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        action = addview.form_instance.create(data={'target_folder': '/target', })
+        action = addview.form_instance.create(
+            data={'target_folder': '/target', })
         addview.form_instance.add(action)
 
         e = rule.actions[0]
@@ -59,14 +57,16 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Copy')
         e = CopyAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, CopyEditFormView))
 
     def testExecute(self):
         e = CopyAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -76,7 +76,8 @@ def testExecuteWithError(self):
         e = CopyAction()
         e.target_folder = '/dummy'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -88,7 +89,8 @@ def testExecuteWithoutPermissionsOnTarget(self):
         e = CopyAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -102,7 +104,8 @@ def testExecuteWithNamingConflict(self):
         e = CopyAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -120,7 +123,8 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):
         e = CopyAction()
         e.target_folder = '/Members/%s/target' % TEST_USER_ID
 
-        ex = getMultiAdapter((self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
diff --git a/plone/app/contentrules/tests/test_action_delete.py b/plone/app/contentrules/tests/test_action_delete.py
index 8ea54cb..f778644 100644
--- a/plone/app/contentrules/tests/test_action_delete.py
+++ b/plone/app/contentrules/tests/test_action_delete.py
@@ -1,18 +1,14 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.delete import DeleteAction
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -41,8 +37,10 @@ def testInvokeAddView(self):
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule.__of__(self.portal), self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding.__of__(rule), self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule.__of__(self.portal), self.portal.REQUEST), name='+action')
+        addview = getMultiAdapter(
+            (adding.__of__(rule), self.portal.REQUEST), name=element.addview)
         addview()
 
         e = rule.actions[0]
@@ -51,7 +49,8 @@ def testInvokeAddView(self):
     def testExecute(self):
         e = DeleteAction()
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
diff --git a/plone/app/contentrules/tests/test_action_logger.py b/plone/app/contentrules/tests/test_action_logger.py
index 8afb75d..a2ae186 100644
--- a/plone/app/contentrules/tests/test_action_logger.py
+++ b/plone/app/contentrules/tests/test_action_logger.py
@@ -1,20 +1,18 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer, Interface
-from zope.component import getUtility, getMultiAdapter
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.logger import LoggerAction
 from plone.app.contentrules.actions.logger import LoggerEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 from plone.app.testing import TEST_USER_ID
 from plone.app.testing import TEST_USER_NAME
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 @implementer(Interface)
@@ -48,10 +46,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
+        content = addview.form_instance.create(
+            data={'targetLogger': 'foo', 'loggingLevel': 10, 'message': 'bar'})
         addview.form_instance.add(content)
 
         e = rule.actions[0]
@@ -63,7 +63,8 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Logger')
         e = LoggerAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, LoggerEditFormView))
 
     def testProcessedMessage(self):
@@ -71,7 +72,8 @@ def testProcessedMessage(self):
         e.targetLogger = 'testing'
         e.loggingLevel = 0
         e.message = "Test log event"
-        ex = getMultiAdapter((self.folder, e, DummyObjectEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyObjectEvent(self.folder)), IExecutable)
         self.assertEqual("Test log event", ex.processedMessage())
 
         e.message = "Test log event : &c"
@@ -84,7 +86,8 @@ def testProcessedMessage(self):
             ex.processedMessage())
 
         e.message = "Test log event : &u"
-        self.assertEqual("Test log event : %s" % TEST_USER_NAME, ex.processedMessage())
+        self.assertEqual("Test log event : %s" %
+                         TEST_USER_NAME, ex.processedMessage())
 
     def testExecute(self):
         e = LoggerAction()
diff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py
index d652129..3177f46 100644
--- a/plone/app/contentrules/tests/test_action_mail.py
+++ b/plone/app/contentrules/tests/test_action_mail.py
@@ -1,21 +1,24 @@
 # -*- coding: utf-8 -*-
+from Acquisition import aq_base
 from email import message_from_string
-from zope.component import getUtility, getMultiAdapter, getSiteManager
-from zope.component.interfaces import IObjectEvent
-from zope.interface import implementer
-
+from plone.app.contentrules.actions.mail import MailAction
+from plone.app.contentrules.actions.mail import MailAddFormView
+from plone.app.contentrules.actions.mail import MailEditFormView
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.contentrules.actions.mail import MailAction, MailEditFormView, MailAddFormView
 from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction, IExecutable
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
 from plone.registry.interfaces import IRegistry
-
-from Acquisition import aq_base
 from Products.CMFPlone.interfaces.controlpanel import IMailSchema
 from Products.CMFPlone.tests.utils import MockMailHost
 from Products.MailHost.interfaces import IMailHost
 from Products.MailHost.MailHost import MailHost
+from zope.component import getMultiAdapter
+from zope.component import getSiteManager
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 import unittest
 
@@ -110,7 +113,8 @@ def testExecute(self):
         e = MailAction()
         e.source = "$user_email"
         e.recipients = "bar@foo.be, bar@foo.be, $reviewer_emails, $manager_emails, $member_emails"   # noqa
-        e.message = "P\xc3\xa4ge '${title}' created in ${url} !".decode('utf-8')
+        e.message = "P\xc3\xa4ge '${title}' created in ${url} !".decode(
+            'utf-8')
         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),
                              IExecutable)
         ex()
@@ -182,13 +186,15 @@ def testExecuteMultiRecipients(self):
                          mailSent.get('Content-Type'))
         self.assertEqual('bar@foo.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
-        self.assertEqual('Document created !', mailSent.get_payload(decode=True))
+        self.assertEqual('Document created !',
+                         mailSent.get_payload(decode=True))
         mailSent = message_from_string(dummyMailHost.messages[1])
         self.assertEqual('text/plain; charset="utf-8"',
                          mailSent.get('Content-Type'))
         self.assertEqual('foo@bar.be', mailSent.get('To'))
         self.assertEqual('foo@bar.be', mailSent.get('From'))
-        self.assertEqual('Document created !', mailSent.get_payload(decode=True))
+        self.assertEqual('Document created !',
+                         mailSent.get_payload(decode=True))
         self._teardown_mockmail()
 
     def testExecuteExcludeActor(self):
diff --git a/plone/app/contentrules/tests/test_action_modify.py b/plone/app/contentrules/tests/test_action_modify.py
index 1e6b8e6..0deb751 100644
--- a/plone/app/contentrules/tests/test_action_modify.py
+++ b/plone/app/contentrules/tests/test_action_modify.py
@@ -1,8 +1,8 @@
 # -*- coding: utf-8 -*-
-from unittest import TestCase
-from zope.lifecycleevent import ObjectAddedEvent, ObjectRemovedEvent
-
 from plone.app.contentrules import handlers
+from unittest import TestCase
+from zope.lifecycleevent import ObjectAddedEvent
+from zope.lifecycleevent import ObjectRemovedEvent
 
 
 class TestModifyAction(TestCase):
diff --git a/plone/app/contentrules/tests/test_action_move.py b/plone/app/contentrules/tests/test_action_move.py
index b7570a8..29ace96 100644
--- a/plone/app/contentrules/tests/test_action_move.py
+++ b/plone/app/contentrules/tests/test_action_move.py
@@ -1,21 +1,16 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.move import MoveAction
 from plone.app.contentrules.actions.move import MoveEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
-from zope.component.interfaces import IObjectEvent
-
 from plone.app.testing import TEST_USER_ID as default_user
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -47,10 +42,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'target_folder': '/target', })
+        content = addview.form_instance.create(
+            data={'target_folder': '/target', })
         addview.form_instance.add(content)
 
         e = rule.actions[0]
@@ -60,14 +57,16 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Move')
         e = MoveAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, MoveEditFormView))
 
     def testExecute(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
@@ -82,7 +81,8 @@ def testExecuteWithError(self):
         e = MoveAction()
         e.target_folder = '/dummy'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
         self.assertTrue('d1' in self.folder.objectIds())
@@ -94,7 +94,8 @@ def testExecuteWithoutPermissionsOnTarget(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
@@ -108,7 +109,8 @@ def testExecuteWithNamingConflict(self):
         e = MoveAction()
         e.target_folder = '/target'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
@@ -140,7 +142,8 @@ def testExecuteWithNamingConflictDoesNotStupidlyAcquireHasKey(self):
         e = MoveAction()
         e.target_folder = '/Members/%s/target' % default_user
 
-        ex = getMultiAdapter((self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder.target, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertFalse('d1' in self.folder.objectIds())
diff --git a/plone/app/contentrules/tests/test_action_notify.py b/plone/app/contentrules/tests/test_action_notify.py
index cc0251e..47706ad 100644
--- a/plone/app/contentrules/tests/test_action_notify.py
+++ b/plone/app/contentrules/tests/test_action_notify.py
@@ -1,20 +1,17 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer, Interface
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.notify import NotifyAction
 from plone.app.contentrules.actions.notify import NotifyEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
 from Products.statusmessages import STATUSMESSAGEKEY
 from Products.statusmessages.adapter import _decodeCookieValue
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.interface import implementer
+from zope.interface import Interface
 
 
 @implementer(Interface)
diff --git a/plone/app/contentrules/tests/test_action_workflow.py b/plone/app/contentrules/tests/test_action_workflow.py
index 5d65152..2317fc5 100644
--- a/plone/app/contentrules/tests/test_action_workflow.py
+++ b/plone/app/contentrules/tests/test_action_workflow.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleAction
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.actions.workflow import WorkflowAction
 from plone.app.contentrules.actions.workflow import WorkflowEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleAction
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -43,10 +39,12 @@ def testInvokeAddView(self):
         rule = self.portal.restrictedTraverse('++rule++foo')
 
         adding = getMultiAdapter((rule, self.portal.REQUEST), name='+action')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'transition': 'publish', })
+        content = addview.form_instance.create(
+            data={'transition': 'publish', })
         addview.form_instance.add(content)
 
         e = rule.actions[0]
@@ -56,27 +54,31 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleAction, name='plone.actions.Workflow')
         e = WorkflowAction()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, WorkflowEditFormView))
 
     def testExecute(self):
         e = WorkflowAction()
         e.transition = 'publish'
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(True, ex())
 
         self.assertEqual('published', self.portal.portal_workflow.getInfoFor(self.folder.d1,
-                         'review_state'))
+                                                                             'review_state'))
 
     def testExecuteWithError(self):
         e = WorkflowAction()
         e.transition = 'foobar'
 
-        old_state = self.portal.portal_workflow.getInfoFor(self.folder.d1, 'review_state')
+        old_state = self.portal.portal_workflow.getInfoFor(
+            self.folder.d1, 'review_state')
 
-        ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
+        ex = getMultiAdapter(
+            (self.folder, e, DummyEvent(self.folder.d1)), IExecutable)
         self.assertEqual(False, ex())
 
         self.assertEqual(old_state, self.portal.portal_workflow.getInfoFor(self.folder.d1,
-                         'review_state'))
+                                                                           'review_state'))
diff --git a/plone/app/contentrules/tests/test_browser.py b/plone/app/contentrules/tests/test_browser.py
index a507d4c..031592a 100644
--- a/plone/app/contentrules/tests/test_browser.py
+++ b/plone/app/contentrules/tests/test_browser.py
@@ -1,10 +1,11 @@
 # -*- coding: utf-8 -*-
-import unittest
-import doctest
-
 from plone.app.testing.bbb import PTC_FUNCTIONAL_TESTING
 from plone.testing import layered
 
+import doctest
+import unittest
+
+
 optionflags = (doctest.NORMALIZE_WHITESPACE |
                doctest.ELLIPSIS |
                doctest.REPORT_NDIFF)
diff --git a/plone/app/contentrules/tests/test_cascading_rule.py b/plone/app/contentrules/tests/test_cascading_rule.py
index e48da57..e6fa8f6 100644
--- a/plone/app/contentrules/tests/test_cascading_rule.py
+++ b/plone/app/contentrules/tests/test_cascading_rule.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from zope.component import getUtility
-
+from plone.app.contentrules.api import edit_rule_assignment
 from plone.app.contentrules.tests.base import ContentRulesTestCase
 from plone.app.contentrules.tests.test_configuration import TestContentrulesGSLayer
-from plone.app.contentrules.api import edit_rule_assignment
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getUtility
 
 
 class TestCascadingRule(ContentRulesTestCase):
@@ -22,7 +21,8 @@ def afterSetUp(self):
             self.portal.invokeFactory('Folder', 'events')
 
         portal_setup = self.portal.portal_setup
-        portal_setup.runAllImportStepsFromProfile('profile-plone.app.contentrules:testing')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.contentrules:testing')
         edit_rule_assignment(self.portal, 'test4', bubbles=1, enabled=1)
         edit_rule_assignment(self.portal, 'test5', bubbles=1, enabled=1)
 
diff --git a/plone/app/contentrules/tests/test_condition_group.py b/plone/app/contentrules/tests/test_condition_group.py
index 2a174cf..4d38142 100644
--- a/plone/app/contentrules/tests/test_condition_group.py
+++ b/plone/app/contentrules/tests/test_condition_group.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.group import GroupCondition
 from plone.app.contentrules.conditions.group import GroupEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -41,11 +37,14 @@ def testInvokeAddView(self):
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'group_names': ['Manager']})
+        content = addview.form_instance.create(
+            data={'group_names': ['Manager']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -55,18 +54,22 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Group')
         e = GroupCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, GroupEditFormView))
 
     def testExecute(self):
         e = GroupCondition()
         e.group_names = ['Administrators', 'Reviewers']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertFalse(ex())
 
         group = self.portal.portal_groups.getGroupById('Administrators')
-        group.addMember(self.portal.portal_membership.getAuthenticatedMember().getId())
+        group.addMember(
+            self.portal.portal_membership.getAuthenticatedMember().getId())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertTrue(ex())
diff --git a/plone/app/contentrules/tests/test_condition_portal_type.py b/plone/app/contentrules/tests/test_condition_portal_type.py
index e41b61d..03f34b4 100644
--- a/plone/app/contentrules/tests/test_condition_portal_type.py
+++ b/plone/app/contentrules/tests/test_condition_portal_type.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.portaltype import PortalTypeCondition
 from plone.app.contentrules.conditions.portaltype import PortalTypeEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -29,23 +25,28 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.PortalType')
         self.assertEqual('plone.conditions.PortalType', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
         self.assertEqual(IObjectEvent, element.event)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.PortalType')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'check_types': ['Folder', 'Image']})
+        content = addview.form_instance.create(
+            data={'check_types': ['Folder', 'Image']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -53,21 +54,26 @@ def testInvokeAddView(self):
         self.assertEqual(['Folder', 'Image'], e.check_types)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.PortalType')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.PortalType')
         e = PortalTypeCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, PortalTypeEditFormView))
 
     def testExecute(self):
         e = PortalTypeCondition()
         e.check_types = ['Folder', 'Image']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertTrue(ex())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertFalse(ex())
 
         self.folder.portal_types = None
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertFalse(ex())
diff --git a/plone/app/contentrules/tests/test_condition_role.py b/plone/app/contentrules/tests/test_condition_role.py
index 4889fe9..6ad3cdb 100644
--- a/plone/app/contentrules/tests/test_condition_role.py
+++ b/plone/app/contentrules/tests/test_condition_role.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.role import RoleCondition
 from plone.app.contentrules.conditions.role import RoleEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -41,11 +37,14 @@ def testInvokeAddView(self):
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'role_names': ['Manager', 'Member']})
+        content = addview.form_instance.create(
+            data={'role_names': ['Manager', 'Member']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -55,17 +54,20 @@ def testInvokeAddView(self):
     def testInvokeEditView(self):
         element = getUtility(IRuleCondition, name='plone.conditions.Role')
         e = RoleCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, RoleEditFormView))
 
     def testExecute(self):
         e = RoleCondition()
         e.role_names = ['Manager', 'Member']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertTrue(ex())
 
         e.role_names = ['Reviewer']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertFalse(ex())
diff --git a/plone/app/contentrules/tests/test_condition_tales_expression.py b/plone/app/contentrules/tests/test_condition_tales_expression.py
index 2270115..f864f33 100644
--- a/plone/app/contentrules/tests/test_condition_tales_expression.py
+++ b/plone/app/contentrules/tests/test_condition_tales_expression.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.talesexpression import TalesExpressionCondition
 from plone.app.contentrules.conditions.talesexpression import TalesExpressionEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -29,19 +25,23 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.TalesExpression')
         self.assertEqual('plone.conditions.TalesExpression', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.TalesExpression')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
         content = addview.form_instance.create(
@@ -50,30 +50,37 @@ def testInvokeAddView(self):
 
         e = rule.conditions[0]
         self.assertTrue(isinstance(e, TalesExpressionCondition))
-        self.assertEqual('python:"plone" in object.Subject()', e.tales_expression)
+        self.assertEqual('python:"plone" in object.Subject()',
+                         e.tales_expression)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.TalesExpression')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.TalesExpression')
         e = TalesExpressionCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, TalesExpressionEditFormView))
 
     def testExecute(self):
         e = TalesExpressionCondition()
         e.tales_expression = 'python:"plone" in object.Subject()'
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertEqual(False, ex())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertEqual(False, ex())
 
         self.folder.setSubject(('plone', 'contentrules'))
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertEqual(True, ex())
 
     def testExecuteUnicodeString(self):
         e = TalesExpressionCondition()
         e.tales_expression = u'string:${portal_url}'
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertEqual(True, ex())
diff --git a/plone/app/contentrules/tests/test_condition_wfstate.py b/plone/app/contentrules/tests/test_condition_wfstate.py
index d9ddf82..34ee2af 100644
--- a/plone/app/contentrules/tests/test_condition_wfstate.py
+++ b/plone/app/contentrules/tests/test_condition_wfstate.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.interface import implementer
-from zope.component import getUtility, getMultiAdapter
-
-from zope.component.interfaces import IObjectEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.wfstate import WorkflowStateCondition
 from plone.app.contentrules.conditions.wfstate import WorkflowStateEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.component.interfaces import IObjectEvent
+from zope.interface import implementer
 
 
 @implementer(IObjectEvent)
@@ -29,23 +25,28 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowState')
         self.assertEqual('plone.conditions.WorkflowState', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
         self.assertEqual(IObjectEvent, element.event)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowState')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'wf_states': ['visible', 'published']})
+        content = addview.form_instance.create(
+            data={'wf_states': ['visible', 'published']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -53,22 +54,27 @@ def testInvokeAddView(self):
         self.assertEqual(['visible', 'published'], e.wf_states)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowState')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowState')
         e = WorkflowStateCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, WorkflowStateEditFormView))
 
     def testExecute(self):
         e = WorkflowStateCondition()
         e.wf_states = ['visible', 'private']
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertTrue(ex())
 
         self.portal.portal_workflow.doActionFor(self.folder, 'publish')
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.folder)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.folder)), IExecutable)
         self.assertFalse(ex())
 
-        ex = getMultiAdapter((self.portal, e, DummyEvent(self.portal)), IExecutable)
+        ex = getMultiAdapter(
+            (self.portal, e, DummyEvent(self.portal)), IExecutable)
         self.assertFalse(ex())
diff --git a/plone/app/contentrules/tests/test_condition_wftransition.py b/plone/app/contentrules/tests/test_condition_wftransition.py
index 9e07249..bca56c4 100644
--- a/plone/app/contentrules/tests/test_condition_wftransition.py
+++ b/plone/app/contentrules/tests/test_condition_wftransition.py
@@ -1,19 +1,15 @@
 # -*- coding: utf-8 -*-
-from zope.component import getUtility, getMultiAdapter
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.rule.interfaces import IRuleCondition
-from plone.contentrules.rule.interfaces import IExecutable
-
 from plone.app.contentrules.conditions.wftransition import WorkflowTransitionCondition
 from plone.app.contentrules.conditions.wftransition import WorkflowTransitionEditFormView
-
 from plone.app.contentrules.rule import Rule
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
+from plone.contentrules.engine.interfaces import IRuleStorage
+from plone.contentrules.rule.interfaces import IExecutable
+from plone.contentrules.rule.interfaces import IRuleCondition
 from Products.CMFCore.interfaces import IActionSucceededEvent
 from Products.CMFCore.WorkflowCore import ActionSucceededEvent
+from zope.component import getMultiAdapter
+from zope.component import getUtility
 
 
 class TestWorkflowTransitionCondition(ContentRulesTestCase):
@@ -22,23 +18,29 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRegistered(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
-        self.assertEqual('plone.conditions.WorkflowTransition', element.addview)
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowTransition')
+        self.assertEqual(
+            'plone.conditions.WorkflowTransition', element.addview)
         self.assertEqual('edit', element.editview)
         self.assertEqual(None, element.for_)
         self.assertEqual(IActionSucceededEvent, element.event)
 
     def testInvokeAddView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowTransition')
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
 
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name=element.addview)
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name=element.addview)
 
         addview.form_instance.update()
-        content = addview.form_instance.create(data={'wf_transitions': ['publish', 'hide']})
+        content = addview.form_instance.create(
+            data={'wf_transitions': ['publish', 'hide']})
         addview.form_instance.add(content)
 
         e = rule.conditions[0]
@@ -46,9 +48,11 @@ def testInvokeAddView(self):
         self.assertEqual(['publish', 'hide'], e.wf_transitions)
 
     def testInvokeEditView(self):
-        element = getUtility(IRuleCondition, name='plone.conditions.WorkflowTransition')
+        element = getUtility(
+            IRuleCondition, name='plone.conditions.WorkflowTransition')
         e = WorkflowTransitionCondition()
-        editview = getMultiAdapter((e, self.folder.REQUEST), name=element.editview)
+        editview = getMultiAdapter(
+            (e, self.folder.REQUEST), name=element.editview)
         self.assertTrue(isinstance(editview, WorkflowTransitionEditFormView))
 
     def testExecute(self):
diff --git a/plone/app/contentrules/tests/test_configuration.py b/plone/app/contentrules/tests/test_configuration.py
index f146cff..a2afe4e 100644
--- a/plone/app/contentrules/tests/test_configuration.py
+++ b/plone/app/contentrules/tests/test_configuration.py
@@ -1,29 +1,28 @@
 # -*- coding: utf-8 -*-
 
-import time
-
+from plone.app.contentrules.tests.base import ContentRulesTestCase
+from plone.app.testing import FunctionalTesting
+from plone.app.testing.bbb import PloneTestCaseFixture
 from plone.contentrules.engine.interfaces import IRuleAssignmentManager
 from plone.contentrules.engine.interfaces import IRuleStorage
-from zope.component import getUtility
+from Products.GenericSetup.context import TarballExportContext
+from Products.GenericSetup.interfaces import IBody
 from zope.component import getMultiAdapter
+from zope.component import getUtility
 from zope.lifecycleevent.interfaces import IObjectModifiedEvent
 
-from Products.GenericSetup.interfaces import IBody
-from Products.GenericSetup.context import TarballExportContext
-
-from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.testing.bbb import PloneTestCaseFixture
-from plone.app.testing import FunctionalTesting
+import time
 
 
 class TestContentrulesGSFixture(PloneTestCaseFixture):
 
     def setUpZope(self, app, configurationContext):
         super(TestContentrulesGSFixture,
-                  self).setUpZope(app, configurationContext)
+              self).setUpZope(app, configurationContext)
         import plone.app.contentrules.tests
         self.loadZCML('testing.zcml', package=plone.app.contentrules.tests)
 
+
 ContentrulesGSFixture = TestContentrulesGSFixture()
 TestContentrulesGSLayer = FunctionalTesting(bases=(ContentrulesGSFixture, ),
                                             name='TestContentRules:Functional')
@@ -40,7 +39,8 @@ def afterSetUp(self):
             self.portal.invokeFactory('Folder', 'news')
 
         portal_setup = self.portal.portal_setup
-        portal_setup.runAllImportStepsFromProfile('profile-plone.app.contentrules:testing')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.contentrules:testing')
 
     def testRuleInstalled(self):
         self.assertTrue('test1' in self.storage)
@@ -55,8 +55,10 @@ def testRulesConfigured(self):
         self.assertEqual(False, rule1.stop)
 
         self.assertEqual(2, len(rule1.conditions))
-        self.assertEqual("plone.conditions.PortalType", rule1.conditions[0].element)
-        self.assertEqual(["Document", "News Item"], list(rule1.conditions[0].check_types))
+        self.assertEqual("plone.conditions.PortalType",
+                         rule1.conditions[0].element)
+        self.assertEqual(["Document", "News Item"],
+                         list(rule1.conditions[0].check_types))
         self.assertEqual("plone.conditions.Role", rule1.conditions[1].element)
         self.assertEqual(["Manager"], list(rule1.conditions[1].role_names))
 
@@ -73,7 +75,8 @@ def testRulesConfigured(self):
         self.assertEqual(True, rule2.stop)
 
         self.assertEqual(1, len(rule2.conditions))
-        self.assertEqual("plone.conditions.PortalType", rule2.conditions[0].element)
+        self.assertEqual("plone.conditions.PortalType",
+                         rule2.conditions[0].element)
         self.assertEqual(["Event"], list(rule2.conditions[0].check_types))
 
         self.assertEqual(1, len(rule2.actions))
@@ -102,7 +105,8 @@ def testImportTwice(self):
         # if the profile is re-imported; see bug #8027.
         portal_setup = self.portal.portal_setup
         time.sleep(1)  # avoid timestamp colission
-        portal_setup.runAllImportStepsFromProfile('profile-plone.app.contentrules:testing')
+        portal_setup.runAllImportStepsFromProfile(
+            'profile-plone.app.contentrules:testing')
 
         # We should get the same results as before
         self.testRuleInstalled()
@@ -112,7 +116,8 @@ def testImportTwice(self):
     def testExport(self):
         site = self.portal
         context = TarballExportContext(self.portal.portal_setup)
-        exporter = getMultiAdapter((site, context), IBody, name=u'plone.contentrules')
+        exporter = getMultiAdapter(
+            (site, context), IBody, name=u'plone.contentrules')
 
         expected = """<?xml version="1.0"?>
 <contentrules>
diff --git a/plone/app/contentrules/tests/test_handlers.py b/plone/app/contentrules/tests/test_handlers.py
index fd8f0cf..23ea5a4 100644
--- a/plone/app/contentrules/tests/test_handlers.py
+++ b/plone/app/contentrules/tests/test_handlers.py
@@ -1,10 +1,9 @@
 # -*- coding: utf-8 -*-
-from zope.event import notify
-from zope.lifecycleevent import ObjectCreatedEvent
-
+from plone.app.contentrules import handlers
 from plone.app.contentrules.tests import base
 from plone.app.contentrules.tests import dummy
-from plone.app.contentrules import handlers
+from zope.event import notify
+from zope.lifecycleevent import ObjectCreatedEvent
 
 
 class TestDuplicateRuleFilter(base.ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_rule_assignment_mapping.py b/plone/app/contentrules/tests/test_rule_assignment_mapping.py
index d311802..c052ad6 100644
--- a/plone/app/contentrules/tests/test_rule_assignment_mapping.py
+++ b/plone/app/contentrules/tests/test_rule_assignment_mapping.py
@@ -1,17 +1,15 @@
 # -*- coding: utf-8 -*-
-import transaction
-from zope.component import getUtility
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-from plone.contentrules.engine.interfaces import IRuleAssignmentManager
-
-from plone.contentrules.engine.assignments import RuleAssignment
-
+from plone.app.contentrules import api
+from plone.app.contentrules.rule import get_assignments
+from plone.app.contentrules.rule import insert_assignment
 from plone.app.contentrules.rule import Rule
-from plone.app.contentrules.rule import get_assignments, insert_assignment
-
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-from plone.app.contentrules import api
+from plone.contentrules.engine.assignments import RuleAssignment
+from plone.contentrules.engine.interfaces import IRuleAssignmentManager
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getUtility
+
+import transaction
 
 
 class TestRuleAssignmentMapping(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_rule_management_views.py b/plone/app/contentrules/tests/test_rule_management_views.py
index 2bef034..5977b67 100644
--- a/plone/app/contentrules/tests/test_rule_management_views.py
+++ b/plone/app/contentrules/tests/test_rule_management_views.py
@@ -1,15 +1,13 @@
 # -*- coding: utf-8 -*-
-from zope.component import getMultiAdapter, getUtility
-from zope.lifecycleevent.interfaces import IObjectModifiedEvent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-
-from plone.app.contentrules.rule import Rule
+from dummy import DummyAction
+from dummy import DummyCondition
 from plone.app.contentrules.browser.rule import RuleEditFormView
-
+from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
-from dummy import DummyCondition, DummyAction
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.lifecycleevent.interfaces import IObjectModifiedEvent
 
 
 class DummyModifiedRule(Rule):
@@ -26,7 +24,8 @@ def afterSetUp(self):
         self.setRoles(('Manager', ))
 
     def testRuleAdding(self):
-        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name='+rule')
+        adding = getMultiAdapter(
+            (self.portal, self.portal.REQUEST), name='+rule')
         storage = getUtility(IRuleStorage)
         self.assertEqual(0, len(storage))
         r = Rule()
@@ -35,8 +34,10 @@ def testRuleAdding(self):
         self.assertTrue(storage.values()[0] is r)
 
     def testRuleAddView(self):
-        adding = getMultiAdapter((self.portal, self.portal.REQUEST), name='+rule')
-        addview = getMultiAdapter((adding, self.portal.REQUEST), name='plone.ContentRule')
+        adding = getMultiAdapter(
+            (self.portal, self.portal.REQUEST), name='+rule')
+        addview = getMultiAdapter(
+            (adding, self.portal.REQUEST), name='plone.ContentRule')
         storage = getUtility(IRuleStorage)
         self.assertEqual(0, len(storage))
         addview.form_instance.update()
@@ -76,7 +77,8 @@ def testRuleConditionAdding(self):
         storage = getUtility(IRuleStorage)
         storage[u'foo'] = Rule()
         rule = self.portal.restrictedTraverse('++rule++foo')
-        adding = getMultiAdapter((rule, self.portal.REQUEST), name='+condition')
+        adding = getMultiAdapter(
+            (rule, self.portal.REQUEST), name='+condition')
         d = DummyCondition()
         self.assertEqual(0, len(rule.conditions))
         adding.add(d)
@@ -146,13 +148,16 @@ def testChangeGloballyEnable(self):
         portal = self.portal
         self.addAuthToRequest()
 
-        portal.restrictedTraverse('@@contentrule-globally-enable').globally_enable()
+        portal.restrictedTraverse(
+            '@@contentrule-globally-enable').globally_enable()
         self.assertTrue(storage.active)
 
-        portal.restrictedTraverse('@@contentrule-globally-disable').globally_disable()
+        portal.restrictedTraverse(
+            '@@contentrule-globally-disable').globally_disable()
         self.assertFalse(storage.active)
 
-        portal.restrictedTraverse('@@contentrule-globally-enable').globally_enable()
+        portal.restrictedTraverse(
+            '@@contentrule-globally-enable').globally_enable()
         self.assertTrue(storage.active)
 
         # without ajax
diff --git a/plone/app/contentrules/tests/test_setup.py b/plone/app/contentrules/tests/test_setup.py
index 74f9082..241f8cb 100644
--- a/plone/app/contentrules/tests/test_setup.py
+++ b/plone/app/contentrules/tests/test_setup.py
@@ -1,12 +1,10 @@
 # -*- coding: utf-8 -*-
-from zope.lifecycleevent.interfaces import IObjectModifiedEvent
-from zope.lifecycleevent.interfaces import IObjectAddedEvent
-from zope.lifecycleevent.interfaces import IObjectRemovedEvent
-
+from plone.app.contentrules.tests.base import ContentRulesTestCase
 from plone.contentrules.engine.interfaces import IRuleAssignable
 from plone.contentrules.rule.interfaces import IRuleEventType
-
-from plone.app.contentrules.tests.base import ContentRulesTestCase
+from zope.lifecycleevent.interfaces import IObjectAddedEvent
+from zope.lifecycleevent.interfaces import IObjectModifiedEvent
+from zope.lifecycleevent.interfaces import IObjectRemovedEvent
 
 
 class TestProductInstall(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/test_traversal.py b/plone/app/contentrules/tests/test_traversal.py
index 35e9e05..249e067 100644
--- a/plone/app/contentrules/tests/test_traversal.py
+++ b/plone/app/contentrules/tests/test_traversal.py
@@ -1,14 +1,12 @@
 # -*- coding: utf-8 -*-
-from zope.component import getUtility
-
-from Acquisition import aq_base, aq_parent
-
-from plone.contentrules.engine.interfaces import IRuleStorage
-
+from Acquisition import aq_base
+from Acquisition import aq_parent
+from dummy import DummyAction
+from dummy import DummyCondition
 from plone.app.contentrules.rule import Rule
 from plone.app.contentrules.tests.base import ContentRulesTestCase
-
-from dummy import DummyCondition, DummyAction
+from plone.contentrules.engine.interfaces import IRuleStorage
+from zope.component import getUtility
 
 
 class TestTraversal(ContentRulesTestCase):
diff --git a/plone/app/contentrules/tests/utils.py b/plone/app/contentrules/tests/utils.py
index 2fc56bf..2917409 100644
--- a/plone/app/contentrules/tests/utils.py
+++ b/plone/app/contentrules/tests/utils.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 import doctest
 
+
 # Standard options for DocTests
 optionflags = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE |


