Repository: plone.tiles


Branch: refs/heads/master
Date: 2016-04-23T17:08:39+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.tiles/commit/9aa8dd824f6d77e39191af6a13286d001ff5f7e5

Fix missing view permissions info on tiletype registration

Files changed:
A CHANGES.rst
M README.rst
M plone/tiles/directives.rst
M plone/tiles/esi.rst
M plone/tiles/meta.py
M plone/tiles/tests.py
M plone/tiles/tiles.rst
M plone/tiles/type.py
M setup.py
D CHANGELOG.rst

diff --git a/CHANGELOG.rst b/CHANGELOG.rst
deleted file mode 100644
index 721626d..0000000
--- a/CHANGELOG.rst
+++ /dev/null
@@ -1,112 +0,0 @@
-Changelog
-=========
-
-1.5.3 (unreleased)
-------------------
-
-- Nothing changed yet.
-
-
-1.5.2 (2016-03-28)
-------------------
-
-- Fix issue where ESI href was not properly replaced.
-  [jensens]
-
-- Add section "ZCML Reference" to README.rst.
-  [jensens]
-
-- PEP8, code-analysis, documentation and packaging fixes.
-  [jensens, mauritsvanrees]
-
-1.5.1 (2015-10-09)
-------------------
-
-- Fix decoding List type of Choice value types
-  [vangheem]
-
-
-1.5.0 (2015-09-04)
-------------------
-
-- Add support for overriding transient data manager with persistent data
-  manager by adding X-Tile-Persistent=1 into tile URL
-  [datakurre]
-
-- Fix persistent data manager to read its default from query string
-  [vangheem]
-
-1.4.0 (2015-05-25)
-------------------
-
-- Add support for encoding dictionary fields into tile URL
-  [datakurre]
-- Fix issue where saving or deleting transient tile data mutated the current request
-  [datakurre]
-- Fix issue where non-ascii characters in tile data raised UnicodeEncode/DecodeErrors
-  [datakurre]
-
-1.3.0 (2015-04-21)
-------------------
-
-- Fix edit_permission and delete_permission to default
-  to add_permission only in TileType constructor
-  [datakurre]
-
-- Fix argument order in TileType constructor call
-  [datakurre]
-
-- Fix absolute_url-adapter to fallback to relative URL
-  [datakurre]
-
-- Add response to include absolute X-Tile-Url header
-  [bloodbare]
-
-1.2 (2012-11-07)
-----------------
-
-- Adding icon property for tiletype
-  [garbas]
-
-- Url that we pass via X-Tile-Url should be relative to current context
-  [garbas]
-
-- Adding support for more robust permissions for edit and delete on tiles
-  [cewing calvinhp]
-
-1.1 (2012-06-22)
-----------------
-
-- X-Tile-Uid header is passed on tile view containing tile's id.
-  [garbas]
-
-- PEP 8/Pyflakes (ignoring E121, E123, E126, E127 and E501).
-  [hvelarde]
-
-1.0 (2012-05-14)
-----------------
-
-- Refactor ESI support. To use the ``ESITile`` and ``ESIPersistentTile``
-  base classes, you should either use a template assigned via ZCML or
-  override the ``render()`` method. See ``esi.rst`` for full details.
-  [optilude]
-
-- Internationalized title and description of the tile directive.
-  [vincentfretin]
-
-- Use a  json-encoded parameter in transient tiles as first option.
-  [dukebody]
-
-- Use adapters for the Zope Publisher type casting
-  [dukebody]
-
-- Conditionaly support z3c.relationfield's RelationChoice fields
-  [dukebody]
-
-- Ignore type casting for fields without fixed type, like zope.schema.Choice
-  [dukebody]
-
-1.0a1 (2010-05-17)
-------------------
-
-- Initial release.
diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..bd38ca3
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,113 @@
+Changelog
+=========
+
+1.5.3 (unreleased)
+------------------
+
+- Let TileType instances (tile registration utility) know about the view permission too.
+  [jensens]
+
+
+1.5.2 (2016-03-28)
+------------------
+
+- Fix issue where ESI href was not properly replaced.
+  [jensens]
+
+- Add section "ZCML Reference" to README.rst.
+  [jensens]
+
+- PEP8, code-analysis, documentation and packaging fixes.
+  [jensens, mauritsvanrees]
+
+1.5.1 (2015-10-09)
+------------------
+
+- Fix decoding List type of Choice value types
+  [vangheem]
+
+
+1.5.0 (2015-09-04)
+------------------
+
+- Add support for overriding transient data manager with persistent data
+  manager by adding X-Tile-Persistent=1 into tile URL
+  [datakurre]
+
+- Fix persistent data manager to read its default from query string
+  [vangheem]
+
+1.4.0 (2015-05-25)
+------------------
+
+- Add support for encoding dictionary fields into tile URL
+  [datakurre]
+- Fix issue where saving or deleting transient tile data mutated the current request
+  [datakurre]
+- Fix issue where non-ascii characters in tile data raised UnicodeEncode/DecodeErrors
+  [datakurre]
+
+1.3.0 (2015-04-21)
+------------------
+
+- Fix edit_permission and delete_permission to default
+  to add_permission only in TileType constructor
+  [datakurre]
+
+- Fix argument order in TileType constructor call
+  [datakurre]
+
+- Fix absolute_url-adapter to fallback to relative URL
+  [datakurre]
+
+- Add response to include absolute X-Tile-Url header
+  [bloodbare]
+
+1.2 (2012-11-07)
+----------------
+
+- Adding icon property for tiletype
+  [garbas]
+
+- Url that we pass via X-Tile-Url should be relative to current context
+  [garbas]
+
+- Adding support for more robust permissions for edit and delete on tiles
+  [cewing calvinhp]
+
+1.1 (2012-06-22)
+----------------
+
+- X-Tile-Uid header is passed on tile view containing tile's id.
+  [garbas]
+
+- PEP 8/Pyflakes (ignoring E121, E123, E126, E127 and E501).
+  [hvelarde]
+
+1.0 (2012-05-14)
+----------------
+
+- Refactor ESI support. To use the ``ESITile`` and ``ESIPersistentTile``
+  base classes, you should either use a template assigned via ZCML or
+  override the ``render()`` method. See ``esi.rst`` for full details.
+  [optilude]
+
+- Internationalized title and description of the tile directive.
+  [vincentfretin]
+
+- Use a  json-encoded parameter in transient tiles as first option.
+  [dukebody]
+
+- Use adapters for the Zope Publisher type casting
+  [dukebody]
+
+- Conditionaly support z3c.relationfield's RelationChoice fields
+  [dukebody]
+
+- Ignore type casting for fields without fixed type, like zope.schema.Choice
+  [dukebody]
+
+1.0a1 (2010-05-17)
+------------------
+
+- Initial release.
diff --git a/README.rst b/README.rst
index 4ab91ad..f6bdd8c 100644
--- a/README.rst
+++ b/README.rst
@@ -169,11 +169,12 @@ When registering a tile, in the background two registrations are done:
 
    - ``name`` (required)
    - ``title`` (required)
-   - ``description``
+   - ``description`` (optional)
    - ``icon`` (optional)
-   - ``add_permission`` (required)
-   - ``edit_permission`` (optional)
-   - ``delete_permission`` (optional)
+   - ``permission`` (required)
+   - ``add_permission`` (required for adding capabilities)
+   - ``edit_permission`` (optional, default to add_permission)
+   - ``delete_permission`` (optional, default to add_permission)
    - ``schema`` (optional)
 
 2) How to **render** the tile (as a usal page).
@@ -185,8 +186,8 @@ When registering a tile, in the background two registrations are done:
    - ``name`` (required)
    - ``for`` (optional)
    - ``layer`` (optional)
-   - ``class`` (this or template or both is required)
-   - ``template`` (this or template or both is required)
+   - ``class`` (this or ``template`` or both is required)
+   - ``template`` (this or ``class`` or both is required)
    - ``permission`` (required)
 
 The **directives attributes** have the following meaning:
diff --git a/plone/tiles/directives.rst b/plone/tiles/directives.rst
index 0e82b29..835480a 100644
--- a/plone/tiles/directives.rst
+++ b/plone/tiles/directives.rst
@@ -17,7 +17,7 @@ To make it easier to register these components, this package provides a
 To test this, we have created a dummy schema and a dummy tile in ``tests.py``,
 and a dummy template in ``test.pt``.
 
-Let's show how these may be used by registering several tiles:
+Let's show how these may be used by registering several tiles::
 
     >>> configuration = """\
     ... <configure package="plone.tiles"
@@ -103,7 +103,7 @@ Let's show how these may be used by registering several tiles:
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
-Let's check how the tiles were registered:
+Let's check how the tiles were registered::
 
     >>> from zope.component import getUtility
     >>> from plone.tiles.interfaces import ITileType
@@ -117,6 +117,9 @@ Let's check how the tiles were registered:
     >>> tile1_type.add_permission
     'plone.tiles.tests.DummyAdd'
 
+    >>> tile1_type.view_permission
+    'plone.tiles.tests.DummyView'
+
     >>> tile1_type.schema
     <InterfaceClass plone.tiles.tests.IDummySchema>
 
@@ -150,7 +153,7 @@ Let's check how the tiles were registered:
     >>> tile4_type.schema
     <InterfaceClass plone.tiles.tests.IDummySchema>
 
-Finally, let's check that we can look up the tiles.
+Finally, let's check that we can look up the tiles::
 
     >>> from zope.publisher.browser import TestRequest
     >>> from zope.interface import implements, alsoProvides
diff --git a/plone/tiles/esi.rst b/plone/tiles/esi.rst
index c5185bf..d7804c0 100644
--- a/plone/tiles/esi.rst
+++ b/plone/tiles/esi.rst
@@ -60,6 +60,7 @@ registered via ZCML.
     ...     title=u"Sample tile",
     ...     description=u"A tile used for testing",
     ...     add_permission="dummy.Permission",
+    ...     view_permission="dummy.Permission",
     ...     schema=None)
 
     >>> from zope.component import provideAdapter, provideUtility
@@ -217,6 +218,7 @@ attribute to the ZCML directive will work also.
     ...     title=u"Sample ESI tile",
     ...     description=u"A tile used for testing ESI",
     ...     add_permission="dummy.Permission",
+    ...     view_permission="dummy.Permission",
     ...     schema=None)
 
     >>> provideUtility(sampleESITileType, name=u'sample.esitile')
diff --git a/plone/tiles/meta.py b/plone/tiles/meta.py
index 5a6ce20..7d4874a 100644
--- a/plone/tiles/meta.py
+++ b/plone/tiles/meta.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-
 from plone.tiles.interfaces import ITileType
 from plone.tiles.tile import Tile
 from plone.tiles.type import TileType
@@ -23,6 +22,7 @@ class ITileDirective(Interface):
     name = schema.DottedName(
         title=u"Name",
         description=u"A unique, dotted name for the tile",
+        required=True,
     )
 
     title = MessageID(
@@ -93,7 +93,7 @@ class ITileDirective(Interface):
     permission = Permission(
         title=u"View permission",
         description=u"Name of the permission required to view this item",
-        required=False,
+        required=True,
     )
 
 
@@ -103,7 +103,6 @@ def tile(_context, name, title=None, description=None, icon=None,
          permission=None):
     """Implements the <plone:tile /> directive
     """
-
     if (
         title is not None or
         description is not None or
@@ -115,8 +114,17 @@ def tile(_context, name, title=None, description=None, icon=None,
             raise ConfigurationError(
                 u"When configuring a new type of tile, 'title' and "
                 u"'add_permission' are required")
-        type_ = TileType(name, title, add_permission, edit_permission,
-                         delete_permission, description, icon, schema)
+        type_ = TileType(
+            name,
+            title,
+            add_permission,
+            permission,
+            edit_permission=edit_permission,
+            delete_permission=delete_permission,
+            description=description,
+            icon=icon,
+            schema=schema
+        )
 
         utility(_context, provides=ITileType, component=type_, name=name)
 
@@ -124,16 +132,12 @@ def tile(_context, name, title=None, description=None, icon=None,
         for_ is not None or
         layer is not None or
         class_ is not None or
-        template is not None or
-        permission is not None
+        template is not None
     ):
         if class_ is None and template is None:
             raise ConfigurationError(
                 u"'class' or 'template' must be given when configuring a tile."
             )
-        if permission is None:
-            raise ConfigurationError(
-                u"When configuring a tile, 'permission' is required")
 
         if for_ is None:
             for_ = Interface
diff --git a/plone/tiles/tests.py b/plone/tiles/tests.py
index c516c6c..85cd8aa 100644
--- a/plone/tiles/tests.py
+++ b/plone/tiles/tests.py
@@ -45,7 +45,8 @@ class PloneTiles(Layer):
     def setUp(self):
         import plone.tiles
         self['configurationContext'] = context = zca.stackConfigurationContext(
-            self.get('configurationContext'))
+            self.get('configurationContext')
+        )
         xmlconfig.file('configure.zcml', plone.tiles, context=context)
 
     def tearDown(self):
diff --git a/plone/tiles/tiles.rst b/plone/tiles/tiles.rst
index 8179f36..caa70c5 100644
--- a/plone/tiles/tiles.rst
+++ b/plone/tiles/tiles.rst
@@ -76,10 +76,11 @@ using the ``<plone:tile />`` directive. Here's how to create one manually:
 
     >>> from plone.tiles.type import TileType
     >>> sampleTileType = TileType(
-    ...     name=u'sample.tile',
-    ...     title=u"Sample tile",
+    ...     u'sample.tile',
+    ...     u"Sample tile",
+    ...     "dummy.Permission",
+    ...     "dummy.Permission",
     ...     description=u"A tile used for testing",
-    ...     add_permission="dummy.Permission",
     ...     schema=None)
 
 The name should match the view name and the name the utility is registered
@@ -372,10 +373,11 @@ Now, let's create a persistent tile with a schema.
     ...         return u"<b>You said</b> %s" % self.data['text']
 
     >>> persistentSampleTileType = TileType(
-    ...     name=u'sample.persistenttile',
-    ...     title=u"Persistent sample tile",
+    ...     u'sample.persistenttile',
+    ...     u"Persistent sample tile",
+    ...     "dummy.Permission",
+    ...     "dummy.Permission",
     ...     description=u"A tile used for testing",
-    ...     add_permission="dummy.Permission",
     ...     schema=IPersistentSampleData)
 
     >>> provideUtility(persistentSampleTileType, name=u'sample.persistenttile')
diff --git a/plone/tiles/type.py b/plone/tiles/type.py
index 2af4dc9..a736709 100644
--- a/plone/tiles/type.py
+++ b/plone/tiles/type.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-
 from plone.tiles.interfaces import ITileType
 from zope.interface import implementer
 
@@ -9,9 +8,18 @@ class TileType(object):
     """A utility that describes a type of tile
     """
 
-    def __init__(self, name, title, add_permission, edit_permission=None,
-                 delete_permission=None, description=None, icon=None,
-                 schema=None):
+    def __init__(
+        self,
+        name,
+        title,
+        add_permission,
+        view_permission,
+        edit_permission=None,
+        delete_permission=None,
+        description=None,
+        icon=None,
+        schema=None
+    ):
 
         if delete_permission is None:
             delete_permission = add_permission
@@ -23,6 +31,7 @@ def __init__(self, name, title, add_permission, edit_permission=None,
         self.title = title
         self.add_permission = add_permission
         self.edit_permission = edit_permission
+        self.view_permission = view_permission
         self.delete_permission = delete_permission
         self.description = description
         self.icon = icon
diff --git a/setup.py b/setup.py
index 32e93e8..4246952 100644
--- a/setup.py
+++ b/setup.py
@@ -15,7 +15,7 @@
     open(os.path.join("plone", "tiles", "tiles.rst")).read() + "\n" +
     open(os.path.join("plone", "tiles", "directives.rst")).read() + "\n" +
     open(os.path.join("plone", "tiles", "esi.rst")).read() + "\n" +
-    open("CHANGELOG.rst").read(),
+    open("CHANGES.rst").read(),
     classifiers=[
         'Development Status :: 5 - Production/Stable',
         'Environment :: Web Environment',


Repository: plone.tiles


Branch: refs/heads/master
Date: 2016-04-24T11:07:11+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.tiles/commit/46663f8ecb18aa8408c930f26d2b52b23eeb9b77

raise version to 1.6

Files changed:
M CHANGES.rst
M setup.py

diff --git a/CHANGES.rst b/CHANGES.rst
index bd38ca3..6794e92 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1,8 +1,8 @@
 Changelog
 =========
 
-1.5.3 (unreleased)
-------------------
+1.6 (unreleased)
+----------------
 
 - Let TileType instances (tile registration utility) know about the view permission too.
   [jensens]
diff --git a/setup.py b/setup.py
index 4246952..26521a9 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@
 import os
 
 
-version = '1.5.3.dev0'
+version = '1.6.dev0'
 
 setup(
     name='plone.tiles',


Repository: plone.tiles


Branch: refs/heads/master
Date: 2016-04-24T11:14:25+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.tiles/commit/5aee3d78290c1642b189f64e89db29088975a4e6

Merge pull request #7 from plone/fix-missing-permission-info

Fix missing view permissions info on tiletype registration

Files changed:
A CHANGES.rst
M README.rst
M plone/tiles/directives.rst
M plone/tiles/esi.rst
M plone/tiles/meta.py
M plone/tiles/tests.py
M plone/tiles/tiles.rst
M plone/tiles/type.py
M setup.py
D CHANGELOG.rst

diff --git a/CHANGELOG.rst b/CHANGELOG.rst
deleted file mode 100644
index 721626d..0000000
--- a/CHANGELOG.rst
+++ /dev/null
@@ -1,112 +0,0 @@
-Changelog
-=========
-
-1.5.3 (unreleased)
-------------------
-
-- Nothing changed yet.
-
-
-1.5.2 (2016-03-28)
-------------------
-
-- Fix issue where ESI href was not properly replaced.
-  [jensens]
-
-- Add section "ZCML Reference" to README.rst.
-  [jensens]
-
-- PEP8, code-analysis, documentation and packaging fixes.
-  [jensens, mauritsvanrees]
-
-1.5.1 (2015-10-09)
-------------------
-
-- Fix decoding List type of Choice value types
-  [vangheem]
-
-
-1.5.0 (2015-09-04)
-------------------
-
-- Add support for overriding transient data manager with persistent data
-  manager by adding X-Tile-Persistent=1 into tile URL
-  [datakurre]
-
-- Fix persistent data manager to read its default from query string
-  [vangheem]
-
-1.4.0 (2015-05-25)
-------------------
-
-- Add support for encoding dictionary fields into tile URL
-  [datakurre]
-- Fix issue where saving or deleting transient tile data mutated the current request
-  [datakurre]
-- Fix issue where non-ascii characters in tile data raised UnicodeEncode/DecodeErrors
-  [datakurre]
-
-1.3.0 (2015-04-21)
-------------------
-
-- Fix edit_permission and delete_permission to default
-  to add_permission only in TileType constructor
-  [datakurre]
-
-- Fix argument order in TileType constructor call
-  [datakurre]
-
-- Fix absolute_url-adapter to fallback to relative URL
-  [datakurre]
-
-- Add response to include absolute X-Tile-Url header
-  [bloodbare]
-
-1.2 (2012-11-07)
-----------------
-
-- Adding icon property for tiletype
-  [garbas]
-
-- Url that we pass via X-Tile-Url should be relative to current context
-  [garbas]
-
-- Adding support for more robust permissions for edit and delete on tiles
-  [cewing calvinhp]
-
-1.1 (2012-06-22)
-----------------
-
-- X-Tile-Uid header is passed on tile view containing tile's id.
-  [garbas]
-
-- PEP 8/Pyflakes (ignoring E121, E123, E126, E127 and E501).
-  [hvelarde]
-
-1.0 (2012-05-14)
-----------------
-
-- Refactor ESI support. To use the ``ESITile`` and ``ESIPersistentTile``
-  base classes, you should either use a template assigned via ZCML or
-  override the ``render()`` method. See ``esi.rst`` for full details.
-  [optilude]
-
-- Internationalized title and description of the tile directive.
-  [vincentfretin]
-
-- Use a  json-encoded parameter in transient tiles as first option.
-  [dukebody]
-
-- Use adapters for the Zope Publisher type casting
-  [dukebody]
-
-- Conditionaly support z3c.relationfield's RelationChoice fields
-  [dukebody]
-
-- Ignore type casting for fields without fixed type, like zope.schema.Choice
-  [dukebody]
-
-1.0a1 (2010-05-17)
-------------------
-
-- Initial release.
diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..6794e92
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,113 @@
+Changelog
+=========
+
+1.6 (unreleased)
+----------------
+
+- Let TileType instances (tile registration utility) know about the view permission too.
+  [jensens]
+
+
+1.5.2 (2016-03-28)
+------------------
+
+- Fix issue where ESI href was not properly replaced.
+  [jensens]
+
+- Add section "ZCML Reference" to README.rst.
+  [jensens]
+
+- PEP8, code-analysis, documentation and packaging fixes.
+  [jensens, mauritsvanrees]
+
+1.5.1 (2015-10-09)
+------------------
+
+- Fix decoding List type of Choice value types
+  [vangheem]
+
+
+1.5.0 (2015-09-04)
+------------------
+
+- Add support for overriding transient data manager with persistent data
+  manager by adding X-Tile-Persistent=1 into tile URL
+  [datakurre]
+
+- Fix persistent data manager to read its default from query string
+  [vangheem]
+
+1.4.0 (2015-05-25)
+------------------
+
+- Add support for encoding dictionary fields into tile URL
+  [datakurre]
+- Fix issue where saving or deleting transient tile data mutated the current request
+  [datakurre]
+- Fix issue where non-ascii characters in tile data raised UnicodeEncode/DecodeErrors
+  [datakurre]
+
+1.3.0 (2015-04-21)
+------------------
+
+- Fix edit_permission and delete_permission to default
+  to add_permission only in TileType constructor
+  [datakurre]
+
+- Fix argument order in TileType constructor call
+  [datakurre]
+
+- Fix absolute_url-adapter to fallback to relative URL
+  [datakurre]
+
+- Add response to include absolute X-Tile-Url header
+  [bloodbare]
+
+1.2 (2012-11-07)
+----------------
+
+- Adding icon property for tiletype
+  [garbas]
+
+- Url that we pass via X-Tile-Url should be relative to current context
+  [garbas]
+
+- Adding support for more robust permissions for edit and delete on tiles
+  [cewing calvinhp]
+
+1.1 (2012-06-22)
+----------------
+
+- X-Tile-Uid header is passed on tile view containing tile's id.
+  [garbas]
+
+- PEP 8/Pyflakes (ignoring E121, E123, E126, E127 and E501).
+  [hvelarde]
+
+1.0 (2012-05-14)
+----------------
+
+- Refactor ESI support. To use the ``ESITile`` and ``ESIPersistentTile``
+  base classes, you should either use a template assigned via ZCML or
+  override the ``render()`` method. See ``esi.rst`` for full details.
+  [optilude]
+
+- Internationalized title and description of the tile directive.
+  [vincentfretin]
+
+- Use a  json-encoded parameter in transient tiles as first option.
+  [dukebody]
+
+- Use adapters for the Zope Publisher type casting
+  [dukebody]
+
+- Conditionaly support z3c.relationfield's RelationChoice fields
+  [dukebody]
+
+- Ignore type casting for fields without fixed type, like zope.schema.Choice
+  [dukebody]
+
+1.0a1 (2010-05-17)
+------------------
+
+- Initial release.
diff --git a/README.rst b/README.rst
index 4ab91ad..f6bdd8c 100644
--- a/README.rst
+++ b/README.rst
@@ -169,11 +169,12 @@ When registering a tile, in the background two registrations are done:
 
    - ``name`` (required)
    - ``title`` (required)
-   - ``description``
+   - ``description`` (optional)
    - ``icon`` (optional)
-   - ``add_permission`` (required)
-   - ``edit_permission`` (optional)
-   - ``delete_permission`` (optional)
+   - ``permission`` (required)
+   - ``add_permission`` (required for adding capabilities)
+   - ``edit_permission`` (optional, default to add_permission)
+   - ``delete_permission`` (optional, default to add_permission)
    - ``schema`` (optional)
 
 2) How to **render** the tile (as a usal page).
@@ -185,8 +186,8 @@ When registering a tile, in the background two registrations are done:
    - ``name`` (required)
    - ``for`` (optional)
    - ``layer`` (optional)
-   - ``class`` (this or template or both is required)
-   - ``template`` (this or template or both is required)
+   - ``class`` (this or ``template`` or both is required)
+   - ``template`` (this or ``class`` or both is required)
    - ``permission`` (required)
 
 The **directives attributes** have the following meaning:
diff --git a/plone/tiles/directives.rst b/plone/tiles/directives.rst
index 0e82b29..835480a 100644
--- a/plone/tiles/directives.rst
+++ b/plone/tiles/directives.rst
@@ -17,7 +17,7 @@ To make it easier to register these components, this package provides a
 To test this, we have created a dummy schema and a dummy tile in ``tests.py``,
 and a dummy template in ``test.pt``.
 
-Let's show how these may be used by registering several tiles:
+Let's show how these may be used by registering several tiles::
 
     >>> configuration = """\
     ... <configure package="plone.tiles"
@@ -103,7 +103,7 @@ Let's show how these may be used by registering several tiles:
     >>> from zope.configuration import xmlconfig
     >>> xmlconfig.xmlconfig(StringIO(configuration))
 
-Let's check how the tiles were registered:
+Let's check how the tiles were registered::
 
     >>> from zope.component import getUtility
     >>> from plone.tiles.interfaces import ITileType
@@ -117,6 +117,9 @@ Let's check how the tiles were registered:
     >>> tile1_type.add_permission
     'plone.tiles.tests.DummyAdd'
 
+    >>> tile1_type.view_permission
+    'plone.tiles.tests.DummyView'
+
     >>> tile1_type.schema
     <InterfaceClass plone.tiles.tests.IDummySchema>
 
@@ -150,7 +153,7 @@ Let's check how the tiles were registered:
     >>> tile4_type.schema
     <InterfaceClass plone.tiles.tests.IDummySchema>
 
-Finally, let's check that we can look up the tiles.
+Finally, let's check that we can look up the tiles::
 
     >>> from zope.publisher.browser import TestRequest
     >>> from zope.interface import implements, alsoProvides
diff --git a/plone/tiles/esi.rst b/plone/tiles/esi.rst
index c5185bf..d7804c0 100644
--- a/plone/tiles/esi.rst
+++ b/plone/tiles/esi.rst
@@ -60,6 +60,7 @@ registered via ZCML.
     ...     title=u"Sample tile",
     ...     description=u"A tile used for testing",
     ...     add_permission="dummy.Permission",
+    ...     view_permission="dummy.Permission",
     ...     schema=None)
 
     >>> from zope.component import provideAdapter, provideUtility
@@ -217,6 +218,7 @@ attribute to the ZCML directive will work also.
     ...     title=u"Sample ESI tile",
     ...     description=u"A tile used for testing ESI",
     ...     add_permission="dummy.Permission",
+    ...     view_permission="dummy.Permission",
     ...     schema=None)
 
     >>> provideUtility(sampleESITileType, name=u'sample.esitile')
diff --git a/plone/tiles/meta.py b/plone/tiles/meta.py
index 5a6ce20..7d4874a 100644
--- a/plone/tiles/meta.py
+++ b/plone/tiles/meta.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-
 from plone.tiles.interfaces import ITileType
 from plone.tiles.tile import Tile
 from plone.tiles.type import TileType
@@ -23,6 +22,7 @@ class ITileDirective(Interface):
     name = schema.DottedName(
         title=u"Name",
         description=u"A unique, dotted name for the tile",
+        required=True,
     )
 
     title = MessageID(
@@ -93,7 +93,7 @@ class ITileDirective(Interface):
     permission = Permission(
         title=u"View permission",
         description=u"Name of the permission required to view this item",
-        required=False,
+        required=True,
     )
 
 
@@ -103,7 +103,6 @@ def tile(_context, name, title=None, description=None, icon=None,
          permission=None):
     """Implements the <plone:tile /> directive
     """
-
     if (
         title is not None or
         description is not None or
@@ -115,8 +114,17 @@ def tile(_context, name, title=None, description=None, icon=None,
             raise ConfigurationError(
                 u"When configuring a new type of tile, 'title' and "
                 u"'add_permission' are required")
-        type_ = TileType(name, title, add_permission, edit_permission,
-                         delete_permission, description, icon, schema)
+        type_ = TileType(
+            name,
+            title,
+            add_permission,
+            permission,
+            edit_permission=edit_permission,
+            delete_permission=delete_permission,
+            description=description,
+            icon=icon,
+            schema=schema
+        )
 
         utility(_context, provides=ITileType, component=type_, name=name)
 
@@ -124,16 +132,12 @@ def tile(_context, name, title=None, description=None, icon=None,
         for_ is not None or
         layer is not None or
         class_ is not None or
-        template is not None or
-        permission is not None
+        template is not None
     ):
         if class_ is None and template is None:
             raise ConfigurationError(
                 u"'class' or 'template' must be given when configuring a tile."
             )
-        if permission is None:
-            raise ConfigurationError(
-                u"When configuring a tile, 'permission' is required")
 
         if for_ is None:
             for_ = Interface
diff --git a/plone/tiles/tests.py b/plone/tiles/tests.py
index c516c6c..85cd8aa 100644
--- a/plone/tiles/tests.py
+++ b/plone/tiles/tests.py
@@ -45,7 +45,8 @@ class PloneTiles(Layer):
     def setUp(self):
         import plone.tiles
         self['configurationContext'] = context = zca.stackConfigurationContext(
-            self.get('configurationContext'))
+            self.get('configurationContext')
+        )
         xmlconfig.file('configure.zcml', plone.tiles, context=context)
 
     def tearDown(self):
diff --git a/plone/tiles/tiles.rst b/plone/tiles/tiles.rst
index 8179f36..caa70c5 100644
--- a/plone/tiles/tiles.rst
+++ b/plone/tiles/tiles.rst
@@ -76,10 +76,11 @@ using the ``<plone:tile />`` directive. Here's how to create one manually:
 
     >>> from plone.tiles.type import TileType
     >>> sampleTileType = TileType(
-    ...     name=u'sample.tile',
-    ...     title=u"Sample tile",
+    ...     u'sample.tile',
+    ...     u"Sample tile",
+    ...     "dummy.Permission",
+    ...     "dummy.Permission",
     ...     description=u"A tile used for testing",
-    ...     add_permission="dummy.Permission",
     ...     schema=None)
 
 The name should match the view name and the name the utility is registered
@@ -372,10 +373,11 @@ Now, let's create a persistent tile with a schema.
     ...         return u"<b>You said</b> %s" % self.data['text']
 
     >>> persistentSampleTileType = TileType(
-    ...     name=u'sample.persistenttile',
-    ...     title=u"Persistent sample tile",
+    ...     u'sample.persistenttile',
+    ...     u"Persistent sample tile",
+    ...     "dummy.Permission",
+    ...     "dummy.Permission",
     ...     description=u"A tile used for testing",
-    ...     add_permission="dummy.Permission",
     ...     schema=IPersistentSampleData)
 
     >>> provideUtility(persistentSampleTileType, name=u'sample.persistenttile')
diff --git a/plone/tiles/type.py b/plone/tiles/type.py
index 2af4dc9..a736709 100644
--- a/plone/tiles/type.py
+++ b/plone/tiles/type.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
-
 from plone.tiles.interfaces import ITileType
 from zope.interface import implementer
 
@@ -9,9 +8,18 @@ class TileType(object):
     """A utility that describes a type of tile
     """
 
-    def __init__(self, name, title, add_permission, edit_permission=None,
-                 delete_permission=None, description=None, icon=None,
-                 schema=None):
+    def __init__(
+        self,
+        name,
+        title,
+        add_permission,
+        view_permission,
+        edit_permission=None,
+        delete_permission=None,
+        description=None,
+        icon=None,
+        schema=None
+    ):
 
         if delete_permission is None:
             delete_permission = add_permission
@@ -23,6 +31,7 @@ def __init__(self, name, title, add_permission, edit_permission=None,
         self.title = title
         self.add_permission = add_permission
         self.edit_permission = edit_permission
+        self.view_permission = view_permission
         self.delete_permission = delete_permission
         self.description = description
         self.icon = icon
diff --git a/setup.py b/setup.py
index 32e93e8..26521a9 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@
 import os
 
 
-version = '1.5.3.dev0'
+version = '1.6.dev0'
 
 setup(
     name='plone.tiles',
@@ -15,7 +15,7 @@
     open(os.path.join("plone", "tiles", "tiles.rst")).read() + "\n" +
     open(os.path.join("plone", "tiles", "directives.rst")).read() + "\n" +
     open(os.path.join("plone", "tiles", "esi.rst")).read() + "\n" +
-    open("CHANGELOG.rst").read(),
+    open("CHANGES.rst").read(),
     classifiers=[
         'Development Status :: 5 - Production/Stable',
         'Environment :: Web Environment',


