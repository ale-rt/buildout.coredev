Repository: plone.uuid


Branch: refs/heads/master
Date: 2016-02-11T22:11:05+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.uuid/commit/eeccab85cdfef7a55d9317354ef1329b239c326a

txt to rst, check-manifest

Files changed:
A CHANGES.rst
A README.rst
M MANIFEST.in
M setup.py
D CHANGES.txt
D README.txt

diff --git a/CHANGES.rst b/CHANGES.rst
new file mode 100644
index 0000000..92e9b30
--- /dev/null
+++ b/CHANGES.rst
@@ -0,0 +1,54 @@
+Changelog
+=========
+
+1.0.4 (unreleased)
+------------------
+
+- Nothing changed yet.
+
+
+1.0.3 (2012-05-31)
+------------------
+
+- Use zope.browserpage.
+  [hannosch]
+
+- Defensive UUID assignment in addAttributeUUID() handler: keep existing
+  UUID value if handler called more than once, except in case of object
+  copy event, where original and destination should have distinct UUID.
+  [seanupton]
+
+1.0.2 - 2011-10-18
+------------------
+
+- Generate UUID without dashes.
+  [elro]
+
+1.0.1 - 2011-05-20
+------------------
+
+- Relicense under modified BSD license.
+  See http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy
+  [davisagli]
+
+1.0 - 2011-05-13
+----------------
+
+- Release 1.0 Final
+  [esteele]
+
+- Add MANIFEST.in.
+  [WouterVH]
+
+
+1.0b2 - 2011-01-03
+------------------
+
+- Add MutableUUID component
+  [toutpt]
+
+
+1.0b1 - 2010-11-27
+------------------
+
+- Initial release
diff --git a/CHANGES.txt b/CHANGES.txt
deleted file mode 100644
index 92e9b30..0000000
--- a/CHANGES.txt
+++ /dev/null
@@ -1,54 +0,0 @@
-Changelog
-=========
-
-1.0.4 (unreleased)
-------------------
-
-- Nothing changed yet.
-
-
-1.0.3 (2012-05-31)
-------------------
-
-- Use zope.browserpage.
-  [hannosch]
-
-- Defensive UUID assignment in addAttributeUUID() handler: keep existing
-  UUID value if handler called more than once, except in case of object
-  copy event, where original and destination should have distinct UUID.
-  [seanupton]
-
-1.0.2 - 2011-10-18
-------------------
-
-- Generate UUID without dashes.
-  [elro]
-
-1.0.1 - 2011-05-20
-------------------
-
-- Relicense under modified BSD license.
-  See http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy
-  [davisagli]
-
-1.0 - 2011-05-13
-----------------
-
-- Release 1.0 Final
-  [esteele]
-
-- Add MANIFEST.in.
-  [WouterVH]
-
-
-1.0b2 - 2011-01-03
-------------------
-
-- Add MutableUUID component
-  [toutpt]
-
-
-1.0b1 - 2010-11-27
-------------------
-
-- Initial release
diff --git a/MANIFEST.in b/MANIFEST.in
index 48ebc74..01911b5 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,6 +1,6 @@
-include *.txt
+include *.rst
 
-recursive-include docs *
-recursive-include plone *
+graft docs
+graft plone
 
-global-exclude *pyc
\ No newline at end of file
+global-exclude *pyc
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..dc4b598
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,87 @@
+plone.uuid
+==========
+
+This is a minimal package that can be used to obtain a universally unique
+identifier (UUID) for an object.
+
+The default implementation uses the Python standard library ``uuid`` module
+to generate an RFC 4122-compliant UUID, using the ``uuid1()`` function. It
+will assign a UUID upon object creation (by subscribing to
+``IObjectCreatedEvent`` from ``zope.lifecycleevent``) and store it in an
+attribute on the object.
+
+  Why use an attribute and not annotations? The most common form of annotation
+  is the one provided by ``IAttributeAnnotations``. This stores annotations in
+  a BTree in an attribute called ``__annotations__``, which means that
+  annotation values do not end up in the same ZODB persistent object as the
+  parent. This is good for "large" values, but not very good for small ones
+  that are frequently required, as it requires a separate ZODB object load.
+
+Simple usage
+============
+
+To automatically assign a UUID to your objects using the default
+implementation outlined above, you should:
+
+* Make sure they implement ``plone.uuid.interfaces.IAttributeUUID``. You
+  can do this in code, via the ``implements()`` directive, or in ZCML, with
+  a statement like::
+
+    <class class="my.package.MyClass">
+        <implements interface="plone.uuid.interfaces.IAttributeUUID" />
+    </class>
+
+* Make sure that an ``IObjectCreatedEvent`` is fired for this object when it
+  is first created.
+
+Once the event handler has triggered, you can obtain a UUID by adapting the
+object to the ``IUUID`` interface::
+
+    from plone.uuid.interfaces import IUUID
+    uuid = IUUID(context)
+
+The ``uuid`` variable will now be a (byte) string containing a UUID. If the
+UUID has not yet been assigned, adaptation will fail with a ``TypeError``.
+
+If you would rather get ``None`` instead of a ``TypeError``, you can do::
+
+    uuid = IUUID(context, None)
+
+UUID view
+=========
+
+If you require a UUID in a page template or remotely, you can use the
+``@@uuid`` view, which is registered for all objects that provide the
+``IUUIDAware`` marker interface (which is a super-interface of the
+``IAttributeUUID`` marker seen above).
+
+For example::
+
+    <div tal:attributes="id string:uuid-${context/@@uuid}">
+        ...
+    </div>
+
+The view simply returns the UUID string as looked up by the ``IUUID`` adapter.
+
+Customising behaviour
+=====================
+
+There are two primary customisation points for this package:
+
+* You can change the default UUID generating algorithm by overriding the
+  unnamed utility providing the ``IUUIDGenerator`` interface. The default
+  implementation simply calls ``uuid.uuid1()`` and casts the result to a
+  ``str``.
+* You can change the UUID storage by providing a custom ``IUUID`` adapter
+  implementation. If you do this, you must also provide a mechanism for
+  assigning UUIDs upon object creation, usually via an event handler. To
+  obtain a UUID, use the ``IUUIDGenerator`` interface::
+
+    from zope.component import getUtility
+    from plone.uuid.interfaces import IUUIDGenerator
+
+    generator = getUtility(IUUIDGenerator)
+    uuid = generator()
+
+  You should also make sure that instances with a UUID provide a sub-interface
+  of ``plone.uuid.interfaces.IUUIDAware``.
diff --git a/README.txt b/README.txt
deleted file mode 100644
index dc4b598..0000000
--- a/README.txt
+++ /dev/null
@@ -1,87 +0,0 @@
-plone.uuid
-==========
-
-This is a minimal package that can be used to obtain a universally unique
-identifier (UUID) for an object.
-
-The default implementation uses the Python standard library ``uuid`` module
-to generate an RFC 4122-compliant UUID, using the ``uuid1()`` function. It
-will assign a UUID upon object creation (by subscribing to
-``IObjectCreatedEvent`` from ``zope.lifecycleevent``) and store it in an
-attribute on the object.
-
-  Why use an attribute and not annotations? The most common form of annotation
-  is the one provided by ``IAttributeAnnotations``. This stores annotations in
-  a BTree in an attribute called ``__annotations__``, which means that
-  annotation values do not end up in the same ZODB persistent object as the
-  parent. This is good for "large" values, but not very good for small ones
-  that are frequently required, as it requires a separate ZODB object load.
-
-Simple usage
-============
-
-To automatically assign a UUID to your objects using the default
-implementation outlined above, you should:
-
-* Make sure they implement ``plone.uuid.interfaces.IAttributeUUID``. You
-  can do this in code, via the ``implements()`` directive, or in ZCML, with
-  a statement like::
-
-    <class class="my.package.MyClass">
-        <implements interface="plone.uuid.interfaces.IAttributeUUID" />
-    </class>
-
-* Make sure that an ``IObjectCreatedEvent`` is fired for this object when it
-  is first created.
-
-Once the event handler has triggered, you can obtain a UUID by adapting the
-object to the ``IUUID`` interface::
-
-    from plone.uuid.interfaces import IUUID
-    uuid = IUUID(context)
-
-The ``uuid`` variable will now be a (byte) string containing a UUID. If the
-UUID has not yet been assigned, adaptation will fail with a ``TypeError``.
-
-If you would rather get ``None`` instead of a ``TypeError``, you can do::
-
-    uuid = IUUID(context, None)
-
-UUID view
-=========
-
-If you require a UUID in a page template or remotely, you can use the
-``@@uuid`` view, which is registered for all objects that provide the
-``IUUIDAware`` marker interface (which is a super-interface of the
-``IAttributeUUID`` marker seen above).
-
-For example::
-
-    <div tal:attributes="id string:uuid-${context/@@uuid}">
-        ...
-    </div>
-
-The view simply returns the UUID string as looked up by the ``IUUID`` adapter.
-
-Customising behaviour
-=====================
-
-There are two primary customisation points for this package:
-
-* You can change the default UUID generating algorithm by overriding the
-  unnamed utility providing the ``IUUIDGenerator`` interface. The default
-  implementation simply calls ``uuid.uuid1()`` and casts the result to a
-  ``str``.
-* You can change the UUID storage by providing a custom ``IUUID`` adapter
-  implementation. If you do this, you must also provide a mechanism for
-  assigning UUIDs upon object creation, usually via an event handler. To
-  obtain a UUID, use the ``IUUIDGenerator`` interface::
-
-    from zope.component import getUtility
-    from plone.uuid.interfaces import IUUIDGenerator
-
-    generator = getUtility(IUUIDGenerator)
-    uuid = generator()
-
-  You should also make sure that instances with a UUID provide a sub-interface
-  of ``plone.uuid.interfaces.IUUIDAware``.
diff --git a/setup.py b/setup.py
index 606a9f4..b16ab1f 100644
--- a/setup.py
+++ b/setup.py
@@ -1,29 +1,20 @@
-import os
 from setuptools import setup, find_packages
 
-
-def read(*rnames):
-    return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
-
-
 version = '1.0.4.dev0'
 
 long_description = (
-    read('README.txt')
-    + '\n' +
-#    read('plone', 'uuid', 'README.txt')
-#    + '\n' +
-    read('CHANGES.txt')
-    + '\n'
+    open('README.rst').read() + '\n' +
+    open('CHANGES.rst').read() + '\n'
     )
 
-setup(name='plone.uuid',
-      version=version,
-      description="UUIDs for content items",
-      long_description=long_description,
-      # Get more strings from
-      # https://pypi.python.org/pypi?%3Aaction=list_classifiers
-      classifiers=[
+setup(
+    name='plone.uuid',
+    version=version,
+    description="UUIDs for content items",
+    long_description=long_description,
+    # Get more strings from
+    # https://pypi.python.org/pypi?%3Aaction=list_classifiers
+    classifiers=[
         "Framework :: Plone",
         "Framework :: Plone :: 4.3",
         "Framework :: Plone :: 5.0",
@@ -31,23 +22,23 @@ def read(*rnames):
         "License :: OSI Approved :: BSD License",
         "Programming Language :: Python :: 2.6",
         "Programming Language :: Python :: 2.7",
-        ],
-      keywords='plone uuid',
-      author='Martin Aspeli',
-      author_email='optilude@gmail.com',
-      url='http://plone.org',
-      license='BSD',
-      packages=find_packages(exclude=['ez_setup']),
-      namespace_packages=['plone'],
-      include_package_data=True,
-      zip_safe=False,
-      install_requires=[
-          'setuptools',
-          'zope.browserpage',
-          'zope.interface',
-          'zope.lifecycleevent',
-          'zope.publisher',
-      ],
-      entry_points="""
-      """,
-      )
+    ],
+    keywords='plone uuid',
+    author='Martin Aspeli',
+    author_email='optilude@gmail.com',
+    url='http://plone.org',
+    license='BSD',
+    packages=find_packages(exclude=['ez_setup']),
+    namespace_packages=['plone'],
+    include_package_data=True,
+    zip_safe=False,
+    install_requires=[
+        'setuptools',
+        'zope.browserpage',
+        'zope.interface',
+        'zope.lifecycleevent',
+        'zope.publisher',
+    ],
+    entry_points="""
+    """,
+    )


