Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-07-13T07:42:08+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.content/commit/c4dfa7efcd0a8262f85676a01063f63843c89924

fix recursive workflow actions

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/workflow.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c05e968..c96629f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,6 +19,10 @@ Bug fixes:
   backwards compatibility alias for ``PERMISSIONS`` due to a wrong
   deprecation.  [maurits]
 
+- Fix recursive workflow actions. The ``isDefaultPage`` check acquired
+  the wrong parent context. Also bypass the recurse flag for default page
+  workflow state change. [petschki]
+
 
 3.1.2 (2016-07-05)
 ------------------
diff --git a/plone/app/content/browser/contents/workflow.py b/plone/app/content/browser/contents/workflow.py
index 3c82590..a761950 100644
--- a/plone/app/content/browser/contents/workflow.py
+++ b/plone/app/content/browser/contents/workflow.py
@@ -67,7 +67,7 @@ def __call__(self):
         else:
             return super(WorkflowActionView, self).__call__()
 
-    def action(self, obj):
+    def action(self, obj, bypass_recurse=False):
         transitions = self.pworkflow.getTransitionsFor(obj)
         if self.transition_id in [t['id'] for t in transitions]:
             try:
@@ -78,8 +78,9 @@ def action(self, obj):
                 self.pworkflow.doActionFor(obj, self.transition_id,
                                            comment=self.comments)
                 if self.putils.isDefaultPage(obj):
-                    self.action(obj.aq_parent.aq_parent)
-                if self.recurse and IFolderish.providedBy(obj):
+                    self.action(obj.aq_parent, bypass_recurse=True)
+                recurse = self.recurse and not bypass_recurse
+                if recurse and IFolderish.providedBy(obj):
                     for sub in obj.values():
                         self.action(sub)
             except ConflictError:


Repository: plone.app.content


Branch: refs/heads/master
Date: 2016-07-22T18:48:55+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/b6fdabf1bc1a52a8a2ee67089e5eec75c66f433b

Merge pull request #99 from plone/issue_94

fix recursive workflow actions

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/workflow.py

diff --git a/CHANGES.rst b/CHANGES.rst
index c05e968..c96629f 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -19,6 +19,10 @@ Bug fixes:
   backwards compatibility alias for ``PERMISSIONS`` due to a wrong
   deprecation.  [maurits]
 
+- Fix recursive workflow actions. The ``isDefaultPage`` check acquired
+  the wrong parent context. Also bypass the recurse flag for default page
+  workflow state change. [petschki]
+
 
 3.1.2 (2016-07-05)
 ------------------
diff --git a/plone/app/content/browser/contents/workflow.py b/plone/app/content/browser/contents/workflow.py
index 3c82590..a761950 100644
--- a/plone/app/content/browser/contents/workflow.py
+++ b/plone/app/content/browser/contents/workflow.py
@@ -67,7 +67,7 @@ def __call__(self):
         else:
             return super(WorkflowActionView, self).__call__()
 
-    def action(self, obj):
+    def action(self, obj, bypass_recurse=False):
         transitions = self.pworkflow.getTransitionsFor(obj)
         if self.transition_id in [t['id'] for t in transitions]:
             try:
@@ -78,8 +78,9 @@ def action(self, obj):
                 self.pworkflow.doActionFor(obj, self.transition_id,
                                            comment=self.comments)
                 if self.putils.isDefaultPage(obj):
-                    self.action(obj.aq_parent.aq_parent)
-                if self.recurse and IFolderish.providedBy(obj):
+                    self.action(obj.aq_parent, bypass_recurse=True)
+                recurse = self.recurse and not bypass_recurse
+                if recurse and IFolderish.providedBy(obj):
                     for sub in obj.values():
                         self.action(sub)
             except ConflictError:


