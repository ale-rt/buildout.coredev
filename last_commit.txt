Repository: plone.app.portlets


Branch: refs/heads/2.5.x
Date: 2016-09-20T14:11:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.portlets/commit/7e04d37ad5065da761b21576faa8aa1c54ea02ef

Apply security hotfix 20160830 for redirects.

Also, made sure that all form views have a `referer` property:
until now some did not have it, some had it as property, some had it
as method.

Files changed:
A plone/app/portlets/tests/test_redirects.py
M CHANGES.rst
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/z3cformhelper.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fbc828b..5841f93 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for redirects.  Also, made sure that
+  all form views have a ``referer`` property: until now some did not
+  have it, some had it as property, some had it as method.  [maurits]
 
 
 2.5.5 (2016-06-12)
diff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py
index e88879f..ef26c06 100644
--- a/plone/app/portlets/browser/adding.py
+++ b/plone/app/portlets/browser/adding.py
@@ -7,6 +7,7 @@
 
 from Acquisition import aq_inner, aq_base, aq_parent
 from OFS.SimpleItem import SimpleItem
+from Products.CMFCore.utils import getToolByName
 from Products.Five import BrowserView
 
 from plone.app.portlets.browser.interfaces import IPortletAdding
@@ -34,9 +35,14 @@ def add(self, content):
         chooser = INameChooser(manager)
         manager[chooser.chooseName(None, content)] = content
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if not referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        referer = self.referer
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
             url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
             referer = url + '/@@manage-portlets'
diff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py
index 51dd34a..49a268c 100644
--- a/plone/app/portlets/browser/editmanager.py
+++ b/plone/app/portlets/browser/editmanager.py
@@ -26,6 +26,7 @@
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.PythonScripts.standard import url_quote, url_unquote
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 
 from plone.app.portlets.browser.interfaces import IManageColumnPortletsView
@@ -429,9 +430,11 @@ def delete_portlet(self, name):
 
     def _nextUrl(self):
         referer = self.request.get('referer')
+        urltool = getToolByName(self.context, 'portal_url')
         if referer:
             referer = url_unquote(referer)
-        else:
+
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
             url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
             referer = '%s/@@manage-portlets' % (url,)
diff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py
index f92a35d..c913eab 100644
--- a/plone/app/portlets/browser/formhelper.py
+++ b/plone/app/portlets/browser/formhelper.py
@@ -7,6 +7,7 @@
 import zope.lifecycleevent
 
 from Acquisition import aq_parent, aq_inner
+from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
@@ -53,18 +54,25 @@ def __call__(self):
         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()
         return super(AddForm, self).__call__()
 
+    @property
     def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        referer = self.request.form.get('referer')
-        if referer:
-            return referer
-        else:
-            addview = aq_parent(aq_inner(self.context))
-            context = aq_parent(aq_inner(addview))
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-            return url + '/@@manage-portlets'
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
+        addview = aq_parent(aq_inner(self.context))
+        context = aq_parent(aq_inner(addview))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            # At least in tests we can get a TypeError: "There isn't enough
+            # context to get URL information. This is probably due to a bug in
+            # setting up location information."
+            url = self.context.absolute_url()
+        return url + '/@@manage-portlets'
 
     @form.action(_(u"label_save", default=u"Save"), name=u'save')
     def handle_save_action(self, action, data):
@@ -99,15 +107,22 @@ def __call__(self):
             self.request.response.redirect(self.nextURL())
         return ''
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if referer:
-            return referer
-        else:
-            addview = aq_parent(aq_inner(self.context))
-            context = aq_parent(aq_inner(addview))
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-            return url + '/@@manage-portlets'
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
+        addview = aq_parent(aq_inner(self.context))
+        context = aq_parent(aq_inner(addview))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
+        return url + '/@@manage-portlets'
 
     def create(self):
         raise NotImplementedError("concrete classes must implement create()")
@@ -125,18 +140,22 @@ def __call__(self):
         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()
         return super(EditForm, self).__call__()
 
+    @property
     def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        referer = self.request.form.get('referer')
-        if referer:
-            return referer
-        else:
-            portlet = aq_inner(self.context)
-            context = aq_parent(portlet)
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-            return url + '/@@manage-portlets'
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
+        editview = aq_parent(aq_inner(self.context))
+        context = aq_parent(aq_inner(editview))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
+        return url + '/@@manage-portlets'
 
     @form.action(_(u"label_save", default=u"Save"),
                  condition=form.haveInputWidgets,
diff --git a/plone/app/portlets/browser/z3cformhelper.py b/plone/app/portlets/browser/z3cformhelper.py
index e2a1944..81890b8 100644
--- a/plone/app/portlets/browser/z3cformhelper.py
+++ b/plone/app/portlets/browser/z3cformhelper.py
@@ -5,6 +5,7 @@
 import zope.event
 import zope.lifecycleevent
 
+from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 from Acquisition import aq_parent, aq_inner, aq_base
@@ -21,7 +22,7 @@ class AddForm(form.AddForm):
     implements(IPortletAddForm)
 
     template = ViewPageTemplateFile('templates/z3cform-portlets-pageform.pt')
-    
+
     label = _(u"Configure portlet")
 
     def add(self, object):
@@ -55,14 +56,21 @@ def createAndAdd(self, data):
     @property
     def referer(self):
         return self.request.get('referer', '')
-    
+
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         addview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(addview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            # At least in tests we can get a TypeError: "There isn't enough
+            # context to get URL information. This is probably due to a bug in
+            # setting up location information."
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='add')
@@ -92,7 +100,7 @@ class EditForm(form.EditForm):
     implements(IPortletEditForm)
 
     template = ViewPageTemplateFile('templates/z3cform-portlets-pageform.pt')
-    
+
     label = _(u"Modify portlet")
 
     def __call__(self):
@@ -107,12 +115,16 @@ def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         editview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(editview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='apply')
diff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py
new file mode 100644
index 0000000..94a99cf
--- /dev/null
+++ b/plone/app/portlets/tests/test_redirects.py
@@ -0,0 +1,63 @@
+# -*- coding: utf-8 -*-
+from plone.app.portlets.browser.adding import PortletAdding
+from plone.app.portlets.browser.editmanager import ManagePortletAssignments
+from plone.app.portlets.browser.formhelper import AddForm
+from plone.app.portlets.browser.formhelper import EditForm
+from plone.app.portlets.browser import z3cformhelper
+from plone.app.portlets.tests.base import PortletsTestCase
+
+
+class TestRedirects(PortletsTestCase):
+    _test_methods = [
+        (PortletAdding, 'nextURL'),
+        (ManagePortletAssignments, '_nextUrl'),
+        (AddForm, 'nextURL'),
+        (EditForm, 'nextURL'),
+        (z3cformhelper.AddForm, 'nextURL'),
+        (z3cformhelper.EditForm, 'nextURL'),
+    ]
+
+    def test_regression(self):
+        portal_url = self.portal.absolute_url()
+        request = self.portal.REQUEST
+        request.form.update({
+            'referer': portal_url
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, request)
+            view.__parent__ = self.portal
+            self.assertEqual(getattr(view, method)(), portal_url)
+
+    def test_valid_next_url(self):
+        request = self.portal.REQUEST
+        request.form.update({
+            'referer': 'http://attacker.com'
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, request)
+            view.__parent__ = self.portal
+            self.assertNotEqual('http://attacker.com', getattr(view, method)())
+
+
+def test_suite():
+    # Without this test_suite, there is a strange error when running the tests:
+    #
+    # Error in test runTest
+    # (plone.app.portlets.tests.base.PortletsTestCase)
+    # Traceback (most recent call last):
+    #   File "unittest2-0.5.1-py2.7.egg/unittest2/case.py", line 340, in run
+    #     testMethod()
+    #   TypeError: 'NoneType' object is not callable
+    #
+    # You get the error when running
+    # bin/test -s plone.app.portlets
+    # or
+    # bin/test -s plone.app.portlets -t run
+    # but not with
+    # bin/test -s plone.app.portlets -m test_redirects
+    # But the error *is* in this test_redirects.py file,
+    # because it goes away when I delete this file.
+    from unittest import TestSuite, makeSuite
+    suite = TestSuite()
+    suite.addTest(makeSuite(TestRedirects))
+    return suite


Repository: plone.app.portlets


Branch: refs/heads/2.5.x
Date: 2016-09-20T21:09:38+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.portlets/commit/ec9dcd13492f5abcb24b38ec4145f0d60959173c

Merge pull request #89 from plone/apply-hotfix-20160830-25x

Apply security hotfix 20160830 for redirects. [2.5.x, Plone 4.3]

Files changed:
A plone/app/portlets/tests/test_redirects.py
M CHANGES.rst
M plone/app/portlets/browser/adding.py
M plone/app/portlets/browser/editmanager.py
M plone/app/portlets/browser/formhelper.py
M plone/app/portlets/browser/z3cformhelper.py

diff --git a/CHANGES.rst b/CHANGES.rst
index fbc828b..5841f93 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,9 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Apply security hotfix 20160830 for redirects.  Also, made sure that
+  all form views have a ``referer`` property: until now some did not
+  have it, some had it as property, some had it as method.  [maurits]
 
 
 2.5.5 (2016-06-12)
diff --git a/plone/app/portlets/browser/adding.py b/plone/app/portlets/browser/adding.py
index e88879f..ef26c06 100644
--- a/plone/app/portlets/browser/adding.py
+++ b/plone/app/portlets/browser/adding.py
@@ -7,6 +7,7 @@
 
 from Acquisition import aq_inner, aq_base, aq_parent
 from OFS.SimpleItem import SimpleItem
+from Products.CMFCore.utils import getToolByName
 from Products.Five import BrowserView
 
 from plone.app.portlets.browser.interfaces import IPortletAdding
@@ -34,9 +35,14 @@ def add(self, content):
         chooser = INameChooser(manager)
         manager[chooser.chooseName(None, content)] = content
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if not referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        referer = self.referer
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
             url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
             referer = url + '/@@manage-portlets'
diff --git a/plone/app/portlets/browser/editmanager.py b/plone/app/portlets/browser/editmanager.py
index 51dd34a..49a268c 100644
--- a/plone/app/portlets/browser/editmanager.py
+++ b/plone/app/portlets/browser/editmanager.py
@@ -26,6 +26,7 @@
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 from Products.PythonScripts.standard import url_quote, url_unquote
+from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone.interfaces import IPloneSiteRoot
 
 from plone.app.portlets.browser.interfaces import IManageColumnPortletsView
@@ -429,9 +430,11 @@ def delete_portlet(self, name):
 
     def _nextUrl(self):
         referer = self.request.get('referer')
+        urltool = getToolByName(self.context, 'portal_url')
         if referer:
             referer = url_unquote(referer)
-        else:
+
+        if not referer or not urltool.isURLInPortal(referer):
             context = aq_parent(aq_inner(self.context))
             url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
             referer = '%s/@@manage-portlets' % (url,)
diff --git a/plone/app/portlets/browser/formhelper.py b/plone/app/portlets/browser/formhelper.py
index f92a35d..c913eab 100644
--- a/plone/app/portlets/browser/formhelper.py
+++ b/plone/app/portlets/browser/formhelper.py
@@ -7,6 +7,7 @@
 import zope.lifecycleevent
 
 from Acquisition import aq_parent, aq_inner
+from Products.CMFCore.utils import getToolByName
 from Products.Five.browser import BrowserView
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
@@ -53,18 +54,25 @@ def __call__(self):
         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()
         return super(AddForm, self).__call__()
 
+    @property
     def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        referer = self.request.form.get('referer')
-        if referer:
-            return referer
-        else:
-            addview = aq_parent(aq_inner(self.context))
-            context = aq_parent(aq_inner(addview))
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-            return url + '/@@manage-portlets'
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
+        addview = aq_parent(aq_inner(self.context))
+        context = aq_parent(aq_inner(addview))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            # At least in tests we can get a TypeError: "There isn't enough
+            # context to get URL information. This is probably due to a bug in
+            # setting up location information."
+            url = self.context.absolute_url()
+        return url + '/@@manage-portlets'
 
     @form.action(_(u"label_save", default=u"Save"), name=u'save')
     def handle_save_action(self, action, data):
@@ -99,15 +107,22 @@ def __call__(self):
             self.request.response.redirect(self.nextURL())
         return ''
 
+    @property
+    def referer(self):
+        return self.request.get('referer', '')
+
     def nextURL(self):
-        referer = self.request.get('referer')
-        if referer:
-            return referer
-        else:
-            addview = aq_parent(aq_inner(self.context))
-            context = aq_parent(aq_inner(addview))
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-            return url + '/@@manage-portlets'
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
+        addview = aq_parent(aq_inner(self.context))
+        context = aq_parent(aq_inner(addview))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
+        return url + '/@@manage-portlets'
 
     def create(self):
         raise NotImplementedError("concrete classes must implement create()")
@@ -125,18 +140,22 @@ def __call__(self):
         IPortletPermissionChecker(aq_parent(aq_inner(self.context)))()
         return super(EditForm, self).__call__()
 
+    @property
     def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        referer = self.request.form.get('referer')
-        if referer:
-            return referer
-        else:
-            portlet = aq_inner(self.context)
-            context = aq_parent(portlet)
-            url = str(getMultiAdapter((context, self.request), name=u"absolute_url"))
-            return url + '/@@manage-portlets'
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
+            return self.referer
+        editview = aq_parent(aq_inner(self.context))
+        context = aq_parent(aq_inner(editview))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
+        return url + '/@@manage-portlets'
 
     @form.action(_(u"label_save", default=u"Save"),
                  condition=form.haveInputWidgets,
diff --git a/plone/app/portlets/browser/z3cformhelper.py b/plone/app/portlets/browser/z3cformhelper.py
index e2a1944..81890b8 100644
--- a/plone/app/portlets/browser/z3cformhelper.py
+++ b/plone/app/portlets/browser/z3cformhelper.py
@@ -5,6 +5,7 @@
 import zope.event
 import zope.lifecycleevent
 
+from Products.CMFCore.utils import getToolByName
 from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
 
 from Acquisition import aq_parent, aq_inner, aq_base
@@ -21,7 +22,7 @@ class AddForm(form.AddForm):
     implements(IPortletAddForm)
 
     template = ViewPageTemplateFile('templates/z3cform-portlets-pageform.pt')
-    
+
     label = _(u"Configure portlet")
 
     def add(self, object):
@@ -55,14 +56,21 @@ def createAndAdd(self, data):
     @property
     def referer(self):
         return self.request.get('referer', '')
-    
+
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         addview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(addview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            # At least in tests we can get a TypeError: "There isn't enough
+            # context to get URL information. This is probably due to a bug in
+            # setting up location information."
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='add')
@@ -92,7 +100,7 @@ class EditForm(form.EditForm):
     implements(IPortletEditForm)
 
     template = ViewPageTemplateFile('templates/z3cform-portlets-pageform.pt')
-    
+
     label = _(u"Modify portlet")
 
     def __call__(self):
@@ -107,12 +115,16 @@ def referer(self):
         return self.request.get('referer', '')
 
     def nextURL(self):
-        if self.referer:
+        urltool = getToolByName(self.context, 'portal_url')
+        if self.referer and urltool.isURLInPortal(self.referer):
             return self.referer
         editview = aq_parent(aq_inner(self.context))
         context = aq_parent(aq_inner(editview))
-        url = str(getMultiAdapter((context, self.request),
-                                  name=u"absolute_url"))
+        try:
+            url = str(getMultiAdapter((context, self.request),
+                                      name=u"absolute_url"))
+        except (TypeError, AttributeError):
+            url = self.context.absolute_url()
         return url + '/@@manage-portlets'
 
     @button.buttonAndHandler(_(u"label_save", default=u"Save"), name='apply')
diff --git a/plone/app/portlets/tests/test_redirects.py b/plone/app/portlets/tests/test_redirects.py
new file mode 100644
index 0000000..94a99cf
--- /dev/null
+++ b/plone/app/portlets/tests/test_redirects.py
@@ -0,0 +1,63 @@
+# -*- coding: utf-8 -*-
+from plone.app.portlets.browser.adding import PortletAdding
+from plone.app.portlets.browser.editmanager import ManagePortletAssignments
+from plone.app.portlets.browser.formhelper import AddForm
+from plone.app.portlets.browser.formhelper import EditForm
+from plone.app.portlets.browser import z3cformhelper
+from plone.app.portlets.tests.base import PortletsTestCase
+
+
+class TestRedirects(PortletsTestCase):
+    _test_methods = [
+        (PortletAdding, 'nextURL'),
+        (ManagePortletAssignments, '_nextUrl'),
+        (AddForm, 'nextURL'),
+        (EditForm, 'nextURL'),
+        (z3cformhelper.AddForm, 'nextURL'),
+        (z3cformhelper.EditForm, 'nextURL'),
+    ]
+
+    def test_regression(self):
+        portal_url = self.portal.absolute_url()
+        request = self.portal.REQUEST
+        request.form.update({
+            'referer': portal_url
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, request)
+            view.__parent__ = self.portal
+            self.assertEqual(getattr(view, method)(), portal_url)
+
+    def test_valid_next_url(self):
+        request = self.portal.REQUEST
+        request.form.update({
+            'referer': 'http://attacker.com'
+        })
+        for Klass, method in self._test_methods:
+            view = Klass(self.portal, request)
+            view.__parent__ = self.portal
+            self.assertNotEqual('http://attacker.com', getattr(view, method)())
+
+
+def test_suite():
+    # Without this test_suite, there is a strange error when running the tests:
+    #
+    # Error in test runTest
+    # (plone.app.portlets.tests.base.PortletsTestCase)
+    # Traceback (most recent call last):
+    #   File "unittest2-0.5.1-py2.7.egg/unittest2/case.py", line 340, in run
+    #     testMethod()
+    #   TypeError: 'NoneType' object is not callable
+    #
+    # You get the error when running
+    # bin/test -s plone.app.portlets
+    # or
+    # bin/test -s plone.app.portlets -t run
+    # but not with
+    # bin/test -s plone.app.portlets -m test_redirects
+    # But the error *is* in this test_redirects.py file,
+    # because it goes away when I delete this file.
+    from unittest import TestSuite, makeSuite
+    suite = TestSuite()
+    suite.addTest(makeSuite(TestRedirects))
+    return suite


