Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-09-28T11:19:50+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/86427fe95074186e689420a13b6682f7d9e8c90b

Adapt to changes of MemberData in CMFCore

Files changed:
M CHANGES.rst
M src/Products/PlonePAS/tools/memberdata.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 261d071..3d19f29 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -6,7 +6,9 @@ Changelog
 
 Breaking changes:
 
-- *add item here*
+- Adapt to changes of MemberData in CMFCore.
+  Fixes https://github.com/plone/Products.PlonePAS/issues/24
+  [pbauer]
 
 New features:
 
diff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py
index 3458f6d..a5b04ad 100644
--- a/src/Products/PlonePAS/tools/memberdata.py
+++ b/src/Products/PlonePAS/tools/memberdata.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl.requestmethod import postonly
-from Acquisition import aq_base
 from App.class_init import InitializeClass
 from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2
+from Products.CMFCore.interfaces import IMember
 from Products.CMFCore.MemberDataTool import _marker
-from Products.CMFCore.MemberDataTool import MemberData as BaseMemberData
+from Products.CMFCore.MemberDataTool import MemberAdapter as BaseMemberAdapter
 from Products.CMFCore.MemberDataTool import MemberDataTool as BaseTool
 from Products.CMFCore.permissions import ManagePortal
 from Products.CMFCore.utils import getToolByName
@@ -183,28 +183,13 @@ def canAddMemberData(self):
             pass
         return False
 
-    # an exact copy from the base, so that we pick up the new MemberData.
-    # wrapUser should have a MemberData factory method to over-ride (or even
-    # set at run-time!) so that we don't have to do this.
+    # FIXME: MemberData shoud probably be a more specific adapter.
     def wrapUser(self, u):
         '''
         If possible, returns the Member object that corresponds
         to the given User object.
-        We override this to ensure OUR MemberData class is used
         '''
-        user_id = u.getId()
-        members = self._members
-        if user_id not in members:
-            base = aq_base(self)
-            md = MemberData(base, user_id)
-            if self.canAddMemberData():
-                # XXX do not write on read
-                members[user_id] = md
-            return md.__of__(self).__of__(u)
-        else:
-            # Return a wrapper with self as containment and
-            # the user as context.
-            return members[user_id].__of__(self).__of__(u)
+        return MemberData(u, self)
 
     @postonly
     def deleteMemberData(self, member_id, REQUEST=None):
@@ -238,11 +223,17 @@ def _getPlugins(self):
 InitializeClass(MemberDataTool)
 
 
-@implementer(IManageCapabilities)
-class MemberData(BaseMemberData):
+# FIXME: MemberData should probably be a more specific adapter
+# instead of a subclass.
+@implementer(IManageCapabilities, IMember)
+class MemberData(BaseMemberAdapter):
 
     security = ClassSecurityInfo()
 
+    def __init__(self, user, tool):
+        BaseMemberAdapter.__init__(self, user, tool)
+        self.id = user.getId()
+
     # setProperties uses setMemberProperties. no need to override.
 
     def setMemberProperties(self, mapping, force_local=0, force_empty=False):
@@ -252,10 +243,10 @@ def setMemberProperties(self, mapping, force_local=0, force_empty=False):
         sheets = None
 
         # We could pay attention to force_local here...
-        if not IPluggableAuthService.providedBy(self.acl_users):
+        if not IPluggableAuthService.providedBy(self._tool.acl_users):
             # Defer to base impl in absence of PAS, a PAS user, or
             # property sheets
-            return BaseMemberData.setMemberProperties(self, mapping)
+            return BaseMemberAdapter.setMemberProperties(self, mapping)
         else:
             # It's a PAS! Whee!
             user = self.getUser()
@@ -266,7 +257,7 @@ def setMemberProperties(self, mapping, force_local=0, force_empty=False):
             if not sheets:
                 # Defer to base impl if we have a PAS but no property
                 # sheets.
-                return BaseMemberData.setMemberProperties(self, mapping)
+                return BaseMemberAdapter.setMemberProperties(self, mapping)
 
         # If we got this far, we have a PAS and some property sheets.
         # XXX track values set to defer to default impl
@@ -291,8 +282,8 @@ def getProperty(self, id, default=_marker):
         through the ordered property sheets.
         """
         sheets = None
-        if not IPluggableAuthService.providedBy(self.acl_users):
-            return BaseMemberData.getProperty(self, id)
+        if not IPluggableAuthService.providedBy(self._tool.acl_users):
+            return BaseMemberAdapter.getProperty(self, id)
         else:
             # It's a PAS! Whee!
             user = self.getUser()
@@ -302,7 +293,7 @@ def getProperty(self, id, default=_marker):
             # nor are guaranteed property sheets
             if not sheets:
                 try:
-                    return BaseMemberData.getProperty(self, id, default)
+                    return BaseMemberAdapter.getProperty(self, id, default)
                 except ValueError:
                     # Zope users don't have PropertySheets,
                     # return an empty string for them if the property
@@ -325,7 +316,7 @@ def getProperty(self, id, default=_marker):
 
         # Couldn't find the property in the property sheets. Try to
         # delegate back to the base implementation.
-        return BaseMemberData.getProperty(self, id, default)
+        return BaseMemberAdapter.getProperty(self, id, default)
 
     def getPassword(self):
         """Returns None. Present to avoid NotImplementedError."""
@@ -373,7 +364,7 @@ def canWriteProperty(self, prop_name):
         """True iff the member/group property named in 'prop_name'
         can be changed.
         """
-        if not IPluggableAuthService.providedBy(self.acl_users):
+        if not IPluggableAuthService.providedBy(self._tool.acl_users):
             # not PAS; Memberdata is writable
             return self._memberdataHasProperty(prop_name)
         else:
@@ -444,11 +435,17 @@ def setSecurityProfile(self, password=None, roles=None, domains=None):
 
         u.userFolderEditUser(u.getUserId(), password, roles, domains)
 
-    # plugin getters
-
     @security.private
     def _getPlugins(self):
-        return self.acl_users.plugins
+        return self._tool._getPlugins()
+
+    @security.public
+    def has_permission(self, permission, object):
+        return self._user.has_permission(permission, object)
+
+    @security.public
+    def getGroups(self):
+        return self._user.getGroups()
 
 
 InitializeClass(MemberData)


Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-10-09T19:14:06+02:00
Author: Philip Bauer (pbauer) <bauer@starzel.de>
Commit: https://github.com/plone/Products.PlonePAS/commit/ea06e3bb11f9ee915f6063c880e3d25f15f74b5e

remove FIXME

Files changed:
M src/Products/PlonePAS/tools/memberdata.py

diff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py
index a5b04ad..3959b8e 100644
--- a/src/Products/PlonePAS/tools/memberdata.py
+++ b/src/Products/PlonePAS/tools/memberdata.py
@@ -183,7 +183,6 @@ def canAddMemberData(self):
             pass
         return False
 
-    # FIXME: MemberData shoud probably be a more specific adapter.
     def wrapUser(self, u):
         '''
         If possible, returns the Member object that corresponds
@@ -223,8 +222,6 @@ def _getPlugins(self):
 InitializeClass(MemberDataTool)
 
 
-# FIXME: MemberData should probably be a more specific adapter
-# instead of a subclass.
 @implementer(IManageCapabilities, IMember)
 class MemberData(BaseMemberAdapter):
 


Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-10-20T10:41:12+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/c1aaff314266298113e59897e680e100a5dabf58

wrap member data adapter in the user again so it can acquire user methods

Files changed:
M src/Products/PlonePAS/tools/memberdata.py

diff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py
index 3959b8e..451e3b2 100644
--- a/src/Products/PlonePAS/tools/memberdata.py
+++ b/src/Products/PlonePAS/tools/memberdata.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl.requestmethod import postonly
+from Acquisition import Implicit
 from App.class_init import InitializeClass
 from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2
 from Products.CMFCore.interfaces import IMember
@@ -188,7 +189,7 @@ def wrapUser(self, u):
         If possible, returns the Member object that corresponds
         to the given User object.
         '''
-        return MemberData(u, self)
+        return MemberData(u, self).__of__(u)
 
     @postonly
     def deleteMemberData(self, member_id, REQUEST=None):
@@ -223,7 +224,7 @@ def _getPlugins(self):
 
 
 @implementer(IManageCapabilities, IMember)
-class MemberData(BaseMemberAdapter):
+class MemberData(Implicit, BaseMemberAdapter):
 
     security = ClassSecurityInfo()
 


Repository: Products.PlonePAS


Branch: refs/heads/master
Date: 2017-10-20T12:31:13+02:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/Products.PlonePAS/commit/a80db7d7f59594bb5b9fd50b76baa5b0f3cd89db

no wrapping, add getUserId

Files changed:
M src/Products/PlonePAS/tools/memberdata.py

diff --git a/src/Products/PlonePAS/tools/memberdata.py b/src/Products/PlonePAS/tools/memberdata.py
index 451e3b2..1eca78b 100644
--- a/src/Products/PlonePAS/tools/memberdata.py
+++ b/src/Products/PlonePAS/tools/memberdata.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from AccessControl import ClassSecurityInfo
 from AccessControl.requestmethod import postonly
-from Acquisition import Implicit
+from Acquisition import aq_inner, aq_parent
 from App.class_init import InitializeClass
 from Products.BTreeFolder2.BTreeFolder2 import BTreeFolder2
 from Products.CMFCore.interfaces import IMember
@@ -189,7 +189,7 @@ def wrapUser(self, u):
         If possible, returns the Member object that corresponds
         to the given User object.
         '''
-        return MemberData(u, self).__of__(u)
+        return MemberData(u, self)
 
     @postonly
     def deleteMemberData(self, member_id, REQUEST=None):
@@ -224,7 +224,7 @@ def _getPlugins(self):
 
 
 @implementer(IManageCapabilities, IMember)
-class MemberData(Implicit, BaseMemberAdapter):
+class MemberData(BaseMemberAdapter):
 
     security = ClassSecurityInfo()
 
@@ -445,5 +445,9 @@ def has_permission(self, permission, object):
     def getGroups(self):
         return self._user.getGroups()
 
+    @security.public
+    def getUserId(self):
+        return self.id
+
 
 InitializeClass(MemberData)


