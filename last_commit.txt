Repository: plone.app.content


Branch: refs/heads/master
Date: 2017-04-13T11:07:04+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/687f5320b18d1ddfba83fc47b53b2d6a948634ad

folder contents: more sort options
Folder Contents: Construct the list of sortable indexes from the available catalog indexes, using a blacklist and a default set - likewise as it's done with metadata columns.

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 20e0085..5102c90 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Folder Contents: Construct the list of sortable indexes from the available catalog indexes, using a blacklist and a default set - likewise as it's done with metadata columns.
+  [thet]
 
 Bug fixes:
 
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index c42d675..4a038d5 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -216,6 +216,61 @@ def get_columns(self):
                 columns[column] = translate(_(column), context=self.request)
         return columns
 
+    @property
+    def ignored_indexes(self):
+        ignored = [
+            'Date',
+            'Description',
+            'Title',
+            'allowedRolesAndUsers',
+            'author_name',
+            'cmf_uid',
+            'commentators',
+            'effectiveRange',
+            'getId',
+            'getObjectPositionInParent',
+            'getRawRelatedItems',
+            'in_reply_to',
+            'meta_type',
+            'modified',
+            'object_provides',
+            'portal_type',
+            'SearchableText',
+            'sync_uid'
+        ]
+        return ignored
+
+    def get_indexes(self):
+        # Base set of indexes
+        indexes = {
+            'created': translate(_('Created on'), context=self.request),
+            'Creator': translate(_('Creator'), context=self.request),
+            'effective': translate(_('Publication date'), context=self.request),  # noqa
+            'end': translate(_('End Date'), context=self.request),
+            'expires': translate(_('Expiration date'), context=self.request),
+            'id': translate(_('ID'), context=self.request),
+            'is_folderish': translate(_('Folder'), context=self.request),
+            'ModificationDate': translate(_('Last modified'), context=self.request),  # noqa
+            'review_state': translate(_('Review state'), context=self.request),
+            'sortable_title': translate(_('Title'), context=self.request),
+            'start': translate(_('Start Date'), context=self.request),
+            'Subject': translate(_('Tags'), context=self.request),
+            'total_comments': translate(_('Total comments'), context=self.request),  # noqa
+            'Type': translate(_('Type'), context=self.request),
+        }
+        # Filter out ignored
+        indexes = {
+            k: v for k, v in indexes.iteritems()
+            if k not in self.ignored_indexes
+        }
+        # Add in extra metadata indexes
+        catalog = getToolByName(self.context, 'portal_catalog')
+        cat_indexes = [idx for idx in catalog.indexes()]
+        for index in cat_indexes:
+            if index not in indexes and index not in self.ignored_indexes:
+                indexes[index] = translate(_(index), context=self.request)
+        return indexes
+
     def get_options(self):
         site = get_top_site_from_url(self.context, self.request)
         base_url = site.absolute_url()
@@ -238,14 +293,7 @@ def get_options(self):
             'attributes': ['Title', 'path', 'getURL', 'getIcon', 'portal_type'] + columns.keys(),  # noqa
             'buttons': self.get_actions(),
             'rearrange': {
-                'properties': {
-                    'id': translate(_('Id'), context=self.request),
-                    'sortable_title': translate(_('Title'), context=self.request),  # noqa
-                    'modified': translate(_('Last modified'), context=self.request),  # noqa
-                    'created': translate(_('Created on'), context=self.request),  # noqa
-                    'effective': translate(_('Publication date'), context=self.request),  # noqa
-                    'Type': translate(_('Type'), context=self.request)
-                },
+                'properties': self.get_indexes(),
                 'url': '%s{path}/@@fc-rearrange' % base_url
             },
             'basePath': '/' + '/'.join(context_path[len(site_path):]),


Repository: plone.app.content


Branch: refs/heads/master
Date: 2017-04-13T13:43:18+02:00
Author: Robert Niederreiter (rnixx) <office@squarewave.at>
Commit: https://github.com/plone/plone.app.content/commit/276b09ebfafddfcab8542cc625419d3ff85d04ce

Merge pull request #122 from plone/thet-fc-sortindexes

folder contents: more sort options

Files changed:
M CHANGES.rst
M plone/app/content/browser/contents/__init__.py

diff --git a/CHANGES.rst b/CHANGES.rst
index 20e0085..5102c90 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -11,7 +11,8 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Folder Contents: Construct the list of sortable indexes from the available catalog indexes, using a blacklist and a default set - likewise as it's done with metadata columns.
+  [thet]
 
 Bug fixes:
 
diff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py
index c42d675..4a038d5 100644
--- a/plone/app/content/browser/contents/__init__.py
+++ b/plone/app/content/browser/contents/__init__.py
@@ -216,6 +216,61 @@ def get_columns(self):
                 columns[column] = translate(_(column), context=self.request)
         return columns
 
+    @property
+    def ignored_indexes(self):
+        ignored = [
+            'Date',
+            'Description',
+            'Title',
+            'allowedRolesAndUsers',
+            'author_name',
+            'cmf_uid',
+            'commentators',
+            'effectiveRange',
+            'getId',
+            'getObjectPositionInParent',
+            'getRawRelatedItems',
+            'in_reply_to',
+            'meta_type',
+            'modified',
+            'object_provides',
+            'portal_type',
+            'SearchableText',
+            'sync_uid'
+        ]
+        return ignored
+
+    def get_indexes(self):
+        # Base set of indexes
+        indexes = {
+            'created': translate(_('Created on'), context=self.request),
+            'Creator': translate(_('Creator'), context=self.request),
+            'effective': translate(_('Publication date'), context=self.request),  # noqa
+            'end': translate(_('End Date'), context=self.request),
+            'expires': translate(_('Expiration date'), context=self.request),
+            'id': translate(_('ID'), context=self.request),
+            'is_folderish': translate(_('Folder'), context=self.request),
+            'ModificationDate': translate(_('Last modified'), context=self.request),  # noqa
+            'review_state': translate(_('Review state'), context=self.request),
+            'sortable_title': translate(_('Title'), context=self.request),
+            'start': translate(_('Start Date'), context=self.request),
+            'Subject': translate(_('Tags'), context=self.request),
+            'total_comments': translate(_('Total comments'), context=self.request),  # noqa
+            'Type': translate(_('Type'), context=self.request),
+        }
+        # Filter out ignored
+        indexes = {
+            k: v for k, v in indexes.iteritems()
+            if k not in self.ignored_indexes
+        }
+        # Add in extra metadata indexes
+        catalog = getToolByName(self.context, 'portal_catalog')
+        cat_indexes = [idx for idx in catalog.indexes()]
+        for index in cat_indexes:
+            if index not in indexes and index not in self.ignored_indexes:
+                indexes[index] = translate(_(index), context=self.request)
+        return indexes
+
     def get_options(self):
         site = get_top_site_from_url(self.context, self.request)
         base_url = site.absolute_url()
@@ -238,14 +293,7 @@ def get_options(self):
             'attributes': ['Title', 'path', 'getURL', 'getIcon', 'portal_type'] + columns.keys(),  # noqa
             'buttons': self.get_actions(),
             'rearrange': {
-                'properties': {
-                    'id': translate(_('Id'), context=self.request),
-                    'sortable_title': translate(_('Title'), context=self.request),  # noqa
-                    'modified': translate(_('Last modified'), context=self.request),  # noqa
-                    'created': translate(_('Created on'), context=self.request),  # noqa
-                    'effective': translate(_('Publication date'), context=self.request),  # noqa
-                    'Type': translate(_('Type'), context=self.request)
-                },
+                'properties': self.get_indexes(),
                 'url': '%s{path}/@@fc-rearrange' % base_url
             },
             'basePath': '/' + '/'.join(context_path[len(site_path):]),


