Repository: plone.alterego


Branch: refs/heads/master
Date: 2016-10-22T15:49:25-04:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.alterego/commit/163f5df00997c8fd74742fdd0327ba70511849eb

Fix tests on Python 3.5

Files changed:
A .travis.yml
A bootstrap-buildout.py
A buildout.cfg
A default.nix
M plone/alterego/alterego.txt
M plone/alterego/dynamic.py
M plone/alterego/tests.py
M setup.py

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..b8c4461
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+python:
+- 2.6
+- 2.7
+- 3.5
+sudo: false
+cache:
+  directories:
+  - eggs
+install:
+- python bootstrap-buildout.py
+- bin/buildout -N -t 3
+script: bin/test
diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py
new file mode 100644
index 0000000..a459921
--- /dev/null
+++ b/bootstrap-buildout.py
@@ -0,0 +1,210 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
+
+options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
+
+######################################################################
+# load/install setuptools
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..b317a96
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,7 @@
+[buildout]
+parts = test
+develop = .
+
+[test]
+recipe = zc.recipe.testrunner
+eggs = plone.alterego [test]
diff --git a/default.nix b/default.nix
new file mode 100644
index 0000000..3c8459a
--- /dev/null
+++ b/default.nix
@@ -0,0 +1,35 @@
+{ pkgs ? import (builtins.fetchTarball  # revision for reproducible builds
+  "https://github.com/nixos/nixpkgs-channels/archive/nixos-16.03.tar.gz") {}
+, pythonPackages ? pkgs.python35Packages
+}:
+
+let self = {
+  buildout = pythonPackages.zc_buildout_nix.overrideDerivation(args: {
+    postInstall = "";
+    propagatedNativeBuildInputs = [
+        pythonPackages.lxml
+    ];
+  });
+};
+
+in pkgs.stdenv.mkDerivation rec {
+  name = "env";
+  # Mandatory boilerplate for buildable env
+  env = pkgs.buildEnv { name = name; paths = buildInputs; };
+  builder = builtins.toFile "builder.sh" ''
+    source $stdenv/setup; ln -s $env $out
+  '';
+  # Customizable development requirements
+  buildInputs = with self; [
+    buildout
+    pkgs.python35
+  ];
+  # Customizable development shell setup
+  shellHook = ''
+    export SSL_CERT_FILE=${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt
+  '';
+}
+
+# ~/.zshrc:
+# function nix_prompt { test $IN_NIX_SHELL && echo '[nix-shell] ' }
+# ZSH_THEME_GIT_PROMPT_PREFIX="$(nix_prompt)$ZSH_THEME_GIT_PROMPT_PREFIX"
diff --git a/plone/alterego/alterego.txt b/plone/alterego/alterego.txt
index 179ece0..345c484 100644
--- a/plone/alterego/alterego.txt
+++ b/plone/alterego/alterego.txt
@@ -33,8 +33,9 @@ class that should get a unique interface for each instance.
     >>> from zope import interface
     >>> class IContent(interface.Interface):
     ...     pass
-    >>> class Content(object):
-    ...     interface.implements(IContent)
+    >>> @interface.implementer(IContent)
+    ... class Content(object):
+    ...     pass
 
     >>> c1 = Content()
 
@@ -80,11 +81,11 @@ for different dynamic modules.
 
     >>> from plone.alterego.interfaces import IDynamicObjectFactory
     >>> from zope.interface.interface import InterfaceClass
-    >>> class InterfaceOnDemand(object):
-    ...     interface.implements(IDynamicObjectFactory)
+    >>> @interface.implementer(IDynamicObjectFactory)
+    ... class InterfaceOnDemand(object):
     ...
     ...     def __call__(self, name, module):
-    ...         print "Creating", name, "in", module.__name__
+    ...         print("Creating %s in %s" % (name, module.__name__))
     ...         schema = InterfaceClass(name, (interface.Interface,), __module__=module.__name__)
     ...         setattr(module, name, schema)
     ...         return schema
@@ -107,18 +108,28 @@ We could then create an on-demand interface easily:
     >>> interface.alsoProvides(c1, dynamic.ITwo)
     Creating ITwo in plone.alterego.tests.dynamic
 
-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3
     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
      <InterfaceClass __builtin__.IContent>,
      <InterfaceClass zope.interface.Interface>]
 
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2
+    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
+     <InterfaceClass builtins.IContent>,
+     <InterfaceClass zope.interface.Interface>]
+
 Crucially, so long as the factory always returns the same thing, the same
 objects will be returned each time the module is accessed.
 
     >>> del dynamic
     >>> del dynamic_module
 
-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3
     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
      <InterfaceClass __builtin__.IContent>,
-     <InterfaceClass zope.interface.Interface>]
\ No newline at end of file
+     <InterfaceClass zope.interface.Interface>]
+
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2
+    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
+     <InterfaceClass builtins.IContent>,
+     <InterfaceClass zope.interface.Interface>]
diff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py
index e24e896..d304d88 100644
--- a/plone/alterego/dynamic.py
+++ b/plone/alterego/dynamic.py
@@ -1,5 +1,5 @@
 import sys
-from new import module
+from types import ModuleType
 
 from zope.interface import implementer
 from zope.component import queryUtility
@@ -7,8 +7,9 @@
 from plone.alterego.interfaces import IDynamicModule
 from plone.alterego.interfaces import IDynamicObjectFactory
 
+
 @implementer(IDynamicModule)
-class DynamicModule(module):
+class DynamicModule(ModuleType):
     """A module that can create objects on the fly.
     """
 
diff --git a/plone/alterego/tests.py b/plone/alterego/tests.py
index 3e3bad6..480fd5a 100644
--- a/plone/alterego/tests.py
+++ b/plone/alterego/tests.py
@@ -1,14 +1,30 @@
 import doctest
 import unittest
+import sys
 
 import zope.component.testing
 
+SKIP_PYTHON_2 = doctest.register_optionflag('SKIP_PYTHON_2')
+SKIP_PYTHON_3 = doctest.register_optionflag('SKIP_PYTHON_3')
+
+
+class PolyglotOutputChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if optionflags & SKIP_PYTHON_3 and sys.version_info >= (3,):
+            return True
+        elif optionflags & SKIP_PYTHON_2:
+            return True
+
+        return doctest.OutputChecker.check_output(
+            self, want, got, optionflags)
+
 
 def test_suite():
     return unittest.TestSuite((
 
         doctest.DocFileSuite('alterego.txt',
-                     # setUp=setUp,
-                     tearDown=zope.component.testing.tearDown),
+             # setUp=setUp,
+             tearDown=zope.component.testing.tearDown,
+             checker=PolyglotOutputChecker())
 
         ))
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 7a16601..d0c0495 100644
--- a/setup.py
+++ b/setup.py
@@ -31,8 +31,13 @@
     zip_safe=False,
     install_requires=[
         'setuptools',
+        'zope.component',
+        'zope.interface',
     ],
+    extras_require={
+        'test': []
+    },
     entry_points="""
     # -*- Entry points: -*-
     """,
-    )
\ No newline at end of file
+    )


Repository: plone.alterego


Branch: refs/heads/master
Date: 2016-10-22T15:49:51-04:00
Author: Ramon Navarro Bosch (bloodbare) <ramon.nb@gmail.com>
Commit: https://github.com/plone/plone.alterego/commit/77ab851ca47c1c47b98f947b73b56fd57453258b

Adding gitignore

Files changed:
M .gitignore

diff --git a/.gitignore b/.gitignore
index 350b1c5..8ff6319 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 *.egg-info
 *.pyc
 *.pyo
+__pycache__


Repository: plone.alterego


Branch: refs/heads/master
Date: 2016-10-22T15:55:17-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.alterego/commit/1f98363b1b638e86f1ac5c939a9cc424de0c2524

changelog, pep8

Files changed:
M CHANGES.rst
M plone/alterego/dynamic.py
M plone/alterego/interfaces.py
M plone/alterego/tests.py
D plone/alterego/configure.zcml

diff --git a/CHANGES.rst b/CHANGES.rst
index 0350460..e4f6ccc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add compatibility with Python 3. [datakurre]
 
 Bug fixes:
 
diff --git a/plone/alterego/configure.zcml b/plone/alterego/configure.zcml
deleted file mode 100644
index bbad907..0000000
--- a/plone/alterego/configure.zcml
+++ /dev/null
@@ -1,7 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:five="http://namespaces.zope.org/five"
-    i18n_domain="plone.alterego">
-
-
-</configure>
diff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py
index d304d88..960a873 100644
--- a/plone/alterego/dynamic.py
+++ b/plone/alterego/dynamic.py
@@ -1,11 +1,9 @@
-import sys
-from types import ModuleType
-
-from zope.interface import implementer
-from zope.component import queryUtility
-
 from plone.alterego.interfaces import IDynamicModule
 from plone.alterego.interfaces import IDynamicObjectFactory
+from types import ModuleType
+from zope.component import queryUtility
+from zope.interface import implementer
+import sys
 
 
 @implementer(IDynamicModule)
@@ -20,17 +18,23 @@ def __getattr__(self, name):
 
         factory = queryUtility(IDynamicObjectFactory, name=self.__name__)
         if factory is None:
-            raise AttributeError("Cannot find dynamic object factory for module %s" % self.__name__)
+            raise AttributeError(
+                "Cannot find dynamic object factory for module %s" %
+                self.__name__)
 
         obj = factory(name, self)
         if obj is None:
-            raise AttributeError("Dynamic module factory did not want to create %s in %s" % (name, self.__name__))
+            raise AttributeError(
+                "Dynamic module factory did not want to create %s in %s" %
+                (name, self.__name__))
 
         return obj
 
+
 def create(dotted_name):
     dynamic = DynamicModule(dotted_name)
     sys.modules[dotted_name] = dynamic
     return dynamic
 
-__all__ = ('create',)
\ No newline at end of file
+
+__all__ = ('create',)
diff --git a/plone/alterego/interfaces.py b/plone/alterego/interfaces.py
index 68b8c85..7625fb4 100644
--- a/plone/alterego/interfaces.py
+++ b/plone/alterego/interfaces.py
@@ -1,9 +1,11 @@
 from zope.interface import Interface
 
+
 class IDynamicModule(Interface):
     """Marker interface for dynamic modules
     """
 
+
 class IDynamicObjectFactory(Interface):
     """A factory capable of creating objects on the fly.
 
@@ -23,4 +25,4 @@ def __call__(name, module):
         This function should return a new object, or return None, in which
         case the dynamic module will generate an AttributeError. There is
         no need to mess with sys.modules or modify the 'module' object.
-        """
\ No newline at end of file
+        """
diff --git a/plone/alterego/tests.py b/plone/alterego/tests.py
index 480fd5a..8a58888 100644
--- a/plone/alterego/tests.py
+++ b/plone/alterego/tests.py
@@ -1,7 +1,6 @@
 import doctest
-import unittest
 import sys
-
+import unittest
 import zope.component.testing
 
 SKIP_PYTHON_2 = doctest.register_optionflag('SKIP_PYTHON_2')
@@ -21,10 +20,9 @@ def check_output(self, want, got, optionflags):
 
 def test_suite():
     return unittest.TestSuite((
-
-        doctest.DocFileSuite('alterego.txt',
-             # setUp=setUp,
-             tearDown=zope.component.testing.tearDown,
-             checker=PolyglotOutputChecker())
-
-        ))
\ No newline at end of file
+        doctest.DocFileSuite(
+            'alterego.txt',
+            tearDown=zope.component.testing.tearDown,
+            checker=PolyglotOutputChecker(),
+        ),
+    ))


Repository: plone.alterego


Branch: refs/heads/master
Date: 2016-10-22T15:59:21-04:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.alterego/commit/f79b6f52dd8fe978878ddeb9e1fd117f879965b3

trigger travis

Files changed:
M setup.py

diff --git a/setup.py b/setup.py
index d0c0495..7478afd 100644
--- a/setup.py
+++ b/setup.py
@@ -40,4 +40,4 @@
     entry_points="""
     # -*- Entry points: -*-
     """,
-    )
+)


Repository: plone.alterego


Branch: refs/heads/master
Date: 2016-10-22T23:34:39-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.alterego/commit/3fafa0f3ab9fb307298b79bcb410036de081f609

Merge pull request #4 from plone/py3

Add python 3 compatibility

Files changed:
A .travis.yml
A bootstrap-buildout.py
A buildout.cfg
A default.nix
M .gitignore
M CHANGES.rst
M plone/alterego/alterego.txt
M plone/alterego/dynamic.py
M plone/alterego/interfaces.py
M plone/alterego/tests.py
M setup.py
D plone/alterego/configure.zcml

diff --git a/.gitignore b/.gitignore
index 350b1c5..8ff6319 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 *.egg-info
 *.pyc
 *.pyo
+__pycache__
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..b8c4461
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,13 @@
+language: python
+python:
+- 2.6
+- 2.7
+- 3.5
+sudo: false
+cache:
+  directories:
+  - eggs
+install:
+- python bootstrap-buildout.py
+- bin/buildout -N -t 3
+script: bin/test
diff --git a/CHANGES.rst b/CHANGES.rst
index 0350460..e4f6ccc 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,7 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add compatibility with Python 3. [datakurre]
 
 Bug fixes:
 
diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py
new file mode 100644
index 0000000..a459921
--- /dev/null
+++ b/bootstrap-buildout.py
@@ -0,0 +1,210 @@
+##############################################################################
+#
+# Copyright (c) 2006 Zope Foundation and Contributors.
+# All Rights Reserved.
+#
+# This software is subject to the provisions of the Zope Public License,
+# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
+# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
+# FOR A PARTICULAR PURPOSE.
+#
+##############################################################################
+"""Bootstrap a buildout-based project
+
+Simply run this script in a directory containing a buildout.cfg.
+The script accepts buildout command-line options, so you can
+use the -c option to specify an alternate configuration file.
+"""
+
+import os
+import shutil
+import sys
+import tempfile
+
+from optparse import OptionParser
+
+__version__ = '2015-07-01'
+# See zc.buildout's changelog if this version is up to date.
+
+tmpeggs = tempfile.mkdtemp(prefix='bootstrap-')
+
+usage = '''\
+[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]
+
+Bootstraps a buildout-based project.
+
+Simply run this script in a directory containing a buildout.cfg, using the
+Python that you want bin/buildout to use.
+
+Note that by using --find-links to point to local resources, you can keep
+this script from going over the network.
+'''
+
+parser = OptionParser(usage=usage)
+parser.add_option("--version",
+                  action="store_true", default=False,
+                  help=("Return bootstrap.py version."))
+parser.add_option("-t", "--accept-buildout-test-releases",
+                  dest='accept_buildout_test_releases',
+                  action="store_true", default=False,
+                  help=("Normally, if you do not specify a --version, the "
+                        "bootstrap script and buildout gets the newest "
+                        "*final* versions of zc.buildout and its recipes and "
+                        "extensions for you.  If you use this flag, "
+                        "bootstrap and buildout will get the newest releases "
+                        "even if they are alphas or betas."))
+parser.add_option("-c", "--config-file",
+                  help=("Specify the path to the buildout configuration "
+                        "file to be used."))
+parser.add_option("-f", "--find-links",
+                  help=("Specify a URL to search for buildout releases"))
+parser.add_option("--allow-site-packages",
+                  action="store_true", default=False,
+                  help=("Let bootstrap.py use existing site packages"))
+parser.add_option("--buildout-version",
+                  help="Use a specific zc.buildout version")
+parser.add_option("--setuptools-version",
+                  help="Use a specific setuptools version")
+parser.add_option("--setuptools-to-dir",
+                  help=("Allow for re-use of existing directory of "
+                        "setuptools versions"))
+
+options, args = parser.parse_args()
+if options.version:
+    print("bootstrap.py version %s" % __version__)
+    sys.exit(0)
+
+
+######################################################################
+# load/install setuptools
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import urlopen
+
+ez = {}
+if os.path.exists('ez_setup.py'):
+    exec(open('ez_setup.py').read(), ez)
+else:
+    exec(urlopen('https://bootstrap.pypa.io/ez_setup.py').read(), ez)
+
+if not options.allow_site_packages:
+    # ez_setup imports site, which adds site packages
+    # this will remove them from the path to ensure that incompatible versions
+    # of setuptools are not in the path
+    import site
+    # inside a virtualenv, there is no 'getsitepackages'.
+    # We can't remove these reliably
+    if hasattr(site, 'getsitepackages'):
+        for sitepackage_path in site.getsitepackages():
+            # Strip all site-packages directories from sys.path that
+            # are not sys.prefix; this is because on Windows
+            # sys.prefix is a site-package directory.
+            if sitepackage_path != sys.prefix:
+                sys.path[:] = [x for x in sys.path
+                               if sitepackage_path not in x]
+
+setup_args = dict(to_dir=tmpeggs, download_delay=0)
+
+if options.setuptools_version is not None:
+    setup_args['version'] = options.setuptools_version
+if options.setuptools_to_dir is not None:
+    setup_args['to_dir'] = options.setuptools_to_dir
+
+ez['use_setuptools'](**setup_args)
+import setuptools
+import pkg_resources
+
+# This does not (always?) update the default working set.  We will
+# do it.
+for path in sys.path:
+    if path not in pkg_resources.working_set.entries:
+        pkg_resources.working_set.add_entry(path)
+
+######################################################################
+# Install buildout
+
+ws = pkg_resources.working_set
+
+setuptools_path = ws.find(
+    pkg_resources.Requirement.parse('setuptools')).location
+
+# Fix sys.path here as easy_install.pth added before PYTHONPATH
+cmd = [sys.executable, '-c',
+       'import sys; sys.path[0:0] = [%r]; ' % setuptools_path +
+       'from setuptools.command.easy_install import main; main()',
+       '-mZqNxd', tmpeggs]
+
+find_links = os.environ.get(
+    'bootstrap-testing-find-links',
+    options.find_links or
+    ('http://downloads.buildout.org/'
+     if options.accept_buildout_test_releases else None)
+    )
+if find_links:
+    cmd.extend(['-f', find_links])
+
+requirement = 'zc.buildout'
+version = options.buildout_version
+if version is None and not options.accept_buildout_test_releases:
+    # Figure out the most recent final version of zc.buildout.
+    import setuptools.package_index
+    _final_parts = '*final-', '*final'
+
+    def _final_version(parsed_version):
+        try:
+            return not parsed_version.is_prerelease
+        except AttributeError:
+            # Older setuptools
+            for part in parsed_version:
+                if (part[:1] == '*') and (part not in _final_parts):
+                    return False
+            return True
+
+    index = setuptools.package_index.PackageIndex(
+        search_path=[setuptools_path])
+    if find_links:
+        index.add_find_links((find_links,))
+    req = pkg_resources.Requirement.parse(requirement)
+    if index.obtain(req) is not None:
+        best = []
+        bestv = None
+        for dist in index[req.project_name]:
+            distv = dist.parsed_version
+            if _final_version(distv):
+                if bestv is None or distv > bestv:
+                    best = [dist]
+                    bestv = distv
+                elif distv == bestv:
+                    best.append(dist)
+        if best:
+            best.sort()
+            version = best[-1].version
+if version:
+    requirement = '=='.join((requirement, version))
+cmd.append(requirement)
+
+import subprocess
+if subprocess.call(cmd) != 0:
+    raise Exception(
+        "Failed to execute command:\n%s" % repr(cmd)[1:-1])
+
+######################################################################
+# Import and run buildout
+
+ws.add_entry(tmpeggs)
+ws.require(requirement)
+import zc.buildout.buildout
+
+if not [a for a in args if '=' not in a]:
+    args.append('bootstrap')
+
+# if -c was provided, we push it back into args for buildout' main function
+if options.config_file is not None:
+    args[0:0] = ['-c', options.config_file]
+
+zc.buildout.buildout.main(args)
+shutil.rmtree(tmpeggs)
diff --git a/buildout.cfg b/buildout.cfg
new file mode 100644
index 0000000..b317a96
--- /dev/null
+++ b/buildout.cfg
@@ -0,0 +1,7 @@
+[buildout]
+parts = test
+develop = .
+
+[test]
+recipe = zc.recipe.testrunner
+eggs = plone.alterego [test]
diff --git a/default.nix b/default.nix
new file mode 100644
index 0000000..3c8459a
--- /dev/null
+++ b/default.nix
@@ -0,0 +1,35 @@
+{ pkgs ? import (builtins.fetchTarball  # revision for reproducible builds
+  "https://github.com/nixos/nixpkgs-channels/archive/nixos-16.03.tar.gz") {}
+, pythonPackages ? pkgs.python35Packages
+}:
+
+let self = {
+  buildout = pythonPackages.zc_buildout_nix.overrideDerivation(args: {
+    postInstall = "";
+    propagatedNativeBuildInputs = [
+        pythonPackages.lxml
+    ];
+  });
+};
+
+in pkgs.stdenv.mkDerivation rec {
+  name = "env";
+  # Mandatory boilerplate for buildable env
+  env = pkgs.buildEnv { name = name; paths = buildInputs; };
+  builder = builtins.toFile "builder.sh" ''
+    source $stdenv/setup; ln -s $env $out
+  '';
+  # Customizable development requirements
+  buildInputs = with self; [
+    buildout
+    pkgs.python35
+  ];
+  # Customizable development shell setup
+  shellHook = ''
+    export SSL_CERT_FILE=${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt
+  '';
+}
+
+# ~/.zshrc:
+# function nix_prompt { test $IN_NIX_SHELL && echo '[nix-shell] ' }
+# ZSH_THEME_GIT_PROMPT_PREFIX="$(nix_prompt)$ZSH_THEME_GIT_PROMPT_PREFIX"
diff --git a/plone/alterego/alterego.txt b/plone/alterego/alterego.txt
index 179ece0..345c484 100644
--- a/plone/alterego/alterego.txt
+++ b/plone/alterego/alterego.txt
@@ -33,8 +33,9 @@ class that should get a unique interface for each instance.
     >>> from zope import interface
     >>> class IContent(interface.Interface):
     ...     pass
-    >>> class Content(object):
-    ...     interface.implements(IContent)
+    >>> @interface.implementer(IContent)
+    ... class Content(object):
+    ...     pass
 
     >>> c1 = Content()
 
@@ -80,11 +81,11 @@ for different dynamic modules.
 
     >>> from plone.alterego.interfaces import IDynamicObjectFactory
     >>> from zope.interface.interface import InterfaceClass
-    >>> class InterfaceOnDemand(object):
-    ...     interface.implements(IDynamicObjectFactory)
+    >>> @interface.implementer(IDynamicObjectFactory)
+    ... class InterfaceOnDemand(object):
     ...
     ...     def __call__(self, name, module):
-    ...         print "Creating", name, "in", module.__name__
+    ...         print("Creating %s in %s" % (name, module.__name__))
     ...         schema = InterfaceClass(name, (interface.Interface,), __module__=module.__name__)
     ...         setattr(module, name, schema)
     ...         return schema
@@ -107,18 +108,28 @@ We could then create an on-demand interface easily:
     >>> interface.alsoProvides(c1, dynamic.ITwo)
     Creating ITwo in plone.alterego.tests.dynamic
 
-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3
     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
      <InterfaceClass __builtin__.IContent>,
      <InterfaceClass zope.interface.Interface>]
 
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2
+    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
+     <InterfaceClass builtins.IContent>,
+     <InterfaceClass zope.interface.Interface>]
+
 Crucially, so long as the factory always returns the same thing, the same
 objects will be returned each time the module is accessed.
 
     >>> del dynamic
     >>> del dynamic_module
 
-    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_3
     [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
      <InterfaceClass __builtin__.IContent>,
-     <InterfaceClass zope.interface.Interface>]
\ No newline at end of file
+     <InterfaceClass zope.interface.Interface>]
+
+    >>> list(interface.providedBy(c1).flattened()) # doctest: +NORMALIZE_WHITESPACE +SKIP_PYTHON_2
+    [<InterfaceClass plone.alterego.tests.dynamic.ITwo>,
+     <InterfaceClass builtins.IContent>,
+     <InterfaceClass zope.interface.Interface>]
diff --git a/plone/alterego/configure.zcml b/plone/alterego/configure.zcml
deleted file mode 100644
index bbad907..0000000
--- a/plone/alterego/configure.zcml
+++ /dev/null
@@ -1,7 +0,0 @@
-<configure
-    xmlns="http://namespaces.zope.org/zope"
-    xmlns:five="http://namespaces.zope.org/five"
-    i18n_domain="plone.alterego">
-
-
-</configure>
diff --git a/plone/alterego/dynamic.py b/plone/alterego/dynamic.py
index e24e896..960a873 100644
--- a/plone/alterego/dynamic.py
+++ b/plone/alterego/dynamic.py
@@ -1,14 +1,13 @@
-import sys
-from new import module
-
-from zope.interface import implementer
-from zope.component import queryUtility
-
 from plone.alterego.interfaces import IDynamicModule
 from plone.alterego.interfaces import IDynamicObjectFactory
+from types import ModuleType
+from zope.component import queryUtility
+from zope.interface import implementer
+import sys
+
 
 @implementer(IDynamicModule)
-class DynamicModule(module):
+class DynamicModule(ModuleType):
     """A module that can create objects on the fly.
     """
 
@@ -19,17 +18,23 @@ def __getattr__(self, name):
 
         factory = queryUtility(IDynamicObjectFactory, name=self.__name__)
         if factory is None:
-            raise AttributeError("Cannot find dynamic object factory for module %s" % self.__name__)
+            raise AttributeError(
+                "Cannot find dynamic object factory for module %s" %
+                self.__name__)
 
         obj = factory(name, self)
         if obj is None:
-            raise AttributeError("Dynamic module factory did not want to create %s in %s" % (name, self.__name__))
+            raise AttributeError(
+                "Dynamic module factory did not want to create %s in %s" %
+                (name, self.__name__))
 
         return obj
 
+
 def create(dotted_name):
     dynamic = DynamicModule(dotted_name)
     sys.modules[dotted_name] = dynamic
     return dynamic
 
-__all__ = ('create',)
\ No newline at end of file
+
+__all__ = ('create',)
diff --git a/plone/alterego/interfaces.py b/plone/alterego/interfaces.py
index 68b8c85..7625fb4 100644
--- a/plone/alterego/interfaces.py
+++ b/plone/alterego/interfaces.py
@@ -1,9 +1,11 @@
 from zope.interface import Interface
 
+
 class IDynamicModule(Interface):
     """Marker interface for dynamic modules
     """
 
+
 class IDynamicObjectFactory(Interface):
     """A factory capable of creating objects on the fly.
 
@@ -23,4 +25,4 @@ def __call__(name, module):
         This function should return a new object, or return None, in which
         case the dynamic module will generate an AttributeError. There is
         no need to mess with sys.modules or modify the 'module' object.
-        """
\ No newline at end of file
+        """
diff --git a/plone/alterego/tests.py b/plone/alterego/tests.py
index 3e3bad6..8a58888 100644
--- a/plone/alterego/tests.py
+++ b/plone/alterego/tests.py
@@ -1,14 +1,28 @@
 import doctest
+import sys
 import unittest
-
 import zope.component.testing
 
+SKIP_PYTHON_2 = doctest.register_optionflag('SKIP_PYTHON_2')
+SKIP_PYTHON_3 = doctest.register_optionflag('SKIP_PYTHON_3')
 
-def test_suite():
-    return unittest.TestSuite((
 
-        doctest.DocFileSuite('alterego.txt',
-                     # setUp=setUp,
-                     tearDown=zope.component.testing.tearDown),
+class PolyglotOutputChecker(doctest.OutputChecker):
+    def check_output(self, want, got, optionflags):
+        if optionflags & SKIP_PYTHON_3 and sys.version_info >= (3,):
+            return True
+        elif optionflags & SKIP_PYTHON_2:
+            return True
+
+        return doctest.OutputChecker.check_output(
+            self, want, got, optionflags)
 
-        ))
\ No newline at end of file
+
+def test_suite():
+    return unittest.TestSuite((
+        doctest.DocFileSuite(
+            'alterego.txt',
+            tearDown=zope.component.testing.tearDown,
+            checker=PolyglotOutputChecker(),
+        ),
+    ))
diff --git a/setup.py b/setup.py
index 7a16601..7478afd 100644
--- a/setup.py
+++ b/setup.py
@@ -31,8 +31,13 @@
     zip_safe=False,
     install_requires=[
         'setuptools',
+        'zope.component',
+        'zope.interface',
     ],
+    extras_require={
+        'test': []
+    },
     entry_points="""
     # -*- Entry points: -*-
     """,
-    )
\ No newline at end of file
+)


