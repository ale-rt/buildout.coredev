Repository: plone.subrequest


Branch: refs/heads/master
Date: 2017-08-28T11:51:48+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.subrequest/commit/0a77d8125f7c274cc52f13f6d6cbed4161a675a8

Fix response.setStatus call syntax on exception handler

Files changed:
M plone/subrequest/__init__.py

diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index 1b46f8f..dc575b6 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -188,4 +188,4 @@ def unauthorized_exception_handler(response, exception):
     """
     if not isinstance(exception, Unauthorized):
         return response.exception()
-    response.setStatus = 401
+    response.setStatus(401)


Repository: plone.subrequest


Branch: refs/heads/master
Date: 2017-08-28T11:53:58+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.subrequest/commit/8e6046e7736c63fb8054d71b0036acc0ce464c7a

Add lookup for zope exception views when explicit exception handleris not defined

Files changed:
M plone/subrequest/__init__.py

diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index dc575b6..a155f1d 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -11,6 +11,7 @@
 from urllib import unquote  # Python2.4 does not have urlparse.unquote
 from urlparse import urljoin
 from urlparse import urlsplit
+from zope.component import getMultiAdapter
 from zope.globalrequest import getRequest
 from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
@@ -162,7 +163,12 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):
             if exception_handler is not None:
                 exception_handler(response, e)
             else:
-                response.exception()
+                view = getMultiAdapter((e, request), name=u'index.html')
+                if view is not None:
+                    v = view()
+                    response.setBody(v)
+                else:
+                    response.exception()
         return response
     finally:
         if SAFE_WRITE_KEY in request.environ:


Repository: plone.subrequest


Branch: refs/heads/master
Date: 2017-08-28T13:23:25+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.subrequest/commit/7aa3922d45316fc31e2d8e429e2d6dc504ae2465

Add test for a custom exception view

Files changed:
M plone/subrequest/__init__.py
M plone/subrequest/testing.py
M plone/subrequest/testing.zcml
M plone/subrequest/usage.txt

diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index a155f1d..02be088 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -11,7 +11,7 @@
 from urllib import unquote  # Python2.4 does not have urlparse.unquote
 from urlparse import urljoin
 from urlparse import urlsplit
-from zope.component import getMultiAdapter
+from zope.component import queryMultiAdapter
 from zope.globalrequest import getRequest
 from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
@@ -163,7 +163,7 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):
             if exception_handler is not None:
                 exception_handler(response, e)
             else:
-                view = getMultiAdapter((e, request), name=u'index.html')
+                view = queryMultiAdapter((e, request), name=u'index.html')
                 if view is not None:
                     v = view()
                     response.setBody(v)
diff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py
index 72baaaa..87b710e 100644
--- a/plone/subrequest/testing.py
+++ b/plone/subrequest/testing.py
@@ -9,6 +9,16 @@
 from zope.globalrequest import setRequest
 
 
+class CustomException(Exception):
+    """Custom exception"""
+
+
+class CustomExceptionHandler(BrowserView):
+    def __call__(self):
+        self.request.response.setStatus(500)
+        return "Custom exception occurred: {0:s}".format(self.context)
+
+
 class CookieView(BrowserView):
 
     def __call__(self):
@@ -49,6 +59,12 @@ def __call__(self):
         raise Exception('An error')
 
 
+class CustomErrorView(BrowserView):
+
+    def __call__(self):
+        raise CustomException('A custom error')
+
+
 class RootView(BrowserView):
 
     def __call__(self):
diff --git a/plone/subrequest/testing.zcml b/plone/subrequest/testing.zcml
index 3b8c49f..e259033 100644
--- a/plone/subrequest/testing.zcml
+++ b/plone/subrequest/testing.zcml
@@ -84,4 +84,18 @@
         name="root"
         />
 
+    <browser:page
+        name="custom-error"
+        for="*"
+        class="plone.subrequest.testing.CustomErrorView"
+        permission="zope.Public"
+        />
+
+    <browser:page
+        name="index.html"
+        for="plone.subrequest.testing.CustomException"
+        class="plone.subrequest.testing.CustomExceptionHandler"
+        permission="zope.Public"
+        />
+
 </configure>
diff --git a/plone/subrequest/usage.txt b/plone/subrequest/usage.txt
index 80a7c46..e3dab4d 100644
--- a/plone/subrequest/usage.txt
+++ b/plone/subrequest/usage.txt
@@ -132,6 +132,14 @@ Or might raise an error.
     >>> response.status
     500
 
+Or might raise an error rendered by a custom error view.
+
+    >>> response = subrequest('/@@custom-error')
+    >>> response.status
+    500
+    >>> response.body
+    'Custom exception occurred: A custom error'
+
 .. test-case: status-ok
 
 So check for the expected status.


Repository: plone.subrequest


Branch: refs/heads/master
Date: 2017-08-28T13:23:28+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.subrequest/commit/436144985fff97ce11acd3a255d6029865a8a3eb

Update changelog

Files changed:
M CHANGES.rst

diff --git a/CHANGES.rst b/CHANGES.rst
index 3fe754d..82c1d5c 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,11 +10,15 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add support for Zope exception views when explicit exception handler
+  is not defined
+  [datakurre]
 
 Bug fixes:
 
-- *add item here*
+- Fix issue where the example unauthorized_exception_handler did
+  not properly set response status code
+  [datakurre]
 
 
 1.8.2 (2017-07-20)


Repository: plone.subrequest


Branch: refs/heads/master
Date: 2017-09-06T15:01:07+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.subrequest/commit/8b5cd141b3a2adc3d1dad381376c7e5adc80da22

Merge pull request #15 from plone/datakurre/errorviews

Add support for zope.publisher exception views

Files changed:
M CHANGES.rst
M plone/subrequest/__init__.py
M plone/subrequest/testing.py
M plone/subrequest/testing.zcml
M plone/subrequest/usage.txt

diff --git a/CHANGES.rst b/CHANGES.rst
index c433e33..3db817b 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,11 +10,15 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Add support for Zope exception views when explicit exception handler
+  is not defined
+  [datakurre]
 
 Bug fixes:
 
-- *add item here*
+- Fix issue where the example unauthorized_exception_handler did
+  not properly set response status code
+  [datakurre]
 
 
 1.8.3 (2017-08-30)
diff --git a/plone/subrequest/__init__.py b/plone/subrequest/__init__.py
index 1b46f8f..02be088 100644
--- a/plone/subrequest/__init__.py
+++ b/plone/subrequest/__init__.py
@@ -11,6 +11,7 @@
 from urllib import unquote  # Python2.4 does not have urlparse.unquote
 from urlparse import urljoin
 from urlparse import urlsplit
+from zope.component import queryMultiAdapter
 from zope.globalrequest import getRequest
 from zope.globalrequest import setRequest
 from zope.interface import alsoProvides
@@ -162,7 +163,12 @@ def subrequest(url, root=None, stdout=None, exception_handler=None):
             if exception_handler is not None:
                 exception_handler(response, e)
             else:
-                response.exception()
+                view = queryMultiAdapter((e, request), name=u'index.html')
+                if view is not None:
+                    v = view()
+                    response.setBody(v)
+                else:
+                    response.exception()
         return response
     finally:
         if SAFE_WRITE_KEY in request.environ:
@@ -188,4 +194,4 @@ def unauthorized_exception_handler(response, exception):
     """
     if not isinstance(exception, Unauthorized):
         return response.exception()
-    response.setStatus = 401
+    response.setStatus(401)
diff --git a/plone/subrequest/testing.py b/plone/subrequest/testing.py
index 72baaaa..87b710e 100644
--- a/plone/subrequest/testing.py
+++ b/plone/subrequest/testing.py
@@ -9,6 +9,16 @@
 from zope.globalrequest import setRequest
 
 
+class CustomException(Exception):
+    """Custom exception"""
+
+
+class CustomExceptionHandler(BrowserView):
+    def __call__(self):
+        self.request.response.setStatus(500)
+        return "Custom exception occurred: {0:s}".format(self.context)
+
+
 class CookieView(BrowserView):
 
     def __call__(self):
@@ -49,6 +59,12 @@ def __call__(self):
         raise Exception('An error')
 
 
+class CustomErrorView(BrowserView):
+
+    def __call__(self):
+        raise CustomException('A custom error')
+
+
 class RootView(BrowserView):
 
     def __call__(self):
diff --git a/plone/subrequest/testing.zcml b/plone/subrequest/testing.zcml
index 3b8c49f..e259033 100644
--- a/plone/subrequest/testing.zcml
+++ b/plone/subrequest/testing.zcml
@@ -84,4 +84,18 @@
         name="root"
         />
 
+    <browser:page
+        name="custom-error"
+        for="*"
+        class="plone.subrequest.testing.CustomErrorView"
+        permission="zope.Public"
+        />
+
+    <browser:page
+        name="index.html"
+        for="plone.subrequest.testing.CustomException"
+        class="plone.subrequest.testing.CustomExceptionHandler"
+        permission="zope.Public"
+        />
+
 </configure>
diff --git a/plone/subrequest/usage.txt b/plone/subrequest/usage.txt
index 80a7c46..e3dab4d 100644
--- a/plone/subrequest/usage.txt
+++ b/plone/subrequest/usage.txt
@@ -132,6 +132,14 @@ Or might raise an error.
     >>> response.status
     500
 
+Or might raise an error rendered by a custom error view.
+
+    >>> response = subrequest('/@@custom-error')
+    >>> response.status
+    500
+    >>> response.body
+    'Custom exception occurred: A custom error'
+
 .. test-case: status-ok
 
 So check for the expected status.


