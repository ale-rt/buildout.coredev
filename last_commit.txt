Repository: plone.caching


Branch: refs/heads/master
Date: 2016-09-01T08:32:17+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/d9c316c546f0caa6b5a70b51b8a9cce021957ff6

isort

Files changed:
A setup.cfg
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/lookup.py
M plone/caching/operations.py
M plone/caching/testing.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_lookup.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py
M plone/caching/utils.py

diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index a97b018..df0a64c 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -1,24 +1,20 @@
-import logging
-
+from plone.caching.interfaces import X_CACHE_OPERATION_HEADER
+from plone.caching.interfaces import X_CACHE_RULE_HEADER
+from plone.caching.utils import findOperation
+from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY
+from plone.transformchain.interfaces import ITransform
+from ZODB.POSException import ConflictError
+from zope.component import adapter
+from zope.component import adapts
+from zope.globalrequest import getRequest
+from zope.interface import alsoProvides
 from zope.interface import implementer
 from zope.interface import Interface
-from zope.interface import alsoProvides
-
-from zope.component import adapts, adapter
-
-from zope.globalrequest import getRequest
-
 from ZPublisher.interfaces import IPubAfterTraversal
 from ZPublisher.interfaces import IPubBeforeStreaming
-from ZODB.POSException import ConflictError
 
-from plone.transformchain.interfaces import ITransform
-from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY
-
-from plone.caching.interfaces import X_CACHE_RULE_HEADER
-from plone.caching.interfaces import X_CACHE_OPERATION_HEADER
+import logging
 
-from plone.caching.utils import findOperation
 
 logger = logging.getLogger('plone.caching')
 
diff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py
index e77596a..280ac6a 100644
--- a/plone/caching/interfaces.py
+++ b/plone/caching/interfaces.py
@@ -1,7 +1,8 @@
+from zope import schema
+from zope.interface import Interface
+
 import zope.i18nmessageid
 
-from zope.interface import Interface
-from zope import schema
 
 _ = zope.i18nmessageid.MessageFactory('plone')
 
diff --git a/plone/caching/lookup.py b/plone/caching/lookup.py
index 04fe060..149d181 100644
--- a/plone/caching/lookup.py
+++ b/plone/caching/lookup.py
@@ -1,9 +1,9 @@
-from zope.interface import Interface
-from zope.interface import implementer
+from plone.caching.interfaces import IRulesetLookup
+from z3c.caching.registry import lookup
 from zope.component import adapts
+from zope.interface import implementer
+from zope.interface import Interface
 
-from z3c.caching.registry import lookup
-from plone.caching.interfaces import IRulesetLookup
 
 @implementer(IRulesetLookup)
 class DefaultRulesetLookup(object):
diff --git a/plone/caching/operations.py b/plone/caching/operations.py
index bfe8746..d3cbc65 100644
--- a/plone/caching/operations.py
+++ b/plone/caching/operations.py
@@ -1,11 +1,13 @@
-from zope.interface import implementer, provider, Interface
-from zope.component import adapts, queryMultiAdapter
-
+from plone.caching.interfaces import _
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.interfaces import ICachingOperationType
-from plone.caching.interfaces import _
-
 from plone.caching.utils import lookupOptions
+from zope.component import adapts
+from zope.component import queryMultiAdapter
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.interface import provider
+
 
 @implementer(ICachingOperation)
 @provider(ICachingOperationType)
diff --git a/plone/caching/testing.py b/plone/caching/testing.py
index 94252c7..fe9e293 100644
--- a/plone/caching/testing.py
+++ b/plone/caching/testing.py
@@ -3,6 +3,7 @@
 from z3c.caching.registry import getGlobalRulesetRegistry
 from z3c.caching.registry import RulesetRegistry
 from zope.component import provideAdapter
+
 import zope.component.testing
 
 
diff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py
index e4fa6a2..8ed428b 100644
--- a/plone/caching/tests/test_hooks.py
+++ b/plone/caching/tests/test_hooks.py
@@ -1,32 +1,29 @@
-import unittest
-
-from zope.component import adapts, provideUtility, provideAdapter, getUtility
-from zope.interface import implementer, Interface
-
-from zope.globalrequest import setRequest, clearRequest
-
-import z3c.caching.registry
-
-from plone.registry.interfaces import IRegistry
-
-from plone.registry import Registry
-from plone.registry.fieldfactory import persistentFieldAdapter
-
-from plone.caching.interfaces import IRulesetLookup
-from plone.caching.interfaces import ICachingOperation
-from plone.caching.interfaces import ICacheSettings
-
-from plone.caching.lookup import DefaultRulesetLookup
-
-from plone.caching.hooks import MutatorTransform
 from plone.caching.hooks import intercept
-from plone.caching.hooks import modifyStreamingResponse
 from plone.caching.hooks import Intercepted
 from plone.caching.hooks import InterceptorResponse
-
+from plone.caching.hooks import modifyStreamingResponse
+from plone.caching.hooks import MutatorTransform
+from plone.caching.interfaces import ICacheSettings
+from plone.caching.interfaces import ICachingOperation
+from plone.caching.interfaces import IRulesetLookup
+from plone.caching.lookup import DefaultRulesetLookup
 from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
-
+from plone.registry import Registry
+from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
 from ZODB.POSException import ConflictError
+from zope.component import adapts
+from zope.component import getUtility
+from zope.component import provideAdapter
+from zope.component import provideUtility
+from zope.globalrequest import clearRequest
+from zope.globalrequest import setRequest
+from zope.interface import implementer
+from zope.interface import Interface
+
+import unittest
+import z3c.caching.registry
+
 
 class DummyView(object):
     pass
diff --git a/plone/caching/tests/test_lookup.py b/plone/caching/tests/test_lookup.py
index 8d7f27f..ea02e93 100644
--- a/plone/caching/tests/test_lookup.py
+++ b/plone/caching/tests/test_lookup.py
@@ -1,11 +1,9 @@
-import unittest
-
-import z3c.caching.registry
-
 from plone.caching.lookup import DefaultRulesetLookup
-
 from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
 
+import unittest
+import z3c.caching.registry
+
 
 class DummyView(object):
     pass
diff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py
index 82a3de8..bc7ce90 100644
--- a/plone/caching/tests/test_operations.py
+++ b/plone/caching/tests/test_operations.py
@@ -1,20 +1,18 @@
-import unittest
-
+from plone.caching.interfaces import ICachingOperation
+from plone.caching.operations import Chain
+from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
+from plone.registry import field
+from plone.registry import Record
+from plone.registry import Registry
+from plone.registry.interfaces import IRegistry
+from zope.component import adapts
+from zope.component import provideAdapter
+from zope.component import provideUtility
 from zope.interface import implementer
 from zope.interface import Interface
 
-from zope.component import provideUtility
-from zope.component import provideAdapter
-from zope.component import adapts
-
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry, Record
-from plone.registry import field
-
-from plone.caching.operations import Chain
-from plone.caching.interfaces import ICachingOperation
+import unittest
 
-from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
 
 _marker = object()
 
diff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py
index c23b5a6..0939a15 100644
--- a/plone/caching/tests/test_utils.py
+++ b/plone/caching/tests/test_utils.py
@@ -1,16 +1,18 @@
-import unittest
-
-import zope.component.testing
-
+from plone.caching.interfaces import ICachingOperationType
+from plone.caching.utils import lookupOption
+from plone.caching.utils import lookupOptions
+from plone.registry import field
+from plone.registry import FieldRef
+from plone.registry import Record
+from plone.registry import Registry
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+from zope.component import provideUtility
 from zope.interface import provider
-from zope.component import provideUtility, getUtility
 
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry, Record, FieldRef
-from plone.registry import field
+import unittest
+import zope.component.testing
 
-from plone.caching.interfaces import ICachingOperationType
-from plone.caching.utils import lookupOption, lookupOptions
 
 _marker = object()
 
diff --git a/plone/caching/utils.py b/plone/caching/utils.py
index ccd619b..15ee2e8 100644
--- a/plone/caching/utils.py
+++ b/plone/caching/utils.py
@@ -1,14 +1,14 @@
-import types
-
-from zope.component import queryUtility, getUtility
-from zope.component import queryMultiAdapter
-
-from plone.registry.interfaces import IRegistry
-
+from plone.caching.interfaces import ICacheSettings
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.interfaces import ICachingOperationType
 from plone.caching.interfaces import IRulesetLookup
-from plone.caching.interfaces import ICacheSettings
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
+
+import types
+
 
 def lookupOptions(type_, rulename, default=None):
     """Look up all options for a given caching operation type, returning
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..eda66e5
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,15 @@
+[check-manifest]
+ignore =
+    *.cfg
+    .coveragerc
+    .editorconfig
+    .gitattributes
+    bootstrap-buildout.py
+
+[isort]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
+


Repository: plone.caching


Branch: refs/heads/master
Date: 2016-09-01T08:34:54+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/040e2e91257980abb87f3ecd213b49b4be26cf09

utf8 headers

Files changed:
M plone/__init__.py
M plone/caching/__init__.py
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/lookup.py
M plone/caching/operations.py
M plone/caching/testing.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_lookup.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py
M plone/caching/utils.py

diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..85880ef 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 # See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
 try:
     __import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/caching/__init__.py b/plone/caching/__init__.py
index e69de29..40a96af 100644
--- a/plone/caching/__init__.py
+++ b/plone/caching/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index df0a64c..e80543c 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.interfaces import X_CACHE_OPERATION_HEADER
 from plone.caching.interfaces import X_CACHE_RULE_HEADER
 from plone.caching.utils import findOperation
diff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py
index 280ac6a..0e093a1 100644
--- a/plone/caching/interfaces.py
+++ b/plone/caching/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from zope import schema
 from zope.interface import Interface
 
diff --git a/plone/caching/lookup.py b/plone/caching/lookup.py
index 149d181..454f1d6 100644
--- a/plone/caching/lookup.py
+++ b/plone/caching/lookup.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.interfaces import IRulesetLookup
 from z3c.caching.registry import lookup
 from zope.component import adapts
diff --git a/plone/caching/operations.py b/plone/caching/operations.py
index d3cbc65..2e1984e 100644
--- a/plone/caching/operations.py
+++ b/plone/caching/operations.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.interfaces import _
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.interfaces import ICachingOperationType
diff --git a/plone/caching/testing.py b/plone/caching/testing.py
index fe9e293..8f1c28a 100644
--- a/plone/caching/testing.py
+++ b/plone/caching/testing.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.testing import Layer
 from plone.testing.zca import UNIT_TESTING
 from z3c.caching.registry import getGlobalRulesetRegistry
diff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py
index 8ed428b..95ded1e 100644
--- a/plone/caching/tests/test_hooks.py
+++ b/plone/caching/tests/test_hooks.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.hooks import intercept
 from plone.caching.hooks import Intercepted
 from plone.caching.hooks import InterceptorResponse
diff --git a/plone/caching/tests/test_lookup.py b/plone/caching/tests/test_lookup.py
index ea02e93..c02621c 100644
--- a/plone/caching/tests/test_lookup.py
+++ b/plone/caching/tests/test_lookup.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.lookup import DefaultRulesetLookup
 from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
 
diff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py
index bc7ce90..e7cfa08 100644
--- a/plone/caching/tests/test_operations.py
+++ b/plone/caching/tests/test_operations.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.operations import Chain
 from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
diff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py
index 0939a15..ef0c79d 100644
--- a/plone/caching/tests/test_utils.py
+++ b/plone/caching/tests/test_utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.interfaces import ICachingOperationType
 from plone.caching.utils import lookupOption
 from plone.caching.utils import lookupOptions
diff --git a/plone/caching/utils.py b/plone/caching/utils.py
index 15ee2e8..9ccd1cf 100644
--- a/plone/caching/utils.py
+++ b/plone/caching/utils.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from plone.caching.interfaces import ICacheSettings
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.interfaces import ICachingOperationType


Repository: plone.caching


Branch: refs/heads/master
Date: 2016-09-01T08:35:32+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/ab9afdcf47bee7326ef4262ba68393156609ca36

modern namespace declaration

Files changed:
M plone/__init__.py

diff --git a/plone/__init__.py b/plone/__init__.py
index 85880ef..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,7 +1,2 @@
 # -*- coding: utf-8 -*-
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+__import__('pkg_resources').declare_namespace(__name__)


Repository: plone.caching


Branch: refs/heads/master
Date: 2016-09-01T08:43:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/391875910539196a57b28aa0506cbf58b10162eb

manual changes: pep8/readability

Files changed:
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/operations.py
M plone/caching/utils.py

diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index e80543c..4a95cbc 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -19,6 +19,7 @@
 
 logger = logging.getLogger('plone.caching')
 
+
 class IStreamedResponse(Interface):
     """Marker applied when we intercepted a streaming response. This allows
     us to avoid applying the same rules twice, since the normal hook may also
@@ -26,6 +27,7 @@ class IStreamedResponse(Interface):
     and after the response has been sent).
     """
 
+
 class Intercepted(Exception):
     """Exception raised in order to abort regular processing before the
     published resource (e.g. a view) is called, and render a specific response
@@ -39,6 +41,7 @@ def __init__(self, status=304, responseBody=u""):
         self.status = status
         self.responseBody = responseBody
 
+
 class InterceptorResponse(object):
     """View for the Intercepted exception, serving to return an empty
     response in the case of an intercepted response.
@@ -51,6 +54,7 @@ def __init__(self, context, request):
     def __call__(self):
         return self.context.responseBody
 
+
 @adapter(IPubAfterTraversal)
 def intercept(event):
     """Invoke the interceptResponse() method of a caching operation, if one
@@ -65,25 +69,29 @@ def intercept(event):
     try:
         request = event.request
         published = request.get('PUBLISHED', None)
-
         rule, operationName, operation = findOperation(request)
 
         if rule is None:
             return
 
         request.response.setHeader(X_CACHE_RULE_HEADER, rule)
-        logger.debug("Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation)
+        logger.debug(
+            'Published: %s Ruleset: %s Operation: %s',
+            repr(published),
+            rule,
+            operation
+        )
 
         if operation is not None:
-
             responseBody = operation.interceptResponse(rule, request.response)
 
             if responseBody is not None:
-
                 # Only put this in the response if the operation actually
                 # intercepted something
-
-                request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)
+                request.response.setHeader(
+                    X_CACHE_OPERATION_HEADER,
+                    operationName
+                )
 
                 # Stop any post-processing, including the operation's response
                 # modification
@@ -103,7 +111,11 @@ def intercept(event):
     except Intercepted:
         raise
     except:
-        logging.exception("Swallowed exception in plone.caching IPubAfterTraversal event handler")
+        logging.exception(
+            'Swallowed exception in plone.caching IPubAfterTraversal event '
+            'handler'
+        )
+
 
 @implementer(ITransform)
 class MutatorTransform(object):
@@ -141,7 +153,6 @@ def transformIterable(self, result, encoding):
         return None
 
     def mutate(self):
-
         request = self.request
 
         # Abort if this was a streamed request handled by our event handler
@@ -150,23 +161,27 @@ def mutate(self):
             return
 
         published = request.get('PUBLISHED', None)
-
         rule, operationName, operation = findOperation(request)
 
         if rule is None:
             return
 
         request.response.setHeader(X_CACHE_RULE_HEADER, rule)
-        logger.debug("Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation)
+        logger.debug(
+            'Published: %s Ruleset: %s Operation: %s',
+            repr(published),
+            rule,
+            operation
+        )
 
         if operation is not None:
-
             request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)
             operation.modifyResponse(rule, request.response)
 
 # Hook for streaming responses - does not use plone.transformchain, since
 # sequencing is less likely to be an issue here
 
+
 @adapter(IPubBeforeStreaming)
 def modifyStreamingResponse(event):
     """Invoke the modifyResponse() method of a caching operation, if one
@@ -193,9 +208,13 @@ def modifyStreamingResponse(event):
         return
 
     response.setHeader(X_CACHE_RULE_HEADER, rule)
-    logger.debug("Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation)
+    logger.debug(
+        'Published: %s Ruleset: %s Operation: %s',
+        repr(published),
+        rule,
+        operation
+    )
 
     if operation is not None:
-
         response.setHeader(X_CACHE_OPERATION_HEADER, operationName)
         operation.modifyResponse(rule, response)
diff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py
index 0e093a1..c5e1ffb 100644
--- a/plone/caching/interfaces.py
+++ b/plone/caching/interfaces.py
@@ -7,30 +7,32 @@
 
 _ = zope.i18nmessageid.MessageFactory('plone')
 
-X_CACHE_RULE_HEADER      = 'X-Cache-Rule'
+X_CACHE_RULE_HEADER = 'X-Cache-Rule'
 X_CACHE_OPERATION_HEADER = 'X-Cache-Operation'
 
+
 class ICacheSettings(Interface):
     """Settings expected to be found in plone.registry
     """
 
     enabled = schema.Bool(
-            title=_(u"Globally enabled"),
-            description=_(u"If not set, no caching operations will be attempted"),
-            default=False,
-        )
+        title=_(u'Globally enabled'),
+        description=_(u'If not set, no caching operations will be attempted'),
+        default=False,
+    )
 
     operationMapping = schema.Dict(
-            title=_(u"Rule set/operation mapping"),
-            description=_(u"Maps rule set names to operation names"),
-            key_type=schema.DottedName(title=_(u"Rule set name")),
-            value_type=schema.DottedName(title=_(u"Caching operation name")),
-        )
+        title=_(u'Rule set/operation mapping'),
+        description=_(u'Maps rule set names to operation names'),
+        key_type=schema.DottedName(title=_(u'Rule set name')),
+        value_type=schema.DottedName(title=_(u'Caching operation name')),
+    )
 
 #
 #  Cache operations
 #
 
+
 class ICachingOperation(Interface):
     """Represents a caching operation, typically setting of response headers
     and/or returning of an intercepted response.
@@ -117,36 +119,36 @@ def __call__(self, rulename, response):
     """
 
     title = schema.TextLine(
-            title=_(u"Title"),
-            description=_(u"A descriptive title for the operation"),
-        )
+        title=_(u'Title'),
+        description=_(u'A descriptive title for the operation'),
+    )
 
     description = schema.Text(
-            title=_(u"Description"),
-            description=_(u"A longer description for the operaton"),
-            required=False,
-        )
+        title=_(u'Description'),
+        description=_(u'A longer description for the operaton'),
+        required=False,
+    )
 
     prefix = schema.DottedName(
-            title=_(u"Registry prefix"),
-            description=_(u"Prefix for records in the registry pertaining to "
-                          u"this operation. This, alongside the next "
-                          u"parameter, allows the user interface to present "
-                          u"relevant configuration options for this "
-                          u"operation."),
-            required=False,
-        )
+        title=_(u'Registry prefix'),
+        description=_(u'Prefix for records in the registry pertaining to '
+                      u'this operation. This, alongside the next '
+                      u'parameter, allows the user interface to present '
+                      u'relevant configuration options for this '
+                      u'operation.'),
+        required=False,
+    )
 
     options = schema.Tuple(
-            title=_(u"Registry options"),
-            description=_(u"A tuple of options which can be used to "
-                          u"configure this operation. An option is looked "
-                          u"up in the registry by concatenating the prefix "
-                          u"with the option name, optionally preceded by "
-                          u"the rule set name, to allow per-rule overrides."),
-            value_type=schema.DottedName(),
-            required=False,
-        )
+        title=_(u'Registry options'),
+        description=_(u'A tuple of options which can be used to '
+                      u'configure this operation. An option is looked '
+                      u'up in the registry by concatenating the prefix '
+                      u'with the option name, optionally preceded by '
+                      u'the rule set name, to allow per-rule overrides.'),
+        value_type=schema.DottedName(),
+        required=False,
+    )
 
 
 #
diff --git a/plone/caching/operations.py b/plone/caching/operations.py
index 2e1984e..046720b 100644
--- a/plone/caching/operations.py
+++ b/plone/caching/operations.py
@@ -45,15 +45,21 @@ def interceptResponse(self, rulename, response):
         if options['operations']:
             for name in options['operations']:
 
-                operation = queryMultiAdapter((self.published, self.request),
-                                             ICachingOperation, name=name)
+                operation = queryMultiAdapter(
+                    (self.published, self.request),
+                    ICachingOperation,
+                    name=name
+                )
 
                 if operation is not None:
                     chained.append(name)
 
                     value = operation.interceptResponse(rulename, response)
                     if value is not None:
-                        response.setHeader('X-Cache-Chain-Operations', '; '.join(chained))
+                        response.setHeader(
+                            'X-Cache-Chain-Operations',
+                            '; '.join(chained)
+                        )
                         return value
 
     def modifyResponse(self, rulename, response):
@@ -64,8 +70,11 @@ def modifyResponse(self, rulename, response):
         if options['operations']:
             for name in options['operations']:
 
-                operation = queryMultiAdapter((self.published, self.request),
-                                             ICachingOperation, name=name)
+                operation = queryMultiAdapter(
+                    (self.published, self.request),
+                    ICachingOperation,
+                    name=name
+                )
 
                 if operation is not None:
                     chained.append(name)
diff --git a/plone/caching/utils.py b/plone/caching/utils.py
index 9ccd1cf..b9cdf2e 100644
--- a/plone/caching/utils.py
+++ b/plone/caching/utils.py
@@ -31,10 +31,17 @@ def lookupOptions(type_, rulename, default=None):
     registry = queryUtility(IRegistry)
 
     for option in getattr(type_, 'options', ()):
-        options[option] = lookupOption(type_.prefix, rulename, option, default, registry)
+        options[option] = lookupOption(
+            type_.prefix,
+            rulename,
+            option,
+            default,
+            registry
+        )
 
     return options
 
+
 def lookupOption(prefix, rulename, option, default=None, _registry=None):
     """Look up an option for a particular caching operation.
 
@@ -49,7 +56,8 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):
     override.
     """
 
-    # Avoid looking this up multiple times if we are being called from lookupOptions
+    # Avoid looking this up multiple times if we are being called
+    # from lookupOptions
     registry = _registry
 
     if registry is None:
@@ -68,6 +76,7 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):
 
     return default
 
+
 def findOperation(request):
 
     published = request.get('PUBLISHED', None)
@@ -103,5 +112,9 @@ def findOperation(request):
     if operationName is None:
         return rule, None, None
 
-    operation = queryMultiAdapter((published, request), ICachingOperation, name=operationName)
+    operation = queryMultiAdapter(
+        (published, request),
+        ICachingOperation,
+        name=operationName
+    )
     return rule, operationName, operation


Repository: plone.caching


Branch: refs/heads/master
Date: 2016-09-01T17:13:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/e7e95871658575767e0a155750f5514a50d3f57f

ZCA decorators: adapts -&gt; adapter

Files changed:
M CHANGES.rst
M plone/caching/hooks.py
M plone/caching/lookup.py
M plone/caching/operations.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dcfa5b7..b57ee20 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Cleanup: isort, readability, pep8, utf8-headers.
+  [jensens]
 
 
 1.1.1 (2016-08-12)
diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index 4a95cbc..fa7e0b4 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -6,7 +6,6 @@
 from plone.transformchain.interfaces import ITransform
 from ZODB.POSException import ConflictError
 from zope.component import adapter
-from zope.component import adapts
 from zope.globalrequest import getRequest
 from zope.interface import alsoProvides
 from zope.interface import implementer
@@ -118,6 +117,7 @@ def intercept(event):
 
 
 @implementer(ITransform)
+@adapter(Interface, Interface)
 class MutatorTransform(object):
     """Transformation using plone.transformchain.
 
@@ -132,7 +132,6 @@ class MutatorTransform(object):
     response body. Instead, we look up caching operations which can modify
     response headers and perform other caching functions.
     """
-    adapts(Interface, Interface)
 
     order = 12000
 
diff --git a/plone/caching/lookup.py b/plone/caching/lookup.py
index 454f1d6..d9f495f 100644
--- a/plone/caching/lookup.py
+++ b/plone/caching/lookup.py
@@ -1,19 +1,19 @@
 # -*- coding: utf-8 -*-
 from plone.caching.interfaces import IRulesetLookup
 from z3c.caching.registry import lookup
-from zope.component import adapts
+from zope.component import adapter
 from zope.interface import implementer
 from zope.interface import Interface
 
 
 @implementer(IRulesetLookup)
+@adapter(Interface, Interface)
 class DefaultRulesetLookup(object):
     """Default ruleset lookup.
 
     Only override this if you have very special needs. The safest option is
     to use ``z3c.caching`` to set rulesets.
     """
-    adapts(Interface, Interface)
 
     def __init__(self, published, request):
         self.published = published
diff --git a/plone/caching/operations.py b/plone/caching/operations.py
index 046720b..1ca1427 100644
--- a/plone/caching/operations.py
+++ b/plone/caching/operations.py
@@ -3,7 +3,7 @@
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.interfaces import ICachingOperationType
 from plone.caching.utils import lookupOptions
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import queryMultiAdapter
 from zope.interface import implementer
 from zope.interface import Interface
@@ -12,6 +12,7 @@
 
 @implementer(ICachingOperation)
 @provider(ICachingOperationType)
+@adapter(Interface, Interface)
 class Chain(object):
     """Caching operation which chains together several other operations.
 
@@ -26,8 +27,6 @@ class Chain(object):
 
     The option must be a sequence type (e.g. a ``Tuple``).
     """
-    adapts(Interface, Interface)
-
     title = _(u"Chain")
     description = _(u"Allows multiple operations to be chained together")
     prefix = 'plone.caching.operations.chain'


Repository: plone.caching


Branch: refs/heads/master
Date: 2016-09-01T18:35:28+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.caching/commit/556909287a21543c3de01b6218e1c33b7beb6c26

more manual cleanup

Files changed:
M README.rst
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_lookup.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py
M plone/caching/utils.py

diff --git a/README.rst b/README.rst
index d5567ef..35e31ea 100644
--- a/README.rst
+++ b/README.rst
@@ -8,7 +8,6 @@ The ``plone.caching`` package provides a framework for the management of cache h
 atop `z3c.caching`_. It consists of the following elements:
 
 * An interface ``ICachingOperation``, describing components which:
-
     * Modify the response for caching purposes. The most common operation will
       be to set cache headers.
     * Intercept a request before view rendering (but after traversal and
@@ -261,24 +260,24 @@ Here is an example of an operation that sets a fixed max-age cache control
 header. It is registered for any published resource, and for any HTTP request
 (but not other types of request.)::
 
-    from zope.interface import implements, classProvides, Interface
-    from zope.component import adapts, queryMultiAdapter
-
-    from zope.publisher.interfaces.http import IHTTPRequest
-
+    from plone.caching.interfaces import _
     from plone.caching.interfaces import ICachingOperation
     from plone.caching.interfaces import ICachingOperationType
-    from plone.caching.interfaces import _
-
     from plone.caching.utils import lookupOptions
+    from zope.component import adapter
+    from zope.component import queryMultiAdapter
+    from zope.interface import implementer
+    from zope.interface import Interface
+    from zope.interface import provider
+    from zope.publisher.interfaces.http import IHTTPRequest
 
+
+    @implementer(ICachingOperation)
+    @adapter(Interface, IHTTPRequest)
+    @provider(ICachingOperationType)
     class MaxAge(object):
-        implements(ICachingOperation)
-        adapts(Interface, IHTTPRequest)
 
         # Type metadata
-        classProvides(ICachingOperationType)
-
         title = _(u"Max age")
         description = _(u"Sets a fixed max age value")
         prefix = 'plone.caching.tests.maxage'
@@ -330,24 +329,24 @@ What about the ``interceptResponse()`` method? Here is a simple example that
 sends a 304 not modified response always. (This is probably not very useful,
 but it serves as an example.)::
 
-    from zope.interface import implements, classProvides, Interface
-    from zope.component import adapts, queryMultiAdapter
-
-    from zope.publisher.interfaces.http import IHTTPRequest
-
+    from plone.caching.interfaces import _
     from plone.caching.interfaces import ICachingOperation
     from plone.caching.interfaces import ICachingOperationType
-    from plone.caching.interfaces import _
-
     from plone.caching.utils import lookupOptions
+    from zope.component import adapter
+    from zope.component import queryMultiAdapter
+    from zope.interface import implementer
+    from zope.interface import Interface
+    from zope.interface import provider
+    from zope.publisher.interfaces.http import IHTTPRequest
 
+
+    @implementer(ICachingOperation)
+    @adapter(Interface, IHTTPRequest)
+    @provider(ICachingOperationType)
     class Always304(object):
-        implements(ICachingOperation)
-        adapts(Interface, IHTTPRequest)
 
         # Type metadata
-        classProvides(ICachingOperationType)
-
         title = _(u"Always send 304")
         description = _(u"It's not modified, dammit!")
         prefix = 'plone.caching.tests.always304'
diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index fa7e0b4..67599e5 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -109,7 +109,7 @@ def intercept(event):
         raise
     except Intercepted:
         raise
-    except:
+    except Exception:
         logging.exception(
             'Swallowed exception in plone.caching IPubAfterTraversal event '
             'handler'
diff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py
index c5e1ffb..6886608 100644
--- a/plone/caching/interfaces.py
+++ b/plone/caching/interfaces.py
@@ -77,19 +77,20 @@ class ICachingOperationType(Interface):
 
     The usual pattern is::
 
-        from zope.interface import implements, classProvides, Interface
-        from zope.component import adapts
-
         from plone.caching.interfaces import ICachingOperation
         from plone.caching.interfaces import ICachingOperationType
-
         from plone.caching.utils import lookupOptions
+        from zope.component import adapter
+        from zope.interface import implementer
+        from zope.interface import Interface
+        from zope.interface import provider
+
 
+        @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
+        @provider(ICachingOperationType)
         class SomeOperation(object):
-            implements(ICachingOperation)
-            adapts(Interface, Interface)
 
-            classProvides(ICachingOperationType)
             title = u"Some operation"
             description = u"Operation description"
             prefix = 'my.package.operation1'
diff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py
index 95ded1e..a64490e 100644
--- a/plone/caching/tests/test_hooks.py
+++ b/plone/caching/tests/test_hooks.py
@@ -13,7 +13,7 @@
 from plone.registry.fieldfactory import persistentFieldAdapter
 from plone.registry.interfaces import IRegistry
 from ZODB.POSException import ConflictError
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import getUtility
 from zope.component import provideAdapter
 from zope.component import provideUtility
@@ -29,10 +29,12 @@
 class DummyView(object):
     pass
 
+
 class DummyResource(object):
     def index_html(self):
         return 'binary data'
 
+
 class DummyResponse(dict):
 
     locked = None
@@ -47,23 +49,28 @@ def setStatus(self, value, lock=None):
         self.status = value
         if lock is not None:
             self.locked = lock
+
     def getStatus(self):
         return self.status
 
+
 class DummyRequest(dict):
     def __init__(self, published, response):
         self['PUBLISHED'] = published
         self.response = response
         self.environ = {}
 
+
 class DummyEvent(object):
     def __init__(self, request):
         self.request = request
 
+
 class DummyStreamingEvent(object):
     def __init__(self, response):
         self.response = response
 
+
 class TestMutateResponse(unittest.TestCase):
 
     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
@@ -81,20 +88,20 @@ def test_no_published_object(self):
 
         request = DummyRequest(None, DummyResponse())
 
-        MutatorTransform(None, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(None, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': None}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': None}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_registry(self):
         provideAdapter(DefaultRulesetLookup)
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_records(self):
         provideAdapter(DefaultRulesetLookup)
@@ -102,10 +109,10 @@ def test_no_records(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_mapping(self):
         provideAdapter(DefaultRulesetLookup)
@@ -120,10 +127,10 @@ def test_no_mapping(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_cache_rule(self):
         provideAdapter(DefaultRulesetLookup)
@@ -138,10 +145,10 @@ def test_no_cache_rule(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_lookup_adapter(self):
         provideUtility(Registry(), IRegistry)
@@ -156,10 +163,10 @@ def test_no_lookup_adapter(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operation_name_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -175,10 +182,13 @@ def test_operation_name_not_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_operation_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -194,10 +204,13 @@ def test_operation_not_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_match_unicode(self):
         provideAdapter(DefaultRulesetLookup)
@@ -211,8 +224,8 @@ def test_match_unicode(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -224,17 +237,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_bytes(self):
         provideAdapter(DefaultRulesetLookup)
@@ -248,8 +261,8 @@ def test_match_bytes(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -261,17 +274,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformBytes("", "utf-8")
+        MutatorTransform(view, request).transformBytes('', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_iterable(self):
         provideAdapter(DefaultRulesetLookup)
@@ -285,8 +298,8 @@ def test_match_iterable(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -298,17 +311,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformIterable([""], "utf-8")
+        MutatorTransform(view, request).transformIterable([''], 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_method(self):
         provideAdapter(DefaultRulesetLookup)
@@ -322,8 +335,8 @@ def test_match_method(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -335,17 +348,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         resource = DummyResource()
         request = DummyRequest(resource.index_html, DummyResponse())
 
-        MutatorTransform(resource, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(resource, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': resource.index_html}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': resource.index_html}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_off_switch(self):
         provideAdapter(DefaultRulesetLookup)
@@ -359,8 +372,8 @@ def test_off_switch(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -372,15 +385,16 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response['X-Mutated'] = rulename
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
+
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
 
 class TestMutateResponseStreaming(unittest.TestCase):
 
@@ -406,8 +420,8 @@ def test_no_published_object(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': None}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': None}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_registry(self):
         provideAdapter(DefaultRulesetLookup)
@@ -419,8 +433,8 @@ def test_no_registry(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_records(self):
         provideAdapter(DefaultRulesetLookup)
@@ -433,8 +447,8 @@ def test_no_records(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_mapping(self):
         provideAdapter(DefaultRulesetLookup)
@@ -453,8 +467,8 @@ def test_no_mapping(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_cache_rule(self):
         provideAdapter(DefaultRulesetLookup)
@@ -473,8 +487,8 @@ def test_no_cache_rule(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_lookup_adapter(self):
         provideUtility(Registry(), IRegistry)
@@ -493,8 +507,8 @@ def test_no_lookup_adapter(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operation_name_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -514,8 +528,11 @@ def test_operation_name_not_found(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_operation_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -535,8 +552,11 @@ def test_operation_not_found(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_match_unicode(self):
         provideAdapter(DefaultRulesetLookup)
@@ -550,8 +570,8 @@ def test_match_unicode(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -563,7 +583,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -572,10 +592,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_bytes(self):
         provideAdapter(DefaultRulesetLookup)
@@ -589,8 +609,8 @@ def test_match_bytes(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -602,7 +622,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -611,10 +631,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_iterable(self):
         provideAdapter(DefaultRulesetLookup)
@@ -628,8 +648,8 @@ def test_match_iterable(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -641,7 +661,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -650,10 +670,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_method(self):
         provideAdapter(DefaultRulesetLookup)
@@ -667,8 +687,8 @@ def test_match_method(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -680,7 +700,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         resource = DummyResource()
         response = DummyResponse()
@@ -689,10 +709,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': resource.index_html}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': resource.index_html}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_off_switch(self):
         provideAdapter(DefaultRulesetLookup)
@@ -706,8 +726,8 @@ def test_off_switch(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -719,7 +739,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response['X-Mutated'] = rulename
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -728,8 +748,9 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
+
 
 class TestIntercept(unittest.TestCase):
 
@@ -749,8 +770,8 @@ def test_no_published_object(self):
         request = DummyRequest(None, DummyResponse())
 
         intercept(DummyEvent(request))
-        self.assertEquals({'PUBLISHED': None}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': None}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_registry(self):
         provideAdapter(DefaultRulesetLookup)
@@ -759,8 +780,8 @@ def test_no_registry(self):
 
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_records(self):
         provideAdapter(DefaultRulesetLookup)
@@ -771,8 +792,8 @@ def test_no_records(self):
 
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_cache_rule(self):
         provideAdapter(DefaultRulesetLookup)
@@ -788,8 +809,8 @@ def test_no_cache_rule(self):
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_mapping(self):
         provideAdapter(DefaultRulesetLookup)
@@ -807,8 +828,8 @@ def test_no_mapping(self):
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operation_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -825,8 +846,11 @@ def test_operation_not_found(self):
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_match_abort(self):
         provideAdapter(DefaultRulesetLookup)
@@ -840,8 +864,8 @@ def test_match_abort(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -854,15 +878,15 @@ def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 return None
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
         intercept(DummyEvent(request))
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_body(self):
         provideAdapter(DefaultRulesetLookup)
@@ -876,8 +900,8 @@ def test_match_body(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -889,9 +913,9 @@ def modifyResponse(self, rulename, response):
             def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 response.setStatus(304)
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -899,18 +923,24 @@ def interceptResponse(self, rulename, response):
             intercept(DummyEvent(request))
             self.fail()
         except Intercepted, e:
-            self.assertEquals(u"dummy", e.responseBody)
-            self.assertEquals(304, e.status)
-            self.assertEquals(304, request.response.status)
-            self.assertEquals(True, request.response.locked)
+            self.assertEqual(u'dummy', e.responseBody)
+            self.assertEqual(304, e.status)
+            self.assertEqual(304, request.response.status)
+            self.assertEqual(True, request.response.locked)
         except Exception, e:
             self.fail(str(e))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'plone.transformchain.disable': True}, request.environ)
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'plone.transformchain.disable': True},
+            request.environ
+        )
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule'],
+             'X-Cache-Operation': ['op1'],
+             'X-Cache-Foo': ['test']},
+            dict(request.response)
+        )
 
     def test_match_body_explicitly_enable_transform_chain(self):
         provideAdapter(DefaultRulesetLookup)
@@ -924,8 +954,8 @@ def test_match_body_explicitly_enable_transform_chain(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -938,9 +968,9 @@ def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 response.setStatus(304)
                 self.request.environ['plone.transformchain.disable'] = False
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -948,18 +978,24 @@ def interceptResponse(self, rulename, response):
             intercept(DummyEvent(request))
             self.fail()
         except Intercepted, e:
-            self.assertEquals(u"dummy", e.responseBody)
-            self.assertEquals(304, e.status)
-            self.assertEquals(304, request.response.status)
-            self.assertEquals(True, request.response.locked)
+            self.assertEqual(u'dummy', e.responseBody)
+            self.assertEqual(304, e.status)
+            self.assertEqual(304, request.response.status)
+            self.assertEqual(True, request.response.locked)
         except Exception, e:
             self.fail(str(e))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'plone.transformchain.disable': False}, request.environ)
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'plone.transformchain.disable': False},
+            request.environ
+        )
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule'],
+             'X-Cache-Operation': ['op1'],
+             'X-Cache-Foo': ['test']},
+            dict(request.response)
+        )
 
     def test_match_body_method(self):
         provideAdapter(DefaultRulesetLookup)
@@ -973,8 +1009,8 @@ def test_match_body_method(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -986,9 +1022,9 @@ def modifyResponse(self, rulename, response):
             def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 response.setStatus(200)
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         resource = DummyResource()
         request = DummyRequest(resource.index_html, DummyResponse())
@@ -996,18 +1032,24 @@ def interceptResponse(self, rulename, response):
             intercept(DummyEvent(request))
             self.fail()
         except Intercepted, e:
-            self.assertEquals(u"dummy", e.responseBody)
-            self.assertEquals(200, e.status)
-            self.assertEquals(200, request.response.status)
-            self.assertEquals(True, request.response.locked)
+            self.assertEqual(u'dummy', e.responseBody)
+            self.assertEqual(200, e.status)
+            self.assertEqual(200, request.response.status)
+            self.assertEqual(True, request.response.locked)
         except Exception, e:
             self.fail(str(e))
 
-        self.assertEquals({'PUBLISHED': resource.index_html}, dict(request))
-        self.assertEquals({'plone.transformchain.disable': True}, request.environ)
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': resource.index_html}, dict(request))
+        self.assertEqual(
+            {'plone.transformchain.disable': True},
+            request.environ
+        )
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule'],
+             'X-Cache-Operation': ['op1'],
+             'X-Cache-Foo': ['test']},
+            dict(request.response)
+        )
 
     def test_off_switch(self):
         provideAdapter(DefaultRulesetLookup)
@@ -1021,8 +1063,8 @@ def test_off_switch(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -1033,21 +1075,21 @@ def modifyResponse(self, rulename, response):
 
             def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_dont_swallow_conflict_error(self):
 
         @implementer(IRulesetLookup)
+        @adapter(Interface, Interface)
         class DummyRulesetLookup(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -1072,15 +1114,15 @@ def __call__(self):
     def test_swallow_other_error(self):
 
         @implementer(IRulesetLookup)
+        @adapter(Interface, Interface)
         class DummyRulesetLookup(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def __call__(self):
-                raise AttributeError("Should be swallowed and logged")
+                raise AttributeError('Should be swallowed and logged')
 
         provideAdapter(DummyRulesetLookup)
 
@@ -1096,15 +1138,16 @@ def __call__(self):
 
         try:
             intercept(DummyEvent(request))
-        except:
-            self.fail("Intercept should not raise")
+        except Exception:
+            self.fail('Intercept should not raise')
 
     def test_exception_view(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
-        exc = Intercepted(status=200, responseBody=u"Test")
+        exc = Intercepted(status=200, responseBody=u'Test')
         excView = InterceptorResponse(exc, request)
-        self.assertEquals(u"Test", excView())
+        self.assertEqual(u'Test', excView())
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/tests/test_lookup.py b/plone/caching/tests/test_lookup.py
index c02621c..a146717 100644
--- a/plone/caching/tests/test_lookup.py
+++ b/plone/caching/tests/test_lookup.py
@@ -9,16 +9,19 @@
 class DummyView(object):
     pass
 
+
 class DummyResponse(dict):
 
     def addHeader(self, name, value):
         self.setdefault(name, []).append(value)
 
+
 class DummyRequest(dict):
     def __init__(self, published, response):
         self['PUBLISHED'] = published
         self.response = response
 
+
 class TestLookup(unittest.TestCase):
 
     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
@@ -26,13 +29,14 @@ class TestLookup(unittest.TestCase):
     def test_no_cache_rule(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
-        self.assertEquals(None, DefaultRulesetLookup(view, request)())
+        self.assertEqual(None, DefaultRulesetLookup(view, request)())
 
     def test_match(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
-        self.assertEquals('testrule', DefaultRulesetLookup(view, request)())
+        self.assertEqual('testrule', DefaultRulesetLookup(view, request)())
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py
index e7cfa08..73472d4 100644
--- a/plone/caching/tests/test_operations.py
+++ b/plone/caching/tests/test_operations.py
@@ -6,7 +6,7 @@
 from plone.registry import Record
 from plone.registry import Registry
 from plone.registry.interfaces import IRegistry
-from zope.component import adapts
+from zope.component import adapter
 from zope.component import provideAdapter
 from zope.component import provideUtility
 from zope.interface import implementer
@@ -17,9 +17,11 @@
 
 _marker = object()
 
+
 class DummyView(object):
     pass
 
+
 class DummyResponse(dict):
 
     def addHeader(self, name, value):
@@ -28,6 +30,7 @@ def addHeader(self, name, value):
     def setHeader(self, name, value):
         self[name] = value
 
+
 class DummyRequest(dict):
     def __init__(self, published, response):
         self['PUBLISHED'] = published
@@ -50,13 +53,15 @@ def test_no_option(self):
         ret = chain.interceptResponse('testrule', request.response)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals(None, ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual(None, ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operations_list_not_set(self):
 
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List())
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List())
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -65,13 +70,15 @@ def test_operations_list_not_set(self):
         ret = chain.interceptResponse('testrule', request.response)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals(None, ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual(None, ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operations_empty(self):
 
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), [])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), [])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -80,13 +87,15 @@ def test_operations_empty(self):
         ret = chain.interceptResponse('testrule', request.response)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals(None, ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual(None, ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_chained_operations_not_found(self):
 
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), ['op1'])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), ['op1'])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -94,99 +103,116 @@ def test_chained_operations_not_found(self):
         chain = Chain(view, request)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_multiple_operations_one_found(self):
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), ['op1', 'op2'])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), ['op1', 'op2'])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def interceptResponse(self, rulename, response):
-                return u"foo"
+                return u'foo'
 
             def modifyResponse(self, rulename, response):
                 response['X-Mutated'] = rulename
 
-        provideAdapter(DummyOperation, name="op2")
+        provideAdapter(DummyOperation, name='op2')
 
         chain = Chain(view, request)
         ret = chain.interceptResponse('testrule', request.response)
 
-        self.assertEquals(u"foo", ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Chain-Operations': 'op2'}, dict(request.response))
+        self.assertEqual(u'foo', ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Chain-Operations': 'op2'},
+            dict(request.response)
+        )
 
         request = DummyRequest(view, DummyResponse())
         chain = Chain(view, request)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Mutated': 'testrule',
-                           'X-Cache-Chain-Operations': 'op2'}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Mutated': 'testrule',
+             'X-Cache-Chain-Operations': 'op2'},
+            dict(request.response)
+        )
 
     def test_multiple_operations_multiple_found(self):
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), ['op1', 'op2'])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), ['op1', 'op2'])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation1(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def interceptResponse(self, rulename, response):
-                return u"foo"
+                return u'foo'
 
             def modifyResponse(self, rulename, response):
                 response['X-Mutated-1'] = rulename
 
-        provideAdapter(DummyOperation1, name="op1")
+        provideAdapter(DummyOperation1, name='op1')
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation2(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def interceptResponse(self, rulename, response):
-                return u"bar"
+                return u'bar'
 
             def modifyResponse(self, rulename, response):
                 response['X-Mutated-2'] = rulename
 
-        provideAdapter(DummyOperation2, name="op2")
+        provideAdapter(DummyOperation2, name='op2')
 
         chain = Chain(view, request)
         ret = chain.interceptResponse('testrule', request.response)
 
-        self.assertEquals(u"foo", ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Chain-Operations': 'op1'}, dict(request.response))
+        self.assertEqual(u'foo', ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Chain-Operations': 'op1'},
+            dict(request.response)
+        )
 
         request = DummyRequest(view, DummyResponse())
         chain = Chain(view, request)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Mutated-1': 'testrule',
-                           'X-Mutated-2': 'testrule',
-                           'X-Cache-Chain-Operations': 'op1; op2'}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Mutated-1': 'testrule',
+             'X-Mutated-2': 'testrule',
+             'X-Cache-Chain-Operations': 'op1; op2'},
+            dict(request.response)
+        )
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py
index ef0c79d..30e9833 100644
--- a/plone/caching/tests/test_utils.py
+++ b/plone/caching/tests/test_utils.py
@@ -17,39 +17,70 @@
 
 _marker = object()
 
+
 class TestLookupOption(unittest.TestCase):
 
     def tearDown(self):
         zope.component.testing.tearDown()
 
     def test_lookupOption_no_registry(self):
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.failUnless(result is _marker)
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertTrue(result is _marker)
 
     def test_lookupOption_no_record(self):
         provideUtility(Registry(), IRegistry)
 
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.failUnless(result is _marker)
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertTrue(result is _marker)
 
     def test_lookupOption_default(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test']  = Record(field.TextLine(), u"default")
+        registry.records['plone.caching.tests.test'] = Record(
+            field.TextLine(),
+            u'default'
+        )
 
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.assertEquals(u"default", result)
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertEqual(u'default', result)
 
     def test_lookupOption_override(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test'] = r = Record(field.TextLine(), u"default")
-        registry.records['plone.caching.tests.testrule.test']  = Record(FieldRef(r.__name__, r.field), u"override")
+        registry.records['plone.caching.tests.test'] = r = Record(
+            field.TextLine(),
+            u'default'
+        )
+        registry.records['plone.caching.tests.testrule.test'] = Record(
+            FieldRef(r.__name__, r.field),
+            u'override'
+        )
+
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertEqual(u'override', result)
 
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.assertEquals(u"override", result)
 
 class TestLookupOptions(unittest.TestCase):
 
@@ -61,13 +92,13 @@ def test_lookupOptions_no_registry(self):
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': _marker}, result)
+        self.assertEqual({'test1': _marker, 'test2': _marker}, result)
 
     def test_lookupOptions_no_records(self):
         provideUtility(Registry(), IRegistry)
@@ -75,68 +106,88 @@ def test_lookupOptions_no_records(self):
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': _marker}, result)
+        self.assertEqual({'test1': _marker, 'test2': _marker}, result)
 
     def test_lookupOptions_default(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
+        registry.records['plone.caching.tests.test2'] = Record(
+            field.TextLine(),
+            u'foo'
+        )
 
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': u"foo"}, result)
+        self.assertEqual({'test1': _marker, 'test2': u'foo'}, result)
 
     def test_lookupOptions_override(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test1'] = Record(field.TextLine(), u"foo")
-        registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"bar")
-        registry.records['plone.caching.tests.testrule.test2'] = Record(field.TextLine(), u"baz")
+        registry.records['plone.caching.tests.test1'] = Record(
+            field.TextLine(),
+            u'foo'
+        )
+        registry.records['plone.caching.tests.test2'] = Record(
+            field.TextLine(),
+            u'bar'
+        )
+        registry.records['plone.caching.tests.testrule.test2'] = Record(
+            field.TextLine(),
+            u'baz'
+        )
 
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': u"foo", 'test2': u"baz"}, result)
+        self.assertEqual({'test1': u'foo', 'test2': u'baz'}, result)
 
     def test_lookupOptions_named(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
+        registry.records['plone.caching.tests.test2'] = Record(
+            field.TextLine(),
+            u'foo'
+        )
 
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
-        provideUtility(DummyOperation, name=u"plone.caching.tests")
+        provideUtility(DummyOperation, name=u'plone.caching.tests')
+
+        result = lookupOptions(
+            u'plone.caching.tests',
+            'testrule',
+            default=_marker
+        )
+        self.assertEqual({'test1': _marker, 'test2': u'foo'}, result)
 
-        result = lookupOptions(u"plone.caching.tests", 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': u"foo"}, result)
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/utils.py b/plone/caching/utils.py
index b9cdf2e..f07def5 100644
--- a/plone/caching/utils.py
+++ b/plone/caching/utils.py
@@ -66,11 +66,11 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):
     if registry is None:
         return default
 
-    key = "%s.%s.%s" % (prefix, rulename, option,)
+    key = '.'.join((prefix, rulename, option,))
     if key in registry:
         return registry[key]
 
-    key = "%s.%s" % (prefix, option,)
+    key = '.'.join((prefix, option,))
     if key in registry:
         return registry[key]
 


Repository: plone.caching


Branch: refs/heads/master
Date: 2016-09-02T17:30:28-05:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.caching/commit/224700d9ce47dff2964485e266b736e162ce389e

Merge pull request #4 from plone/cleanup

Minor Cleanup

Files changed:
A setup.cfg
M CHANGES.rst
M README.rst
M plone/__init__.py
M plone/caching/__init__.py
M plone/caching/hooks.py
M plone/caching/interfaces.py
M plone/caching/lookup.py
M plone/caching/operations.py
M plone/caching/testing.py
M plone/caching/tests/test_hooks.py
M plone/caching/tests/test_lookup.py
M plone/caching/tests/test_operations.py
M plone/caching/tests/test_utils.py
M plone/caching/utils.py

diff --git a/CHANGES.rst b/CHANGES.rst
index dcfa5b7..b57ee20 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -14,7 +14,8 @@ New features:
 
 Bug fixes:
 
-- *add item here*
+- Cleanup: isort, readability, pep8, utf8-headers.
+  [jensens]
 
 
 1.1.1 (2016-08-12)
diff --git a/README.rst b/README.rst
index d5567ef..35e31ea 100644
--- a/README.rst
+++ b/README.rst
@@ -8,7 +8,6 @@ The ``plone.caching`` package provides a framework for the management of cache h
 atop `z3c.caching`_. It consists of the following elements:
 
 * An interface ``ICachingOperation``, describing components which:
-
     * Modify the response for caching purposes. The most common operation will
       be to set cache headers.
     * Intercept a request before view rendering (but after traversal and
@@ -261,24 +260,24 @@ Here is an example of an operation that sets a fixed max-age cache control
 header. It is registered for any published resource, and for any HTTP request
 (but not other types of request.)::
 
-    from zope.interface import implements, classProvides, Interface
-    from zope.component import adapts, queryMultiAdapter
-
-    from zope.publisher.interfaces.http import IHTTPRequest
-
+    from plone.caching.interfaces import _
     from plone.caching.interfaces import ICachingOperation
     from plone.caching.interfaces import ICachingOperationType
-    from plone.caching.interfaces import _
-
     from plone.caching.utils import lookupOptions
+    from zope.component import adapter
+    from zope.component import queryMultiAdapter
+    from zope.interface import implementer
+    from zope.interface import Interface
+    from zope.interface import provider
+    from zope.publisher.interfaces.http import IHTTPRequest
 
+
+    @implementer(ICachingOperation)
+    @adapter(Interface, IHTTPRequest)
+    @provider(ICachingOperationType)
     class MaxAge(object):
-        implements(ICachingOperation)
-        adapts(Interface, IHTTPRequest)
 
         # Type metadata
-        classProvides(ICachingOperationType)
-
         title = _(u"Max age")
         description = _(u"Sets a fixed max age value")
         prefix = 'plone.caching.tests.maxage'
@@ -330,24 +329,24 @@ What about the ``interceptResponse()`` method? Here is a simple example that
 sends a 304 not modified response always. (This is probably not very useful,
 but it serves as an example.)::
 
-    from zope.interface import implements, classProvides, Interface
-    from zope.component import adapts, queryMultiAdapter
-
-    from zope.publisher.interfaces.http import IHTTPRequest
-
+    from plone.caching.interfaces import _
     from plone.caching.interfaces import ICachingOperation
     from plone.caching.interfaces import ICachingOperationType
-    from plone.caching.interfaces import _
-
     from plone.caching.utils import lookupOptions
+    from zope.component import adapter
+    from zope.component import queryMultiAdapter
+    from zope.interface import implementer
+    from zope.interface import Interface
+    from zope.interface import provider
+    from zope.publisher.interfaces.http import IHTTPRequest
 
+
+    @implementer(ICachingOperation)
+    @adapter(Interface, IHTTPRequest)
+    @provider(ICachingOperationType)
     class Always304(object):
-        implements(ICachingOperation)
-        adapts(Interface, IHTTPRequest)
 
         # Type metadata
-        classProvides(ICachingOperationType)
-
         title = _(u"Always send 304")
         description = _(u"It's not modified, dammit!")
         prefix = 'plone.caching.tests.always304'
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/caching/__init__.py b/plone/caching/__init__.py
index e69de29..40a96af 100644
--- a/plone/caching/__init__.py
+++ b/plone/caching/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/plone/caching/hooks.py b/plone/caching/hooks.py
index a97b018..67599e5 100644
--- a/plone/caching/hooks.py
+++ b/plone/caching/hooks.py
@@ -1,27 +1,24 @@
-import logging
-
+# -*- coding: utf-8 -*-
+from plone.caching.interfaces import X_CACHE_OPERATION_HEADER
+from plone.caching.interfaces import X_CACHE_RULE_HEADER
+from plone.caching.utils import findOperation
+from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY
+from plone.transformchain.interfaces import ITransform
+from ZODB.POSException import ConflictError
+from zope.component import adapter
+from zope.globalrequest import getRequest
+from zope.interface import alsoProvides
 from zope.interface import implementer
 from zope.interface import Interface
-from zope.interface import alsoProvides
-
-from zope.component import adapts, adapter
-
-from zope.globalrequest import getRequest
-
 from ZPublisher.interfaces import IPubAfterTraversal
 from ZPublisher.interfaces import IPubBeforeStreaming
-from ZODB.POSException import ConflictError
-
-from plone.transformchain.interfaces import ITransform
-from plone.transformchain.interfaces import DISABLE_TRANSFORM_REQUEST_KEY
 
-from plone.caching.interfaces import X_CACHE_RULE_HEADER
-from plone.caching.interfaces import X_CACHE_OPERATION_HEADER
+import logging
 
-from plone.caching.utils import findOperation
 
 logger = logging.getLogger('plone.caching')
 
+
 class IStreamedResponse(Interface):
     """Marker applied when we intercepted a streaming response. This allows
     us to avoid applying the same rules twice, since the normal hook may also
@@ -29,6 +26,7 @@ class IStreamedResponse(Interface):
     and after the response has been sent).
     """
 
+
 class Intercepted(Exception):
     """Exception raised in order to abort regular processing before the
     published resource (e.g. a view) is called, and render a specific response
@@ -42,6 +40,7 @@ def __init__(self, status=304, responseBody=u""):
         self.status = status
         self.responseBody = responseBody
 
+
 class InterceptorResponse(object):
     """View for the Intercepted exception, serving to return an empty
     response in the case of an intercepted response.
@@ -54,6 +53,7 @@ def __init__(self, context, request):
     def __call__(self):
         return self.context.responseBody
 
+
 @adapter(IPubAfterTraversal)
 def intercept(event):
     """Invoke the interceptResponse() method of a caching operation, if one
@@ -68,25 +68,29 @@ def intercept(event):
     try:
         request = event.request
         published = request.get('PUBLISHED', None)
-
         rule, operationName, operation = findOperation(request)
 
         if rule is None:
             return
 
         request.response.setHeader(X_CACHE_RULE_HEADER, rule)
-        logger.debug("Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation)
+        logger.debug(
+            'Published: %s Ruleset: %s Operation: %s',
+            repr(published),
+            rule,
+            operation
+        )
 
         if operation is not None:
-
             responseBody = operation.interceptResponse(rule, request.response)
 
             if responseBody is not None:
-
                 # Only put this in the response if the operation actually
                 # intercepted something
-
-                request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)
+                request.response.setHeader(
+                    X_CACHE_OPERATION_HEADER,
+                    operationName
+                )
 
                 # Stop any post-processing, including the operation's response
                 # modification
@@ -105,10 +109,15 @@ def intercept(event):
         raise
     except Intercepted:
         raise
-    except:
-        logging.exception("Swallowed exception in plone.caching IPubAfterTraversal event handler")
+    except Exception:
+        logging.exception(
+            'Swallowed exception in plone.caching IPubAfterTraversal event '
+            'handler'
+        )
+
 
 @implementer(ITransform)
+@adapter(Interface, Interface)
 class MutatorTransform(object):
     """Transformation using plone.transformchain.
 
@@ -123,7 +132,6 @@ class MutatorTransform(object):
     response body. Instead, we look up caching operations which can modify
     response headers and perform other caching functions.
     """
-    adapts(Interface, Interface)
 
     order = 12000
 
@@ -144,7 +152,6 @@ def transformIterable(self, result, encoding):
         return None
 
     def mutate(self):
-
         request = self.request
 
         # Abort if this was a streamed request handled by our event handler
@@ -153,23 +160,27 @@ def mutate(self):
             return
 
         published = request.get('PUBLISHED', None)
-
         rule, operationName, operation = findOperation(request)
 
         if rule is None:
             return
 
         request.response.setHeader(X_CACHE_RULE_HEADER, rule)
-        logger.debug("Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation)
+        logger.debug(
+            'Published: %s Ruleset: %s Operation: %s',
+            repr(published),
+            rule,
+            operation
+        )
 
         if operation is not None:
-
             request.response.setHeader(X_CACHE_OPERATION_HEADER, operationName)
             operation.modifyResponse(rule, request.response)
 
 # Hook for streaming responses - does not use plone.transformchain, since
 # sequencing is less likely to be an issue here
 
+
 @adapter(IPubBeforeStreaming)
 def modifyStreamingResponse(event):
     """Invoke the modifyResponse() method of a caching operation, if one
@@ -196,9 +207,13 @@ def modifyStreamingResponse(event):
         return
 
     response.setHeader(X_CACHE_RULE_HEADER, rule)
-    logger.debug("Published: %s Ruleset: %s Operation: %s", repr(published), rule, operation)
+    logger.debug(
+        'Published: %s Ruleset: %s Operation: %s',
+        repr(published),
+        rule,
+        operation
+    )
 
     if operation is not None:
-
         response.setHeader(X_CACHE_OPERATION_HEADER, operationName)
         operation.modifyResponse(rule, response)
diff --git a/plone/caching/interfaces.py b/plone/caching/interfaces.py
index e77596a..6886608 100644
--- a/plone/caching/interfaces.py
+++ b/plone/caching/interfaces.py
@@ -1,34 +1,38 @@
+# -*- coding: utf-8 -*-
+from zope import schema
+from zope.interface import Interface
+
 import zope.i18nmessageid
 
-from zope.interface import Interface
-from zope import schema
 
 _ = zope.i18nmessageid.MessageFactory('plone')
 
-X_CACHE_RULE_HEADER      = 'X-Cache-Rule'
+X_CACHE_RULE_HEADER = 'X-Cache-Rule'
 X_CACHE_OPERATION_HEADER = 'X-Cache-Operation'
 
+
 class ICacheSettings(Interface):
     """Settings expected to be found in plone.registry
     """
 
     enabled = schema.Bool(
-            title=_(u"Globally enabled"),
-            description=_(u"If not set, no caching operations will be attempted"),
-            default=False,
-        )
+        title=_(u'Globally enabled'),
+        description=_(u'If not set, no caching operations will be attempted'),
+        default=False,
+    )
 
     operationMapping = schema.Dict(
-            title=_(u"Rule set/operation mapping"),
-            description=_(u"Maps rule set names to operation names"),
-            key_type=schema.DottedName(title=_(u"Rule set name")),
-            value_type=schema.DottedName(title=_(u"Caching operation name")),
-        )
+        title=_(u'Rule set/operation mapping'),
+        description=_(u'Maps rule set names to operation names'),
+        key_type=schema.DottedName(title=_(u'Rule set name')),
+        value_type=schema.DottedName(title=_(u'Caching operation name')),
+    )
 
 #
 #  Cache operations
 #
 
+
 class ICachingOperation(Interface):
     """Represents a caching operation, typically setting of response headers
     and/or returning of an intercepted response.
@@ -73,19 +77,20 @@ class ICachingOperationType(Interface):
 
     The usual pattern is::
 
-        from zope.interface import implements, classProvides, Interface
-        from zope.component import adapts
-
         from plone.caching.interfaces import ICachingOperation
         from plone.caching.interfaces import ICachingOperationType
-
         from plone.caching.utils import lookupOptions
+        from zope.component import adapter
+        from zope.interface import implementer
+        from zope.interface import Interface
+        from zope.interface import provider
+
 
+        @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
+        @provider(ICachingOperationType)
         class SomeOperation(object):
-            implements(ICachingOperation)
-            adapts(Interface, Interface)
 
-            classProvides(ICachingOperationType)
             title = u"Some operation"
             description = u"Operation description"
             prefix = 'my.package.operation1'
@@ -115,36 +120,36 @@ def __call__(self, rulename, response):
     """
 
     title = schema.TextLine(
-            title=_(u"Title"),
-            description=_(u"A descriptive title for the operation"),
-        )
+        title=_(u'Title'),
+        description=_(u'A descriptive title for the operation'),
+    )
 
     description = schema.Text(
-            title=_(u"Description"),
-            description=_(u"A longer description for the operaton"),
-            required=False,
-        )
+        title=_(u'Description'),
+        description=_(u'A longer description for the operaton'),
+        required=False,
+    )
 
     prefix = schema.DottedName(
-            title=_(u"Registry prefix"),
-            description=_(u"Prefix for records in the registry pertaining to "
-                          u"this operation. This, alongside the next "
-                          u"parameter, allows the user interface to present "
-                          u"relevant configuration options for this "
-                          u"operation."),
-            required=False,
-        )
+        title=_(u'Registry prefix'),
+        description=_(u'Prefix for records in the registry pertaining to '
+                      u'this operation. This, alongside the next '
+                      u'parameter, allows the user interface to present '
+                      u'relevant configuration options for this '
+                      u'operation.'),
+        required=False,
+    )
 
     options = schema.Tuple(
-            title=_(u"Registry options"),
-            description=_(u"A tuple of options which can be used to "
-                          u"configure this operation. An option is looked "
-                          u"up in the registry by concatenating the prefix "
-                          u"with the option name, optionally preceded by "
-                          u"the rule set name, to allow per-rule overrides."),
-            value_type=schema.DottedName(),
-            required=False,
-        )
+        title=_(u'Registry options'),
+        description=_(u'A tuple of options which can be used to '
+                      u'configure this operation. An option is looked '
+                      u'up in the registry by concatenating the prefix '
+                      u'with the option name, optionally preceded by '
+                      u'the rule set name, to allow per-rule overrides.'),
+        value_type=schema.DottedName(),
+        required=False,
+    )
 
 
 #
diff --git a/plone/caching/lookup.py b/plone/caching/lookup.py
index 04fe060..d9f495f 100644
--- a/plone/caching/lookup.py
+++ b/plone/caching/lookup.py
@@ -1,18 +1,19 @@
-from zope.interface import Interface
+# -*- coding: utf-8 -*-
+from plone.caching.interfaces import IRulesetLookup
+from z3c.caching.registry import lookup
+from zope.component import adapter
 from zope.interface import implementer
-from zope.component import adapts
+from zope.interface import Interface
 
-from z3c.caching.registry import lookup
-from plone.caching.interfaces import IRulesetLookup
 
 @implementer(IRulesetLookup)
+@adapter(Interface, Interface)
 class DefaultRulesetLookup(object):
     """Default ruleset lookup.
 
     Only override this if you have very special needs. The safest option is
     to use ``z3c.caching`` to set rulesets.
     """
-    adapts(Interface, Interface)
 
     def __init__(self, published, request):
         self.published = published
diff --git a/plone/caching/operations.py b/plone/caching/operations.py
index bfe8746..1ca1427 100644
--- a/plone/caching/operations.py
+++ b/plone/caching/operations.py
@@ -1,14 +1,18 @@
-from zope.interface import implementer, provider, Interface
-from zope.component import adapts, queryMultiAdapter
-
+# -*- coding: utf-8 -*-
+from plone.caching.interfaces import _
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.interfaces import ICachingOperationType
-from plone.caching.interfaces import _
-
 from plone.caching.utils import lookupOptions
+from zope.component import adapter
+from zope.component import queryMultiAdapter
+from zope.interface import implementer
+from zope.interface import Interface
+from zope.interface import provider
+
 
 @implementer(ICachingOperation)
 @provider(ICachingOperationType)
+@adapter(Interface, Interface)
 class Chain(object):
     """Caching operation which chains together several other operations.
 
@@ -23,8 +27,6 @@ class Chain(object):
 
     The option must be a sequence type (e.g. a ``Tuple``).
     """
-    adapts(Interface, Interface)
-
     title = _(u"Chain")
     description = _(u"Allows multiple operations to be chained together")
     prefix = 'plone.caching.operations.chain'
@@ -42,15 +44,21 @@ def interceptResponse(self, rulename, response):
         if options['operations']:
             for name in options['operations']:
 
-                operation = queryMultiAdapter((self.published, self.request),
-                                             ICachingOperation, name=name)
+                operation = queryMultiAdapter(
+                    (self.published, self.request),
+                    ICachingOperation,
+                    name=name
+                )
 
                 if operation is not None:
                     chained.append(name)
 
                     value = operation.interceptResponse(rulename, response)
                     if value is not None:
-                        response.setHeader('X-Cache-Chain-Operations', '; '.join(chained))
+                        response.setHeader(
+                            'X-Cache-Chain-Operations',
+                            '; '.join(chained)
+                        )
                         return value
 
     def modifyResponse(self, rulename, response):
@@ -61,8 +69,11 @@ def modifyResponse(self, rulename, response):
         if options['operations']:
             for name in options['operations']:
 
-                operation = queryMultiAdapter((self.published, self.request),
-                                             ICachingOperation, name=name)
+                operation = queryMultiAdapter(
+                    (self.published, self.request),
+                    ICachingOperation,
+                    name=name
+                )
 
                 if operation is not None:
                     chained.append(name)
diff --git a/plone/caching/testing.py b/plone/caching/testing.py
index 94252c7..8f1c28a 100644
--- a/plone/caching/testing.py
+++ b/plone/caching/testing.py
@@ -1,8 +1,10 @@
+# -*- coding: utf-8 -*-
 from plone.testing import Layer
 from plone.testing.zca import UNIT_TESTING
 from z3c.caching.registry import getGlobalRulesetRegistry
 from z3c.caching.registry import RulesetRegistry
 from zope.component import provideAdapter
+
 import zope.component.testing
 
 
diff --git a/plone/caching/tests/test_hooks.py b/plone/caching/tests/test_hooks.py
index e4fa6a2..a64490e 100644
--- a/plone/caching/tests/test_hooks.py
+++ b/plone/caching/tests/test_hooks.py
@@ -1,40 +1,40 @@
-import unittest
-
-from zope.component import adapts, provideUtility, provideAdapter, getUtility
-from zope.interface import implementer, Interface
-
-from zope.globalrequest import setRequest, clearRequest
-
-import z3c.caching.registry
-
-from plone.registry.interfaces import IRegistry
-
-from plone.registry import Registry
-from plone.registry.fieldfactory import persistentFieldAdapter
-
-from plone.caching.interfaces import IRulesetLookup
-from plone.caching.interfaces import ICachingOperation
-from plone.caching.interfaces import ICacheSettings
-
-from plone.caching.lookup import DefaultRulesetLookup
-
-from plone.caching.hooks import MutatorTransform
+# -*- coding: utf-8 -*-
 from plone.caching.hooks import intercept
-from plone.caching.hooks import modifyStreamingResponse
 from plone.caching.hooks import Intercepted
 from plone.caching.hooks import InterceptorResponse
-
+from plone.caching.hooks import modifyStreamingResponse
+from plone.caching.hooks import MutatorTransform
+from plone.caching.interfaces import ICacheSettings
+from plone.caching.interfaces import ICachingOperation
+from plone.caching.interfaces import IRulesetLookup
+from plone.caching.lookup import DefaultRulesetLookup
 from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
-
+from plone.registry import Registry
+from plone.registry.fieldfactory import persistentFieldAdapter
+from plone.registry.interfaces import IRegistry
 from ZODB.POSException import ConflictError
+from zope.component import adapter
+from zope.component import getUtility
+from zope.component import provideAdapter
+from zope.component import provideUtility
+from zope.globalrequest import clearRequest
+from zope.globalrequest import setRequest
+from zope.interface import implementer
+from zope.interface import Interface
+
+import unittest
+import z3c.caching.registry
+
 
 class DummyView(object):
     pass
 
+
 class DummyResource(object):
     def index_html(self):
         return 'binary data'
 
+
 class DummyResponse(dict):
 
     locked = None
@@ -49,23 +49,28 @@ def setStatus(self, value, lock=None):
         self.status = value
         if lock is not None:
             self.locked = lock
+
     def getStatus(self):
         return self.status
 
+
 class DummyRequest(dict):
     def __init__(self, published, response):
         self['PUBLISHED'] = published
         self.response = response
         self.environ = {}
 
+
 class DummyEvent(object):
     def __init__(self, request):
         self.request = request
 
+
 class DummyStreamingEvent(object):
     def __init__(self, response):
         self.response = response
 
+
 class TestMutateResponse(unittest.TestCase):
 
     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
@@ -83,20 +88,20 @@ def test_no_published_object(self):
 
         request = DummyRequest(None, DummyResponse())
 
-        MutatorTransform(None, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(None, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': None}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': None}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_registry(self):
         provideAdapter(DefaultRulesetLookup)
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_records(self):
         provideAdapter(DefaultRulesetLookup)
@@ -104,10 +109,10 @@ def test_no_records(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_mapping(self):
         provideAdapter(DefaultRulesetLookup)
@@ -122,10 +127,10 @@ def test_no_mapping(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_cache_rule(self):
         provideAdapter(DefaultRulesetLookup)
@@ -140,10 +145,10 @@ def test_no_cache_rule(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_lookup_adapter(self):
         provideUtility(Registry(), IRegistry)
@@ -158,10 +163,10 @@ def test_no_lookup_adapter(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operation_name_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -177,10 +182,13 @@ def test_operation_name_not_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_operation_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -196,10 +204,13 @@ def test_operation_not_found(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_match_unicode(self):
         provideAdapter(DefaultRulesetLookup)
@@ -213,8 +224,8 @@ def test_match_unicode(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -226,17 +237,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_bytes(self):
         provideAdapter(DefaultRulesetLookup)
@@ -250,8 +261,8 @@ def test_match_bytes(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -263,17 +274,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformBytes("", "utf-8")
+        MutatorTransform(view, request).transformBytes('', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_iterable(self):
         provideAdapter(DefaultRulesetLookup)
@@ -287,8 +298,8 @@ def test_match_iterable(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -300,17 +311,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformIterable([""], "utf-8")
+        MutatorTransform(view, request).transformIterable([''], 'utf-8')
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_method(self):
         provideAdapter(DefaultRulesetLookup)
@@ -324,8 +335,8 @@ def test_match_method(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -337,17 +348,17 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         resource = DummyResource()
         request = DummyRequest(resource.index_html, DummyResponse())
 
-        MutatorTransform(resource, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(resource, request).transformUnicode(u'', 'utf-8')
 
-        self.assertEquals({'PUBLISHED': resource.index_html}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': resource.index_html}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_off_switch(self):
         provideAdapter(DefaultRulesetLookup)
@@ -361,8 +372,8 @@ def test_off_switch(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -374,15 +385,16 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response['X-Mutated'] = rulename
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
-        MutatorTransform(view, request).transformUnicode(u"", "utf-8")
+        MutatorTransform(view, request).transformUnicode(u'', 'utf-8')
+
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
 
 class TestMutateResponseStreaming(unittest.TestCase):
 
@@ -408,8 +420,8 @@ def test_no_published_object(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': None}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': None}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_registry(self):
         provideAdapter(DefaultRulesetLookup)
@@ -421,8 +433,8 @@ def test_no_registry(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_records(self):
         provideAdapter(DefaultRulesetLookup)
@@ -435,8 +447,8 @@ def test_no_records(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_mapping(self):
         provideAdapter(DefaultRulesetLookup)
@@ -455,8 +467,8 @@ def test_no_mapping(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_cache_rule(self):
         provideAdapter(DefaultRulesetLookup)
@@ -475,8 +487,8 @@ def test_no_cache_rule(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_lookup_adapter(self):
         provideUtility(Registry(), IRegistry)
@@ -495,8 +507,8 @@ def test_no_lookup_adapter(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operation_name_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -516,8 +528,11 @@ def test_operation_name_not_found(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_operation_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -537,8 +552,11 @@ def test_operation_not_found(self):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_match_unicode(self):
         provideAdapter(DefaultRulesetLookup)
@@ -552,8 +570,8 @@ def test_match_unicode(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -565,7 +583,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -574,10 +592,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_bytes(self):
         provideAdapter(DefaultRulesetLookup)
@@ -591,8 +609,8 @@ def test_match_bytes(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -604,7 +622,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -613,10 +631,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_iterable(self):
         provideAdapter(DefaultRulesetLookup)
@@ -630,8 +648,8 @@ def test_match_iterable(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -643,7 +661,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -652,10 +670,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_method(self):
         provideAdapter(DefaultRulesetLookup)
@@ -669,8 +687,8 @@ def test_match_method(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -682,7 +700,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         resource = DummyResource()
         response = DummyResponse()
@@ -691,10 +709,10 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': resource.index_html}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': resource.index_html}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Operation': ['op1'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_off_switch(self):
         provideAdapter(DefaultRulesetLookup)
@@ -708,8 +726,8 @@ def test_off_switch(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -721,7 +739,7 @@ def interceptResponse(self, rulename, response):
             def modifyResponse(self, rulename, response):
                 response['X-Mutated'] = rulename
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         response = DummyResponse()
@@ -730,8 +748,9 @@ def modifyResponse(self, rulename, response):
 
         modifyStreamingResponse(DummyStreamingEvent(response))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
+
 
 class TestIntercept(unittest.TestCase):
 
@@ -751,8 +770,8 @@ def test_no_published_object(self):
         request = DummyRequest(None, DummyResponse())
 
         intercept(DummyEvent(request))
-        self.assertEquals({'PUBLISHED': None}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': None}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_registry(self):
         provideAdapter(DefaultRulesetLookup)
@@ -761,8 +780,8 @@ def test_no_registry(self):
 
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_records(self):
         provideAdapter(DefaultRulesetLookup)
@@ -773,8 +792,8 @@ def test_no_records(self):
 
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_cache_rule(self):
         provideAdapter(DefaultRulesetLookup)
@@ -790,8 +809,8 @@ def test_no_cache_rule(self):
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_no_mapping(self):
         provideAdapter(DefaultRulesetLookup)
@@ -809,8 +828,8 @@ def test_no_mapping(self):
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operation_not_found(self):
         provideAdapter(DefaultRulesetLookup)
@@ -827,8 +846,11 @@ def test_operation_not_found(self):
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule']},
+            dict(request.response)
+        )
 
     def test_match_abort(self):
         provideAdapter(DefaultRulesetLookup)
@@ -842,8 +864,8 @@ def test_match_abort(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -856,15 +878,15 @@ def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 return None
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
         intercept(DummyEvent(request))
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({'X-Cache-Rule': ['testrule'],
+                          'X-Cache-Foo': ['test']}, dict(request.response))
 
     def test_match_body(self):
         provideAdapter(DefaultRulesetLookup)
@@ -878,8 +900,8 @@ def test_match_body(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -891,9 +913,9 @@ def modifyResponse(self, rulename, response):
             def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 response.setStatus(304)
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -901,18 +923,24 @@ def interceptResponse(self, rulename, response):
             intercept(DummyEvent(request))
             self.fail()
         except Intercepted, e:
-            self.assertEquals(u"dummy", e.responseBody)
-            self.assertEquals(304, e.status)
-            self.assertEquals(304, request.response.status)
-            self.assertEquals(True, request.response.locked)
+            self.assertEqual(u'dummy', e.responseBody)
+            self.assertEqual(304, e.status)
+            self.assertEqual(304, request.response.status)
+            self.assertEqual(True, request.response.locked)
         except Exception, e:
             self.fail(str(e))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'plone.transformchain.disable': True}, request.environ)
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'plone.transformchain.disable': True},
+            request.environ
+        )
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule'],
+             'X-Cache-Operation': ['op1'],
+             'X-Cache-Foo': ['test']},
+            dict(request.response)
+        )
 
     def test_match_body_explicitly_enable_transform_chain(self):
         provideAdapter(DefaultRulesetLookup)
@@ -926,8 +954,8 @@ def test_match_body_explicitly_enable_transform_chain(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -940,9 +968,9 @@ def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 response.setStatus(304)
                 self.request.environ['plone.transformchain.disable'] = False
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -950,18 +978,24 @@ def interceptResponse(self, rulename, response):
             intercept(DummyEvent(request))
             self.fail()
         except Intercepted, e:
-            self.assertEquals(u"dummy", e.responseBody)
-            self.assertEquals(304, e.status)
-            self.assertEquals(304, request.response.status)
-            self.assertEquals(True, request.response.locked)
+            self.assertEqual(u'dummy', e.responseBody)
+            self.assertEqual(304, e.status)
+            self.assertEqual(304, request.response.status)
+            self.assertEqual(True, request.response.locked)
         except Exception, e:
             self.fail(str(e))
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'plone.transformchain.disable': False}, request.environ)
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'plone.transformchain.disable': False},
+            request.environ
+        )
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule'],
+             'X-Cache-Operation': ['op1'],
+             'X-Cache-Foo': ['test']},
+            dict(request.response)
+        )
 
     def test_match_body_method(self):
         provideAdapter(DefaultRulesetLookup)
@@ -975,8 +1009,8 @@ def test_match_body_method(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -988,9 +1022,9 @@ def modifyResponse(self, rulename, response):
             def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
                 response.setStatus(200)
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         resource = DummyResource()
         request = DummyRequest(resource.index_html, DummyResponse())
@@ -998,18 +1032,24 @@ def interceptResponse(self, rulename, response):
             intercept(DummyEvent(request))
             self.fail()
         except Intercepted, e:
-            self.assertEquals(u"dummy", e.responseBody)
-            self.assertEquals(200, e.status)
-            self.assertEquals(200, request.response.status)
-            self.assertEquals(True, request.response.locked)
+            self.assertEqual(u'dummy', e.responseBody)
+            self.assertEqual(200, e.status)
+            self.assertEqual(200, request.response.status)
+            self.assertEqual(True, request.response.locked)
         except Exception, e:
             self.fail(str(e))
 
-        self.assertEquals({'PUBLISHED': resource.index_html}, dict(request))
-        self.assertEquals({'plone.transformchain.disable': True}, request.environ)
-        self.assertEquals({'X-Cache-Rule': ['testrule'],
-                           'X-Cache-Operation': ['op1'],
-                           'X-Cache-Foo': ['test']}, dict(request.response))
+        self.assertEqual({'PUBLISHED': resource.index_html}, dict(request))
+        self.assertEqual(
+            {'plone.transformchain.disable': True},
+            request.environ
+        )
+        self.assertEqual(
+            {'X-Cache-Rule': ['testrule'],
+             'X-Cache-Operation': ['op1'],
+             'X-Cache-Foo': ['test']},
+            dict(request.response)
+        )
 
     def test_off_switch(self):
         provideAdapter(DefaultRulesetLookup)
@@ -1023,8 +1063,8 @@ def test_off_switch(self):
         settings.operationMapping = {'testrule': 'op1'}
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -1035,21 +1075,21 @@ def modifyResponse(self, rulename, response):
 
             def interceptResponse(self, rulename, response):
                 response.addHeader('X-Cache-Foo', 'test')
-                return u"dummy"
+                return u'dummy'
 
-        provideAdapter(DummyOperation, name="op1")
+        provideAdapter(DummyOperation, name='op1')
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
         intercept(DummyEvent(request))
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_dont_swallow_conflict_error(self):
 
         @implementer(IRulesetLookup)
+        @adapter(Interface, Interface)
         class DummyRulesetLookup(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
@@ -1074,15 +1114,15 @@ def __call__(self):
     def test_swallow_other_error(self):
 
         @implementer(IRulesetLookup)
+        @adapter(Interface, Interface)
         class DummyRulesetLookup(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def __call__(self):
-                raise AttributeError("Should be swallowed and logged")
+                raise AttributeError('Should be swallowed and logged')
 
         provideAdapter(DummyRulesetLookup)
 
@@ -1098,15 +1138,16 @@ def __call__(self):
 
         try:
             intercept(DummyEvent(request))
-        except:
-            self.fail("Intercept should not raise")
+        except Exception:
+            self.fail('Intercept should not raise')
 
     def test_exception_view(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
-        exc = Intercepted(status=200, responseBody=u"Test")
+        exc = Intercepted(status=200, responseBody=u'Test')
         excView = InterceptorResponse(exc, request)
-        self.assertEquals(u"Test", excView())
+        self.assertEqual(u'Test', excView())
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/tests/test_lookup.py b/plone/caching/tests/test_lookup.py
index 8d7f27f..a146717 100644
--- a/plone/caching/tests/test_lookup.py
+++ b/plone/caching/tests/test_lookup.py
@@ -1,25 +1,27 @@
-import unittest
-
-import z3c.caching.registry
-
+# -*- coding: utf-8 -*-
 from plone.caching.lookup import DefaultRulesetLookup
-
 from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
 
+import unittest
+import z3c.caching.registry
+
 
 class DummyView(object):
     pass
 
+
 class DummyResponse(dict):
 
     def addHeader(self, name, value):
         self.setdefault(name, []).append(value)
 
+
 class DummyRequest(dict):
     def __init__(self, published, response):
         self['PUBLISHED'] = published
         self.response = response
 
+
 class TestLookup(unittest.TestCase):
 
     layer = IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
@@ -27,13 +29,14 @@ class TestLookup(unittest.TestCase):
     def test_no_cache_rule(self):
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
-        self.assertEquals(None, DefaultRulesetLookup(view, request)())
+        self.assertEqual(None, DefaultRulesetLookup(view, request)())
 
     def test_match(self):
         z3c.caching.registry.register(DummyView, 'testrule')
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
-        self.assertEquals('testrule', DefaultRulesetLookup(view, request)())
+        self.assertEqual('testrule', DefaultRulesetLookup(view, request)())
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/tests/test_operations.py b/plone/caching/tests/test_operations.py
index 82a3de8..73472d4 100644
--- a/plone/caching/tests/test_operations.py
+++ b/plone/caching/tests/test_operations.py
@@ -1,26 +1,27 @@
-import unittest
-
+# -*- coding: utf-8 -*-
+from plone.caching.interfaces import ICachingOperation
+from plone.caching.operations import Chain
+from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
+from plone.registry import field
+from plone.registry import Record
+from plone.registry import Registry
+from plone.registry.interfaces import IRegistry
+from zope.component import adapter
+from zope.component import provideAdapter
+from zope.component import provideUtility
 from zope.interface import implementer
 from zope.interface import Interface
 
-from zope.component import provideUtility
-from zope.component import provideAdapter
-from zope.component import adapts
-
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry, Record
-from plone.registry import field
+import unittest
 
-from plone.caching.operations import Chain
-from plone.caching.interfaces import ICachingOperation
-
-from plone.caching.testing import IMPLICIT_RULESET_REGISTRY_UNIT_TESTING
 
 _marker = object()
 
+
 class DummyView(object):
     pass
 
+
 class DummyResponse(dict):
 
     def addHeader(self, name, value):
@@ -29,6 +30,7 @@ def addHeader(self, name, value):
     def setHeader(self, name, value):
         self[name] = value
 
+
 class DummyRequest(dict):
     def __init__(self, published, response):
         self['PUBLISHED'] = published
@@ -51,13 +53,15 @@ def test_no_option(self):
         ret = chain.interceptResponse('testrule', request.response)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals(None, ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual(None, ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operations_list_not_set(self):
 
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List())
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List())
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -66,13 +70,15 @@ def test_operations_list_not_set(self):
         ret = chain.interceptResponse('testrule', request.response)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals(None, ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual(None, ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_operations_empty(self):
 
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), [])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), [])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -81,13 +87,15 @@ def test_operations_empty(self):
         ret = chain.interceptResponse('testrule', request.response)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals(None, ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual(None, ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_chained_operations_not_found(self):
 
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), ['op1'])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), ['op1'])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
@@ -95,99 +103,116 @@ def test_chained_operations_not_found(self):
         chain = Chain(view, request)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual({}, dict(request.response))
 
     def test_multiple_operations_one_found(self):
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), ['op1', 'op2'])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), ['op1', 'op2'])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def interceptResponse(self, rulename, response):
-                return u"foo"
+                return u'foo'
 
             def modifyResponse(self, rulename, response):
                 response['X-Mutated'] = rulename
 
-        provideAdapter(DummyOperation, name="op2")
+        provideAdapter(DummyOperation, name='op2')
 
         chain = Chain(view, request)
         ret = chain.interceptResponse('testrule', request.response)
 
-        self.assertEquals(u"foo", ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Chain-Operations': 'op2'}, dict(request.response))
+        self.assertEqual(u'foo', ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Chain-Operations': 'op2'},
+            dict(request.response)
+        )
 
         request = DummyRequest(view, DummyResponse())
         chain = Chain(view, request)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Mutated': 'testrule',
-                           'X-Cache-Chain-Operations': 'op2'}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Mutated': 'testrule',
+             'X-Cache-Chain-Operations': 'op2'},
+            dict(request.response)
+        )
 
     def test_multiple_operations_multiple_found(self):
-        self.registry.records["%s.operations" % Chain.prefix] = Record(field.List(), ['op1', 'op2'])
+        self.registry.records[
+            '{0}.operations'.format(Chain.prefix)
+        ] = Record(field.List(), ['op1', 'op2'])
 
         view = DummyView()
         request = DummyRequest(view, DummyResponse())
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation1(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def interceptResponse(self, rulename, response):
-                return u"foo"
+                return u'foo'
 
             def modifyResponse(self, rulename, response):
                 response['X-Mutated-1'] = rulename
 
-        provideAdapter(DummyOperation1, name="op1")
+        provideAdapter(DummyOperation1, name='op1')
 
         @implementer(ICachingOperation)
+        @adapter(Interface, Interface)
         class DummyOperation2(object):
-            adapts(Interface, Interface)
 
             def __init__(self, published, request):
                 self.published = published
                 self.request = request
 
             def interceptResponse(self, rulename, response):
-                return u"bar"
+                return u'bar'
 
             def modifyResponse(self, rulename, response):
                 response['X-Mutated-2'] = rulename
 
-        provideAdapter(DummyOperation2, name="op2")
+        provideAdapter(DummyOperation2, name='op2')
 
         chain = Chain(view, request)
         ret = chain.interceptResponse('testrule', request.response)
 
-        self.assertEquals(u"foo", ret)
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Cache-Chain-Operations': 'op1'}, dict(request.response))
+        self.assertEqual(u'foo', ret)
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Cache-Chain-Operations': 'op1'},
+            dict(request.response)
+        )
 
         request = DummyRequest(view, DummyResponse())
         chain = Chain(view, request)
         chain.modifyResponse('testrule', request.response)
 
-        self.assertEquals({'PUBLISHED': view}, dict(request))
-        self.assertEquals({'X-Mutated-1': 'testrule',
-                           'X-Mutated-2': 'testrule',
-                           'X-Cache-Chain-Operations': 'op1; op2'}, dict(request.response))
+        self.assertEqual({'PUBLISHED': view}, dict(request))
+        self.assertEqual(
+            {'X-Mutated-1': 'testrule',
+             'X-Mutated-2': 'testrule',
+             'X-Cache-Chain-Operations': 'op1; op2'},
+            dict(request.response)
+        )
+
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/tests/test_utils.py b/plone/caching/tests/test_utils.py
index c23b5a6..30e9833 100644
--- a/plone/caching/tests/test_utils.py
+++ b/plone/caching/tests/test_utils.py
@@ -1,52 +1,86 @@
-import unittest
-
-import zope.component.testing
-
+# -*- coding: utf-8 -*-
+from plone.caching.interfaces import ICachingOperationType
+from plone.caching.utils import lookupOption
+from plone.caching.utils import lookupOptions
+from plone.registry import field
+from plone.registry import FieldRef
+from plone.registry import Record
+from plone.registry import Registry
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+from zope.component import provideUtility
 from zope.interface import provider
-from zope.component import provideUtility, getUtility
 
-from plone.registry.interfaces import IRegistry
-from plone.registry import Registry, Record, FieldRef
-from plone.registry import field
+import unittest
+import zope.component.testing
 
-from plone.caching.interfaces import ICachingOperationType
-from plone.caching.utils import lookupOption, lookupOptions
 
 _marker = object()
 
+
 class TestLookupOption(unittest.TestCase):
 
     def tearDown(self):
         zope.component.testing.tearDown()
 
     def test_lookupOption_no_registry(self):
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.failUnless(result is _marker)
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertTrue(result is _marker)
 
     def test_lookupOption_no_record(self):
         provideUtility(Registry(), IRegistry)
 
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.failUnless(result is _marker)
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertTrue(result is _marker)
 
     def test_lookupOption_default(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test']  = Record(field.TextLine(), u"default")
+        registry.records['plone.caching.tests.test'] = Record(
+            field.TextLine(),
+            u'default'
+        )
 
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.assertEquals(u"default", result)
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertEqual(u'default', result)
 
     def test_lookupOption_override(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test'] = r = Record(field.TextLine(), u"default")
-        registry.records['plone.caching.tests.testrule.test']  = Record(FieldRef(r.__name__, r.field), u"override")
+        registry.records['plone.caching.tests.test'] = r = Record(
+            field.TextLine(),
+            u'default'
+        )
+        registry.records['plone.caching.tests.testrule.test'] = Record(
+            FieldRef(r.__name__, r.field),
+            u'override'
+        )
+
+        result = lookupOption(
+            'plone.caching.tests',
+            'testrule',
+            'test',
+            default=_marker
+        )
+        self.assertEqual(u'override', result)
 
-        result = lookupOption('plone.caching.tests', 'testrule', 'test', default=_marker)
-        self.assertEquals(u"override", result)
 
 class TestLookupOptions(unittest.TestCase):
 
@@ -58,13 +92,13 @@ def test_lookupOptions_no_registry(self):
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': _marker}, result)
+        self.assertEqual({'test1': _marker, 'test2': _marker}, result)
 
     def test_lookupOptions_no_records(self):
         provideUtility(Registry(), IRegistry)
@@ -72,68 +106,88 @@ def test_lookupOptions_no_records(self):
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': _marker}, result)
+        self.assertEqual({'test1': _marker, 'test2': _marker}, result)
 
     def test_lookupOptions_default(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
+        registry.records['plone.caching.tests.test2'] = Record(
+            field.TextLine(),
+            u'foo'
+        )
 
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': u"foo"}, result)
+        self.assertEqual({'test1': _marker, 'test2': u'foo'}, result)
 
     def test_lookupOptions_override(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test1'] = Record(field.TextLine(), u"foo")
-        registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"bar")
-        registry.records['plone.caching.tests.testrule.test2'] = Record(field.TextLine(), u"baz")
+        registry.records['plone.caching.tests.test1'] = Record(
+            field.TextLine(),
+            u'foo'
+        )
+        registry.records['plone.caching.tests.test2'] = Record(
+            field.TextLine(),
+            u'bar'
+        )
+        registry.records['plone.caching.tests.testrule.test2'] = Record(
+            field.TextLine(),
+            u'baz'
+        )
 
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
         result = lookupOptions(DummyOperation, 'testrule', default=_marker)
-        self.assertEquals({'test1': u"foo", 'test2': u"baz"}, result)
+        self.assertEqual({'test1': u'foo', 'test2': u'baz'}, result)
 
     def test_lookupOptions_named(self):
         provideUtility(Registry(), IRegistry)
         registry = getUtility(IRegistry)
 
-        registry.records['plone.caching.tests.test2'] = Record(field.TextLine(), u"foo")
+        registry.records['plone.caching.tests.test2'] = Record(
+            field.TextLine(),
+            u'foo'
+        )
 
         @provider(ICachingOperationType)
         class DummyOperation(object):
 
-            title = u""
-            description = u""
+            title = u''
+            description = u''
             prefix = 'plone.caching.tests'
             options = ('test1', 'test2',)
 
-        provideUtility(DummyOperation, name=u"plone.caching.tests")
+        provideUtility(DummyOperation, name=u'plone.caching.tests')
+
+        result = lookupOptions(
+            u'plone.caching.tests',
+            'testrule',
+            default=_marker
+        )
+        self.assertEqual({'test1': _marker, 'test2': u'foo'}, result)
 
-        result = lookupOptions(u"plone.caching.tests", 'testrule', default=_marker)
-        self.assertEquals({'test1': _marker, 'test2': u"foo"}, result)
 
 def test_suite():
     return unittest.defaultTestLoader.loadTestsFromName(__name__)
diff --git a/plone/caching/utils.py b/plone/caching/utils.py
index ccd619b..f07def5 100644
--- a/plone/caching/utils.py
+++ b/plone/caching/utils.py
@@ -1,14 +1,15 @@
-import types
-
-from zope.component import queryUtility, getUtility
-from zope.component import queryMultiAdapter
-
-from plone.registry.interfaces import IRegistry
-
+# -*- coding: utf-8 -*-
+from plone.caching.interfaces import ICacheSettings
 from plone.caching.interfaces import ICachingOperation
 from plone.caching.interfaces import ICachingOperationType
 from plone.caching.interfaces import IRulesetLookup
-from plone.caching.interfaces import ICacheSettings
+from plone.registry.interfaces import IRegistry
+from zope.component import getUtility
+from zope.component import queryMultiAdapter
+from zope.component import queryUtility
+
+import types
+
 
 def lookupOptions(type_, rulename, default=None):
     """Look up all options for a given caching operation type, returning
@@ -30,10 +31,17 @@ def lookupOptions(type_, rulename, default=None):
     registry = queryUtility(IRegistry)
 
     for option in getattr(type_, 'options', ()):
-        options[option] = lookupOption(type_.prefix, rulename, option, default, registry)
+        options[option] = lookupOption(
+            type_.prefix,
+            rulename,
+            option,
+            default,
+            registry
+        )
 
     return options
 
+
 def lookupOption(prefix, rulename, option, default=None, _registry=None):
     """Look up an option for a particular caching operation.
 
@@ -48,7 +56,8 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):
     override.
     """
 
-    # Avoid looking this up multiple times if we are being called from lookupOptions
+    # Avoid looking this up multiple times if we are being called
+    # from lookupOptions
     registry = _registry
 
     if registry is None:
@@ -57,16 +66,17 @@ def lookupOption(prefix, rulename, option, default=None, _registry=None):
     if registry is None:
         return default
 
-    key = "%s.%s.%s" % (prefix, rulename, option,)
+    key = '.'.join((prefix, rulename, option,))
     if key in registry:
         return registry[key]
 
-    key = "%s.%s" % (prefix, option,)
+    key = '.'.join((prefix, option,))
     if key in registry:
         return registry[key]
 
     return default
 
+
 def findOperation(request):
 
     published = request.get('PUBLISHED', None)
@@ -102,5 +112,9 @@ def findOperation(request):
     if operationName is None:
         return rule, None, None
 
-    operation = queryMultiAdapter((published, request), ICachingOperation, name=operationName)
+    operation = queryMultiAdapter(
+        (published, request),
+        ICachingOperation,
+        name=operationName
+    )
     return rule, operationName, operation
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..eda66e5
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,15 @@
+[check-manifest]
+ignore =
+    *.cfg
+    .coveragerc
+    .editorconfig
+    .gitattributes
+    bootstrap-buildout.py
+
+[isort]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
+not_skip=__init__.py
+


